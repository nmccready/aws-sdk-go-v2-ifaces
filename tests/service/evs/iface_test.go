// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package evs_test

// tests for the evs service interface for 
// this ../../../service/evs/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/evs"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/evs/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/evs/evs_iface"
	"github.com/stretchr/testify/assert"
)

func TestEvsServiceCanBeMocked(t *testing.T) {
	var iface evs_iface.IClient
	iface = &evs.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := evs.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateEnvironment", func(t *testing.T) {
        input := &evs.CreateEnvironmentInput{}
        output := &evs.CreateEnvironmentOutput{}

        mockClient.On("CreateEnvironment", ctx, input).Return(output, nil)

        result, err := mockClient.CreateEnvironment(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateEnvironmentHost", func(t *testing.T) {
        input := &evs.CreateEnvironmentHostInput{}
        output := &evs.CreateEnvironmentHostOutput{}

        mockClient.On("CreateEnvironmentHost", ctx, input).Return(output, nil)

        result, err := mockClient.CreateEnvironmentHost(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteEnvironment", func(t *testing.T) {
        input := &evs.DeleteEnvironmentInput{}
        output := &evs.DeleteEnvironmentOutput{}

        mockClient.On("DeleteEnvironment", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteEnvironment(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteEnvironmentHost", func(t *testing.T) {
        input := &evs.DeleteEnvironmentHostInput{}
        output := &evs.DeleteEnvironmentHostOutput{}

        mockClient.On("DeleteEnvironmentHost", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteEnvironmentHost(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetEnvironment", func(t *testing.T) {
        input := &evs.GetEnvironmentInput{}
        output := &evs.GetEnvironmentOutput{}

        mockClient.On("GetEnvironment", ctx, input).Return(output, nil)

        result, err := mockClient.GetEnvironment(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEnvironmentHosts", func(t *testing.T) {
        input := &evs.ListEnvironmentHostsInput{}
        output := &evs.ListEnvironmentHostsOutput{}

        mockClient.On("ListEnvironmentHosts", ctx, input).Return(output, nil)

        result, err := mockClient.ListEnvironmentHosts(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEnvironmentVlans", func(t *testing.T) {
        input := &evs.ListEnvironmentVlansInput{}
        output := &evs.ListEnvironmentVlansOutput{}

        mockClient.On("ListEnvironmentVlans", ctx, input).Return(output, nil)

        result, err := mockClient.ListEnvironmentVlans(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEnvironments", func(t *testing.T) {
        input := &evs.ListEnvironmentsInput{}
        output := &evs.ListEnvironmentsOutput{}

        mockClient.On("ListEnvironments", ctx, input).Return(output, nil)

        result, err := mockClient.ListEnvironments(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &evs.ListTagsForResourceInput{}
        output := &evs.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &evs.TagResourceInput{}
        output := &evs.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &evs.UntagResourceInput{}
        output := &evs.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
