// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package dsql_test

// tests for the dsql service interface for 
// this ../../../service/dsql/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/dsql"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/dsql/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/dsql/dsql_iface"
	"github.com/stretchr/testify/assert"
)

func TestDsqlServiceCanBeMocked(t *testing.T) {
	var iface dsql_iface.IClient
	iface = &dsql.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := dsql.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateCluster", func(t *testing.T) {
        input := &dsql.CreateClusterInput{}
        output := &dsql.CreateClusterOutput{}

        mockClient.On("CreateCluster", ctx, input).Return(output, nil)

        result, err := mockClient.CreateCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateMultiRegionClusters", func(t *testing.T) {
        input := &dsql.CreateMultiRegionClustersInput{}
        output := &dsql.CreateMultiRegionClustersOutput{}

        mockClient.On("CreateMultiRegionClusters", ctx, input).Return(output, nil)

        result, err := mockClient.CreateMultiRegionClusters(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteCluster", func(t *testing.T) {
        input := &dsql.DeleteClusterInput{}
        output := &dsql.DeleteClusterOutput{}

        mockClient.On("DeleteCluster", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteMultiRegionClusters", func(t *testing.T) {
        input := &dsql.DeleteMultiRegionClustersInput{}
        output := &dsql.DeleteMultiRegionClustersOutput{}

        mockClient.On("DeleteMultiRegionClusters", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteMultiRegionClusters(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCluster", func(t *testing.T) {
        input := &dsql.GetClusterInput{}
        output := &dsql.GetClusterOutput{}

        mockClient.On("GetCluster", ctx, input).Return(output, nil)

        result, err := mockClient.GetCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListClusters", func(t *testing.T) {
        input := &dsql.ListClustersInput{}
        output := &dsql.ListClustersOutput{}

        mockClient.On("ListClusters", ctx, input).Return(output, nil)

        result, err := mockClient.ListClusters(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &dsql.ListTagsForResourceInput{}
        output := &dsql.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &dsql.TagResourceInput{}
        output := &dsql.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &dsql.UntagResourceInput{}
        output := &dsql.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateCluster", func(t *testing.T) {
        input := &dsql.UpdateClusterInput{}
        output := &dsql.UpdateClusterOutput{}

        mockClient.On("UpdateCluster", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
