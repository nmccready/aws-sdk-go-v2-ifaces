// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package georoutes_test

// tests for the georoutes service interface for 
// this ../../../service/georoutes/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/georoutes"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/georoutes/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/georoutes/georoutes_iface"
	"github.com/stretchr/testify/assert"
)

func TestGeoroutesServiceCanBeMocked(t *testing.T) {
	var iface georoutes_iface.IClient
	iface = &georoutes.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := georoutes.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCalculateIsolines", func(t *testing.T) {
        input := &georoutes.CalculateIsolinesInput{}
        output := &georoutes.CalculateIsolinesOutput{}

        mockClient.On("CalculateIsolines", ctx, input).Return(output, nil)

        result, err := mockClient.CalculateIsolines(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCalculateRouteMatrix", func(t *testing.T) {
        input := &georoutes.CalculateRouteMatrixInput{}
        output := &georoutes.CalculateRouteMatrixOutput{}

        mockClient.On("CalculateRouteMatrix", ctx, input).Return(output, nil)

        result, err := mockClient.CalculateRouteMatrix(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCalculateRoutes", func(t *testing.T) {
        input := &georoutes.CalculateRoutesInput{}
        output := &georoutes.CalculateRoutesOutput{}

        mockClient.On("CalculateRoutes", ctx, input).Return(output, nil)

        result, err := mockClient.CalculateRoutes(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestOptimizeWaypoints", func(t *testing.T) {
        input := &georoutes.OptimizeWaypointsInput{}
        output := &georoutes.OptimizeWaypointsOutput{}

        mockClient.On("OptimizeWaypoints", ctx, input).Return(output, nil)

        result, err := mockClient.OptimizeWaypoints(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSnapToRoads", func(t *testing.T) {
        input := &georoutes.SnapToRoadsInput{}
        output := &georoutes.SnapToRoadsOutput{}

        mockClient.On("SnapToRoads", ctx, input).Return(output, nil)

        result, err := mockClient.SnapToRoads(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
