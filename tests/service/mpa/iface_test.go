// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package mpa_test

// tests for the mpa service interface for 
// this ../../../service/mpa/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/mpa"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/mpa/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/mpa/mpa_iface"
	"github.com/stretchr/testify/assert"
)

func TestMpaServiceCanBeMocked(t *testing.T) {
	var iface mpa_iface.IClient
	iface = &mpa.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := mpa.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCancelSession", func(t *testing.T) {
        input := &mpa.CancelSessionInput{}
        output := &mpa.CancelSessionOutput{}

        mockClient.On("CancelSession", ctx, input).Return(output, nil)

        result, err := mockClient.CancelSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateApprovalTeam", func(t *testing.T) {
        input := &mpa.CreateApprovalTeamInput{}
        output := &mpa.CreateApprovalTeamOutput{}

        mockClient.On("CreateApprovalTeam", ctx, input).Return(output, nil)

        result, err := mockClient.CreateApprovalTeam(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateIdentitySource", func(t *testing.T) {
        input := &mpa.CreateIdentitySourceInput{}
        output := &mpa.CreateIdentitySourceOutput{}

        mockClient.On("CreateIdentitySource", ctx, input).Return(output, nil)

        result, err := mockClient.CreateIdentitySource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteIdentitySource", func(t *testing.T) {
        input := &mpa.DeleteIdentitySourceInput{}
        output := &mpa.DeleteIdentitySourceOutput{}

        mockClient.On("DeleteIdentitySource", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteIdentitySource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteInactiveApprovalTeamVersion", func(t *testing.T) {
        input := &mpa.DeleteInactiveApprovalTeamVersionInput{}
        output := &mpa.DeleteInactiveApprovalTeamVersionOutput{}

        mockClient.On("DeleteInactiveApprovalTeamVersion", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteInactiveApprovalTeamVersion(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetApprovalTeam", func(t *testing.T) {
        input := &mpa.GetApprovalTeamInput{}
        output := &mpa.GetApprovalTeamOutput{}

        mockClient.On("GetApprovalTeam", ctx, input).Return(output, nil)

        result, err := mockClient.GetApprovalTeam(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetIdentitySource", func(t *testing.T) {
        input := &mpa.GetIdentitySourceInput{}
        output := &mpa.GetIdentitySourceOutput{}

        mockClient.On("GetIdentitySource", ctx, input).Return(output, nil)

        result, err := mockClient.GetIdentitySource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPolicyVersion", func(t *testing.T) {
        input := &mpa.GetPolicyVersionInput{}
        output := &mpa.GetPolicyVersionOutput{}

        mockClient.On("GetPolicyVersion", ctx, input).Return(output, nil)

        result, err := mockClient.GetPolicyVersion(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetResourcePolicy", func(t *testing.T) {
        input := &mpa.GetResourcePolicyInput{}
        output := &mpa.GetResourcePolicyOutput{}

        mockClient.On("GetResourcePolicy", ctx, input).Return(output, nil)

        result, err := mockClient.GetResourcePolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetSession", func(t *testing.T) {
        input := &mpa.GetSessionInput{}
        output := &mpa.GetSessionOutput{}

        mockClient.On("GetSession", ctx, input).Return(output, nil)

        result, err := mockClient.GetSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListApprovalTeams", func(t *testing.T) {
        input := &mpa.ListApprovalTeamsInput{}
        output := &mpa.ListApprovalTeamsOutput{}

        mockClient.On("ListApprovalTeams", ctx, input).Return(output, nil)

        result, err := mockClient.ListApprovalTeams(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListIdentitySources", func(t *testing.T) {
        input := &mpa.ListIdentitySourcesInput{}
        output := &mpa.ListIdentitySourcesOutput{}

        mockClient.On("ListIdentitySources", ctx, input).Return(output, nil)

        result, err := mockClient.ListIdentitySources(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListPolicies", func(t *testing.T) {
        input := &mpa.ListPoliciesInput{}
        output := &mpa.ListPoliciesOutput{}

        mockClient.On("ListPolicies", ctx, input).Return(output, nil)

        result, err := mockClient.ListPolicies(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListPolicyVersions", func(t *testing.T) {
        input := &mpa.ListPolicyVersionsInput{}
        output := &mpa.ListPolicyVersionsOutput{}

        mockClient.On("ListPolicyVersions", ctx, input).Return(output, nil)

        result, err := mockClient.ListPolicyVersions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListResourcePolicies", func(t *testing.T) {
        input := &mpa.ListResourcePoliciesInput{}
        output := &mpa.ListResourcePoliciesOutput{}

        mockClient.On("ListResourcePolicies", ctx, input).Return(output, nil)

        result, err := mockClient.ListResourcePolicies(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListSessions", func(t *testing.T) {
        input := &mpa.ListSessionsInput{}
        output := &mpa.ListSessionsOutput{}

        mockClient.On("ListSessions", ctx, input).Return(output, nil)

        result, err := mockClient.ListSessions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &mpa.ListTagsForResourceInput{}
        output := &mpa.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartActiveApprovalTeamDeletion", func(t *testing.T) {
        input := &mpa.StartActiveApprovalTeamDeletionInput{}
        output := &mpa.StartActiveApprovalTeamDeletionOutput{}

        mockClient.On("StartActiveApprovalTeamDeletion", ctx, input).Return(output, nil)

        result, err := mockClient.StartActiveApprovalTeamDeletion(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &mpa.TagResourceInput{}
        output := &mpa.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &mpa.UntagResourceInput{}
        output := &mpa.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateApprovalTeam", func(t *testing.T) {
        input := &mpa.UpdateApprovalTeamInput{}
        output := &mpa.UpdateApprovalTeamOutput{}

        mockClient.On("UpdateApprovalTeam", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateApprovalTeam(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
