// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package cleanroomsml_test

// tests for the cleanroomsml service interface for 
// this ../../../service/cleanroomsml/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/cleanroomsml"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/cleanroomsml/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/cleanroomsml/cleanroomsml_iface"
	"github.com/stretchr/testify/assert"
)

func TestCleanroomsmlServiceCanBeMocked(t *testing.T) {
	var iface cleanroomsml_iface.IClient
	iface = &cleanroomsml.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := cleanroomsml.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCancelTrainedModel", func(t *testing.T) {
        input := &cleanroomsml.CancelTrainedModelInput{}
        output := &cleanroomsml.CancelTrainedModelOutput{}

        mockClient.On("CancelTrainedModel", ctx, input).Return(output, nil)

        result, err := mockClient.CancelTrainedModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCancelTrainedModelInferenceJob", func(t *testing.T) {
        input := &cleanroomsml.CancelTrainedModelInferenceJobInput{}
        output := &cleanroomsml.CancelTrainedModelInferenceJobOutput{}

        mockClient.On("CancelTrainedModelInferenceJob", ctx, input).Return(output, nil)

        result, err := mockClient.CancelTrainedModelInferenceJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateAudienceModel", func(t *testing.T) {
        input := &cleanroomsml.CreateAudienceModelInput{}
        output := &cleanroomsml.CreateAudienceModelOutput{}

        mockClient.On("CreateAudienceModel", ctx, input).Return(output, nil)

        result, err := mockClient.CreateAudienceModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateConfiguredAudienceModel", func(t *testing.T) {
        input := &cleanroomsml.CreateConfiguredAudienceModelInput{}
        output := &cleanroomsml.CreateConfiguredAudienceModelOutput{}

        mockClient.On("CreateConfiguredAudienceModel", ctx, input).Return(output, nil)

        result, err := mockClient.CreateConfiguredAudienceModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateConfiguredModelAlgorithm", func(t *testing.T) {
        input := &cleanroomsml.CreateConfiguredModelAlgorithmInput{}
        output := &cleanroomsml.CreateConfiguredModelAlgorithmOutput{}

        mockClient.On("CreateConfiguredModelAlgorithm", ctx, input).Return(output, nil)

        result, err := mockClient.CreateConfiguredModelAlgorithm(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateConfiguredModelAlgorithmAssociation", func(t *testing.T) {
        input := &cleanroomsml.CreateConfiguredModelAlgorithmAssociationInput{}
        output := &cleanroomsml.CreateConfiguredModelAlgorithmAssociationOutput{}

        mockClient.On("CreateConfiguredModelAlgorithmAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.CreateConfiguredModelAlgorithmAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateMLInputChannel", func(t *testing.T) {
        input := &cleanroomsml.CreateMLInputChannelInput{}
        output := &cleanroomsml.CreateMLInputChannelOutput{}

        mockClient.On("CreateMLInputChannel", ctx, input).Return(output, nil)

        result, err := mockClient.CreateMLInputChannel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateTrainedModel", func(t *testing.T) {
        input := &cleanroomsml.CreateTrainedModelInput{}
        output := &cleanroomsml.CreateTrainedModelOutput{}

        mockClient.On("CreateTrainedModel", ctx, input).Return(output, nil)

        result, err := mockClient.CreateTrainedModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateTrainingDataset", func(t *testing.T) {
        input := &cleanroomsml.CreateTrainingDatasetInput{}
        output := &cleanroomsml.CreateTrainingDatasetOutput{}

        mockClient.On("CreateTrainingDataset", ctx, input).Return(output, nil)

        result, err := mockClient.CreateTrainingDataset(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteAudienceGenerationJob", func(t *testing.T) {
        input := &cleanroomsml.DeleteAudienceGenerationJobInput{}
        output := &cleanroomsml.DeleteAudienceGenerationJobOutput{}

        mockClient.On("DeleteAudienceGenerationJob", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteAudienceGenerationJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteAudienceModel", func(t *testing.T) {
        input := &cleanroomsml.DeleteAudienceModelInput{}
        output := &cleanroomsml.DeleteAudienceModelOutput{}

        mockClient.On("DeleteAudienceModel", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteAudienceModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteConfiguredAudienceModel", func(t *testing.T) {
        input := &cleanroomsml.DeleteConfiguredAudienceModelInput{}
        output := &cleanroomsml.DeleteConfiguredAudienceModelOutput{}

        mockClient.On("DeleteConfiguredAudienceModel", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteConfiguredAudienceModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteConfiguredAudienceModelPolicy", func(t *testing.T) {
        input := &cleanroomsml.DeleteConfiguredAudienceModelPolicyInput{}
        output := &cleanroomsml.DeleteConfiguredAudienceModelPolicyOutput{}

        mockClient.On("DeleteConfiguredAudienceModelPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteConfiguredAudienceModelPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteConfiguredModelAlgorithm", func(t *testing.T) {
        input := &cleanroomsml.DeleteConfiguredModelAlgorithmInput{}
        output := &cleanroomsml.DeleteConfiguredModelAlgorithmOutput{}

        mockClient.On("DeleteConfiguredModelAlgorithm", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteConfiguredModelAlgorithm(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteConfiguredModelAlgorithmAssociation", func(t *testing.T) {
        input := &cleanroomsml.DeleteConfiguredModelAlgorithmAssociationInput{}
        output := &cleanroomsml.DeleteConfiguredModelAlgorithmAssociationOutput{}

        mockClient.On("DeleteConfiguredModelAlgorithmAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteConfiguredModelAlgorithmAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteMLConfiguration", func(t *testing.T) {
        input := &cleanroomsml.DeleteMLConfigurationInput{}
        output := &cleanroomsml.DeleteMLConfigurationOutput{}

        mockClient.On("DeleteMLConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteMLConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteMLInputChannelData", func(t *testing.T) {
        input := &cleanroomsml.DeleteMLInputChannelDataInput{}
        output := &cleanroomsml.DeleteMLInputChannelDataOutput{}

        mockClient.On("DeleteMLInputChannelData", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteMLInputChannelData(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteTrainedModelOutput", func(t *testing.T) {
        input := &cleanroomsml.DeleteTrainedModelOutputInput{}
        output := &cleanroomsml.DeleteTrainedModelOutputOutput{}

        mockClient.On("DeleteTrainedModelOutput", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteTrainedModelOutput(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteTrainingDataset", func(t *testing.T) {
        input := &cleanroomsml.DeleteTrainingDatasetInput{}
        output := &cleanroomsml.DeleteTrainingDatasetOutput{}

        mockClient.On("DeleteTrainingDataset", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteTrainingDataset(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAudienceGenerationJob", func(t *testing.T) {
        input := &cleanroomsml.GetAudienceGenerationJobInput{}
        output := &cleanroomsml.GetAudienceGenerationJobOutput{}

        mockClient.On("GetAudienceGenerationJob", ctx, input).Return(output, nil)

        result, err := mockClient.GetAudienceGenerationJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAudienceModel", func(t *testing.T) {
        input := &cleanroomsml.GetAudienceModelInput{}
        output := &cleanroomsml.GetAudienceModelOutput{}

        mockClient.On("GetAudienceModel", ctx, input).Return(output, nil)

        result, err := mockClient.GetAudienceModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCollaborationConfiguredModelAlgorithmAssociation", func(t *testing.T) {
        input := &cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationInput{}
        output := &cleanroomsml.GetCollaborationConfiguredModelAlgorithmAssociationOutput{}

        mockClient.On("GetCollaborationConfiguredModelAlgorithmAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.GetCollaborationConfiguredModelAlgorithmAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCollaborationMLInputChannel", func(t *testing.T) {
        input := &cleanroomsml.GetCollaborationMLInputChannelInput{}
        output := &cleanroomsml.GetCollaborationMLInputChannelOutput{}

        mockClient.On("GetCollaborationMLInputChannel", ctx, input).Return(output, nil)

        result, err := mockClient.GetCollaborationMLInputChannel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCollaborationTrainedModel", func(t *testing.T) {
        input := &cleanroomsml.GetCollaborationTrainedModelInput{}
        output := &cleanroomsml.GetCollaborationTrainedModelOutput{}

        mockClient.On("GetCollaborationTrainedModel", ctx, input).Return(output, nil)

        result, err := mockClient.GetCollaborationTrainedModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetConfiguredAudienceModel", func(t *testing.T) {
        input := &cleanroomsml.GetConfiguredAudienceModelInput{}
        output := &cleanroomsml.GetConfiguredAudienceModelOutput{}

        mockClient.On("GetConfiguredAudienceModel", ctx, input).Return(output, nil)

        result, err := mockClient.GetConfiguredAudienceModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetConfiguredAudienceModelPolicy", func(t *testing.T) {
        input := &cleanroomsml.GetConfiguredAudienceModelPolicyInput{}
        output := &cleanroomsml.GetConfiguredAudienceModelPolicyOutput{}

        mockClient.On("GetConfiguredAudienceModelPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.GetConfiguredAudienceModelPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetConfiguredModelAlgorithm", func(t *testing.T) {
        input := &cleanroomsml.GetConfiguredModelAlgorithmInput{}
        output := &cleanroomsml.GetConfiguredModelAlgorithmOutput{}

        mockClient.On("GetConfiguredModelAlgorithm", ctx, input).Return(output, nil)

        result, err := mockClient.GetConfiguredModelAlgorithm(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetConfiguredModelAlgorithmAssociation", func(t *testing.T) {
        input := &cleanroomsml.GetConfiguredModelAlgorithmAssociationInput{}
        output := &cleanroomsml.GetConfiguredModelAlgorithmAssociationOutput{}

        mockClient.On("GetConfiguredModelAlgorithmAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.GetConfiguredModelAlgorithmAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetMLConfiguration", func(t *testing.T) {
        input := &cleanroomsml.GetMLConfigurationInput{}
        output := &cleanroomsml.GetMLConfigurationOutput{}

        mockClient.On("GetMLConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetMLConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetMLInputChannel", func(t *testing.T) {
        input := &cleanroomsml.GetMLInputChannelInput{}
        output := &cleanroomsml.GetMLInputChannelOutput{}

        mockClient.On("GetMLInputChannel", ctx, input).Return(output, nil)

        result, err := mockClient.GetMLInputChannel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTrainedModel", func(t *testing.T) {
        input := &cleanroomsml.GetTrainedModelInput{}
        output := &cleanroomsml.GetTrainedModelOutput{}

        mockClient.On("GetTrainedModel", ctx, input).Return(output, nil)

        result, err := mockClient.GetTrainedModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTrainedModelInferenceJob", func(t *testing.T) {
        input := &cleanroomsml.GetTrainedModelInferenceJobInput{}
        output := &cleanroomsml.GetTrainedModelInferenceJobOutput{}

        mockClient.On("GetTrainedModelInferenceJob", ctx, input).Return(output, nil)

        result, err := mockClient.GetTrainedModelInferenceJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTrainingDataset", func(t *testing.T) {
        input := &cleanroomsml.GetTrainingDatasetInput{}
        output := &cleanroomsml.GetTrainingDatasetOutput{}

        mockClient.On("GetTrainingDataset", ctx, input).Return(output, nil)

        result, err := mockClient.GetTrainingDataset(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAudienceExportJobs", func(t *testing.T) {
        input := &cleanroomsml.ListAudienceExportJobsInput{}
        output := &cleanroomsml.ListAudienceExportJobsOutput{}

        mockClient.On("ListAudienceExportJobs", ctx, input).Return(output, nil)

        result, err := mockClient.ListAudienceExportJobs(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAudienceGenerationJobs", func(t *testing.T) {
        input := &cleanroomsml.ListAudienceGenerationJobsInput{}
        output := &cleanroomsml.ListAudienceGenerationJobsOutput{}

        mockClient.On("ListAudienceGenerationJobs", ctx, input).Return(output, nil)

        result, err := mockClient.ListAudienceGenerationJobs(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAudienceModels", func(t *testing.T) {
        input := &cleanroomsml.ListAudienceModelsInput{}
        output := &cleanroomsml.ListAudienceModelsOutput{}

        mockClient.On("ListAudienceModels", ctx, input).Return(output, nil)

        result, err := mockClient.ListAudienceModels(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCollaborationConfiguredModelAlgorithmAssociations", func(t *testing.T) {
        input := &cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsInput{}
        output := &cleanroomsml.ListCollaborationConfiguredModelAlgorithmAssociationsOutput{}

        mockClient.On("ListCollaborationConfiguredModelAlgorithmAssociations", ctx, input).Return(output, nil)

        result, err := mockClient.ListCollaborationConfiguredModelAlgorithmAssociations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCollaborationMLInputChannels", func(t *testing.T) {
        input := &cleanroomsml.ListCollaborationMLInputChannelsInput{}
        output := &cleanroomsml.ListCollaborationMLInputChannelsOutput{}

        mockClient.On("ListCollaborationMLInputChannels", ctx, input).Return(output, nil)

        result, err := mockClient.ListCollaborationMLInputChannels(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCollaborationTrainedModelExportJobs", func(t *testing.T) {
        input := &cleanroomsml.ListCollaborationTrainedModelExportJobsInput{}
        output := &cleanroomsml.ListCollaborationTrainedModelExportJobsOutput{}

        mockClient.On("ListCollaborationTrainedModelExportJobs", ctx, input).Return(output, nil)

        result, err := mockClient.ListCollaborationTrainedModelExportJobs(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCollaborationTrainedModelInferenceJobs", func(t *testing.T) {
        input := &cleanroomsml.ListCollaborationTrainedModelInferenceJobsInput{}
        output := &cleanroomsml.ListCollaborationTrainedModelInferenceJobsOutput{}

        mockClient.On("ListCollaborationTrainedModelInferenceJobs", ctx, input).Return(output, nil)

        result, err := mockClient.ListCollaborationTrainedModelInferenceJobs(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCollaborationTrainedModels", func(t *testing.T) {
        input := &cleanroomsml.ListCollaborationTrainedModelsInput{}
        output := &cleanroomsml.ListCollaborationTrainedModelsOutput{}

        mockClient.On("ListCollaborationTrainedModels", ctx, input).Return(output, nil)

        result, err := mockClient.ListCollaborationTrainedModels(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListConfiguredAudienceModels", func(t *testing.T) {
        input := &cleanroomsml.ListConfiguredAudienceModelsInput{}
        output := &cleanroomsml.ListConfiguredAudienceModelsOutput{}

        mockClient.On("ListConfiguredAudienceModels", ctx, input).Return(output, nil)

        result, err := mockClient.ListConfiguredAudienceModels(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListConfiguredModelAlgorithmAssociations", func(t *testing.T) {
        input := &cleanroomsml.ListConfiguredModelAlgorithmAssociationsInput{}
        output := &cleanroomsml.ListConfiguredModelAlgorithmAssociationsOutput{}

        mockClient.On("ListConfiguredModelAlgorithmAssociations", ctx, input).Return(output, nil)

        result, err := mockClient.ListConfiguredModelAlgorithmAssociations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListConfiguredModelAlgorithms", func(t *testing.T) {
        input := &cleanroomsml.ListConfiguredModelAlgorithmsInput{}
        output := &cleanroomsml.ListConfiguredModelAlgorithmsOutput{}

        mockClient.On("ListConfiguredModelAlgorithms", ctx, input).Return(output, nil)

        result, err := mockClient.ListConfiguredModelAlgorithms(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListMLInputChannels", func(t *testing.T) {
        input := &cleanroomsml.ListMLInputChannelsInput{}
        output := &cleanroomsml.ListMLInputChannelsOutput{}

        mockClient.On("ListMLInputChannels", ctx, input).Return(output, nil)

        result, err := mockClient.ListMLInputChannels(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &cleanroomsml.ListTagsForResourceInput{}
        output := &cleanroomsml.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTrainedModelInferenceJobs", func(t *testing.T) {
        input := &cleanroomsml.ListTrainedModelInferenceJobsInput{}
        output := &cleanroomsml.ListTrainedModelInferenceJobsOutput{}

        mockClient.On("ListTrainedModelInferenceJobs", ctx, input).Return(output, nil)

        result, err := mockClient.ListTrainedModelInferenceJobs(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTrainedModels", func(t *testing.T) {
        input := &cleanroomsml.ListTrainedModelsInput{}
        output := &cleanroomsml.ListTrainedModelsOutput{}

        mockClient.On("ListTrainedModels", ctx, input).Return(output, nil)

        result, err := mockClient.ListTrainedModels(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTrainedModelVersions", func(t *testing.T) {
        input := &cleanroomsml.ListTrainedModelVersionsInput{}
        output := &cleanroomsml.ListTrainedModelVersionsOutput{}

        mockClient.On("ListTrainedModelVersions", ctx, input).Return(output, nil)

        result, err := mockClient.ListTrainedModelVersions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTrainingDatasets", func(t *testing.T) {
        input := &cleanroomsml.ListTrainingDatasetsInput{}
        output := &cleanroomsml.ListTrainingDatasetsOutput{}

        mockClient.On("ListTrainingDatasets", ctx, input).Return(output, nil)

        result, err := mockClient.ListTrainingDatasets(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutConfiguredAudienceModelPolicy", func(t *testing.T) {
        input := &cleanroomsml.PutConfiguredAudienceModelPolicyInput{}
        output := &cleanroomsml.PutConfiguredAudienceModelPolicyOutput{}

        mockClient.On("PutConfiguredAudienceModelPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.PutConfiguredAudienceModelPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutMLConfiguration", func(t *testing.T) {
        input := &cleanroomsml.PutMLConfigurationInput{}
        output := &cleanroomsml.PutMLConfigurationOutput{}

        mockClient.On("PutMLConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.PutMLConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartAudienceExportJob", func(t *testing.T) {
        input := &cleanroomsml.StartAudienceExportJobInput{}
        output := &cleanroomsml.StartAudienceExportJobOutput{}

        mockClient.On("StartAudienceExportJob", ctx, input).Return(output, nil)

        result, err := mockClient.StartAudienceExportJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartAudienceGenerationJob", func(t *testing.T) {
        input := &cleanroomsml.StartAudienceGenerationJobInput{}
        output := &cleanroomsml.StartAudienceGenerationJobOutput{}

        mockClient.On("StartAudienceGenerationJob", ctx, input).Return(output, nil)

        result, err := mockClient.StartAudienceGenerationJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartTrainedModelExportJob", func(t *testing.T) {
        input := &cleanroomsml.StartTrainedModelExportJobInput{}
        output := &cleanroomsml.StartTrainedModelExportJobOutput{}

        mockClient.On("StartTrainedModelExportJob", ctx, input).Return(output, nil)

        result, err := mockClient.StartTrainedModelExportJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartTrainedModelInferenceJob", func(t *testing.T) {
        input := &cleanroomsml.StartTrainedModelInferenceJobInput{}
        output := &cleanroomsml.StartTrainedModelInferenceJobOutput{}

        mockClient.On("StartTrainedModelInferenceJob", ctx, input).Return(output, nil)

        result, err := mockClient.StartTrainedModelInferenceJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &cleanroomsml.TagResourceInput{}
        output := &cleanroomsml.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &cleanroomsml.UntagResourceInput{}
        output := &cleanroomsml.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateConfiguredAudienceModel", func(t *testing.T) {
        input := &cleanroomsml.UpdateConfiguredAudienceModelInput{}
        output := &cleanroomsml.UpdateConfiguredAudienceModelOutput{}

        mockClient.On("UpdateConfiguredAudienceModel", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateConfiguredAudienceModel(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
