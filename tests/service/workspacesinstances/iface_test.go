// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package workspacesinstances_test

// tests for the workspacesinstances service interface for 
// this ../../../service/workspacesinstances/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/workspacesinstances"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/workspacesinstances/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/workspacesinstances/workspacesinstances_iface"
	"github.com/stretchr/testify/assert"
)

func TestWorkspacesinstancesServiceCanBeMocked(t *testing.T) {
	var iface workspacesinstances_iface.IClient
	iface = &workspacesinstances.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := workspacesinstances.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAssociateVolume", func(t *testing.T) {
        input := &workspacesinstances.AssociateVolumeInput{}
        output := &workspacesinstances.AssociateVolumeOutput{}

        mockClient.On("AssociateVolume", ctx, input).Return(output, nil)

        result, err := mockClient.AssociateVolume(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateVolume", func(t *testing.T) {
        input := &workspacesinstances.CreateVolumeInput{}
        output := &workspacesinstances.CreateVolumeOutput{}

        mockClient.On("CreateVolume", ctx, input).Return(output, nil)

        result, err := mockClient.CreateVolume(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateWorkspaceInstance", func(t *testing.T) {
        input := &workspacesinstances.CreateWorkspaceInstanceInput{}
        output := &workspacesinstances.CreateWorkspaceInstanceOutput{}

        mockClient.On("CreateWorkspaceInstance", ctx, input).Return(output, nil)

        result, err := mockClient.CreateWorkspaceInstance(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteVolume", func(t *testing.T) {
        input := &workspacesinstances.DeleteVolumeInput{}
        output := &workspacesinstances.DeleteVolumeOutput{}

        mockClient.On("DeleteVolume", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteVolume(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteWorkspaceInstance", func(t *testing.T) {
        input := &workspacesinstances.DeleteWorkspaceInstanceInput{}
        output := &workspacesinstances.DeleteWorkspaceInstanceOutput{}

        mockClient.On("DeleteWorkspaceInstance", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteWorkspaceInstance(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDisassociateVolume", func(t *testing.T) {
        input := &workspacesinstances.DisassociateVolumeInput{}
        output := &workspacesinstances.DisassociateVolumeOutput{}

        mockClient.On("DisassociateVolume", ctx, input).Return(output, nil)

        result, err := mockClient.DisassociateVolume(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetWorkspaceInstance", func(t *testing.T) {
        input := &workspacesinstances.GetWorkspaceInstanceInput{}
        output := &workspacesinstances.GetWorkspaceInstanceOutput{}

        mockClient.On("GetWorkspaceInstance", ctx, input).Return(output, nil)

        result, err := mockClient.GetWorkspaceInstance(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListInstanceTypes", func(t *testing.T) {
        input := &workspacesinstances.ListInstanceTypesInput{}
        output := &workspacesinstances.ListInstanceTypesOutput{}

        mockClient.On("ListInstanceTypes", ctx, input).Return(output, nil)

        result, err := mockClient.ListInstanceTypes(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListRegions", func(t *testing.T) {
        input := &workspacesinstances.ListRegionsInput{}
        output := &workspacesinstances.ListRegionsOutput{}

        mockClient.On("ListRegions", ctx, input).Return(output, nil)

        result, err := mockClient.ListRegions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &workspacesinstances.ListTagsForResourceInput{}
        output := &workspacesinstances.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListWorkspaceInstances", func(t *testing.T) {
        input := &workspacesinstances.ListWorkspaceInstancesInput{}
        output := &workspacesinstances.ListWorkspaceInstancesOutput{}

        mockClient.On("ListWorkspaceInstances", ctx, input).Return(output, nil)

        result, err := mockClient.ListWorkspaceInstances(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &workspacesinstances.TagResourceInput{}
        output := &workspacesinstances.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &workspacesinstances.UntagResourceInput{}
        output := &workspacesinstances.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
