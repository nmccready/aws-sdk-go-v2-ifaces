// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package invoicing_test

// tests for the invoicing service interface for 
// this ../../../service/invoicing/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/invoicing"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/invoicing/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/invoicing/invoicing_iface"
	"github.com/stretchr/testify/assert"
)

func TestInvoicingServiceCanBeMocked(t *testing.T) {
	var iface invoicing_iface.IClient
	iface = &invoicing.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := invoicing.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestBatchGetInvoiceProfile", func(t *testing.T) {
        input := &invoicing.BatchGetInvoiceProfileInput{}
        output := &invoicing.BatchGetInvoiceProfileOutput{}

        mockClient.On("BatchGetInvoiceProfile", ctx, input).Return(output, nil)

        result, err := mockClient.BatchGetInvoiceProfile(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateInvoiceUnit", func(t *testing.T) {
        input := &invoicing.CreateInvoiceUnitInput{}
        output := &invoicing.CreateInvoiceUnitOutput{}

        mockClient.On("CreateInvoiceUnit", ctx, input).Return(output, nil)

        result, err := mockClient.CreateInvoiceUnit(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteInvoiceUnit", func(t *testing.T) {
        input := &invoicing.DeleteInvoiceUnitInput{}
        output := &invoicing.DeleteInvoiceUnitOutput{}

        mockClient.On("DeleteInvoiceUnit", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteInvoiceUnit(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetInvoiceUnit", func(t *testing.T) {
        input := &invoicing.GetInvoiceUnitInput{}
        output := &invoicing.GetInvoiceUnitOutput{}

        mockClient.On("GetInvoiceUnit", ctx, input).Return(output, nil)

        result, err := mockClient.GetInvoiceUnit(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListInvoiceSummaries", func(t *testing.T) {
        input := &invoicing.ListInvoiceSummariesInput{}
        output := &invoicing.ListInvoiceSummariesOutput{}

        mockClient.On("ListInvoiceSummaries", ctx, input).Return(output, nil)

        result, err := mockClient.ListInvoiceSummaries(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListInvoiceUnits", func(t *testing.T) {
        input := &invoicing.ListInvoiceUnitsInput{}
        output := &invoicing.ListInvoiceUnitsOutput{}

        mockClient.On("ListInvoiceUnits", ctx, input).Return(output, nil)

        result, err := mockClient.ListInvoiceUnits(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &invoicing.ListTagsForResourceInput{}
        output := &invoicing.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &invoicing.TagResourceInput{}
        output := &invoicing.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &invoicing.UntagResourceInput{}
        output := &invoicing.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateInvoiceUnit", func(t *testing.T) {
        input := &invoicing.UpdateInvoiceUnitInput{}
        output := &invoicing.UpdateInvoiceUnitOutput{}

        mockClient.On("UpdateInvoiceUnit", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateInvoiceUnit(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
