// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package chime_test

// tests for the chime service interface for 
// this ../../../service/chime/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/chime"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/chime/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/chime/chime_iface"
	"github.com/stretchr/testify/assert"
)

func TestChimeServiceCanBeMocked(t *testing.T) {
	var iface chime_iface.IClient
	iface = &chime.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := chime.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAssociatePhoneNumberWithUser", func(t *testing.T) {
        input := &chime.AssociatePhoneNumberWithUserInput{}
        output := &chime.AssociatePhoneNumberWithUserOutput{}

        mockClient.On("AssociatePhoneNumberWithUser", ctx, input).Return(output, nil)

        result, err := mockClient.AssociatePhoneNumberWithUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAssociateSigninDelegateGroupsWithAccount", func(t *testing.T) {
        input := &chime.AssociateSigninDelegateGroupsWithAccountInput{}
        output := &chime.AssociateSigninDelegateGroupsWithAccountOutput{}

        mockClient.On("AssociateSigninDelegateGroupsWithAccount", ctx, input).Return(output, nil)

        result, err := mockClient.AssociateSigninDelegateGroupsWithAccount(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestBatchCreateRoomMembership", func(t *testing.T) {
        input := &chime.BatchCreateRoomMembershipInput{}
        output := &chime.BatchCreateRoomMembershipOutput{}

        mockClient.On("BatchCreateRoomMembership", ctx, input).Return(output, nil)

        result, err := mockClient.BatchCreateRoomMembership(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestBatchDeletePhoneNumber", func(t *testing.T) {
        input := &chime.BatchDeletePhoneNumberInput{}
        output := &chime.BatchDeletePhoneNumberOutput{}

        mockClient.On("BatchDeletePhoneNumber", ctx, input).Return(output, nil)

        result, err := mockClient.BatchDeletePhoneNumber(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestBatchSuspendUser", func(t *testing.T) {
        input := &chime.BatchSuspendUserInput{}
        output := &chime.BatchSuspendUserOutput{}

        mockClient.On("BatchSuspendUser", ctx, input).Return(output, nil)

        result, err := mockClient.BatchSuspendUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestBatchUnsuspendUser", func(t *testing.T) {
        input := &chime.BatchUnsuspendUserInput{}
        output := &chime.BatchUnsuspendUserOutput{}

        mockClient.On("BatchUnsuspendUser", ctx, input).Return(output, nil)

        result, err := mockClient.BatchUnsuspendUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestBatchUpdatePhoneNumber", func(t *testing.T) {
        input := &chime.BatchUpdatePhoneNumberInput{}
        output := &chime.BatchUpdatePhoneNumberOutput{}

        mockClient.On("BatchUpdatePhoneNumber", ctx, input).Return(output, nil)

        result, err := mockClient.BatchUpdatePhoneNumber(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestBatchUpdateUser", func(t *testing.T) {
        input := &chime.BatchUpdateUserInput{}
        output := &chime.BatchUpdateUserOutput{}

        mockClient.On("BatchUpdateUser", ctx, input).Return(output, nil)

        result, err := mockClient.BatchUpdateUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateAccount", func(t *testing.T) {
        input := &chime.CreateAccountInput{}
        output := &chime.CreateAccountOutput{}

        mockClient.On("CreateAccount", ctx, input).Return(output, nil)

        result, err := mockClient.CreateAccount(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateBot", func(t *testing.T) {
        input := &chime.CreateBotInput{}
        output := &chime.CreateBotOutput{}

        mockClient.On("CreateBot", ctx, input).Return(output, nil)

        result, err := mockClient.CreateBot(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateMeetingDialOut", func(t *testing.T) {
        input := &chime.CreateMeetingDialOutInput{}
        output := &chime.CreateMeetingDialOutOutput{}

        mockClient.On("CreateMeetingDialOut", ctx, input).Return(output, nil)

        result, err := mockClient.CreateMeetingDialOut(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreatePhoneNumberOrder", func(t *testing.T) {
        input := &chime.CreatePhoneNumberOrderInput{}
        output := &chime.CreatePhoneNumberOrderOutput{}

        mockClient.On("CreatePhoneNumberOrder", ctx, input).Return(output, nil)

        result, err := mockClient.CreatePhoneNumberOrder(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateRoom", func(t *testing.T) {
        input := &chime.CreateRoomInput{}
        output := &chime.CreateRoomOutput{}

        mockClient.On("CreateRoom", ctx, input).Return(output, nil)

        result, err := mockClient.CreateRoom(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateRoomMembership", func(t *testing.T) {
        input := &chime.CreateRoomMembershipInput{}
        output := &chime.CreateRoomMembershipOutput{}

        mockClient.On("CreateRoomMembership", ctx, input).Return(output, nil)

        result, err := mockClient.CreateRoomMembership(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateUser", func(t *testing.T) {
        input := &chime.CreateUserInput{}
        output := &chime.CreateUserOutput{}

        mockClient.On("CreateUser", ctx, input).Return(output, nil)

        result, err := mockClient.CreateUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteAccount", func(t *testing.T) {
        input := &chime.DeleteAccountInput{}
        output := &chime.DeleteAccountOutput{}

        mockClient.On("DeleteAccount", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteAccount(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteEventsConfiguration", func(t *testing.T) {
        input := &chime.DeleteEventsConfigurationInput{}
        output := &chime.DeleteEventsConfigurationOutput{}

        mockClient.On("DeleteEventsConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteEventsConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeletePhoneNumber", func(t *testing.T) {
        input := &chime.DeletePhoneNumberInput{}
        output := &chime.DeletePhoneNumberOutput{}

        mockClient.On("DeletePhoneNumber", ctx, input).Return(output, nil)

        result, err := mockClient.DeletePhoneNumber(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteRoom", func(t *testing.T) {
        input := &chime.DeleteRoomInput{}
        output := &chime.DeleteRoomOutput{}

        mockClient.On("DeleteRoom", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteRoom(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteRoomMembership", func(t *testing.T) {
        input := &chime.DeleteRoomMembershipInput{}
        output := &chime.DeleteRoomMembershipOutput{}

        mockClient.On("DeleteRoomMembership", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteRoomMembership(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDisassociatePhoneNumberFromUser", func(t *testing.T) {
        input := &chime.DisassociatePhoneNumberFromUserInput{}
        output := &chime.DisassociatePhoneNumberFromUserOutput{}

        mockClient.On("DisassociatePhoneNumberFromUser", ctx, input).Return(output, nil)

        result, err := mockClient.DisassociatePhoneNumberFromUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDisassociateSigninDelegateGroupsFromAccount", func(t *testing.T) {
        input := &chime.DisassociateSigninDelegateGroupsFromAccountInput{}
        output := &chime.DisassociateSigninDelegateGroupsFromAccountOutput{}

        mockClient.On("DisassociateSigninDelegateGroupsFromAccount", ctx, input).Return(output, nil)

        result, err := mockClient.DisassociateSigninDelegateGroupsFromAccount(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAccount", func(t *testing.T) {
        input := &chime.GetAccountInput{}
        output := &chime.GetAccountOutput{}

        mockClient.On("GetAccount", ctx, input).Return(output, nil)

        result, err := mockClient.GetAccount(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAccountSettings", func(t *testing.T) {
        input := &chime.GetAccountSettingsInput{}
        output := &chime.GetAccountSettingsOutput{}

        mockClient.On("GetAccountSettings", ctx, input).Return(output, nil)

        result, err := mockClient.GetAccountSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetBot", func(t *testing.T) {
        input := &chime.GetBotInput{}
        output := &chime.GetBotOutput{}

        mockClient.On("GetBot", ctx, input).Return(output, nil)

        result, err := mockClient.GetBot(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetEventsConfiguration", func(t *testing.T) {
        input := &chime.GetEventsConfigurationInput{}
        output := &chime.GetEventsConfigurationOutput{}

        mockClient.On("GetEventsConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetEventsConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetGlobalSettings", func(t *testing.T) {
        input := &chime.GetGlobalSettingsInput{}
        output := &chime.GetGlobalSettingsOutput{}

        mockClient.On("GetGlobalSettings", ctx, input).Return(output, nil)

        result, err := mockClient.GetGlobalSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPhoneNumber", func(t *testing.T) {
        input := &chime.GetPhoneNumberInput{}
        output := &chime.GetPhoneNumberOutput{}

        mockClient.On("GetPhoneNumber", ctx, input).Return(output, nil)

        result, err := mockClient.GetPhoneNumber(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPhoneNumberOrder", func(t *testing.T) {
        input := &chime.GetPhoneNumberOrderInput{}
        output := &chime.GetPhoneNumberOrderOutput{}

        mockClient.On("GetPhoneNumberOrder", ctx, input).Return(output, nil)

        result, err := mockClient.GetPhoneNumberOrder(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPhoneNumberSettings", func(t *testing.T) {
        input := &chime.GetPhoneNumberSettingsInput{}
        output := &chime.GetPhoneNumberSettingsOutput{}

        mockClient.On("GetPhoneNumberSettings", ctx, input).Return(output, nil)

        result, err := mockClient.GetPhoneNumberSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetRetentionSettings", func(t *testing.T) {
        input := &chime.GetRetentionSettingsInput{}
        output := &chime.GetRetentionSettingsOutput{}

        mockClient.On("GetRetentionSettings", ctx, input).Return(output, nil)

        result, err := mockClient.GetRetentionSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetRoom", func(t *testing.T) {
        input := &chime.GetRoomInput{}
        output := &chime.GetRoomOutput{}

        mockClient.On("GetRoom", ctx, input).Return(output, nil)

        result, err := mockClient.GetRoom(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetUser", func(t *testing.T) {
        input := &chime.GetUserInput{}
        output := &chime.GetUserOutput{}

        mockClient.On("GetUser", ctx, input).Return(output, nil)

        result, err := mockClient.GetUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetUserSettings", func(t *testing.T) {
        input := &chime.GetUserSettingsInput{}
        output := &chime.GetUserSettingsOutput{}

        mockClient.On("GetUserSettings", ctx, input).Return(output, nil)

        result, err := mockClient.GetUserSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestInviteUsers", func(t *testing.T) {
        input := &chime.InviteUsersInput{}
        output := &chime.InviteUsersOutput{}

        mockClient.On("InviteUsers", ctx, input).Return(output, nil)

        result, err := mockClient.InviteUsers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAccounts", func(t *testing.T) {
        input := &chime.ListAccountsInput{}
        output := &chime.ListAccountsOutput{}

        mockClient.On("ListAccounts", ctx, input).Return(output, nil)

        result, err := mockClient.ListAccounts(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListBots", func(t *testing.T) {
        input := &chime.ListBotsInput{}
        output := &chime.ListBotsOutput{}

        mockClient.On("ListBots", ctx, input).Return(output, nil)

        result, err := mockClient.ListBots(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListPhoneNumberOrders", func(t *testing.T) {
        input := &chime.ListPhoneNumberOrdersInput{}
        output := &chime.ListPhoneNumberOrdersOutput{}

        mockClient.On("ListPhoneNumberOrders", ctx, input).Return(output, nil)

        result, err := mockClient.ListPhoneNumberOrders(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListPhoneNumbers", func(t *testing.T) {
        input := &chime.ListPhoneNumbersInput{}
        output := &chime.ListPhoneNumbersOutput{}

        mockClient.On("ListPhoneNumbers", ctx, input).Return(output, nil)

        result, err := mockClient.ListPhoneNumbers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListRoomMemberships", func(t *testing.T) {
        input := &chime.ListRoomMembershipsInput{}
        output := &chime.ListRoomMembershipsOutput{}

        mockClient.On("ListRoomMemberships", ctx, input).Return(output, nil)

        result, err := mockClient.ListRoomMemberships(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListRooms", func(t *testing.T) {
        input := &chime.ListRoomsInput{}
        output := &chime.ListRoomsOutput{}

        mockClient.On("ListRooms", ctx, input).Return(output, nil)

        result, err := mockClient.ListRooms(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListSupportedPhoneNumberCountries", func(t *testing.T) {
        input := &chime.ListSupportedPhoneNumberCountriesInput{}
        output := &chime.ListSupportedPhoneNumberCountriesOutput{}

        mockClient.On("ListSupportedPhoneNumberCountries", ctx, input).Return(output, nil)

        result, err := mockClient.ListSupportedPhoneNumberCountries(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListUsers", func(t *testing.T) {
        input := &chime.ListUsersInput{}
        output := &chime.ListUsersOutput{}

        mockClient.On("ListUsers", ctx, input).Return(output, nil)

        result, err := mockClient.ListUsers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestLogoutUser", func(t *testing.T) {
        input := &chime.LogoutUserInput{}
        output := &chime.LogoutUserOutput{}

        mockClient.On("LogoutUser", ctx, input).Return(output, nil)

        result, err := mockClient.LogoutUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutEventsConfiguration", func(t *testing.T) {
        input := &chime.PutEventsConfigurationInput{}
        output := &chime.PutEventsConfigurationOutput{}

        mockClient.On("PutEventsConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.PutEventsConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutRetentionSettings", func(t *testing.T) {
        input := &chime.PutRetentionSettingsInput{}
        output := &chime.PutRetentionSettingsOutput{}

        mockClient.On("PutRetentionSettings", ctx, input).Return(output, nil)

        result, err := mockClient.PutRetentionSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRedactConversationMessage", func(t *testing.T) {
        input := &chime.RedactConversationMessageInput{}
        output := &chime.RedactConversationMessageOutput{}

        mockClient.On("RedactConversationMessage", ctx, input).Return(output, nil)

        result, err := mockClient.RedactConversationMessage(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRedactRoomMessage", func(t *testing.T) {
        input := &chime.RedactRoomMessageInput{}
        output := &chime.RedactRoomMessageOutput{}

        mockClient.On("RedactRoomMessage", ctx, input).Return(output, nil)

        result, err := mockClient.RedactRoomMessage(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRegenerateSecurityToken", func(t *testing.T) {
        input := &chime.RegenerateSecurityTokenInput{}
        output := &chime.RegenerateSecurityTokenOutput{}

        mockClient.On("RegenerateSecurityToken", ctx, input).Return(output, nil)

        result, err := mockClient.RegenerateSecurityToken(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestResetPersonalPIN", func(t *testing.T) {
        input := &chime.ResetPersonalPINInput{}
        output := &chime.ResetPersonalPINOutput{}

        mockClient.On("ResetPersonalPIN", ctx, input).Return(output, nil)

        result, err := mockClient.ResetPersonalPIN(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRestorePhoneNumber", func(t *testing.T) {
        input := &chime.RestorePhoneNumberInput{}
        output := &chime.RestorePhoneNumberOutput{}

        mockClient.On("RestorePhoneNumber", ctx, input).Return(output, nil)

        result, err := mockClient.RestorePhoneNumber(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSearchAvailablePhoneNumbers", func(t *testing.T) {
        input := &chime.SearchAvailablePhoneNumbersInput{}
        output := &chime.SearchAvailablePhoneNumbersOutput{}

        mockClient.On("SearchAvailablePhoneNumbers", ctx, input).Return(output, nil)

        result, err := mockClient.SearchAvailablePhoneNumbers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateAccount", func(t *testing.T) {
        input := &chime.UpdateAccountInput{}
        output := &chime.UpdateAccountOutput{}

        mockClient.On("UpdateAccount", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateAccount(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateAccountSettings", func(t *testing.T) {
        input := &chime.UpdateAccountSettingsInput{}
        output := &chime.UpdateAccountSettingsOutput{}

        mockClient.On("UpdateAccountSettings", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateAccountSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateBot", func(t *testing.T) {
        input := &chime.UpdateBotInput{}
        output := &chime.UpdateBotOutput{}

        mockClient.On("UpdateBot", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateBot(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateGlobalSettings", func(t *testing.T) {
        input := &chime.UpdateGlobalSettingsInput{}
        output := &chime.UpdateGlobalSettingsOutput{}

        mockClient.On("UpdateGlobalSettings", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateGlobalSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdatePhoneNumber", func(t *testing.T) {
        input := &chime.UpdatePhoneNumberInput{}
        output := &chime.UpdatePhoneNumberOutput{}

        mockClient.On("UpdatePhoneNumber", ctx, input).Return(output, nil)

        result, err := mockClient.UpdatePhoneNumber(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdatePhoneNumberSettings", func(t *testing.T) {
        input := &chime.UpdatePhoneNumberSettingsInput{}
        output := &chime.UpdatePhoneNumberSettingsOutput{}

        mockClient.On("UpdatePhoneNumberSettings", ctx, input).Return(output, nil)

        result, err := mockClient.UpdatePhoneNumberSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateRoom", func(t *testing.T) {
        input := &chime.UpdateRoomInput{}
        output := &chime.UpdateRoomOutput{}

        mockClient.On("UpdateRoom", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateRoom(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateRoomMembership", func(t *testing.T) {
        input := &chime.UpdateRoomMembershipInput{}
        output := &chime.UpdateRoomMembershipOutput{}

        mockClient.On("UpdateRoomMembership", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateRoomMembership(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateUser", func(t *testing.T) {
        input := &chime.UpdateUserInput{}
        output := &chime.UpdateUserOutput{}

        mockClient.On("UpdateUser", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateUserSettings", func(t *testing.T) {
        input := &chime.UpdateUserSettingsInput{}
        output := &chime.UpdateUserSettingsOutput{}

        mockClient.On("UpdateUserSettings", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateUserSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
