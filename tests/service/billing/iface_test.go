// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package billing_test

// tests for the billing service interface for 
// this ../../../service/billing/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/billing"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/billing/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/billing/billing_iface"
	"github.com/stretchr/testify/assert"
)

func TestBillingServiceCanBeMocked(t *testing.T) {
	var iface billing_iface.IClient
	iface = &billing.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := billing.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateBillingView", func(t *testing.T) {
        input := &billing.CreateBillingViewInput{}
        output := &billing.CreateBillingViewOutput{}

        mockClient.On("CreateBillingView", ctx, input).Return(output, nil)

        result, err := mockClient.CreateBillingView(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteBillingView", func(t *testing.T) {
        input := &billing.DeleteBillingViewInput{}
        output := &billing.DeleteBillingViewOutput{}

        mockClient.On("DeleteBillingView", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteBillingView(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetBillingView", func(t *testing.T) {
        input := &billing.GetBillingViewInput{}
        output := &billing.GetBillingViewOutput{}

        mockClient.On("GetBillingView", ctx, input).Return(output, nil)

        result, err := mockClient.GetBillingView(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetResourcePolicy", func(t *testing.T) {
        input := &billing.GetResourcePolicyInput{}
        output := &billing.GetResourcePolicyOutput{}

        mockClient.On("GetResourcePolicy", ctx, input).Return(output, nil)

        result, err := mockClient.GetResourcePolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListBillingViews", func(t *testing.T) {
        input := &billing.ListBillingViewsInput{}
        output := &billing.ListBillingViewsOutput{}

        mockClient.On("ListBillingViews", ctx, input).Return(output, nil)

        result, err := mockClient.ListBillingViews(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListSourceViewsForBillingView", func(t *testing.T) {
        input := &billing.ListSourceViewsForBillingViewInput{}
        output := &billing.ListSourceViewsForBillingViewOutput{}

        mockClient.On("ListSourceViewsForBillingView", ctx, input).Return(output, nil)

        result, err := mockClient.ListSourceViewsForBillingView(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &billing.ListTagsForResourceInput{}
        output := &billing.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &billing.TagResourceInput{}
        output := &billing.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &billing.UntagResourceInput{}
        output := &billing.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateBillingView", func(t *testing.T) {
        input := &billing.UpdateBillingViewInput{}
        output := &billing.UpdateBillingViewOutput{}

        mockClient.On("UpdateBillingView", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateBillingView(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
