// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package pcs_test

// tests for the pcs service interface for 
// this ../../../service/pcs/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/pcs"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/pcs/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/pcs/pcs_iface"
	"github.com/stretchr/testify/assert"
)

func TestPcsServiceCanBeMocked(t *testing.T) {
	var iface pcs_iface.IClient
	iface = &pcs.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := pcs.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateCluster", func(t *testing.T) {
        input := &pcs.CreateClusterInput{}
        output := &pcs.CreateClusterOutput{}

        mockClient.On("CreateCluster", ctx, input).Return(output, nil)

        result, err := mockClient.CreateCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateComputeNodeGroup", func(t *testing.T) {
        input := &pcs.CreateComputeNodeGroupInput{}
        output := &pcs.CreateComputeNodeGroupOutput{}

        mockClient.On("CreateComputeNodeGroup", ctx, input).Return(output, nil)

        result, err := mockClient.CreateComputeNodeGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateQueue", func(t *testing.T) {
        input := &pcs.CreateQueueInput{}
        output := &pcs.CreateQueueOutput{}

        mockClient.On("CreateQueue", ctx, input).Return(output, nil)

        result, err := mockClient.CreateQueue(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteCluster", func(t *testing.T) {
        input := &pcs.DeleteClusterInput{}
        output := &pcs.DeleteClusterOutput{}

        mockClient.On("DeleteCluster", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteComputeNodeGroup", func(t *testing.T) {
        input := &pcs.DeleteComputeNodeGroupInput{}
        output := &pcs.DeleteComputeNodeGroupOutput{}

        mockClient.On("DeleteComputeNodeGroup", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteComputeNodeGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteQueue", func(t *testing.T) {
        input := &pcs.DeleteQueueInput{}
        output := &pcs.DeleteQueueOutput{}

        mockClient.On("DeleteQueue", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteQueue(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCluster", func(t *testing.T) {
        input := &pcs.GetClusterInput{}
        output := &pcs.GetClusterOutput{}

        mockClient.On("GetCluster", ctx, input).Return(output, nil)

        result, err := mockClient.GetCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetComputeNodeGroup", func(t *testing.T) {
        input := &pcs.GetComputeNodeGroupInput{}
        output := &pcs.GetComputeNodeGroupOutput{}

        mockClient.On("GetComputeNodeGroup", ctx, input).Return(output, nil)

        result, err := mockClient.GetComputeNodeGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetQueue", func(t *testing.T) {
        input := &pcs.GetQueueInput{}
        output := &pcs.GetQueueOutput{}

        mockClient.On("GetQueue", ctx, input).Return(output, nil)

        result, err := mockClient.GetQueue(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListClusters", func(t *testing.T) {
        input := &pcs.ListClustersInput{}
        output := &pcs.ListClustersOutput{}

        mockClient.On("ListClusters", ctx, input).Return(output, nil)

        result, err := mockClient.ListClusters(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListComputeNodeGroups", func(t *testing.T) {
        input := &pcs.ListComputeNodeGroupsInput{}
        output := &pcs.ListComputeNodeGroupsOutput{}

        mockClient.On("ListComputeNodeGroups", ctx, input).Return(output, nil)

        result, err := mockClient.ListComputeNodeGroups(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListQueues", func(t *testing.T) {
        input := &pcs.ListQueuesInput{}
        output := &pcs.ListQueuesOutput{}

        mockClient.On("ListQueues", ctx, input).Return(output, nil)

        result, err := mockClient.ListQueues(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &pcs.ListTagsForResourceInput{}
        output := &pcs.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRegisterComputeNodeGroupInstance", func(t *testing.T) {
        input := &pcs.RegisterComputeNodeGroupInstanceInput{}
        output := &pcs.RegisterComputeNodeGroupInstanceOutput{}

        mockClient.On("RegisterComputeNodeGroupInstance", ctx, input).Return(output, nil)

        result, err := mockClient.RegisterComputeNodeGroupInstance(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &pcs.TagResourceInput{}
        output := &pcs.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &pcs.UntagResourceInput{}
        output := &pcs.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateComputeNodeGroup", func(t *testing.T) {
        input := &pcs.UpdateComputeNodeGroupInput{}
        output := &pcs.UpdateComputeNodeGroupOutput{}

        mockClient.On("UpdateComputeNodeGroup", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateComputeNodeGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateQueue", func(t *testing.T) {
        input := &pcs.UpdateQueueInput{}
        output := &pcs.UpdateQueueOutput{}

        mockClient.On("UpdateQueue", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateQueue(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
