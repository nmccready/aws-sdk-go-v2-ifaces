// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package s3tables_test

// tests for the s3tables service interface for 
// this ../../../service/s3tables/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/s3tables"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/s3tables/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/s3tables/s3tables_iface"
	"github.com/stretchr/testify/assert"
)

func TestS3tablesServiceCanBeMocked(t *testing.T) {
	var iface s3tables_iface.IClient
	iface = &s3tables.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := s3tables.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateNamespace", func(t *testing.T) {
        input := &s3tables.CreateNamespaceInput{}
        output := &s3tables.CreateNamespaceOutput{}

        mockClient.On("CreateNamespace", ctx, input).Return(output, nil)

        result, err := mockClient.CreateNamespace(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateTableBucket", func(t *testing.T) {
        input := &s3tables.CreateTableBucketInput{}
        output := &s3tables.CreateTableBucketOutput{}

        mockClient.On("CreateTableBucket", ctx, input).Return(output, nil)

        result, err := mockClient.CreateTableBucket(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateTable", func(t *testing.T) {
        input := &s3tables.CreateTableInput{}
        output := &s3tables.CreateTableOutput{}

        mockClient.On("CreateTable", ctx, input).Return(output, nil)

        result, err := mockClient.CreateTable(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteNamespace", func(t *testing.T) {
        input := &s3tables.DeleteNamespaceInput{}
        output := &s3tables.DeleteNamespaceOutput{}

        mockClient.On("DeleteNamespace", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteNamespace(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteTableBucket", func(t *testing.T) {
        input := &s3tables.DeleteTableBucketInput{}
        output := &s3tables.DeleteTableBucketOutput{}

        mockClient.On("DeleteTableBucket", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteTableBucket(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteTableBucketPolicy", func(t *testing.T) {
        input := &s3tables.DeleteTableBucketPolicyInput{}
        output := &s3tables.DeleteTableBucketPolicyOutput{}

        mockClient.On("DeleteTableBucketPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteTableBucketPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteTable", func(t *testing.T) {
        input := &s3tables.DeleteTableInput{}
        output := &s3tables.DeleteTableOutput{}

        mockClient.On("DeleteTable", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteTable(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteTablePolicy", func(t *testing.T) {
        input := &s3tables.DeleteTablePolicyInput{}
        output := &s3tables.DeleteTablePolicyOutput{}

        mockClient.On("DeleteTablePolicy", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteTablePolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetNamespace", func(t *testing.T) {
        input := &s3tables.GetNamespaceInput{}
        output := &s3tables.GetNamespaceOutput{}

        mockClient.On("GetNamespace", ctx, input).Return(output, nil)

        result, err := mockClient.GetNamespace(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTableBucket", func(t *testing.T) {
        input := &s3tables.GetTableBucketInput{}
        output := &s3tables.GetTableBucketOutput{}

        mockClient.On("GetTableBucket", ctx, input).Return(output, nil)

        result, err := mockClient.GetTableBucket(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTableBucketMaintenanceConfiguration", func(t *testing.T) {
        input := &s3tables.GetTableBucketMaintenanceConfigurationInput{}
        output := &s3tables.GetTableBucketMaintenanceConfigurationOutput{}

        mockClient.On("GetTableBucketMaintenanceConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetTableBucketMaintenanceConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTableBucketPolicy", func(t *testing.T) {
        input := &s3tables.GetTableBucketPolicyInput{}
        output := &s3tables.GetTableBucketPolicyOutput{}

        mockClient.On("GetTableBucketPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.GetTableBucketPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTable", func(t *testing.T) {
        input := &s3tables.GetTableInput{}
        output := &s3tables.GetTableOutput{}

        mockClient.On("GetTable", ctx, input).Return(output, nil)

        result, err := mockClient.GetTable(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTableMaintenanceConfiguration", func(t *testing.T) {
        input := &s3tables.GetTableMaintenanceConfigurationInput{}
        output := &s3tables.GetTableMaintenanceConfigurationOutput{}

        mockClient.On("GetTableMaintenanceConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetTableMaintenanceConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTableMaintenanceJobStatus", func(t *testing.T) {
        input := &s3tables.GetTableMaintenanceJobStatusInput{}
        output := &s3tables.GetTableMaintenanceJobStatusOutput{}

        mockClient.On("GetTableMaintenanceJobStatus", ctx, input).Return(output, nil)

        result, err := mockClient.GetTableMaintenanceJobStatus(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTableMetadataLocation", func(t *testing.T) {
        input := &s3tables.GetTableMetadataLocationInput{}
        output := &s3tables.GetTableMetadataLocationOutput{}

        mockClient.On("GetTableMetadataLocation", ctx, input).Return(output, nil)

        result, err := mockClient.GetTableMetadataLocation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTablePolicy", func(t *testing.T) {
        input := &s3tables.GetTablePolicyInput{}
        output := &s3tables.GetTablePolicyOutput{}

        mockClient.On("GetTablePolicy", ctx, input).Return(output, nil)

        result, err := mockClient.GetTablePolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListNamespaces", func(t *testing.T) {
        input := &s3tables.ListNamespacesInput{}
        output := &s3tables.ListNamespacesOutput{}

        mockClient.On("ListNamespaces", ctx, input).Return(output, nil)

        result, err := mockClient.ListNamespaces(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTableBuckets", func(t *testing.T) {
        input := &s3tables.ListTableBucketsInput{}
        output := &s3tables.ListTableBucketsOutput{}

        mockClient.On("ListTableBuckets", ctx, input).Return(output, nil)

        result, err := mockClient.ListTableBuckets(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTables", func(t *testing.T) {
        input := &s3tables.ListTablesInput{}
        output := &s3tables.ListTablesOutput{}

        mockClient.On("ListTables", ctx, input).Return(output, nil)

        result, err := mockClient.ListTables(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutTableBucketMaintenanceConfiguration", func(t *testing.T) {
        input := &s3tables.PutTableBucketMaintenanceConfigurationInput{}
        output := &s3tables.PutTableBucketMaintenanceConfigurationOutput{}

        mockClient.On("PutTableBucketMaintenanceConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.PutTableBucketMaintenanceConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutTableBucketPolicy", func(t *testing.T) {
        input := &s3tables.PutTableBucketPolicyInput{}
        output := &s3tables.PutTableBucketPolicyOutput{}

        mockClient.On("PutTableBucketPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.PutTableBucketPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutTableMaintenanceConfiguration", func(t *testing.T) {
        input := &s3tables.PutTableMaintenanceConfigurationInput{}
        output := &s3tables.PutTableMaintenanceConfigurationOutput{}

        mockClient.On("PutTableMaintenanceConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.PutTableMaintenanceConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutTablePolicy", func(t *testing.T) {
        input := &s3tables.PutTablePolicyInput{}
        output := &s3tables.PutTablePolicyOutput{}

        mockClient.On("PutTablePolicy", ctx, input).Return(output, nil)

        result, err := mockClient.PutTablePolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRenameTable", func(t *testing.T) {
        input := &s3tables.RenameTableInput{}
        output := &s3tables.RenameTableOutput{}

        mockClient.On("RenameTable", ctx, input).Return(output, nil)

        result, err := mockClient.RenameTable(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateTableMetadataLocation", func(t *testing.T) {
        input := &s3tables.UpdateTableMetadataLocationInput{}
        output := &s3tables.UpdateTableMetadataLocationOutput{}

        mockClient.On("UpdateTableMetadataLocation", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateTableMetadataLocation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
