// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package odb_test

// tests for the odb service interface for 
// this ../../../service/odb/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/odb"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/odb/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/odb/odb_iface"
	"github.com/stretchr/testify/assert"
)

func TestOdbServiceCanBeMocked(t *testing.T) {
	var iface odb_iface.IClient
	iface = &odb.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := odb.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAcceptMarketplaceRegistration", func(t *testing.T) {
        input := &odb.AcceptMarketplaceRegistrationInput{}
        output := &odb.AcceptMarketplaceRegistrationOutput{}

        mockClient.On("AcceptMarketplaceRegistration", ctx, input).Return(output, nil)

        result, err := mockClient.AcceptMarketplaceRegistration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateCloudAutonomousVmCluster", func(t *testing.T) {
        input := &odb.CreateCloudAutonomousVmClusterInput{}
        output := &odb.CreateCloudAutonomousVmClusterOutput{}

        mockClient.On("CreateCloudAutonomousVmCluster", ctx, input).Return(output, nil)

        result, err := mockClient.CreateCloudAutonomousVmCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateCloudExadataInfrastructure", func(t *testing.T) {
        input := &odb.CreateCloudExadataInfrastructureInput{}
        output := &odb.CreateCloudExadataInfrastructureOutput{}

        mockClient.On("CreateCloudExadataInfrastructure", ctx, input).Return(output, nil)

        result, err := mockClient.CreateCloudExadataInfrastructure(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateCloudVmCluster", func(t *testing.T) {
        input := &odb.CreateCloudVmClusterInput{}
        output := &odb.CreateCloudVmClusterOutput{}

        mockClient.On("CreateCloudVmCluster", ctx, input).Return(output, nil)

        result, err := mockClient.CreateCloudVmCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateOdbNetwork", func(t *testing.T) {
        input := &odb.CreateOdbNetworkInput{}
        output := &odb.CreateOdbNetworkOutput{}

        mockClient.On("CreateOdbNetwork", ctx, input).Return(output, nil)

        result, err := mockClient.CreateOdbNetwork(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateOdbPeeringConnection", func(t *testing.T) {
        input := &odb.CreateOdbPeeringConnectionInput{}
        output := &odb.CreateOdbPeeringConnectionOutput{}

        mockClient.On("CreateOdbPeeringConnection", ctx, input).Return(output, nil)

        result, err := mockClient.CreateOdbPeeringConnection(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteCloudAutonomousVmCluster", func(t *testing.T) {
        input := &odb.DeleteCloudAutonomousVmClusterInput{}
        output := &odb.DeleteCloudAutonomousVmClusterOutput{}

        mockClient.On("DeleteCloudAutonomousVmCluster", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteCloudAutonomousVmCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteCloudExadataInfrastructure", func(t *testing.T) {
        input := &odb.DeleteCloudExadataInfrastructureInput{}
        output := &odb.DeleteCloudExadataInfrastructureOutput{}

        mockClient.On("DeleteCloudExadataInfrastructure", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteCloudExadataInfrastructure(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteCloudVmCluster", func(t *testing.T) {
        input := &odb.DeleteCloudVmClusterInput{}
        output := &odb.DeleteCloudVmClusterOutput{}

        mockClient.On("DeleteCloudVmCluster", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteCloudVmCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteOdbNetwork", func(t *testing.T) {
        input := &odb.DeleteOdbNetworkInput{}
        output := &odb.DeleteOdbNetworkOutput{}

        mockClient.On("DeleteOdbNetwork", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteOdbNetwork(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteOdbPeeringConnection", func(t *testing.T) {
        input := &odb.DeleteOdbPeeringConnectionInput{}
        output := &odb.DeleteOdbPeeringConnectionOutput{}

        mockClient.On("DeleteOdbPeeringConnection", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteOdbPeeringConnection(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCloudAutonomousVmCluster", func(t *testing.T) {
        input := &odb.GetCloudAutonomousVmClusterInput{}
        output := &odb.GetCloudAutonomousVmClusterOutput{}

        mockClient.On("GetCloudAutonomousVmCluster", ctx, input).Return(output, nil)

        result, err := mockClient.GetCloudAutonomousVmCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCloudExadataInfrastructure", func(t *testing.T) {
        input := &odb.GetCloudExadataInfrastructureInput{}
        output := &odb.GetCloudExadataInfrastructureOutput{}

        mockClient.On("GetCloudExadataInfrastructure", ctx, input).Return(output, nil)

        result, err := mockClient.GetCloudExadataInfrastructure(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCloudExadataInfrastructureUnallocatedResources", func(t *testing.T) {
        input := &odb.GetCloudExadataInfrastructureUnallocatedResourcesInput{}
        output := &odb.GetCloudExadataInfrastructureUnallocatedResourcesOutput{}

        mockClient.On("GetCloudExadataInfrastructureUnallocatedResources", ctx, input).Return(output, nil)

        result, err := mockClient.GetCloudExadataInfrastructureUnallocatedResources(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCloudVmCluster", func(t *testing.T) {
        input := &odb.GetCloudVmClusterInput{}
        output := &odb.GetCloudVmClusterOutput{}

        mockClient.On("GetCloudVmCluster", ctx, input).Return(output, nil)

        result, err := mockClient.GetCloudVmCluster(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDbNode", func(t *testing.T) {
        input := &odb.GetDbNodeInput{}
        output := &odb.GetDbNodeOutput{}

        mockClient.On("GetDbNode", ctx, input).Return(output, nil)

        result, err := mockClient.GetDbNode(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDbServer", func(t *testing.T) {
        input := &odb.GetDbServerInput{}
        output := &odb.GetDbServerOutput{}

        mockClient.On("GetDbServer", ctx, input).Return(output, nil)

        result, err := mockClient.GetDbServer(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetOciOnboardingStatus", func(t *testing.T) {
        input := &odb.GetOciOnboardingStatusInput{}
        output := &odb.GetOciOnboardingStatusOutput{}

        mockClient.On("GetOciOnboardingStatus", ctx, input).Return(output, nil)

        result, err := mockClient.GetOciOnboardingStatus(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetOdbNetwork", func(t *testing.T) {
        input := &odb.GetOdbNetworkInput{}
        output := &odb.GetOdbNetworkOutput{}

        mockClient.On("GetOdbNetwork", ctx, input).Return(output, nil)

        result, err := mockClient.GetOdbNetwork(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetOdbPeeringConnection", func(t *testing.T) {
        input := &odb.GetOdbPeeringConnectionInput{}
        output := &odb.GetOdbPeeringConnectionOutput{}

        mockClient.On("GetOdbPeeringConnection", ctx, input).Return(output, nil)

        result, err := mockClient.GetOdbPeeringConnection(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestInitializeService", func(t *testing.T) {
        input := &odb.InitializeServiceInput{}
        output := &odb.InitializeServiceOutput{}

        mockClient.On("InitializeService", ctx, input).Return(output, nil)

        result, err := mockClient.InitializeService(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAutonomousVirtualMachines", func(t *testing.T) {
        input := &odb.ListAutonomousVirtualMachinesInput{}
        output := &odb.ListAutonomousVirtualMachinesOutput{}

        mockClient.On("ListAutonomousVirtualMachines", ctx, input).Return(output, nil)

        result, err := mockClient.ListAutonomousVirtualMachines(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCloudAutonomousVmClusters", func(t *testing.T) {
        input := &odb.ListCloudAutonomousVmClustersInput{}
        output := &odb.ListCloudAutonomousVmClustersOutput{}

        mockClient.On("ListCloudAutonomousVmClusters", ctx, input).Return(output, nil)

        result, err := mockClient.ListCloudAutonomousVmClusters(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCloudExadataInfrastructures", func(t *testing.T) {
        input := &odb.ListCloudExadataInfrastructuresInput{}
        output := &odb.ListCloudExadataInfrastructuresOutput{}

        mockClient.On("ListCloudExadataInfrastructures", ctx, input).Return(output, nil)

        result, err := mockClient.ListCloudExadataInfrastructures(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCloudVmClusters", func(t *testing.T) {
        input := &odb.ListCloudVmClustersInput{}
        output := &odb.ListCloudVmClustersOutput{}

        mockClient.On("ListCloudVmClusters", ctx, input).Return(output, nil)

        result, err := mockClient.ListCloudVmClusters(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDbNodes", func(t *testing.T) {
        input := &odb.ListDbNodesInput{}
        output := &odb.ListDbNodesOutput{}

        mockClient.On("ListDbNodes", ctx, input).Return(output, nil)

        result, err := mockClient.ListDbNodes(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDbServers", func(t *testing.T) {
        input := &odb.ListDbServersInput{}
        output := &odb.ListDbServersOutput{}

        mockClient.On("ListDbServers", ctx, input).Return(output, nil)

        result, err := mockClient.ListDbServers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDbSystemShapes", func(t *testing.T) {
        input := &odb.ListDbSystemShapesInput{}
        output := &odb.ListDbSystemShapesOutput{}

        mockClient.On("ListDbSystemShapes", ctx, input).Return(output, nil)

        result, err := mockClient.ListDbSystemShapes(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListGiVersions", func(t *testing.T) {
        input := &odb.ListGiVersionsInput{}
        output := &odb.ListGiVersionsOutput{}

        mockClient.On("ListGiVersions", ctx, input).Return(output, nil)

        result, err := mockClient.ListGiVersions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListOdbNetworks", func(t *testing.T) {
        input := &odb.ListOdbNetworksInput{}
        output := &odb.ListOdbNetworksOutput{}

        mockClient.On("ListOdbNetworks", ctx, input).Return(output, nil)

        result, err := mockClient.ListOdbNetworks(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListOdbPeeringConnections", func(t *testing.T) {
        input := &odb.ListOdbPeeringConnectionsInput{}
        output := &odb.ListOdbPeeringConnectionsOutput{}

        mockClient.On("ListOdbPeeringConnections", ctx, input).Return(output, nil)

        result, err := mockClient.ListOdbPeeringConnections(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListSystemVersions", func(t *testing.T) {
        input := &odb.ListSystemVersionsInput{}
        output := &odb.ListSystemVersionsOutput{}

        mockClient.On("ListSystemVersions", ctx, input).Return(output, nil)

        result, err := mockClient.ListSystemVersions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &odb.ListTagsForResourceInput{}
        output := &odb.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRebootDbNode", func(t *testing.T) {
        input := &odb.RebootDbNodeInput{}
        output := &odb.RebootDbNodeOutput{}

        mockClient.On("RebootDbNode", ctx, input).Return(output, nil)

        result, err := mockClient.RebootDbNode(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartDbNode", func(t *testing.T) {
        input := &odb.StartDbNodeInput{}
        output := &odb.StartDbNodeOutput{}

        mockClient.On("StartDbNode", ctx, input).Return(output, nil)

        result, err := mockClient.StartDbNode(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopDbNode", func(t *testing.T) {
        input := &odb.StopDbNodeInput{}
        output := &odb.StopDbNodeOutput{}

        mockClient.On("StopDbNode", ctx, input).Return(output, nil)

        result, err := mockClient.StopDbNode(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &odb.TagResourceInput{}
        output := &odb.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &odb.UntagResourceInput{}
        output := &odb.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateCloudExadataInfrastructure", func(t *testing.T) {
        input := &odb.UpdateCloudExadataInfrastructureInput{}
        output := &odb.UpdateCloudExadataInfrastructureOutput{}

        mockClient.On("UpdateCloudExadataInfrastructure", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateCloudExadataInfrastructure(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateOdbNetwork", func(t *testing.T) {
        input := &odb.UpdateOdbNetworkInput{}
        output := &odb.UpdateOdbNetworkOutput{}

        mockClient.On("UpdateOdbNetwork", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateOdbNetwork(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
