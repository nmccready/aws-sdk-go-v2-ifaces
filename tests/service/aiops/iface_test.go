// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package aiops_test

// tests for the aiops service interface for 
// this ../../../service/aiops/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/aiops"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/aiops/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/aiops/aiops_iface"
	"github.com/stretchr/testify/assert"
)

func TestAiopsServiceCanBeMocked(t *testing.T) {
	var iface aiops_iface.IClient
	iface = &aiops.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := aiops.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateInvestigationGroup", func(t *testing.T) {
        input := &aiops.CreateInvestigationGroupInput{}
        output := &aiops.CreateInvestigationGroupOutput{}

        mockClient.On("CreateInvestigationGroup", ctx, input).Return(output, nil)

        result, err := mockClient.CreateInvestigationGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteInvestigationGroup", func(t *testing.T) {
        input := &aiops.DeleteInvestigationGroupInput{}
        output := &aiops.DeleteInvestigationGroupOutput{}

        mockClient.On("DeleteInvestigationGroup", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteInvestigationGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteInvestigationGroupPolicy", func(t *testing.T) {
        input := &aiops.DeleteInvestigationGroupPolicyInput{}
        output := &aiops.DeleteInvestigationGroupPolicyOutput{}

        mockClient.On("DeleteInvestigationGroupPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteInvestigationGroupPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetInvestigationGroup", func(t *testing.T) {
        input := &aiops.GetInvestigationGroupInput{}
        output := &aiops.GetInvestigationGroupOutput{}

        mockClient.On("GetInvestigationGroup", ctx, input).Return(output, nil)

        result, err := mockClient.GetInvestigationGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetInvestigationGroupPolicy", func(t *testing.T) {
        input := &aiops.GetInvestigationGroupPolicyInput{}
        output := &aiops.GetInvestigationGroupPolicyOutput{}

        mockClient.On("GetInvestigationGroupPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.GetInvestigationGroupPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListInvestigationGroups", func(t *testing.T) {
        input := &aiops.ListInvestigationGroupsInput{}
        output := &aiops.ListInvestigationGroupsOutput{}

        mockClient.On("ListInvestigationGroups", ctx, input).Return(output, nil)

        result, err := mockClient.ListInvestigationGroups(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &aiops.ListTagsForResourceInput{}
        output := &aiops.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutInvestigationGroupPolicy", func(t *testing.T) {
        input := &aiops.PutInvestigationGroupPolicyInput{}
        output := &aiops.PutInvestigationGroupPolicyOutput{}

        mockClient.On("PutInvestigationGroupPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.PutInvestigationGroupPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &aiops.TagResourceInput{}
        output := &aiops.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &aiops.UntagResourceInput{}
        output := &aiops.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateInvestigationGroup", func(t *testing.T) {
        input := &aiops.UpdateInvestigationGroupInput{}
        output := &aiops.UpdateInvestigationGroupOutput{}

        mockClient.On("UpdateInvestigationGroup", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateInvestigationGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
