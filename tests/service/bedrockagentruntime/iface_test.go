// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package bedrockagentruntime_test

// tests for the bedrockagentruntime service interface for 
// this ../../../service/bedrockagentruntime/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/bedrockagentruntime"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bedrockagentruntime/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bedrockagentruntime/bedrockagentruntime_iface"
	"github.com/stretchr/testify/assert"
)

func TestBedrockagentruntimeServiceCanBeMocked(t *testing.T) {
	var iface bedrockagentruntime_iface.IClient
	iface = &bedrockagentruntime.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := bedrockagentruntime.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateInvocation", func(t *testing.T) {
        input := &bedrockagentruntime.CreateInvocationInput{}
        output := &bedrockagentruntime.CreateInvocationOutput{}

        mockClient.On("CreateInvocation", ctx, input).Return(output, nil)

        result, err := mockClient.CreateInvocation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateSession", func(t *testing.T) {
        input := &bedrockagentruntime.CreateSessionInput{}
        output := &bedrockagentruntime.CreateSessionOutput{}

        mockClient.On("CreateSession", ctx, input).Return(output, nil)

        result, err := mockClient.CreateSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteAgentMemory", func(t *testing.T) {
        input := &bedrockagentruntime.DeleteAgentMemoryInput{}
        output := &bedrockagentruntime.DeleteAgentMemoryOutput{}

        mockClient.On("DeleteAgentMemory", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteAgentMemory(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteSession", func(t *testing.T) {
        input := &bedrockagentruntime.DeleteSessionInput{}
        output := &bedrockagentruntime.DeleteSessionOutput{}

        mockClient.On("DeleteSession", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestEndSession", func(t *testing.T) {
        input := &bedrockagentruntime.EndSessionInput{}
        output := &bedrockagentruntime.EndSessionOutput{}

        mockClient.On("EndSession", ctx, input).Return(output, nil)

        result, err := mockClient.EndSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGenerateQuery", func(t *testing.T) {
        input := &bedrockagentruntime.GenerateQueryInput{}
        output := &bedrockagentruntime.GenerateQueryOutput{}

        mockClient.On("GenerateQuery", ctx, input).Return(output, nil)

        result, err := mockClient.GenerateQuery(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAgentMemory", func(t *testing.T) {
        input := &bedrockagentruntime.GetAgentMemoryInput{}
        output := &bedrockagentruntime.GetAgentMemoryOutput{}

        mockClient.On("GetAgentMemory", ctx, input).Return(output, nil)

        result, err := mockClient.GetAgentMemory(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetExecutionFlowSnapshot", func(t *testing.T) {
        input := &bedrockagentruntime.GetExecutionFlowSnapshotInput{}
        output := &bedrockagentruntime.GetExecutionFlowSnapshotOutput{}

        mockClient.On("GetExecutionFlowSnapshot", ctx, input).Return(output, nil)

        result, err := mockClient.GetExecutionFlowSnapshot(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetFlowExecution", func(t *testing.T) {
        input := &bedrockagentruntime.GetFlowExecutionInput{}
        output := &bedrockagentruntime.GetFlowExecutionOutput{}

        mockClient.On("GetFlowExecution", ctx, input).Return(output, nil)

        result, err := mockClient.GetFlowExecution(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetInvocationStep", func(t *testing.T) {
        input := &bedrockagentruntime.GetInvocationStepInput{}
        output := &bedrockagentruntime.GetInvocationStepOutput{}

        mockClient.On("GetInvocationStep", ctx, input).Return(output, nil)

        result, err := mockClient.GetInvocationStep(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetSession", func(t *testing.T) {
        input := &bedrockagentruntime.GetSessionInput{}
        output := &bedrockagentruntime.GetSessionOutput{}

        mockClient.On("GetSession", ctx, input).Return(output, nil)

        result, err := mockClient.GetSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestInvokeAgent", func(t *testing.T) {
        input := &bedrockagentruntime.InvokeAgentInput{}
        output := &bedrockagentruntime.InvokeAgentOutput{}

        mockClient.On("InvokeAgent", ctx, input).Return(output, nil)

        result, err := mockClient.InvokeAgent(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestInvokeFlow", func(t *testing.T) {
        input := &bedrockagentruntime.InvokeFlowInput{}
        output := &bedrockagentruntime.InvokeFlowOutput{}

        mockClient.On("InvokeFlow", ctx, input).Return(output, nil)

        result, err := mockClient.InvokeFlow(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestInvokeInlineAgent", func(t *testing.T) {
        input := &bedrockagentruntime.InvokeInlineAgentInput{}
        output := &bedrockagentruntime.InvokeInlineAgentOutput{}

        mockClient.On("InvokeInlineAgent", ctx, input).Return(output, nil)

        result, err := mockClient.InvokeInlineAgent(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListFlowExecutionEvents", func(t *testing.T) {
        input := &bedrockagentruntime.ListFlowExecutionEventsInput{}
        output := &bedrockagentruntime.ListFlowExecutionEventsOutput{}

        mockClient.On("ListFlowExecutionEvents", ctx, input).Return(output, nil)

        result, err := mockClient.ListFlowExecutionEvents(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListFlowExecutions", func(t *testing.T) {
        input := &bedrockagentruntime.ListFlowExecutionsInput{}
        output := &bedrockagentruntime.ListFlowExecutionsOutput{}

        mockClient.On("ListFlowExecutions", ctx, input).Return(output, nil)

        result, err := mockClient.ListFlowExecutions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListInvocations", func(t *testing.T) {
        input := &bedrockagentruntime.ListInvocationsInput{}
        output := &bedrockagentruntime.ListInvocationsOutput{}

        mockClient.On("ListInvocations", ctx, input).Return(output, nil)

        result, err := mockClient.ListInvocations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListInvocationSteps", func(t *testing.T) {
        input := &bedrockagentruntime.ListInvocationStepsInput{}
        output := &bedrockagentruntime.ListInvocationStepsOutput{}

        mockClient.On("ListInvocationSteps", ctx, input).Return(output, nil)

        result, err := mockClient.ListInvocationSteps(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListSessions", func(t *testing.T) {
        input := &bedrockagentruntime.ListSessionsInput{}
        output := &bedrockagentruntime.ListSessionsOutput{}

        mockClient.On("ListSessions", ctx, input).Return(output, nil)

        result, err := mockClient.ListSessions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &bedrockagentruntime.ListTagsForResourceInput{}
        output := &bedrockagentruntime.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestOptimizePrompt", func(t *testing.T) {
        input := &bedrockagentruntime.OptimizePromptInput{}
        output := &bedrockagentruntime.OptimizePromptOutput{}

        mockClient.On("OptimizePrompt", ctx, input).Return(output, nil)

        result, err := mockClient.OptimizePrompt(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutInvocationStep", func(t *testing.T) {
        input := &bedrockagentruntime.PutInvocationStepInput{}
        output := &bedrockagentruntime.PutInvocationStepOutput{}

        mockClient.On("PutInvocationStep", ctx, input).Return(output, nil)

        result, err := mockClient.PutInvocationStep(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRerank", func(t *testing.T) {
        input := &bedrockagentruntime.RerankInput{}
        output := &bedrockagentruntime.RerankOutput{}

        mockClient.On("Rerank", ctx, input).Return(output, nil)

        result, err := mockClient.Rerank(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRetrieve", func(t *testing.T) {
        input := &bedrockagentruntime.RetrieveInput{}
        output := &bedrockagentruntime.RetrieveOutput{}

        mockClient.On("Retrieve", ctx, input).Return(output, nil)

        result, err := mockClient.Retrieve(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRetrieveAndGenerate", func(t *testing.T) {
        input := &bedrockagentruntime.RetrieveAndGenerateInput{}
        output := &bedrockagentruntime.RetrieveAndGenerateOutput{}

        mockClient.On("RetrieveAndGenerate", ctx, input).Return(output, nil)

        result, err := mockClient.RetrieveAndGenerate(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRetrieveAndGenerateStream", func(t *testing.T) {
        input := &bedrockagentruntime.RetrieveAndGenerateStreamInput{}
        output := &bedrockagentruntime.RetrieveAndGenerateStreamOutput{}

        mockClient.On("RetrieveAndGenerateStream", ctx, input).Return(output, nil)

        result, err := mockClient.RetrieveAndGenerateStream(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartFlowExecution", func(t *testing.T) {
        input := &bedrockagentruntime.StartFlowExecutionInput{}
        output := &bedrockagentruntime.StartFlowExecutionOutput{}

        mockClient.On("StartFlowExecution", ctx, input).Return(output, nil)

        result, err := mockClient.StartFlowExecution(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopFlowExecution", func(t *testing.T) {
        input := &bedrockagentruntime.StopFlowExecutionInput{}
        output := &bedrockagentruntime.StopFlowExecutionOutput{}

        mockClient.On("StopFlowExecution", ctx, input).Return(output, nil)

        result, err := mockClient.StopFlowExecution(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &bedrockagentruntime.TagResourceInput{}
        output := &bedrockagentruntime.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &bedrockagentruntime.UntagResourceInput{}
        output := &bedrockagentruntime.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateSession", func(t *testing.T) {
        input := &bedrockagentruntime.UpdateSessionInput{}
        output := &bedrockagentruntime.UpdateSessionOutput{}

        mockClient.On("UpdateSession", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
