// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package iotmanagedintegrations_test

// tests for the iotmanagedintegrations service interface for 
// this ../../../service/iotmanagedintegrations/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/iotmanagedintegrations"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/iotmanagedintegrations/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/iotmanagedintegrations/iotmanagedintegrations_iface"
	"github.com/stretchr/testify/assert"
)

func TestIotmanagedintegrationsServiceCanBeMocked(t *testing.T) {
	var iface iotmanagedintegrations_iface.IClient
	iface = &iotmanagedintegrations.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := iotmanagedintegrations.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateAccountAssociation", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateAccountAssociationInput{}
        output := &iotmanagedintegrations.CreateAccountAssociationOutput{}

        mockClient.On("CreateAccountAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.CreateAccountAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateCloudConnector", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateCloudConnectorInput{}
        output := &iotmanagedintegrations.CreateCloudConnectorOutput{}

        mockClient.On("CreateCloudConnector", ctx, input).Return(output, nil)

        result, err := mockClient.CreateCloudConnector(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateConnectorDestination", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateConnectorDestinationInput{}
        output := &iotmanagedintegrations.CreateConnectorDestinationOutput{}

        mockClient.On("CreateConnectorDestination", ctx, input).Return(output, nil)

        result, err := mockClient.CreateConnectorDestination(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateCredentialLocker", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateCredentialLockerInput{}
        output := &iotmanagedintegrations.CreateCredentialLockerOutput{}

        mockClient.On("CreateCredentialLocker", ctx, input).Return(output, nil)

        result, err := mockClient.CreateCredentialLocker(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateDestination", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateDestinationInput{}
        output := &iotmanagedintegrations.CreateDestinationOutput{}

        mockClient.On("CreateDestination", ctx, input).Return(output, nil)

        result, err := mockClient.CreateDestination(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateEventLogConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateEventLogConfigurationInput{}
        output := &iotmanagedintegrations.CreateEventLogConfigurationOutput{}

        mockClient.On("CreateEventLogConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.CreateEventLogConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateManagedThing", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateManagedThingInput{}
        output := &iotmanagedintegrations.CreateManagedThingOutput{}

        mockClient.On("CreateManagedThing", ctx, input).Return(output, nil)

        result, err := mockClient.CreateManagedThing(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateNotificationConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateNotificationConfigurationInput{}
        output := &iotmanagedintegrations.CreateNotificationConfigurationOutput{}

        mockClient.On("CreateNotificationConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.CreateNotificationConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateOtaTask", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateOtaTaskInput{}
        output := &iotmanagedintegrations.CreateOtaTaskOutput{}

        mockClient.On("CreateOtaTask", ctx, input).Return(output, nil)

        result, err := mockClient.CreateOtaTask(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateOtaTaskConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateOtaTaskConfigurationInput{}
        output := &iotmanagedintegrations.CreateOtaTaskConfigurationOutput{}

        mockClient.On("CreateOtaTaskConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.CreateOtaTaskConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateProvisioningProfile", func(t *testing.T) {
        input := &iotmanagedintegrations.CreateProvisioningProfileInput{}
        output := &iotmanagedintegrations.CreateProvisioningProfileOutput{}

        mockClient.On("CreateProvisioningProfile", ctx, input).Return(output, nil)

        result, err := mockClient.CreateProvisioningProfile(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteAccountAssociation", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteAccountAssociationInput{}
        output := &iotmanagedintegrations.DeleteAccountAssociationOutput{}

        mockClient.On("DeleteAccountAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteAccountAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteCloudConnector", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteCloudConnectorInput{}
        output := &iotmanagedintegrations.DeleteCloudConnectorOutput{}

        mockClient.On("DeleteCloudConnector", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteCloudConnector(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteConnectorDestination", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteConnectorDestinationInput{}
        output := &iotmanagedintegrations.DeleteConnectorDestinationOutput{}

        mockClient.On("DeleteConnectorDestination", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteConnectorDestination(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteCredentialLocker", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteCredentialLockerInput{}
        output := &iotmanagedintegrations.DeleteCredentialLockerOutput{}

        mockClient.On("DeleteCredentialLocker", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteCredentialLocker(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteDestination", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteDestinationInput{}
        output := &iotmanagedintegrations.DeleteDestinationOutput{}

        mockClient.On("DeleteDestination", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteDestination(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteEventLogConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteEventLogConfigurationInput{}
        output := &iotmanagedintegrations.DeleteEventLogConfigurationOutput{}

        mockClient.On("DeleteEventLogConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteEventLogConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteManagedThing", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteManagedThingInput{}
        output := &iotmanagedintegrations.DeleteManagedThingOutput{}

        mockClient.On("DeleteManagedThing", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteManagedThing(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteNotificationConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteNotificationConfigurationInput{}
        output := &iotmanagedintegrations.DeleteNotificationConfigurationOutput{}

        mockClient.On("DeleteNotificationConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteNotificationConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteOtaTask", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteOtaTaskInput{}
        output := &iotmanagedintegrations.DeleteOtaTaskOutput{}

        mockClient.On("DeleteOtaTask", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteOtaTask(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteOtaTaskConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteOtaTaskConfigurationInput{}
        output := &iotmanagedintegrations.DeleteOtaTaskConfigurationOutput{}

        mockClient.On("DeleteOtaTaskConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteOtaTaskConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteProvisioningProfile", func(t *testing.T) {
        input := &iotmanagedintegrations.DeleteProvisioningProfileInput{}
        output := &iotmanagedintegrations.DeleteProvisioningProfileOutput{}

        mockClient.On("DeleteProvisioningProfile", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteProvisioningProfile(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeregisterAccountAssociation", func(t *testing.T) {
        input := &iotmanagedintegrations.DeregisterAccountAssociationInput{}
        output := &iotmanagedintegrations.DeregisterAccountAssociationOutput{}

        mockClient.On("DeregisterAccountAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.DeregisterAccountAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAccountAssociation", func(t *testing.T) {
        input := &iotmanagedintegrations.GetAccountAssociationInput{}
        output := &iotmanagedintegrations.GetAccountAssociationOutput{}

        mockClient.On("GetAccountAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.GetAccountAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCloudConnector", func(t *testing.T) {
        input := &iotmanagedintegrations.GetCloudConnectorInput{}
        output := &iotmanagedintegrations.GetCloudConnectorOutput{}

        mockClient.On("GetCloudConnector", ctx, input).Return(output, nil)

        result, err := mockClient.GetCloudConnector(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetConnectorDestination", func(t *testing.T) {
        input := &iotmanagedintegrations.GetConnectorDestinationInput{}
        output := &iotmanagedintegrations.GetConnectorDestinationOutput{}

        mockClient.On("GetConnectorDestination", ctx, input).Return(output, nil)

        result, err := mockClient.GetConnectorDestination(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCredentialLocker", func(t *testing.T) {
        input := &iotmanagedintegrations.GetCredentialLockerInput{}
        output := &iotmanagedintegrations.GetCredentialLockerOutput{}

        mockClient.On("GetCredentialLocker", ctx, input).Return(output, nil)

        result, err := mockClient.GetCredentialLocker(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCustomEndpoint", func(t *testing.T) {
        input := &iotmanagedintegrations.GetCustomEndpointInput{}
        output := &iotmanagedintegrations.GetCustomEndpointOutput{}

        mockClient.On("GetCustomEndpoint", ctx, input).Return(output, nil)

        result, err := mockClient.GetCustomEndpoint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDefaultEncryptionConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.GetDefaultEncryptionConfigurationInput{}
        output := &iotmanagedintegrations.GetDefaultEncryptionConfigurationOutput{}

        mockClient.On("GetDefaultEncryptionConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetDefaultEncryptionConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDestination", func(t *testing.T) {
        input := &iotmanagedintegrations.GetDestinationInput{}
        output := &iotmanagedintegrations.GetDestinationOutput{}

        mockClient.On("GetDestination", ctx, input).Return(output, nil)

        result, err := mockClient.GetDestination(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDeviceDiscovery", func(t *testing.T) {
        input := &iotmanagedintegrations.GetDeviceDiscoveryInput{}
        output := &iotmanagedintegrations.GetDeviceDiscoveryOutput{}

        mockClient.On("GetDeviceDiscovery", ctx, input).Return(output, nil)

        result, err := mockClient.GetDeviceDiscovery(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetEventLogConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.GetEventLogConfigurationInput{}
        output := &iotmanagedintegrations.GetEventLogConfigurationOutput{}

        mockClient.On("GetEventLogConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetEventLogConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetHubConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.GetHubConfigurationInput{}
        output := &iotmanagedintegrations.GetHubConfigurationOutput{}

        mockClient.On("GetHubConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetHubConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetManagedThing", func(t *testing.T) {
        input := &iotmanagedintegrations.GetManagedThingInput{}
        output := &iotmanagedintegrations.GetManagedThingOutput{}

        mockClient.On("GetManagedThing", ctx, input).Return(output, nil)

        result, err := mockClient.GetManagedThing(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetManagedThingCapabilities", func(t *testing.T) {
        input := &iotmanagedintegrations.GetManagedThingCapabilitiesInput{}
        output := &iotmanagedintegrations.GetManagedThingCapabilitiesOutput{}

        mockClient.On("GetManagedThingCapabilities", ctx, input).Return(output, nil)

        result, err := mockClient.GetManagedThingCapabilities(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetManagedThingConnectivityData", func(t *testing.T) {
        input := &iotmanagedintegrations.GetManagedThingConnectivityDataInput{}
        output := &iotmanagedintegrations.GetManagedThingConnectivityDataOutput{}

        mockClient.On("GetManagedThingConnectivityData", ctx, input).Return(output, nil)

        result, err := mockClient.GetManagedThingConnectivityData(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetManagedThingMetaData", func(t *testing.T) {
        input := &iotmanagedintegrations.GetManagedThingMetaDataInput{}
        output := &iotmanagedintegrations.GetManagedThingMetaDataOutput{}

        mockClient.On("GetManagedThingMetaData", ctx, input).Return(output, nil)

        result, err := mockClient.GetManagedThingMetaData(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetManagedThingState", func(t *testing.T) {
        input := &iotmanagedintegrations.GetManagedThingStateInput{}
        output := &iotmanagedintegrations.GetManagedThingStateOutput{}

        mockClient.On("GetManagedThingState", ctx, input).Return(output, nil)

        result, err := mockClient.GetManagedThingState(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetNotificationConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.GetNotificationConfigurationInput{}
        output := &iotmanagedintegrations.GetNotificationConfigurationOutput{}

        mockClient.On("GetNotificationConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetNotificationConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetOtaTask", func(t *testing.T) {
        input := &iotmanagedintegrations.GetOtaTaskInput{}
        output := &iotmanagedintegrations.GetOtaTaskOutput{}

        mockClient.On("GetOtaTask", ctx, input).Return(output, nil)

        result, err := mockClient.GetOtaTask(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetOtaTaskConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.GetOtaTaskConfigurationInput{}
        output := &iotmanagedintegrations.GetOtaTaskConfigurationOutput{}

        mockClient.On("GetOtaTaskConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetOtaTaskConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetProvisioningProfile", func(t *testing.T) {
        input := &iotmanagedintegrations.GetProvisioningProfileInput{}
        output := &iotmanagedintegrations.GetProvisioningProfileOutput{}

        mockClient.On("GetProvisioningProfile", ctx, input).Return(output, nil)

        result, err := mockClient.GetProvisioningProfile(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetRuntimeLogConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.GetRuntimeLogConfigurationInput{}
        output := &iotmanagedintegrations.GetRuntimeLogConfigurationOutput{}

        mockClient.On("GetRuntimeLogConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetRuntimeLogConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetSchemaVersion", func(t *testing.T) {
        input := &iotmanagedintegrations.GetSchemaVersionInput{}
        output := &iotmanagedintegrations.GetSchemaVersionOutput{}

        mockClient.On("GetSchemaVersion", ctx, input).Return(output, nil)

        result, err := mockClient.GetSchemaVersion(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAccountAssociations", func(t *testing.T) {
        input := &iotmanagedintegrations.ListAccountAssociationsInput{}
        output := &iotmanagedintegrations.ListAccountAssociationsOutput{}

        mockClient.On("ListAccountAssociations", ctx, input).Return(output, nil)

        result, err := mockClient.ListAccountAssociations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCloudConnectors", func(t *testing.T) {
        input := &iotmanagedintegrations.ListCloudConnectorsInput{}
        output := &iotmanagedintegrations.ListCloudConnectorsOutput{}

        mockClient.On("ListCloudConnectors", ctx, input).Return(output, nil)

        result, err := mockClient.ListCloudConnectors(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListConnectorDestinations", func(t *testing.T) {
        input := &iotmanagedintegrations.ListConnectorDestinationsInput{}
        output := &iotmanagedintegrations.ListConnectorDestinationsOutput{}

        mockClient.On("ListConnectorDestinations", ctx, input).Return(output, nil)

        result, err := mockClient.ListConnectorDestinations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCredentialLockers", func(t *testing.T) {
        input := &iotmanagedintegrations.ListCredentialLockersInput{}
        output := &iotmanagedintegrations.ListCredentialLockersOutput{}

        mockClient.On("ListCredentialLockers", ctx, input).Return(output, nil)

        result, err := mockClient.ListCredentialLockers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDestinations", func(t *testing.T) {
        input := &iotmanagedintegrations.ListDestinationsInput{}
        output := &iotmanagedintegrations.ListDestinationsOutput{}

        mockClient.On("ListDestinations", ctx, input).Return(output, nil)

        result, err := mockClient.ListDestinations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDeviceDiscoveries", func(t *testing.T) {
        input := &iotmanagedintegrations.ListDeviceDiscoveriesInput{}
        output := &iotmanagedintegrations.ListDeviceDiscoveriesOutput{}

        mockClient.On("ListDeviceDiscoveries", ctx, input).Return(output, nil)

        result, err := mockClient.ListDeviceDiscoveries(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDiscoveredDevices", func(t *testing.T) {
        input := &iotmanagedintegrations.ListDiscoveredDevicesInput{}
        output := &iotmanagedintegrations.ListDiscoveredDevicesOutput{}

        mockClient.On("ListDiscoveredDevices", ctx, input).Return(output, nil)

        result, err := mockClient.ListDiscoveredDevices(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEventLogConfigurations", func(t *testing.T) {
        input := &iotmanagedintegrations.ListEventLogConfigurationsInput{}
        output := &iotmanagedintegrations.ListEventLogConfigurationsOutput{}

        mockClient.On("ListEventLogConfigurations", ctx, input).Return(output, nil)

        result, err := mockClient.ListEventLogConfigurations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListManagedThingAccountAssociations", func(t *testing.T) {
        input := &iotmanagedintegrations.ListManagedThingAccountAssociationsInput{}
        output := &iotmanagedintegrations.ListManagedThingAccountAssociationsOutput{}

        mockClient.On("ListManagedThingAccountAssociations", ctx, input).Return(output, nil)

        result, err := mockClient.ListManagedThingAccountAssociations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListManagedThingSchemas", func(t *testing.T) {
        input := &iotmanagedintegrations.ListManagedThingSchemasInput{}
        output := &iotmanagedintegrations.ListManagedThingSchemasOutput{}

        mockClient.On("ListManagedThingSchemas", ctx, input).Return(output, nil)

        result, err := mockClient.ListManagedThingSchemas(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListManagedThings", func(t *testing.T) {
        input := &iotmanagedintegrations.ListManagedThingsInput{}
        output := &iotmanagedintegrations.ListManagedThingsOutput{}

        mockClient.On("ListManagedThings", ctx, input).Return(output, nil)

        result, err := mockClient.ListManagedThings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListNotificationConfigurations", func(t *testing.T) {
        input := &iotmanagedintegrations.ListNotificationConfigurationsInput{}
        output := &iotmanagedintegrations.ListNotificationConfigurationsOutput{}

        mockClient.On("ListNotificationConfigurations", ctx, input).Return(output, nil)

        result, err := mockClient.ListNotificationConfigurations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListOtaTaskConfigurations", func(t *testing.T) {
        input := &iotmanagedintegrations.ListOtaTaskConfigurationsInput{}
        output := &iotmanagedintegrations.ListOtaTaskConfigurationsOutput{}

        mockClient.On("ListOtaTaskConfigurations", ctx, input).Return(output, nil)

        result, err := mockClient.ListOtaTaskConfigurations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListOtaTaskExecutions", func(t *testing.T) {
        input := &iotmanagedintegrations.ListOtaTaskExecutionsInput{}
        output := &iotmanagedintegrations.ListOtaTaskExecutionsOutput{}

        mockClient.On("ListOtaTaskExecutions", ctx, input).Return(output, nil)

        result, err := mockClient.ListOtaTaskExecutions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListOtaTasks", func(t *testing.T) {
        input := &iotmanagedintegrations.ListOtaTasksInput{}
        output := &iotmanagedintegrations.ListOtaTasksOutput{}

        mockClient.On("ListOtaTasks", ctx, input).Return(output, nil)

        result, err := mockClient.ListOtaTasks(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListProvisioningProfiles", func(t *testing.T) {
        input := &iotmanagedintegrations.ListProvisioningProfilesInput{}
        output := &iotmanagedintegrations.ListProvisioningProfilesOutput{}

        mockClient.On("ListProvisioningProfiles", ctx, input).Return(output, nil)

        result, err := mockClient.ListProvisioningProfiles(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListSchemaVersions", func(t *testing.T) {
        input := &iotmanagedintegrations.ListSchemaVersionsInput{}
        output := &iotmanagedintegrations.ListSchemaVersionsOutput{}

        mockClient.On("ListSchemaVersions", ctx, input).Return(output, nil)

        result, err := mockClient.ListSchemaVersions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &iotmanagedintegrations.ListTagsForResourceInput{}
        output := &iotmanagedintegrations.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutDefaultEncryptionConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.PutDefaultEncryptionConfigurationInput{}
        output := &iotmanagedintegrations.PutDefaultEncryptionConfigurationOutput{}

        mockClient.On("PutDefaultEncryptionConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.PutDefaultEncryptionConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutHubConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.PutHubConfigurationInput{}
        output := &iotmanagedintegrations.PutHubConfigurationOutput{}

        mockClient.On("PutHubConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.PutHubConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutRuntimeLogConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.PutRuntimeLogConfigurationInput{}
        output := &iotmanagedintegrations.PutRuntimeLogConfigurationOutput{}

        mockClient.On("PutRuntimeLogConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.PutRuntimeLogConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRegisterAccountAssociation", func(t *testing.T) {
        input := &iotmanagedintegrations.RegisterAccountAssociationInput{}
        output := &iotmanagedintegrations.RegisterAccountAssociationOutput{}

        mockClient.On("RegisterAccountAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.RegisterAccountAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRegisterCustomEndpoint", func(t *testing.T) {
        input := &iotmanagedintegrations.RegisterCustomEndpointInput{}
        output := &iotmanagedintegrations.RegisterCustomEndpointOutput{}

        mockClient.On("RegisterCustomEndpoint", ctx, input).Return(output, nil)

        result, err := mockClient.RegisterCustomEndpoint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestResetRuntimeLogConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.ResetRuntimeLogConfigurationInput{}
        output := &iotmanagedintegrations.ResetRuntimeLogConfigurationOutput{}

        mockClient.On("ResetRuntimeLogConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.ResetRuntimeLogConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSendConnectorEvent", func(t *testing.T) {
        input := &iotmanagedintegrations.SendConnectorEventInput{}
        output := &iotmanagedintegrations.SendConnectorEventOutput{}

        mockClient.On("SendConnectorEvent", ctx, input).Return(output, nil)

        result, err := mockClient.SendConnectorEvent(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSendManagedThingCommand", func(t *testing.T) {
        input := &iotmanagedintegrations.SendManagedThingCommandInput{}
        output := &iotmanagedintegrations.SendManagedThingCommandOutput{}

        mockClient.On("SendManagedThingCommand", ctx, input).Return(output, nil)

        result, err := mockClient.SendManagedThingCommand(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartAccountAssociationRefresh", func(t *testing.T) {
        input := &iotmanagedintegrations.StartAccountAssociationRefreshInput{}
        output := &iotmanagedintegrations.StartAccountAssociationRefreshOutput{}

        mockClient.On("StartAccountAssociationRefresh", ctx, input).Return(output, nil)

        result, err := mockClient.StartAccountAssociationRefresh(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartDeviceDiscovery", func(t *testing.T) {
        input := &iotmanagedintegrations.StartDeviceDiscoveryInput{}
        output := &iotmanagedintegrations.StartDeviceDiscoveryOutput{}

        mockClient.On("StartDeviceDiscovery", ctx, input).Return(output, nil)

        result, err := mockClient.StartDeviceDiscovery(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &iotmanagedintegrations.TagResourceInput{}
        output := &iotmanagedintegrations.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &iotmanagedintegrations.UntagResourceInput{}
        output := &iotmanagedintegrations.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateAccountAssociation", func(t *testing.T) {
        input := &iotmanagedintegrations.UpdateAccountAssociationInput{}
        output := &iotmanagedintegrations.UpdateAccountAssociationOutput{}

        mockClient.On("UpdateAccountAssociation", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateAccountAssociation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateCloudConnector", func(t *testing.T) {
        input := &iotmanagedintegrations.UpdateCloudConnectorInput{}
        output := &iotmanagedintegrations.UpdateCloudConnectorOutput{}

        mockClient.On("UpdateCloudConnector", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateCloudConnector(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateConnectorDestination", func(t *testing.T) {
        input := &iotmanagedintegrations.UpdateConnectorDestinationInput{}
        output := &iotmanagedintegrations.UpdateConnectorDestinationOutput{}

        mockClient.On("UpdateConnectorDestination", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateConnectorDestination(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateDestination", func(t *testing.T) {
        input := &iotmanagedintegrations.UpdateDestinationInput{}
        output := &iotmanagedintegrations.UpdateDestinationOutput{}

        mockClient.On("UpdateDestination", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateDestination(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateEventLogConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.UpdateEventLogConfigurationInput{}
        output := &iotmanagedintegrations.UpdateEventLogConfigurationOutput{}

        mockClient.On("UpdateEventLogConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateEventLogConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateManagedThing", func(t *testing.T) {
        input := &iotmanagedintegrations.UpdateManagedThingInput{}
        output := &iotmanagedintegrations.UpdateManagedThingOutput{}

        mockClient.On("UpdateManagedThing", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateManagedThing(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateNotificationConfiguration", func(t *testing.T) {
        input := &iotmanagedintegrations.UpdateNotificationConfigurationInput{}
        output := &iotmanagedintegrations.UpdateNotificationConfigurationOutput{}

        mockClient.On("UpdateNotificationConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateNotificationConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateOtaTask", func(t *testing.T) {
        input := &iotmanagedintegrations.UpdateOtaTaskInput{}
        output := &iotmanagedintegrations.UpdateOtaTaskOutput{}

        mockClient.On("UpdateOtaTask", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateOtaTask(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
