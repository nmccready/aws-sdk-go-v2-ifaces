// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package gameliftstreams_test

// tests for the gameliftstreams service interface for 
// this ../../../service/gameliftstreams/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/gameliftstreams"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/gameliftstreams/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/gameliftstreams/gameliftstreams_iface"
	"github.com/stretchr/testify/assert"
)

func TestGameliftstreamsServiceCanBeMocked(t *testing.T) {
	var iface gameliftstreams_iface.IClient
	iface = &gameliftstreams.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := gameliftstreams.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAddStreamGroupLocations", func(t *testing.T) {
        input := &gameliftstreams.AddStreamGroupLocationsInput{}
        output := &gameliftstreams.AddStreamGroupLocationsOutput{}

        mockClient.On("AddStreamGroupLocations", ctx, input).Return(output, nil)

        result, err := mockClient.AddStreamGroupLocations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAssociateApplications", func(t *testing.T) {
        input := &gameliftstreams.AssociateApplicationsInput{}
        output := &gameliftstreams.AssociateApplicationsOutput{}

        mockClient.On("AssociateApplications", ctx, input).Return(output, nil)

        result, err := mockClient.AssociateApplications(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateApplication", func(t *testing.T) {
        input := &gameliftstreams.CreateApplicationInput{}
        output := &gameliftstreams.CreateApplicationOutput{}

        mockClient.On("CreateApplication", ctx, input).Return(output, nil)

        result, err := mockClient.CreateApplication(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateStreamGroup", func(t *testing.T) {
        input := &gameliftstreams.CreateStreamGroupInput{}
        output := &gameliftstreams.CreateStreamGroupOutput{}

        mockClient.On("CreateStreamGroup", ctx, input).Return(output, nil)

        result, err := mockClient.CreateStreamGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateStreamSessionConnection", func(t *testing.T) {
        input := &gameliftstreams.CreateStreamSessionConnectionInput{}
        output := &gameliftstreams.CreateStreamSessionConnectionOutput{}

        mockClient.On("CreateStreamSessionConnection", ctx, input).Return(output, nil)

        result, err := mockClient.CreateStreamSessionConnection(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteApplication", func(t *testing.T) {
        input := &gameliftstreams.DeleteApplicationInput{}
        output := &gameliftstreams.DeleteApplicationOutput{}

        mockClient.On("DeleteApplication", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteApplication(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteStreamGroup", func(t *testing.T) {
        input := &gameliftstreams.DeleteStreamGroupInput{}
        output := &gameliftstreams.DeleteStreamGroupOutput{}

        mockClient.On("DeleteStreamGroup", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteStreamGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDisassociateApplications", func(t *testing.T) {
        input := &gameliftstreams.DisassociateApplicationsInput{}
        output := &gameliftstreams.DisassociateApplicationsOutput{}

        mockClient.On("DisassociateApplications", ctx, input).Return(output, nil)

        result, err := mockClient.DisassociateApplications(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestExportStreamSessionFiles", func(t *testing.T) {
        input := &gameliftstreams.ExportStreamSessionFilesInput{}
        output := &gameliftstreams.ExportStreamSessionFilesOutput{}

        mockClient.On("ExportStreamSessionFiles", ctx, input).Return(output, nil)

        result, err := mockClient.ExportStreamSessionFiles(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetApplication", func(t *testing.T) {
        input := &gameliftstreams.GetApplicationInput{}
        output := &gameliftstreams.GetApplicationOutput{}

        mockClient.On("GetApplication", ctx, input).Return(output, nil)

        result, err := mockClient.GetApplication(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetStreamGroup", func(t *testing.T) {
        input := &gameliftstreams.GetStreamGroupInput{}
        output := &gameliftstreams.GetStreamGroupOutput{}

        mockClient.On("GetStreamGroup", ctx, input).Return(output, nil)

        result, err := mockClient.GetStreamGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetStreamSession", func(t *testing.T) {
        input := &gameliftstreams.GetStreamSessionInput{}
        output := &gameliftstreams.GetStreamSessionOutput{}

        mockClient.On("GetStreamSession", ctx, input).Return(output, nil)

        result, err := mockClient.GetStreamSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListApplications", func(t *testing.T) {
        input := &gameliftstreams.ListApplicationsInput{}
        output := &gameliftstreams.ListApplicationsOutput{}

        mockClient.On("ListApplications", ctx, input).Return(output, nil)

        result, err := mockClient.ListApplications(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListStreamGroups", func(t *testing.T) {
        input := &gameliftstreams.ListStreamGroupsInput{}
        output := &gameliftstreams.ListStreamGroupsOutput{}

        mockClient.On("ListStreamGroups", ctx, input).Return(output, nil)

        result, err := mockClient.ListStreamGroups(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListStreamSessions", func(t *testing.T) {
        input := &gameliftstreams.ListStreamSessionsInput{}
        output := &gameliftstreams.ListStreamSessionsOutput{}

        mockClient.On("ListStreamSessions", ctx, input).Return(output, nil)

        result, err := mockClient.ListStreamSessions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListStreamSessionsByAccount", func(t *testing.T) {
        input := &gameliftstreams.ListStreamSessionsByAccountInput{}
        output := &gameliftstreams.ListStreamSessionsByAccountOutput{}

        mockClient.On("ListStreamSessionsByAccount", ctx, input).Return(output, nil)

        result, err := mockClient.ListStreamSessionsByAccount(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &gameliftstreams.ListTagsForResourceInput{}
        output := &gameliftstreams.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRemoveStreamGroupLocations", func(t *testing.T) {
        input := &gameliftstreams.RemoveStreamGroupLocationsInput{}
        output := &gameliftstreams.RemoveStreamGroupLocationsOutput{}

        mockClient.On("RemoveStreamGroupLocations", ctx, input).Return(output, nil)

        result, err := mockClient.RemoveStreamGroupLocations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartStreamSession", func(t *testing.T) {
        input := &gameliftstreams.StartStreamSessionInput{}
        output := &gameliftstreams.StartStreamSessionOutput{}

        mockClient.On("StartStreamSession", ctx, input).Return(output, nil)

        result, err := mockClient.StartStreamSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &gameliftstreams.TagResourceInput{}
        output := &gameliftstreams.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTerminateStreamSession", func(t *testing.T) {
        input := &gameliftstreams.TerminateStreamSessionInput{}
        output := &gameliftstreams.TerminateStreamSessionOutput{}

        mockClient.On("TerminateStreamSession", ctx, input).Return(output, nil)

        result, err := mockClient.TerminateStreamSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &gameliftstreams.UntagResourceInput{}
        output := &gameliftstreams.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateApplication", func(t *testing.T) {
        input := &gameliftstreams.UpdateApplicationInput{}
        output := &gameliftstreams.UpdateApplicationOutput{}

        mockClient.On("UpdateApplication", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateApplication(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateStreamGroup", func(t *testing.T) {
        input := &gameliftstreams.UpdateStreamGroupInput{}
        output := &gameliftstreams.UpdateStreamGroupOutput{}

        mockClient.On("UpdateStreamGroup", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateStreamGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
