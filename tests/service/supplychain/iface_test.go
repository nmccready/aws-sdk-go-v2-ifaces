// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package supplychain_test

// tests for the supplychain service interface for 
// this ../../../service/supplychain/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/supplychain"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/supplychain/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/supplychain/supplychain_iface"
	"github.com/stretchr/testify/assert"
)

func TestSupplychainServiceCanBeMocked(t *testing.T) {
	var iface supplychain_iface.IClient
	iface = &supplychain.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := supplychain.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateBillOfMaterialsImportJob", func(t *testing.T) {
        input := &supplychain.CreateBillOfMaterialsImportJobInput{}
        output := &supplychain.CreateBillOfMaterialsImportJobOutput{}

        mockClient.On("CreateBillOfMaterialsImportJob", ctx, input).Return(output, nil)

        result, err := mockClient.CreateBillOfMaterialsImportJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateDataIntegrationFlow", func(t *testing.T) {
        input := &supplychain.CreateDataIntegrationFlowInput{}
        output := &supplychain.CreateDataIntegrationFlowOutput{}

        mockClient.On("CreateDataIntegrationFlow", ctx, input).Return(output, nil)

        result, err := mockClient.CreateDataIntegrationFlow(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateDataLakeDataset", func(t *testing.T) {
        input := &supplychain.CreateDataLakeDatasetInput{}
        output := &supplychain.CreateDataLakeDatasetOutput{}

        mockClient.On("CreateDataLakeDataset", ctx, input).Return(output, nil)

        result, err := mockClient.CreateDataLakeDataset(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateDataLakeNamespace", func(t *testing.T) {
        input := &supplychain.CreateDataLakeNamespaceInput{}
        output := &supplychain.CreateDataLakeNamespaceOutput{}

        mockClient.On("CreateDataLakeNamespace", ctx, input).Return(output, nil)

        result, err := mockClient.CreateDataLakeNamespace(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateInstance", func(t *testing.T) {
        input := &supplychain.CreateInstanceInput{}
        output := &supplychain.CreateInstanceOutput{}

        mockClient.On("CreateInstance", ctx, input).Return(output, nil)

        result, err := mockClient.CreateInstance(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteDataIntegrationFlow", func(t *testing.T) {
        input := &supplychain.DeleteDataIntegrationFlowInput{}
        output := &supplychain.DeleteDataIntegrationFlowOutput{}

        mockClient.On("DeleteDataIntegrationFlow", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteDataIntegrationFlow(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteDataLakeDataset", func(t *testing.T) {
        input := &supplychain.DeleteDataLakeDatasetInput{}
        output := &supplychain.DeleteDataLakeDatasetOutput{}

        mockClient.On("DeleteDataLakeDataset", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteDataLakeDataset(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteDataLakeNamespace", func(t *testing.T) {
        input := &supplychain.DeleteDataLakeNamespaceInput{}
        output := &supplychain.DeleteDataLakeNamespaceOutput{}

        mockClient.On("DeleteDataLakeNamespace", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteDataLakeNamespace(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteInstance", func(t *testing.T) {
        input := &supplychain.DeleteInstanceInput{}
        output := &supplychain.DeleteInstanceOutput{}

        mockClient.On("DeleteInstance", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteInstance(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetBillOfMaterialsImportJob", func(t *testing.T) {
        input := &supplychain.GetBillOfMaterialsImportJobInput{}
        output := &supplychain.GetBillOfMaterialsImportJobOutput{}

        mockClient.On("GetBillOfMaterialsImportJob", ctx, input).Return(output, nil)

        result, err := mockClient.GetBillOfMaterialsImportJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDataIntegrationEvent", func(t *testing.T) {
        input := &supplychain.GetDataIntegrationEventInput{}
        output := &supplychain.GetDataIntegrationEventOutput{}

        mockClient.On("GetDataIntegrationEvent", ctx, input).Return(output, nil)

        result, err := mockClient.GetDataIntegrationEvent(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDataIntegrationFlowExecution", func(t *testing.T) {
        input := &supplychain.GetDataIntegrationFlowExecutionInput{}
        output := &supplychain.GetDataIntegrationFlowExecutionOutput{}

        mockClient.On("GetDataIntegrationFlowExecution", ctx, input).Return(output, nil)

        result, err := mockClient.GetDataIntegrationFlowExecution(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDataIntegrationFlow", func(t *testing.T) {
        input := &supplychain.GetDataIntegrationFlowInput{}
        output := &supplychain.GetDataIntegrationFlowOutput{}

        mockClient.On("GetDataIntegrationFlow", ctx, input).Return(output, nil)

        result, err := mockClient.GetDataIntegrationFlow(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDataLakeDataset", func(t *testing.T) {
        input := &supplychain.GetDataLakeDatasetInput{}
        output := &supplychain.GetDataLakeDatasetOutput{}

        mockClient.On("GetDataLakeDataset", ctx, input).Return(output, nil)

        result, err := mockClient.GetDataLakeDataset(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDataLakeNamespace", func(t *testing.T) {
        input := &supplychain.GetDataLakeNamespaceInput{}
        output := &supplychain.GetDataLakeNamespaceOutput{}

        mockClient.On("GetDataLakeNamespace", ctx, input).Return(output, nil)

        result, err := mockClient.GetDataLakeNamespace(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetInstance", func(t *testing.T) {
        input := &supplychain.GetInstanceInput{}
        output := &supplychain.GetInstanceOutput{}

        mockClient.On("GetInstance", ctx, input).Return(output, nil)

        result, err := mockClient.GetInstance(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDataIntegrationEvents", func(t *testing.T) {
        input := &supplychain.ListDataIntegrationEventsInput{}
        output := &supplychain.ListDataIntegrationEventsOutput{}

        mockClient.On("ListDataIntegrationEvents", ctx, input).Return(output, nil)

        result, err := mockClient.ListDataIntegrationEvents(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDataIntegrationFlowExecutions", func(t *testing.T) {
        input := &supplychain.ListDataIntegrationFlowExecutionsInput{}
        output := &supplychain.ListDataIntegrationFlowExecutionsOutput{}

        mockClient.On("ListDataIntegrationFlowExecutions", ctx, input).Return(output, nil)

        result, err := mockClient.ListDataIntegrationFlowExecutions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDataIntegrationFlows", func(t *testing.T) {
        input := &supplychain.ListDataIntegrationFlowsInput{}
        output := &supplychain.ListDataIntegrationFlowsOutput{}

        mockClient.On("ListDataIntegrationFlows", ctx, input).Return(output, nil)

        result, err := mockClient.ListDataIntegrationFlows(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDataLakeDatasets", func(t *testing.T) {
        input := &supplychain.ListDataLakeDatasetsInput{}
        output := &supplychain.ListDataLakeDatasetsOutput{}

        mockClient.On("ListDataLakeDatasets", ctx, input).Return(output, nil)

        result, err := mockClient.ListDataLakeDatasets(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDataLakeNamespaces", func(t *testing.T) {
        input := &supplychain.ListDataLakeNamespacesInput{}
        output := &supplychain.ListDataLakeNamespacesOutput{}

        mockClient.On("ListDataLakeNamespaces", ctx, input).Return(output, nil)

        result, err := mockClient.ListDataLakeNamespaces(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListInstances", func(t *testing.T) {
        input := &supplychain.ListInstancesInput{}
        output := &supplychain.ListInstancesOutput{}

        mockClient.On("ListInstances", ctx, input).Return(output, nil)

        result, err := mockClient.ListInstances(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &supplychain.ListTagsForResourceInput{}
        output := &supplychain.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSendDataIntegrationEvent", func(t *testing.T) {
        input := &supplychain.SendDataIntegrationEventInput{}
        output := &supplychain.SendDataIntegrationEventOutput{}

        mockClient.On("SendDataIntegrationEvent", ctx, input).Return(output, nil)

        result, err := mockClient.SendDataIntegrationEvent(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &supplychain.TagResourceInput{}
        output := &supplychain.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &supplychain.UntagResourceInput{}
        output := &supplychain.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateDataIntegrationFlow", func(t *testing.T) {
        input := &supplychain.UpdateDataIntegrationFlowInput{}
        output := &supplychain.UpdateDataIntegrationFlowOutput{}

        mockClient.On("UpdateDataIntegrationFlow", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateDataIntegrationFlow(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateDataLakeDataset", func(t *testing.T) {
        input := &supplychain.UpdateDataLakeDatasetInput{}
        output := &supplychain.UpdateDataLakeDatasetOutput{}

        mockClient.On("UpdateDataLakeDataset", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateDataLakeDataset(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateDataLakeNamespace", func(t *testing.T) {
        input := &supplychain.UpdateDataLakeNamespaceInput{}
        output := &supplychain.UpdateDataLakeNamespaceOutput{}

        mockClient.On("UpdateDataLakeNamespace", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateDataLakeNamespace(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateInstance", func(t *testing.T) {
        input := &supplychain.UpdateInstanceInput{}
        output := &supplychain.UpdateInstanceOutput{}

        mockClient.On("UpdateInstance", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateInstance(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
