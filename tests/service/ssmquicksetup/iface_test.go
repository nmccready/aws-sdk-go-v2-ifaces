// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package ssmquicksetup_test

// tests for the ssmquicksetup service interface for 
// this ../../../service/ssmquicksetup/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/ssmquicksetup"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/ssmquicksetup/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/ssmquicksetup/ssmquicksetup_iface"
	"github.com/stretchr/testify/assert"
)

func TestSsmquicksetupServiceCanBeMocked(t *testing.T) {
	var iface ssmquicksetup_iface.IClient
	iface = &ssmquicksetup.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := ssmquicksetup.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateConfigurationManager", func(t *testing.T) {
        input := &ssmquicksetup.CreateConfigurationManagerInput{}
        output := &ssmquicksetup.CreateConfigurationManagerOutput{}

        mockClient.On("CreateConfigurationManager", ctx, input).Return(output, nil)

        result, err := mockClient.CreateConfigurationManager(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteConfigurationManager", func(t *testing.T) {
        input := &ssmquicksetup.DeleteConfigurationManagerInput{}
        output := &ssmquicksetup.DeleteConfigurationManagerOutput{}

        mockClient.On("DeleteConfigurationManager", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteConfigurationManager(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetConfiguration", func(t *testing.T) {
        input := &ssmquicksetup.GetConfigurationInput{}
        output := &ssmquicksetup.GetConfigurationOutput{}

        mockClient.On("GetConfiguration", ctx, input).Return(output, nil)

        result, err := mockClient.GetConfiguration(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetConfigurationManager", func(t *testing.T) {
        input := &ssmquicksetup.GetConfigurationManagerInput{}
        output := &ssmquicksetup.GetConfigurationManagerOutput{}

        mockClient.On("GetConfigurationManager", ctx, input).Return(output, nil)

        result, err := mockClient.GetConfigurationManager(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetServiceSettings", func(t *testing.T) {
        input := &ssmquicksetup.GetServiceSettingsInput{}
        output := &ssmquicksetup.GetServiceSettingsOutput{}

        mockClient.On("GetServiceSettings", ctx, input).Return(output, nil)

        result, err := mockClient.GetServiceSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListConfigurationManagers", func(t *testing.T) {
        input := &ssmquicksetup.ListConfigurationManagersInput{}
        output := &ssmquicksetup.ListConfigurationManagersOutput{}

        mockClient.On("ListConfigurationManagers", ctx, input).Return(output, nil)

        result, err := mockClient.ListConfigurationManagers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListConfigurations", func(t *testing.T) {
        input := &ssmquicksetup.ListConfigurationsInput{}
        output := &ssmquicksetup.ListConfigurationsOutput{}

        mockClient.On("ListConfigurations", ctx, input).Return(output, nil)

        result, err := mockClient.ListConfigurations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListQuickSetupTypes", func(t *testing.T) {
        input := &ssmquicksetup.ListQuickSetupTypesInput{}
        output := &ssmquicksetup.ListQuickSetupTypesOutput{}

        mockClient.On("ListQuickSetupTypes", ctx, input).Return(output, nil)

        result, err := mockClient.ListQuickSetupTypes(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &ssmquicksetup.ListTagsForResourceInput{}
        output := &ssmquicksetup.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &ssmquicksetup.TagResourceInput{}
        output := &ssmquicksetup.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &ssmquicksetup.UntagResourceInput{}
        output := &ssmquicksetup.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateConfigurationDefinition", func(t *testing.T) {
        input := &ssmquicksetup.UpdateConfigurationDefinitionInput{}
        output := &ssmquicksetup.UpdateConfigurationDefinitionOutput{}

        mockClient.On("UpdateConfigurationDefinition", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateConfigurationDefinition(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateConfigurationManager", func(t *testing.T) {
        input := &ssmquicksetup.UpdateConfigurationManagerInput{}
        output := &ssmquicksetup.UpdateConfigurationManagerOutput{}

        mockClient.On("UpdateConfigurationManager", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateConfigurationManager(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateServiceSettings", func(t *testing.T) {
        input := &ssmquicksetup.UpdateServiceSettingsInput{}
        output := &ssmquicksetup.UpdateServiceSettingsOutput{}

        mockClient.On("UpdateServiceSettings", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateServiceSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
