// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package s3vectors_test

// tests for the s3vectors service interface for 
// this ../../../service/s3vectors/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/s3vectors"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/s3vectors/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/s3vectors/s3vectors_iface"
	"github.com/stretchr/testify/assert"
)

func TestS3vectorsServiceCanBeMocked(t *testing.T) {
	var iface s3vectors_iface.IClient
	iface = &s3vectors.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := s3vectors.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateIndex", func(t *testing.T) {
        input := &s3vectors.CreateIndexInput{}
        output := &s3vectors.CreateIndexOutput{}

        mockClient.On("CreateIndex", ctx, input).Return(output, nil)

        result, err := mockClient.CreateIndex(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateVectorBucket", func(t *testing.T) {
        input := &s3vectors.CreateVectorBucketInput{}
        output := &s3vectors.CreateVectorBucketOutput{}

        mockClient.On("CreateVectorBucket", ctx, input).Return(output, nil)

        result, err := mockClient.CreateVectorBucket(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteIndex", func(t *testing.T) {
        input := &s3vectors.DeleteIndexInput{}
        output := &s3vectors.DeleteIndexOutput{}

        mockClient.On("DeleteIndex", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteIndex(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteVectorBucket", func(t *testing.T) {
        input := &s3vectors.DeleteVectorBucketInput{}
        output := &s3vectors.DeleteVectorBucketOutput{}

        mockClient.On("DeleteVectorBucket", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteVectorBucket(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteVectorBucketPolicy", func(t *testing.T) {
        input := &s3vectors.DeleteVectorBucketPolicyInput{}
        output := &s3vectors.DeleteVectorBucketPolicyOutput{}

        mockClient.On("DeleteVectorBucketPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteVectorBucketPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteVectors", func(t *testing.T) {
        input := &s3vectors.DeleteVectorsInput{}
        output := &s3vectors.DeleteVectorsOutput{}

        mockClient.On("DeleteVectors", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteVectors(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetIndex", func(t *testing.T) {
        input := &s3vectors.GetIndexInput{}
        output := &s3vectors.GetIndexOutput{}

        mockClient.On("GetIndex", ctx, input).Return(output, nil)

        result, err := mockClient.GetIndex(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetVectorBucket", func(t *testing.T) {
        input := &s3vectors.GetVectorBucketInput{}
        output := &s3vectors.GetVectorBucketOutput{}

        mockClient.On("GetVectorBucket", ctx, input).Return(output, nil)

        result, err := mockClient.GetVectorBucket(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetVectorBucketPolicy", func(t *testing.T) {
        input := &s3vectors.GetVectorBucketPolicyInput{}
        output := &s3vectors.GetVectorBucketPolicyOutput{}

        mockClient.On("GetVectorBucketPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.GetVectorBucketPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetVectors", func(t *testing.T) {
        input := &s3vectors.GetVectorsInput{}
        output := &s3vectors.GetVectorsOutput{}

        mockClient.On("GetVectors", ctx, input).Return(output, nil)

        result, err := mockClient.GetVectors(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListIndexes", func(t *testing.T) {
        input := &s3vectors.ListIndexesInput{}
        output := &s3vectors.ListIndexesOutput{}

        mockClient.On("ListIndexes", ctx, input).Return(output, nil)

        result, err := mockClient.ListIndexes(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListVectorBuckets", func(t *testing.T) {
        input := &s3vectors.ListVectorBucketsInput{}
        output := &s3vectors.ListVectorBucketsOutput{}

        mockClient.On("ListVectorBuckets", ctx, input).Return(output, nil)

        result, err := mockClient.ListVectorBuckets(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListVectors", func(t *testing.T) {
        input := &s3vectors.ListVectorsInput{}
        output := &s3vectors.ListVectorsOutput{}

        mockClient.On("ListVectors", ctx, input).Return(output, nil)

        result, err := mockClient.ListVectors(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutVectorBucketPolicy", func(t *testing.T) {
        input := &s3vectors.PutVectorBucketPolicyInput{}
        output := &s3vectors.PutVectorBucketPolicyOutput{}

        mockClient.On("PutVectorBucketPolicy", ctx, input).Return(output, nil)

        result, err := mockClient.PutVectorBucketPolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutVectors", func(t *testing.T) {
        input := &s3vectors.PutVectorsInput{}
        output := &s3vectors.PutVectorsOutput{}

        mockClient.On("PutVectors", ctx, input).Return(output, nil)

        result, err := mockClient.PutVectors(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestQueryVectors", func(t *testing.T) {
        input := &s3vectors.QueryVectorsInput{}
        output := &s3vectors.QueryVectorsOutput{}

        mockClient.On("QueryVectors", ctx, input).Return(output, nil)

        result, err := mockClient.QueryVectors(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
