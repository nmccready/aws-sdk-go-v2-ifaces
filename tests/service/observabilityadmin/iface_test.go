// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package observabilityadmin_test

// tests for the observabilityadmin service interface for 
// this ../../../service/observabilityadmin/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/observabilityadmin"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/observabilityadmin/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/observabilityadmin/observabilityadmin_iface"
	"github.com/stretchr/testify/assert"
)

func TestObservabilityadminServiceCanBeMocked(t *testing.T) {
	var iface observabilityadmin_iface.IClient
	iface = &observabilityadmin.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := observabilityadmin.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateTelemetryRule", func(t *testing.T) {
        input := &observabilityadmin.CreateTelemetryRuleInput{}
        output := &observabilityadmin.CreateTelemetryRuleOutput{}

        mockClient.On("CreateTelemetryRule", ctx, input).Return(output, nil)

        result, err := mockClient.CreateTelemetryRule(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateTelemetryRuleForOrganization", func(t *testing.T) {
        input := &observabilityadmin.CreateTelemetryRuleForOrganizationInput{}
        output := &observabilityadmin.CreateTelemetryRuleForOrganizationOutput{}

        mockClient.On("CreateTelemetryRuleForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.CreateTelemetryRuleForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteTelemetryRule", func(t *testing.T) {
        input := &observabilityadmin.DeleteTelemetryRuleInput{}
        output := &observabilityadmin.DeleteTelemetryRuleOutput{}

        mockClient.On("DeleteTelemetryRule", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteTelemetryRule(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteTelemetryRuleForOrganization", func(t *testing.T) {
        input := &observabilityadmin.DeleteTelemetryRuleForOrganizationInput{}
        output := &observabilityadmin.DeleteTelemetryRuleForOrganizationOutput{}

        mockClient.On("DeleteTelemetryRuleForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteTelemetryRuleForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTelemetryEvaluationStatus", func(t *testing.T) {
        input := &observabilityadmin.GetTelemetryEvaluationStatusInput{}
        output := &observabilityadmin.GetTelemetryEvaluationStatusOutput{}

        mockClient.On("GetTelemetryEvaluationStatus", ctx, input).Return(output, nil)

        result, err := mockClient.GetTelemetryEvaluationStatus(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTelemetryEvaluationStatusForOrganization", func(t *testing.T) {
        input := &observabilityadmin.GetTelemetryEvaluationStatusForOrganizationInput{}
        output := &observabilityadmin.GetTelemetryEvaluationStatusForOrganizationOutput{}

        mockClient.On("GetTelemetryEvaluationStatusForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.GetTelemetryEvaluationStatusForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTelemetryRule", func(t *testing.T) {
        input := &observabilityadmin.GetTelemetryRuleInput{}
        output := &observabilityadmin.GetTelemetryRuleOutput{}

        mockClient.On("GetTelemetryRule", ctx, input).Return(output, nil)

        result, err := mockClient.GetTelemetryRule(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTelemetryRuleForOrganization", func(t *testing.T) {
        input := &observabilityadmin.GetTelemetryRuleForOrganizationInput{}
        output := &observabilityadmin.GetTelemetryRuleForOrganizationOutput{}

        mockClient.On("GetTelemetryRuleForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.GetTelemetryRuleForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListResourceTelemetry", func(t *testing.T) {
        input := &observabilityadmin.ListResourceTelemetryInput{}
        output := &observabilityadmin.ListResourceTelemetryOutput{}

        mockClient.On("ListResourceTelemetry", ctx, input).Return(output, nil)

        result, err := mockClient.ListResourceTelemetry(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListResourceTelemetryForOrganization", func(t *testing.T) {
        input := &observabilityadmin.ListResourceTelemetryForOrganizationInput{}
        output := &observabilityadmin.ListResourceTelemetryForOrganizationOutput{}

        mockClient.On("ListResourceTelemetryForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.ListResourceTelemetryForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &observabilityadmin.ListTagsForResourceInput{}
        output := &observabilityadmin.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTelemetryRules", func(t *testing.T) {
        input := &observabilityadmin.ListTelemetryRulesInput{}
        output := &observabilityadmin.ListTelemetryRulesOutput{}

        mockClient.On("ListTelemetryRules", ctx, input).Return(output, nil)

        result, err := mockClient.ListTelemetryRules(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTelemetryRulesForOrganization", func(t *testing.T) {
        input := &observabilityadmin.ListTelemetryRulesForOrganizationInput{}
        output := &observabilityadmin.ListTelemetryRulesForOrganizationOutput{}

        mockClient.On("ListTelemetryRulesForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.ListTelemetryRulesForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartTelemetryEvaluation", func(t *testing.T) {
        input := &observabilityadmin.StartTelemetryEvaluationInput{}
        output := &observabilityadmin.StartTelemetryEvaluationOutput{}

        mockClient.On("StartTelemetryEvaluation", ctx, input).Return(output, nil)

        result, err := mockClient.StartTelemetryEvaluation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartTelemetryEvaluationForOrganization", func(t *testing.T) {
        input := &observabilityadmin.StartTelemetryEvaluationForOrganizationInput{}
        output := &observabilityadmin.StartTelemetryEvaluationForOrganizationOutput{}

        mockClient.On("StartTelemetryEvaluationForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.StartTelemetryEvaluationForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopTelemetryEvaluation", func(t *testing.T) {
        input := &observabilityadmin.StopTelemetryEvaluationInput{}
        output := &observabilityadmin.StopTelemetryEvaluationOutput{}

        mockClient.On("StopTelemetryEvaluation", ctx, input).Return(output, nil)

        result, err := mockClient.StopTelemetryEvaluation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopTelemetryEvaluationForOrganization", func(t *testing.T) {
        input := &observabilityadmin.StopTelemetryEvaluationForOrganizationInput{}
        output := &observabilityadmin.StopTelemetryEvaluationForOrganizationOutput{}

        mockClient.On("StopTelemetryEvaluationForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.StopTelemetryEvaluationForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &observabilityadmin.TagResourceInput{}
        output := &observabilityadmin.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &observabilityadmin.UntagResourceInput{}
        output := &observabilityadmin.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateTelemetryRule", func(t *testing.T) {
        input := &observabilityadmin.UpdateTelemetryRuleInput{}
        output := &observabilityadmin.UpdateTelemetryRuleOutput{}

        mockClient.On("UpdateTelemetryRule", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateTelemetryRule(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateTelemetryRuleForOrganization", func(t *testing.T) {
        input := &observabilityadmin.UpdateTelemetryRuleForOrganizationInput{}
        output := &observabilityadmin.UpdateTelemetryRuleForOrganizationOutput{}

        mockClient.On("UpdateTelemetryRuleForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateTelemetryRuleForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
