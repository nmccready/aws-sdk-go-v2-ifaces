// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package observabilityadmin_test

// tests for the observabilityadmin service interface for 
// this ../../../service/observabilityadmin/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/observabilityadmin"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/observabilityadmin/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/observabilityadmin/observabilityadmin_iface"
	"github.com/stretchr/testify/assert"
)

func TestObservabilityadminServiceCanBeMocked(t *testing.T) {
	var iface observabilityadmin_iface.IClient
	iface = &observabilityadmin.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := observabilityadmin.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTelemetryEvaluationStatusForOrganization", func(t *testing.T) {
        input := &observabilityadmin.GetTelemetryEvaluationStatusForOrganizationInput{}
        output := &observabilityadmin.GetTelemetryEvaluationStatusForOrganizationOutput{}

        mockClient.On("GetTelemetryEvaluationStatusForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.GetTelemetryEvaluationStatusForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTelemetryEvaluationStatus", func(t *testing.T) {
        input := &observabilityadmin.GetTelemetryEvaluationStatusInput{}
        output := &observabilityadmin.GetTelemetryEvaluationStatusOutput{}

        mockClient.On("GetTelemetryEvaluationStatus", ctx, input).Return(output, nil)

        result, err := mockClient.GetTelemetryEvaluationStatus(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListResourceTelemetryForOrganization", func(t *testing.T) {
        input := &observabilityadmin.ListResourceTelemetryForOrganizationInput{}
        output := &observabilityadmin.ListResourceTelemetryForOrganizationOutput{}

        mockClient.On("ListResourceTelemetryForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.ListResourceTelemetryForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListResourceTelemetry", func(t *testing.T) {
        input := &observabilityadmin.ListResourceTelemetryInput{}
        output := &observabilityadmin.ListResourceTelemetryOutput{}

        mockClient.On("ListResourceTelemetry", ctx, input).Return(output, nil)

        result, err := mockClient.ListResourceTelemetry(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartTelemetryEvaluationForOrganization", func(t *testing.T) {
        input := &observabilityadmin.StartTelemetryEvaluationForOrganizationInput{}
        output := &observabilityadmin.StartTelemetryEvaluationForOrganizationOutput{}

        mockClient.On("StartTelemetryEvaluationForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.StartTelemetryEvaluationForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartTelemetryEvaluation", func(t *testing.T) {
        input := &observabilityadmin.StartTelemetryEvaluationInput{}
        output := &observabilityadmin.StartTelemetryEvaluationOutput{}

        mockClient.On("StartTelemetryEvaluation", ctx, input).Return(output, nil)

        result, err := mockClient.StartTelemetryEvaluation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopTelemetryEvaluationForOrganization", func(t *testing.T) {
        input := &observabilityadmin.StopTelemetryEvaluationForOrganizationInput{}
        output := &observabilityadmin.StopTelemetryEvaluationForOrganizationOutput{}

        mockClient.On("StopTelemetryEvaluationForOrganization", ctx, input).Return(output, nil)

        result, err := mockClient.StopTelemetryEvaluationForOrganization(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopTelemetryEvaluation", func(t *testing.T) {
        input := &observabilityadmin.StopTelemetryEvaluationInput{}
        output := &observabilityadmin.StopTelemetryEvaluationOutput{}

        mockClient.On("StopTelemetryEvaluation", ctx, input).Return(output, nil)

        result, err := mockClient.StopTelemetryEvaluation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
