// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package partnercentralselling_test

// tests for the partnercentralselling service interface for 
// this ../../../service/partnercentralselling/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/partnercentralselling"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/partnercentralselling/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/partnercentralselling/partnercentralselling_iface"
	"github.com/stretchr/testify/assert"
)

func TestPartnercentralsellingServiceCanBeMocked(t *testing.T) {
	var iface partnercentralselling_iface.IClient
	iface = &partnercentralselling.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := partnercentralselling.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAcceptEngagementInvitation", func(t *testing.T) {
        input := &partnercentralselling.AcceptEngagementInvitationInput{}
        output := &partnercentralselling.AcceptEngagementInvitationOutput{}

        mockClient.On("AcceptEngagementInvitation", ctx, input).Return(output, nil)

        result, err := mockClient.AcceptEngagementInvitation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAssignOpportunity", func(t *testing.T) {
        input := &partnercentralselling.AssignOpportunityInput{}
        output := &partnercentralselling.AssignOpportunityOutput{}

        mockClient.On("AssignOpportunity", ctx, input).Return(output, nil)

        result, err := mockClient.AssignOpportunity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAssociateOpportunity", func(t *testing.T) {
        input := &partnercentralselling.AssociateOpportunityInput{}
        output := &partnercentralselling.AssociateOpportunityOutput{}

        mockClient.On("AssociateOpportunity", ctx, input).Return(output, nil)

        result, err := mockClient.AssociateOpportunity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateEngagement", func(t *testing.T) {
        input := &partnercentralselling.CreateEngagementInput{}
        output := &partnercentralselling.CreateEngagementOutput{}

        mockClient.On("CreateEngagement", ctx, input).Return(output, nil)

        result, err := mockClient.CreateEngagement(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateEngagementInvitation", func(t *testing.T) {
        input := &partnercentralselling.CreateEngagementInvitationInput{}
        output := &partnercentralselling.CreateEngagementInvitationOutput{}

        mockClient.On("CreateEngagementInvitation", ctx, input).Return(output, nil)

        result, err := mockClient.CreateEngagementInvitation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateOpportunity", func(t *testing.T) {
        input := &partnercentralselling.CreateOpportunityInput{}
        output := &partnercentralselling.CreateOpportunityOutput{}

        mockClient.On("CreateOpportunity", ctx, input).Return(output, nil)

        result, err := mockClient.CreateOpportunity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateResourceSnapshot", func(t *testing.T) {
        input := &partnercentralselling.CreateResourceSnapshotInput{}
        output := &partnercentralselling.CreateResourceSnapshotOutput{}

        mockClient.On("CreateResourceSnapshot", ctx, input).Return(output, nil)

        result, err := mockClient.CreateResourceSnapshot(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateResourceSnapshotJob", func(t *testing.T) {
        input := &partnercentralselling.CreateResourceSnapshotJobInput{}
        output := &partnercentralselling.CreateResourceSnapshotJobOutput{}

        mockClient.On("CreateResourceSnapshotJob", ctx, input).Return(output, nil)

        result, err := mockClient.CreateResourceSnapshotJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteResourceSnapshotJob", func(t *testing.T) {
        input := &partnercentralselling.DeleteResourceSnapshotJobInput{}
        output := &partnercentralselling.DeleteResourceSnapshotJobOutput{}

        mockClient.On("DeleteResourceSnapshotJob", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteResourceSnapshotJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDisassociateOpportunity", func(t *testing.T) {
        input := &partnercentralselling.DisassociateOpportunityInput{}
        output := &partnercentralselling.DisassociateOpportunityOutput{}

        mockClient.On("DisassociateOpportunity", ctx, input).Return(output, nil)

        result, err := mockClient.DisassociateOpportunity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAwsOpportunitySummary", func(t *testing.T) {
        input := &partnercentralselling.GetAwsOpportunitySummaryInput{}
        output := &partnercentralselling.GetAwsOpportunitySummaryOutput{}

        mockClient.On("GetAwsOpportunitySummary", ctx, input).Return(output, nil)

        result, err := mockClient.GetAwsOpportunitySummary(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetEngagement", func(t *testing.T) {
        input := &partnercentralselling.GetEngagementInput{}
        output := &partnercentralselling.GetEngagementOutput{}

        mockClient.On("GetEngagement", ctx, input).Return(output, nil)

        result, err := mockClient.GetEngagement(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetEngagementInvitation", func(t *testing.T) {
        input := &partnercentralselling.GetEngagementInvitationInput{}
        output := &partnercentralselling.GetEngagementInvitationOutput{}

        mockClient.On("GetEngagementInvitation", ctx, input).Return(output, nil)

        result, err := mockClient.GetEngagementInvitation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetOpportunity", func(t *testing.T) {
        input := &partnercentralselling.GetOpportunityInput{}
        output := &partnercentralselling.GetOpportunityOutput{}

        mockClient.On("GetOpportunity", ctx, input).Return(output, nil)

        result, err := mockClient.GetOpportunity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetResourceSnapshot", func(t *testing.T) {
        input := &partnercentralselling.GetResourceSnapshotInput{}
        output := &partnercentralselling.GetResourceSnapshotOutput{}

        mockClient.On("GetResourceSnapshot", ctx, input).Return(output, nil)

        result, err := mockClient.GetResourceSnapshot(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetResourceSnapshotJob", func(t *testing.T) {
        input := &partnercentralselling.GetResourceSnapshotJobInput{}
        output := &partnercentralselling.GetResourceSnapshotJobOutput{}

        mockClient.On("GetResourceSnapshotJob", ctx, input).Return(output, nil)

        result, err := mockClient.GetResourceSnapshotJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetSellingSystemSettings", func(t *testing.T) {
        input := &partnercentralselling.GetSellingSystemSettingsInput{}
        output := &partnercentralselling.GetSellingSystemSettingsOutput{}

        mockClient.On("GetSellingSystemSettings", ctx, input).Return(output, nil)

        result, err := mockClient.GetSellingSystemSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEngagementByAcceptingInvitationTasks", func(t *testing.T) {
        input := &partnercentralselling.ListEngagementByAcceptingInvitationTasksInput{}
        output := &partnercentralselling.ListEngagementByAcceptingInvitationTasksOutput{}

        mockClient.On("ListEngagementByAcceptingInvitationTasks", ctx, input).Return(output, nil)

        result, err := mockClient.ListEngagementByAcceptingInvitationTasks(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEngagementFromOpportunityTasks", func(t *testing.T) {
        input := &partnercentralselling.ListEngagementFromOpportunityTasksInput{}
        output := &partnercentralselling.ListEngagementFromOpportunityTasksOutput{}

        mockClient.On("ListEngagementFromOpportunityTasks", ctx, input).Return(output, nil)

        result, err := mockClient.ListEngagementFromOpportunityTasks(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEngagementInvitations", func(t *testing.T) {
        input := &partnercentralselling.ListEngagementInvitationsInput{}
        output := &partnercentralselling.ListEngagementInvitationsOutput{}

        mockClient.On("ListEngagementInvitations", ctx, input).Return(output, nil)

        result, err := mockClient.ListEngagementInvitations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEngagementMembers", func(t *testing.T) {
        input := &partnercentralselling.ListEngagementMembersInput{}
        output := &partnercentralselling.ListEngagementMembersOutput{}

        mockClient.On("ListEngagementMembers", ctx, input).Return(output, nil)

        result, err := mockClient.ListEngagementMembers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEngagementResourceAssociations", func(t *testing.T) {
        input := &partnercentralselling.ListEngagementResourceAssociationsInput{}
        output := &partnercentralselling.ListEngagementResourceAssociationsOutput{}

        mockClient.On("ListEngagementResourceAssociations", ctx, input).Return(output, nil)

        result, err := mockClient.ListEngagementResourceAssociations(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEngagements", func(t *testing.T) {
        input := &partnercentralselling.ListEngagementsInput{}
        output := &partnercentralselling.ListEngagementsOutput{}

        mockClient.On("ListEngagements", ctx, input).Return(output, nil)

        result, err := mockClient.ListEngagements(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListOpportunities", func(t *testing.T) {
        input := &partnercentralselling.ListOpportunitiesInput{}
        output := &partnercentralselling.ListOpportunitiesOutput{}

        mockClient.On("ListOpportunities", ctx, input).Return(output, nil)

        result, err := mockClient.ListOpportunities(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListResourceSnapshotJobs", func(t *testing.T) {
        input := &partnercentralselling.ListResourceSnapshotJobsInput{}
        output := &partnercentralselling.ListResourceSnapshotJobsOutput{}

        mockClient.On("ListResourceSnapshotJobs", ctx, input).Return(output, nil)

        result, err := mockClient.ListResourceSnapshotJobs(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListResourceSnapshots", func(t *testing.T) {
        input := &partnercentralselling.ListResourceSnapshotsInput{}
        output := &partnercentralselling.ListResourceSnapshotsOutput{}

        mockClient.On("ListResourceSnapshots", ctx, input).Return(output, nil)

        result, err := mockClient.ListResourceSnapshots(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListSolutions", func(t *testing.T) {
        input := &partnercentralselling.ListSolutionsInput{}
        output := &partnercentralselling.ListSolutionsOutput{}

        mockClient.On("ListSolutions", ctx, input).Return(output, nil)

        result, err := mockClient.ListSolutions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &partnercentralselling.ListTagsForResourceInput{}
        output := &partnercentralselling.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestPutSellingSystemSettings", func(t *testing.T) {
        input := &partnercentralselling.PutSellingSystemSettingsInput{}
        output := &partnercentralselling.PutSellingSystemSettingsOutput{}

        mockClient.On("PutSellingSystemSettings", ctx, input).Return(output, nil)

        result, err := mockClient.PutSellingSystemSettings(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRejectEngagementInvitation", func(t *testing.T) {
        input := &partnercentralselling.RejectEngagementInvitationInput{}
        output := &partnercentralselling.RejectEngagementInvitationOutput{}

        mockClient.On("RejectEngagementInvitation", ctx, input).Return(output, nil)

        result, err := mockClient.RejectEngagementInvitation(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartEngagementByAcceptingInvitationTask", func(t *testing.T) {
        input := &partnercentralselling.StartEngagementByAcceptingInvitationTaskInput{}
        output := &partnercentralselling.StartEngagementByAcceptingInvitationTaskOutput{}

        mockClient.On("StartEngagementByAcceptingInvitationTask", ctx, input).Return(output, nil)

        result, err := mockClient.StartEngagementByAcceptingInvitationTask(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartEngagementFromOpportunityTask", func(t *testing.T) {
        input := &partnercentralselling.StartEngagementFromOpportunityTaskInput{}
        output := &partnercentralselling.StartEngagementFromOpportunityTaskOutput{}

        mockClient.On("StartEngagementFromOpportunityTask", ctx, input).Return(output, nil)

        result, err := mockClient.StartEngagementFromOpportunityTask(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartResourceSnapshotJob", func(t *testing.T) {
        input := &partnercentralselling.StartResourceSnapshotJobInput{}
        output := &partnercentralselling.StartResourceSnapshotJobOutput{}

        mockClient.On("StartResourceSnapshotJob", ctx, input).Return(output, nil)

        result, err := mockClient.StartResourceSnapshotJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopResourceSnapshotJob", func(t *testing.T) {
        input := &partnercentralselling.StopResourceSnapshotJobInput{}
        output := &partnercentralselling.StopResourceSnapshotJobOutput{}

        mockClient.On("StopResourceSnapshotJob", ctx, input).Return(output, nil)

        result, err := mockClient.StopResourceSnapshotJob(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSubmitOpportunity", func(t *testing.T) {
        input := &partnercentralselling.SubmitOpportunityInput{}
        output := &partnercentralselling.SubmitOpportunityOutput{}

        mockClient.On("SubmitOpportunity", ctx, input).Return(output, nil)

        result, err := mockClient.SubmitOpportunity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &partnercentralselling.TagResourceInput{}
        output := &partnercentralselling.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &partnercentralselling.UntagResourceInput{}
        output := &partnercentralselling.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateOpportunity", func(t *testing.T) {
        input := &partnercentralselling.UpdateOpportunityInput{}
        output := &partnercentralselling.UpdateOpportunityOutput{}

        mockClient.On("UpdateOpportunity", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateOpportunity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
