// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package bedrockdataautomation_test

// tests for the bedrockdataautomation service interface for 
// this ../../../service/bedrockdataautomation/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/bedrockdataautomation"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bedrockdataautomation/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bedrockdataautomation/bedrockdataautomation_iface"
	"github.com/stretchr/testify/assert"
)

func TestBedrockdataautomationServiceCanBeMocked(t *testing.T) {
	var iface bedrockdataautomation_iface.IClient
	iface = &bedrockdataautomation.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := bedrockdataautomation.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateBlueprint", func(t *testing.T) {
        input := &bedrockdataautomation.CreateBlueprintInput{}
        output := &bedrockdataautomation.CreateBlueprintOutput{}

        mockClient.On("CreateBlueprint", ctx, input).Return(output, nil)

        result, err := mockClient.CreateBlueprint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateBlueprintVersion", func(t *testing.T) {
        input := &bedrockdataautomation.CreateBlueprintVersionInput{}
        output := &bedrockdataautomation.CreateBlueprintVersionOutput{}

        mockClient.On("CreateBlueprintVersion", ctx, input).Return(output, nil)

        result, err := mockClient.CreateBlueprintVersion(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateDataAutomationProject", func(t *testing.T) {
        input := &bedrockdataautomation.CreateDataAutomationProjectInput{}
        output := &bedrockdataautomation.CreateDataAutomationProjectOutput{}

        mockClient.On("CreateDataAutomationProject", ctx, input).Return(output, nil)

        result, err := mockClient.CreateDataAutomationProject(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteBlueprint", func(t *testing.T) {
        input := &bedrockdataautomation.DeleteBlueprintInput{}
        output := &bedrockdataautomation.DeleteBlueprintOutput{}

        mockClient.On("DeleteBlueprint", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteBlueprint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteDataAutomationProject", func(t *testing.T) {
        input := &bedrockdataautomation.DeleteDataAutomationProjectInput{}
        output := &bedrockdataautomation.DeleteDataAutomationProjectOutput{}

        mockClient.On("DeleteDataAutomationProject", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteDataAutomationProject(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetBlueprint", func(t *testing.T) {
        input := &bedrockdataautomation.GetBlueprintInput{}
        output := &bedrockdataautomation.GetBlueprintOutput{}

        mockClient.On("GetBlueprint", ctx, input).Return(output, nil)

        result, err := mockClient.GetBlueprint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDataAutomationProject", func(t *testing.T) {
        input := &bedrockdataautomation.GetDataAutomationProjectInput{}
        output := &bedrockdataautomation.GetDataAutomationProjectOutput{}

        mockClient.On("GetDataAutomationProject", ctx, input).Return(output, nil)

        result, err := mockClient.GetDataAutomationProject(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListBlueprints", func(t *testing.T) {
        input := &bedrockdataautomation.ListBlueprintsInput{}
        output := &bedrockdataautomation.ListBlueprintsOutput{}

        mockClient.On("ListBlueprints", ctx, input).Return(output, nil)

        result, err := mockClient.ListBlueprints(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDataAutomationProjects", func(t *testing.T) {
        input := &bedrockdataautomation.ListDataAutomationProjectsInput{}
        output := &bedrockdataautomation.ListDataAutomationProjectsOutput{}

        mockClient.On("ListDataAutomationProjects", ctx, input).Return(output, nil)

        result, err := mockClient.ListDataAutomationProjects(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &bedrockdataautomation.ListTagsForResourceInput{}
        output := &bedrockdataautomation.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &bedrockdataautomation.TagResourceInput{}
        output := &bedrockdataautomation.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &bedrockdataautomation.UntagResourceInput{}
        output := &bedrockdataautomation.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateBlueprint", func(t *testing.T) {
        input := &bedrockdataautomation.UpdateBlueprintInput{}
        output := &bedrockdataautomation.UpdateBlueprintOutput{}

        mockClient.On("UpdateBlueprint", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateBlueprint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateDataAutomationProject", func(t *testing.T) {
        input := &bedrockdataautomation.UpdateDataAutomationProjectInput{}
        output := &bedrockdataautomation.UpdateDataAutomationProjectOutput{}

        mockClient.On("UpdateDataAutomationProject", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateDataAutomationProject(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
