// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package bedrockagentcore_test

// tests for the bedrockagentcore service interface for 
// this ../../../service/bedrockagentcore/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/bedrockagentcore"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bedrockagentcore/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bedrockagentcore/bedrockagentcore_iface"
	"github.com/stretchr/testify/assert"
)

func TestBedrockagentcoreServiceCanBeMocked(t *testing.T) {
	var iface bedrockagentcore_iface.IClient
	iface = &bedrockagentcore.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := bedrockagentcore.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateEvent", func(t *testing.T) {
        input := &bedrockagentcore.CreateEventInput{}
        output := &bedrockagentcore.CreateEventOutput{}

        mockClient.On("CreateEvent", ctx, input).Return(output, nil)

        result, err := mockClient.CreateEvent(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteEvent", func(t *testing.T) {
        input := &bedrockagentcore.DeleteEventInput{}
        output := &bedrockagentcore.DeleteEventOutput{}

        mockClient.On("DeleteEvent", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteEvent(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteMemoryRecord", func(t *testing.T) {
        input := &bedrockagentcore.DeleteMemoryRecordInput{}
        output := &bedrockagentcore.DeleteMemoryRecordOutput{}

        mockClient.On("DeleteMemoryRecord", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteMemoryRecord(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetBrowserSession", func(t *testing.T) {
        input := &bedrockagentcore.GetBrowserSessionInput{}
        output := &bedrockagentcore.GetBrowserSessionOutput{}

        mockClient.On("GetBrowserSession", ctx, input).Return(output, nil)

        result, err := mockClient.GetBrowserSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCodeInterpreterSession", func(t *testing.T) {
        input := &bedrockagentcore.GetCodeInterpreterSessionInput{}
        output := &bedrockagentcore.GetCodeInterpreterSessionOutput{}

        mockClient.On("GetCodeInterpreterSession", ctx, input).Return(output, nil)

        result, err := mockClient.GetCodeInterpreterSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetEvent", func(t *testing.T) {
        input := &bedrockagentcore.GetEventInput{}
        output := &bedrockagentcore.GetEventOutput{}

        mockClient.On("GetEvent", ctx, input).Return(output, nil)

        result, err := mockClient.GetEvent(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetMemoryRecord", func(t *testing.T) {
        input := &bedrockagentcore.GetMemoryRecordInput{}
        output := &bedrockagentcore.GetMemoryRecordOutput{}

        mockClient.On("GetMemoryRecord", ctx, input).Return(output, nil)

        result, err := mockClient.GetMemoryRecord(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetResourceApiKey", func(t *testing.T) {
        input := &bedrockagentcore.GetResourceApiKeyInput{}
        output := &bedrockagentcore.GetResourceApiKeyOutput{}

        mockClient.On("GetResourceApiKey", ctx, input).Return(output, nil)

        result, err := mockClient.GetResourceApiKey(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetResourceOauth2Token", func(t *testing.T) {
        input := &bedrockagentcore.GetResourceOauth2TokenInput{}
        output := &bedrockagentcore.GetResourceOauth2TokenOutput{}

        mockClient.On("GetResourceOauth2Token", ctx, input).Return(output, nil)

        result, err := mockClient.GetResourceOauth2Token(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetWorkloadAccessToken", func(t *testing.T) {
        input := &bedrockagentcore.GetWorkloadAccessTokenInput{}
        output := &bedrockagentcore.GetWorkloadAccessTokenOutput{}

        mockClient.On("GetWorkloadAccessToken", ctx, input).Return(output, nil)

        result, err := mockClient.GetWorkloadAccessToken(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetWorkloadAccessTokenForJWT", func(t *testing.T) {
        input := &bedrockagentcore.GetWorkloadAccessTokenForJWTInput{}
        output := &bedrockagentcore.GetWorkloadAccessTokenForJWTOutput{}

        mockClient.On("GetWorkloadAccessTokenForJWT", ctx, input).Return(output, nil)

        result, err := mockClient.GetWorkloadAccessTokenForJWT(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetWorkloadAccessTokenForUserId", func(t *testing.T) {
        input := &bedrockagentcore.GetWorkloadAccessTokenForUserIdInput{}
        output := &bedrockagentcore.GetWorkloadAccessTokenForUserIdOutput{}

        mockClient.On("GetWorkloadAccessTokenForUserId", ctx, input).Return(output, nil)

        result, err := mockClient.GetWorkloadAccessTokenForUserId(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestInvokeAgentRuntime", func(t *testing.T) {
        input := &bedrockagentcore.InvokeAgentRuntimeInput{}
        output := &bedrockagentcore.InvokeAgentRuntimeOutput{}

        mockClient.On("InvokeAgentRuntime", ctx, input).Return(output, nil)

        result, err := mockClient.InvokeAgentRuntime(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestInvokeCodeInterpreter", func(t *testing.T) {
        input := &bedrockagentcore.InvokeCodeInterpreterInput{}
        output := &bedrockagentcore.InvokeCodeInterpreterOutput{}

        mockClient.On("InvokeCodeInterpreter", ctx, input).Return(output, nil)

        result, err := mockClient.InvokeCodeInterpreter(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListActors", func(t *testing.T) {
        input := &bedrockagentcore.ListActorsInput{}
        output := &bedrockagentcore.ListActorsOutput{}

        mockClient.On("ListActors", ctx, input).Return(output, nil)

        result, err := mockClient.ListActors(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListBrowserSessions", func(t *testing.T) {
        input := &bedrockagentcore.ListBrowserSessionsInput{}
        output := &bedrockagentcore.ListBrowserSessionsOutput{}

        mockClient.On("ListBrowserSessions", ctx, input).Return(output, nil)

        result, err := mockClient.ListBrowserSessions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCodeInterpreterSessions", func(t *testing.T) {
        input := &bedrockagentcore.ListCodeInterpreterSessionsInput{}
        output := &bedrockagentcore.ListCodeInterpreterSessionsOutput{}

        mockClient.On("ListCodeInterpreterSessions", ctx, input).Return(output, nil)

        result, err := mockClient.ListCodeInterpreterSessions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEvents", func(t *testing.T) {
        input := &bedrockagentcore.ListEventsInput{}
        output := &bedrockagentcore.ListEventsOutput{}

        mockClient.On("ListEvents", ctx, input).Return(output, nil)

        result, err := mockClient.ListEvents(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListMemoryRecords", func(t *testing.T) {
        input := &bedrockagentcore.ListMemoryRecordsInput{}
        output := &bedrockagentcore.ListMemoryRecordsOutput{}

        mockClient.On("ListMemoryRecords", ctx, input).Return(output, nil)

        result, err := mockClient.ListMemoryRecords(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListSessions", func(t *testing.T) {
        input := &bedrockagentcore.ListSessionsInput{}
        output := &bedrockagentcore.ListSessionsOutput{}

        mockClient.On("ListSessions", ctx, input).Return(output, nil)

        result, err := mockClient.ListSessions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRetrieveMemoryRecords", func(t *testing.T) {
        input := &bedrockagentcore.RetrieveMemoryRecordsInput{}
        output := &bedrockagentcore.RetrieveMemoryRecordsOutput{}

        mockClient.On("RetrieveMemoryRecords", ctx, input).Return(output, nil)

        result, err := mockClient.RetrieveMemoryRecords(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartBrowserSession", func(t *testing.T) {
        input := &bedrockagentcore.StartBrowserSessionInput{}
        output := &bedrockagentcore.StartBrowserSessionOutput{}

        mockClient.On("StartBrowserSession", ctx, input).Return(output, nil)

        result, err := mockClient.StartBrowserSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartCodeInterpreterSession", func(t *testing.T) {
        input := &bedrockagentcore.StartCodeInterpreterSessionInput{}
        output := &bedrockagentcore.StartCodeInterpreterSessionOutput{}

        mockClient.On("StartCodeInterpreterSession", ctx, input).Return(output, nil)

        result, err := mockClient.StartCodeInterpreterSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopBrowserSession", func(t *testing.T) {
        input := &bedrockagentcore.StopBrowserSessionInput{}
        output := &bedrockagentcore.StopBrowserSessionOutput{}

        mockClient.On("StopBrowserSession", ctx, input).Return(output, nil)

        result, err := mockClient.StopBrowserSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStopCodeInterpreterSession", func(t *testing.T) {
        input := &bedrockagentcore.StopCodeInterpreterSessionInput{}
        output := &bedrockagentcore.StopCodeInterpreterSessionOutput{}

        mockClient.On("StopCodeInterpreterSession", ctx, input).Return(output, nil)

        result, err := mockClient.StopCodeInterpreterSession(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateBrowserStream", func(t *testing.T) {
        input := &bedrockagentcore.UpdateBrowserStreamInput{}
        output := &bedrockagentcore.UpdateBrowserStreamOutput{}

        mockClient.On("UpdateBrowserStream", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateBrowserStream(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
