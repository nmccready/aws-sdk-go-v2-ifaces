// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package geoplaces_test

// tests for the geoplaces service interface for 
// this ../../../service/geoplaces/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/geoplaces"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/geoplaces/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/geoplaces/geoplaces_iface"
	"github.com/stretchr/testify/assert"
)

func TestGeoplacesServiceCanBeMocked(t *testing.T) {
	var iface geoplaces_iface.IClient
	iface = &geoplaces.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := geoplaces.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAutocomplete", func(t *testing.T) {
        input := &geoplaces.AutocompleteInput{}
        output := &geoplaces.AutocompleteOutput{}

        mockClient.On("Autocomplete", ctx, input).Return(output, nil)

        result, err := mockClient.Autocomplete(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGeocode", func(t *testing.T) {
        input := &geoplaces.GeocodeInput{}
        output := &geoplaces.GeocodeOutput{}

        mockClient.On("Geocode", ctx, input).Return(output, nil)

        result, err := mockClient.Geocode(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPlace", func(t *testing.T) {
        input := &geoplaces.GetPlaceInput{}
        output := &geoplaces.GetPlaceOutput{}

        mockClient.On("GetPlace", ctx, input).Return(output, nil)

        result, err := mockClient.GetPlace(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestReverseGeocode", func(t *testing.T) {
        input := &geoplaces.ReverseGeocodeInput{}
        output := &geoplaces.ReverseGeocodeOutput{}

        mockClient.On("ReverseGeocode", ctx, input).Return(output, nil)

        result, err := mockClient.ReverseGeocode(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSearchNearby", func(t *testing.T) {
        input := &geoplaces.SearchNearbyInput{}
        output := &geoplaces.SearchNearbyOutput{}

        mockClient.On("SearchNearby", ctx, input).Return(output, nil)

        result, err := mockClient.SearchNearby(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSearchText", func(t *testing.T) {
        input := &geoplaces.SearchTextInput{}
        output := &geoplaces.SearchTextOutput{}

        mockClient.On("SearchText", ctx, input).Return(output, nil)

        result, err := mockClient.SearchText(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSuggest", func(t *testing.T) {
        input := &geoplaces.SuggestInput{}
        output := &geoplaces.SuggestOutput{}

        mockClient.On("Suggest", ctx, input).Return(output, nil)

        result, err := mockClient.Suggest(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
