// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package arcregionswitch_test

// tests for the arcregionswitch service interface for 
// this ../../../service/arcregionswitch/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/arcregionswitch"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/arcregionswitch/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/arcregionswitch/arcregionswitch_iface"
	"github.com/stretchr/testify/assert"
)

func TestArcregionswitchServiceCanBeMocked(t *testing.T) {
	var iface arcregionswitch_iface.IClient
	iface = &arcregionswitch.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := arcregionswitch.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestApprovePlanExecutionStep", func(t *testing.T) {
        input := &arcregionswitch.ApprovePlanExecutionStepInput{}
        output := &arcregionswitch.ApprovePlanExecutionStepOutput{}

        mockClient.On("ApprovePlanExecutionStep", ctx, input).Return(output, nil)

        result, err := mockClient.ApprovePlanExecutionStep(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCancelPlanExecution", func(t *testing.T) {
        input := &arcregionswitch.CancelPlanExecutionInput{}
        output := &arcregionswitch.CancelPlanExecutionOutput{}

        mockClient.On("CancelPlanExecution", ctx, input).Return(output, nil)

        result, err := mockClient.CancelPlanExecution(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreatePlan", func(t *testing.T) {
        input := &arcregionswitch.CreatePlanInput{}
        output := &arcregionswitch.CreatePlanOutput{}

        mockClient.On("CreatePlan", ctx, input).Return(output, nil)

        result, err := mockClient.CreatePlan(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeletePlan", func(t *testing.T) {
        input := &arcregionswitch.DeletePlanInput{}
        output := &arcregionswitch.DeletePlanOutput{}

        mockClient.On("DeletePlan", ctx, input).Return(output, nil)

        result, err := mockClient.DeletePlan(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPlan", func(t *testing.T) {
        input := &arcregionswitch.GetPlanInput{}
        output := &arcregionswitch.GetPlanOutput{}

        mockClient.On("GetPlan", ctx, input).Return(output, nil)

        result, err := mockClient.GetPlan(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPlanEvaluationStatus", func(t *testing.T) {
        input := &arcregionswitch.GetPlanEvaluationStatusInput{}
        output := &arcregionswitch.GetPlanEvaluationStatusOutput{}

        mockClient.On("GetPlanEvaluationStatus", ctx, input).Return(output, nil)

        result, err := mockClient.GetPlanEvaluationStatus(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPlanExecution", func(t *testing.T) {
        input := &arcregionswitch.GetPlanExecutionInput{}
        output := &arcregionswitch.GetPlanExecutionOutput{}

        mockClient.On("GetPlanExecution", ctx, input).Return(output, nil)

        result, err := mockClient.GetPlanExecution(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetPlanInRegion", func(t *testing.T) {
        input := &arcregionswitch.GetPlanInRegionInput{}
        output := &arcregionswitch.GetPlanInRegionOutput{}

        mockClient.On("GetPlanInRegion", ctx, input).Return(output, nil)

        result, err := mockClient.GetPlanInRegion(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListPlanExecutionEvents", func(t *testing.T) {
        input := &arcregionswitch.ListPlanExecutionEventsInput{}
        output := &arcregionswitch.ListPlanExecutionEventsOutput{}

        mockClient.On("ListPlanExecutionEvents", ctx, input).Return(output, nil)

        result, err := mockClient.ListPlanExecutionEvents(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListPlanExecutions", func(t *testing.T) {
        input := &arcregionswitch.ListPlanExecutionsInput{}
        output := &arcregionswitch.ListPlanExecutionsOutput{}

        mockClient.On("ListPlanExecutions", ctx, input).Return(output, nil)

        result, err := mockClient.ListPlanExecutions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListPlans", func(t *testing.T) {
        input := &arcregionswitch.ListPlansInput{}
        output := &arcregionswitch.ListPlansOutput{}

        mockClient.On("ListPlans", ctx, input).Return(output, nil)

        result, err := mockClient.ListPlans(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListPlansInRegion", func(t *testing.T) {
        input := &arcregionswitch.ListPlansInRegionInput{}
        output := &arcregionswitch.ListPlansInRegionOutput{}

        mockClient.On("ListPlansInRegion", ctx, input).Return(output, nil)

        result, err := mockClient.ListPlansInRegion(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListRoute53HealthChecks", func(t *testing.T) {
        input := &arcregionswitch.ListRoute53HealthChecksInput{}
        output := &arcregionswitch.ListRoute53HealthChecksOutput{}

        mockClient.On("ListRoute53HealthChecks", ctx, input).Return(output, nil)

        result, err := mockClient.ListRoute53HealthChecks(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &arcregionswitch.ListTagsForResourceInput{}
        output := &arcregionswitch.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestStartPlanExecution", func(t *testing.T) {
        input := &arcregionswitch.StartPlanExecutionInput{}
        output := &arcregionswitch.StartPlanExecutionOutput{}

        mockClient.On("StartPlanExecution", ctx, input).Return(output, nil)

        result, err := mockClient.StartPlanExecution(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &arcregionswitch.TagResourceInput{}
        output := &arcregionswitch.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &arcregionswitch.UntagResourceInput{}
        output := &arcregionswitch.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdatePlan", func(t *testing.T) {
        input := &arcregionswitch.UpdatePlanInput{}
        output := &arcregionswitch.UpdatePlanOutput{}

        mockClient.On("UpdatePlan", ctx, input).Return(output, nil)

        result, err := mockClient.UpdatePlan(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdatePlanExecution", func(t *testing.T) {
        input := &arcregionswitch.UpdatePlanExecutionInput{}
        output := &arcregionswitch.UpdatePlanExecutionOutput{}

        mockClient.On("UpdatePlanExecution", ctx, input).Return(output, nil)

        result, err := mockClient.UpdatePlanExecution(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdatePlanExecutionStep", func(t *testing.T) {
        input := &arcregionswitch.UpdatePlanExecutionStepInput{}
        output := &arcregionswitch.UpdatePlanExecutionStepOutput{}

        mockClient.On("UpdatePlanExecutionStep", ctx, input).Return(output, nil)

        result, err := mockClient.UpdatePlanExecutionStep(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
