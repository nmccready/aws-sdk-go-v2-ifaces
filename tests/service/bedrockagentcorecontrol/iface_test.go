// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package bedrockagentcorecontrol_test

// tests for the bedrockagentcorecontrol service interface for 
// this ../../../service/bedrockagentcorecontrol/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bedrockagentcorecontrol/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bedrockagentcorecontrol/bedrockagentcorecontrol_iface"
	"github.com/stretchr/testify/assert"
)

func TestBedrockagentcorecontrolServiceCanBeMocked(t *testing.T) {
	var iface bedrockagentcorecontrol_iface.IClient
	iface = &bedrockagentcorecontrol.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := bedrockagentcorecontrol.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateAgentRuntime", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateAgentRuntimeInput{}
        output := &bedrockagentcorecontrol.CreateAgentRuntimeOutput{}

        mockClient.On("CreateAgentRuntime", ctx, input).Return(output, nil)

        result, err := mockClient.CreateAgentRuntime(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateAgentRuntimeEndpoint", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateAgentRuntimeEndpointInput{}
        output := &bedrockagentcorecontrol.CreateAgentRuntimeEndpointOutput{}

        mockClient.On("CreateAgentRuntimeEndpoint", ctx, input).Return(output, nil)

        result, err := mockClient.CreateAgentRuntimeEndpoint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateApiKeyCredentialProvider", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateApiKeyCredentialProviderInput{}
        output := &bedrockagentcorecontrol.CreateApiKeyCredentialProviderOutput{}

        mockClient.On("CreateApiKeyCredentialProvider", ctx, input).Return(output, nil)

        result, err := mockClient.CreateApiKeyCredentialProvider(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateBrowser", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateBrowserInput{}
        output := &bedrockagentcorecontrol.CreateBrowserOutput{}

        mockClient.On("CreateBrowser", ctx, input).Return(output, nil)

        result, err := mockClient.CreateBrowser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateCodeInterpreter", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateCodeInterpreterInput{}
        output := &bedrockagentcorecontrol.CreateCodeInterpreterOutput{}

        mockClient.On("CreateCodeInterpreter", ctx, input).Return(output, nil)

        result, err := mockClient.CreateCodeInterpreter(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateGateway", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateGatewayInput{}
        output := &bedrockagentcorecontrol.CreateGatewayOutput{}

        mockClient.On("CreateGateway", ctx, input).Return(output, nil)

        result, err := mockClient.CreateGateway(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateGatewayTarget", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateGatewayTargetInput{}
        output := &bedrockagentcorecontrol.CreateGatewayTargetOutput{}

        mockClient.On("CreateGatewayTarget", ctx, input).Return(output, nil)

        result, err := mockClient.CreateGatewayTarget(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateMemory", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateMemoryInput{}
        output := &bedrockagentcorecontrol.CreateMemoryOutput{}

        mockClient.On("CreateMemory", ctx, input).Return(output, nil)

        result, err := mockClient.CreateMemory(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateOauth2CredentialProvider", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateOauth2CredentialProviderInput{}
        output := &bedrockagentcorecontrol.CreateOauth2CredentialProviderOutput{}

        mockClient.On("CreateOauth2CredentialProvider", ctx, input).Return(output, nil)

        result, err := mockClient.CreateOauth2CredentialProvider(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateWorkloadIdentity", func(t *testing.T) {
        input := &bedrockagentcorecontrol.CreateWorkloadIdentityInput{}
        output := &bedrockagentcorecontrol.CreateWorkloadIdentityOutput{}

        mockClient.On("CreateWorkloadIdentity", ctx, input).Return(output, nil)

        result, err := mockClient.CreateWorkloadIdentity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteAgentRuntime", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteAgentRuntimeInput{}
        output := &bedrockagentcorecontrol.DeleteAgentRuntimeOutput{}

        mockClient.On("DeleteAgentRuntime", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteAgentRuntime(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteAgentRuntimeEndpoint", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteAgentRuntimeEndpointInput{}
        output := &bedrockagentcorecontrol.DeleteAgentRuntimeEndpointOutput{}

        mockClient.On("DeleteAgentRuntimeEndpoint", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteAgentRuntimeEndpoint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteApiKeyCredentialProvider", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteApiKeyCredentialProviderInput{}
        output := &bedrockagentcorecontrol.DeleteApiKeyCredentialProviderOutput{}

        mockClient.On("DeleteApiKeyCredentialProvider", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteApiKeyCredentialProvider(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteBrowser", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteBrowserInput{}
        output := &bedrockagentcorecontrol.DeleteBrowserOutput{}

        mockClient.On("DeleteBrowser", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteBrowser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteCodeInterpreter", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteCodeInterpreterInput{}
        output := &bedrockagentcorecontrol.DeleteCodeInterpreterOutput{}

        mockClient.On("DeleteCodeInterpreter", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteCodeInterpreter(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteGateway", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteGatewayInput{}
        output := &bedrockagentcorecontrol.DeleteGatewayOutput{}

        mockClient.On("DeleteGateway", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteGateway(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteGatewayTarget", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteGatewayTargetInput{}
        output := &bedrockagentcorecontrol.DeleteGatewayTargetOutput{}

        mockClient.On("DeleteGatewayTarget", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteGatewayTarget(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteMemory", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteMemoryInput{}
        output := &bedrockagentcorecontrol.DeleteMemoryOutput{}

        mockClient.On("DeleteMemory", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteMemory(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteOauth2CredentialProvider", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteOauth2CredentialProviderInput{}
        output := &bedrockagentcorecontrol.DeleteOauth2CredentialProviderOutput{}

        mockClient.On("DeleteOauth2CredentialProvider", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteOauth2CredentialProvider(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteWorkloadIdentity", func(t *testing.T) {
        input := &bedrockagentcorecontrol.DeleteWorkloadIdentityInput{}
        output := &bedrockagentcorecontrol.DeleteWorkloadIdentityOutput{}

        mockClient.On("DeleteWorkloadIdentity", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteWorkloadIdentity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAgentRuntime", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetAgentRuntimeInput{}
        output := &bedrockagentcorecontrol.GetAgentRuntimeOutput{}

        mockClient.On("GetAgentRuntime", ctx, input).Return(output, nil)

        result, err := mockClient.GetAgentRuntime(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetAgentRuntimeEndpoint", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetAgentRuntimeEndpointInput{}
        output := &bedrockagentcorecontrol.GetAgentRuntimeEndpointOutput{}

        mockClient.On("GetAgentRuntimeEndpoint", ctx, input).Return(output, nil)

        result, err := mockClient.GetAgentRuntimeEndpoint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetApiKeyCredentialProvider", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetApiKeyCredentialProviderInput{}
        output := &bedrockagentcorecontrol.GetApiKeyCredentialProviderOutput{}

        mockClient.On("GetApiKeyCredentialProvider", ctx, input).Return(output, nil)

        result, err := mockClient.GetApiKeyCredentialProvider(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetBrowser", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetBrowserInput{}
        output := &bedrockagentcorecontrol.GetBrowserOutput{}

        mockClient.On("GetBrowser", ctx, input).Return(output, nil)

        result, err := mockClient.GetBrowser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetCodeInterpreter", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetCodeInterpreterInput{}
        output := &bedrockagentcorecontrol.GetCodeInterpreterOutput{}

        mockClient.On("GetCodeInterpreter", ctx, input).Return(output, nil)

        result, err := mockClient.GetCodeInterpreter(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetGateway", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetGatewayInput{}
        output := &bedrockagentcorecontrol.GetGatewayOutput{}

        mockClient.On("GetGateway", ctx, input).Return(output, nil)

        result, err := mockClient.GetGateway(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetGatewayTarget", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetGatewayTargetInput{}
        output := &bedrockagentcorecontrol.GetGatewayTargetOutput{}

        mockClient.On("GetGatewayTarget", ctx, input).Return(output, nil)

        result, err := mockClient.GetGatewayTarget(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetMemory", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetMemoryInput{}
        output := &bedrockagentcorecontrol.GetMemoryOutput{}

        mockClient.On("GetMemory", ctx, input).Return(output, nil)

        result, err := mockClient.GetMemory(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetOauth2CredentialProvider", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetOauth2CredentialProviderInput{}
        output := &bedrockagentcorecontrol.GetOauth2CredentialProviderOutput{}

        mockClient.On("GetOauth2CredentialProvider", ctx, input).Return(output, nil)

        result, err := mockClient.GetOauth2CredentialProvider(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetTokenVault", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetTokenVaultInput{}
        output := &bedrockagentcorecontrol.GetTokenVaultOutput{}

        mockClient.On("GetTokenVault", ctx, input).Return(output, nil)

        result, err := mockClient.GetTokenVault(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetWorkloadIdentity", func(t *testing.T) {
        input := &bedrockagentcorecontrol.GetWorkloadIdentityInput{}
        output := &bedrockagentcorecontrol.GetWorkloadIdentityOutput{}

        mockClient.On("GetWorkloadIdentity", ctx, input).Return(output, nil)

        result, err := mockClient.GetWorkloadIdentity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAgentRuntimeEndpoints", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListAgentRuntimeEndpointsInput{}
        output := &bedrockagentcorecontrol.ListAgentRuntimeEndpointsOutput{}

        mockClient.On("ListAgentRuntimeEndpoints", ctx, input).Return(output, nil)

        result, err := mockClient.ListAgentRuntimeEndpoints(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAgentRuntimes", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListAgentRuntimesInput{}
        output := &bedrockagentcorecontrol.ListAgentRuntimesOutput{}

        mockClient.On("ListAgentRuntimes", ctx, input).Return(output, nil)

        result, err := mockClient.ListAgentRuntimes(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListAgentRuntimeVersions", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListAgentRuntimeVersionsInput{}
        output := &bedrockagentcorecontrol.ListAgentRuntimeVersionsOutput{}

        mockClient.On("ListAgentRuntimeVersions", ctx, input).Return(output, nil)

        result, err := mockClient.ListAgentRuntimeVersions(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListApiKeyCredentialProviders", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListApiKeyCredentialProvidersInput{}
        output := &bedrockagentcorecontrol.ListApiKeyCredentialProvidersOutput{}

        mockClient.On("ListApiKeyCredentialProviders", ctx, input).Return(output, nil)

        result, err := mockClient.ListApiKeyCredentialProviders(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListBrowsers", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListBrowsersInput{}
        output := &bedrockagentcorecontrol.ListBrowsersOutput{}

        mockClient.On("ListBrowsers", ctx, input).Return(output, nil)

        result, err := mockClient.ListBrowsers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListCodeInterpreters", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListCodeInterpretersInput{}
        output := &bedrockagentcorecontrol.ListCodeInterpretersOutput{}

        mockClient.On("ListCodeInterpreters", ctx, input).Return(output, nil)

        result, err := mockClient.ListCodeInterpreters(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListGateways", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListGatewaysInput{}
        output := &bedrockagentcorecontrol.ListGatewaysOutput{}

        mockClient.On("ListGateways", ctx, input).Return(output, nil)

        result, err := mockClient.ListGateways(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListGatewayTargets", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListGatewayTargetsInput{}
        output := &bedrockagentcorecontrol.ListGatewayTargetsOutput{}

        mockClient.On("ListGatewayTargets", ctx, input).Return(output, nil)

        result, err := mockClient.ListGatewayTargets(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListMemories", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListMemoriesInput{}
        output := &bedrockagentcorecontrol.ListMemoriesOutput{}

        mockClient.On("ListMemories", ctx, input).Return(output, nil)

        result, err := mockClient.ListMemories(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListOauth2CredentialProviders", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListOauth2CredentialProvidersInput{}
        output := &bedrockagentcorecontrol.ListOauth2CredentialProvidersOutput{}

        mockClient.On("ListOauth2CredentialProviders", ctx, input).Return(output, nil)

        result, err := mockClient.ListOauth2CredentialProviders(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListWorkloadIdentities", func(t *testing.T) {
        input := &bedrockagentcorecontrol.ListWorkloadIdentitiesInput{}
        output := &bedrockagentcorecontrol.ListWorkloadIdentitiesOutput{}

        mockClient.On("ListWorkloadIdentities", ctx, input).Return(output, nil)

        result, err := mockClient.ListWorkloadIdentities(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSetTokenVaultCMK", func(t *testing.T) {
        input := &bedrockagentcorecontrol.SetTokenVaultCMKInput{}
        output := &bedrockagentcorecontrol.SetTokenVaultCMKOutput{}

        mockClient.On("SetTokenVaultCMK", ctx, input).Return(output, nil)

        result, err := mockClient.SetTokenVaultCMK(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateAgentRuntime", func(t *testing.T) {
        input := &bedrockagentcorecontrol.UpdateAgentRuntimeInput{}
        output := &bedrockagentcorecontrol.UpdateAgentRuntimeOutput{}

        mockClient.On("UpdateAgentRuntime", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateAgentRuntime(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateAgentRuntimeEndpoint", func(t *testing.T) {
        input := &bedrockagentcorecontrol.UpdateAgentRuntimeEndpointInput{}
        output := &bedrockagentcorecontrol.UpdateAgentRuntimeEndpointOutput{}

        mockClient.On("UpdateAgentRuntimeEndpoint", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateAgentRuntimeEndpoint(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateApiKeyCredentialProvider", func(t *testing.T) {
        input := &bedrockagentcorecontrol.UpdateApiKeyCredentialProviderInput{}
        output := &bedrockagentcorecontrol.UpdateApiKeyCredentialProviderOutput{}

        mockClient.On("UpdateApiKeyCredentialProvider", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateApiKeyCredentialProvider(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateGateway", func(t *testing.T) {
        input := &bedrockagentcorecontrol.UpdateGatewayInput{}
        output := &bedrockagentcorecontrol.UpdateGatewayOutput{}

        mockClient.On("UpdateGateway", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateGateway(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateGatewayTarget", func(t *testing.T) {
        input := &bedrockagentcorecontrol.UpdateGatewayTargetInput{}
        output := &bedrockagentcorecontrol.UpdateGatewayTargetOutput{}

        mockClient.On("UpdateGatewayTarget", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateGatewayTarget(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateMemory", func(t *testing.T) {
        input := &bedrockagentcorecontrol.UpdateMemoryInput{}
        output := &bedrockagentcorecontrol.UpdateMemoryOutput{}

        mockClient.On("UpdateMemory", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateMemory(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateOauth2CredentialProvider", func(t *testing.T) {
        input := &bedrockagentcorecontrol.UpdateOauth2CredentialProviderInput{}
        output := &bedrockagentcorecontrol.UpdateOauth2CredentialProviderOutput{}

        mockClient.On("UpdateOauth2CredentialProvider", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateOauth2CredentialProvider(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateWorkloadIdentity", func(t *testing.T) {
        input := &bedrockagentcorecontrol.UpdateWorkloadIdentityInput{}
        output := &bedrockagentcorecontrol.UpdateWorkloadIdentityOutput{}

        mockClient.On("UpdateWorkloadIdentity", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateWorkloadIdentity(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
