// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package notificationscontacts_test

// tests for the notificationscontacts service interface for 
// this ../../../service/notificationscontacts/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/notificationscontacts"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/notificationscontacts/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/notificationscontacts/notificationscontacts_iface"
	"github.com/stretchr/testify/assert"
)

func TestNotificationscontactsServiceCanBeMocked(t *testing.T) {
	var iface notificationscontacts_iface.IClient
	iface = &notificationscontacts.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := notificationscontacts.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestActivateEmailContact", func(t *testing.T) {
        input := &notificationscontacts.ActivateEmailContactInput{}
        output := &notificationscontacts.ActivateEmailContactOutput{}

        mockClient.On("ActivateEmailContact", ctx, input).Return(output, nil)

        result, err := mockClient.ActivateEmailContact(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateEmailContact", func(t *testing.T) {
        input := &notificationscontacts.CreateEmailContactInput{}
        output := &notificationscontacts.CreateEmailContactOutput{}

        mockClient.On("CreateEmailContact", ctx, input).Return(output, nil)

        result, err := mockClient.CreateEmailContact(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteEmailContact", func(t *testing.T) {
        input := &notificationscontacts.DeleteEmailContactInput{}
        output := &notificationscontacts.DeleteEmailContactOutput{}

        mockClient.On("DeleteEmailContact", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteEmailContact(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetEmailContact", func(t *testing.T) {
        input := &notificationscontacts.GetEmailContactInput{}
        output := &notificationscontacts.GetEmailContactOutput{}

        mockClient.On("GetEmailContact", ctx, input).Return(output, nil)

        result, err := mockClient.GetEmailContact(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListEmailContacts", func(t *testing.T) {
        input := &notificationscontacts.ListEmailContactsInput{}
        output := &notificationscontacts.ListEmailContactsOutput{}

        mockClient.On("ListEmailContacts", ctx, input).Return(output, nil)

        result, err := mockClient.ListEmailContacts(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &notificationscontacts.ListTagsForResourceInput{}
        output := &notificationscontacts.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSendActivationCode", func(t *testing.T) {
        input := &notificationscontacts.SendActivationCodeInput{}
        output := &notificationscontacts.SendActivationCodeOutput{}

        mockClient.On("SendActivationCode", ctx, input).Return(output, nil)

        result, err := mockClient.SendActivationCode(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &notificationscontacts.TagResourceInput{}
        output := &notificationscontacts.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &notificationscontacts.UntagResourceInput{}
        output := &notificationscontacts.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
