// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package directoryservicedata_test

// tests for the directoryservicedata service interface for 
// this ../../../service/directoryservicedata/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/directoryservicedata"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/directoryservicedata/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/directoryservicedata/directoryservicedata_iface"
	"github.com/stretchr/testify/assert"
)

func TestDirectoryservicedataServiceCanBeMocked(t *testing.T) {
	var iface directoryservicedata_iface.IClient
	iface = &directoryservicedata.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := directoryservicedata.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestAddGroupMember", func(t *testing.T) {
        input := &directoryservicedata.AddGroupMemberInput{}
        output := &directoryservicedata.AddGroupMemberOutput{}

        mockClient.On("AddGroupMember", ctx, input).Return(output, nil)

        result, err := mockClient.AddGroupMember(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateGroup", func(t *testing.T) {
        input := &directoryservicedata.CreateGroupInput{}
        output := &directoryservicedata.CreateGroupOutput{}

        mockClient.On("CreateGroup", ctx, input).Return(output, nil)

        result, err := mockClient.CreateGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateUser", func(t *testing.T) {
        input := &directoryservicedata.CreateUserInput{}
        output := &directoryservicedata.CreateUserOutput{}

        mockClient.On("CreateUser", ctx, input).Return(output, nil)

        result, err := mockClient.CreateUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteGroup", func(t *testing.T) {
        input := &directoryservicedata.DeleteGroupInput{}
        output := &directoryservicedata.DeleteGroupOutput{}

        mockClient.On("DeleteGroup", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteUser", func(t *testing.T) {
        input := &directoryservicedata.DeleteUserInput{}
        output := &directoryservicedata.DeleteUserOutput{}

        mockClient.On("DeleteUser", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDescribeGroup", func(t *testing.T) {
        input := &directoryservicedata.DescribeGroupInput{}
        output := &directoryservicedata.DescribeGroupOutput{}

        mockClient.On("DescribeGroup", ctx, input).Return(output, nil)

        result, err := mockClient.DescribeGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDescribeUser", func(t *testing.T) {
        input := &directoryservicedata.DescribeUserInput{}
        output := &directoryservicedata.DescribeUserOutput{}

        mockClient.On("DescribeUser", ctx, input).Return(output, nil)

        result, err := mockClient.DescribeUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDisableUser", func(t *testing.T) {
        input := &directoryservicedata.DisableUserInput{}
        output := &directoryservicedata.DisableUserOutput{}

        mockClient.On("DisableUser", ctx, input).Return(output, nil)

        result, err := mockClient.DisableUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListGroupMembers", func(t *testing.T) {
        input := &directoryservicedata.ListGroupMembersInput{}
        output := &directoryservicedata.ListGroupMembersOutput{}

        mockClient.On("ListGroupMembers", ctx, input).Return(output, nil)

        result, err := mockClient.ListGroupMembers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListGroups", func(t *testing.T) {
        input := &directoryservicedata.ListGroupsInput{}
        output := &directoryservicedata.ListGroupsOutput{}

        mockClient.On("ListGroups", ctx, input).Return(output, nil)

        result, err := mockClient.ListGroups(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListGroupsForMember", func(t *testing.T) {
        input := &directoryservicedata.ListGroupsForMemberInput{}
        output := &directoryservicedata.ListGroupsForMemberOutput{}

        mockClient.On("ListGroupsForMember", ctx, input).Return(output, nil)

        result, err := mockClient.ListGroupsForMember(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListUsers", func(t *testing.T) {
        input := &directoryservicedata.ListUsersInput{}
        output := &directoryservicedata.ListUsersOutput{}

        mockClient.On("ListUsers", ctx, input).Return(output, nil)

        result, err := mockClient.ListUsers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestRemoveGroupMember", func(t *testing.T) {
        input := &directoryservicedata.RemoveGroupMemberInput{}
        output := &directoryservicedata.RemoveGroupMemberOutput{}

        mockClient.On("RemoveGroupMember", ctx, input).Return(output, nil)

        result, err := mockClient.RemoveGroupMember(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSearchGroups", func(t *testing.T) {
        input := &directoryservicedata.SearchGroupsInput{}
        output := &directoryservicedata.SearchGroupsOutput{}

        mockClient.On("SearchGroups", ctx, input).Return(output, nil)

        result, err := mockClient.SearchGroups(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestSearchUsers", func(t *testing.T) {
        input := &directoryservicedata.SearchUsersInput{}
        output := &directoryservicedata.SearchUsersOutput{}

        mockClient.On("SearchUsers", ctx, input).Return(output, nil)

        result, err := mockClient.SearchUsers(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateGroup", func(t *testing.T) {
        input := &directoryservicedata.UpdateGroupInput{}
        output := &directoryservicedata.UpdateGroupOutput{}

        mockClient.On("UpdateGroup", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateGroup(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateUser", func(t *testing.T) {
        input := &directoryservicedata.UpdateUserInput{}
        output := &directoryservicedata.UpdateUserOutput{}

        mockClient.On("UpdateUser", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateUser(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
