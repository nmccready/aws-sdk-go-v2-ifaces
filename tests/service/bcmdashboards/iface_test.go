// Code generated by ./scripts/gen_tests.sh DO NOT EDIT.
package bcmdashboards_test

// tests for the bcmdashboards service interface for 
// this ../../../service/bcmdashboards/iface.go

import (
	"context"
	"testing"

	"github.com/aws/aws-sdk-go-v2/service/bcmdashboards"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bcmdashboards/mocks"
	"github.com/nmccready/aws-sdk-go-v2-ifaces/service/bcmdashboards/bcmdashboards_iface"
	"github.com/stretchr/testify/assert"
)

func TestBcmdashboardsServiceCanBeMocked(t *testing.T) {
	var iface bcmdashboards_iface.IClient
	iface = &bcmdashboards.Client{}
	assert.NotNil(t, iface, "not nil")
}

func TestIClient(t *testing.T) {
    mockClient := &mocks.IClient{}
    ctx := context.TODO()

    t.Run("TestOptions", func(t *testing.T) {
        output := bcmdashboards.Options{}
        mockClient.On("Options").Return(output)

        result := mockClient.Options()
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestCreateDashboard", func(t *testing.T) {
        input := &bcmdashboards.CreateDashboardInput{}
        output := &bcmdashboards.CreateDashboardOutput{}

        mockClient.On("CreateDashboard", ctx, input).Return(output, nil)

        result, err := mockClient.CreateDashboard(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestDeleteDashboard", func(t *testing.T) {
        input := &bcmdashboards.DeleteDashboardInput{}
        output := &bcmdashboards.DeleteDashboardOutput{}

        mockClient.On("DeleteDashboard", ctx, input).Return(output, nil)

        result, err := mockClient.DeleteDashboard(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetDashboard", func(t *testing.T) {
        input := &bcmdashboards.GetDashboardInput{}
        output := &bcmdashboards.GetDashboardOutput{}

        mockClient.On("GetDashboard", ctx, input).Return(output, nil)

        result, err := mockClient.GetDashboard(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestGetResourcePolicy", func(t *testing.T) {
        input := &bcmdashboards.GetResourcePolicyInput{}
        output := &bcmdashboards.GetResourcePolicyOutput{}

        mockClient.On("GetResourcePolicy", ctx, input).Return(output, nil)

        result, err := mockClient.GetResourcePolicy(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListDashboards", func(t *testing.T) {
        input := &bcmdashboards.ListDashboardsInput{}
        output := &bcmdashboards.ListDashboardsOutput{}

        mockClient.On("ListDashboards", ctx, input).Return(output, nil)

        result, err := mockClient.ListDashboards(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestListTagsForResource", func(t *testing.T) {
        input := &bcmdashboards.ListTagsForResourceInput{}
        output := &bcmdashboards.ListTagsForResourceOutput{}

        mockClient.On("ListTagsForResource", ctx, input).Return(output, nil)

        result, err := mockClient.ListTagsForResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestTagResource", func(t *testing.T) {
        input := &bcmdashboards.TagResourceInput{}
        output := &bcmdashboards.TagResourceOutput{}

        mockClient.On("TagResource", ctx, input).Return(output, nil)

        result, err := mockClient.TagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUntagResource", func(t *testing.T) {
        input := &bcmdashboards.UntagResourceInput{}
        output := &bcmdashboards.UntagResourceOutput{}

        mockClient.On("UntagResource", ctx, input).Return(output, nil)

        result, err := mockClient.UntagResource(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })

    t.Run("TestUpdateDashboard", func(t *testing.T) {
        input := &bcmdashboards.UpdateDashboardInput{}
        output := &bcmdashboards.UpdateDashboardOutput{}

        mockClient.On("UpdateDashboard", ctx, input).Return(output, nil)

        result, err := mockClient.UpdateDashboard(ctx, input)
        assert.NoError(t, err)
        assert.Equal(t, output, result)

        mockClient.AssertExpectations(t)
    })
}
