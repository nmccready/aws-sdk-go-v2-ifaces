// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mediatailor "github.com/aws/aws-sdk-go-v2/service/mediatailor"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ConfigureLogsForChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfigureLogsForChannel(ctx context.Context, params *mediatailor.ConfigureLogsForChannelInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ConfigureLogsForChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureLogsForChannel")
	}

	var r0 *mediatailor.ConfigureLogsForChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ConfigureLogsForChannelInput, ...func(*mediatailor.Options)) (*mediatailor.ConfigureLogsForChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ConfigureLogsForChannelInput, ...func(*mediatailor.Options)) *mediatailor.ConfigureLogsForChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ConfigureLogsForChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ConfigureLogsForChannelInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigureLogsForPlaybackConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfigureLogsForPlaybackConfiguration(ctx context.Context, params *mediatailor.ConfigureLogsForPlaybackConfigurationInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ConfigureLogsForPlaybackConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureLogsForPlaybackConfiguration")
	}

	var r0 *mediatailor.ConfigureLogsForPlaybackConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ConfigureLogsForPlaybackConfigurationInput, ...func(*mediatailor.Options)) (*mediatailor.ConfigureLogsForPlaybackConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ConfigureLogsForPlaybackConfigurationInput, ...func(*mediatailor.Options)) *mediatailor.ConfigureLogsForPlaybackConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ConfigureLogsForPlaybackConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ConfigureLogsForPlaybackConfigurationInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannel(ctx context.Context, params *mediatailor.CreateChannelInput, optFns ...func(*mediatailor.Options)) (*mediatailor.CreateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 *mediatailor.CreateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateChannelInput, ...func(*mediatailor.Options)) (*mediatailor.CreateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateChannelInput, ...func(*mediatailor.Options)) *mediatailor.CreateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.CreateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.CreateChannelInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLiveSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLiveSource(ctx context.Context, params *mediatailor.CreateLiveSourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.CreateLiveSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLiveSource")
	}

	var r0 *mediatailor.CreateLiveSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateLiveSourceInput, ...func(*mediatailor.Options)) (*mediatailor.CreateLiveSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateLiveSourceInput, ...func(*mediatailor.Options)) *mediatailor.CreateLiveSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.CreateLiveSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.CreateLiveSourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrefetchSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePrefetchSchedule(ctx context.Context, params *mediatailor.CreatePrefetchScheduleInput, optFns ...func(*mediatailor.Options)) (*mediatailor.CreatePrefetchScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrefetchSchedule")
	}

	var r0 *mediatailor.CreatePrefetchScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreatePrefetchScheduleInput, ...func(*mediatailor.Options)) (*mediatailor.CreatePrefetchScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreatePrefetchScheduleInput, ...func(*mediatailor.Options)) *mediatailor.CreatePrefetchScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.CreatePrefetchScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.CreatePrefetchScheduleInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProgram provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProgram(ctx context.Context, params *mediatailor.CreateProgramInput, optFns ...func(*mediatailor.Options)) (*mediatailor.CreateProgramOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProgram")
	}

	var r0 *mediatailor.CreateProgramOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateProgramInput, ...func(*mediatailor.Options)) (*mediatailor.CreateProgramOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateProgramInput, ...func(*mediatailor.Options)) *mediatailor.CreateProgramOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.CreateProgramOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.CreateProgramInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSourceLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSourceLocation(ctx context.Context, params *mediatailor.CreateSourceLocationInput, optFns ...func(*mediatailor.Options)) (*mediatailor.CreateSourceLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSourceLocation")
	}

	var r0 *mediatailor.CreateSourceLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateSourceLocationInput, ...func(*mediatailor.Options)) (*mediatailor.CreateSourceLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateSourceLocationInput, ...func(*mediatailor.Options)) *mediatailor.CreateSourceLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.CreateSourceLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.CreateSourceLocationInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVodSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVodSource(ctx context.Context, params *mediatailor.CreateVodSourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.CreateVodSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVodSource")
	}

	var r0 *mediatailor.CreateVodSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateVodSourceInput, ...func(*mediatailor.Options)) (*mediatailor.CreateVodSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.CreateVodSourceInput, ...func(*mediatailor.Options)) *mediatailor.CreateVodSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.CreateVodSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.CreateVodSourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannel(ctx context.Context, params *mediatailor.DeleteChannelInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DeleteChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 *mediatailor.DeleteChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteChannelInput, ...func(*mediatailor.Options)) (*mediatailor.DeleteChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteChannelInput, ...func(*mediatailor.Options)) *mediatailor.DeleteChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DeleteChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DeleteChannelInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelPolicy(ctx context.Context, params *mediatailor.DeleteChannelPolicyInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DeleteChannelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelPolicy")
	}

	var r0 *mediatailor.DeleteChannelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteChannelPolicyInput, ...func(*mediatailor.Options)) (*mediatailor.DeleteChannelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteChannelPolicyInput, ...func(*mediatailor.Options)) *mediatailor.DeleteChannelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DeleteChannelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DeleteChannelPolicyInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLiveSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLiveSource(ctx context.Context, params *mediatailor.DeleteLiveSourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DeleteLiveSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLiveSource")
	}

	var r0 *mediatailor.DeleteLiveSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteLiveSourceInput, ...func(*mediatailor.Options)) (*mediatailor.DeleteLiveSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteLiveSourceInput, ...func(*mediatailor.Options)) *mediatailor.DeleteLiveSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DeleteLiveSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DeleteLiveSourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlaybackConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePlaybackConfiguration(ctx context.Context, params *mediatailor.DeletePlaybackConfigurationInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DeletePlaybackConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlaybackConfiguration")
	}

	var r0 *mediatailor.DeletePlaybackConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeletePlaybackConfigurationInput, ...func(*mediatailor.Options)) (*mediatailor.DeletePlaybackConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeletePlaybackConfigurationInput, ...func(*mediatailor.Options)) *mediatailor.DeletePlaybackConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DeletePlaybackConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DeletePlaybackConfigurationInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePrefetchSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePrefetchSchedule(ctx context.Context, params *mediatailor.DeletePrefetchScheduleInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DeletePrefetchScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrefetchSchedule")
	}

	var r0 *mediatailor.DeletePrefetchScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeletePrefetchScheduleInput, ...func(*mediatailor.Options)) (*mediatailor.DeletePrefetchScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeletePrefetchScheduleInput, ...func(*mediatailor.Options)) *mediatailor.DeletePrefetchScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DeletePrefetchScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DeletePrefetchScheduleInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProgram provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProgram(ctx context.Context, params *mediatailor.DeleteProgramInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DeleteProgramOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProgram")
	}

	var r0 *mediatailor.DeleteProgramOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteProgramInput, ...func(*mediatailor.Options)) (*mediatailor.DeleteProgramOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteProgramInput, ...func(*mediatailor.Options)) *mediatailor.DeleteProgramOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DeleteProgramOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DeleteProgramInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSourceLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSourceLocation(ctx context.Context, params *mediatailor.DeleteSourceLocationInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DeleteSourceLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSourceLocation")
	}

	var r0 *mediatailor.DeleteSourceLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteSourceLocationInput, ...func(*mediatailor.Options)) (*mediatailor.DeleteSourceLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteSourceLocationInput, ...func(*mediatailor.Options)) *mediatailor.DeleteSourceLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DeleteSourceLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DeleteSourceLocationInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVodSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVodSource(ctx context.Context, params *mediatailor.DeleteVodSourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DeleteVodSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVodSource")
	}

	var r0 *mediatailor.DeleteVodSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteVodSourceInput, ...func(*mediatailor.Options)) (*mediatailor.DeleteVodSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DeleteVodSourceInput, ...func(*mediatailor.Options)) *mediatailor.DeleteVodSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DeleteVodSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DeleteVodSourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannel(ctx context.Context, params *mediatailor.DescribeChannelInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DescribeChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannel")
	}

	var r0 *mediatailor.DescribeChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeChannelInput, ...func(*mediatailor.Options)) (*mediatailor.DescribeChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeChannelInput, ...func(*mediatailor.Options)) *mediatailor.DescribeChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DescribeChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DescribeChannelInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLiveSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLiveSource(ctx context.Context, params *mediatailor.DescribeLiveSourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DescribeLiveSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLiveSource")
	}

	var r0 *mediatailor.DescribeLiveSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeLiveSourceInput, ...func(*mediatailor.Options)) (*mediatailor.DescribeLiveSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeLiveSourceInput, ...func(*mediatailor.Options)) *mediatailor.DescribeLiveSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DescribeLiveSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DescribeLiveSourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProgram provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProgram(ctx context.Context, params *mediatailor.DescribeProgramInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DescribeProgramOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProgram")
	}

	var r0 *mediatailor.DescribeProgramOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeProgramInput, ...func(*mediatailor.Options)) (*mediatailor.DescribeProgramOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeProgramInput, ...func(*mediatailor.Options)) *mediatailor.DescribeProgramOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DescribeProgramOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DescribeProgramInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSourceLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSourceLocation(ctx context.Context, params *mediatailor.DescribeSourceLocationInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DescribeSourceLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSourceLocation")
	}

	var r0 *mediatailor.DescribeSourceLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeSourceLocationInput, ...func(*mediatailor.Options)) (*mediatailor.DescribeSourceLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeSourceLocationInput, ...func(*mediatailor.Options)) *mediatailor.DescribeSourceLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DescribeSourceLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DescribeSourceLocationInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVodSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVodSource(ctx context.Context, params *mediatailor.DescribeVodSourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.DescribeVodSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVodSource")
	}

	var r0 *mediatailor.DescribeVodSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeVodSourceInput, ...func(*mediatailor.Options)) (*mediatailor.DescribeVodSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.DescribeVodSourceInput, ...func(*mediatailor.Options)) *mediatailor.DescribeVodSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.DescribeVodSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.DescribeVodSourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChannelPolicy(ctx context.Context, params *mediatailor.GetChannelPolicyInput, optFns ...func(*mediatailor.Options)) (*mediatailor.GetChannelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelPolicy")
	}

	var r0 *mediatailor.GetChannelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.GetChannelPolicyInput, ...func(*mediatailor.Options)) (*mediatailor.GetChannelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.GetChannelPolicyInput, ...func(*mediatailor.Options)) *mediatailor.GetChannelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.GetChannelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.GetChannelPolicyInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChannelSchedule(ctx context.Context, params *mediatailor.GetChannelScheduleInput, optFns ...func(*mediatailor.Options)) (*mediatailor.GetChannelScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelSchedule")
	}

	var r0 *mediatailor.GetChannelScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.GetChannelScheduleInput, ...func(*mediatailor.Options)) (*mediatailor.GetChannelScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.GetChannelScheduleInput, ...func(*mediatailor.Options)) *mediatailor.GetChannelScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.GetChannelScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.GetChannelScheduleInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlaybackConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPlaybackConfiguration(ctx context.Context, params *mediatailor.GetPlaybackConfigurationInput, optFns ...func(*mediatailor.Options)) (*mediatailor.GetPlaybackConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlaybackConfiguration")
	}

	var r0 *mediatailor.GetPlaybackConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.GetPlaybackConfigurationInput, ...func(*mediatailor.Options)) (*mediatailor.GetPlaybackConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.GetPlaybackConfigurationInput, ...func(*mediatailor.Options)) *mediatailor.GetPlaybackConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.GetPlaybackConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.GetPlaybackConfigurationInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPrefetchSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPrefetchSchedule(ctx context.Context, params *mediatailor.GetPrefetchScheduleInput, optFns ...func(*mediatailor.Options)) (*mediatailor.GetPrefetchScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPrefetchSchedule")
	}

	var r0 *mediatailor.GetPrefetchScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.GetPrefetchScheduleInput, ...func(*mediatailor.Options)) (*mediatailor.GetPrefetchScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.GetPrefetchScheduleInput, ...func(*mediatailor.Options)) *mediatailor.GetPrefetchScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.GetPrefetchScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.GetPrefetchScheduleInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAlerts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAlerts(ctx context.Context, params *mediatailor.ListAlertsInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ListAlertsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAlerts")
	}

	var r0 *mediatailor.ListAlertsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListAlertsInput, ...func(*mediatailor.Options)) (*mediatailor.ListAlertsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListAlertsInput, ...func(*mediatailor.Options)) *mediatailor.ListAlertsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ListAlertsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ListAlertsInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannels(ctx context.Context, params *mediatailor.ListChannelsInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ListChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannels")
	}

	var r0 *mediatailor.ListChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListChannelsInput, ...func(*mediatailor.Options)) (*mediatailor.ListChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListChannelsInput, ...func(*mediatailor.Options)) *mediatailor.ListChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ListChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ListChannelsInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLiveSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLiveSources(ctx context.Context, params *mediatailor.ListLiveSourcesInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ListLiveSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLiveSources")
	}

	var r0 *mediatailor.ListLiveSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListLiveSourcesInput, ...func(*mediatailor.Options)) (*mediatailor.ListLiveSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListLiveSourcesInput, ...func(*mediatailor.Options)) *mediatailor.ListLiveSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ListLiveSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ListLiveSourcesInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlaybackConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlaybackConfigurations(ctx context.Context, params *mediatailor.ListPlaybackConfigurationsInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ListPlaybackConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlaybackConfigurations")
	}

	var r0 *mediatailor.ListPlaybackConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListPlaybackConfigurationsInput, ...func(*mediatailor.Options)) (*mediatailor.ListPlaybackConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListPlaybackConfigurationsInput, ...func(*mediatailor.Options)) *mediatailor.ListPlaybackConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ListPlaybackConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ListPlaybackConfigurationsInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrefetchSchedules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrefetchSchedules(ctx context.Context, params *mediatailor.ListPrefetchSchedulesInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ListPrefetchSchedulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrefetchSchedules")
	}

	var r0 *mediatailor.ListPrefetchSchedulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListPrefetchSchedulesInput, ...func(*mediatailor.Options)) (*mediatailor.ListPrefetchSchedulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListPrefetchSchedulesInput, ...func(*mediatailor.Options)) *mediatailor.ListPrefetchSchedulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ListPrefetchSchedulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ListPrefetchSchedulesInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceLocations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSourceLocations(ctx context.Context, params *mediatailor.ListSourceLocationsInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ListSourceLocationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSourceLocations")
	}

	var r0 *mediatailor.ListSourceLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListSourceLocationsInput, ...func(*mediatailor.Options)) (*mediatailor.ListSourceLocationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListSourceLocationsInput, ...func(*mediatailor.Options)) *mediatailor.ListSourceLocationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ListSourceLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ListSourceLocationsInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *mediatailor.ListTagsForResourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *mediatailor.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListTagsForResourceInput, ...func(*mediatailor.Options)) (*mediatailor.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListTagsForResourceInput, ...func(*mediatailor.Options)) *mediatailor.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ListTagsForResourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVodSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVodSources(ctx context.Context, params *mediatailor.ListVodSourcesInput, optFns ...func(*mediatailor.Options)) (*mediatailor.ListVodSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVodSources")
	}

	var r0 *mediatailor.ListVodSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListVodSourcesInput, ...func(*mediatailor.Options)) (*mediatailor.ListVodSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.ListVodSourcesInput, ...func(*mediatailor.Options)) *mediatailor.ListVodSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.ListVodSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.ListVodSourcesInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() mediatailor.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 mediatailor.Options
	if rf, ok := ret.Get(0).(func() mediatailor.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mediatailor.Options)
	}

	return r0
}

// PutChannelPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutChannelPolicy(ctx context.Context, params *mediatailor.PutChannelPolicyInput, optFns ...func(*mediatailor.Options)) (*mediatailor.PutChannelPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutChannelPolicy")
	}

	var r0 *mediatailor.PutChannelPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.PutChannelPolicyInput, ...func(*mediatailor.Options)) (*mediatailor.PutChannelPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.PutChannelPolicyInput, ...func(*mediatailor.Options)) *mediatailor.PutChannelPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.PutChannelPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.PutChannelPolicyInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPlaybackConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPlaybackConfiguration(ctx context.Context, params *mediatailor.PutPlaybackConfigurationInput, optFns ...func(*mediatailor.Options)) (*mediatailor.PutPlaybackConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPlaybackConfiguration")
	}

	var r0 *mediatailor.PutPlaybackConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.PutPlaybackConfigurationInput, ...func(*mediatailor.Options)) (*mediatailor.PutPlaybackConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.PutPlaybackConfigurationInput, ...func(*mediatailor.Options)) *mediatailor.PutPlaybackConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.PutPlaybackConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.PutPlaybackConfigurationInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartChannel(ctx context.Context, params *mediatailor.StartChannelInput, optFns ...func(*mediatailor.Options)) (*mediatailor.StartChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartChannel")
	}

	var r0 *mediatailor.StartChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.StartChannelInput, ...func(*mediatailor.Options)) (*mediatailor.StartChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.StartChannelInput, ...func(*mediatailor.Options)) *mediatailor.StartChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.StartChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.StartChannelInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopChannel(ctx context.Context, params *mediatailor.StopChannelInput, optFns ...func(*mediatailor.Options)) (*mediatailor.StopChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopChannel")
	}

	var r0 *mediatailor.StopChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.StopChannelInput, ...func(*mediatailor.Options)) (*mediatailor.StopChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.StopChannelInput, ...func(*mediatailor.Options)) *mediatailor.StopChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.StopChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.StopChannelInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *mediatailor.TagResourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *mediatailor.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.TagResourceInput, ...func(*mediatailor.Options)) (*mediatailor.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.TagResourceInput, ...func(*mediatailor.Options)) *mediatailor.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.TagResourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *mediatailor.UntagResourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *mediatailor.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UntagResourceInput, ...func(*mediatailor.Options)) (*mediatailor.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UntagResourceInput, ...func(*mediatailor.Options)) *mediatailor.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.UntagResourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannel(ctx context.Context, params *mediatailor.UpdateChannelInput, optFns ...func(*mediatailor.Options)) (*mediatailor.UpdateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 *mediatailor.UpdateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateChannelInput, ...func(*mediatailor.Options)) (*mediatailor.UpdateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateChannelInput, ...func(*mediatailor.Options)) *mediatailor.UpdateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.UpdateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.UpdateChannelInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLiveSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLiveSource(ctx context.Context, params *mediatailor.UpdateLiveSourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.UpdateLiveSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLiveSource")
	}

	var r0 *mediatailor.UpdateLiveSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateLiveSourceInput, ...func(*mediatailor.Options)) (*mediatailor.UpdateLiveSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateLiveSourceInput, ...func(*mediatailor.Options)) *mediatailor.UpdateLiveSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.UpdateLiveSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.UpdateLiveSourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProgram provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProgram(ctx context.Context, params *mediatailor.UpdateProgramInput, optFns ...func(*mediatailor.Options)) (*mediatailor.UpdateProgramOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProgram")
	}

	var r0 *mediatailor.UpdateProgramOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateProgramInput, ...func(*mediatailor.Options)) (*mediatailor.UpdateProgramOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateProgramInput, ...func(*mediatailor.Options)) *mediatailor.UpdateProgramOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.UpdateProgramOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.UpdateProgramInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSourceLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSourceLocation(ctx context.Context, params *mediatailor.UpdateSourceLocationInput, optFns ...func(*mediatailor.Options)) (*mediatailor.UpdateSourceLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSourceLocation")
	}

	var r0 *mediatailor.UpdateSourceLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateSourceLocationInput, ...func(*mediatailor.Options)) (*mediatailor.UpdateSourceLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateSourceLocationInput, ...func(*mediatailor.Options)) *mediatailor.UpdateSourceLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.UpdateSourceLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.UpdateSourceLocationInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVodSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVodSource(ctx context.Context, params *mediatailor.UpdateVodSourceInput, optFns ...func(*mediatailor.Options)) (*mediatailor.UpdateVodSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVodSource")
	}

	var r0 *mediatailor.UpdateVodSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateVodSourceInput, ...func(*mediatailor.Options)) (*mediatailor.UpdateVodSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediatailor.UpdateVodSourceInput, ...func(*mediatailor.Options)) *mediatailor.UpdateVodSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediatailor.UpdateVodSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediatailor.UpdateVodSourceInput, ...func(*mediatailor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
