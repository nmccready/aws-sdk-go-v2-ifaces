// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	datazone "github.com/aws/aws-sdk-go-v2/service/datazone"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptPredictions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptPredictions(ctx context.Context, params *datazone.AcceptPredictionsInput, optFns ...func(*datazone.Options)) (*datazone.AcceptPredictionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptPredictions")
	}

	var r0 *datazone.AcceptPredictionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.AcceptPredictionsInput, ...func(*datazone.Options)) (*datazone.AcceptPredictionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.AcceptPredictionsInput, ...func(*datazone.Options)) *datazone.AcceptPredictionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.AcceptPredictionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.AcceptPredictionsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptSubscriptionRequest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptSubscriptionRequest(ctx context.Context, params *datazone.AcceptSubscriptionRequestInput, optFns ...func(*datazone.Options)) (*datazone.AcceptSubscriptionRequestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptSubscriptionRequest")
	}

	var r0 *datazone.AcceptSubscriptionRequestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.AcceptSubscriptionRequestInput, ...func(*datazone.Options)) (*datazone.AcceptSubscriptionRequestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.AcceptSubscriptionRequestInput, ...func(*datazone.Options)) *datazone.AcceptSubscriptionRequestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.AcceptSubscriptionRequestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.AcceptSubscriptionRequestInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateEnvironmentRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateEnvironmentRole(ctx context.Context, params *datazone.AssociateEnvironmentRoleInput, optFns ...func(*datazone.Options)) (*datazone.AssociateEnvironmentRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateEnvironmentRole")
	}

	var r0 *datazone.AssociateEnvironmentRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.AssociateEnvironmentRoleInput, ...func(*datazone.Options)) (*datazone.AssociateEnvironmentRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.AssociateEnvironmentRoleInput, ...func(*datazone.Options)) *datazone.AssociateEnvironmentRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.AssociateEnvironmentRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.AssociateEnvironmentRoleInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelMetadataGenerationRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelMetadataGenerationRun(ctx context.Context, params *datazone.CancelMetadataGenerationRunInput, optFns ...func(*datazone.Options)) (*datazone.CancelMetadataGenerationRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelMetadataGenerationRun")
	}

	var r0 *datazone.CancelMetadataGenerationRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CancelMetadataGenerationRunInput, ...func(*datazone.Options)) (*datazone.CancelMetadataGenerationRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CancelMetadataGenerationRunInput, ...func(*datazone.Options)) *datazone.CancelMetadataGenerationRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CancelMetadataGenerationRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CancelMetadataGenerationRunInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelSubscription(ctx context.Context, params *datazone.CancelSubscriptionInput, optFns ...func(*datazone.Options)) (*datazone.CancelSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelSubscription")
	}

	var r0 *datazone.CancelSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CancelSubscriptionInput, ...func(*datazone.Options)) (*datazone.CancelSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CancelSubscriptionInput, ...func(*datazone.Options)) *datazone.CancelSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CancelSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CancelSubscriptionInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAsset(ctx context.Context, params *datazone.CreateAssetInput, optFns ...func(*datazone.Options)) (*datazone.CreateAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 *datazone.CreateAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateAssetInput, ...func(*datazone.Options)) (*datazone.CreateAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateAssetInput, ...func(*datazone.Options)) *datazone.CreateAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateAssetInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssetRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAssetRevision(ctx context.Context, params *datazone.CreateAssetRevisionInput, optFns ...func(*datazone.Options)) (*datazone.CreateAssetRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAssetRevision")
	}

	var r0 *datazone.CreateAssetRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateAssetRevisionInput, ...func(*datazone.Options)) (*datazone.CreateAssetRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateAssetRevisionInput, ...func(*datazone.Options)) *datazone.CreateAssetRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateAssetRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateAssetRevisionInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAssetType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAssetType(ctx context.Context, params *datazone.CreateAssetTypeInput, optFns ...func(*datazone.Options)) (*datazone.CreateAssetTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAssetType")
	}

	var r0 *datazone.CreateAssetTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateAssetTypeInput, ...func(*datazone.Options)) (*datazone.CreateAssetTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateAssetTypeInput, ...func(*datazone.Options)) *datazone.CreateAssetTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateAssetTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateAssetTypeInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataSource(ctx context.Context, params *datazone.CreateDataSourceInput, optFns ...func(*datazone.Options)) (*datazone.CreateDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataSource")
	}

	var r0 *datazone.CreateDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateDataSourceInput, ...func(*datazone.Options)) (*datazone.CreateDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateDataSourceInput, ...func(*datazone.Options)) *datazone.CreateDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateDataSourceInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomain(ctx context.Context, params *datazone.CreateDomainInput, optFns ...func(*datazone.Options)) (*datazone.CreateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 *datazone.CreateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateDomainInput, ...func(*datazone.Options)) (*datazone.CreateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateDomainInput, ...func(*datazone.Options)) *datazone.CreateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateDomainInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironment(ctx context.Context, params *datazone.CreateEnvironmentInput, optFns ...func(*datazone.Options)) (*datazone.CreateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironment")
	}

	var r0 *datazone.CreateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateEnvironmentInput, ...func(*datazone.Options)) (*datazone.CreateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateEnvironmentInput, ...func(*datazone.Options)) *datazone.CreateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateEnvironmentInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironmentAction(ctx context.Context, params *datazone.CreateEnvironmentActionInput, optFns ...func(*datazone.Options)) (*datazone.CreateEnvironmentActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentAction")
	}

	var r0 *datazone.CreateEnvironmentActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateEnvironmentActionInput, ...func(*datazone.Options)) (*datazone.CreateEnvironmentActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateEnvironmentActionInput, ...func(*datazone.Options)) *datazone.CreateEnvironmentActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateEnvironmentActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateEnvironmentActionInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironmentProfile(ctx context.Context, params *datazone.CreateEnvironmentProfileInput, optFns ...func(*datazone.Options)) (*datazone.CreateEnvironmentProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentProfile")
	}

	var r0 *datazone.CreateEnvironmentProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateEnvironmentProfileInput, ...func(*datazone.Options)) (*datazone.CreateEnvironmentProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateEnvironmentProfileInput, ...func(*datazone.Options)) *datazone.CreateEnvironmentProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateEnvironmentProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateEnvironmentProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFormType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFormType(ctx context.Context, params *datazone.CreateFormTypeInput, optFns ...func(*datazone.Options)) (*datazone.CreateFormTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFormType")
	}

	var r0 *datazone.CreateFormTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateFormTypeInput, ...func(*datazone.Options)) (*datazone.CreateFormTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateFormTypeInput, ...func(*datazone.Options)) *datazone.CreateFormTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateFormTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateFormTypeInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlossary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGlossary(ctx context.Context, params *datazone.CreateGlossaryInput, optFns ...func(*datazone.Options)) (*datazone.CreateGlossaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlossary")
	}

	var r0 *datazone.CreateGlossaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateGlossaryInput, ...func(*datazone.Options)) (*datazone.CreateGlossaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateGlossaryInput, ...func(*datazone.Options)) *datazone.CreateGlossaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateGlossaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateGlossaryInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlossaryTerm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGlossaryTerm(ctx context.Context, params *datazone.CreateGlossaryTermInput, optFns ...func(*datazone.Options)) (*datazone.CreateGlossaryTermOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlossaryTerm")
	}

	var r0 *datazone.CreateGlossaryTermOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateGlossaryTermInput, ...func(*datazone.Options)) (*datazone.CreateGlossaryTermOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateGlossaryTermInput, ...func(*datazone.Options)) *datazone.CreateGlossaryTermOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateGlossaryTermOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateGlossaryTermInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroupProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroupProfile(ctx context.Context, params *datazone.CreateGroupProfileInput, optFns ...func(*datazone.Options)) (*datazone.CreateGroupProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupProfile")
	}

	var r0 *datazone.CreateGroupProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateGroupProfileInput, ...func(*datazone.Options)) (*datazone.CreateGroupProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateGroupProfileInput, ...func(*datazone.Options)) *datazone.CreateGroupProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateGroupProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateGroupProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateListingChangeSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateListingChangeSet(ctx context.Context, params *datazone.CreateListingChangeSetInput, optFns ...func(*datazone.Options)) (*datazone.CreateListingChangeSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateListingChangeSet")
	}

	var r0 *datazone.CreateListingChangeSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateListingChangeSetInput, ...func(*datazone.Options)) (*datazone.CreateListingChangeSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateListingChangeSetInput, ...func(*datazone.Options)) *datazone.CreateListingChangeSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateListingChangeSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateListingChangeSetInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProject(ctx context.Context, params *datazone.CreateProjectInput, optFns ...func(*datazone.Options)) (*datazone.CreateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *datazone.CreateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateProjectInput, ...func(*datazone.Options)) (*datazone.CreateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateProjectInput, ...func(*datazone.Options)) *datazone.CreateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateProjectInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProjectMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProjectMembership(ctx context.Context, params *datazone.CreateProjectMembershipInput, optFns ...func(*datazone.Options)) (*datazone.CreateProjectMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProjectMembership")
	}

	var r0 *datazone.CreateProjectMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateProjectMembershipInput, ...func(*datazone.Options)) (*datazone.CreateProjectMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateProjectMembershipInput, ...func(*datazone.Options)) *datazone.CreateProjectMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateProjectMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateProjectMembershipInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriptionGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSubscriptionGrant(ctx context.Context, params *datazone.CreateSubscriptionGrantInput, optFns ...func(*datazone.Options)) (*datazone.CreateSubscriptionGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriptionGrant")
	}

	var r0 *datazone.CreateSubscriptionGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateSubscriptionGrantInput, ...func(*datazone.Options)) (*datazone.CreateSubscriptionGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateSubscriptionGrantInput, ...func(*datazone.Options)) *datazone.CreateSubscriptionGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateSubscriptionGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateSubscriptionGrantInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriptionRequest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSubscriptionRequest(ctx context.Context, params *datazone.CreateSubscriptionRequestInput, optFns ...func(*datazone.Options)) (*datazone.CreateSubscriptionRequestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriptionRequest")
	}

	var r0 *datazone.CreateSubscriptionRequestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateSubscriptionRequestInput, ...func(*datazone.Options)) (*datazone.CreateSubscriptionRequestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateSubscriptionRequestInput, ...func(*datazone.Options)) *datazone.CreateSubscriptionRequestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateSubscriptionRequestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateSubscriptionRequestInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriptionTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSubscriptionTarget(ctx context.Context, params *datazone.CreateSubscriptionTargetInput, optFns ...func(*datazone.Options)) (*datazone.CreateSubscriptionTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriptionTarget")
	}

	var r0 *datazone.CreateSubscriptionTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateSubscriptionTargetInput, ...func(*datazone.Options)) (*datazone.CreateSubscriptionTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateSubscriptionTargetInput, ...func(*datazone.Options)) *datazone.CreateSubscriptionTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateSubscriptionTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateSubscriptionTargetInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserProfile(ctx context.Context, params *datazone.CreateUserProfileInput, optFns ...func(*datazone.Options)) (*datazone.CreateUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserProfile")
	}

	var r0 *datazone.CreateUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateUserProfileInput, ...func(*datazone.Options)) (*datazone.CreateUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.CreateUserProfileInput, ...func(*datazone.Options)) *datazone.CreateUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.CreateUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.CreateUserProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAsset(ctx context.Context, params *datazone.DeleteAssetInput, optFns ...func(*datazone.Options)) (*datazone.DeleteAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsset")
	}

	var r0 *datazone.DeleteAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteAssetInput, ...func(*datazone.Options)) (*datazone.DeleteAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteAssetInput, ...func(*datazone.Options)) *datazone.DeleteAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteAssetInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssetType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAssetType(ctx context.Context, params *datazone.DeleteAssetTypeInput, optFns ...func(*datazone.Options)) (*datazone.DeleteAssetTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAssetType")
	}

	var r0 *datazone.DeleteAssetTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteAssetTypeInput, ...func(*datazone.Options)) (*datazone.DeleteAssetTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteAssetTypeInput, ...func(*datazone.Options)) *datazone.DeleteAssetTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteAssetTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteAssetTypeInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataSource(ctx context.Context, params *datazone.DeleteDataSourceInput, optFns ...func(*datazone.Options)) (*datazone.DeleteDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataSource")
	}

	var r0 *datazone.DeleteDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteDataSourceInput, ...func(*datazone.Options)) (*datazone.DeleteDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteDataSourceInput, ...func(*datazone.Options)) *datazone.DeleteDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteDataSourceInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomain(ctx context.Context, params *datazone.DeleteDomainInput, optFns ...func(*datazone.Options)) (*datazone.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomain")
	}

	var r0 *datazone.DeleteDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteDomainInput, ...func(*datazone.Options)) (*datazone.DeleteDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteDomainInput, ...func(*datazone.Options)) *datazone.DeleteDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteDomainInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironment(ctx context.Context, params *datazone.DeleteEnvironmentInput, optFns ...func(*datazone.Options)) (*datazone.DeleteEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 *datazone.DeleteEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteEnvironmentInput, ...func(*datazone.Options)) (*datazone.DeleteEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteEnvironmentInput, ...func(*datazone.Options)) *datazone.DeleteEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteEnvironmentInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentAction(ctx context.Context, params *datazone.DeleteEnvironmentActionInput, optFns ...func(*datazone.Options)) (*datazone.DeleteEnvironmentActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentAction")
	}

	var r0 *datazone.DeleteEnvironmentActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteEnvironmentActionInput, ...func(*datazone.Options)) (*datazone.DeleteEnvironmentActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteEnvironmentActionInput, ...func(*datazone.Options)) *datazone.DeleteEnvironmentActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteEnvironmentActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteEnvironmentActionInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentBlueprintConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentBlueprintConfiguration(ctx context.Context, params *datazone.DeleteEnvironmentBlueprintConfigurationInput, optFns ...func(*datazone.Options)) (*datazone.DeleteEnvironmentBlueprintConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentBlueprintConfiguration")
	}

	var r0 *datazone.DeleteEnvironmentBlueprintConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) (*datazone.DeleteEnvironmentBlueprintConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) *datazone.DeleteEnvironmentBlueprintConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteEnvironmentBlueprintConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentProfile(ctx context.Context, params *datazone.DeleteEnvironmentProfileInput, optFns ...func(*datazone.Options)) (*datazone.DeleteEnvironmentProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentProfile")
	}

	var r0 *datazone.DeleteEnvironmentProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteEnvironmentProfileInput, ...func(*datazone.Options)) (*datazone.DeleteEnvironmentProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteEnvironmentProfileInput, ...func(*datazone.Options)) *datazone.DeleteEnvironmentProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteEnvironmentProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteEnvironmentProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFormType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFormType(ctx context.Context, params *datazone.DeleteFormTypeInput, optFns ...func(*datazone.Options)) (*datazone.DeleteFormTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFormType")
	}

	var r0 *datazone.DeleteFormTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteFormTypeInput, ...func(*datazone.Options)) (*datazone.DeleteFormTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteFormTypeInput, ...func(*datazone.Options)) *datazone.DeleteFormTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteFormTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteFormTypeInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGlossary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGlossary(ctx context.Context, params *datazone.DeleteGlossaryInput, optFns ...func(*datazone.Options)) (*datazone.DeleteGlossaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlossary")
	}

	var r0 *datazone.DeleteGlossaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteGlossaryInput, ...func(*datazone.Options)) (*datazone.DeleteGlossaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteGlossaryInput, ...func(*datazone.Options)) *datazone.DeleteGlossaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteGlossaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteGlossaryInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGlossaryTerm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGlossaryTerm(ctx context.Context, params *datazone.DeleteGlossaryTermInput, optFns ...func(*datazone.Options)) (*datazone.DeleteGlossaryTermOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlossaryTerm")
	}

	var r0 *datazone.DeleteGlossaryTermOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteGlossaryTermInput, ...func(*datazone.Options)) (*datazone.DeleteGlossaryTermOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteGlossaryTermInput, ...func(*datazone.Options)) *datazone.DeleteGlossaryTermOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteGlossaryTermOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteGlossaryTermInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteListing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteListing(ctx context.Context, params *datazone.DeleteListingInput, optFns ...func(*datazone.Options)) (*datazone.DeleteListingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListing")
	}

	var r0 *datazone.DeleteListingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteListingInput, ...func(*datazone.Options)) (*datazone.DeleteListingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteListingInput, ...func(*datazone.Options)) *datazone.DeleteListingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteListingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteListingInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProject(ctx context.Context, params *datazone.DeleteProjectInput, optFns ...func(*datazone.Options)) (*datazone.DeleteProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 *datazone.DeleteProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteProjectInput, ...func(*datazone.Options)) (*datazone.DeleteProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteProjectInput, ...func(*datazone.Options)) *datazone.DeleteProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteProjectInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProjectMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProjectMembership(ctx context.Context, params *datazone.DeleteProjectMembershipInput, optFns ...func(*datazone.Options)) (*datazone.DeleteProjectMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProjectMembership")
	}

	var r0 *datazone.DeleteProjectMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteProjectMembershipInput, ...func(*datazone.Options)) (*datazone.DeleteProjectMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteProjectMembershipInput, ...func(*datazone.Options)) *datazone.DeleteProjectMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteProjectMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteProjectMembershipInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriptionGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSubscriptionGrant(ctx context.Context, params *datazone.DeleteSubscriptionGrantInput, optFns ...func(*datazone.Options)) (*datazone.DeleteSubscriptionGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriptionGrant")
	}

	var r0 *datazone.DeleteSubscriptionGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteSubscriptionGrantInput, ...func(*datazone.Options)) (*datazone.DeleteSubscriptionGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteSubscriptionGrantInput, ...func(*datazone.Options)) *datazone.DeleteSubscriptionGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteSubscriptionGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteSubscriptionGrantInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriptionRequest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSubscriptionRequest(ctx context.Context, params *datazone.DeleteSubscriptionRequestInput, optFns ...func(*datazone.Options)) (*datazone.DeleteSubscriptionRequestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriptionRequest")
	}

	var r0 *datazone.DeleteSubscriptionRequestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteSubscriptionRequestInput, ...func(*datazone.Options)) (*datazone.DeleteSubscriptionRequestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteSubscriptionRequestInput, ...func(*datazone.Options)) *datazone.DeleteSubscriptionRequestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteSubscriptionRequestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteSubscriptionRequestInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriptionTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSubscriptionTarget(ctx context.Context, params *datazone.DeleteSubscriptionTargetInput, optFns ...func(*datazone.Options)) (*datazone.DeleteSubscriptionTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriptionTarget")
	}

	var r0 *datazone.DeleteSubscriptionTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteSubscriptionTargetInput, ...func(*datazone.Options)) (*datazone.DeleteSubscriptionTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteSubscriptionTargetInput, ...func(*datazone.Options)) *datazone.DeleteSubscriptionTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteSubscriptionTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteSubscriptionTargetInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTimeSeriesDataPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTimeSeriesDataPoints(ctx context.Context, params *datazone.DeleteTimeSeriesDataPointsInput, optFns ...func(*datazone.Options)) (*datazone.DeleteTimeSeriesDataPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTimeSeriesDataPoints")
	}

	var r0 *datazone.DeleteTimeSeriesDataPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteTimeSeriesDataPointsInput, ...func(*datazone.Options)) (*datazone.DeleteTimeSeriesDataPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DeleteTimeSeriesDataPointsInput, ...func(*datazone.Options)) *datazone.DeleteTimeSeriesDataPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DeleteTimeSeriesDataPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DeleteTimeSeriesDataPointsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateEnvironmentRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateEnvironmentRole(ctx context.Context, params *datazone.DisassociateEnvironmentRoleInput, optFns ...func(*datazone.Options)) (*datazone.DisassociateEnvironmentRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateEnvironmentRole")
	}

	var r0 *datazone.DisassociateEnvironmentRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DisassociateEnvironmentRoleInput, ...func(*datazone.Options)) (*datazone.DisassociateEnvironmentRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.DisassociateEnvironmentRoleInput, ...func(*datazone.Options)) *datazone.DisassociateEnvironmentRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.DisassociateEnvironmentRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.DisassociateEnvironmentRoleInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAsset(ctx context.Context, params *datazone.GetAssetInput, optFns ...func(*datazone.Options)) (*datazone.GetAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 *datazone.GetAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetAssetInput, ...func(*datazone.Options)) (*datazone.GetAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetAssetInput, ...func(*datazone.Options)) *datazone.GetAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetAssetInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssetType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAssetType(ctx context.Context, params *datazone.GetAssetTypeInput, optFns ...func(*datazone.Options)) (*datazone.GetAssetTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAssetType")
	}

	var r0 *datazone.GetAssetTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetAssetTypeInput, ...func(*datazone.Options)) (*datazone.GetAssetTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetAssetTypeInput, ...func(*datazone.Options)) *datazone.GetAssetTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetAssetTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetAssetTypeInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataSource(ctx context.Context, params *datazone.GetDataSourceInput, optFns ...func(*datazone.Options)) (*datazone.GetDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataSource")
	}

	var r0 *datazone.GetDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetDataSourceInput, ...func(*datazone.Options)) (*datazone.GetDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetDataSourceInput, ...func(*datazone.Options)) *datazone.GetDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetDataSourceInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataSourceRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataSourceRun(ctx context.Context, params *datazone.GetDataSourceRunInput, optFns ...func(*datazone.Options)) (*datazone.GetDataSourceRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataSourceRun")
	}

	var r0 *datazone.GetDataSourceRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetDataSourceRunInput, ...func(*datazone.Options)) (*datazone.GetDataSourceRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetDataSourceRunInput, ...func(*datazone.Options)) *datazone.GetDataSourceRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetDataSourceRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetDataSourceRunInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomain(ctx context.Context, params *datazone.GetDomainInput, optFns ...func(*datazone.Options)) (*datazone.GetDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomain")
	}

	var r0 *datazone.GetDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetDomainInput, ...func(*datazone.Options)) (*datazone.GetDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetDomainInput, ...func(*datazone.Options)) *datazone.GetDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetDomainInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironment(ctx context.Context, params *datazone.GetEnvironmentInput, optFns ...func(*datazone.Options)) (*datazone.GetEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironment")
	}

	var r0 *datazone.GetEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentInput, ...func(*datazone.Options)) (*datazone.GetEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentInput, ...func(*datazone.Options)) *datazone.GetEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetEnvironmentInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironmentAction(ctx context.Context, params *datazone.GetEnvironmentActionInput, optFns ...func(*datazone.Options)) (*datazone.GetEnvironmentActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentAction")
	}

	var r0 *datazone.GetEnvironmentActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentActionInput, ...func(*datazone.Options)) (*datazone.GetEnvironmentActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentActionInput, ...func(*datazone.Options)) *datazone.GetEnvironmentActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetEnvironmentActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetEnvironmentActionInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentBlueprint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironmentBlueprint(ctx context.Context, params *datazone.GetEnvironmentBlueprintInput, optFns ...func(*datazone.Options)) (*datazone.GetEnvironmentBlueprintOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentBlueprint")
	}

	var r0 *datazone.GetEnvironmentBlueprintOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentBlueprintInput, ...func(*datazone.Options)) (*datazone.GetEnvironmentBlueprintOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentBlueprintInput, ...func(*datazone.Options)) *datazone.GetEnvironmentBlueprintOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetEnvironmentBlueprintOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetEnvironmentBlueprintInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentBlueprintConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironmentBlueprintConfiguration(ctx context.Context, params *datazone.GetEnvironmentBlueprintConfigurationInput, optFns ...func(*datazone.Options)) (*datazone.GetEnvironmentBlueprintConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentBlueprintConfiguration")
	}

	var r0 *datazone.GetEnvironmentBlueprintConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) (*datazone.GetEnvironmentBlueprintConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) *datazone.GetEnvironmentBlueprintConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetEnvironmentBlueprintConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironmentProfile(ctx context.Context, params *datazone.GetEnvironmentProfileInput, optFns ...func(*datazone.Options)) (*datazone.GetEnvironmentProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentProfile")
	}

	var r0 *datazone.GetEnvironmentProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentProfileInput, ...func(*datazone.Options)) (*datazone.GetEnvironmentProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetEnvironmentProfileInput, ...func(*datazone.Options)) *datazone.GetEnvironmentProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetEnvironmentProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetEnvironmentProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFormType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFormType(ctx context.Context, params *datazone.GetFormTypeInput, optFns ...func(*datazone.Options)) (*datazone.GetFormTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFormType")
	}

	var r0 *datazone.GetFormTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetFormTypeInput, ...func(*datazone.Options)) (*datazone.GetFormTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetFormTypeInput, ...func(*datazone.Options)) *datazone.GetFormTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetFormTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetFormTypeInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlossary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGlossary(ctx context.Context, params *datazone.GetGlossaryInput, optFns ...func(*datazone.Options)) (*datazone.GetGlossaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlossary")
	}

	var r0 *datazone.GetGlossaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetGlossaryInput, ...func(*datazone.Options)) (*datazone.GetGlossaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetGlossaryInput, ...func(*datazone.Options)) *datazone.GetGlossaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetGlossaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetGlossaryInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGlossaryTerm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGlossaryTerm(ctx context.Context, params *datazone.GetGlossaryTermInput, optFns ...func(*datazone.Options)) (*datazone.GetGlossaryTermOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGlossaryTerm")
	}

	var r0 *datazone.GetGlossaryTermOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetGlossaryTermInput, ...func(*datazone.Options)) (*datazone.GetGlossaryTermOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetGlossaryTermInput, ...func(*datazone.Options)) *datazone.GetGlossaryTermOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetGlossaryTermOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetGlossaryTermInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGroupProfile(ctx context.Context, params *datazone.GetGroupProfileInput, optFns ...func(*datazone.Options)) (*datazone.GetGroupProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupProfile")
	}

	var r0 *datazone.GetGroupProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetGroupProfileInput, ...func(*datazone.Options)) (*datazone.GetGroupProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetGroupProfileInput, ...func(*datazone.Options)) *datazone.GetGroupProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetGroupProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetGroupProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIamPortalLoginUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIamPortalLoginUrl(ctx context.Context, params *datazone.GetIamPortalLoginUrlInput, optFns ...func(*datazone.Options)) (*datazone.GetIamPortalLoginUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIamPortalLoginUrl")
	}

	var r0 *datazone.GetIamPortalLoginUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetIamPortalLoginUrlInput, ...func(*datazone.Options)) (*datazone.GetIamPortalLoginUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetIamPortalLoginUrlInput, ...func(*datazone.Options)) *datazone.GetIamPortalLoginUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetIamPortalLoginUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetIamPortalLoginUrlInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLineageNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLineageNode(ctx context.Context, params *datazone.GetLineageNodeInput, optFns ...func(*datazone.Options)) (*datazone.GetLineageNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLineageNode")
	}

	var r0 *datazone.GetLineageNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetLineageNodeInput, ...func(*datazone.Options)) (*datazone.GetLineageNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetLineageNodeInput, ...func(*datazone.Options)) *datazone.GetLineageNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetLineageNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetLineageNodeInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetListing(ctx context.Context, params *datazone.GetListingInput, optFns ...func(*datazone.Options)) (*datazone.GetListingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetListing")
	}

	var r0 *datazone.GetListingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetListingInput, ...func(*datazone.Options)) (*datazone.GetListingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetListingInput, ...func(*datazone.Options)) *datazone.GetListingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetListingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetListingInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetadataGenerationRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMetadataGenerationRun(ctx context.Context, params *datazone.GetMetadataGenerationRunInput, optFns ...func(*datazone.Options)) (*datazone.GetMetadataGenerationRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetadataGenerationRun")
	}

	var r0 *datazone.GetMetadataGenerationRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetMetadataGenerationRunInput, ...func(*datazone.Options)) (*datazone.GetMetadataGenerationRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetMetadataGenerationRunInput, ...func(*datazone.Options)) *datazone.GetMetadataGenerationRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetMetadataGenerationRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetMetadataGenerationRunInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProject(ctx context.Context, params *datazone.GetProjectInput, optFns ...func(*datazone.Options)) (*datazone.GetProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *datazone.GetProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetProjectInput, ...func(*datazone.Options)) (*datazone.GetProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetProjectInput, ...func(*datazone.Options)) *datazone.GetProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetProjectInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubscription(ctx context.Context, params *datazone.GetSubscriptionInput, optFns ...func(*datazone.Options)) (*datazone.GetSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscription")
	}

	var r0 *datazone.GetSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetSubscriptionInput, ...func(*datazone.Options)) (*datazone.GetSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetSubscriptionInput, ...func(*datazone.Options)) *datazone.GetSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetSubscriptionInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubscriptionGrant(ctx context.Context, params *datazone.GetSubscriptionGrantInput, optFns ...func(*datazone.Options)) (*datazone.GetSubscriptionGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionGrant")
	}

	var r0 *datazone.GetSubscriptionGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetSubscriptionGrantInput, ...func(*datazone.Options)) (*datazone.GetSubscriptionGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetSubscriptionGrantInput, ...func(*datazone.Options)) *datazone.GetSubscriptionGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetSubscriptionGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetSubscriptionGrantInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionRequestDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubscriptionRequestDetails(ctx context.Context, params *datazone.GetSubscriptionRequestDetailsInput, optFns ...func(*datazone.Options)) (*datazone.GetSubscriptionRequestDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionRequestDetails")
	}

	var r0 *datazone.GetSubscriptionRequestDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetSubscriptionRequestDetailsInput, ...func(*datazone.Options)) (*datazone.GetSubscriptionRequestDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetSubscriptionRequestDetailsInput, ...func(*datazone.Options)) *datazone.GetSubscriptionRequestDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetSubscriptionRequestDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetSubscriptionRequestDetailsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubscriptionTarget(ctx context.Context, params *datazone.GetSubscriptionTargetInput, optFns ...func(*datazone.Options)) (*datazone.GetSubscriptionTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionTarget")
	}

	var r0 *datazone.GetSubscriptionTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetSubscriptionTargetInput, ...func(*datazone.Options)) (*datazone.GetSubscriptionTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetSubscriptionTargetInput, ...func(*datazone.Options)) *datazone.GetSubscriptionTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetSubscriptionTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetSubscriptionTargetInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimeSeriesDataPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTimeSeriesDataPoint(ctx context.Context, params *datazone.GetTimeSeriesDataPointInput, optFns ...func(*datazone.Options)) (*datazone.GetTimeSeriesDataPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTimeSeriesDataPoint")
	}

	var r0 *datazone.GetTimeSeriesDataPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetTimeSeriesDataPointInput, ...func(*datazone.Options)) (*datazone.GetTimeSeriesDataPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetTimeSeriesDataPointInput, ...func(*datazone.Options)) *datazone.GetTimeSeriesDataPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetTimeSeriesDataPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetTimeSeriesDataPointInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUserProfile(ctx context.Context, params *datazone.GetUserProfileInput, optFns ...func(*datazone.Options)) (*datazone.GetUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserProfile")
	}

	var r0 *datazone.GetUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetUserProfileInput, ...func(*datazone.Options)) (*datazone.GetUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.GetUserProfileInput, ...func(*datazone.Options)) *datazone.GetUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.GetUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.GetUserProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssetRevisions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssetRevisions(ctx context.Context, params *datazone.ListAssetRevisionsInput, optFns ...func(*datazone.Options)) (*datazone.ListAssetRevisionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssetRevisions")
	}

	var r0 *datazone.ListAssetRevisionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListAssetRevisionsInput, ...func(*datazone.Options)) (*datazone.ListAssetRevisionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListAssetRevisionsInput, ...func(*datazone.Options)) *datazone.ListAssetRevisionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListAssetRevisionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListAssetRevisionsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSourceRunActivities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSourceRunActivities(ctx context.Context, params *datazone.ListDataSourceRunActivitiesInput, optFns ...func(*datazone.Options)) (*datazone.ListDataSourceRunActivitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSourceRunActivities")
	}

	var r0 *datazone.ListDataSourceRunActivitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListDataSourceRunActivitiesInput, ...func(*datazone.Options)) (*datazone.ListDataSourceRunActivitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListDataSourceRunActivitiesInput, ...func(*datazone.Options)) *datazone.ListDataSourceRunActivitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListDataSourceRunActivitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListDataSourceRunActivitiesInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSourceRuns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSourceRuns(ctx context.Context, params *datazone.ListDataSourceRunsInput, optFns ...func(*datazone.Options)) (*datazone.ListDataSourceRunsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSourceRuns")
	}

	var r0 *datazone.ListDataSourceRunsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListDataSourceRunsInput, ...func(*datazone.Options)) (*datazone.ListDataSourceRunsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListDataSourceRunsInput, ...func(*datazone.Options)) *datazone.ListDataSourceRunsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListDataSourceRunsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListDataSourceRunsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSources(ctx context.Context, params *datazone.ListDataSourcesInput, optFns ...func(*datazone.Options)) (*datazone.ListDataSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSources")
	}

	var r0 *datazone.ListDataSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListDataSourcesInput, ...func(*datazone.Options)) (*datazone.ListDataSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListDataSourcesInput, ...func(*datazone.Options)) *datazone.ListDataSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListDataSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListDataSourcesInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomains(ctx context.Context, params *datazone.ListDomainsInput, optFns ...func(*datazone.Options)) (*datazone.ListDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 *datazone.ListDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListDomainsInput, ...func(*datazone.Options)) (*datazone.ListDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListDomainsInput, ...func(*datazone.Options)) *datazone.ListDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListDomainsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentActions(ctx context.Context, params *datazone.ListEnvironmentActionsInput, optFns ...func(*datazone.Options)) (*datazone.ListEnvironmentActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentActions")
	}

	var r0 *datazone.ListEnvironmentActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentActionsInput, ...func(*datazone.Options)) (*datazone.ListEnvironmentActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentActionsInput, ...func(*datazone.Options)) *datazone.ListEnvironmentActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListEnvironmentActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListEnvironmentActionsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentBlueprintConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentBlueprintConfigurations(ctx context.Context, params *datazone.ListEnvironmentBlueprintConfigurationsInput, optFns ...func(*datazone.Options)) (*datazone.ListEnvironmentBlueprintConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentBlueprintConfigurations")
	}

	var r0 *datazone.ListEnvironmentBlueprintConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentBlueprintConfigurationsInput, ...func(*datazone.Options)) (*datazone.ListEnvironmentBlueprintConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentBlueprintConfigurationsInput, ...func(*datazone.Options)) *datazone.ListEnvironmentBlueprintConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListEnvironmentBlueprintConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListEnvironmentBlueprintConfigurationsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentBlueprints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentBlueprints(ctx context.Context, params *datazone.ListEnvironmentBlueprintsInput, optFns ...func(*datazone.Options)) (*datazone.ListEnvironmentBlueprintsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentBlueprints")
	}

	var r0 *datazone.ListEnvironmentBlueprintsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentBlueprintsInput, ...func(*datazone.Options)) (*datazone.ListEnvironmentBlueprintsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentBlueprintsInput, ...func(*datazone.Options)) *datazone.ListEnvironmentBlueprintsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListEnvironmentBlueprintsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListEnvironmentBlueprintsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentProfiles(ctx context.Context, params *datazone.ListEnvironmentProfilesInput, optFns ...func(*datazone.Options)) (*datazone.ListEnvironmentProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentProfiles")
	}

	var r0 *datazone.ListEnvironmentProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentProfilesInput, ...func(*datazone.Options)) (*datazone.ListEnvironmentProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentProfilesInput, ...func(*datazone.Options)) *datazone.ListEnvironmentProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListEnvironmentProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListEnvironmentProfilesInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironments(ctx context.Context, params *datazone.ListEnvironmentsInput, optFns ...func(*datazone.Options)) (*datazone.ListEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironments")
	}

	var r0 *datazone.ListEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentsInput, ...func(*datazone.Options)) (*datazone.ListEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListEnvironmentsInput, ...func(*datazone.Options)) *datazone.ListEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListEnvironmentsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLineageNodeHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLineageNodeHistory(ctx context.Context, params *datazone.ListLineageNodeHistoryInput, optFns ...func(*datazone.Options)) (*datazone.ListLineageNodeHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLineageNodeHistory")
	}

	var r0 *datazone.ListLineageNodeHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListLineageNodeHistoryInput, ...func(*datazone.Options)) (*datazone.ListLineageNodeHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListLineageNodeHistoryInput, ...func(*datazone.Options)) *datazone.ListLineageNodeHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListLineageNodeHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListLineageNodeHistoryInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetadataGenerationRuns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMetadataGenerationRuns(ctx context.Context, params *datazone.ListMetadataGenerationRunsInput, optFns ...func(*datazone.Options)) (*datazone.ListMetadataGenerationRunsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMetadataGenerationRuns")
	}

	var r0 *datazone.ListMetadataGenerationRunsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListMetadataGenerationRunsInput, ...func(*datazone.Options)) (*datazone.ListMetadataGenerationRunsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListMetadataGenerationRunsInput, ...func(*datazone.Options)) *datazone.ListMetadataGenerationRunsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListMetadataGenerationRunsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListMetadataGenerationRunsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNotifications(ctx context.Context, params *datazone.ListNotificationsInput, optFns ...func(*datazone.Options)) (*datazone.ListNotificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNotifications")
	}

	var r0 *datazone.ListNotificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListNotificationsInput, ...func(*datazone.Options)) (*datazone.ListNotificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListNotificationsInput, ...func(*datazone.Options)) *datazone.ListNotificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListNotificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListNotificationsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjectMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProjectMemberships(ctx context.Context, params *datazone.ListProjectMembershipsInput, optFns ...func(*datazone.Options)) (*datazone.ListProjectMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjectMemberships")
	}

	var r0 *datazone.ListProjectMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListProjectMembershipsInput, ...func(*datazone.Options)) (*datazone.ListProjectMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListProjectMembershipsInput, ...func(*datazone.Options)) *datazone.ListProjectMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListProjectMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListProjectMembershipsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProjects(ctx context.Context, params *datazone.ListProjectsInput, optFns ...func(*datazone.Options)) (*datazone.ListProjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *datazone.ListProjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListProjectsInput, ...func(*datazone.Options)) (*datazone.ListProjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListProjectsInput, ...func(*datazone.Options)) *datazone.ListProjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListProjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListProjectsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptionGrants provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscriptionGrants(ctx context.Context, params *datazone.ListSubscriptionGrantsInput, optFns ...func(*datazone.Options)) (*datazone.ListSubscriptionGrantsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionGrants")
	}

	var r0 *datazone.ListSubscriptionGrantsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListSubscriptionGrantsInput, ...func(*datazone.Options)) (*datazone.ListSubscriptionGrantsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListSubscriptionGrantsInput, ...func(*datazone.Options)) *datazone.ListSubscriptionGrantsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListSubscriptionGrantsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListSubscriptionGrantsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptionRequests provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscriptionRequests(ctx context.Context, params *datazone.ListSubscriptionRequestsInput, optFns ...func(*datazone.Options)) (*datazone.ListSubscriptionRequestsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionRequests")
	}

	var r0 *datazone.ListSubscriptionRequestsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListSubscriptionRequestsInput, ...func(*datazone.Options)) (*datazone.ListSubscriptionRequestsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListSubscriptionRequestsInput, ...func(*datazone.Options)) *datazone.ListSubscriptionRequestsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListSubscriptionRequestsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListSubscriptionRequestsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptionTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscriptionTargets(ctx context.Context, params *datazone.ListSubscriptionTargetsInput, optFns ...func(*datazone.Options)) (*datazone.ListSubscriptionTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionTargets")
	}

	var r0 *datazone.ListSubscriptionTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListSubscriptionTargetsInput, ...func(*datazone.Options)) (*datazone.ListSubscriptionTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListSubscriptionTargetsInput, ...func(*datazone.Options)) *datazone.ListSubscriptionTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListSubscriptionTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListSubscriptionTargetsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscriptions(ctx context.Context, params *datazone.ListSubscriptionsInput, optFns ...func(*datazone.Options)) (*datazone.ListSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptions")
	}

	var r0 *datazone.ListSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListSubscriptionsInput, ...func(*datazone.Options)) (*datazone.ListSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListSubscriptionsInput, ...func(*datazone.Options)) *datazone.ListSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListSubscriptionsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *datazone.ListTagsForResourceInput, optFns ...func(*datazone.Options)) (*datazone.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *datazone.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListTagsForResourceInput, ...func(*datazone.Options)) (*datazone.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListTagsForResourceInput, ...func(*datazone.Options)) *datazone.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListTagsForResourceInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTimeSeriesDataPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTimeSeriesDataPoints(ctx context.Context, params *datazone.ListTimeSeriesDataPointsInput, optFns ...func(*datazone.Options)) (*datazone.ListTimeSeriesDataPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTimeSeriesDataPoints")
	}

	var r0 *datazone.ListTimeSeriesDataPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListTimeSeriesDataPointsInput, ...func(*datazone.Options)) (*datazone.ListTimeSeriesDataPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.ListTimeSeriesDataPointsInput, ...func(*datazone.Options)) *datazone.ListTimeSeriesDataPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.ListTimeSeriesDataPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.ListTimeSeriesDataPointsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() datazone.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 datazone.Options
	if rf, ok := ret.Get(0).(func() datazone.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(datazone.Options)
	}

	return r0
}

// PostLineageEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PostLineageEvent(ctx context.Context, params *datazone.PostLineageEventInput, optFns ...func(*datazone.Options)) (*datazone.PostLineageEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostLineageEvent")
	}

	var r0 *datazone.PostLineageEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.PostLineageEventInput, ...func(*datazone.Options)) (*datazone.PostLineageEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.PostLineageEventInput, ...func(*datazone.Options)) *datazone.PostLineageEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.PostLineageEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.PostLineageEventInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostTimeSeriesDataPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PostTimeSeriesDataPoints(ctx context.Context, params *datazone.PostTimeSeriesDataPointsInput, optFns ...func(*datazone.Options)) (*datazone.PostTimeSeriesDataPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostTimeSeriesDataPoints")
	}

	var r0 *datazone.PostTimeSeriesDataPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.PostTimeSeriesDataPointsInput, ...func(*datazone.Options)) (*datazone.PostTimeSeriesDataPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.PostTimeSeriesDataPointsInput, ...func(*datazone.Options)) *datazone.PostTimeSeriesDataPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.PostTimeSeriesDataPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.PostTimeSeriesDataPointsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEnvironmentBlueprintConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEnvironmentBlueprintConfiguration(ctx context.Context, params *datazone.PutEnvironmentBlueprintConfigurationInput, optFns ...func(*datazone.Options)) (*datazone.PutEnvironmentBlueprintConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEnvironmentBlueprintConfiguration")
	}

	var r0 *datazone.PutEnvironmentBlueprintConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.PutEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) (*datazone.PutEnvironmentBlueprintConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.PutEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) *datazone.PutEnvironmentBlueprintConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.PutEnvironmentBlueprintConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.PutEnvironmentBlueprintConfigurationInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectPredictions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectPredictions(ctx context.Context, params *datazone.RejectPredictionsInput, optFns ...func(*datazone.Options)) (*datazone.RejectPredictionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectPredictions")
	}

	var r0 *datazone.RejectPredictionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.RejectPredictionsInput, ...func(*datazone.Options)) (*datazone.RejectPredictionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.RejectPredictionsInput, ...func(*datazone.Options)) *datazone.RejectPredictionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.RejectPredictionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.RejectPredictionsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectSubscriptionRequest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectSubscriptionRequest(ctx context.Context, params *datazone.RejectSubscriptionRequestInput, optFns ...func(*datazone.Options)) (*datazone.RejectSubscriptionRequestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectSubscriptionRequest")
	}

	var r0 *datazone.RejectSubscriptionRequestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.RejectSubscriptionRequestInput, ...func(*datazone.Options)) (*datazone.RejectSubscriptionRequestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.RejectSubscriptionRequestInput, ...func(*datazone.Options)) *datazone.RejectSubscriptionRequestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.RejectSubscriptionRequestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.RejectSubscriptionRequestInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RevokeSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RevokeSubscription(ctx context.Context, params *datazone.RevokeSubscriptionInput, optFns ...func(*datazone.Options)) (*datazone.RevokeSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeSubscription")
	}

	var r0 *datazone.RevokeSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.RevokeSubscriptionInput, ...func(*datazone.Options)) (*datazone.RevokeSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.RevokeSubscriptionInput, ...func(*datazone.Options)) *datazone.RevokeSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.RevokeSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.RevokeSubscriptionInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Search(ctx context.Context, params *datazone.SearchInput, optFns ...func(*datazone.Options)) (*datazone.SearchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *datazone.SearchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchInput, ...func(*datazone.Options)) (*datazone.SearchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchInput, ...func(*datazone.Options)) *datazone.SearchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.SearchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.SearchInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchGroupProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchGroupProfiles(ctx context.Context, params *datazone.SearchGroupProfilesInput, optFns ...func(*datazone.Options)) (*datazone.SearchGroupProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchGroupProfiles")
	}

	var r0 *datazone.SearchGroupProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchGroupProfilesInput, ...func(*datazone.Options)) (*datazone.SearchGroupProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchGroupProfilesInput, ...func(*datazone.Options)) *datazone.SearchGroupProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.SearchGroupProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.SearchGroupProfilesInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchListings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchListings(ctx context.Context, params *datazone.SearchListingsInput, optFns ...func(*datazone.Options)) (*datazone.SearchListingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchListings")
	}

	var r0 *datazone.SearchListingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchListingsInput, ...func(*datazone.Options)) (*datazone.SearchListingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchListingsInput, ...func(*datazone.Options)) *datazone.SearchListingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.SearchListingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.SearchListingsInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchTypes(ctx context.Context, params *datazone.SearchTypesInput, optFns ...func(*datazone.Options)) (*datazone.SearchTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchTypes")
	}

	var r0 *datazone.SearchTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchTypesInput, ...func(*datazone.Options)) (*datazone.SearchTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchTypesInput, ...func(*datazone.Options)) *datazone.SearchTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.SearchTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.SearchTypesInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUserProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchUserProfiles(ctx context.Context, params *datazone.SearchUserProfilesInput, optFns ...func(*datazone.Options)) (*datazone.SearchUserProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchUserProfiles")
	}

	var r0 *datazone.SearchUserProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchUserProfilesInput, ...func(*datazone.Options)) (*datazone.SearchUserProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.SearchUserProfilesInput, ...func(*datazone.Options)) *datazone.SearchUserProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.SearchUserProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.SearchUserProfilesInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDataSourceRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDataSourceRun(ctx context.Context, params *datazone.StartDataSourceRunInput, optFns ...func(*datazone.Options)) (*datazone.StartDataSourceRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDataSourceRun")
	}

	var r0 *datazone.StartDataSourceRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.StartDataSourceRunInput, ...func(*datazone.Options)) (*datazone.StartDataSourceRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.StartDataSourceRunInput, ...func(*datazone.Options)) *datazone.StartDataSourceRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.StartDataSourceRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.StartDataSourceRunInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMetadataGenerationRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMetadataGenerationRun(ctx context.Context, params *datazone.StartMetadataGenerationRunInput, optFns ...func(*datazone.Options)) (*datazone.StartMetadataGenerationRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMetadataGenerationRun")
	}

	var r0 *datazone.StartMetadataGenerationRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.StartMetadataGenerationRunInput, ...func(*datazone.Options)) (*datazone.StartMetadataGenerationRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.StartMetadataGenerationRunInput, ...func(*datazone.Options)) *datazone.StartMetadataGenerationRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.StartMetadataGenerationRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.StartMetadataGenerationRunInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *datazone.TagResourceInput, optFns ...func(*datazone.Options)) (*datazone.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *datazone.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.TagResourceInput, ...func(*datazone.Options)) (*datazone.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.TagResourceInput, ...func(*datazone.Options)) *datazone.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.TagResourceInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *datazone.UntagResourceInput, optFns ...func(*datazone.Options)) (*datazone.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *datazone.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UntagResourceInput, ...func(*datazone.Options)) (*datazone.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UntagResourceInput, ...func(*datazone.Options)) *datazone.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UntagResourceInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataSource(ctx context.Context, params *datazone.UpdateDataSourceInput, optFns ...func(*datazone.Options)) (*datazone.UpdateDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataSource")
	}

	var r0 *datazone.UpdateDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateDataSourceInput, ...func(*datazone.Options)) (*datazone.UpdateDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateDataSourceInput, ...func(*datazone.Options)) *datazone.UpdateDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateDataSourceInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomain(ctx context.Context, params *datazone.UpdateDomainInput, optFns ...func(*datazone.Options)) (*datazone.UpdateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 *datazone.UpdateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateDomainInput, ...func(*datazone.Options)) (*datazone.UpdateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateDomainInput, ...func(*datazone.Options)) *datazone.UpdateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateDomainInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironment(ctx context.Context, params *datazone.UpdateEnvironmentInput, optFns ...func(*datazone.Options)) (*datazone.UpdateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironment")
	}

	var r0 *datazone.UpdateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateEnvironmentInput, ...func(*datazone.Options)) (*datazone.UpdateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateEnvironmentInput, ...func(*datazone.Options)) *datazone.UpdateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateEnvironmentInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironmentAction(ctx context.Context, params *datazone.UpdateEnvironmentActionInput, optFns ...func(*datazone.Options)) (*datazone.UpdateEnvironmentActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironmentAction")
	}

	var r0 *datazone.UpdateEnvironmentActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateEnvironmentActionInput, ...func(*datazone.Options)) (*datazone.UpdateEnvironmentActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateEnvironmentActionInput, ...func(*datazone.Options)) *datazone.UpdateEnvironmentActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateEnvironmentActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateEnvironmentActionInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironmentProfile(ctx context.Context, params *datazone.UpdateEnvironmentProfileInput, optFns ...func(*datazone.Options)) (*datazone.UpdateEnvironmentProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironmentProfile")
	}

	var r0 *datazone.UpdateEnvironmentProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateEnvironmentProfileInput, ...func(*datazone.Options)) (*datazone.UpdateEnvironmentProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateEnvironmentProfileInput, ...func(*datazone.Options)) *datazone.UpdateEnvironmentProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateEnvironmentProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateEnvironmentProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGlossary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGlossary(ctx context.Context, params *datazone.UpdateGlossaryInput, optFns ...func(*datazone.Options)) (*datazone.UpdateGlossaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlossary")
	}

	var r0 *datazone.UpdateGlossaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateGlossaryInput, ...func(*datazone.Options)) (*datazone.UpdateGlossaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateGlossaryInput, ...func(*datazone.Options)) *datazone.UpdateGlossaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateGlossaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateGlossaryInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGlossaryTerm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGlossaryTerm(ctx context.Context, params *datazone.UpdateGlossaryTermInput, optFns ...func(*datazone.Options)) (*datazone.UpdateGlossaryTermOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlossaryTerm")
	}

	var r0 *datazone.UpdateGlossaryTermOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateGlossaryTermInput, ...func(*datazone.Options)) (*datazone.UpdateGlossaryTermOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateGlossaryTermInput, ...func(*datazone.Options)) *datazone.UpdateGlossaryTermOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateGlossaryTermOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateGlossaryTermInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroupProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGroupProfile(ctx context.Context, params *datazone.UpdateGroupProfileInput, optFns ...func(*datazone.Options)) (*datazone.UpdateGroupProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupProfile")
	}

	var r0 *datazone.UpdateGroupProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateGroupProfileInput, ...func(*datazone.Options)) (*datazone.UpdateGroupProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateGroupProfileInput, ...func(*datazone.Options)) *datazone.UpdateGroupProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateGroupProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateGroupProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProject(ctx context.Context, params *datazone.UpdateProjectInput, optFns ...func(*datazone.Options)) (*datazone.UpdateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *datazone.UpdateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateProjectInput, ...func(*datazone.Options)) (*datazone.UpdateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateProjectInput, ...func(*datazone.Options)) *datazone.UpdateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateProjectInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscriptionGrantStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSubscriptionGrantStatus(ctx context.Context, params *datazone.UpdateSubscriptionGrantStatusInput, optFns ...func(*datazone.Options)) (*datazone.UpdateSubscriptionGrantStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriptionGrantStatus")
	}

	var r0 *datazone.UpdateSubscriptionGrantStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateSubscriptionGrantStatusInput, ...func(*datazone.Options)) (*datazone.UpdateSubscriptionGrantStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateSubscriptionGrantStatusInput, ...func(*datazone.Options)) *datazone.UpdateSubscriptionGrantStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateSubscriptionGrantStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateSubscriptionGrantStatusInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscriptionRequest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSubscriptionRequest(ctx context.Context, params *datazone.UpdateSubscriptionRequestInput, optFns ...func(*datazone.Options)) (*datazone.UpdateSubscriptionRequestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriptionRequest")
	}

	var r0 *datazone.UpdateSubscriptionRequestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateSubscriptionRequestInput, ...func(*datazone.Options)) (*datazone.UpdateSubscriptionRequestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateSubscriptionRequestInput, ...func(*datazone.Options)) *datazone.UpdateSubscriptionRequestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateSubscriptionRequestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateSubscriptionRequestInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscriptionTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSubscriptionTarget(ctx context.Context, params *datazone.UpdateSubscriptionTargetInput, optFns ...func(*datazone.Options)) (*datazone.UpdateSubscriptionTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriptionTarget")
	}

	var r0 *datazone.UpdateSubscriptionTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateSubscriptionTargetInput, ...func(*datazone.Options)) (*datazone.UpdateSubscriptionTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateSubscriptionTargetInput, ...func(*datazone.Options)) *datazone.UpdateSubscriptionTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateSubscriptionTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateSubscriptionTargetInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserProfile(ctx context.Context, params *datazone.UpdateUserProfileInput, optFns ...func(*datazone.Options)) (*datazone.UpdateUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProfile")
	}

	var r0 *datazone.UpdateUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateUserProfileInput, ...func(*datazone.Options)) (*datazone.UpdateUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datazone.UpdateUserProfileInput, ...func(*datazone.Options)) *datazone.UpdateUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datazone.UpdateUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datazone.UpdateUserProfileInput, ...func(*datazone.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
