// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	dataexchange "github.com/aws/aws-sdk-go-v2/service/dataexchange"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptDataGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptDataGrant(ctx context.Context, params *dataexchange.AcceptDataGrantInput, optFns ...func(*dataexchange.Options)) (*dataexchange.AcceptDataGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptDataGrant")
	}

	var r0 *dataexchange.AcceptDataGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.AcceptDataGrantInput, ...func(*dataexchange.Options)) (*dataexchange.AcceptDataGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.AcceptDataGrantInput, ...func(*dataexchange.Options)) *dataexchange.AcceptDataGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.AcceptDataGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.AcceptDataGrantInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelJob(ctx context.Context, params *dataexchange.CancelJobInput, optFns ...func(*dataexchange.Options)) (*dataexchange.CancelJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelJob")
	}

	var r0 *dataexchange.CancelJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CancelJobInput, ...func(*dataexchange.Options)) (*dataexchange.CancelJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CancelJobInput, ...func(*dataexchange.Options)) *dataexchange.CancelJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.CancelJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.CancelJobInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataGrant(ctx context.Context, params *dataexchange.CreateDataGrantInput, optFns ...func(*dataexchange.Options)) (*dataexchange.CreateDataGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataGrant")
	}

	var r0 *dataexchange.CreateDataGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateDataGrantInput, ...func(*dataexchange.Options)) (*dataexchange.CreateDataGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateDataGrantInput, ...func(*dataexchange.Options)) *dataexchange.CreateDataGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.CreateDataGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.CreateDataGrantInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataSet(ctx context.Context, params *dataexchange.CreateDataSetInput, optFns ...func(*dataexchange.Options)) (*dataexchange.CreateDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataSet")
	}

	var r0 *dataexchange.CreateDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateDataSetInput, ...func(*dataexchange.Options)) (*dataexchange.CreateDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateDataSetInput, ...func(*dataexchange.Options)) *dataexchange.CreateDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.CreateDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.CreateDataSetInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventAction(ctx context.Context, params *dataexchange.CreateEventActionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.CreateEventActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventAction")
	}

	var r0 *dataexchange.CreateEventActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateEventActionInput, ...func(*dataexchange.Options)) (*dataexchange.CreateEventActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateEventActionInput, ...func(*dataexchange.Options)) *dataexchange.CreateEventActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.CreateEventActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.CreateEventActionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJob(ctx context.Context, params *dataexchange.CreateJobInput, optFns ...func(*dataexchange.Options)) (*dataexchange.CreateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *dataexchange.CreateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateJobInput, ...func(*dataexchange.Options)) (*dataexchange.CreateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateJobInput, ...func(*dataexchange.Options)) *dataexchange.CreateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.CreateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.CreateJobInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRevision(ctx context.Context, params *dataexchange.CreateRevisionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.CreateRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRevision")
	}

	var r0 *dataexchange.CreateRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateRevisionInput, ...func(*dataexchange.Options)) (*dataexchange.CreateRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.CreateRevisionInput, ...func(*dataexchange.Options)) *dataexchange.CreateRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.CreateRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.CreateRevisionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAsset(ctx context.Context, params *dataexchange.DeleteAssetInput, optFns ...func(*dataexchange.Options)) (*dataexchange.DeleteAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsset")
	}

	var r0 *dataexchange.DeleteAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteAssetInput, ...func(*dataexchange.Options)) (*dataexchange.DeleteAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteAssetInput, ...func(*dataexchange.Options)) *dataexchange.DeleteAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.DeleteAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.DeleteAssetInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataGrant(ctx context.Context, params *dataexchange.DeleteDataGrantInput, optFns ...func(*dataexchange.Options)) (*dataexchange.DeleteDataGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataGrant")
	}

	var r0 *dataexchange.DeleteDataGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteDataGrantInput, ...func(*dataexchange.Options)) (*dataexchange.DeleteDataGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteDataGrantInput, ...func(*dataexchange.Options)) *dataexchange.DeleteDataGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.DeleteDataGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.DeleteDataGrantInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataSet(ctx context.Context, params *dataexchange.DeleteDataSetInput, optFns ...func(*dataexchange.Options)) (*dataexchange.DeleteDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataSet")
	}

	var r0 *dataexchange.DeleteDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteDataSetInput, ...func(*dataexchange.Options)) (*dataexchange.DeleteDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteDataSetInput, ...func(*dataexchange.Options)) *dataexchange.DeleteDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.DeleteDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.DeleteDataSetInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventAction(ctx context.Context, params *dataexchange.DeleteEventActionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.DeleteEventActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventAction")
	}

	var r0 *dataexchange.DeleteEventActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteEventActionInput, ...func(*dataexchange.Options)) (*dataexchange.DeleteEventActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteEventActionInput, ...func(*dataexchange.Options)) *dataexchange.DeleteEventActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.DeleteEventActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.DeleteEventActionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRevision(ctx context.Context, params *dataexchange.DeleteRevisionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.DeleteRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRevision")
	}

	var r0 *dataexchange.DeleteRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteRevisionInput, ...func(*dataexchange.Options)) (*dataexchange.DeleteRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.DeleteRevisionInput, ...func(*dataexchange.Options)) *dataexchange.DeleteRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.DeleteRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.DeleteRevisionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAsset(ctx context.Context, params *dataexchange.GetAssetInput, optFns ...func(*dataexchange.Options)) (*dataexchange.GetAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAsset")
	}

	var r0 *dataexchange.GetAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetAssetInput, ...func(*dataexchange.Options)) (*dataexchange.GetAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetAssetInput, ...func(*dataexchange.Options)) *dataexchange.GetAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.GetAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.GetAssetInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataGrant(ctx context.Context, params *dataexchange.GetDataGrantInput, optFns ...func(*dataexchange.Options)) (*dataexchange.GetDataGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataGrant")
	}

	var r0 *dataexchange.GetDataGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetDataGrantInput, ...func(*dataexchange.Options)) (*dataexchange.GetDataGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetDataGrantInput, ...func(*dataexchange.Options)) *dataexchange.GetDataGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.GetDataGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.GetDataGrantInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataSet(ctx context.Context, params *dataexchange.GetDataSetInput, optFns ...func(*dataexchange.Options)) (*dataexchange.GetDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataSet")
	}

	var r0 *dataexchange.GetDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetDataSetInput, ...func(*dataexchange.Options)) (*dataexchange.GetDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetDataSetInput, ...func(*dataexchange.Options)) *dataexchange.GetDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.GetDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.GetDataSetInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEventAction(ctx context.Context, params *dataexchange.GetEventActionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.GetEventActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventAction")
	}

	var r0 *dataexchange.GetEventActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetEventActionInput, ...func(*dataexchange.Options)) (*dataexchange.GetEventActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetEventActionInput, ...func(*dataexchange.Options)) *dataexchange.GetEventActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.GetEventActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.GetEventActionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJob(ctx context.Context, params *dataexchange.GetJobInput, optFns ...func(*dataexchange.Options)) (*dataexchange.GetJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *dataexchange.GetJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetJobInput, ...func(*dataexchange.Options)) (*dataexchange.GetJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetJobInput, ...func(*dataexchange.Options)) *dataexchange.GetJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.GetJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.GetJobInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceivedDataGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReceivedDataGrant(ctx context.Context, params *dataexchange.GetReceivedDataGrantInput, optFns ...func(*dataexchange.Options)) (*dataexchange.GetReceivedDataGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReceivedDataGrant")
	}

	var r0 *dataexchange.GetReceivedDataGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetReceivedDataGrantInput, ...func(*dataexchange.Options)) (*dataexchange.GetReceivedDataGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetReceivedDataGrantInput, ...func(*dataexchange.Options)) *dataexchange.GetReceivedDataGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.GetReceivedDataGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.GetReceivedDataGrantInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRevision(ctx context.Context, params *dataexchange.GetRevisionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.GetRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRevision")
	}

	var r0 *dataexchange.GetRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetRevisionInput, ...func(*dataexchange.Options)) (*dataexchange.GetRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.GetRevisionInput, ...func(*dataexchange.Options)) *dataexchange.GetRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.GetRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.GetRevisionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataGrants provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataGrants(ctx context.Context, params *dataexchange.ListDataGrantsInput, optFns ...func(*dataexchange.Options)) (*dataexchange.ListDataGrantsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataGrants")
	}

	var r0 *dataexchange.ListDataGrantsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListDataGrantsInput, ...func(*dataexchange.Options)) (*dataexchange.ListDataGrantsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListDataGrantsInput, ...func(*dataexchange.Options)) *dataexchange.ListDataGrantsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.ListDataGrantsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.ListDataGrantsInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSetRevisions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSetRevisions(ctx context.Context, params *dataexchange.ListDataSetRevisionsInput, optFns ...func(*dataexchange.Options)) (*dataexchange.ListDataSetRevisionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSetRevisions")
	}

	var r0 *dataexchange.ListDataSetRevisionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListDataSetRevisionsInput, ...func(*dataexchange.Options)) (*dataexchange.ListDataSetRevisionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListDataSetRevisionsInput, ...func(*dataexchange.Options)) *dataexchange.ListDataSetRevisionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.ListDataSetRevisionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.ListDataSetRevisionsInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSets(ctx context.Context, params *dataexchange.ListDataSetsInput, optFns ...func(*dataexchange.Options)) (*dataexchange.ListDataSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSets")
	}

	var r0 *dataexchange.ListDataSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListDataSetsInput, ...func(*dataexchange.Options)) (*dataexchange.ListDataSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListDataSetsInput, ...func(*dataexchange.Options)) *dataexchange.ListDataSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.ListDataSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.ListDataSetsInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEventActions(ctx context.Context, params *dataexchange.ListEventActionsInput, optFns ...func(*dataexchange.Options)) (*dataexchange.ListEventActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEventActions")
	}

	var r0 *dataexchange.ListEventActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListEventActionsInput, ...func(*dataexchange.Options)) (*dataexchange.ListEventActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListEventActionsInput, ...func(*dataexchange.Options)) *dataexchange.ListEventActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.ListEventActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.ListEventActionsInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobs(ctx context.Context, params *dataexchange.ListJobsInput, optFns ...func(*dataexchange.Options)) (*dataexchange.ListJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *dataexchange.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListJobsInput, ...func(*dataexchange.Options)) (*dataexchange.ListJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListJobsInput, ...func(*dataexchange.Options)) *dataexchange.ListJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.ListJobsInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceivedDataGrants provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReceivedDataGrants(ctx context.Context, params *dataexchange.ListReceivedDataGrantsInput, optFns ...func(*dataexchange.Options)) (*dataexchange.ListReceivedDataGrantsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReceivedDataGrants")
	}

	var r0 *dataexchange.ListReceivedDataGrantsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListReceivedDataGrantsInput, ...func(*dataexchange.Options)) (*dataexchange.ListReceivedDataGrantsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListReceivedDataGrantsInput, ...func(*dataexchange.Options)) *dataexchange.ListReceivedDataGrantsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.ListReceivedDataGrantsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.ListReceivedDataGrantsInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRevisionAssets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRevisionAssets(ctx context.Context, params *dataexchange.ListRevisionAssetsInput, optFns ...func(*dataexchange.Options)) (*dataexchange.ListRevisionAssetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRevisionAssets")
	}

	var r0 *dataexchange.ListRevisionAssetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListRevisionAssetsInput, ...func(*dataexchange.Options)) (*dataexchange.ListRevisionAssetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListRevisionAssetsInput, ...func(*dataexchange.Options)) *dataexchange.ListRevisionAssetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.ListRevisionAssetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.ListRevisionAssetsInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *dataexchange.ListTagsForResourceInput, optFns ...func(*dataexchange.Options)) (*dataexchange.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *dataexchange.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListTagsForResourceInput, ...func(*dataexchange.Options)) (*dataexchange.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.ListTagsForResourceInput, ...func(*dataexchange.Options)) *dataexchange.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.ListTagsForResourceInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() dataexchange.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 dataexchange.Options
	if rf, ok := ret.Get(0).(func() dataexchange.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dataexchange.Options)
	}

	return r0
}

// RevokeRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RevokeRevision(ctx context.Context, params *dataexchange.RevokeRevisionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.RevokeRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RevokeRevision")
	}

	var r0 *dataexchange.RevokeRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.RevokeRevisionInput, ...func(*dataexchange.Options)) (*dataexchange.RevokeRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.RevokeRevisionInput, ...func(*dataexchange.Options)) *dataexchange.RevokeRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.RevokeRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.RevokeRevisionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendApiAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendApiAsset(ctx context.Context, params *dataexchange.SendApiAssetInput, optFns ...func(*dataexchange.Options)) (*dataexchange.SendApiAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendApiAsset")
	}

	var r0 *dataexchange.SendApiAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.SendApiAssetInput, ...func(*dataexchange.Options)) (*dataexchange.SendApiAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.SendApiAssetInput, ...func(*dataexchange.Options)) *dataexchange.SendApiAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.SendApiAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.SendApiAssetInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendDataSetNotification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendDataSetNotification(ctx context.Context, params *dataexchange.SendDataSetNotificationInput, optFns ...func(*dataexchange.Options)) (*dataexchange.SendDataSetNotificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendDataSetNotification")
	}

	var r0 *dataexchange.SendDataSetNotificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.SendDataSetNotificationInput, ...func(*dataexchange.Options)) (*dataexchange.SendDataSetNotificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.SendDataSetNotificationInput, ...func(*dataexchange.Options)) *dataexchange.SendDataSetNotificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.SendDataSetNotificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.SendDataSetNotificationInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartJob(ctx context.Context, params *dataexchange.StartJobInput, optFns ...func(*dataexchange.Options)) (*dataexchange.StartJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartJob")
	}

	var r0 *dataexchange.StartJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.StartJobInput, ...func(*dataexchange.Options)) (*dataexchange.StartJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.StartJobInput, ...func(*dataexchange.Options)) *dataexchange.StartJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.StartJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.StartJobInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *dataexchange.TagResourceInput, optFns ...func(*dataexchange.Options)) (*dataexchange.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *dataexchange.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.TagResourceInput, ...func(*dataexchange.Options)) (*dataexchange.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.TagResourceInput, ...func(*dataexchange.Options)) *dataexchange.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.TagResourceInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *dataexchange.UntagResourceInput, optFns ...func(*dataexchange.Options)) (*dataexchange.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *dataexchange.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UntagResourceInput, ...func(*dataexchange.Options)) (*dataexchange.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UntagResourceInput, ...func(*dataexchange.Options)) *dataexchange.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.UntagResourceInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAsset(ctx context.Context, params *dataexchange.UpdateAssetInput, optFns ...func(*dataexchange.Options)) (*dataexchange.UpdateAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAsset")
	}

	var r0 *dataexchange.UpdateAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UpdateAssetInput, ...func(*dataexchange.Options)) (*dataexchange.UpdateAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UpdateAssetInput, ...func(*dataexchange.Options)) *dataexchange.UpdateAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.UpdateAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.UpdateAssetInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataSet(ctx context.Context, params *dataexchange.UpdateDataSetInput, optFns ...func(*dataexchange.Options)) (*dataexchange.UpdateDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataSet")
	}

	var r0 *dataexchange.UpdateDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UpdateDataSetInput, ...func(*dataexchange.Options)) (*dataexchange.UpdateDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UpdateDataSetInput, ...func(*dataexchange.Options)) *dataexchange.UpdateDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.UpdateDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.UpdateDataSetInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEventAction(ctx context.Context, params *dataexchange.UpdateEventActionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.UpdateEventActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEventAction")
	}

	var r0 *dataexchange.UpdateEventActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UpdateEventActionInput, ...func(*dataexchange.Options)) (*dataexchange.UpdateEventActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UpdateEventActionInput, ...func(*dataexchange.Options)) *dataexchange.UpdateEventActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.UpdateEventActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.UpdateEventActionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRevision provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRevision(ctx context.Context, params *dataexchange.UpdateRevisionInput, optFns ...func(*dataexchange.Options)) (*dataexchange.UpdateRevisionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRevision")
	}

	var r0 *dataexchange.UpdateRevisionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UpdateRevisionInput, ...func(*dataexchange.Options)) (*dataexchange.UpdateRevisionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dataexchange.UpdateRevisionInput, ...func(*dataexchange.Options)) *dataexchange.UpdateRevisionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.UpdateRevisionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dataexchange.UpdateRevisionInput, ...func(*dataexchange.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
