// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	arczonalshift "github.com/aws/aws-sdk-go-v2/service/arczonalshift"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelPracticeRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelPracticeRun(ctx context.Context, params *arczonalshift.CancelPracticeRunInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.CancelPracticeRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelPracticeRun")
	}

	var r0 *arczonalshift.CancelPracticeRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.CancelPracticeRunInput, ...func(*arczonalshift.Options)) (*arczonalshift.CancelPracticeRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.CancelPracticeRunInput, ...func(*arczonalshift.Options)) *arczonalshift.CancelPracticeRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.CancelPracticeRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.CancelPracticeRunInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelZonalShift provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelZonalShift(ctx context.Context, params *arczonalshift.CancelZonalShiftInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.CancelZonalShiftOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelZonalShift")
	}

	var r0 *arczonalshift.CancelZonalShiftOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.CancelZonalShiftInput, ...func(*arczonalshift.Options)) (*arczonalshift.CancelZonalShiftOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.CancelZonalShiftInput, ...func(*arczonalshift.Options)) *arczonalshift.CancelZonalShiftOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.CancelZonalShiftOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.CancelZonalShiftInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePracticeRunConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePracticeRunConfiguration(ctx context.Context, params *arczonalshift.CreatePracticeRunConfigurationInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.CreatePracticeRunConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePracticeRunConfiguration")
	}

	var r0 *arczonalshift.CreatePracticeRunConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.CreatePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) (*arczonalshift.CreatePracticeRunConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.CreatePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) *arczonalshift.CreatePracticeRunConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.CreatePracticeRunConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.CreatePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePracticeRunConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePracticeRunConfiguration(ctx context.Context, params *arczonalshift.DeletePracticeRunConfigurationInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.DeletePracticeRunConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePracticeRunConfiguration")
	}

	var r0 *arczonalshift.DeletePracticeRunConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.DeletePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) (*arczonalshift.DeletePracticeRunConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.DeletePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) *arczonalshift.DeletePracticeRunConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.DeletePracticeRunConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.DeletePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAutoshiftObserverNotificationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAutoshiftObserverNotificationStatus(ctx context.Context, params *arczonalshift.GetAutoshiftObserverNotificationStatusInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.GetAutoshiftObserverNotificationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAutoshiftObserverNotificationStatus")
	}

	var r0 *arczonalshift.GetAutoshiftObserverNotificationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.GetAutoshiftObserverNotificationStatusInput, ...func(*arczonalshift.Options)) (*arczonalshift.GetAutoshiftObserverNotificationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.GetAutoshiftObserverNotificationStatusInput, ...func(*arczonalshift.Options)) *arczonalshift.GetAutoshiftObserverNotificationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.GetAutoshiftObserverNotificationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.GetAutoshiftObserverNotificationStatusInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetManagedResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetManagedResource(ctx context.Context, params *arczonalshift.GetManagedResourceInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.GetManagedResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetManagedResource")
	}

	var r0 *arczonalshift.GetManagedResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.GetManagedResourceInput, ...func(*arczonalshift.Options)) (*arczonalshift.GetManagedResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.GetManagedResourceInput, ...func(*arczonalshift.Options)) *arczonalshift.GetManagedResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.GetManagedResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.GetManagedResourceInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAutoshifts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAutoshifts(ctx context.Context, params *arczonalshift.ListAutoshiftsInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.ListAutoshiftsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAutoshifts")
	}

	var r0 *arczonalshift.ListAutoshiftsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.ListAutoshiftsInput, ...func(*arczonalshift.Options)) (*arczonalshift.ListAutoshiftsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.ListAutoshiftsInput, ...func(*arczonalshift.Options)) *arczonalshift.ListAutoshiftsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.ListAutoshiftsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.ListAutoshiftsInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListManagedResources(ctx context.Context, params *arczonalshift.ListManagedResourcesInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.ListManagedResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListManagedResources")
	}

	var r0 *arczonalshift.ListManagedResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.ListManagedResourcesInput, ...func(*arczonalshift.Options)) (*arczonalshift.ListManagedResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.ListManagedResourcesInput, ...func(*arczonalshift.Options)) *arczonalshift.ListManagedResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.ListManagedResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.ListManagedResourcesInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListZonalShifts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListZonalShifts(ctx context.Context, params *arczonalshift.ListZonalShiftsInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.ListZonalShiftsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListZonalShifts")
	}

	var r0 *arczonalshift.ListZonalShiftsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.ListZonalShiftsInput, ...func(*arczonalshift.Options)) (*arczonalshift.ListZonalShiftsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.ListZonalShiftsInput, ...func(*arczonalshift.Options)) *arczonalshift.ListZonalShiftsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.ListZonalShiftsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.ListZonalShiftsInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() arczonalshift.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 arczonalshift.Options
	if rf, ok := ret.Get(0).(func() arczonalshift.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(arczonalshift.Options)
	}

	return r0
}

// StartPracticeRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartPracticeRun(ctx context.Context, params *arczonalshift.StartPracticeRunInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.StartPracticeRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartPracticeRun")
	}

	var r0 *arczonalshift.StartPracticeRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.StartPracticeRunInput, ...func(*arczonalshift.Options)) (*arczonalshift.StartPracticeRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.StartPracticeRunInput, ...func(*arczonalshift.Options)) *arczonalshift.StartPracticeRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.StartPracticeRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.StartPracticeRunInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartZonalShift provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartZonalShift(ctx context.Context, params *arczonalshift.StartZonalShiftInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.StartZonalShiftOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartZonalShift")
	}

	var r0 *arczonalshift.StartZonalShiftOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.StartZonalShiftInput, ...func(*arczonalshift.Options)) (*arczonalshift.StartZonalShiftOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.StartZonalShiftInput, ...func(*arczonalshift.Options)) *arczonalshift.StartZonalShiftOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.StartZonalShiftOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.StartZonalShiftInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAutoshiftObserverNotificationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAutoshiftObserverNotificationStatus(ctx context.Context, params *arczonalshift.UpdateAutoshiftObserverNotificationStatusInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.UpdateAutoshiftObserverNotificationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAutoshiftObserverNotificationStatus")
	}

	var r0 *arczonalshift.UpdateAutoshiftObserverNotificationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.UpdateAutoshiftObserverNotificationStatusInput, ...func(*arczonalshift.Options)) (*arczonalshift.UpdateAutoshiftObserverNotificationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.UpdateAutoshiftObserverNotificationStatusInput, ...func(*arczonalshift.Options)) *arczonalshift.UpdateAutoshiftObserverNotificationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.UpdateAutoshiftObserverNotificationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.UpdateAutoshiftObserverNotificationStatusInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePracticeRunConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePracticeRunConfiguration(ctx context.Context, params *arczonalshift.UpdatePracticeRunConfigurationInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.UpdatePracticeRunConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePracticeRunConfiguration")
	}

	var r0 *arczonalshift.UpdatePracticeRunConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.UpdatePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) (*arczonalshift.UpdatePracticeRunConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.UpdatePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) *arczonalshift.UpdatePracticeRunConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.UpdatePracticeRunConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.UpdatePracticeRunConfigurationInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateZonalAutoshiftConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateZonalAutoshiftConfiguration(ctx context.Context, params *arczonalshift.UpdateZonalAutoshiftConfigurationInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.UpdateZonalAutoshiftConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateZonalAutoshiftConfiguration")
	}

	var r0 *arczonalshift.UpdateZonalAutoshiftConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.UpdateZonalAutoshiftConfigurationInput, ...func(*arczonalshift.Options)) (*arczonalshift.UpdateZonalAutoshiftConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.UpdateZonalAutoshiftConfigurationInput, ...func(*arczonalshift.Options)) *arczonalshift.UpdateZonalAutoshiftConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.UpdateZonalAutoshiftConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.UpdateZonalAutoshiftConfigurationInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateZonalShift provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateZonalShift(ctx context.Context, params *arczonalshift.UpdateZonalShiftInput, optFns ...func(*arczonalshift.Options)) (*arczonalshift.UpdateZonalShiftOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateZonalShift")
	}

	var r0 *arczonalshift.UpdateZonalShiftOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.UpdateZonalShiftInput, ...func(*arczonalshift.Options)) (*arczonalshift.UpdateZonalShiftOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *arczonalshift.UpdateZonalShiftInput, ...func(*arczonalshift.Options)) *arczonalshift.UpdateZonalShiftOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*arczonalshift.UpdateZonalShiftOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *arczonalshift.UpdateZonalShiftInput, ...func(*arczonalshift.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
