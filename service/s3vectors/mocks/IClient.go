// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	s3vectors "github.com/aws/aws-sdk-go-v2/service/s3vectors"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIndex(ctx context.Context, params *s3vectors.CreateIndexInput, optFns ...func(*s3vectors.Options)) (*s3vectors.CreateIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 *s3vectors.CreateIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.CreateIndexInput, ...func(*s3vectors.Options)) (*s3vectors.CreateIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.CreateIndexInput, ...func(*s3vectors.Options)) *s3vectors.CreateIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.CreateIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.CreateIndexInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVectorBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVectorBucket(ctx context.Context, params *s3vectors.CreateVectorBucketInput, optFns ...func(*s3vectors.Options)) (*s3vectors.CreateVectorBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVectorBucket")
	}

	var r0 *s3vectors.CreateVectorBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.CreateVectorBucketInput, ...func(*s3vectors.Options)) (*s3vectors.CreateVectorBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.CreateVectorBucketInput, ...func(*s3vectors.Options)) *s3vectors.CreateVectorBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.CreateVectorBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.CreateVectorBucketInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIndex(ctx context.Context, params *s3vectors.DeleteIndexInput, optFns ...func(*s3vectors.Options)) (*s3vectors.DeleteIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndex")
	}

	var r0 *s3vectors.DeleteIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.DeleteIndexInput, ...func(*s3vectors.Options)) (*s3vectors.DeleteIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.DeleteIndexInput, ...func(*s3vectors.Options)) *s3vectors.DeleteIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.DeleteIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.DeleteIndexInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVectorBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVectorBucket(ctx context.Context, params *s3vectors.DeleteVectorBucketInput, optFns ...func(*s3vectors.Options)) (*s3vectors.DeleteVectorBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVectorBucket")
	}

	var r0 *s3vectors.DeleteVectorBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.DeleteVectorBucketInput, ...func(*s3vectors.Options)) (*s3vectors.DeleteVectorBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.DeleteVectorBucketInput, ...func(*s3vectors.Options)) *s3vectors.DeleteVectorBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.DeleteVectorBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.DeleteVectorBucketInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVectorBucketPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVectorBucketPolicy(ctx context.Context, params *s3vectors.DeleteVectorBucketPolicyInput, optFns ...func(*s3vectors.Options)) (*s3vectors.DeleteVectorBucketPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVectorBucketPolicy")
	}

	var r0 *s3vectors.DeleteVectorBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.DeleteVectorBucketPolicyInput, ...func(*s3vectors.Options)) (*s3vectors.DeleteVectorBucketPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.DeleteVectorBucketPolicyInput, ...func(*s3vectors.Options)) *s3vectors.DeleteVectorBucketPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.DeleteVectorBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.DeleteVectorBucketPolicyInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVectors(ctx context.Context, params *s3vectors.DeleteVectorsInput, optFns ...func(*s3vectors.Options)) (*s3vectors.DeleteVectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVectors")
	}

	var r0 *s3vectors.DeleteVectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.DeleteVectorsInput, ...func(*s3vectors.Options)) (*s3vectors.DeleteVectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.DeleteVectorsInput, ...func(*s3vectors.Options)) *s3vectors.DeleteVectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.DeleteVectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.DeleteVectorsInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIndex(ctx context.Context, params *s3vectors.GetIndexInput, optFns ...func(*s3vectors.Options)) (*s3vectors.GetIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 *s3vectors.GetIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.GetIndexInput, ...func(*s3vectors.Options)) (*s3vectors.GetIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.GetIndexInput, ...func(*s3vectors.Options)) *s3vectors.GetIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.GetIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.GetIndexInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVectorBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVectorBucket(ctx context.Context, params *s3vectors.GetVectorBucketInput, optFns ...func(*s3vectors.Options)) (*s3vectors.GetVectorBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVectorBucket")
	}

	var r0 *s3vectors.GetVectorBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.GetVectorBucketInput, ...func(*s3vectors.Options)) (*s3vectors.GetVectorBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.GetVectorBucketInput, ...func(*s3vectors.Options)) *s3vectors.GetVectorBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.GetVectorBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.GetVectorBucketInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVectorBucketPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVectorBucketPolicy(ctx context.Context, params *s3vectors.GetVectorBucketPolicyInput, optFns ...func(*s3vectors.Options)) (*s3vectors.GetVectorBucketPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVectorBucketPolicy")
	}

	var r0 *s3vectors.GetVectorBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.GetVectorBucketPolicyInput, ...func(*s3vectors.Options)) (*s3vectors.GetVectorBucketPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.GetVectorBucketPolicyInput, ...func(*s3vectors.Options)) *s3vectors.GetVectorBucketPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.GetVectorBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.GetVectorBucketPolicyInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVectors(ctx context.Context, params *s3vectors.GetVectorsInput, optFns ...func(*s3vectors.Options)) (*s3vectors.GetVectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVectors")
	}

	var r0 *s3vectors.GetVectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.GetVectorsInput, ...func(*s3vectors.Options)) (*s3vectors.GetVectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.GetVectorsInput, ...func(*s3vectors.Options)) *s3vectors.GetVectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.GetVectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.GetVectorsInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIndexes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIndexes(ctx context.Context, params *s3vectors.ListIndexesInput, optFns ...func(*s3vectors.Options)) (*s3vectors.ListIndexesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexes")
	}

	var r0 *s3vectors.ListIndexesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.ListIndexesInput, ...func(*s3vectors.Options)) (*s3vectors.ListIndexesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.ListIndexesInput, ...func(*s3vectors.Options)) *s3vectors.ListIndexesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.ListIndexesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.ListIndexesInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVectorBuckets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVectorBuckets(ctx context.Context, params *s3vectors.ListVectorBucketsInput, optFns ...func(*s3vectors.Options)) (*s3vectors.ListVectorBucketsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVectorBuckets")
	}

	var r0 *s3vectors.ListVectorBucketsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.ListVectorBucketsInput, ...func(*s3vectors.Options)) (*s3vectors.ListVectorBucketsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.ListVectorBucketsInput, ...func(*s3vectors.Options)) *s3vectors.ListVectorBucketsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.ListVectorBucketsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.ListVectorBucketsInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVectors(ctx context.Context, params *s3vectors.ListVectorsInput, optFns ...func(*s3vectors.Options)) (*s3vectors.ListVectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVectors")
	}

	var r0 *s3vectors.ListVectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.ListVectorsInput, ...func(*s3vectors.Options)) (*s3vectors.ListVectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.ListVectorsInput, ...func(*s3vectors.Options)) *s3vectors.ListVectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.ListVectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.ListVectorsInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() s3vectors.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 s3vectors.Options
	if rf, ok := ret.Get(0).(func() s3vectors.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(s3vectors.Options)
	}

	return r0
}

// PutVectorBucketPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVectorBucketPolicy(ctx context.Context, params *s3vectors.PutVectorBucketPolicyInput, optFns ...func(*s3vectors.Options)) (*s3vectors.PutVectorBucketPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVectorBucketPolicy")
	}

	var r0 *s3vectors.PutVectorBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.PutVectorBucketPolicyInput, ...func(*s3vectors.Options)) (*s3vectors.PutVectorBucketPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.PutVectorBucketPolicyInput, ...func(*s3vectors.Options)) *s3vectors.PutVectorBucketPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.PutVectorBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.PutVectorBucketPolicyInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutVectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVectors(ctx context.Context, params *s3vectors.PutVectorsInput, optFns ...func(*s3vectors.Options)) (*s3vectors.PutVectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVectors")
	}

	var r0 *s3vectors.PutVectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.PutVectorsInput, ...func(*s3vectors.Options)) (*s3vectors.PutVectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.PutVectorsInput, ...func(*s3vectors.Options)) *s3vectors.PutVectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.PutVectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.PutVectorsInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryVectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) QueryVectors(ctx context.Context, params *s3vectors.QueryVectorsInput, optFns ...func(*s3vectors.Options)) (*s3vectors.QueryVectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryVectors")
	}

	var r0 *s3vectors.QueryVectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.QueryVectorsInput, ...func(*s3vectors.Options)) (*s3vectors.QueryVectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3vectors.QueryVectorsInput, ...func(*s3vectors.Options)) *s3vectors.QueryVectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3vectors.QueryVectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3vectors.QueryVectorsInput, ...func(*s3vectors.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
