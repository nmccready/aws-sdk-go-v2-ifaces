// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	bcmdashboards "github.com/aws/aws-sdk-go-v2/service/bcmdashboards"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDashboard(ctx context.Context, params *bcmdashboards.CreateDashboardInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.CreateDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDashboard")
	}

	var r0 *bcmdashboards.CreateDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.CreateDashboardInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.CreateDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.CreateDashboardInput, ...func(*bcmdashboards.Options)) *bcmdashboards.CreateDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.CreateDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.CreateDashboardInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDashboard(ctx context.Context, params *bcmdashboards.DeleteDashboardInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.DeleteDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDashboard")
	}

	var r0 *bcmdashboards.DeleteDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.DeleteDashboardInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.DeleteDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.DeleteDashboardInput, ...func(*bcmdashboards.Options)) *bcmdashboards.DeleteDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.DeleteDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.DeleteDashboardInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDashboard(ctx context.Context, params *bcmdashboards.GetDashboardInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.GetDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboard")
	}

	var r0 *bcmdashboards.GetDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.GetDashboardInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.GetDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.GetDashboardInput, ...func(*bcmdashboards.Options)) *bcmdashboards.GetDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.GetDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.GetDashboardInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *bcmdashboards.GetResourcePolicyInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *bcmdashboards.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.GetResourcePolicyInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.GetResourcePolicyInput, ...func(*bcmdashboards.Options)) *bcmdashboards.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.GetResourcePolicyInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDashboards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDashboards(ctx context.Context, params *bcmdashboards.ListDashboardsInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.ListDashboardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDashboards")
	}

	var r0 *bcmdashboards.ListDashboardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.ListDashboardsInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.ListDashboardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.ListDashboardsInput, ...func(*bcmdashboards.Options)) *bcmdashboards.ListDashboardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.ListDashboardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.ListDashboardsInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *bcmdashboards.ListTagsForResourceInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *bcmdashboards.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.ListTagsForResourceInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.ListTagsForResourceInput, ...func(*bcmdashboards.Options)) *bcmdashboards.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.ListTagsForResourceInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() bcmdashboards.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 bcmdashboards.Options
	if rf, ok := ret.Get(0).(func() bcmdashboards.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bcmdashboards.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *bcmdashboards.TagResourceInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *bcmdashboards.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.TagResourceInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.TagResourceInput, ...func(*bcmdashboards.Options)) *bcmdashboards.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.TagResourceInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *bcmdashboards.UntagResourceInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *bcmdashboards.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.UntagResourceInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.UntagResourceInput, ...func(*bcmdashboards.Options)) *bcmdashboards.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.UntagResourceInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDashboard(ctx context.Context, params *bcmdashboards.UpdateDashboardInput, optFns ...func(*bcmdashboards.Options)) (*bcmdashboards.UpdateDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDashboard")
	}

	var r0 *bcmdashboards.UpdateDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.UpdateDashboardInput, ...func(*bcmdashboards.Options)) (*bcmdashboards.UpdateDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmdashboards.UpdateDashboardInput, ...func(*bcmdashboards.Options)) *bcmdashboards.UpdateDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmdashboards.UpdateDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmdashboards.UpdateDashboardInput, ...func(*bcmdashboards.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
