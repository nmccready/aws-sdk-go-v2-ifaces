// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	iotdataplane "github.com/aws/aws-sdk-go-v2/service/iotdataplane"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DeleteThingShadow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteThingShadow(ctx context.Context, params *iotdataplane.DeleteThingShadowInput, optFns ...func(*iotdataplane.Options)) (*iotdataplane.DeleteThingShadowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteThingShadow")
	}

	var r0 *iotdataplane.DeleteThingShadowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.DeleteThingShadowInput, ...func(*iotdataplane.Options)) (*iotdataplane.DeleteThingShadowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.DeleteThingShadowInput, ...func(*iotdataplane.Options)) *iotdataplane.DeleteThingShadowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotdataplane.DeleteThingShadowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotdataplane.DeleteThingShadowInput, ...func(*iotdataplane.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetainedMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRetainedMessage(ctx context.Context, params *iotdataplane.GetRetainedMessageInput, optFns ...func(*iotdataplane.Options)) (*iotdataplane.GetRetainedMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRetainedMessage")
	}

	var r0 *iotdataplane.GetRetainedMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.GetRetainedMessageInput, ...func(*iotdataplane.Options)) (*iotdataplane.GetRetainedMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.GetRetainedMessageInput, ...func(*iotdataplane.Options)) *iotdataplane.GetRetainedMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotdataplane.GetRetainedMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotdataplane.GetRetainedMessageInput, ...func(*iotdataplane.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThingShadow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetThingShadow(ctx context.Context, params *iotdataplane.GetThingShadowInput, optFns ...func(*iotdataplane.Options)) (*iotdataplane.GetThingShadowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetThingShadow")
	}

	var r0 *iotdataplane.GetThingShadowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.GetThingShadowInput, ...func(*iotdataplane.Options)) (*iotdataplane.GetThingShadowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.GetThingShadowInput, ...func(*iotdataplane.Options)) *iotdataplane.GetThingShadowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotdataplane.GetThingShadowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotdataplane.GetThingShadowInput, ...func(*iotdataplane.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamedShadowsForThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNamedShadowsForThing(ctx context.Context, params *iotdataplane.ListNamedShadowsForThingInput, optFns ...func(*iotdataplane.Options)) (*iotdataplane.ListNamedShadowsForThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNamedShadowsForThing")
	}

	var r0 *iotdataplane.ListNamedShadowsForThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.ListNamedShadowsForThingInput, ...func(*iotdataplane.Options)) (*iotdataplane.ListNamedShadowsForThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.ListNamedShadowsForThingInput, ...func(*iotdataplane.Options)) *iotdataplane.ListNamedShadowsForThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotdataplane.ListNamedShadowsForThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotdataplane.ListNamedShadowsForThingInput, ...func(*iotdataplane.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRetainedMessages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRetainedMessages(ctx context.Context, params *iotdataplane.ListRetainedMessagesInput, optFns ...func(*iotdataplane.Options)) (*iotdataplane.ListRetainedMessagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRetainedMessages")
	}

	var r0 *iotdataplane.ListRetainedMessagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.ListRetainedMessagesInput, ...func(*iotdataplane.Options)) (*iotdataplane.ListRetainedMessagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.ListRetainedMessagesInput, ...func(*iotdataplane.Options)) *iotdataplane.ListRetainedMessagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotdataplane.ListRetainedMessagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotdataplane.ListRetainedMessagesInput, ...func(*iotdataplane.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() iotdataplane.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 iotdataplane.Options
	if rf, ok := ret.Get(0).(func() iotdataplane.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(iotdataplane.Options)
	}

	return r0
}

// Publish provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Publish(ctx context.Context, params *iotdataplane.PublishInput, optFns ...func(*iotdataplane.Options)) (*iotdataplane.PublishOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 *iotdataplane.PublishOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.PublishInput, ...func(*iotdataplane.Options)) (*iotdataplane.PublishOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.PublishInput, ...func(*iotdataplane.Options)) *iotdataplane.PublishOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotdataplane.PublishOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotdataplane.PublishInput, ...func(*iotdataplane.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThingShadow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThingShadow(ctx context.Context, params *iotdataplane.UpdateThingShadowInput, optFns ...func(*iotdataplane.Options)) (*iotdataplane.UpdateThingShadowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingShadow")
	}

	var r0 *iotdataplane.UpdateThingShadowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.UpdateThingShadowInput, ...func(*iotdataplane.Options)) (*iotdataplane.UpdateThingShadowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iotdataplane.UpdateThingShadowInput, ...func(*iotdataplane.Options)) *iotdataplane.UpdateThingShadowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iotdataplane.UpdateThingShadowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iotdataplane.UpdateThingShadowInput, ...func(*iotdataplane.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
