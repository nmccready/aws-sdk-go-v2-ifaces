// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	apigateway "github.com/aws/aws-sdk-go-v2/service/apigateway"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApiKey(ctx context.Context, params *apigateway.CreateApiKeyInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiKey")
	}

	var r0 *apigateway.CreateApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateApiKeyInput, ...func(*apigateway.Options)) (*apigateway.CreateApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateApiKeyInput, ...func(*apigateway.Options)) *apigateway.CreateApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateApiKeyInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAuthorizer(ctx context.Context, params *apigateway.CreateAuthorizerInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthorizer")
	}

	var r0 *apigateway.CreateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateAuthorizerInput, ...func(*apigateway.Options)) (*apigateway.CreateAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateAuthorizerInput, ...func(*apigateway.Options)) *apigateway.CreateAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateAuthorizerInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBasePathMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBasePathMapping(ctx context.Context, params *apigateway.CreateBasePathMappingInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateBasePathMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBasePathMapping")
	}

	var r0 *apigateway.CreateBasePathMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateBasePathMappingInput, ...func(*apigateway.Options)) (*apigateway.CreateBasePathMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateBasePathMappingInput, ...func(*apigateway.Options)) *apigateway.CreateBasePathMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateBasePathMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateBasePathMappingInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeployment(ctx context.Context, params *apigateway.CreateDeploymentInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *apigateway.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDeploymentInput, ...func(*apigateway.Options)) (*apigateway.CreateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDeploymentInput, ...func(*apigateway.Options)) *apigateway.CreateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateDeploymentInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDocumentationPart provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDocumentationPart(ctx context.Context, params *apigateway.CreateDocumentationPartInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateDocumentationPartOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDocumentationPart")
	}

	var r0 *apigateway.CreateDocumentationPartOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDocumentationPartInput, ...func(*apigateway.Options)) (*apigateway.CreateDocumentationPartOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDocumentationPartInput, ...func(*apigateway.Options)) *apigateway.CreateDocumentationPartOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateDocumentationPartOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateDocumentationPartInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDocumentationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDocumentationVersion(ctx context.Context, params *apigateway.CreateDocumentationVersionInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateDocumentationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDocumentationVersion")
	}

	var r0 *apigateway.CreateDocumentationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDocumentationVersionInput, ...func(*apigateway.Options)) (*apigateway.CreateDocumentationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDocumentationVersionInput, ...func(*apigateway.Options)) *apigateway.CreateDocumentationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateDocumentationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateDocumentationVersionInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomainName(ctx context.Context, params *apigateway.CreateDomainNameInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainName")
	}

	var r0 *apigateway.CreateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDomainNameInput, ...func(*apigateway.Options)) (*apigateway.CreateDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDomainNameInput, ...func(*apigateway.Options)) *apigateway.CreateDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateDomainNameInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainNameAccessAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomainNameAccessAssociation(ctx context.Context, params *apigateway.CreateDomainNameAccessAssociationInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateDomainNameAccessAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainNameAccessAssociation")
	}

	var r0 *apigateway.CreateDomainNameAccessAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDomainNameAccessAssociationInput, ...func(*apigateway.Options)) (*apigateway.CreateDomainNameAccessAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateDomainNameAccessAssociationInput, ...func(*apigateway.Options)) *apigateway.CreateDomainNameAccessAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateDomainNameAccessAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateDomainNameAccessAssociationInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModel(ctx context.Context, params *apigateway.CreateModelInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModel")
	}

	var r0 *apigateway.CreateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateModelInput, ...func(*apigateway.Options)) (*apigateway.CreateModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateModelInput, ...func(*apigateway.Options)) *apigateway.CreateModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateModelInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRequestValidator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRequestValidator(ctx context.Context, params *apigateway.CreateRequestValidatorInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateRequestValidatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRequestValidator")
	}

	var r0 *apigateway.CreateRequestValidatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateRequestValidatorInput, ...func(*apigateway.Options)) (*apigateway.CreateRequestValidatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateRequestValidatorInput, ...func(*apigateway.Options)) *apigateway.CreateRequestValidatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateRequestValidatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateRequestValidatorInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResource(ctx context.Context, params *apigateway.CreateResourceInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 *apigateway.CreateResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateResourceInput, ...func(*apigateway.Options)) (*apigateway.CreateResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateResourceInput, ...func(*apigateway.Options)) *apigateway.CreateResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateResourceInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRestApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRestApi(ctx context.Context, params *apigateway.CreateRestApiInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateRestApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestApi")
	}

	var r0 *apigateway.CreateRestApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateRestApiInput, ...func(*apigateway.Options)) (*apigateway.CreateRestApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateRestApiInput, ...func(*apigateway.Options)) *apigateway.CreateRestApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateRestApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateRestApiInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStage(ctx context.Context, params *apigateway.CreateStageInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStage")
	}

	var r0 *apigateway.CreateStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateStageInput, ...func(*apigateway.Options)) (*apigateway.CreateStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateStageInput, ...func(*apigateway.Options)) *apigateway.CreateStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateStageInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUsagePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUsagePlan(ctx context.Context, params *apigateway.CreateUsagePlanInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateUsagePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUsagePlan")
	}

	var r0 *apigateway.CreateUsagePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateUsagePlanInput, ...func(*apigateway.Options)) (*apigateway.CreateUsagePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateUsagePlanInput, ...func(*apigateway.Options)) *apigateway.CreateUsagePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateUsagePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateUsagePlanInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUsagePlanKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUsagePlanKey(ctx context.Context, params *apigateway.CreateUsagePlanKeyInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateUsagePlanKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUsagePlanKey")
	}

	var r0 *apigateway.CreateUsagePlanKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateUsagePlanKeyInput, ...func(*apigateway.Options)) (*apigateway.CreateUsagePlanKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateUsagePlanKeyInput, ...func(*apigateway.Options)) *apigateway.CreateUsagePlanKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateUsagePlanKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateUsagePlanKeyInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVpcLink(ctx context.Context, params *apigateway.CreateVpcLinkInput, optFns ...func(*apigateway.Options)) (*apigateway.CreateVpcLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVpcLink")
	}

	var r0 *apigateway.CreateVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateVpcLinkInput, ...func(*apigateway.Options)) (*apigateway.CreateVpcLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.CreateVpcLinkInput, ...func(*apigateway.Options)) *apigateway.CreateVpcLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.CreateVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.CreateVpcLinkInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApiKey(ctx context.Context, params *apigateway.DeleteApiKeyInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiKey")
	}

	var r0 *apigateway.DeleteApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteApiKeyInput, ...func(*apigateway.Options)) (*apigateway.DeleteApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteApiKeyInput, ...func(*apigateway.Options)) *apigateway.DeleteApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteApiKeyInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAuthorizer(ctx context.Context, params *apigateway.DeleteAuthorizerInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthorizer")
	}

	var r0 *apigateway.DeleteAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteAuthorizerInput, ...func(*apigateway.Options)) (*apigateway.DeleteAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteAuthorizerInput, ...func(*apigateway.Options)) *apigateway.DeleteAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteAuthorizerInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBasePathMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBasePathMapping(ctx context.Context, params *apigateway.DeleteBasePathMappingInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteBasePathMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBasePathMapping")
	}

	var r0 *apigateway.DeleteBasePathMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteBasePathMappingInput, ...func(*apigateway.Options)) (*apigateway.DeleteBasePathMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteBasePathMappingInput, ...func(*apigateway.Options)) *apigateway.DeleteBasePathMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteBasePathMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteBasePathMappingInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClientCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteClientCertificate(ctx context.Context, params *apigateway.DeleteClientCertificateInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteClientCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientCertificate")
	}

	var r0 *apigateway.DeleteClientCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteClientCertificateInput, ...func(*apigateway.Options)) (*apigateway.DeleteClientCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteClientCertificateInput, ...func(*apigateway.Options)) *apigateway.DeleteClientCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteClientCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteClientCertificateInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeployment(ctx context.Context, params *apigateway.DeleteDeploymentInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 *apigateway.DeleteDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDeploymentInput, ...func(*apigateway.Options)) (*apigateway.DeleteDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDeploymentInput, ...func(*apigateway.Options)) *apigateway.DeleteDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteDeploymentInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDocumentationPart provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDocumentationPart(ctx context.Context, params *apigateway.DeleteDocumentationPartInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteDocumentationPartOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDocumentationPart")
	}

	var r0 *apigateway.DeleteDocumentationPartOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDocumentationPartInput, ...func(*apigateway.Options)) (*apigateway.DeleteDocumentationPartOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDocumentationPartInput, ...func(*apigateway.Options)) *apigateway.DeleteDocumentationPartOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteDocumentationPartOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteDocumentationPartInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDocumentationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDocumentationVersion(ctx context.Context, params *apigateway.DeleteDocumentationVersionInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteDocumentationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDocumentationVersion")
	}

	var r0 *apigateway.DeleteDocumentationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDocumentationVersionInput, ...func(*apigateway.Options)) (*apigateway.DeleteDocumentationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDocumentationVersionInput, ...func(*apigateway.Options)) *apigateway.DeleteDocumentationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteDocumentationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteDocumentationVersionInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomainName(ctx context.Context, params *apigateway.DeleteDomainNameInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainName")
	}

	var r0 *apigateway.DeleteDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDomainNameInput, ...func(*apigateway.Options)) (*apigateway.DeleteDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDomainNameInput, ...func(*apigateway.Options)) *apigateway.DeleteDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteDomainNameInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainNameAccessAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomainNameAccessAssociation(ctx context.Context, params *apigateway.DeleteDomainNameAccessAssociationInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteDomainNameAccessAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainNameAccessAssociation")
	}

	var r0 *apigateway.DeleteDomainNameAccessAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDomainNameAccessAssociationInput, ...func(*apigateway.Options)) (*apigateway.DeleteDomainNameAccessAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteDomainNameAccessAssociationInput, ...func(*apigateway.Options)) *apigateway.DeleteDomainNameAccessAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteDomainNameAccessAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteDomainNameAccessAssociationInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGatewayResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGatewayResponse(ctx context.Context, params *apigateway.DeleteGatewayResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteGatewayResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGatewayResponse")
	}

	var r0 *apigateway.DeleteGatewayResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteGatewayResponseInput, ...func(*apigateway.Options)) (*apigateway.DeleteGatewayResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteGatewayResponseInput, ...func(*apigateway.Options)) *apigateway.DeleteGatewayResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteGatewayResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteGatewayResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntegration(ctx context.Context, params *apigateway.DeleteIntegrationInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegration")
	}

	var r0 *apigateway.DeleteIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteIntegrationInput, ...func(*apigateway.Options)) (*apigateway.DeleteIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteIntegrationInput, ...func(*apigateway.Options)) *apigateway.DeleteIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteIntegrationInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegrationResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntegrationResponse(ctx context.Context, params *apigateway.DeleteIntegrationResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegrationResponse")
	}

	var r0 *apigateway.DeleteIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteIntegrationResponseInput, ...func(*apigateway.Options)) (*apigateway.DeleteIntegrationResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteIntegrationResponseInput, ...func(*apigateway.Options)) *apigateway.DeleteIntegrationResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteIntegrationResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMethod(ctx context.Context, params *apigateway.DeleteMethodInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMethod")
	}

	var r0 *apigateway.DeleteMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteMethodInput, ...func(*apigateway.Options)) (*apigateway.DeleteMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteMethodInput, ...func(*apigateway.Options)) *apigateway.DeleteMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteMethodInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMethodResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMethodResponse(ctx context.Context, params *apigateway.DeleteMethodResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteMethodResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMethodResponse")
	}

	var r0 *apigateway.DeleteMethodResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteMethodResponseInput, ...func(*apigateway.Options)) (*apigateway.DeleteMethodResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteMethodResponseInput, ...func(*apigateway.Options)) *apigateway.DeleteMethodResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteMethodResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteMethodResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModel(ctx context.Context, params *apigateway.DeleteModelInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModel")
	}

	var r0 *apigateway.DeleteModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteModelInput, ...func(*apigateway.Options)) (*apigateway.DeleteModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteModelInput, ...func(*apigateway.Options)) *apigateway.DeleteModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteModelInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRequestValidator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRequestValidator(ctx context.Context, params *apigateway.DeleteRequestValidatorInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteRequestValidatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRequestValidator")
	}

	var r0 *apigateway.DeleteRequestValidatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteRequestValidatorInput, ...func(*apigateway.Options)) (*apigateway.DeleteRequestValidatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteRequestValidatorInput, ...func(*apigateway.Options)) *apigateway.DeleteRequestValidatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteRequestValidatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteRequestValidatorInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResource(ctx context.Context, params *apigateway.DeleteResourceInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 *apigateway.DeleteResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteResourceInput, ...func(*apigateway.Options)) (*apigateway.DeleteResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteResourceInput, ...func(*apigateway.Options)) *apigateway.DeleteResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteResourceInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRestApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRestApi(ctx context.Context, params *apigateway.DeleteRestApiInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteRestApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRestApi")
	}

	var r0 *apigateway.DeleteRestApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteRestApiInput, ...func(*apigateway.Options)) (*apigateway.DeleteRestApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteRestApiInput, ...func(*apigateway.Options)) *apigateway.DeleteRestApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteRestApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteRestApiInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStage(ctx context.Context, params *apigateway.DeleteStageInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStage")
	}

	var r0 *apigateway.DeleteStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteStageInput, ...func(*apigateway.Options)) (*apigateway.DeleteStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteStageInput, ...func(*apigateway.Options)) *apigateway.DeleteStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteStageInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsagePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUsagePlan(ctx context.Context, params *apigateway.DeleteUsagePlanInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteUsagePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUsagePlan")
	}

	var r0 *apigateway.DeleteUsagePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteUsagePlanInput, ...func(*apigateway.Options)) (*apigateway.DeleteUsagePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteUsagePlanInput, ...func(*apigateway.Options)) *apigateway.DeleteUsagePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteUsagePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteUsagePlanInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsagePlanKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUsagePlanKey(ctx context.Context, params *apigateway.DeleteUsagePlanKeyInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteUsagePlanKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUsagePlanKey")
	}

	var r0 *apigateway.DeleteUsagePlanKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteUsagePlanKeyInput, ...func(*apigateway.Options)) (*apigateway.DeleteUsagePlanKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteUsagePlanKeyInput, ...func(*apigateway.Options)) *apigateway.DeleteUsagePlanKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteUsagePlanKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteUsagePlanKeyInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVpcLink(ctx context.Context, params *apigateway.DeleteVpcLinkInput, optFns ...func(*apigateway.Options)) (*apigateway.DeleteVpcLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcLink")
	}

	var r0 *apigateway.DeleteVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteVpcLinkInput, ...func(*apigateway.Options)) (*apigateway.DeleteVpcLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.DeleteVpcLinkInput, ...func(*apigateway.Options)) *apigateway.DeleteVpcLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.DeleteVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.DeleteVpcLinkInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushStageAuthorizersCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FlushStageAuthorizersCache(ctx context.Context, params *apigateway.FlushStageAuthorizersCacheInput, optFns ...func(*apigateway.Options)) (*apigateway.FlushStageAuthorizersCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FlushStageAuthorizersCache")
	}

	var r0 *apigateway.FlushStageAuthorizersCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.FlushStageAuthorizersCacheInput, ...func(*apigateway.Options)) (*apigateway.FlushStageAuthorizersCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.FlushStageAuthorizersCacheInput, ...func(*apigateway.Options)) *apigateway.FlushStageAuthorizersCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.FlushStageAuthorizersCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.FlushStageAuthorizersCacheInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushStageCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FlushStageCache(ctx context.Context, params *apigateway.FlushStageCacheInput, optFns ...func(*apigateway.Options)) (*apigateway.FlushStageCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FlushStageCache")
	}

	var r0 *apigateway.FlushStageCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.FlushStageCacheInput, ...func(*apigateway.Options)) (*apigateway.FlushStageCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.FlushStageCacheInput, ...func(*apigateway.Options)) *apigateway.FlushStageCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.FlushStageCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.FlushStageCacheInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateClientCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateClientCertificate(ctx context.Context, params *apigateway.GenerateClientCertificateInput, optFns ...func(*apigateway.Options)) (*apigateway.GenerateClientCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateClientCertificate")
	}

	var r0 *apigateway.GenerateClientCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GenerateClientCertificateInput, ...func(*apigateway.Options)) (*apigateway.GenerateClientCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GenerateClientCertificateInput, ...func(*apigateway.Options)) *apigateway.GenerateClientCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GenerateClientCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GenerateClientCertificateInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccount(ctx context.Context, params *apigateway.GetAccountInput, optFns ...func(*apigateway.Options)) (*apigateway.GetAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *apigateway.GetAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetAccountInput, ...func(*apigateway.Options)) (*apigateway.GetAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetAccountInput, ...func(*apigateway.Options)) *apigateway.GetAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetAccountInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApiKey(ctx context.Context, params *apigateway.GetApiKeyInput, optFns ...func(*apigateway.Options)) (*apigateway.GetApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiKey")
	}

	var r0 *apigateway.GetApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetApiKeyInput, ...func(*apigateway.Options)) (*apigateway.GetApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetApiKeyInput, ...func(*apigateway.Options)) *apigateway.GetApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetApiKeyInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApiKeys(ctx context.Context, params *apigateway.GetApiKeysInput, optFns ...func(*apigateway.Options)) (*apigateway.GetApiKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiKeys")
	}

	var r0 *apigateway.GetApiKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetApiKeysInput, ...func(*apigateway.Options)) (*apigateway.GetApiKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetApiKeysInput, ...func(*apigateway.Options)) *apigateway.GetApiKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetApiKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetApiKeysInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAuthorizer(ctx context.Context, params *apigateway.GetAuthorizerInput, optFns ...func(*apigateway.Options)) (*apigateway.GetAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizer")
	}

	var r0 *apigateway.GetAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetAuthorizerInput, ...func(*apigateway.Options)) (*apigateway.GetAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetAuthorizerInput, ...func(*apigateway.Options)) *apigateway.GetAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetAuthorizerInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAuthorizers(ctx context.Context, params *apigateway.GetAuthorizersInput, optFns ...func(*apigateway.Options)) (*apigateway.GetAuthorizersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizers")
	}

	var r0 *apigateway.GetAuthorizersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetAuthorizersInput, ...func(*apigateway.Options)) (*apigateway.GetAuthorizersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetAuthorizersInput, ...func(*apigateway.Options)) *apigateway.GetAuthorizersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetAuthorizersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetAuthorizersInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasePathMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBasePathMapping(ctx context.Context, params *apigateway.GetBasePathMappingInput, optFns ...func(*apigateway.Options)) (*apigateway.GetBasePathMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBasePathMapping")
	}

	var r0 *apigateway.GetBasePathMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetBasePathMappingInput, ...func(*apigateway.Options)) (*apigateway.GetBasePathMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetBasePathMappingInput, ...func(*apigateway.Options)) *apigateway.GetBasePathMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetBasePathMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetBasePathMappingInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBasePathMappings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBasePathMappings(ctx context.Context, params *apigateway.GetBasePathMappingsInput, optFns ...func(*apigateway.Options)) (*apigateway.GetBasePathMappingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBasePathMappings")
	}

	var r0 *apigateway.GetBasePathMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetBasePathMappingsInput, ...func(*apigateway.Options)) (*apigateway.GetBasePathMappingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetBasePathMappingsInput, ...func(*apigateway.Options)) *apigateway.GetBasePathMappingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetBasePathMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetBasePathMappingsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetClientCertificate(ctx context.Context, params *apigateway.GetClientCertificateInput, optFns ...func(*apigateway.Options)) (*apigateway.GetClientCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClientCertificate")
	}

	var r0 *apigateway.GetClientCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetClientCertificateInput, ...func(*apigateway.Options)) (*apigateway.GetClientCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetClientCertificateInput, ...func(*apigateway.Options)) *apigateway.GetClientCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetClientCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetClientCertificateInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetClientCertificates(ctx context.Context, params *apigateway.GetClientCertificatesInput, optFns ...func(*apigateway.Options)) (*apigateway.GetClientCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClientCertificates")
	}

	var r0 *apigateway.GetClientCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetClientCertificatesInput, ...func(*apigateway.Options)) (*apigateway.GetClientCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetClientCertificatesInput, ...func(*apigateway.Options)) *apigateway.GetClientCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetClientCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetClientCertificatesInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployment(ctx context.Context, params *apigateway.GetDeploymentInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *apigateway.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDeploymentInput, ...func(*apigateway.Options)) (*apigateway.GetDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDeploymentInput, ...func(*apigateway.Options)) *apigateway.GetDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDeploymentInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployments(ctx context.Context, params *apigateway.GetDeploymentsInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployments")
	}

	var r0 *apigateway.GetDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDeploymentsInput, ...func(*apigateway.Options)) (*apigateway.GetDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDeploymentsInput, ...func(*apigateway.Options)) *apigateway.GetDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDeploymentsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocumentationPart provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDocumentationPart(ctx context.Context, params *apigateway.GetDocumentationPartInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDocumentationPartOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentationPart")
	}

	var r0 *apigateway.GetDocumentationPartOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDocumentationPartInput, ...func(*apigateway.Options)) (*apigateway.GetDocumentationPartOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDocumentationPartInput, ...func(*apigateway.Options)) *apigateway.GetDocumentationPartOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDocumentationPartOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDocumentationPartInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocumentationParts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDocumentationParts(ctx context.Context, params *apigateway.GetDocumentationPartsInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDocumentationPartsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentationParts")
	}

	var r0 *apigateway.GetDocumentationPartsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDocumentationPartsInput, ...func(*apigateway.Options)) (*apigateway.GetDocumentationPartsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDocumentationPartsInput, ...func(*apigateway.Options)) *apigateway.GetDocumentationPartsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDocumentationPartsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDocumentationPartsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocumentationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDocumentationVersion(ctx context.Context, params *apigateway.GetDocumentationVersionInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDocumentationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentationVersion")
	}

	var r0 *apigateway.GetDocumentationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDocumentationVersionInput, ...func(*apigateway.Options)) (*apigateway.GetDocumentationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDocumentationVersionInput, ...func(*apigateway.Options)) *apigateway.GetDocumentationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDocumentationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDocumentationVersionInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocumentationVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDocumentationVersions(ctx context.Context, params *apigateway.GetDocumentationVersionsInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDocumentationVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentationVersions")
	}

	var r0 *apigateway.GetDocumentationVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDocumentationVersionsInput, ...func(*apigateway.Options)) (*apigateway.GetDocumentationVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDocumentationVersionsInput, ...func(*apigateway.Options)) *apigateway.GetDocumentationVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDocumentationVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDocumentationVersionsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainName(ctx context.Context, params *apigateway.GetDomainNameInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainName")
	}

	var r0 *apigateway.GetDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDomainNameInput, ...func(*apigateway.Options)) (*apigateway.GetDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDomainNameInput, ...func(*apigateway.Options)) *apigateway.GetDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDomainNameInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainNameAccessAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainNameAccessAssociations(ctx context.Context, params *apigateway.GetDomainNameAccessAssociationsInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDomainNameAccessAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainNameAccessAssociations")
	}

	var r0 *apigateway.GetDomainNameAccessAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDomainNameAccessAssociationsInput, ...func(*apigateway.Options)) (*apigateway.GetDomainNameAccessAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDomainNameAccessAssociationsInput, ...func(*apigateway.Options)) *apigateway.GetDomainNameAccessAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDomainNameAccessAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDomainNameAccessAssociationsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainNames provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainNames(ctx context.Context, params *apigateway.GetDomainNamesInput, optFns ...func(*apigateway.Options)) (*apigateway.GetDomainNamesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainNames")
	}

	var r0 *apigateway.GetDomainNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDomainNamesInput, ...func(*apigateway.Options)) (*apigateway.GetDomainNamesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetDomainNamesInput, ...func(*apigateway.Options)) *apigateway.GetDomainNamesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetDomainNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetDomainNamesInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExport(ctx context.Context, params *apigateway.GetExportInput, optFns ...func(*apigateway.Options)) (*apigateway.GetExportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExport")
	}

	var r0 *apigateway.GetExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetExportInput, ...func(*apigateway.Options)) (*apigateway.GetExportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetExportInput, ...func(*apigateway.Options)) *apigateway.GetExportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetExportInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGatewayResponse(ctx context.Context, params *apigateway.GetGatewayResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.GetGatewayResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayResponse")
	}

	var r0 *apigateway.GetGatewayResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetGatewayResponseInput, ...func(*apigateway.Options)) (*apigateway.GetGatewayResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetGatewayResponseInput, ...func(*apigateway.Options)) *apigateway.GetGatewayResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetGatewayResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetGatewayResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayResponses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGatewayResponses(ctx context.Context, params *apigateway.GetGatewayResponsesInput, optFns ...func(*apigateway.Options)) (*apigateway.GetGatewayResponsesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayResponses")
	}

	var r0 *apigateway.GetGatewayResponsesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetGatewayResponsesInput, ...func(*apigateway.Options)) (*apigateway.GetGatewayResponsesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetGatewayResponsesInput, ...func(*apigateway.Options)) *apigateway.GetGatewayResponsesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetGatewayResponsesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetGatewayResponsesInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntegration(ctx context.Context, params *apigateway.GetIntegrationInput, optFns ...func(*apigateway.Options)) (*apigateway.GetIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegration")
	}

	var r0 *apigateway.GetIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetIntegrationInput, ...func(*apigateway.Options)) (*apigateway.GetIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetIntegrationInput, ...func(*apigateway.Options)) *apigateway.GetIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetIntegrationInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntegrationResponse(ctx context.Context, params *apigateway.GetIntegrationResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.GetIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationResponse")
	}

	var r0 *apigateway.GetIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetIntegrationResponseInput, ...func(*apigateway.Options)) (*apigateway.GetIntegrationResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetIntegrationResponseInput, ...func(*apigateway.Options)) *apigateway.GetIntegrationResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetIntegrationResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMethod(ctx context.Context, params *apigateway.GetMethodInput, optFns ...func(*apigateway.Options)) (*apigateway.GetMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMethod")
	}

	var r0 *apigateway.GetMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetMethodInput, ...func(*apigateway.Options)) (*apigateway.GetMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetMethodInput, ...func(*apigateway.Options)) *apigateway.GetMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetMethodInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMethodResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMethodResponse(ctx context.Context, params *apigateway.GetMethodResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.GetMethodResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMethodResponse")
	}

	var r0 *apigateway.GetMethodResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetMethodResponseInput, ...func(*apigateway.Options)) (*apigateway.GetMethodResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetMethodResponseInput, ...func(*apigateway.Options)) *apigateway.GetMethodResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetMethodResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetMethodResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetModel(ctx context.Context, params *apigateway.GetModelInput, optFns ...func(*apigateway.Options)) (*apigateway.GetModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModel")
	}

	var r0 *apigateway.GetModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetModelInput, ...func(*apigateway.Options)) (*apigateway.GetModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetModelInput, ...func(*apigateway.Options)) *apigateway.GetModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetModelInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetModelTemplate(ctx context.Context, params *apigateway.GetModelTemplateInput, optFns ...func(*apigateway.Options)) (*apigateway.GetModelTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModelTemplate")
	}

	var r0 *apigateway.GetModelTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetModelTemplateInput, ...func(*apigateway.Options)) (*apigateway.GetModelTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetModelTemplateInput, ...func(*apigateway.Options)) *apigateway.GetModelTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetModelTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetModelTemplateInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetModels(ctx context.Context, params *apigateway.GetModelsInput, optFns ...func(*apigateway.Options)) (*apigateway.GetModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModels")
	}

	var r0 *apigateway.GetModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetModelsInput, ...func(*apigateway.Options)) (*apigateway.GetModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetModelsInput, ...func(*apigateway.Options)) *apigateway.GetModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetModelsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestValidator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRequestValidator(ctx context.Context, params *apigateway.GetRequestValidatorInput, optFns ...func(*apigateway.Options)) (*apigateway.GetRequestValidatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestValidator")
	}

	var r0 *apigateway.GetRequestValidatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetRequestValidatorInput, ...func(*apigateway.Options)) (*apigateway.GetRequestValidatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetRequestValidatorInput, ...func(*apigateway.Options)) *apigateway.GetRequestValidatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetRequestValidatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetRequestValidatorInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRequestValidators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRequestValidators(ctx context.Context, params *apigateway.GetRequestValidatorsInput, optFns ...func(*apigateway.Options)) (*apigateway.GetRequestValidatorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRequestValidators")
	}

	var r0 *apigateway.GetRequestValidatorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetRequestValidatorsInput, ...func(*apigateway.Options)) (*apigateway.GetRequestValidatorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetRequestValidatorsInput, ...func(*apigateway.Options)) *apigateway.GetRequestValidatorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetRequestValidatorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetRequestValidatorsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResource(ctx context.Context, params *apigateway.GetResourceInput, optFns ...func(*apigateway.Options)) (*apigateway.GetResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResource")
	}

	var r0 *apigateway.GetResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetResourceInput, ...func(*apigateway.Options)) (*apigateway.GetResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetResourceInput, ...func(*apigateway.Options)) *apigateway.GetResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetResourceInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResources(ctx context.Context, params *apigateway.GetResourcesInput, optFns ...func(*apigateway.Options)) (*apigateway.GetResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 *apigateway.GetResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetResourcesInput, ...func(*apigateway.Options)) (*apigateway.GetResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetResourcesInput, ...func(*apigateway.Options)) *apigateway.GetResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetResourcesInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRestApi(ctx context.Context, params *apigateway.GetRestApiInput, optFns ...func(*apigateway.Options)) (*apigateway.GetRestApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRestApi")
	}

	var r0 *apigateway.GetRestApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetRestApiInput, ...func(*apigateway.Options)) (*apigateway.GetRestApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetRestApiInput, ...func(*apigateway.Options)) *apigateway.GetRestApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetRestApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetRestApiInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestApis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRestApis(ctx context.Context, params *apigateway.GetRestApisInput, optFns ...func(*apigateway.Options)) (*apigateway.GetRestApisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRestApis")
	}

	var r0 *apigateway.GetRestApisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetRestApisInput, ...func(*apigateway.Options)) (*apigateway.GetRestApisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetRestApisInput, ...func(*apigateway.Options)) *apigateway.GetRestApisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetRestApisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetRestApisInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSdk provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSdk(ctx context.Context, params *apigateway.GetSdkInput, optFns ...func(*apigateway.Options)) (*apigateway.GetSdkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSdk")
	}

	var r0 *apigateway.GetSdkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetSdkInput, ...func(*apigateway.Options)) (*apigateway.GetSdkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetSdkInput, ...func(*apigateway.Options)) *apigateway.GetSdkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetSdkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetSdkInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSdkType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSdkType(ctx context.Context, params *apigateway.GetSdkTypeInput, optFns ...func(*apigateway.Options)) (*apigateway.GetSdkTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSdkType")
	}

	var r0 *apigateway.GetSdkTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetSdkTypeInput, ...func(*apigateway.Options)) (*apigateway.GetSdkTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetSdkTypeInput, ...func(*apigateway.Options)) *apigateway.GetSdkTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetSdkTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetSdkTypeInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSdkTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSdkTypes(ctx context.Context, params *apigateway.GetSdkTypesInput, optFns ...func(*apigateway.Options)) (*apigateway.GetSdkTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSdkTypes")
	}

	var r0 *apigateway.GetSdkTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetSdkTypesInput, ...func(*apigateway.Options)) (*apigateway.GetSdkTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetSdkTypesInput, ...func(*apigateway.Options)) *apigateway.GetSdkTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetSdkTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetSdkTypesInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStage(ctx context.Context, params *apigateway.GetStageInput, optFns ...func(*apigateway.Options)) (*apigateway.GetStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStage")
	}

	var r0 *apigateway.GetStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetStageInput, ...func(*apigateway.Options)) (*apigateway.GetStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetStageInput, ...func(*apigateway.Options)) *apigateway.GetStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetStageInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStages(ctx context.Context, params *apigateway.GetStagesInput, optFns ...func(*apigateway.Options)) (*apigateway.GetStagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStages")
	}

	var r0 *apigateway.GetStagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetStagesInput, ...func(*apigateway.Options)) (*apigateway.GetStagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetStagesInput, ...func(*apigateway.Options)) *apigateway.GetStagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetStagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetStagesInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTags(ctx context.Context, params *apigateway.GetTagsInput, optFns ...func(*apigateway.Options)) (*apigateway.GetTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 *apigateway.GetTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetTagsInput, ...func(*apigateway.Options)) (*apigateway.GetTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetTagsInput, ...func(*apigateway.Options)) *apigateway.GetTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetTagsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsage(ctx context.Context, params *apigateway.GetUsageInput, optFns ...func(*apigateway.Options)) (*apigateway.GetUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsage")
	}

	var r0 *apigateway.GetUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsageInput, ...func(*apigateway.Options)) (*apigateway.GetUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsageInput, ...func(*apigateway.Options)) *apigateway.GetUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetUsageInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsagePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsagePlan(ctx context.Context, params *apigateway.GetUsagePlanInput, optFns ...func(*apigateway.Options)) (*apigateway.GetUsagePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsagePlan")
	}

	var r0 *apigateway.GetUsagePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsagePlanInput, ...func(*apigateway.Options)) (*apigateway.GetUsagePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsagePlanInput, ...func(*apigateway.Options)) *apigateway.GetUsagePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetUsagePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetUsagePlanInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsagePlanKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsagePlanKey(ctx context.Context, params *apigateway.GetUsagePlanKeyInput, optFns ...func(*apigateway.Options)) (*apigateway.GetUsagePlanKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsagePlanKey")
	}

	var r0 *apigateway.GetUsagePlanKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsagePlanKeyInput, ...func(*apigateway.Options)) (*apigateway.GetUsagePlanKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsagePlanKeyInput, ...func(*apigateway.Options)) *apigateway.GetUsagePlanKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetUsagePlanKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetUsagePlanKeyInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsagePlanKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsagePlanKeys(ctx context.Context, params *apigateway.GetUsagePlanKeysInput, optFns ...func(*apigateway.Options)) (*apigateway.GetUsagePlanKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsagePlanKeys")
	}

	var r0 *apigateway.GetUsagePlanKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsagePlanKeysInput, ...func(*apigateway.Options)) (*apigateway.GetUsagePlanKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsagePlanKeysInput, ...func(*apigateway.Options)) *apigateway.GetUsagePlanKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetUsagePlanKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetUsagePlanKeysInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsagePlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsagePlans(ctx context.Context, params *apigateway.GetUsagePlansInput, optFns ...func(*apigateway.Options)) (*apigateway.GetUsagePlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsagePlans")
	}

	var r0 *apigateway.GetUsagePlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsagePlansInput, ...func(*apigateway.Options)) (*apigateway.GetUsagePlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetUsagePlansInput, ...func(*apigateway.Options)) *apigateway.GetUsagePlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetUsagePlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetUsagePlansInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVpcLink(ctx context.Context, params *apigateway.GetVpcLinkInput, optFns ...func(*apigateway.Options)) (*apigateway.GetVpcLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVpcLink")
	}

	var r0 *apigateway.GetVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetVpcLinkInput, ...func(*apigateway.Options)) (*apigateway.GetVpcLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetVpcLinkInput, ...func(*apigateway.Options)) *apigateway.GetVpcLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetVpcLinkInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcLinks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVpcLinks(ctx context.Context, params *apigateway.GetVpcLinksInput, optFns ...func(*apigateway.Options)) (*apigateway.GetVpcLinksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVpcLinks")
	}

	var r0 *apigateway.GetVpcLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetVpcLinksInput, ...func(*apigateway.Options)) (*apigateway.GetVpcLinksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.GetVpcLinksInput, ...func(*apigateway.Options)) *apigateway.GetVpcLinksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.GetVpcLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.GetVpcLinksInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportApiKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportApiKeys(ctx context.Context, params *apigateway.ImportApiKeysInput, optFns ...func(*apigateway.Options)) (*apigateway.ImportApiKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportApiKeys")
	}

	var r0 *apigateway.ImportApiKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.ImportApiKeysInput, ...func(*apigateway.Options)) (*apigateway.ImportApiKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.ImportApiKeysInput, ...func(*apigateway.Options)) *apigateway.ImportApiKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.ImportApiKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.ImportApiKeysInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportDocumentationParts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportDocumentationParts(ctx context.Context, params *apigateway.ImportDocumentationPartsInput, optFns ...func(*apigateway.Options)) (*apigateway.ImportDocumentationPartsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportDocumentationParts")
	}

	var r0 *apigateway.ImportDocumentationPartsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.ImportDocumentationPartsInput, ...func(*apigateway.Options)) (*apigateway.ImportDocumentationPartsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.ImportDocumentationPartsInput, ...func(*apigateway.Options)) *apigateway.ImportDocumentationPartsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.ImportDocumentationPartsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.ImportDocumentationPartsInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportRestApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportRestApi(ctx context.Context, params *apigateway.ImportRestApiInput, optFns ...func(*apigateway.Options)) (*apigateway.ImportRestApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportRestApi")
	}

	var r0 *apigateway.ImportRestApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.ImportRestApiInput, ...func(*apigateway.Options)) (*apigateway.ImportRestApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.ImportRestApiInput, ...func(*apigateway.Options)) *apigateway.ImportRestApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.ImportRestApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.ImportRestApiInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() apigateway.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 apigateway.Options
	if rf, ok := ret.Get(0).(func() apigateway.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(apigateway.Options)
	}

	return r0
}

// PutGatewayResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutGatewayResponse(ctx context.Context, params *apigateway.PutGatewayResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.PutGatewayResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutGatewayResponse")
	}

	var r0 *apigateway.PutGatewayResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutGatewayResponseInput, ...func(*apigateway.Options)) (*apigateway.PutGatewayResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutGatewayResponseInput, ...func(*apigateway.Options)) *apigateway.PutGatewayResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.PutGatewayResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.PutGatewayResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutIntegration(ctx context.Context, params *apigateway.PutIntegrationInput, optFns ...func(*apigateway.Options)) (*apigateway.PutIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutIntegration")
	}

	var r0 *apigateway.PutIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutIntegrationInput, ...func(*apigateway.Options)) (*apigateway.PutIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutIntegrationInput, ...func(*apigateway.Options)) *apigateway.PutIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.PutIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.PutIntegrationInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutIntegrationResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutIntegrationResponse(ctx context.Context, params *apigateway.PutIntegrationResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.PutIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutIntegrationResponse")
	}

	var r0 *apigateway.PutIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutIntegrationResponseInput, ...func(*apigateway.Options)) (*apigateway.PutIntegrationResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutIntegrationResponseInput, ...func(*apigateway.Options)) *apigateway.PutIntegrationResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.PutIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.PutIntegrationResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMethod(ctx context.Context, params *apigateway.PutMethodInput, optFns ...func(*apigateway.Options)) (*apigateway.PutMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMethod")
	}

	var r0 *apigateway.PutMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutMethodInput, ...func(*apigateway.Options)) (*apigateway.PutMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutMethodInput, ...func(*apigateway.Options)) *apigateway.PutMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.PutMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.PutMethodInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMethodResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMethodResponse(ctx context.Context, params *apigateway.PutMethodResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.PutMethodResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMethodResponse")
	}

	var r0 *apigateway.PutMethodResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutMethodResponseInput, ...func(*apigateway.Options)) (*apigateway.PutMethodResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutMethodResponseInput, ...func(*apigateway.Options)) *apigateway.PutMethodResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.PutMethodResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.PutMethodResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRestApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRestApi(ctx context.Context, params *apigateway.PutRestApiInput, optFns ...func(*apigateway.Options)) (*apigateway.PutRestApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRestApi")
	}

	var r0 *apigateway.PutRestApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutRestApiInput, ...func(*apigateway.Options)) (*apigateway.PutRestApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.PutRestApiInput, ...func(*apigateway.Options)) *apigateway.PutRestApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.PutRestApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.PutRestApiInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectDomainNameAccessAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectDomainNameAccessAssociation(ctx context.Context, params *apigateway.RejectDomainNameAccessAssociationInput, optFns ...func(*apigateway.Options)) (*apigateway.RejectDomainNameAccessAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectDomainNameAccessAssociation")
	}

	var r0 *apigateway.RejectDomainNameAccessAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.RejectDomainNameAccessAssociationInput, ...func(*apigateway.Options)) (*apigateway.RejectDomainNameAccessAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.RejectDomainNameAccessAssociationInput, ...func(*apigateway.Options)) *apigateway.RejectDomainNameAccessAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.RejectDomainNameAccessAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.RejectDomainNameAccessAssociationInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *apigateway.TagResourceInput, optFns ...func(*apigateway.Options)) (*apigateway.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *apigateway.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.TagResourceInput, ...func(*apigateway.Options)) (*apigateway.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.TagResourceInput, ...func(*apigateway.Options)) *apigateway.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.TagResourceInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestInvokeAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestInvokeAuthorizer(ctx context.Context, params *apigateway.TestInvokeAuthorizerInput, optFns ...func(*apigateway.Options)) (*apigateway.TestInvokeAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestInvokeAuthorizer")
	}

	var r0 *apigateway.TestInvokeAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.TestInvokeAuthorizerInput, ...func(*apigateway.Options)) (*apigateway.TestInvokeAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.TestInvokeAuthorizerInput, ...func(*apigateway.Options)) *apigateway.TestInvokeAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.TestInvokeAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.TestInvokeAuthorizerInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestInvokeMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestInvokeMethod(ctx context.Context, params *apigateway.TestInvokeMethodInput, optFns ...func(*apigateway.Options)) (*apigateway.TestInvokeMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestInvokeMethod")
	}

	var r0 *apigateway.TestInvokeMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.TestInvokeMethodInput, ...func(*apigateway.Options)) (*apigateway.TestInvokeMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.TestInvokeMethodInput, ...func(*apigateway.Options)) *apigateway.TestInvokeMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.TestInvokeMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.TestInvokeMethodInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *apigateway.UntagResourceInput, optFns ...func(*apigateway.Options)) (*apigateway.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *apigateway.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UntagResourceInput, ...func(*apigateway.Options)) (*apigateway.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UntagResourceInput, ...func(*apigateway.Options)) *apigateway.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UntagResourceInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccount(ctx context.Context, params *apigateway.UpdateAccountInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccount")
	}

	var r0 *apigateway.UpdateAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateAccountInput, ...func(*apigateway.Options)) (*apigateway.UpdateAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateAccountInput, ...func(*apigateway.Options)) *apigateway.UpdateAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateAccountInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApiKey(ctx context.Context, params *apigateway.UpdateApiKeyInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKey")
	}

	var r0 *apigateway.UpdateApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateApiKeyInput, ...func(*apigateway.Options)) (*apigateway.UpdateApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateApiKeyInput, ...func(*apigateway.Options)) *apigateway.UpdateApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateApiKeyInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAuthorizer(ctx context.Context, params *apigateway.UpdateAuthorizerInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthorizer")
	}

	var r0 *apigateway.UpdateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateAuthorizerInput, ...func(*apigateway.Options)) (*apigateway.UpdateAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateAuthorizerInput, ...func(*apigateway.Options)) *apigateway.UpdateAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateAuthorizerInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBasePathMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBasePathMapping(ctx context.Context, params *apigateway.UpdateBasePathMappingInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateBasePathMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBasePathMapping")
	}

	var r0 *apigateway.UpdateBasePathMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateBasePathMappingInput, ...func(*apigateway.Options)) (*apigateway.UpdateBasePathMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateBasePathMappingInput, ...func(*apigateway.Options)) *apigateway.UpdateBasePathMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateBasePathMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateBasePathMappingInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClientCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateClientCertificate(ctx context.Context, params *apigateway.UpdateClientCertificateInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateClientCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientCertificate")
	}

	var r0 *apigateway.UpdateClientCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateClientCertificateInput, ...func(*apigateway.Options)) (*apigateway.UpdateClientCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateClientCertificateInput, ...func(*apigateway.Options)) *apigateway.UpdateClientCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateClientCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateClientCertificateInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeployment(ctx context.Context, params *apigateway.UpdateDeploymentInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployment")
	}

	var r0 *apigateway.UpdateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateDeploymentInput, ...func(*apigateway.Options)) (*apigateway.UpdateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateDeploymentInput, ...func(*apigateway.Options)) *apigateway.UpdateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateDeploymentInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDocumentationPart provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDocumentationPart(ctx context.Context, params *apigateway.UpdateDocumentationPartInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateDocumentationPartOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDocumentationPart")
	}

	var r0 *apigateway.UpdateDocumentationPartOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateDocumentationPartInput, ...func(*apigateway.Options)) (*apigateway.UpdateDocumentationPartOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateDocumentationPartInput, ...func(*apigateway.Options)) *apigateway.UpdateDocumentationPartOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateDocumentationPartOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateDocumentationPartInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDocumentationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDocumentationVersion(ctx context.Context, params *apigateway.UpdateDocumentationVersionInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateDocumentationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDocumentationVersion")
	}

	var r0 *apigateway.UpdateDocumentationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateDocumentationVersionInput, ...func(*apigateway.Options)) (*apigateway.UpdateDocumentationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateDocumentationVersionInput, ...func(*apigateway.Options)) *apigateway.UpdateDocumentationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateDocumentationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateDocumentationVersionInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainName(ctx context.Context, params *apigateway.UpdateDomainNameInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainName")
	}

	var r0 *apigateway.UpdateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateDomainNameInput, ...func(*apigateway.Options)) (*apigateway.UpdateDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateDomainNameInput, ...func(*apigateway.Options)) *apigateway.UpdateDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateDomainNameInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGatewayResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGatewayResponse(ctx context.Context, params *apigateway.UpdateGatewayResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateGatewayResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewayResponse")
	}

	var r0 *apigateway.UpdateGatewayResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateGatewayResponseInput, ...func(*apigateway.Options)) (*apigateway.UpdateGatewayResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateGatewayResponseInput, ...func(*apigateway.Options)) *apigateway.UpdateGatewayResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateGatewayResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateGatewayResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIntegration(ctx context.Context, params *apigateway.UpdateIntegrationInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegration")
	}

	var r0 *apigateway.UpdateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateIntegrationInput, ...func(*apigateway.Options)) (*apigateway.UpdateIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateIntegrationInput, ...func(*apigateway.Options)) *apigateway.UpdateIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateIntegrationInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegrationResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIntegrationResponse(ctx context.Context, params *apigateway.UpdateIntegrationResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegrationResponse")
	}

	var r0 *apigateway.UpdateIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateIntegrationResponseInput, ...func(*apigateway.Options)) (*apigateway.UpdateIntegrationResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateIntegrationResponseInput, ...func(*apigateway.Options)) *apigateway.UpdateIntegrationResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateIntegrationResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMethod(ctx context.Context, params *apigateway.UpdateMethodInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMethod")
	}

	var r0 *apigateway.UpdateMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateMethodInput, ...func(*apigateway.Options)) (*apigateway.UpdateMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateMethodInput, ...func(*apigateway.Options)) *apigateway.UpdateMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateMethodInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMethodResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMethodResponse(ctx context.Context, params *apigateway.UpdateMethodResponseInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateMethodResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMethodResponse")
	}

	var r0 *apigateway.UpdateMethodResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateMethodResponseInput, ...func(*apigateway.Options)) (*apigateway.UpdateMethodResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateMethodResponseInput, ...func(*apigateway.Options)) *apigateway.UpdateMethodResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateMethodResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateMethodResponseInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateModel(ctx context.Context, params *apigateway.UpdateModelInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModel")
	}

	var r0 *apigateway.UpdateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateModelInput, ...func(*apigateway.Options)) (*apigateway.UpdateModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateModelInput, ...func(*apigateway.Options)) *apigateway.UpdateModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateModelInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRequestValidator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRequestValidator(ctx context.Context, params *apigateway.UpdateRequestValidatorInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateRequestValidatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRequestValidator")
	}

	var r0 *apigateway.UpdateRequestValidatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateRequestValidatorInput, ...func(*apigateway.Options)) (*apigateway.UpdateRequestValidatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateRequestValidatorInput, ...func(*apigateway.Options)) *apigateway.UpdateRequestValidatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateRequestValidatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateRequestValidatorInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResource(ctx context.Context, params *apigateway.UpdateResourceInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 *apigateway.UpdateResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateResourceInput, ...func(*apigateway.Options)) (*apigateway.UpdateResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateResourceInput, ...func(*apigateway.Options)) *apigateway.UpdateResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateResourceInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRestApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRestApi(ctx context.Context, params *apigateway.UpdateRestApiInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateRestApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRestApi")
	}

	var r0 *apigateway.UpdateRestApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateRestApiInput, ...func(*apigateway.Options)) (*apigateway.UpdateRestApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateRestApiInput, ...func(*apigateway.Options)) *apigateway.UpdateRestApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateRestApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateRestApiInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStage(ctx context.Context, params *apigateway.UpdateStageInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStage")
	}

	var r0 *apigateway.UpdateStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateStageInput, ...func(*apigateway.Options)) (*apigateway.UpdateStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateStageInput, ...func(*apigateway.Options)) *apigateway.UpdateStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateStageInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUsage(ctx context.Context, params *apigateway.UpdateUsageInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsage")
	}

	var r0 *apigateway.UpdateUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateUsageInput, ...func(*apigateway.Options)) (*apigateway.UpdateUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateUsageInput, ...func(*apigateway.Options)) *apigateway.UpdateUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateUsageInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUsagePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUsagePlan(ctx context.Context, params *apigateway.UpdateUsagePlanInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateUsagePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsagePlan")
	}

	var r0 *apigateway.UpdateUsagePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateUsagePlanInput, ...func(*apigateway.Options)) (*apigateway.UpdateUsagePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateUsagePlanInput, ...func(*apigateway.Options)) *apigateway.UpdateUsagePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateUsagePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateUsagePlanInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVpcLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVpcLink(ctx context.Context, params *apigateway.UpdateVpcLinkInput, optFns ...func(*apigateway.Options)) (*apigateway.UpdateVpcLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVpcLink")
	}

	var r0 *apigateway.UpdateVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateVpcLinkInput, ...func(*apigateway.Options)) (*apigateway.UpdateVpcLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigateway.UpdateVpcLinkInput, ...func(*apigateway.Options)) *apigateway.UpdateVpcLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigateway.UpdateVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigateway.UpdateVpcLinkInput, ...func(*apigateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
