// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	storagegateway "github.com/aws/aws-sdk-go-v2/service/storagegateway"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ActivateGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateGateway(ctx context.Context, params *storagegateway.ActivateGatewayInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ActivateGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateGateway")
	}

	var r0 *storagegateway.ActivateGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ActivateGatewayInput, ...func(*storagegateway.Options)) (*storagegateway.ActivateGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ActivateGatewayInput, ...func(*storagegateway.Options)) *storagegateway.ActivateGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ActivateGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ActivateGatewayInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddCache(ctx context.Context, params *storagegateway.AddCacheInput, optFns ...func(*storagegateway.Options)) (*storagegateway.AddCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddCache")
	}

	var r0 *storagegateway.AddCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AddCacheInput, ...func(*storagegateway.Options)) (*storagegateway.AddCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AddCacheInput, ...func(*storagegateway.Options)) *storagegateway.AddCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.AddCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.AddCacheInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagsToResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTagsToResource(ctx context.Context, params *storagegateway.AddTagsToResourceInput, optFns ...func(*storagegateway.Options)) (*storagegateway.AddTagsToResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToResource")
	}

	var r0 *storagegateway.AddTagsToResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AddTagsToResourceInput, ...func(*storagegateway.Options)) (*storagegateway.AddTagsToResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AddTagsToResourceInput, ...func(*storagegateway.Options)) *storagegateway.AddTagsToResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.AddTagsToResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.AddTagsToResourceInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddUploadBuffer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddUploadBuffer(ctx context.Context, params *storagegateway.AddUploadBufferInput, optFns ...func(*storagegateway.Options)) (*storagegateway.AddUploadBufferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddUploadBuffer")
	}

	var r0 *storagegateway.AddUploadBufferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AddUploadBufferInput, ...func(*storagegateway.Options)) (*storagegateway.AddUploadBufferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AddUploadBufferInput, ...func(*storagegateway.Options)) *storagegateway.AddUploadBufferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.AddUploadBufferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.AddUploadBufferInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddWorkingStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddWorkingStorage(ctx context.Context, params *storagegateway.AddWorkingStorageInput, optFns ...func(*storagegateway.Options)) (*storagegateway.AddWorkingStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddWorkingStorage")
	}

	var r0 *storagegateway.AddWorkingStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AddWorkingStorageInput, ...func(*storagegateway.Options)) (*storagegateway.AddWorkingStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AddWorkingStorageInput, ...func(*storagegateway.Options)) *storagegateway.AddWorkingStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.AddWorkingStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.AddWorkingStorageInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignTapePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssignTapePool(ctx context.Context, params *storagegateway.AssignTapePoolInput, optFns ...func(*storagegateway.Options)) (*storagegateway.AssignTapePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignTapePool")
	}

	var r0 *storagegateway.AssignTapePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AssignTapePoolInput, ...func(*storagegateway.Options)) (*storagegateway.AssignTapePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AssignTapePoolInput, ...func(*storagegateway.Options)) *storagegateway.AssignTapePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.AssignTapePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.AssignTapePoolInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateFileSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateFileSystem(ctx context.Context, params *storagegateway.AssociateFileSystemInput, optFns ...func(*storagegateway.Options)) (*storagegateway.AssociateFileSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateFileSystem")
	}

	var r0 *storagegateway.AssociateFileSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AssociateFileSystemInput, ...func(*storagegateway.Options)) (*storagegateway.AssociateFileSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AssociateFileSystemInput, ...func(*storagegateway.Options)) *storagegateway.AssociateFileSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.AssociateFileSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.AssociateFileSystemInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachVolume(ctx context.Context, params *storagegateway.AttachVolumeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.AttachVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachVolume")
	}

	var r0 *storagegateway.AttachVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AttachVolumeInput, ...func(*storagegateway.Options)) (*storagegateway.AttachVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.AttachVolumeInput, ...func(*storagegateway.Options)) *storagegateway.AttachVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.AttachVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.AttachVolumeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelArchival provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelArchival(ctx context.Context, params *storagegateway.CancelArchivalInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CancelArchivalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelArchival")
	}

	var r0 *storagegateway.CancelArchivalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CancelArchivalInput, ...func(*storagegateway.Options)) (*storagegateway.CancelArchivalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CancelArchivalInput, ...func(*storagegateway.Options)) *storagegateway.CancelArchivalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CancelArchivalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CancelArchivalInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelRetrieval provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelRetrieval(ctx context.Context, params *storagegateway.CancelRetrievalInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CancelRetrievalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelRetrieval")
	}

	var r0 *storagegateway.CancelRetrievalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CancelRetrievalInput, ...func(*storagegateway.Options)) (*storagegateway.CancelRetrievalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CancelRetrievalInput, ...func(*storagegateway.Options)) *storagegateway.CancelRetrievalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CancelRetrievalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CancelRetrievalInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCachediSCSIVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCachediSCSIVolume(ctx context.Context, params *storagegateway.CreateCachediSCSIVolumeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateCachediSCSIVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCachediSCSIVolume")
	}

	var r0 *storagegateway.CreateCachediSCSIVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateCachediSCSIVolumeInput, ...func(*storagegateway.Options)) (*storagegateway.CreateCachediSCSIVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateCachediSCSIVolumeInput, ...func(*storagegateway.Options)) *storagegateway.CreateCachediSCSIVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateCachediSCSIVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateCachediSCSIVolumeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNFSFileShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNFSFileShare(ctx context.Context, params *storagegateway.CreateNFSFileShareInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateNFSFileShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNFSFileShare")
	}

	var r0 *storagegateway.CreateNFSFileShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateNFSFileShareInput, ...func(*storagegateway.Options)) (*storagegateway.CreateNFSFileShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateNFSFileShareInput, ...func(*storagegateway.Options)) *storagegateway.CreateNFSFileShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateNFSFileShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateNFSFileShareInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSMBFileShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSMBFileShare(ctx context.Context, params *storagegateway.CreateSMBFileShareInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateSMBFileShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSMBFileShare")
	}

	var r0 *storagegateway.CreateSMBFileShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateSMBFileShareInput, ...func(*storagegateway.Options)) (*storagegateway.CreateSMBFileShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateSMBFileShareInput, ...func(*storagegateway.Options)) *storagegateway.CreateSMBFileShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateSMBFileShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateSMBFileShareInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSnapshot(ctx context.Context, params *storagegateway.CreateSnapshotInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 *storagegateway.CreateSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateSnapshotInput, ...func(*storagegateway.Options)) (*storagegateway.CreateSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateSnapshotInput, ...func(*storagegateway.Options)) *storagegateway.CreateSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateSnapshotInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshotFromVolumeRecoveryPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSnapshotFromVolumeRecoveryPoint(ctx context.Context, params *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshotFromVolumeRecoveryPoint")
	}

	var r0 *storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput, ...func(*storagegateway.Options)) (*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput, ...func(*storagegateway.Options)) *storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateSnapshotFromVolumeRecoveryPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateSnapshotFromVolumeRecoveryPointInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStorediSCSIVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStorediSCSIVolume(ctx context.Context, params *storagegateway.CreateStorediSCSIVolumeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateStorediSCSIVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorediSCSIVolume")
	}

	var r0 *storagegateway.CreateStorediSCSIVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateStorediSCSIVolumeInput, ...func(*storagegateway.Options)) (*storagegateway.CreateStorediSCSIVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateStorediSCSIVolumeInput, ...func(*storagegateway.Options)) *storagegateway.CreateStorediSCSIVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateStorediSCSIVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateStorediSCSIVolumeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTapePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTapePool(ctx context.Context, params *storagegateway.CreateTapePoolInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateTapePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTapePool")
	}

	var r0 *storagegateway.CreateTapePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateTapePoolInput, ...func(*storagegateway.Options)) (*storagegateway.CreateTapePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateTapePoolInput, ...func(*storagegateway.Options)) *storagegateway.CreateTapePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateTapePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateTapePoolInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTapeWithBarcode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTapeWithBarcode(ctx context.Context, params *storagegateway.CreateTapeWithBarcodeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateTapeWithBarcodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTapeWithBarcode")
	}

	var r0 *storagegateway.CreateTapeWithBarcodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateTapeWithBarcodeInput, ...func(*storagegateway.Options)) (*storagegateway.CreateTapeWithBarcodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateTapeWithBarcodeInput, ...func(*storagegateway.Options)) *storagegateway.CreateTapeWithBarcodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateTapeWithBarcodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateTapeWithBarcodeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTapes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTapes(ctx context.Context, params *storagegateway.CreateTapesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.CreateTapesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTapes")
	}

	var r0 *storagegateway.CreateTapesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateTapesInput, ...func(*storagegateway.Options)) (*storagegateway.CreateTapesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.CreateTapesInput, ...func(*storagegateway.Options)) *storagegateway.CreateTapesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.CreateTapesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.CreateTapesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAutomaticTapeCreationPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAutomaticTapeCreationPolicy(ctx context.Context, params *storagegateway.DeleteAutomaticTapeCreationPolicyInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAutomaticTapeCreationPolicy")
	}

	var r0 *storagegateway.DeleteAutomaticTapeCreationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteAutomaticTapeCreationPolicyInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteAutomaticTapeCreationPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteAutomaticTapeCreationPolicyInput, ...func(*storagegateway.Options)) *storagegateway.DeleteAutomaticTapeCreationPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteAutomaticTapeCreationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteAutomaticTapeCreationPolicyInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBandwidthRateLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBandwidthRateLimit(ctx context.Context, params *storagegateway.DeleteBandwidthRateLimitInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteBandwidthRateLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBandwidthRateLimit")
	}

	var r0 *storagegateway.DeleteBandwidthRateLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteBandwidthRateLimitInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteBandwidthRateLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteBandwidthRateLimitInput, ...func(*storagegateway.Options)) *storagegateway.DeleteBandwidthRateLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteBandwidthRateLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteBandwidthRateLimitInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChapCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChapCredentials(ctx context.Context, params *storagegateway.DeleteChapCredentialsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteChapCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChapCredentials")
	}

	var r0 *storagegateway.DeleteChapCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteChapCredentialsInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteChapCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteChapCredentialsInput, ...func(*storagegateway.Options)) *storagegateway.DeleteChapCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteChapCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteChapCredentialsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFileShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFileShare(ctx context.Context, params *storagegateway.DeleteFileShareInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteFileShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFileShare")
	}

	var r0 *storagegateway.DeleteFileShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteFileShareInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteFileShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteFileShareInput, ...func(*storagegateway.Options)) *storagegateway.DeleteFileShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteFileShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteFileShareInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGateway(ctx context.Context, params *storagegateway.DeleteGatewayInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGateway")
	}

	var r0 *storagegateway.DeleteGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteGatewayInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteGatewayInput, ...func(*storagegateway.Options)) *storagegateway.DeleteGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteGatewayInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshotSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSnapshotSchedule(ctx context.Context, params *storagegateway.DeleteSnapshotScheduleInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteSnapshotScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshotSchedule")
	}

	var r0 *storagegateway.DeleteSnapshotScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteSnapshotScheduleInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteSnapshotScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteSnapshotScheduleInput, ...func(*storagegateway.Options)) *storagegateway.DeleteSnapshotScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteSnapshotScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteSnapshotScheduleInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTape provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTape(ctx context.Context, params *storagegateway.DeleteTapeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteTapeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTape")
	}

	var r0 *storagegateway.DeleteTapeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteTapeInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteTapeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteTapeInput, ...func(*storagegateway.Options)) *storagegateway.DeleteTapeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteTapeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteTapeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTapeArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTapeArchive(ctx context.Context, params *storagegateway.DeleteTapeArchiveInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteTapeArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTapeArchive")
	}

	var r0 *storagegateway.DeleteTapeArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteTapeArchiveInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteTapeArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteTapeArchiveInput, ...func(*storagegateway.Options)) *storagegateway.DeleteTapeArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteTapeArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteTapeArchiveInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTapePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTapePool(ctx context.Context, params *storagegateway.DeleteTapePoolInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteTapePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTapePool")
	}

	var r0 *storagegateway.DeleteTapePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteTapePoolInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteTapePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteTapePoolInput, ...func(*storagegateway.Options)) *storagegateway.DeleteTapePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteTapePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteTapePoolInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVolume(ctx context.Context, params *storagegateway.DeleteVolumeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DeleteVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolume")
	}

	var r0 *storagegateway.DeleteVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteVolumeInput, ...func(*storagegateway.Options)) (*storagegateway.DeleteVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DeleteVolumeInput, ...func(*storagegateway.Options)) *storagegateway.DeleteVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DeleteVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DeleteVolumeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAvailabilityMonitorTest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAvailabilityMonitorTest(ctx context.Context, params *storagegateway.DescribeAvailabilityMonitorTestInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAvailabilityMonitorTest")
	}

	var r0 *storagegateway.DescribeAvailabilityMonitorTestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeAvailabilityMonitorTestInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeAvailabilityMonitorTestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeAvailabilityMonitorTestInput, ...func(*storagegateway.Options)) *storagegateway.DescribeAvailabilityMonitorTestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeAvailabilityMonitorTestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeAvailabilityMonitorTestInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBandwidthRateLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBandwidthRateLimit(ctx context.Context, params *storagegateway.DescribeBandwidthRateLimitInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeBandwidthRateLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBandwidthRateLimit")
	}

	var r0 *storagegateway.DescribeBandwidthRateLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeBandwidthRateLimitInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeBandwidthRateLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeBandwidthRateLimitInput, ...func(*storagegateway.Options)) *storagegateway.DescribeBandwidthRateLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeBandwidthRateLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeBandwidthRateLimitInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBandwidthRateLimitSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBandwidthRateLimitSchedule(ctx context.Context, params *storagegateway.DescribeBandwidthRateLimitScheduleInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeBandwidthRateLimitScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBandwidthRateLimitSchedule")
	}

	var r0 *storagegateway.DescribeBandwidthRateLimitScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeBandwidthRateLimitScheduleInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeBandwidthRateLimitScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeBandwidthRateLimitScheduleInput, ...func(*storagegateway.Options)) *storagegateway.DescribeBandwidthRateLimitScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeBandwidthRateLimitScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeBandwidthRateLimitScheduleInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCache(ctx context.Context, params *storagegateway.DescribeCacheInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCache")
	}

	var r0 *storagegateway.DescribeCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeCacheInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeCacheInput, ...func(*storagegateway.Options)) *storagegateway.DescribeCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeCacheInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCachediSCSIVolumes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCachediSCSIVolumes(ctx context.Context, params *storagegateway.DescribeCachediSCSIVolumesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeCachediSCSIVolumesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCachediSCSIVolumes")
	}

	var r0 *storagegateway.DescribeCachediSCSIVolumesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeCachediSCSIVolumesInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeCachediSCSIVolumesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeCachediSCSIVolumesInput, ...func(*storagegateway.Options)) *storagegateway.DescribeCachediSCSIVolumesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeCachediSCSIVolumesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeCachediSCSIVolumesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChapCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChapCredentials(ctx context.Context, params *storagegateway.DescribeChapCredentialsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeChapCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChapCredentials")
	}

	var r0 *storagegateway.DescribeChapCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeChapCredentialsInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeChapCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeChapCredentialsInput, ...func(*storagegateway.Options)) *storagegateway.DescribeChapCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeChapCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeChapCredentialsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFileSystemAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFileSystemAssociations(ctx context.Context, params *storagegateway.DescribeFileSystemAssociationsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeFileSystemAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFileSystemAssociations")
	}

	var r0 *storagegateway.DescribeFileSystemAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeFileSystemAssociationsInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeFileSystemAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeFileSystemAssociationsInput, ...func(*storagegateway.Options)) *storagegateway.DescribeFileSystemAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeFileSystemAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeFileSystemAssociationsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGatewayInformation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGatewayInformation(ctx context.Context, params *storagegateway.DescribeGatewayInformationInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeGatewayInformationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGatewayInformation")
	}

	var r0 *storagegateway.DescribeGatewayInformationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeGatewayInformationInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeGatewayInformationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeGatewayInformationInput, ...func(*storagegateway.Options)) *storagegateway.DescribeGatewayInformationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeGatewayInformationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeGatewayInformationInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMaintenanceStartTime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMaintenanceStartTime(ctx context.Context, params *storagegateway.DescribeMaintenanceStartTimeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeMaintenanceStartTimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMaintenanceStartTime")
	}

	var r0 *storagegateway.DescribeMaintenanceStartTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeMaintenanceStartTimeInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeMaintenanceStartTimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeMaintenanceStartTimeInput, ...func(*storagegateway.Options)) *storagegateway.DescribeMaintenanceStartTimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeMaintenanceStartTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeMaintenanceStartTimeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNFSFileShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNFSFileShares(ctx context.Context, params *storagegateway.DescribeNFSFileSharesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeNFSFileSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNFSFileShares")
	}

	var r0 *storagegateway.DescribeNFSFileSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeNFSFileSharesInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeNFSFileSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeNFSFileSharesInput, ...func(*storagegateway.Options)) *storagegateway.DescribeNFSFileSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeNFSFileSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeNFSFileSharesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSMBFileShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSMBFileShares(ctx context.Context, params *storagegateway.DescribeSMBFileSharesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeSMBFileSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSMBFileShares")
	}

	var r0 *storagegateway.DescribeSMBFileSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeSMBFileSharesInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeSMBFileSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeSMBFileSharesInput, ...func(*storagegateway.Options)) *storagegateway.DescribeSMBFileSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeSMBFileSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeSMBFileSharesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSMBSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSMBSettings(ctx context.Context, params *storagegateway.DescribeSMBSettingsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeSMBSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSMBSettings")
	}

	var r0 *storagegateway.DescribeSMBSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeSMBSettingsInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeSMBSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeSMBSettingsInput, ...func(*storagegateway.Options)) *storagegateway.DescribeSMBSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeSMBSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeSMBSettingsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSnapshotSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSnapshotSchedule(ctx context.Context, params *storagegateway.DescribeSnapshotScheduleInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeSnapshotScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSnapshotSchedule")
	}

	var r0 *storagegateway.DescribeSnapshotScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeSnapshotScheduleInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeSnapshotScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeSnapshotScheduleInput, ...func(*storagegateway.Options)) *storagegateway.DescribeSnapshotScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeSnapshotScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeSnapshotScheduleInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStorediSCSIVolumes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStorediSCSIVolumes(ctx context.Context, params *storagegateway.DescribeStorediSCSIVolumesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeStorediSCSIVolumesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStorediSCSIVolumes")
	}

	var r0 *storagegateway.DescribeStorediSCSIVolumesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeStorediSCSIVolumesInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeStorediSCSIVolumesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeStorediSCSIVolumesInput, ...func(*storagegateway.Options)) *storagegateway.DescribeStorediSCSIVolumesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeStorediSCSIVolumesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeStorediSCSIVolumesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTapeArchives provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTapeArchives(ctx context.Context, params *storagegateway.DescribeTapeArchivesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeTapeArchivesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTapeArchives")
	}

	var r0 *storagegateway.DescribeTapeArchivesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeTapeArchivesInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeTapeArchivesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeTapeArchivesInput, ...func(*storagegateway.Options)) *storagegateway.DescribeTapeArchivesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeTapeArchivesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeTapeArchivesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTapeRecoveryPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTapeRecoveryPoints(ctx context.Context, params *storagegateway.DescribeTapeRecoveryPointsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeTapeRecoveryPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTapeRecoveryPoints")
	}

	var r0 *storagegateway.DescribeTapeRecoveryPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeTapeRecoveryPointsInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeTapeRecoveryPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeTapeRecoveryPointsInput, ...func(*storagegateway.Options)) *storagegateway.DescribeTapeRecoveryPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeTapeRecoveryPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeTapeRecoveryPointsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTapes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTapes(ctx context.Context, params *storagegateway.DescribeTapesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeTapesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTapes")
	}

	var r0 *storagegateway.DescribeTapesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeTapesInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeTapesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeTapesInput, ...func(*storagegateway.Options)) *storagegateway.DescribeTapesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeTapesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeTapesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUploadBuffer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUploadBuffer(ctx context.Context, params *storagegateway.DescribeUploadBufferInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeUploadBufferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUploadBuffer")
	}

	var r0 *storagegateway.DescribeUploadBufferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeUploadBufferInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeUploadBufferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeUploadBufferInput, ...func(*storagegateway.Options)) *storagegateway.DescribeUploadBufferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeUploadBufferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeUploadBufferInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVTLDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVTLDevices(ctx context.Context, params *storagegateway.DescribeVTLDevicesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeVTLDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVTLDevices")
	}

	var r0 *storagegateway.DescribeVTLDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeVTLDevicesInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeVTLDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeVTLDevicesInput, ...func(*storagegateway.Options)) *storagegateway.DescribeVTLDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeVTLDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeVTLDevicesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkingStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWorkingStorage(ctx context.Context, params *storagegateway.DescribeWorkingStorageInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DescribeWorkingStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkingStorage")
	}

	var r0 *storagegateway.DescribeWorkingStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeWorkingStorageInput, ...func(*storagegateway.Options)) (*storagegateway.DescribeWorkingStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DescribeWorkingStorageInput, ...func(*storagegateway.Options)) *storagegateway.DescribeWorkingStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DescribeWorkingStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DescribeWorkingStorageInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachVolume(ctx context.Context, params *storagegateway.DetachVolumeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DetachVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachVolume")
	}

	var r0 *storagegateway.DetachVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DetachVolumeInput, ...func(*storagegateway.Options)) (*storagegateway.DetachVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DetachVolumeInput, ...func(*storagegateway.Options)) *storagegateway.DetachVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DetachVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DetachVolumeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableGateway(ctx context.Context, params *storagegateway.DisableGatewayInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DisableGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableGateway")
	}

	var r0 *storagegateway.DisableGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DisableGatewayInput, ...func(*storagegateway.Options)) (*storagegateway.DisableGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DisableGatewayInput, ...func(*storagegateway.Options)) *storagegateway.DisableGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DisableGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DisableGatewayInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFileSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFileSystem(ctx context.Context, params *storagegateway.DisassociateFileSystemInput, optFns ...func(*storagegateway.Options)) (*storagegateway.DisassociateFileSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFileSystem")
	}

	var r0 *storagegateway.DisassociateFileSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DisassociateFileSystemInput, ...func(*storagegateway.Options)) (*storagegateway.DisassociateFileSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.DisassociateFileSystemInput, ...func(*storagegateway.Options)) *storagegateway.DisassociateFileSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.DisassociateFileSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.DisassociateFileSystemInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JoinDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) JoinDomain(ctx context.Context, params *storagegateway.JoinDomainInput, optFns ...func(*storagegateway.Options)) (*storagegateway.JoinDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for JoinDomain")
	}

	var r0 *storagegateway.JoinDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.JoinDomainInput, ...func(*storagegateway.Options)) (*storagegateway.JoinDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.JoinDomainInput, ...func(*storagegateway.Options)) *storagegateway.JoinDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.JoinDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.JoinDomainInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAutomaticTapeCreationPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAutomaticTapeCreationPolicies(ctx context.Context, params *storagegateway.ListAutomaticTapeCreationPoliciesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAutomaticTapeCreationPolicies")
	}

	var r0 *storagegateway.ListAutomaticTapeCreationPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListAutomaticTapeCreationPoliciesInput, ...func(*storagegateway.Options)) (*storagegateway.ListAutomaticTapeCreationPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListAutomaticTapeCreationPoliciesInput, ...func(*storagegateway.Options)) *storagegateway.ListAutomaticTapeCreationPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListAutomaticTapeCreationPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListAutomaticTapeCreationPoliciesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFileShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFileShares(ctx context.Context, params *storagegateway.ListFileSharesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListFileSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFileShares")
	}

	var r0 *storagegateway.ListFileSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListFileSharesInput, ...func(*storagegateway.Options)) (*storagegateway.ListFileSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListFileSharesInput, ...func(*storagegateway.Options)) *storagegateway.ListFileSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListFileSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListFileSharesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFileSystemAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFileSystemAssociations(ctx context.Context, params *storagegateway.ListFileSystemAssociationsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListFileSystemAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFileSystemAssociations")
	}

	var r0 *storagegateway.ListFileSystemAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListFileSystemAssociationsInput, ...func(*storagegateway.Options)) (*storagegateway.ListFileSystemAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListFileSystemAssociationsInput, ...func(*storagegateway.Options)) *storagegateway.ListFileSystemAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListFileSystemAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListFileSystemAssociationsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGateways provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGateways(ctx context.Context, params *storagegateway.ListGatewaysInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListGatewaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGateways")
	}

	var r0 *storagegateway.ListGatewaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListGatewaysInput, ...func(*storagegateway.Options)) (*storagegateway.ListGatewaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListGatewaysInput, ...func(*storagegateway.Options)) *storagegateway.ListGatewaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListGatewaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListGatewaysInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLocalDisks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLocalDisks(ctx context.Context, params *storagegateway.ListLocalDisksInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListLocalDisksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLocalDisks")
	}

	var r0 *storagegateway.ListLocalDisksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListLocalDisksInput, ...func(*storagegateway.Options)) (*storagegateway.ListLocalDisksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListLocalDisksInput, ...func(*storagegateway.Options)) *storagegateway.ListLocalDisksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListLocalDisksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListLocalDisksInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *storagegateway.ListTagsForResourceInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *storagegateway.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListTagsForResourceInput, ...func(*storagegateway.Options)) (*storagegateway.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListTagsForResourceInput, ...func(*storagegateway.Options)) *storagegateway.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListTagsForResourceInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTapePools provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTapePools(ctx context.Context, params *storagegateway.ListTapePoolsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListTapePoolsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTapePools")
	}

	var r0 *storagegateway.ListTapePoolsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListTapePoolsInput, ...func(*storagegateway.Options)) (*storagegateway.ListTapePoolsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListTapePoolsInput, ...func(*storagegateway.Options)) *storagegateway.ListTapePoolsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListTapePoolsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListTapePoolsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTapes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTapes(ctx context.Context, params *storagegateway.ListTapesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListTapesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTapes")
	}

	var r0 *storagegateway.ListTapesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListTapesInput, ...func(*storagegateway.Options)) (*storagegateway.ListTapesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListTapesInput, ...func(*storagegateway.Options)) *storagegateway.ListTapesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListTapesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListTapesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumeInitiators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVolumeInitiators(ctx context.Context, params *storagegateway.ListVolumeInitiatorsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListVolumeInitiatorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVolumeInitiators")
	}

	var r0 *storagegateway.ListVolumeInitiatorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListVolumeInitiatorsInput, ...func(*storagegateway.Options)) (*storagegateway.ListVolumeInitiatorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListVolumeInitiatorsInput, ...func(*storagegateway.Options)) *storagegateway.ListVolumeInitiatorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListVolumeInitiatorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListVolumeInitiatorsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumeRecoveryPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVolumeRecoveryPoints(ctx context.Context, params *storagegateway.ListVolumeRecoveryPointsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListVolumeRecoveryPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVolumeRecoveryPoints")
	}

	var r0 *storagegateway.ListVolumeRecoveryPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListVolumeRecoveryPointsInput, ...func(*storagegateway.Options)) (*storagegateway.ListVolumeRecoveryPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListVolumeRecoveryPointsInput, ...func(*storagegateway.Options)) *storagegateway.ListVolumeRecoveryPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListVolumeRecoveryPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListVolumeRecoveryPointsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVolumes(ctx context.Context, params *storagegateway.ListVolumesInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ListVolumesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVolumes")
	}

	var r0 *storagegateway.ListVolumesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListVolumesInput, ...func(*storagegateway.Options)) (*storagegateway.ListVolumesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ListVolumesInput, ...func(*storagegateway.Options)) *storagegateway.ListVolumesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ListVolumesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ListVolumesInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyWhenUploaded provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) NotifyWhenUploaded(ctx context.Context, params *storagegateway.NotifyWhenUploadedInput, optFns ...func(*storagegateway.Options)) (*storagegateway.NotifyWhenUploadedOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyWhenUploaded")
	}

	var r0 *storagegateway.NotifyWhenUploadedOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.NotifyWhenUploadedInput, ...func(*storagegateway.Options)) (*storagegateway.NotifyWhenUploadedOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.NotifyWhenUploadedInput, ...func(*storagegateway.Options)) *storagegateway.NotifyWhenUploadedOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.NotifyWhenUploadedOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.NotifyWhenUploadedInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() storagegateway.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 storagegateway.Options
	if rf, ok := ret.Get(0).(func() storagegateway.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(storagegateway.Options)
	}

	return r0
}

// RefreshCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RefreshCache(ctx context.Context, params *storagegateway.RefreshCacheInput, optFns ...func(*storagegateway.Options)) (*storagegateway.RefreshCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RefreshCache")
	}

	var r0 *storagegateway.RefreshCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.RefreshCacheInput, ...func(*storagegateway.Options)) (*storagegateway.RefreshCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.RefreshCacheInput, ...func(*storagegateway.Options)) *storagegateway.RefreshCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.RefreshCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.RefreshCacheInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTagsFromResource(ctx context.Context, params *storagegateway.RemoveTagsFromResourceInput, optFns ...func(*storagegateway.Options)) (*storagegateway.RemoveTagsFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagsFromResource")
	}

	var r0 *storagegateway.RemoveTagsFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.RemoveTagsFromResourceInput, ...func(*storagegateway.Options)) (*storagegateway.RemoveTagsFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.RemoveTagsFromResourceInput, ...func(*storagegateway.Options)) *storagegateway.RemoveTagsFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.RemoveTagsFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.RemoveTagsFromResourceInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetCache(ctx context.Context, params *storagegateway.ResetCacheInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ResetCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetCache")
	}

	var r0 *storagegateway.ResetCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ResetCacheInput, ...func(*storagegateway.Options)) (*storagegateway.ResetCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ResetCacheInput, ...func(*storagegateway.Options)) *storagegateway.ResetCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ResetCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ResetCacheInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveTapeArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RetrieveTapeArchive(ctx context.Context, params *storagegateway.RetrieveTapeArchiveInput, optFns ...func(*storagegateway.Options)) (*storagegateway.RetrieveTapeArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveTapeArchive")
	}

	var r0 *storagegateway.RetrieveTapeArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.RetrieveTapeArchiveInput, ...func(*storagegateway.Options)) (*storagegateway.RetrieveTapeArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.RetrieveTapeArchiveInput, ...func(*storagegateway.Options)) *storagegateway.RetrieveTapeArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.RetrieveTapeArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.RetrieveTapeArchiveInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveTapeRecoveryPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RetrieveTapeRecoveryPoint(ctx context.Context, params *storagegateway.RetrieveTapeRecoveryPointInput, optFns ...func(*storagegateway.Options)) (*storagegateway.RetrieveTapeRecoveryPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveTapeRecoveryPoint")
	}

	var r0 *storagegateway.RetrieveTapeRecoveryPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.RetrieveTapeRecoveryPointInput, ...func(*storagegateway.Options)) (*storagegateway.RetrieveTapeRecoveryPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.RetrieveTapeRecoveryPointInput, ...func(*storagegateway.Options)) *storagegateway.RetrieveTapeRecoveryPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.RetrieveTapeRecoveryPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.RetrieveTapeRecoveryPointInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLocalConsolePassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetLocalConsolePassword(ctx context.Context, params *storagegateway.SetLocalConsolePasswordInput, optFns ...func(*storagegateway.Options)) (*storagegateway.SetLocalConsolePasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetLocalConsolePassword")
	}

	var r0 *storagegateway.SetLocalConsolePasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.SetLocalConsolePasswordInput, ...func(*storagegateway.Options)) (*storagegateway.SetLocalConsolePasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.SetLocalConsolePasswordInput, ...func(*storagegateway.Options)) *storagegateway.SetLocalConsolePasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.SetLocalConsolePasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.SetLocalConsolePasswordInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetSMBGuestPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetSMBGuestPassword(ctx context.Context, params *storagegateway.SetSMBGuestPasswordInput, optFns ...func(*storagegateway.Options)) (*storagegateway.SetSMBGuestPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetSMBGuestPassword")
	}

	var r0 *storagegateway.SetSMBGuestPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.SetSMBGuestPasswordInput, ...func(*storagegateway.Options)) (*storagegateway.SetSMBGuestPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.SetSMBGuestPasswordInput, ...func(*storagegateway.Options)) *storagegateway.SetSMBGuestPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.SetSMBGuestPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.SetSMBGuestPasswordInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShutdownGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ShutdownGateway(ctx context.Context, params *storagegateway.ShutdownGatewayInput, optFns ...func(*storagegateway.Options)) (*storagegateway.ShutdownGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ShutdownGateway")
	}

	var r0 *storagegateway.ShutdownGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ShutdownGatewayInput, ...func(*storagegateway.Options)) (*storagegateway.ShutdownGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.ShutdownGatewayInput, ...func(*storagegateway.Options)) *storagegateway.ShutdownGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.ShutdownGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.ShutdownGatewayInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAvailabilityMonitorTest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAvailabilityMonitorTest(ctx context.Context, params *storagegateway.StartAvailabilityMonitorTestInput, optFns ...func(*storagegateway.Options)) (*storagegateway.StartAvailabilityMonitorTestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAvailabilityMonitorTest")
	}

	var r0 *storagegateway.StartAvailabilityMonitorTestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.StartAvailabilityMonitorTestInput, ...func(*storagegateway.Options)) (*storagegateway.StartAvailabilityMonitorTestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.StartAvailabilityMonitorTestInput, ...func(*storagegateway.Options)) *storagegateway.StartAvailabilityMonitorTestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.StartAvailabilityMonitorTestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.StartAvailabilityMonitorTestInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartGateway(ctx context.Context, params *storagegateway.StartGatewayInput, optFns ...func(*storagegateway.Options)) (*storagegateway.StartGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartGateway")
	}

	var r0 *storagegateway.StartGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.StartGatewayInput, ...func(*storagegateway.Options)) (*storagegateway.StartGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.StartGatewayInput, ...func(*storagegateway.Options)) *storagegateway.StartGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.StartGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.StartGatewayInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAutomaticTapeCreationPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAutomaticTapeCreationPolicy(ctx context.Context, params *storagegateway.UpdateAutomaticTapeCreationPolicyInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAutomaticTapeCreationPolicy")
	}

	var r0 *storagegateway.UpdateAutomaticTapeCreationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateAutomaticTapeCreationPolicyInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateAutomaticTapeCreationPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateAutomaticTapeCreationPolicyInput, ...func(*storagegateway.Options)) *storagegateway.UpdateAutomaticTapeCreationPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateAutomaticTapeCreationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateAutomaticTapeCreationPolicyInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBandwidthRateLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBandwidthRateLimit(ctx context.Context, params *storagegateway.UpdateBandwidthRateLimitInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateBandwidthRateLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBandwidthRateLimit")
	}

	var r0 *storagegateway.UpdateBandwidthRateLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateBandwidthRateLimitInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateBandwidthRateLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateBandwidthRateLimitInput, ...func(*storagegateway.Options)) *storagegateway.UpdateBandwidthRateLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateBandwidthRateLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateBandwidthRateLimitInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBandwidthRateLimitSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBandwidthRateLimitSchedule(ctx context.Context, params *storagegateway.UpdateBandwidthRateLimitScheduleInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateBandwidthRateLimitScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBandwidthRateLimitSchedule")
	}

	var r0 *storagegateway.UpdateBandwidthRateLimitScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateBandwidthRateLimitScheduleInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateBandwidthRateLimitScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateBandwidthRateLimitScheduleInput, ...func(*storagegateway.Options)) *storagegateway.UpdateBandwidthRateLimitScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateBandwidthRateLimitScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateBandwidthRateLimitScheduleInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChapCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChapCredentials(ctx context.Context, params *storagegateway.UpdateChapCredentialsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateChapCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChapCredentials")
	}

	var r0 *storagegateway.UpdateChapCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateChapCredentialsInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateChapCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateChapCredentialsInput, ...func(*storagegateway.Options)) *storagegateway.UpdateChapCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateChapCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateChapCredentialsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFileSystemAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFileSystemAssociation(ctx context.Context, params *storagegateway.UpdateFileSystemAssociationInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateFileSystemAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileSystemAssociation")
	}

	var r0 *storagegateway.UpdateFileSystemAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateFileSystemAssociationInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateFileSystemAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateFileSystemAssociationInput, ...func(*storagegateway.Options)) *storagegateway.UpdateFileSystemAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateFileSystemAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateFileSystemAssociationInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGatewayInformation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGatewayInformation(ctx context.Context, params *storagegateway.UpdateGatewayInformationInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateGatewayInformationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewayInformation")
	}

	var r0 *storagegateway.UpdateGatewayInformationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateGatewayInformationInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateGatewayInformationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateGatewayInformationInput, ...func(*storagegateway.Options)) *storagegateway.UpdateGatewayInformationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateGatewayInformationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateGatewayInformationInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGatewaySoftwareNow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGatewaySoftwareNow(ctx context.Context, params *storagegateway.UpdateGatewaySoftwareNowInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateGatewaySoftwareNowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewaySoftwareNow")
	}

	var r0 *storagegateway.UpdateGatewaySoftwareNowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateGatewaySoftwareNowInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateGatewaySoftwareNowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateGatewaySoftwareNowInput, ...func(*storagegateway.Options)) *storagegateway.UpdateGatewaySoftwareNowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateGatewaySoftwareNowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateGatewaySoftwareNowInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMaintenanceStartTime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMaintenanceStartTime(ctx context.Context, params *storagegateway.UpdateMaintenanceStartTimeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateMaintenanceStartTimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMaintenanceStartTime")
	}

	var r0 *storagegateway.UpdateMaintenanceStartTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateMaintenanceStartTimeInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateMaintenanceStartTimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateMaintenanceStartTimeInput, ...func(*storagegateway.Options)) *storagegateway.UpdateMaintenanceStartTimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateMaintenanceStartTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateMaintenanceStartTimeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNFSFileShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNFSFileShare(ctx context.Context, params *storagegateway.UpdateNFSFileShareInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateNFSFileShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNFSFileShare")
	}

	var r0 *storagegateway.UpdateNFSFileShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateNFSFileShareInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateNFSFileShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateNFSFileShareInput, ...func(*storagegateway.Options)) *storagegateway.UpdateNFSFileShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateNFSFileShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateNFSFileShareInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSMBFileShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSMBFileShare(ctx context.Context, params *storagegateway.UpdateSMBFileShareInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateSMBFileShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSMBFileShare")
	}

	var r0 *storagegateway.UpdateSMBFileShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSMBFileShareInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateSMBFileShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSMBFileShareInput, ...func(*storagegateway.Options)) *storagegateway.UpdateSMBFileShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateSMBFileShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateSMBFileShareInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSMBFileShareVisibility provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSMBFileShareVisibility(ctx context.Context, params *storagegateway.UpdateSMBFileShareVisibilityInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateSMBFileShareVisibilityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSMBFileShareVisibility")
	}

	var r0 *storagegateway.UpdateSMBFileShareVisibilityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSMBFileShareVisibilityInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateSMBFileShareVisibilityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSMBFileShareVisibilityInput, ...func(*storagegateway.Options)) *storagegateway.UpdateSMBFileShareVisibilityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateSMBFileShareVisibilityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateSMBFileShareVisibilityInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSMBLocalGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSMBLocalGroups(ctx context.Context, params *storagegateway.UpdateSMBLocalGroupsInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateSMBLocalGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSMBLocalGroups")
	}

	var r0 *storagegateway.UpdateSMBLocalGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSMBLocalGroupsInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateSMBLocalGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSMBLocalGroupsInput, ...func(*storagegateway.Options)) *storagegateway.UpdateSMBLocalGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateSMBLocalGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateSMBLocalGroupsInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSMBSecurityStrategy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSMBSecurityStrategy(ctx context.Context, params *storagegateway.UpdateSMBSecurityStrategyInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateSMBSecurityStrategyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSMBSecurityStrategy")
	}

	var r0 *storagegateway.UpdateSMBSecurityStrategyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSMBSecurityStrategyInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateSMBSecurityStrategyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSMBSecurityStrategyInput, ...func(*storagegateway.Options)) *storagegateway.UpdateSMBSecurityStrategyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateSMBSecurityStrategyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateSMBSecurityStrategyInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSnapshotSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSnapshotSchedule(ctx context.Context, params *storagegateway.UpdateSnapshotScheduleInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateSnapshotScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnapshotSchedule")
	}

	var r0 *storagegateway.UpdateSnapshotScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSnapshotScheduleInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateSnapshotScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateSnapshotScheduleInput, ...func(*storagegateway.Options)) *storagegateway.UpdateSnapshotScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateSnapshotScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateSnapshotScheduleInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVTLDeviceType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVTLDeviceType(ctx context.Context, params *storagegateway.UpdateVTLDeviceTypeInput, optFns ...func(*storagegateway.Options)) (*storagegateway.UpdateVTLDeviceTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVTLDeviceType")
	}

	var r0 *storagegateway.UpdateVTLDeviceTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateVTLDeviceTypeInput, ...func(*storagegateway.Options)) (*storagegateway.UpdateVTLDeviceTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *storagegateway.UpdateVTLDeviceTypeInput, ...func(*storagegateway.Options)) *storagegateway.UpdateVTLDeviceTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*storagegateway.UpdateVTLDeviceTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *storagegateway.UpdateVTLDeviceTypeInput, ...func(*storagegateway.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
