// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	gameliftstreams "github.com/aws/aws-sdk-go-v2/service/gameliftstreams"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddStreamGroupLocations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddStreamGroupLocations(ctx context.Context, params *gameliftstreams.AddStreamGroupLocationsInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.AddStreamGroupLocationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddStreamGroupLocations")
	}

	var r0 *gameliftstreams.AddStreamGroupLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.AddStreamGroupLocationsInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.AddStreamGroupLocationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.AddStreamGroupLocationsInput, ...func(*gameliftstreams.Options)) *gameliftstreams.AddStreamGroupLocationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.AddStreamGroupLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.AddStreamGroupLocationsInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateApplications(ctx context.Context, params *gameliftstreams.AssociateApplicationsInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.AssociateApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateApplications")
	}

	var r0 *gameliftstreams.AssociateApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.AssociateApplicationsInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.AssociateApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.AssociateApplicationsInput, ...func(*gameliftstreams.Options)) *gameliftstreams.AssociateApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.AssociateApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.AssociateApplicationsInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *gameliftstreams.CreateApplicationInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *gameliftstreams.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.CreateApplicationInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.CreateApplicationInput, ...func(*gameliftstreams.Options)) *gameliftstreams.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.CreateApplicationInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStreamGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStreamGroup(ctx context.Context, params *gameliftstreams.CreateStreamGroupInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.CreateStreamGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamGroup")
	}

	var r0 *gameliftstreams.CreateStreamGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.CreateStreamGroupInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.CreateStreamGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.CreateStreamGroupInput, ...func(*gameliftstreams.Options)) *gameliftstreams.CreateStreamGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.CreateStreamGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.CreateStreamGroupInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStreamSessionConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStreamSessionConnection(ctx context.Context, params *gameliftstreams.CreateStreamSessionConnectionInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.CreateStreamSessionConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamSessionConnection")
	}

	var r0 *gameliftstreams.CreateStreamSessionConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.CreateStreamSessionConnectionInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.CreateStreamSessionConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.CreateStreamSessionConnectionInput, ...func(*gameliftstreams.Options)) *gameliftstreams.CreateStreamSessionConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.CreateStreamSessionConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.CreateStreamSessionConnectionInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *gameliftstreams.DeleteApplicationInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *gameliftstreams.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.DeleteApplicationInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.DeleteApplicationInput, ...func(*gameliftstreams.Options)) *gameliftstreams.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.DeleteApplicationInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStreamGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStreamGroup(ctx context.Context, params *gameliftstreams.DeleteStreamGroupInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.DeleteStreamGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStreamGroup")
	}

	var r0 *gameliftstreams.DeleteStreamGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.DeleteStreamGroupInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.DeleteStreamGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.DeleteStreamGroupInput, ...func(*gameliftstreams.Options)) *gameliftstreams.DeleteStreamGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.DeleteStreamGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.DeleteStreamGroupInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateApplications(ctx context.Context, params *gameliftstreams.DisassociateApplicationsInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.DisassociateApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateApplications")
	}

	var r0 *gameliftstreams.DisassociateApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.DisassociateApplicationsInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.DisassociateApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.DisassociateApplicationsInput, ...func(*gameliftstreams.Options)) *gameliftstreams.DisassociateApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.DisassociateApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.DisassociateApplicationsInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportStreamSessionFiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportStreamSessionFiles(ctx context.Context, params *gameliftstreams.ExportStreamSessionFilesInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.ExportStreamSessionFilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportStreamSessionFiles")
	}

	var r0 *gameliftstreams.ExportStreamSessionFilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ExportStreamSessionFilesInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.ExportStreamSessionFilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ExportStreamSessionFilesInput, ...func(*gameliftstreams.Options)) *gameliftstreams.ExportStreamSessionFilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.ExportStreamSessionFilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.ExportStreamSessionFilesInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplication(ctx context.Context, params *gameliftstreams.GetApplicationInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.GetApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *gameliftstreams.GetApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.GetApplicationInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.GetApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.GetApplicationInput, ...func(*gameliftstreams.Options)) *gameliftstreams.GetApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.GetApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.GetApplicationInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStreamGroup(ctx context.Context, params *gameliftstreams.GetStreamGroupInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.GetStreamGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamGroup")
	}

	var r0 *gameliftstreams.GetStreamGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.GetStreamGroupInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.GetStreamGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.GetStreamGroupInput, ...func(*gameliftstreams.Options)) *gameliftstreams.GetStreamGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.GetStreamGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.GetStreamGroupInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStreamSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStreamSession(ctx context.Context, params *gameliftstreams.GetStreamSessionInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.GetStreamSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStreamSession")
	}

	var r0 *gameliftstreams.GetStreamSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.GetStreamSessionInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.GetStreamSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.GetStreamSessionInput, ...func(*gameliftstreams.Options)) *gameliftstreams.GetStreamSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.GetStreamSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.GetStreamSessionInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *gameliftstreams.ListApplicationsInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *gameliftstreams.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListApplicationsInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListApplicationsInput, ...func(*gameliftstreams.Options)) *gameliftstreams.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.ListApplicationsInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreamGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreamGroups(ctx context.Context, params *gameliftstreams.ListStreamGroupsInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.ListStreamGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamGroups")
	}

	var r0 *gameliftstreams.ListStreamGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListStreamGroupsInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.ListStreamGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListStreamGroupsInput, ...func(*gameliftstreams.Options)) *gameliftstreams.ListStreamGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.ListStreamGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.ListStreamGroupsInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreamSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreamSessions(ctx context.Context, params *gameliftstreams.ListStreamSessionsInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.ListStreamSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamSessions")
	}

	var r0 *gameliftstreams.ListStreamSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListStreamSessionsInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.ListStreamSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListStreamSessionsInput, ...func(*gameliftstreams.Options)) *gameliftstreams.ListStreamSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.ListStreamSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.ListStreamSessionsInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreamSessionsByAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreamSessionsByAccount(ctx context.Context, params *gameliftstreams.ListStreamSessionsByAccountInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.ListStreamSessionsByAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreamSessionsByAccount")
	}

	var r0 *gameliftstreams.ListStreamSessionsByAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListStreamSessionsByAccountInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.ListStreamSessionsByAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListStreamSessionsByAccountInput, ...func(*gameliftstreams.Options)) *gameliftstreams.ListStreamSessionsByAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.ListStreamSessionsByAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.ListStreamSessionsByAccountInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *gameliftstreams.ListTagsForResourceInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *gameliftstreams.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListTagsForResourceInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.ListTagsForResourceInput, ...func(*gameliftstreams.Options)) *gameliftstreams.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.ListTagsForResourceInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() gameliftstreams.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 gameliftstreams.Options
	if rf, ok := ret.Get(0).(func() gameliftstreams.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(gameliftstreams.Options)
	}

	return r0
}

// RemoveStreamGroupLocations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveStreamGroupLocations(ctx context.Context, params *gameliftstreams.RemoveStreamGroupLocationsInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.RemoveStreamGroupLocationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStreamGroupLocations")
	}

	var r0 *gameliftstreams.RemoveStreamGroupLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.RemoveStreamGroupLocationsInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.RemoveStreamGroupLocationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.RemoveStreamGroupLocationsInput, ...func(*gameliftstreams.Options)) *gameliftstreams.RemoveStreamGroupLocationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.RemoveStreamGroupLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.RemoveStreamGroupLocationsInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartStreamSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartStreamSession(ctx context.Context, params *gameliftstreams.StartStreamSessionInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.StartStreamSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartStreamSession")
	}

	var r0 *gameliftstreams.StartStreamSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.StartStreamSessionInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.StartStreamSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.StartStreamSessionInput, ...func(*gameliftstreams.Options)) *gameliftstreams.StartStreamSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.StartStreamSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.StartStreamSessionInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *gameliftstreams.TagResourceInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *gameliftstreams.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.TagResourceInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.TagResourceInput, ...func(*gameliftstreams.Options)) *gameliftstreams.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.TagResourceInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateStreamSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TerminateStreamSession(ctx context.Context, params *gameliftstreams.TerminateStreamSessionInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.TerminateStreamSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateStreamSession")
	}

	var r0 *gameliftstreams.TerminateStreamSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.TerminateStreamSessionInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.TerminateStreamSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.TerminateStreamSessionInput, ...func(*gameliftstreams.Options)) *gameliftstreams.TerminateStreamSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.TerminateStreamSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.TerminateStreamSessionInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *gameliftstreams.UntagResourceInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *gameliftstreams.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.UntagResourceInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.UntagResourceInput, ...func(*gameliftstreams.Options)) *gameliftstreams.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.UntagResourceInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *gameliftstreams.UpdateApplicationInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *gameliftstreams.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.UpdateApplicationInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.UpdateApplicationInput, ...func(*gameliftstreams.Options)) *gameliftstreams.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.UpdateApplicationInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStreamGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStreamGroup(ctx context.Context, params *gameliftstreams.UpdateStreamGroupInput, optFns ...func(*gameliftstreams.Options)) (*gameliftstreams.UpdateStreamGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStreamGroup")
	}

	var r0 *gameliftstreams.UpdateStreamGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.UpdateStreamGroupInput, ...func(*gameliftstreams.Options)) (*gameliftstreams.UpdateStreamGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *gameliftstreams.UpdateStreamGroupInput, ...func(*gameliftstreams.Options)) *gameliftstreams.UpdateStreamGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*gameliftstreams.UpdateStreamGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *gameliftstreams.UpdateStreamGroupInput, ...func(*gameliftstreams.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
