// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	networkflowmonitor "github.com/aws/aws-sdk-go-v2/service/networkflowmonitor"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMonitor(ctx context.Context, params *networkflowmonitor.CreateMonitorInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.CreateMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMonitor")
	}

	var r0 *networkflowmonitor.CreateMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.CreateMonitorInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.CreateMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.CreateMonitorInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.CreateMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.CreateMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.CreateMonitorInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateScope(ctx context.Context, params *networkflowmonitor.CreateScopeInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.CreateScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateScope")
	}

	var r0 *networkflowmonitor.CreateScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.CreateScopeInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.CreateScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.CreateScopeInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.CreateScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.CreateScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.CreateScopeInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMonitor(ctx context.Context, params *networkflowmonitor.DeleteMonitorInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.DeleteMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitor")
	}

	var r0 *networkflowmonitor.DeleteMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.DeleteMonitorInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.DeleteMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.DeleteMonitorInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.DeleteMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.DeleteMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.DeleteMonitorInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteScope(ctx context.Context, params *networkflowmonitor.DeleteScopeInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.DeleteScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScope")
	}

	var r0 *networkflowmonitor.DeleteScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.DeleteScopeInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.DeleteScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.DeleteScopeInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.DeleteScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.DeleteScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.DeleteScopeInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMonitor(ctx context.Context, params *networkflowmonitor.GetMonitorInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitor")
	}

	var r0 *networkflowmonitor.GetMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetMonitorInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetMonitorInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.GetMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.GetMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.GetMonitorInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResultsMonitorTopContributors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryResultsMonitorTopContributors(ctx context.Context, params *networkflowmonitor.GetQueryResultsMonitorTopContributorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryResultsMonitorTopContributorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryResultsMonitorTopContributors")
	}

	var r0 *networkflowmonitor.GetQueryResultsMonitorTopContributorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryResultsMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryResultsMonitorTopContributorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryResultsMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.GetQueryResultsMonitorTopContributorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.GetQueryResultsMonitorTopContributorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.GetQueryResultsMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResultsWorkloadInsightsTopContributors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryResultsWorkloadInsightsTopContributors(ctx context.Context, params *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryResultsWorkloadInsightsTopContributors")
	}

	var r0 *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResultsWorkloadInsightsTopContributorsData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryResultsWorkloadInsightsTopContributorsData(ctx context.Context, params *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryResultsWorkloadInsightsTopContributorsData")
	}

	var r0 *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.GetQueryResultsWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryStatusMonitorTopContributors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryStatusMonitorTopContributors(ctx context.Context, params *networkflowmonitor.GetQueryStatusMonitorTopContributorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryStatusMonitorTopContributorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryStatusMonitorTopContributors")
	}

	var r0 *networkflowmonitor.GetQueryStatusMonitorTopContributorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryStatusMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryStatusMonitorTopContributorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryStatusMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.GetQueryStatusMonitorTopContributorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.GetQueryStatusMonitorTopContributorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.GetQueryStatusMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryStatusWorkloadInsightsTopContributors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryStatusWorkloadInsightsTopContributors(ctx context.Context, params *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryStatusWorkloadInsightsTopContributors")
	}

	var r0 *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryStatusWorkloadInsightsTopContributorsData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryStatusWorkloadInsightsTopContributorsData(ctx context.Context, params *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryStatusWorkloadInsightsTopContributorsData")
	}

	var r0 *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.GetQueryStatusWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetScope(ctx context.Context, params *networkflowmonitor.GetScopeInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetScope")
	}

	var r0 *networkflowmonitor.GetScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetScopeInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.GetScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.GetScopeInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.GetScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.GetScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.GetScopeInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMonitors(ctx context.Context, params *networkflowmonitor.ListMonitorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.ListMonitorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitors")
	}

	var r0 *networkflowmonitor.ListMonitorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.ListMonitorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.ListMonitorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.ListMonitorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.ListMonitorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.ListMonitorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.ListMonitorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListScopes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListScopes(ctx context.Context, params *networkflowmonitor.ListScopesInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.ListScopesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScopes")
	}

	var r0 *networkflowmonitor.ListScopesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.ListScopesInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.ListScopesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.ListScopesInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.ListScopesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.ListScopesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.ListScopesInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *networkflowmonitor.ListTagsForResourceInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *networkflowmonitor.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.ListTagsForResourceInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.ListTagsForResourceInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.ListTagsForResourceInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() networkflowmonitor.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 networkflowmonitor.Options
	if rf, ok := ret.Get(0).(func() networkflowmonitor.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(networkflowmonitor.Options)
	}

	return r0
}

// StartQueryMonitorTopContributors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartQueryMonitorTopContributors(ctx context.Context, params *networkflowmonitor.StartQueryMonitorTopContributorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StartQueryMonitorTopContributorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartQueryMonitorTopContributors")
	}

	var r0 *networkflowmonitor.StartQueryMonitorTopContributorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StartQueryMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StartQueryMonitorTopContributorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StartQueryMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.StartQueryMonitorTopContributorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.StartQueryMonitorTopContributorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.StartQueryMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartQueryWorkloadInsightsTopContributors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartQueryWorkloadInsightsTopContributors(ctx context.Context, params *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StartQueryWorkloadInsightsTopContributorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartQueryWorkloadInsightsTopContributors")
	}

	var r0 *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StartQueryWorkloadInsightsTopContributorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.StartQueryWorkloadInsightsTopContributorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartQueryWorkloadInsightsTopContributorsData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartQueryWorkloadInsightsTopContributorsData(ctx context.Context, params *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartQueryWorkloadInsightsTopContributorsData")
	}

	var r0 *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.StartQueryWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQueryMonitorTopContributors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopQueryMonitorTopContributors(ctx context.Context, params *networkflowmonitor.StopQueryMonitorTopContributorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StopQueryMonitorTopContributorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopQueryMonitorTopContributors")
	}

	var r0 *networkflowmonitor.StopQueryMonitorTopContributorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StopQueryMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StopQueryMonitorTopContributorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StopQueryMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.StopQueryMonitorTopContributorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.StopQueryMonitorTopContributorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.StopQueryMonitorTopContributorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQueryWorkloadInsightsTopContributors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopQueryWorkloadInsightsTopContributors(ctx context.Context, params *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StopQueryWorkloadInsightsTopContributorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopQueryWorkloadInsightsTopContributors")
	}

	var r0 *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StopQueryWorkloadInsightsTopContributorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.StopQueryWorkloadInsightsTopContributorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQueryWorkloadInsightsTopContributorsData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopQueryWorkloadInsightsTopContributorsData(ctx context.Context, params *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopQueryWorkloadInsightsTopContributorsData")
	}

	var r0 *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.StopQueryWorkloadInsightsTopContributorsDataInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *networkflowmonitor.TagResourceInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *networkflowmonitor.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.TagResourceInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.TagResourceInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.TagResourceInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *networkflowmonitor.UntagResourceInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *networkflowmonitor.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.UntagResourceInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.UntagResourceInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.UntagResourceInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMonitor(ctx context.Context, params *networkflowmonitor.UpdateMonitorInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.UpdateMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitor")
	}

	var r0 *networkflowmonitor.UpdateMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.UpdateMonitorInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.UpdateMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.UpdateMonitorInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.UpdateMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.UpdateMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.UpdateMonitorInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateScope(ctx context.Context, params *networkflowmonitor.UpdateScopeInput, optFns ...func(*networkflowmonitor.Options)) (*networkflowmonitor.UpdateScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScope")
	}

	var r0 *networkflowmonitor.UpdateScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.UpdateScopeInput, ...func(*networkflowmonitor.Options)) (*networkflowmonitor.UpdateScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkflowmonitor.UpdateScopeInput, ...func(*networkflowmonitor.Options)) *networkflowmonitor.UpdateScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkflowmonitor.UpdateScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkflowmonitor.UpdateScopeInput, ...func(*networkflowmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
