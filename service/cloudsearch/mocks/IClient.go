// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	cloudsearch "github.com/aws/aws-sdk-go-v2/service/cloudsearch"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BuildSuggesters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BuildSuggesters(ctx context.Context, params *cloudsearch.BuildSuggestersInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.BuildSuggestersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BuildSuggesters")
	}

	var r0 *cloudsearch.BuildSuggestersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.BuildSuggestersInput, ...func(*cloudsearch.Options)) (*cloudsearch.BuildSuggestersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.BuildSuggestersInput, ...func(*cloudsearch.Options)) *cloudsearch.BuildSuggestersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.BuildSuggestersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.BuildSuggestersInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomain(ctx context.Context, params *cloudsearch.CreateDomainInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.CreateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 *cloudsearch.CreateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.CreateDomainInput, ...func(*cloudsearch.Options)) (*cloudsearch.CreateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.CreateDomainInput, ...func(*cloudsearch.Options)) *cloudsearch.CreateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.CreateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.CreateDomainInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefineAnalysisScheme provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DefineAnalysisScheme(ctx context.Context, params *cloudsearch.DefineAnalysisSchemeInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DefineAnalysisSchemeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DefineAnalysisScheme")
	}

	var r0 *cloudsearch.DefineAnalysisSchemeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DefineAnalysisSchemeInput, ...func(*cloudsearch.Options)) (*cloudsearch.DefineAnalysisSchemeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DefineAnalysisSchemeInput, ...func(*cloudsearch.Options)) *cloudsearch.DefineAnalysisSchemeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DefineAnalysisSchemeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DefineAnalysisSchemeInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefineExpression provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DefineExpression(ctx context.Context, params *cloudsearch.DefineExpressionInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DefineExpressionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DefineExpression")
	}

	var r0 *cloudsearch.DefineExpressionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DefineExpressionInput, ...func(*cloudsearch.Options)) (*cloudsearch.DefineExpressionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DefineExpressionInput, ...func(*cloudsearch.Options)) *cloudsearch.DefineExpressionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DefineExpressionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DefineExpressionInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefineIndexField provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DefineIndexField(ctx context.Context, params *cloudsearch.DefineIndexFieldInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DefineIndexFieldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DefineIndexField")
	}

	var r0 *cloudsearch.DefineIndexFieldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DefineIndexFieldInput, ...func(*cloudsearch.Options)) (*cloudsearch.DefineIndexFieldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DefineIndexFieldInput, ...func(*cloudsearch.Options)) *cloudsearch.DefineIndexFieldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DefineIndexFieldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DefineIndexFieldInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DefineSuggester provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DefineSuggester(ctx context.Context, params *cloudsearch.DefineSuggesterInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DefineSuggesterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DefineSuggester")
	}

	var r0 *cloudsearch.DefineSuggesterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DefineSuggesterInput, ...func(*cloudsearch.Options)) (*cloudsearch.DefineSuggesterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DefineSuggesterInput, ...func(*cloudsearch.Options)) *cloudsearch.DefineSuggesterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DefineSuggesterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DefineSuggesterInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnalysisScheme provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAnalysisScheme(ctx context.Context, params *cloudsearch.DeleteAnalysisSchemeInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DeleteAnalysisSchemeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnalysisScheme")
	}

	var r0 *cloudsearch.DeleteAnalysisSchemeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteAnalysisSchemeInput, ...func(*cloudsearch.Options)) (*cloudsearch.DeleteAnalysisSchemeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteAnalysisSchemeInput, ...func(*cloudsearch.Options)) *cloudsearch.DeleteAnalysisSchemeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DeleteAnalysisSchemeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DeleteAnalysisSchemeInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomain(ctx context.Context, params *cloudsearch.DeleteDomainInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomain")
	}

	var r0 *cloudsearch.DeleteDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteDomainInput, ...func(*cloudsearch.Options)) (*cloudsearch.DeleteDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteDomainInput, ...func(*cloudsearch.Options)) *cloudsearch.DeleteDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DeleteDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DeleteDomainInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExpression provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteExpression(ctx context.Context, params *cloudsearch.DeleteExpressionInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DeleteExpressionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpression")
	}

	var r0 *cloudsearch.DeleteExpressionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteExpressionInput, ...func(*cloudsearch.Options)) (*cloudsearch.DeleteExpressionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteExpressionInput, ...func(*cloudsearch.Options)) *cloudsearch.DeleteExpressionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DeleteExpressionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DeleteExpressionInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIndexField provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIndexField(ctx context.Context, params *cloudsearch.DeleteIndexFieldInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DeleteIndexFieldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndexField")
	}

	var r0 *cloudsearch.DeleteIndexFieldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteIndexFieldInput, ...func(*cloudsearch.Options)) (*cloudsearch.DeleteIndexFieldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteIndexFieldInput, ...func(*cloudsearch.Options)) *cloudsearch.DeleteIndexFieldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DeleteIndexFieldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DeleteIndexFieldInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSuggester provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSuggester(ctx context.Context, params *cloudsearch.DeleteSuggesterInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DeleteSuggesterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSuggester")
	}

	var r0 *cloudsearch.DeleteSuggesterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteSuggesterInput, ...func(*cloudsearch.Options)) (*cloudsearch.DeleteSuggesterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DeleteSuggesterInput, ...func(*cloudsearch.Options)) *cloudsearch.DeleteSuggesterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DeleteSuggesterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DeleteSuggesterInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAnalysisSchemes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAnalysisSchemes(ctx context.Context, params *cloudsearch.DescribeAnalysisSchemesInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeAnalysisSchemesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAnalysisSchemes")
	}

	var r0 *cloudsearch.DescribeAnalysisSchemesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeAnalysisSchemesInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeAnalysisSchemesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeAnalysisSchemesInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeAnalysisSchemesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeAnalysisSchemesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeAnalysisSchemesInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAvailabilityOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAvailabilityOptions(ctx context.Context, params *cloudsearch.DescribeAvailabilityOptionsInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeAvailabilityOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAvailabilityOptions")
	}

	var r0 *cloudsearch.DescribeAvailabilityOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeAvailabilityOptionsInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeAvailabilityOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeAvailabilityOptionsInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeAvailabilityOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeAvailabilityOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeAvailabilityOptionsInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDomainEndpointOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDomainEndpointOptions(ctx context.Context, params *cloudsearch.DescribeDomainEndpointOptionsInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeDomainEndpointOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDomainEndpointOptions")
	}

	var r0 *cloudsearch.DescribeDomainEndpointOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeDomainEndpointOptionsInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeDomainEndpointOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeDomainEndpointOptionsInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeDomainEndpointOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeDomainEndpointOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeDomainEndpointOptionsInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDomains(ctx context.Context, params *cloudsearch.DescribeDomainsInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDomains")
	}

	var r0 *cloudsearch.DescribeDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeDomainsInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeDomainsInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeDomainsInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExpressions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeExpressions(ctx context.Context, params *cloudsearch.DescribeExpressionsInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeExpressionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeExpressions")
	}

	var r0 *cloudsearch.DescribeExpressionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeExpressionsInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeExpressionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeExpressionsInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeExpressionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeExpressionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeExpressionsInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIndexFields provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIndexFields(ctx context.Context, params *cloudsearch.DescribeIndexFieldsInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeIndexFieldsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIndexFields")
	}

	var r0 *cloudsearch.DescribeIndexFieldsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeIndexFieldsInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeIndexFieldsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeIndexFieldsInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeIndexFieldsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeIndexFieldsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeIndexFieldsInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeScalingParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeScalingParameters(ctx context.Context, params *cloudsearch.DescribeScalingParametersInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeScalingParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeScalingParameters")
	}

	var r0 *cloudsearch.DescribeScalingParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeScalingParametersInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeScalingParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeScalingParametersInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeScalingParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeScalingParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeScalingParametersInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServiceAccessPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServiceAccessPolicies(ctx context.Context, params *cloudsearch.DescribeServiceAccessPoliciesInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServiceAccessPolicies")
	}

	var r0 *cloudsearch.DescribeServiceAccessPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeServiceAccessPoliciesInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeServiceAccessPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeServiceAccessPoliciesInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeServiceAccessPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeServiceAccessPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeServiceAccessPoliciesInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSuggesters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSuggesters(ctx context.Context, params *cloudsearch.DescribeSuggestersInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.DescribeSuggestersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSuggesters")
	}

	var r0 *cloudsearch.DescribeSuggestersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeSuggestersInput, ...func(*cloudsearch.Options)) (*cloudsearch.DescribeSuggestersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.DescribeSuggestersInput, ...func(*cloudsearch.Options)) *cloudsearch.DescribeSuggestersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.DescribeSuggestersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.DescribeSuggestersInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IndexDocuments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) IndexDocuments(ctx context.Context, params *cloudsearch.IndexDocumentsInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.IndexDocumentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IndexDocuments")
	}

	var r0 *cloudsearch.IndexDocumentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.IndexDocumentsInput, ...func(*cloudsearch.Options)) (*cloudsearch.IndexDocumentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.IndexDocumentsInput, ...func(*cloudsearch.Options)) *cloudsearch.IndexDocumentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.IndexDocumentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.IndexDocumentsInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainNames provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomainNames(ctx context.Context, params *cloudsearch.ListDomainNamesInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.ListDomainNamesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainNames")
	}

	var r0 *cloudsearch.ListDomainNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.ListDomainNamesInput, ...func(*cloudsearch.Options)) (*cloudsearch.ListDomainNamesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.ListDomainNamesInput, ...func(*cloudsearch.Options)) *cloudsearch.ListDomainNamesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.ListDomainNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.ListDomainNamesInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cloudsearch.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cloudsearch.Options
	if rf, ok := ret.Get(0).(func() cloudsearch.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cloudsearch.Options)
	}

	return r0
}

// UpdateAvailabilityOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAvailabilityOptions(ctx context.Context, params *cloudsearch.UpdateAvailabilityOptionsInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.UpdateAvailabilityOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvailabilityOptions")
	}

	var r0 *cloudsearch.UpdateAvailabilityOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.UpdateAvailabilityOptionsInput, ...func(*cloudsearch.Options)) (*cloudsearch.UpdateAvailabilityOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.UpdateAvailabilityOptionsInput, ...func(*cloudsearch.Options)) *cloudsearch.UpdateAvailabilityOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.UpdateAvailabilityOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.UpdateAvailabilityOptionsInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainEndpointOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainEndpointOptions(ctx context.Context, params *cloudsearch.UpdateDomainEndpointOptionsInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.UpdateDomainEndpointOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainEndpointOptions")
	}

	var r0 *cloudsearch.UpdateDomainEndpointOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.UpdateDomainEndpointOptionsInput, ...func(*cloudsearch.Options)) (*cloudsearch.UpdateDomainEndpointOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.UpdateDomainEndpointOptionsInput, ...func(*cloudsearch.Options)) *cloudsearch.UpdateDomainEndpointOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.UpdateDomainEndpointOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.UpdateDomainEndpointOptionsInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScalingParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateScalingParameters(ctx context.Context, params *cloudsearch.UpdateScalingParametersInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.UpdateScalingParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScalingParameters")
	}

	var r0 *cloudsearch.UpdateScalingParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.UpdateScalingParametersInput, ...func(*cloudsearch.Options)) (*cloudsearch.UpdateScalingParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.UpdateScalingParametersInput, ...func(*cloudsearch.Options)) *cloudsearch.UpdateScalingParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.UpdateScalingParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.UpdateScalingParametersInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceAccessPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceAccessPolicies(ctx context.Context, params *cloudsearch.UpdateServiceAccessPoliciesInput, optFns ...func(*cloudsearch.Options)) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAccessPolicies")
	}

	var r0 *cloudsearch.UpdateServiceAccessPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.UpdateServiceAccessPoliciesInput, ...func(*cloudsearch.Options)) (*cloudsearch.UpdateServiceAccessPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudsearch.UpdateServiceAccessPoliciesInput, ...func(*cloudsearch.Options)) *cloudsearch.UpdateServiceAccessPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudsearch.UpdateServiceAccessPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudsearch.UpdateServiceAccessPoliciesInput, ...func(*cloudsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
