// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	georoutes "github.com/aws/aws-sdk-go-v2/service/georoutes"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CalculateIsolines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CalculateIsolines(ctx context.Context, params *georoutes.CalculateIsolinesInput, optFns ...func(*georoutes.Options)) (*georoutes.CalculateIsolinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CalculateIsolines")
	}

	var r0 *georoutes.CalculateIsolinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.CalculateIsolinesInput, ...func(*georoutes.Options)) (*georoutes.CalculateIsolinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.CalculateIsolinesInput, ...func(*georoutes.Options)) *georoutes.CalculateIsolinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*georoutes.CalculateIsolinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *georoutes.CalculateIsolinesInput, ...func(*georoutes.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateRouteMatrix provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CalculateRouteMatrix(ctx context.Context, params *georoutes.CalculateRouteMatrixInput, optFns ...func(*georoutes.Options)) (*georoutes.CalculateRouteMatrixOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRouteMatrix")
	}

	var r0 *georoutes.CalculateRouteMatrixOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.CalculateRouteMatrixInput, ...func(*georoutes.Options)) (*georoutes.CalculateRouteMatrixOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.CalculateRouteMatrixInput, ...func(*georoutes.Options)) *georoutes.CalculateRouteMatrixOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*georoutes.CalculateRouteMatrixOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *georoutes.CalculateRouteMatrixInput, ...func(*georoutes.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CalculateRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CalculateRoutes(ctx context.Context, params *georoutes.CalculateRoutesInput, optFns ...func(*georoutes.Options)) (*georoutes.CalculateRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CalculateRoutes")
	}

	var r0 *georoutes.CalculateRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.CalculateRoutesInput, ...func(*georoutes.Options)) (*georoutes.CalculateRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.CalculateRoutesInput, ...func(*georoutes.Options)) *georoutes.CalculateRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*georoutes.CalculateRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *georoutes.CalculateRoutesInput, ...func(*georoutes.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OptimizeWaypoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) OptimizeWaypoints(ctx context.Context, params *georoutes.OptimizeWaypointsInput, optFns ...func(*georoutes.Options)) (*georoutes.OptimizeWaypointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OptimizeWaypoints")
	}

	var r0 *georoutes.OptimizeWaypointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.OptimizeWaypointsInput, ...func(*georoutes.Options)) (*georoutes.OptimizeWaypointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.OptimizeWaypointsInput, ...func(*georoutes.Options)) *georoutes.OptimizeWaypointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*georoutes.OptimizeWaypointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *georoutes.OptimizeWaypointsInput, ...func(*georoutes.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() georoutes.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 georoutes.Options
	if rf, ok := ret.Get(0).(func() georoutes.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(georoutes.Options)
	}

	return r0
}

// SnapToRoads provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SnapToRoads(ctx context.Context, params *georoutes.SnapToRoadsInput, optFns ...func(*georoutes.Options)) (*georoutes.SnapToRoadsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SnapToRoads")
	}

	var r0 *georoutes.SnapToRoadsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.SnapToRoadsInput, ...func(*georoutes.Options)) (*georoutes.SnapToRoadsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *georoutes.SnapToRoadsInput, ...func(*georoutes.Options)) *georoutes.SnapToRoadsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*georoutes.SnapToRoadsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *georoutes.SnapToRoadsInput, ...func(*georoutes.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
