// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	billingconductor "github.com/aws/aws-sdk-go-v2/service/billingconductor"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateAccounts(ctx context.Context, params *billingconductor.AssociateAccountsInput, optFns ...func(*billingconductor.Options)) (*billingconductor.AssociateAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateAccounts")
	}

	var r0 *billingconductor.AssociateAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.AssociateAccountsInput, ...func(*billingconductor.Options)) (*billingconductor.AssociateAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.AssociateAccountsInput, ...func(*billingconductor.Options)) *billingconductor.AssociateAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.AssociateAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.AssociateAccountsInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociatePricingRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePricingRules(ctx context.Context, params *billingconductor.AssociatePricingRulesInput, optFns ...func(*billingconductor.Options)) (*billingconductor.AssociatePricingRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePricingRules")
	}

	var r0 *billingconductor.AssociatePricingRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.AssociatePricingRulesInput, ...func(*billingconductor.Options)) (*billingconductor.AssociatePricingRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.AssociatePricingRulesInput, ...func(*billingconductor.Options)) *billingconductor.AssociatePricingRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.AssociatePricingRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.AssociatePricingRulesInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchAssociateResourcesToCustomLineItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchAssociateResourcesToCustomLineItem(ctx context.Context, params *billingconductor.BatchAssociateResourcesToCustomLineItemInput, optFns ...func(*billingconductor.Options)) (*billingconductor.BatchAssociateResourcesToCustomLineItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchAssociateResourcesToCustomLineItem")
	}

	var r0 *billingconductor.BatchAssociateResourcesToCustomLineItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.BatchAssociateResourcesToCustomLineItemInput, ...func(*billingconductor.Options)) (*billingconductor.BatchAssociateResourcesToCustomLineItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.BatchAssociateResourcesToCustomLineItemInput, ...func(*billingconductor.Options)) *billingconductor.BatchAssociateResourcesToCustomLineItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.BatchAssociateResourcesToCustomLineItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.BatchAssociateResourcesToCustomLineItemInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDisassociateResourcesFromCustomLineItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDisassociateResourcesFromCustomLineItem(ctx context.Context, params *billingconductor.BatchDisassociateResourcesFromCustomLineItemInput, optFns ...func(*billingconductor.Options)) (*billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDisassociateResourcesFromCustomLineItem")
	}

	var r0 *billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.BatchDisassociateResourcesFromCustomLineItemInput, ...func(*billingconductor.Options)) (*billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.BatchDisassociateResourcesFromCustomLineItemInput, ...func(*billingconductor.Options)) *billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.BatchDisassociateResourcesFromCustomLineItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.BatchDisassociateResourcesFromCustomLineItemInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBillingGroup(ctx context.Context, params *billingconductor.CreateBillingGroupInput, optFns ...func(*billingconductor.Options)) (*billingconductor.CreateBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBillingGroup")
	}

	var r0 *billingconductor.CreateBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.CreateBillingGroupInput, ...func(*billingconductor.Options)) (*billingconductor.CreateBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.CreateBillingGroupInput, ...func(*billingconductor.Options)) *billingconductor.CreateBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.CreateBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.CreateBillingGroupInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomLineItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomLineItem(ctx context.Context, params *billingconductor.CreateCustomLineItemInput, optFns ...func(*billingconductor.Options)) (*billingconductor.CreateCustomLineItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomLineItem")
	}

	var r0 *billingconductor.CreateCustomLineItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.CreateCustomLineItemInput, ...func(*billingconductor.Options)) (*billingconductor.CreateCustomLineItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.CreateCustomLineItemInput, ...func(*billingconductor.Options)) *billingconductor.CreateCustomLineItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.CreateCustomLineItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.CreateCustomLineItemInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePricingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePricingPlan(ctx context.Context, params *billingconductor.CreatePricingPlanInput, optFns ...func(*billingconductor.Options)) (*billingconductor.CreatePricingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePricingPlan")
	}

	var r0 *billingconductor.CreatePricingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.CreatePricingPlanInput, ...func(*billingconductor.Options)) (*billingconductor.CreatePricingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.CreatePricingPlanInput, ...func(*billingconductor.Options)) *billingconductor.CreatePricingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.CreatePricingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.CreatePricingPlanInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePricingRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePricingRule(ctx context.Context, params *billingconductor.CreatePricingRuleInput, optFns ...func(*billingconductor.Options)) (*billingconductor.CreatePricingRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePricingRule")
	}

	var r0 *billingconductor.CreatePricingRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.CreatePricingRuleInput, ...func(*billingconductor.Options)) (*billingconductor.CreatePricingRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.CreatePricingRuleInput, ...func(*billingconductor.Options)) *billingconductor.CreatePricingRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.CreatePricingRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.CreatePricingRuleInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBillingGroup(ctx context.Context, params *billingconductor.DeleteBillingGroupInput, optFns ...func(*billingconductor.Options)) (*billingconductor.DeleteBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBillingGroup")
	}

	var r0 *billingconductor.DeleteBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DeleteBillingGroupInput, ...func(*billingconductor.Options)) (*billingconductor.DeleteBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DeleteBillingGroupInput, ...func(*billingconductor.Options)) *billingconductor.DeleteBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.DeleteBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.DeleteBillingGroupInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomLineItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomLineItem(ctx context.Context, params *billingconductor.DeleteCustomLineItemInput, optFns ...func(*billingconductor.Options)) (*billingconductor.DeleteCustomLineItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomLineItem")
	}

	var r0 *billingconductor.DeleteCustomLineItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DeleteCustomLineItemInput, ...func(*billingconductor.Options)) (*billingconductor.DeleteCustomLineItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DeleteCustomLineItemInput, ...func(*billingconductor.Options)) *billingconductor.DeleteCustomLineItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.DeleteCustomLineItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.DeleteCustomLineItemInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePricingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePricingPlan(ctx context.Context, params *billingconductor.DeletePricingPlanInput, optFns ...func(*billingconductor.Options)) (*billingconductor.DeletePricingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePricingPlan")
	}

	var r0 *billingconductor.DeletePricingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DeletePricingPlanInput, ...func(*billingconductor.Options)) (*billingconductor.DeletePricingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DeletePricingPlanInput, ...func(*billingconductor.Options)) *billingconductor.DeletePricingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.DeletePricingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.DeletePricingPlanInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePricingRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePricingRule(ctx context.Context, params *billingconductor.DeletePricingRuleInput, optFns ...func(*billingconductor.Options)) (*billingconductor.DeletePricingRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePricingRule")
	}

	var r0 *billingconductor.DeletePricingRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DeletePricingRuleInput, ...func(*billingconductor.Options)) (*billingconductor.DeletePricingRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DeletePricingRuleInput, ...func(*billingconductor.Options)) *billingconductor.DeletePricingRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.DeletePricingRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.DeletePricingRuleInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateAccounts(ctx context.Context, params *billingconductor.DisassociateAccountsInput, optFns ...func(*billingconductor.Options)) (*billingconductor.DisassociateAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateAccounts")
	}

	var r0 *billingconductor.DisassociateAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DisassociateAccountsInput, ...func(*billingconductor.Options)) (*billingconductor.DisassociateAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DisassociateAccountsInput, ...func(*billingconductor.Options)) *billingconductor.DisassociateAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.DisassociateAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.DisassociateAccountsInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePricingRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePricingRules(ctx context.Context, params *billingconductor.DisassociatePricingRulesInput, optFns ...func(*billingconductor.Options)) (*billingconductor.DisassociatePricingRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePricingRules")
	}

	var r0 *billingconductor.DisassociatePricingRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DisassociatePricingRulesInput, ...func(*billingconductor.Options)) (*billingconductor.DisassociatePricingRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.DisassociatePricingRulesInput, ...func(*billingconductor.Options)) *billingconductor.DisassociatePricingRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.DisassociatePricingRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.DisassociatePricingRulesInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillingGroupCostReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBillingGroupCostReport(ctx context.Context, params *billingconductor.GetBillingGroupCostReportInput, optFns ...func(*billingconductor.Options)) (*billingconductor.GetBillingGroupCostReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBillingGroupCostReport")
	}

	var r0 *billingconductor.GetBillingGroupCostReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.GetBillingGroupCostReportInput, ...func(*billingconductor.Options)) (*billingconductor.GetBillingGroupCostReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.GetBillingGroupCostReportInput, ...func(*billingconductor.Options)) *billingconductor.GetBillingGroupCostReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.GetBillingGroupCostReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.GetBillingGroupCostReportInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountAssociations(ctx context.Context, params *billingconductor.ListAccountAssociationsInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListAccountAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountAssociations")
	}

	var r0 *billingconductor.ListAccountAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListAccountAssociationsInput, ...func(*billingconductor.Options)) (*billingconductor.ListAccountAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListAccountAssociationsInput, ...func(*billingconductor.Options)) *billingconductor.ListAccountAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListAccountAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListAccountAssociationsInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillingGroupCostReports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillingGroupCostReports(ctx context.Context, params *billingconductor.ListBillingGroupCostReportsInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListBillingGroupCostReportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillingGroupCostReports")
	}

	var r0 *billingconductor.ListBillingGroupCostReportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListBillingGroupCostReportsInput, ...func(*billingconductor.Options)) (*billingconductor.ListBillingGroupCostReportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListBillingGroupCostReportsInput, ...func(*billingconductor.Options)) *billingconductor.ListBillingGroupCostReportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListBillingGroupCostReportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListBillingGroupCostReportsInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillingGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillingGroups(ctx context.Context, params *billingconductor.ListBillingGroupsInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListBillingGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillingGroups")
	}

	var r0 *billingconductor.ListBillingGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListBillingGroupsInput, ...func(*billingconductor.Options)) (*billingconductor.ListBillingGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListBillingGroupsInput, ...func(*billingconductor.Options)) *billingconductor.ListBillingGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListBillingGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListBillingGroupsInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomLineItemVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomLineItemVersions(ctx context.Context, params *billingconductor.ListCustomLineItemVersionsInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListCustomLineItemVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomLineItemVersions")
	}

	var r0 *billingconductor.ListCustomLineItemVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListCustomLineItemVersionsInput, ...func(*billingconductor.Options)) (*billingconductor.ListCustomLineItemVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListCustomLineItemVersionsInput, ...func(*billingconductor.Options)) *billingconductor.ListCustomLineItemVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListCustomLineItemVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListCustomLineItemVersionsInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomLineItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomLineItems(ctx context.Context, params *billingconductor.ListCustomLineItemsInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListCustomLineItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomLineItems")
	}

	var r0 *billingconductor.ListCustomLineItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListCustomLineItemsInput, ...func(*billingconductor.Options)) (*billingconductor.ListCustomLineItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListCustomLineItemsInput, ...func(*billingconductor.Options)) *billingconductor.ListCustomLineItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListCustomLineItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListCustomLineItemsInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPricingPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPricingPlans(ctx context.Context, params *billingconductor.ListPricingPlansInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListPricingPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPricingPlans")
	}

	var r0 *billingconductor.ListPricingPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListPricingPlansInput, ...func(*billingconductor.Options)) (*billingconductor.ListPricingPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListPricingPlansInput, ...func(*billingconductor.Options)) *billingconductor.ListPricingPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListPricingPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListPricingPlansInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPricingPlansAssociatedWithPricingRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPricingPlansAssociatedWithPricingRule(ctx context.Context, params *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPricingPlansAssociatedWithPricingRule")
	}

	var r0 *billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput, ...func(*billingconductor.Options)) (*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput, ...func(*billingconductor.Options)) *billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListPricingPlansAssociatedWithPricingRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListPricingPlansAssociatedWithPricingRuleInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPricingRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPricingRules(ctx context.Context, params *billingconductor.ListPricingRulesInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListPricingRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPricingRules")
	}

	var r0 *billingconductor.ListPricingRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListPricingRulesInput, ...func(*billingconductor.Options)) (*billingconductor.ListPricingRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListPricingRulesInput, ...func(*billingconductor.Options)) *billingconductor.ListPricingRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListPricingRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListPricingRulesInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPricingRulesAssociatedToPricingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPricingRulesAssociatedToPricingPlan(ctx context.Context, params *billingconductor.ListPricingRulesAssociatedToPricingPlanInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPricingRulesAssociatedToPricingPlan")
	}

	var r0 *billingconductor.ListPricingRulesAssociatedToPricingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListPricingRulesAssociatedToPricingPlanInput, ...func(*billingconductor.Options)) (*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListPricingRulesAssociatedToPricingPlanInput, ...func(*billingconductor.Options)) *billingconductor.ListPricingRulesAssociatedToPricingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListPricingRulesAssociatedToPricingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListPricingRulesAssociatedToPricingPlanInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcesAssociatedToCustomLineItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourcesAssociatedToCustomLineItem(ctx context.Context, params *billingconductor.ListResourcesAssociatedToCustomLineItemInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListResourcesAssociatedToCustomLineItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourcesAssociatedToCustomLineItem")
	}

	var r0 *billingconductor.ListResourcesAssociatedToCustomLineItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListResourcesAssociatedToCustomLineItemInput, ...func(*billingconductor.Options)) (*billingconductor.ListResourcesAssociatedToCustomLineItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListResourcesAssociatedToCustomLineItemInput, ...func(*billingconductor.Options)) *billingconductor.ListResourcesAssociatedToCustomLineItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListResourcesAssociatedToCustomLineItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListResourcesAssociatedToCustomLineItemInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *billingconductor.ListTagsForResourceInput, optFns ...func(*billingconductor.Options)) (*billingconductor.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *billingconductor.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListTagsForResourceInput, ...func(*billingconductor.Options)) (*billingconductor.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.ListTagsForResourceInput, ...func(*billingconductor.Options)) *billingconductor.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.ListTagsForResourceInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() billingconductor.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 billingconductor.Options
	if rf, ok := ret.Get(0).(func() billingconductor.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(billingconductor.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *billingconductor.TagResourceInput, optFns ...func(*billingconductor.Options)) (*billingconductor.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *billingconductor.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.TagResourceInput, ...func(*billingconductor.Options)) (*billingconductor.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.TagResourceInput, ...func(*billingconductor.Options)) *billingconductor.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.TagResourceInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *billingconductor.UntagResourceInput, optFns ...func(*billingconductor.Options)) (*billingconductor.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *billingconductor.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UntagResourceInput, ...func(*billingconductor.Options)) (*billingconductor.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UntagResourceInput, ...func(*billingconductor.Options)) *billingconductor.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.UntagResourceInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBillingGroup(ctx context.Context, params *billingconductor.UpdateBillingGroupInput, optFns ...func(*billingconductor.Options)) (*billingconductor.UpdateBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBillingGroup")
	}

	var r0 *billingconductor.UpdateBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UpdateBillingGroupInput, ...func(*billingconductor.Options)) (*billingconductor.UpdateBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UpdateBillingGroupInput, ...func(*billingconductor.Options)) *billingconductor.UpdateBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.UpdateBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.UpdateBillingGroupInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomLineItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCustomLineItem(ctx context.Context, params *billingconductor.UpdateCustomLineItemInput, optFns ...func(*billingconductor.Options)) (*billingconductor.UpdateCustomLineItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomLineItem")
	}

	var r0 *billingconductor.UpdateCustomLineItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UpdateCustomLineItemInput, ...func(*billingconductor.Options)) (*billingconductor.UpdateCustomLineItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UpdateCustomLineItemInput, ...func(*billingconductor.Options)) *billingconductor.UpdateCustomLineItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.UpdateCustomLineItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.UpdateCustomLineItemInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePricingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePricingPlan(ctx context.Context, params *billingconductor.UpdatePricingPlanInput, optFns ...func(*billingconductor.Options)) (*billingconductor.UpdatePricingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePricingPlan")
	}

	var r0 *billingconductor.UpdatePricingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UpdatePricingPlanInput, ...func(*billingconductor.Options)) (*billingconductor.UpdatePricingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UpdatePricingPlanInput, ...func(*billingconductor.Options)) *billingconductor.UpdatePricingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.UpdatePricingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.UpdatePricingPlanInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePricingRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePricingRule(ctx context.Context, params *billingconductor.UpdatePricingRuleInput, optFns ...func(*billingconductor.Options)) (*billingconductor.UpdatePricingRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePricingRule")
	}

	var r0 *billingconductor.UpdatePricingRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UpdatePricingRuleInput, ...func(*billingconductor.Options)) (*billingconductor.UpdatePricingRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billingconductor.UpdatePricingRuleInput, ...func(*billingconductor.Options)) *billingconductor.UpdatePricingRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billingconductor.UpdatePricingRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billingconductor.UpdatePricingRuleInput, ...func(*billingconductor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
