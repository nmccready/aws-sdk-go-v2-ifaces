// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	resiliencehub "github.com/aws/aws-sdk-go-v2/service/resiliencehub"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddDraftAppVersionResourceMappings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddDraftAppVersionResourceMappings(ctx context.Context, params *resiliencehub.AddDraftAppVersionResourceMappingsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.AddDraftAppVersionResourceMappingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddDraftAppVersionResourceMappings")
	}

	var r0 *resiliencehub.AddDraftAppVersionResourceMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.AddDraftAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) (*resiliencehub.AddDraftAppVersionResourceMappingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.AddDraftAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) *resiliencehub.AddDraftAppVersionResourceMappingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.AddDraftAppVersionResourceMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.AddDraftAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateRecommendationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateRecommendationStatus(ctx context.Context, params *resiliencehub.BatchUpdateRecommendationStatusInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.BatchUpdateRecommendationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateRecommendationStatus")
	}

	var r0 *resiliencehub.BatchUpdateRecommendationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.BatchUpdateRecommendationStatusInput, ...func(*resiliencehub.Options)) (*resiliencehub.BatchUpdateRecommendationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.BatchUpdateRecommendationStatusInput, ...func(*resiliencehub.Options)) *resiliencehub.BatchUpdateRecommendationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.BatchUpdateRecommendationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.BatchUpdateRecommendationStatusInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApp(ctx context.Context, params *resiliencehub.CreateAppInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.CreateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *resiliencehub.CreateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateAppInput, ...func(*resiliencehub.Options)) (*resiliencehub.CreateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateAppInput, ...func(*resiliencehub.Options)) *resiliencehub.CreateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.CreateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.CreateAppInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppVersionAppComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppVersionAppComponent(ctx context.Context, params *resiliencehub.CreateAppVersionAppComponentInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.CreateAppVersionAppComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppVersionAppComponent")
	}

	var r0 *resiliencehub.CreateAppVersionAppComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateAppVersionAppComponentInput, ...func(*resiliencehub.Options)) (*resiliencehub.CreateAppVersionAppComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateAppVersionAppComponentInput, ...func(*resiliencehub.Options)) *resiliencehub.CreateAppVersionAppComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.CreateAppVersionAppComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.CreateAppVersionAppComponentInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppVersionResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppVersionResource(ctx context.Context, params *resiliencehub.CreateAppVersionResourceInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.CreateAppVersionResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppVersionResource")
	}

	var r0 *resiliencehub.CreateAppVersionResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateAppVersionResourceInput, ...func(*resiliencehub.Options)) (*resiliencehub.CreateAppVersionResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateAppVersionResourceInput, ...func(*resiliencehub.Options)) *resiliencehub.CreateAppVersionResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.CreateAppVersionResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.CreateAppVersionResourceInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRecommendationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRecommendationTemplate(ctx context.Context, params *resiliencehub.CreateRecommendationTemplateInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.CreateRecommendationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecommendationTemplate")
	}

	var r0 *resiliencehub.CreateRecommendationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateRecommendationTemplateInput, ...func(*resiliencehub.Options)) (*resiliencehub.CreateRecommendationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateRecommendationTemplateInput, ...func(*resiliencehub.Options)) *resiliencehub.CreateRecommendationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.CreateRecommendationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.CreateRecommendationTemplateInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResiliencyPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResiliencyPolicy(ctx context.Context, params *resiliencehub.CreateResiliencyPolicyInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.CreateResiliencyPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResiliencyPolicy")
	}

	var r0 *resiliencehub.CreateResiliencyPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateResiliencyPolicyInput, ...func(*resiliencehub.Options)) (*resiliencehub.CreateResiliencyPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.CreateResiliencyPolicyInput, ...func(*resiliencehub.Options)) *resiliencehub.CreateResiliencyPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.CreateResiliencyPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.CreateResiliencyPolicyInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApp(ctx context.Context, params *resiliencehub.DeleteAppInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *resiliencehub.DeleteAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppInput, ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppInput, ...func(*resiliencehub.Options)) *resiliencehub.DeleteAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DeleteAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DeleteAppInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppAssessment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppAssessment(ctx context.Context, params *resiliencehub.DeleteAppAssessmentInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppAssessmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppAssessment")
	}

	var r0 *resiliencehub.DeleteAppAssessmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppAssessmentInput, ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppAssessmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppAssessmentInput, ...func(*resiliencehub.Options)) *resiliencehub.DeleteAppAssessmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DeleteAppAssessmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DeleteAppAssessmentInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppInputSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppInputSource(ctx context.Context, params *resiliencehub.DeleteAppInputSourceInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppInputSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppInputSource")
	}

	var r0 *resiliencehub.DeleteAppInputSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppInputSourceInput, ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppInputSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppInputSourceInput, ...func(*resiliencehub.Options)) *resiliencehub.DeleteAppInputSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DeleteAppInputSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DeleteAppInputSourceInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppVersionAppComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppVersionAppComponent(ctx context.Context, params *resiliencehub.DeleteAppVersionAppComponentInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppVersionAppComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppVersionAppComponent")
	}

	var r0 *resiliencehub.DeleteAppVersionAppComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppVersionAppComponentInput, ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppVersionAppComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppVersionAppComponentInput, ...func(*resiliencehub.Options)) *resiliencehub.DeleteAppVersionAppComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DeleteAppVersionAppComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DeleteAppVersionAppComponentInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppVersionResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppVersionResource(ctx context.Context, params *resiliencehub.DeleteAppVersionResourceInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppVersionResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppVersionResource")
	}

	var r0 *resiliencehub.DeleteAppVersionResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppVersionResourceInput, ...func(*resiliencehub.Options)) (*resiliencehub.DeleteAppVersionResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteAppVersionResourceInput, ...func(*resiliencehub.Options)) *resiliencehub.DeleteAppVersionResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DeleteAppVersionResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DeleteAppVersionResourceInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecommendationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRecommendationTemplate(ctx context.Context, params *resiliencehub.DeleteRecommendationTemplateInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DeleteRecommendationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecommendationTemplate")
	}

	var r0 *resiliencehub.DeleteRecommendationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteRecommendationTemplateInput, ...func(*resiliencehub.Options)) (*resiliencehub.DeleteRecommendationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteRecommendationTemplateInput, ...func(*resiliencehub.Options)) *resiliencehub.DeleteRecommendationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DeleteRecommendationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DeleteRecommendationTemplateInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResiliencyPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResiliencyPolicy(ctx context.Context, params *resiliencehub.DeleteResiliencyPolicyInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DeleteResiliencyPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResiliencyPolicy")
	}

	var r0 *resiliencehub.DeleteResiliencyPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteResiliencyPolicyInput, ...func(*resiliencehub.Options)) (*resiliencehub.DeleteResiliencyPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DeleteResiliencyPolicyInput, ...func(*resiliencehub.Options)) *resiliencehub.DeleteResiliencyPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DeleteResiliencyPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DeleteResiliencyPolicyInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApp(ctx context.Context, params *resiliencehub.DescribeAppInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApp")
	}

	var r0 *resiliencehub.DescribeAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeAppInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppAssessment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppAssessment(ctx context.Context, params *resiliencehub.DescribeAppAssessmentInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppAssessmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppAssessment")
	}

	var r0 *resiliencehub.DescribeAppAssessmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppAssessmentInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppAssessmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppAssessmentInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeAppAssessmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeAppAssessmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeAppAssessmentInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppVersion(ctx context.Context, params *resiliencehub.DescribeAppVersionInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppVersion")
	}

	var r0 *resiliencehub.DescribeAppVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeAppVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeAppVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeAppVersionInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppVersionAppComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppVersionAppComponent(ctx context.Context, params *resiliencehub.DescribeAppVersionAppComponentInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionAppComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppVersionAppComponent")
	}

	var r0 *resiliencehub.DescribeAppVersionAppComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionAppComponentInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionAppComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionAppComponentInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeAppVersionAppComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeAppVersionAppComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeAppVersionAppComponentInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppVersionResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppVersionResource(ctx context.Context, params *resiliencehub.DescribeAppVersionResourceInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppVersionResource")
	}

	var r0 *resiliencehub.DescribeAppVersionResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionResourceInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionResourceInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeAppVersionResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeAppVersionResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeAppVersionResourceInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppVersionResourcesResolutionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppVersionResourcesResolutionStatus(ctx context.Context, params *resiliencehub.DescribeAppVersionResourcesResolutionStatusInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppVersionResourcesResolutionStatus")
	}

	var r0 *resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionResourcesResolutionStatusInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionResourcesResolutionStatusInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeAppVersionResourcesResolutionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeAppVersionResourcesResolutionStatusInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppVersionTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppVersionTemplate(ctx context.Context, params *resiliencehub.DescribeAppVersionTemplateInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppVersionTemplate")
	}

	var r0 *resiliencehub.DescribeAppVersionTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionTemplateInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeAppVersionTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeAppVersionTemplateInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeAppVersionTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeAppVersionTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeAppVersionTemplateInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDraftAppVersionResourcesImportStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDraftAppVersionResourcesImportStatus(ctx context.Context, params *resiliencehub.DescribeDraftAppVersionResourcesImportStatusInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDraftAppVersionResourcesImportStatus")
	}

	var r0 *resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeDraftAppVersionResourcesImportStatusInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeDraftAppVersionResourcesImportStatusInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeDraftAppVersionResourcesImportStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeDraftAppVersionResourcesImportStatusInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResiliencyPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeResiliencyPolicy(ctx context.Context, params *resiliencehub.DescribeResiliencyPolicyInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.DescribeResiliencyPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeResiliencyPolicy")
	}

	var r0 *resiliencehub.DescribeResiliencyPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeResiliencyPolicyInput, ...func(*resiliencehub.Options)) (*resiliencehub.DescribeResiliencyPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.DescribeResiliencyPolicyInput, ...func(*resiliencehub.Options)) *resiliencehub.DescribeResiliencyPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.DescribeResiliencyPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.DescribeResiliencyPolicyInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportResourcesToDraftAppVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportResourcesToDraftAppVersion(ctx context.Context, params *resiliencehub.ImportResourcesToDraftAppVersionInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ImportResourcesToDraftAppVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportResourcesToDraftAppVersion")
	}

	var r0 *resiliencehub.ImportResourcesToDraftAppVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ImportResourcesToDraftAppVersionInput, ...func(*resiliencehub.Options)) (*resiliencehub.ImportResourcesToDraftAppVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ImportResourcesToDraftAppVersionInput, ...func(*resiliencehub.Options)) *resiliencehub.ImportResourcesToDraftAppVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ImportResourcesToDraftAppVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ImportResourcesToDraftAppVersionInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAlarmRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAlarmRecommendations(ctx context.Context, params *resiliencehub.ListAlarmRecommendationsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAlarmRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAlarmRecommendations")
	}

	var r0 *resiliencehub.ListAlarmRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAlarmRecommendationsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAlarmRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAlarmRecommendationsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAlarmRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAlarmRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAlarmRecommendationsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppAssessmentComplianceDrifts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppAssessmentComplianceDrifts(ctx context.Context, params *resiliencehub.ListAppAssessmentComplianceDriftsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppAssessmentComplianceDriftsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppAssessmentComplianceDrifts")
	}

	var r0 *resiliencehub.ListAppAssessmentComplianceDriftsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppAssessmentComplianceDriftsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppAssessmentComplianceDriftsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppAssessmentComplianceDriftsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppAssessmentComplianceDriftsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppAssessmentComplianceDriftsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppAssessmentComplianceDriftsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppAssessmentResourceDrifts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppAssessmentResourceDrifts(ctx context.Context, params *resiliencehub.ListAppAssessmentResourceDriftsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppAssessmentResourceDriftsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppAssessmentResourceDrifts")
	}

	var r0 *resiliencehub.ListAppAssessmentResourceDriftsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppAssessmentResourceDriftsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppAssessmentResourceDriftsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppAssessmentResourceDriftsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppAssessmentResourceDriftsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppAssessmentResourceDriftsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppAssessmentResourceDriftsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppAssessments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppAssessments(ctx context.Context, params *resiliencehub.ListAppAssessmentsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppAssessmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppAssessments")
	}

	var r0 *resiliencehub.ListAppAssessmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppAssessmentsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppAssessmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppAssessmentsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppAssessmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppAssessmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppAssessmentsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppComponentCompliances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppComponentCompliances(ctx context.Context, params *resiliencehub.ListAppComponentCompliancesInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppComponentCompliancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppComponentCompliances")
	}

	var r0 *resiliencehub.ListAppComponentCompliancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppComponentCompliancesInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppComponentCompliancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppComponentCompliancesInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppComponentCompliancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppComponentCompliancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppComponentCompliancesInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppComponentRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppComponentRecommendations(ctx context.Context, params *resiliencehub.ListAppComponentRecommendationsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppComponentRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppComponentRecommendations")
	}

	var r0 *resiliencehub.ListAppComponentRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppComponentRecommendationsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppComponentRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppComponentRecommendationsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppComponentRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppComponentRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppComponentRecommendationsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppInputSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppInputSources(ctx context.Context, params *resiliencehub.ListAppInputSourcesInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppInputSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppInputSources")
	}

	var r0 *resiliencehub.ListAppInputSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppInputSourcesInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppInputSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppInputSourcesInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppInputSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppInputSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppInputSourcesInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppVersionAppComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppVersionAppComponents(ctx context.Context, params *resiliencehub.ListAppVersionAppComponentsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppVersionAppComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppVersionAppComponents")
	}

	var r0 *resiliencehub.ListAppVersionAppComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppVersionAppComponentsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppVersionAppComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppVersionAppComponentsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppVersionAppComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppVersionAppComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppVersionAppComponentsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppVersionResourceMappings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppVersionResourceMappings(ctx context.Context, params *resiliencehub.ListAppVersionResourceMappingsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppVersionResourceMappingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppVersionResourceMappings")
	}

	var r0 *resiliencehub.ListAppVersionResourceMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppVersionResourceMappingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppVersionResourceMappingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppVersionResourceMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppVersionResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppVersionResources(ctx context.Context, params *resiliencehub.ListAppVersionResourcesInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppVersionResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppVersionResources")
	}

	var r0 *resiliencehub.ListAppVersionResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppVersionResourcesInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppVersionResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppVersionResourcesInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppVersionResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppVersionResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppVersionResourcesInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppVersions(ctx context.Context, params *resiliencehub.ListAppVersionsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppVersions")
	}

	var r0 *resiliencehub.ListAppVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppVersionsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppVersionsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppVersionsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApps(ctx context.Context, params *resiliencehub.ListAppsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApps")
	}

	var r0 *resiliencehub.ListAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListAppsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListAppsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecommendationTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecommendationTemplates(ctx context.Context, params *resiliencehub.ListRecommendationTemplatesInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListRecommendationTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecommendationTemplates")
	}

	var r0 *resiliencehub.ListRecommendationTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListRecommendationTemplatesInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListRecommendationTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListRecommendationTemplatesInput, ...func(*resiliencehub.Options)) *resiliencehub.ListRecommendationTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListRecommendationTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListRecommendationTemplatesInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResiliencyPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResiliencyPolicies(ctx context.Context, params *resiliencehub.ListResiliencyPoliciesInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListResiliencyPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResiliencyPolicies")
	}

	var r0 *resiliencehub.ListResiliencyPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListResiliencyPoliciesInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListResiliencyPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListResiliencyPoliciesInput, ...func(*resiliencehub.Options)) *resiliencehub.ListResiliencyPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListResiliencyPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListResiliencyPoliciesInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSopRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSopRecommendations(ctx context.Context, params *resiliencehub.ListSopRecommendationsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListSopRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSopRecommendations")
	}

	var r0 *resiliencehub.ListSopRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListSopRecommendationsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListSopRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListSopRecommendationsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListSopRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListSopRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListSopRecommendationsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSuggestedResiliencyPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSuggestedResiliencyPolicies(ctx context.Context, params *resiliencehub.ListSuggestedResiliencyPoliciesInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListSuggestedResiliencyPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSuggestedResiliencyPolicies")
	}

	var r0 *resiliencehub.ListSuggestedResiliencyPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListSuggestedResiliencyPoliciesInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListSuggestedResiliencyPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListSuggestedResiliencyPoliciesInput, ...func(*resiliencehub.Options)) *resiliencehub.ListSuggestedResiliencyPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListSuggestedResiliencyPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListSuggestedResiliencyPoliciesInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *resiliencehub.ListTagsForResourceInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *resiliencehub.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListTagsForResourceInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListTagsForResourceInput, ...func(*resiliencehub.Options)) *resiliencehub.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListTagsForResourceInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestRecommendations(ctx context.Context, params *resiliencehub.ListTestRecommendationsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListTestRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestRecommendations")
	}

	var r0 *resiliencehub.ListTestRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListTestRecommendationsInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListTestRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListTestRecommendationsInput, ...func(*resiliencehub.Options)) *resiliencehub.ListTestRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListTestRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListTestRecommendationsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUnsupportedAppVersionResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUnsupportedAppVersionResources(ctx context.Context, params *resiliencehub.ListUnsupportedAppVersionResourcesInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ListUnsupportedAppVersionResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUnsupportedAppVersionResources")
	}

	var r0 *resiliencehub.ListUnsupportedAppVersionResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListUnsupportedAppVersionResourcesInput, ...func(*resiliencehub.Options)) (*resiliencehub.ListUnsupportedAppVersionResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ListUnsupportedAppVersionResourcesInput, ...func(*resiliencehub.Options)) *resiliencehub.ListUnsupportedAppVersionResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ListUnsupportedAppVersionResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ListUnsupportedAppVersionResourcesInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() resiliencehub.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 resiliencehub.Options
	if rf, ok := ret.Get(0).(func() resiliencehub.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(resiliencehub.Options)
	}

	return r0
}

// PublishAppVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PublishAppVersion(ctx context.Context, params *resiliencehub.PublishAppVersionInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.PublishAppVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishAppVersion")
	}

	var r0 *resiliencehub.PublishAppVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.PublishAppVersionInput, ...func(*resiliencehub.Options)) (*resiliencehub.PublishAppVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.PublishAppVersionInput, ...func(*resiliencehub.Options)) *resiliencehub.PublishAppVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.PublishAppVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.PublishAppVersionInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDraftAppVersionTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDraftAppVersionTemplate(ctx context.Context, params *resiliencehub.PutDraftAppVersionTemplateInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.PutDraftAppVersionTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDraftAppVersionTemplate")
	}

	var r0 *resiliencehub.PutDraftAppVersionTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.PutDraftAppVersionTemplateInput, ...func(*resiliencehub.Options)) (*resiliencehub.PutDraftAppVersionTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.PutDraftAppVersionTemplateInput, ...func(*resiliencehub.Options)) *resiliencehub.PutDraftAppVersionTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.PutDraftAppVersionTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.PutDraftAppVersionTemplateInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveDraftAppVersionResourceMappings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveDraftAppVersionResourceMappings(ctx context.Context, params *resiliencehub.RemoveDraftAppVersionResourceMappingsInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.RemoveDraftAppVersionResourceMappingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveDraftAppVersionResourceMappings")
	}

	var r0 *resiliencehub.RemoveDraftAppVersionResourceMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.RemoveDraftAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) (*resiliencehub.RemoveDraftAppVersionResourceMappingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.RemoveDraftAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) *resiliencehub.RemoveDraftAppVersionResourceMappingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.RemoveDraftAppVersionResourceMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.RemoveDraftAppVersionResourceMappingsInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveAppVersionResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResolveAppVersionResources(ctx context.Context, params *resiliencehub.ResolveAppVersionResourcesInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.ResolveAppVersionResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResolveAppVersionResources")
	}

	var r0 *resiliencehub.ResolveAppVersionResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ResolveAppVersionResourcesInput, ...func(*resiliencehub.Options)) (*resiliencehub.ResolveAppVersionResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.ResolveAppVersionResourcesInput, ...func(*resiliencehub.Options)) *resiliencehub.ResolveAppVersionResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.ResolveAppVersionResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.ResolveAppVersionResourcesInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAppAssessment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAppAssessment(ctx context.Context, params *resiliencehub.StartAppAssessmentInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.StartAppAssessmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAppAssessment")
	}

	var r0 *resiliencehub.StartAppAssessmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.StartAppAssessmentInput, ...func(*resiliencehub.Options)) (*resiliencehub.StartAppAssessmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.StartAppAssessmentInput, ...func(*resiliencehub.Options)) *resiliencehub.StartAppAssessmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.StartAppAssessmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.StartAppAssessmentInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *resiliencehub.TagResourceInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *resiliencehub.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.TagResourceInput, ...func(*resiliencehub.Options)) (*resiliencehub.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.TagResourceInput, ...func(*resiliencehub.Options)) *resiliencehub.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.TagResourceInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *resiliencehub.UntagResourceInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *resiliencehub.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UntagResourceInput, ...func(*resiliencehub.Options)) (*resiliencehub.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UntagResourceInput, ...func(*resiliencehub.Options)) *resiliencehub.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.UntagResourceInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApp(ctx context.Context, params *resiliencehub.UpdateAppInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.UpdateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApp")
	}

	var r0 *resiliencehub.UpdateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateAppInput, ...func(*resiliencehub.Options)) (*resiliencehub.UpdateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateAppInput, ...func(*resiliencehub.Options)) *resiliencehub.UpdateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.UpdateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.UpdateAppInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppVersion(ctx context.Context, params *resiliencehub.UpdateAppVersionInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.UpdateAppVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppVersion")
	}

	var r0 *resiliencehub.UpdateAppVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateAppVersionInput, ...func(*resiliencehub.Options)) (*resiliencehub.UpdateAppVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateAppVersionInput, ...func(*resiliencehub.Options)) *resiliencehub.UpdateAppVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.UpdateAppVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.UpdateAppVersionInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppVersionAppComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppVersionAppComponent(ctx context.Context, params *resiliencehub.UpdateAppVersionAppComponentInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.UpdateAppVersionAppComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppVersionAppComponent")
	}

	var r0 *resiliencehub.UpdateAppVersionAppComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateAppVersionAppComponentInput, ...func(*resiliencehub.Options)) (*resiliencehub.UpdateAppVersionAppComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateAppVersionAppComponentInput, ...func(*resiliencehub.Options)) *resiliencehub.UpdateAppVersionAppComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.UpdateAppVersionAppComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.UpdateAppVersionAppComponentInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppVersionResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppVersionResource(ctx context.Context, params *resiliencehub.UpdateAppVersionResourceInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.UpdateAppVersionResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppVersionResource")
	}

	var r0 *resiliencehub.UpdateAppVersionResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateAppVersionResourceInput, ...func(*resiliencehub.Options)) (*resiliencehub.UpdateAppVersionResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateAppVersionResourceInput, ...func(*resiliencehub.Options)) *resiliencehub.UpdateAppVersionResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.UpdateAppVersionResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.UpdateAppVersionResourceInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResiliencyPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResiliencyPolicy(ctx context.Context, params *resiliencehub.UpdateResiliencyPolicyInput, optFns ...func(*resiliencehub.Options)) (*resiliencehub.UpdateResiliencyPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResiliencyPolicy")
	}

	var r0 *resiliencehub.UpdateResiliencyPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateResiliencyPolicyInput, ...func(*resiliencehub.Options)) (*resiliencehub.UpdateResiliencyPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resiliencehub.UpdateResiliencyPolicyInput, ...func(*resiliencehub.Options)) *resiliencehub.UpdateResiliencyPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resiliencehub.UpdateResiliencyPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resiliencehub.UpdateResiliencyPolicyInput, ...func(*resiliencehub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
