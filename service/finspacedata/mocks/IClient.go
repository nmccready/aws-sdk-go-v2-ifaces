// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	finspacedata "github.com/aws/aws-sdk-go-v2/service/finspacedata"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateUserToPermissionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateUserToPermissionGroup(ctx context.Context, params *finspacedata.AssociateUserToPermissionGroupInput, optFns ...func(*finspacedata.Options)) (*finspacedata.AssociateUserToPermissionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateUserToPermissionGroup")
	}

	var r0 *finspacedata.AssociateUserToPermissionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.AssociateUserToPermissionGroupInput, ...func(*finspacedata.Options)) (*finspacedata.AssociateUserToPermissionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.AssociateUserToPermissionGroupInput, ...func(*finspacedata.Options)) *finspacedata.AssociateUserToPermissionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.AssociateUserToPermissionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.AssociateUserToPermissionGroupInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChangeset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChangeset(ctx context.Context, params *finspacedata.CreateChangesetInput, optFns ...func(*finspacedata.Options)) (*finspacedata.CreateChangesetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChangeset")
	}

	var r0 *finspacedata.CreateChangesetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreateChangesetInput, ...func(*finspacedata.Options)) (*finspacedata.CreateChangesetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreateChangesetInput, ...func(*finspacedata.Options)) *finspacedata.CreateChangesetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.CreateChangesetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.CreateChangesetInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataView(ctx context.Context, params *finspacedata.CreateDataViewInput, optFns ...func(*finspacedata.Options)) (*finspacedata.CreateDataViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataView")
	}

	var r0 *finspacedata.CreateDataViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreateDataViewInput, ...func(*finspacedata.Options)) (*finspacedata.CreateDataViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreateDataViewInput, ...func(*finspacedata.Options)) *finspacedata.CreateDataViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.CreateDataViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.CreateDataViewInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataset(ctx context.Context, params *finspacedata.CreateDatasetInput, optFns ...func(*finspacedata.Options)) (*finspacedata.CreateDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 *finspacedata.CreateDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreateDatasetInput, ...func(*finspacedata.Options)) (*finspacedata.CreateDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreateDatasetInput, ...func(*finspacedata.Options)) *finspacedata.CreateDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.CreateDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.CreateDatasetInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePermissionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePermissionGroup(ctx context.Context, params *finspacedata.CreatePermissionGroupInput, optFns ...func(*finspacedata.Options)) (*finspacedata.CreatePermissionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermissionGroup")
	}

	var r0 *finspacedata.CreatePermissionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreatePermissionGroupInput, ...func(*finspacedata.Options)) (*finspacedata.CreatePermissionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreatePermissionGroupInput, ...func(*finspacedata.Options)) *finspacedata.CreatePermissionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.CreatePermissionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.CreatePermissionGroupInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *finspacedata.CreateUserInput, optFns ...func(*finspacedata.Options)) (*finspacedata.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *finspacedata.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreateUserInput, ...func(*finspacedata.Options)) (*finspacedata.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.CreateUserInput, ...func(*finspacedata.Options)) *finspacedata.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.CreateUserInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataset(ctx context.Context, params *finspacedata.DeleteDatasetInput, optFns ...func(*finspacedata.Options)) (*finspacedata.DeleteDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 *finspacedata.DeleteDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.DeleteDatasetInput, ...func(*finspacedata.Options)) (*finspacedata.DeleteDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.DeleteDatasetInput, ...func(*finspacedata.Options)) *finspacedata.DeleteDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.DeleteDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.DeleteDatasetInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePermissionGroup(ctx context.Context, params *finspacedata.DeletePermissionGroupInput, optFns ...func(*finspacedata.Options)) (*finspacedata.DeletePermissionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermissionGroup")
	}

	var r0 *finspacedata.DeletePermissionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.DeletePermissionGroupInput, ...func(*finspacedata.Options)) (*finspacedata.DeletePermissionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.DeletePermissionGroupInput, ...func(*finspacedata.Options)) *finspacedata.DeletePermissionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.DeletePermissionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.DeletePermissionGroupInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableUser(ctx context.Context, params *finspacedata.DisableUserInput, optFns ...func(*finspacedata.Options)) (*finspacedata.DisableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 *finspacedata.DisableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.DisableUserInput, ...func(*finspacedata.Options)) (*finspacedata.DisableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.DisableUserInput, ...func(*finspacedata.Options)) *finspacedata.DisableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.DisableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.DisableUserInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateUserFromPermissionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateUserFromPermissionGroup(ctx context.Context, params *finspacedata.DisassociateUserFromPermissionGroupInput, optFns ...func(*finspacedata.Options)) (*finspacedata.DisassociateUserFromPermissionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateUserFromPermissionGroup")
	}

	var r0 *finspacedata.DisassociateUserFromPermissionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.DisassociateUserFromPermissionGroupInput, ...func(*finspacedata.Options)) (*finspacedata.DisassociateUserFromPermissionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.DisassociateUserFromPermissionGroupInput, ...func(*finspacedata.Options)) *finspacedata.DisassociateUserFromPermissionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.DisassociateUserFromPermissionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.DisassociateUserFromPermissionGroupInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableUser(ctx context.Context, params *finspacedata.EnableUserInput, optFns ...func(*finspacedata.Options)) (*finspacedata.EnableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 *finspacedata.EnableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.EnableUserInput, ...func(*finspacedata.Options)) (*finspacedata.EnableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.EnableUserInput, ...func(*finspacedata.Options)) *finspacedata.EnableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.EnableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.EnableUserInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChangeset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChangeset(ctx context.Context, params *finspacedata.GetChangesetInput, optFns ...func(*finspacedata.Options)) (*finspacedata.GetChangesetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChangeset")
	}

	var r0 *finspacedata.GetChangesetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetChangesetInput, ...func(*finspacedata.Options)) (*finspacedata.GetChangesetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetChangesetInput, ...func(*finspacedata.Options)) *finspacedata.GetChangesetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.GetChangesetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.GetChangesetInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataView(ctx context.Context, params *finspacedata.GetDataViewInput, optFns ...func(*finspacedata.Options)) (*finspacedata.GetDataViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataView")
	}

	var r0 *finspacedata.GetDataViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetDataViewInput, ...func(*finspacedata.Options)) (*finspacedata.GetDataViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetDataViewInput, ...func(*finspacedata.Options)) *finspacedata.GetDataViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.GetDataViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.GetDataViewInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataset(ctx context.Context, params *finspacedata.GetDatasetInput, optFns ...func(*finspacedata.Options)) (*finspacedata.GetDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataset")
	}

	var r0 *finspacedata.GetDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetDatasetInput, ...func(*finspacedata.Options)) (*finspacedata.GetDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetDatasetInput, ...func(*finspacedata.Options)) *finspacedata.GetDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.GetDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.GetDatasetInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExternalDataViewAccessDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExternalDataViewAccessDetails(ctx context.Context, params *finspacedata.GetExternalDataViewAccessDetailsInput, optFns ...func(*finspacedata.Options)) (*finspacedata.GetExternalDataViewAccessDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExternalDataViewAccessDetails")
	}

	var r0 *finspacedata.GetExternalDataViewAccessDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetExternalDataViewAccessDetailsInput, ...func(*finspacedata.Options)) (*finspacedata.GetExternalDataViewAccessDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetExternalDataViewAccessDetailsInput, ...func(*finspacedata.Options)) *finspacedata.GetExternalDataViewAccessDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.GetExternalDataViewAccessDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.GetExternalDataViewAccessDetailsInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPermissionGroup(ctx context.Context, params *finspacedata.GetPermissionGroupInput, optFns ...func(*finspacedata.Options)) (*finspacedata.GetPermissionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionGroup")
	}

	var r0 *finspacedata.GetPermissionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetPermissionGroupInput, ...func(*finspacedata.Options)) (*finspacedata.GetPermissionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetPermissionGroupInput, ...func(*finspacedata.Options)) *finspacedata.GetPermissionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.GetPermissionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.GetPermissionGroupInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProgrammaticAccessCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProgrammaticAccessCredentials(ctx context.Context, params *finspacedata.GetProgrammaticAccessCredentialsInput, optFns ...func(*finspacedata.Options)) (*finspacedata.GetProgrammaticAccessCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProgrammaticAccessCredentials")
	}

	var r0 *finspacedata.GetProgrammaticAccessCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetProgrammaticAccessCredentialsInput, ...func(*finspacedata.Options)) (*finspacedata.GetProgrammaticAccessCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetProgrammaticAccessCredentialsInput, ...func(*finspacedata.Options)) *finspacedata.GetProgrammaticAccessCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.GetProgrammaticAccessCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.GetProgrammaticAccessCredentialsInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUser(ctx context.Context, params *finspacedata.GetUserInput, optFns ...func(*finspacedata.Options)) (*finspacedata.GetUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *finspacedata.GetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetUserInput, ...func(*finspacedata.Options)) (*finspacedata.GetUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetUserInput, ...func(*finspacedata.Options)) *finspacedata.GetUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.GetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.GetUserInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkingLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkingLocation(ctx context.Context, params *finspacedata.GetWorkingLocationInput, optFns ...func(*finspacedata.Options)) (*finspacedata.GetWorkingLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkingLocation")
	}

	var r0 *finspacedata.GetWorkingLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetWorkingLocationInput, ...func(*finspacedata.Options)) (*finspacedata.GetWorkingLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.GetWorkingLocationInput, ...func(*finspacedata.Options)) *finspacedata.GetWorkingLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.GetWorkingLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.GetWorkingLocationInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChangesets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChangesets(ctx context.Context, params *finspacedata.ListChangesetsInput, optFns ...func(*finspacedata.Options)) (*finspacedata.ListChangesetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChangesets")
	}

	var r0 *finspacedata.ListChangesetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListChangesetsInput, ...func(*finspacedata.Options)) (*finspacedata.ListChangesetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListChangesetsInput, ...func(*finspacedata.Options)) *finspacedata.ListChangesetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.ListChangesetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.ListChangesetsInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataViews provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataViews(ctx context.Context, params *finspacedata.ListDataViewsInput, optFns ...func(*finspacedata.Options)) (*finspacedata.ListDataViewsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataViews")
	}

	var r0 *finspacedata.ListDataViewsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListDataViewsInput, ...func(*finspacedata.Options)) (*finspacedata.ListDataViewsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListDataViewsInput, ...func(*finspacedata.Options)) *finspacedata.ListDataViewsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.ListDataViewsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.ListDataViewsInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasets(ctx context.Context, params *finspacedata.ListDatasetsInput, optFns ...func(*finspacedata.Options)) (*finspacedata.ListDatasetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasets")
	}

	var r0 *finspacedata.ListDatasetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListDatasetsInput, ...func(*finspacedata.Options)) (*finspacedata.ListDatasetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListDatasetsInput, ...func(*finspacedata.Options)) *finspacedata.ListDatasetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.ListDatasetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.ListDatasetsInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissionGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissionGroups(ctx context.Context, params *finspacedata.ListPermissionGroupsInput, optFns ...func(*finspacedata.Options)) (*finspacedata.ListPermissionGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionGroups")
	}

	var r0 *finspacedata.ListPermissionGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListPermissionGroupsInput, ...func(*finspacedata.Options)) (*finspacedata.ListPermissionGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListPermissionGroupsInput, ...func(*finspacedata.Options)) *finspacedata.ListPermissionGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.ListPermissionGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.ListPermissionGroupsInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissionGroupsByUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissionGroupsByUser(ctx context.Context, params *finspacedata.ListPermissionGroupsByUserInput, optFns ...func(*finspacedata.Options)) (*finspacedata.ListPermissionGroupsByUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionGroupsByUser")
	}

	var r0 *finspacedata.ListPermissionGroupsByUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListPermissionGroupsByUserInput, ...func(*finspacedata.Options)) (*finspacedata.ListPermissionGroupsByUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListPermissionGroupsByUserInput, ...func(*finspacedata.Options)) *finspacedata.ListPermissionGroupsByUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.ListPermissionGroupsByUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.ListPermissionGroupsByUserInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *finspacedata.ListUsersInput, optFns ...func(*finspacedata.Options)) (*finspacedata.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *finspacedata.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListUsersInput, ...func(*finspacedata.Options)) (*finspacedata.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListUsersInput, ...func(*finspacedata.Options)) *finspacedata.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.ListUsersInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsersByPermissionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsersByPermissionGroup(ctx context.Context, params *finspacedata.ListUsersByPermissionGroupInput, optFns ...func(*finspacedata.Options)) (*finspacedata.ListUsersByPermissionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsersByPermissionGroup")
	}

	var r0 *finspacedata.ListUsersByPermissionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListUsersByPermissionGroupInput, ...func(*finspacedata.Options)) (*finspacedata.ListUsersByPermissionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ListUsersByPermissionGroupInput, ...func(*finspacedata.Options)) *finspacedata.ListUsersByPermissionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.ListUsersByPermissionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.ListUsersByPermissionGroupInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() finspacedata.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 finspacedata.Options
	if rf, ok := ret.Get(0).(func() finspacedata.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(finspacedata.Options)
	}

	return r0
}

// ResetUserPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetUserPassword(ctx context.Context, params *finspacedata.ResetUserPasswordInput, optFns ...func(*finspacedata.Options)) (*finspacedata.ResetUserPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetUserPassword")
	}

	var r0 *finspacedata.ResetUserPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ResetUserPasswordInput, ...func(*finspacedata.Options)) (*finspacedata.ResetUserPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.ResetUserPasswordInput, ...func(*finspacedata.Options)) *finspacedata.ResetUserPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.ResetUserPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.ResetUserPasswordInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChangeset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChangeset(ctx context.Context, params *finspacedata.UpdateChangesetInput, optFns ...func(*finspacedata.Options)) (*finspacedata.UpdateChangesetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChangeset")
	}

	var r0 *finspacedata.UpdateChangesetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.UpdateChangesetInput, ...func(*finspacedata.Options)) (*finspacedata.UpdateChangesetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.UpdateChangesetInput, ...func(*finspacedata.Options)) *finspacedata.UpdateChangesetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.UpdateChangesetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.UpdateChangesetInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataset(ctx context.Context, params *finspacedata.UpdateDatasetInput, optFns ...func(*finspacedata.Options)) (*finspacedata.UpdateDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataset")
	}

	var r0 *finspacedata.UpdateDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.UpdateDatasetInput, ...func(*finspacedata.Options)) (*finspacedata.UpdateDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.UpdateDatasetInput, ...func(*finspacedata.Options)) *finspacedata.UpdateDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.UpdateDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.UpdateDatasetInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermissionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePermissionGroup(ctx context.Context, params *finspacedata.UpdatePermissionGroupInput, optFns ...func(*finspacedata.Options)) (*finspacedata.UpdatePermissionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissionGroup")
	}

	var r0 *finspacedata.UpdatePermissionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.UpdatePermissionGroupInput, ...func(*finspacedata.Options)) (*finspacedata.UpdatePermissionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.UpdatePermissionGroupInput, ...func(*finspacedata.Options)) *finspacedata.UpdatePermissionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.UpdatePermissionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.UpdatePermissionGroupInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *finspacedata.UpdateUserInput, optFns ...func(*finspacedata.Options)) (*finspacedata.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *finspacedata.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.UpdateUserInput, ...func(*finspacedata.Options)) (*finspacedata.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *finspacedata.UpdateUserInput, ...func(*finspacedata.Options)) *finspacedata.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*finspacedata.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *finspacedata.UpdateUserInput, ...func(*finspacedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
