// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	elasticbeanstalk "github.com/aws/aws-sdk-go-v2/service/elasticbeanstalk"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AbortEnvironmentUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AbortEnvironmentUpdate(ctx context.Context, params *elasticbeanstalk.AbortEnvironmentUpdateInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AbortEnvironmentUpdate")
	}

	var r0 *elasticbeanstalk.AbortEnvironmentUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.AbortEnvironmentUpdateInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.AbortEnvironmentUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.AbortEnvironmentUpdateInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.AbortEnvironmentUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.AbortEnvironmentUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.AbortEnvironmentUpdateInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyEnvironmentManagedAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ApplyEnvironmentManagedAction(ctx context.Context, params *elasticbeanstalk.ApplyEnvironmentManagedActionInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyEnvironmentManagedAction")
	}

	var r0 *elasticbeanstalk.ApplyEnvironmentManagedActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ApplyEnvironmentManagedActionInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ApplyEnvironmentManagedActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ApplyEnvironmentManagedActionInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.ApplyEnvironmentManagedActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.ApplyEnvironmentManagedActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.ApplyEnvironmentManagedActionInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateEnvironmentOperationsRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateEnvironmentOperationsRole(ctx context.Context, params *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateEnvironmentOperationsRole")
	}

	var r0 *elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.AssociateEnvironmentOperationsRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.AssociateEnvironmentOperationsRoleInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckDNSAvailability provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CheckDNSAvailability(ctx context.Context, params *elasticbeanstalk.CheckDNSAvailabilityInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckDNSAvailability")
	}

	var r0 *elasticbeanstalk.CheckDNSAvailabilityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CheckDNSAvailabilityInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CheckDNSAvailabilityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CheckDNSAvailabilityInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.CheckDNSAvailabilityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.CheckDNSAvailabilityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.CheckDNSAvailabilityInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ComposeEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ComposeEnvironments(ctx context.Context, params *elasticbeanstalk.ComposeEnvironmentsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ComposeEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ComposeEnvironments")
	}

	var r0 *elasticbeanstalk.ComposeEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ComposeEnvironmentsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ComposeEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ComposeEnvironmentsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.ComposeEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.ComposeEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.ComposeEnvironmentsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *elasticbeanstalk.CreateApplicationInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *elasticbeanstalk.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateApplicationInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateApplicationInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.CreateApplicationInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplicationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplicationVersion(ctx context.Context, params *elasticbeanstalk.CreateApplicationVersionInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateApplicationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplicationVersion")
	}

	var r0 *elasticbeanstalk.CreateApplicationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateApplicationVersionInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateApplicationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateApplicationVersionInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.CreateApplicationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.CreateApplicationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.CreateApplicationVersionInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationTemplate(ctx context.Context, params *elasticbeanstalk.CreateConfigurationTemplateInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationTemplate")
	}

	var r0 *elasticbeanstalk.CreateConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.CreateConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.CreateConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.CreateConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironment(ctx context.Context, params *elasticbeanstalk.CreateEnvironmentInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironment")
	}

	var r0 *elasticbeanstalk.CreateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateEnvironmentInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateEnvironmentInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.CreateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.CreateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.CreateEnvironmentInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlatformVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePlatformVersion(ctx context.Context, params *elasticbeanstalk.CreatePlatformVersionInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreatePlatformVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlatformVersion")
	}

	var r0 *elasticbeanstalk.CreatePlatformVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreatePlatformVersionInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreatePlatformVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreatePlatformVersionInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.CreatePlatformVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.CreatePlatformVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.CreatePlatformVersionInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStorageLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStorageLocation(ctx context.Context, params *elasticbeanstalk.CreateStorageLocationInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateStorageLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorageLocation")
	}

	var r0 *elasticbeanstalk.CreateStorageLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateStorageLocationInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.CreateStorageLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.CreateStorageLocationInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.CreateStorageLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.CreateStorageLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.CreateStorageLocationInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *elasticbeanstalk.DeleteApplicationInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *elasticbeanstalk.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeleteApplicationInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeleteApplicationInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DeleteApplicationInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationVersion(ctx context.Context, params *elasticbeanstalk.DeleteApplicationVersionInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeleteApplicationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationVersion")
	}

	var r0 *elasticbeanstalk.DeleteApplicationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeleteApplicationVersionInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeleteApplicationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeleteApplicationVersionInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DeleteApplicationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DeleteApplicationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DeleteApplicationVersionInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationTemplate(ctx context.Context, params *elasticbeanstalk.DeleteConfigurationTemplateInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationTemplate")
	}

	var r0 *elasticbeanstalk.DeleteConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeleteConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeleteConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeleteConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DeleteConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DeleteConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DeleteConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentConfiguration(ctx context.Context, params *elasticbeanstalk.DeleteEnvironmentConfigurationInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentConfiguration")
	}

	var r0 *elasticbeanstalk.DeleteEnvironmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeleteEnvironmentConfigurationInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeleteEnvironmentConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeleteEnvironmentConfigurationInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DeleteEnvironmentConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DeleteEnvironmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DeleteEnvironmentConfigurationInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlatformVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePlatformVersion(ctx context.Context, params *elasticbeanstalk.DeletePlatformVersionInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeletePlatformVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlatformVersion")
	}

	var r0 *elasticbeanstalk.DeletePlatformVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeletePlatformVersionInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DeletePlatformVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DeletePlatformVersionInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DeletePlatformVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DeletePlatformVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DeletePlatformVersionInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountAttributes(ctx context.Context, params *elasticbeanstalk.DescribeAccountAttributesInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeAccountAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountAttributes")
	}

	var r0 *elasticbeanstalk.DescribeAccountAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeAccountAttributesInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeAccountAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeAccountAttributesInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeAccountAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeAccountAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeAccountAttributesInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationVersions(ctx context.Context, params *elasticbeanstalk.DescribeApplicationVersionsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationVersions")
	}

	var r0 *elasticbeanstalk.DescribeApplicationVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeApplicationVersionsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeApplicationVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeApplicationVersionsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeApplicationVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeApplicationVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeApplicationVersionsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplications(ctx context.Context, params *elasticbeanstalk.DescribeApplicationsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplications")
	}

	var r0 *elasticbeanstalk.DescribeApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeApplicationsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeApplicationsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeApplicationsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurationOptions(ctx context.Context, params *elasticbeanstalk.DescribeConfigurationOptionsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationOptions")
	}

	var r0 *elasticbeanstalk.DescribeConfigurationOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeConfigurationOptionsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeConfigurationOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeConfigurationOptionsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeConfigurationOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeConfigurationOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeConfigurationOptionsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurationSettings(ctx context.Context, params *elasticbeanstalk.DescribeConfigurationSettingsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationSettings")
	}

	var r0 *elasticbeanstalk.DescribeConfigurationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeConfigurationSettingsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeConfigurationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeConfigurationSettingsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeConfigurationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeConfigurationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeConfigurationSettingsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEnvironmentHealth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEnvironmentHealth(ctx context.Context, params *elasticbeanstalk.DescribeEnvironmentHealthInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEnvironmentHealth")
	}

	var r0 *elasticbeanstalk.DescribeEnvironmentHealthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentHealthInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentHealthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentHealthInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeEnvironmentHealthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeEnvironmentHealthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentHealthInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEnvironmentManagedActionHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEnvironmentManagedActionHistory(ctx context.Context, params *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEnvironmentManagedActionHistory")
	}

	var r0 *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeEnvironmentManagedActionHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentManagedActionHistoryInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEnvironmentManagedActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEnvironmentManagedActions(ctx context.Context, params *elasticbeanstalk.DescribeEnvironmentManagedActionsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEnvironmentManagedActions")
	}

	var r0 *elasticbeanstalk.DescribeEnvironmentManagedActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentManagedActionsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentManagedActionsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeEnvironmentManagedActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeEnvironmentManagedActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentManagedActionsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEnvironmentResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEnvironmentResources(ctx context.Context, params *elasticbeanstalk.DescribeEnvironmentResourcesInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEnvironmentResources")
	}

	var r0 *elasticbeanstalk.DescribeEnvironmentResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentResourcesInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentResourcesInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeEnvironmentResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeEnvironmentResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentResourcesInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEnvironments(ctx context.Context, params *elasticbeanstalk.DescribeEnvironmentsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEnvironments")
	}

	var r0 *elasticbeanstalk.DescribeEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeEnvironmentsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEvents(ctx context.Context, params *elasticbeanstalk.DescribeEventsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEvents")
	}

	var r0 *elasticbeanstalk.DescribeEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEventsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeEventsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeEventsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstancesHealth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInstancesHealth(ctx context.Context, params *elasticbeanstalk.DescribeInstancesHealthInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeInstancesHealthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstancesHealth")
	}

	var r0 *elasticbeanstalk.DescribeInstancesHealthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeInstancesHealthInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribeInstancesHealthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribeInstancesHealthInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribeInstancesHealthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribeInstancesHealthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribeInstancesHealthInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePlatformVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePlatformVersion(ctx context.Context, params *elasticbeanstalk.DescribePlatformVersionInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribePlatformVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePlatformVersion")
	}

	var r0 *elasticbeanstalk.DescribePlatformVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribePlatformVersionInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DescribePlatformVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DescribePlatformVersionInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DescribePlatformVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DescribePlatformVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DescribePlatformVersionInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateEnvironmentOperationsRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateEnvironmentOperationsRole(ctx context.Context, params *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateEnvironmentOperationsRole")
	}

	var r0 *elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.DisassociateEnvironmentOperationsRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.DisassociateEnvironmentOperationsRoleInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailableSolutionStacks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAvailableSolutionStacks(ctx context.Context, params *elasticbeanstalk.ListAvailableSolutionStacksInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableSolutionStacks")
	}

	var r0 *elasticbeanstalk.ListAvailableSolutionStacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ListAvailableSolutionStacksInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ListAvailableSolutionStacksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ListAvailableSolutionStacksInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.ListAvailableSolutionStacksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.ListAvailableSolutionStacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.ListAvailableSolutionStacksInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlatformBranches provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlatformBranches(ctx context.Context, params *elasticbeanstalk.ListPlatformBranchesInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ListPlatformBranchesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlatformBranches")
	}

	var r0 *elasticbeanstalk.ListPlatformBranchesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ListPlatformBranchesInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ListPlatformBranchesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ListPlatformBranchesInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.ListPlatformBranchesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.ListPlatformBranchesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.ListPlatformBranchesInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlatformVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlatformVersions(ctx context.Context, params *elasticbeanstalk.ListPlatformVersionsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ListPlatformVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlatformVersions")
	}

	var r0 *elasticbeanstalk.ListPlatformVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ListPlatformVersionsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ListPlatformVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ListPlatformVersionsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.ListPlatformVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.ListPlatformVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.ListPlatformVersionsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *elasticbeanstalk.ListTagsForResourceInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *elasticbeanstalk.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ListTagsForResourceInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ListTagsForResourceInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.ListTagsForResourceInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() elasticbeanstalk.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 elasticbeanstalk.Options
	if rf, ok := ret.Get(0).(func() elasticbeanstalk.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(elasticbeanstalk.Options)
	}

	return r0
}

// RebuildEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebuildEnvironment(ctx context.Context, params *elasticbeanstalk.RebuildEnvironmentInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.RebuildEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebuildEnvironment")
	}

	var r0 *elasticbeanstalk.RebuildEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.RebuildEnvironmentInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.RebuildEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.RebuildEnvironmentInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.RebuildEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.RebuildEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.RebuildEnvironmentInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestEnvironmentInfo provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RequestEnvironmentInfo(ctx context.Context, params *elasticbeanstalk.RequestEnvironmentInfoInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestEnvironmentInfo")
	}

	var r0 *elasticbeanstalk.RequestEnvironmentInfoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.RequestEnvironmentInfoInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.RequestEnvironmentInfoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.RequestEnvironmentInfoInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.RequestEnvironmentInfoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.RequestEnvironmentInfoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.RequestEnvironmentInfoInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestartAppServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestartAppServer(ctx context.Context, params *elasticbeanstalk.RestartAppServerInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.RestartAppServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestartAppServer")
	}

	var r0 *elasticbeanstalk.RestartAppServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.RestartAppServerInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.RestartAppServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.RestartAppServerInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.RestartAppServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.RestartAppServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.RestartAppServerInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveEnvironmentInfo provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RetrieveEnvironmentInfo(ctx context.Context, params *elasticbeanstalk.RetrieveEnvironmentInfoInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveEnvironmentInfo")
	}

	var r0 *elasticbeanstalk.RetrieveEnvironmentInfoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.RetrieveEnvironmentInfoInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.RetrieveEnvironmentInfoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.RetrieveEnvironmentInfoInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.RetrieveEnvironmentInfoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.RetrieveEnvironmentInfoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.RetrieveEnvironmentInfoInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwapEnvironmentCNAMEs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SwapEnvironmentCNAMEs(ctx context.Context, params *elasticbeanstalk.SwapEnvironmentCNAMEsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SwapEnvironmentCNAMEs")
	}

	var r0 *elasticbeanstalk.SwapEnvironmentCNAMEsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.SwapEnvironmentCNAMEsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.SwapEnvironmentCNAMEsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.SwapEnvironmentCNAMEsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.SwapEnvironmentCNAMEsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.SwapEnvironmentCNAMEsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.SwapEnvironmentCNAMEsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TerminateEnvironment(ctx context.Context, params *elasticbeanstalk.TerminateEnvironmentInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.TerminateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateEnvironment")
	}

	var r0 *elasticbeanstalk.TerminateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.TerminateEnvironmentInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.TerminateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.TerminateEnvironmentInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.TerminateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.TerminateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.TerminateEnvironmentInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *elasticbeanstalk.UpdateApplicationInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *elasticbeanstalk.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateApplicationInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateApplicationInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.UpdateApplicationInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationResourceLifecycle provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplicationResourceLifecycle(ctx context.Context, params *elasticbeanstalk.UpdateApplicationResourceLifecycleInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationResourceLifecycle")
	}

	var r0 *elasticbeanstalk.UpdateApplicationResourceLifecycleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateApplicationResourceLifecycleInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateApplicationResourceLifecycleInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.UpdateApplicationResourceLifecycleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.UpdateApplicationResourceLifecycleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.UpdateApplicationResourceLifecycleInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplicationVersion(ctx context.Context, params *elasticbeanstalk.UpdateApplicationVersionInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateApplicationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationVersion")
	}

	var r0 *elasticbeanstalk.UpdateApplicationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateApplicationVersionInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateApplicationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateApplicationVersionInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.UpdateApplicationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.UpdateApplicationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.UpdateApplicationVersionInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationTemplate(ctx context.Context, params *elasticbeanstalk.UpdateConfigurationTemplateInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationTemplate")
	}

	var r0 *elasticbeanstalk.UpdateConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.UpdateConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.UpdateConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.UpdateConfigurationTemplateInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironment(ctx context.Context, params *elasticbeanstalk.UpdateEnvironmentInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironment")
	}

	var r0 *elasticbeanstalk.UpdateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateEnvironmentInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateEnvironmentInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.UpdateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.UpdateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.UpdateEnvironmentInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTagsForResource(ctx context.Context, params *elasticbeanstalk.UpdateTagsForResourceInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTagsForResource")
	}

	var r0 *elasticbeanstalk.UpdateTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateTagsForResourceInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.UpdateTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.UpdateTagsForResourceInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.UpdateTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.UpdateTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.UpdateTagsForResourceInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateConfigurationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ValidateConfigurationSettings(ctx context.Context, params *elasticbeanstalk.ValidateConfigurationSettingsInput, optFns ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidateConfigurationSettings")
	}

	var r0 *elasticbeanstalk.ValidateConfigurationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ValidateConfigurationSettingsInput, ...func(*elasticbeanstalk.Options)) (*elasticbeanstalk.ValidateConfigurationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticbeanstalk.ValidateConfigurationSettingsInput, ...func(*elasticbeanstalk.Options)) *elasticbeanstalk.ValidateConfigurationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticbeanstalk.ValidateConfigurationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticbeanstalk.ValidateConfigurationSettingsInput, ...func(*elasticbeanstalk.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
