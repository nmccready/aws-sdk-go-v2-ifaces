// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	health "github.com/aws/aws-sdk-go-v2/service/health"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DescribeAffectedAccountsForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAffectedAccountsForOrganization(ctx context.Context, params *health.DescribeAffectedAccountsForOrganizationInput, optFns ...func(*health.Options)) (*health.DescribeAffectedAccountsForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAffectedAccountsForOrganization")
	}

	var r0 *health.DescribeAffectedAccountsForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeAffectedAccountsForOrganizationInput, ...func(*health.Options)) (*health.DescribeAffectedAccountsForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeAffectedAccountsForOrganizationInput, ...func(*health.Options)) *health.DescribeAffectedAccountsForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeAffectedAccountsForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeAffectedAccountsForOrganizationInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAffectedEntities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAffectedEntities(ctx context.Context, params *health.DescribeAffectedEntitiesInput, optFns ...func(*health.Options)) (*health.DescribeAffectedEntitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAffectedEntities")
	}

	var r0 *health.DescribeAffectedEntitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeAffectedEntitiesInput, ...func(*health.Options)) (*health.DescribeAffectedEntitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeAffectedEntitiesInput, ...func(*health.Options)) *health.DescribeAffectedEntitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeAffectedEntitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeAffectedEntitiesInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAffectedEntitiesForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAffectedEntitiesForOrganization(ctx context.Context, params *health.DescribeAffectedEntitiesForOrganizationInput, optFns ...func(*health.Options)) (*health.DescribeAffectedEntitiesForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAffectedEntitiesForOrganization")
	}

	var r0 *health.DescribeAffectedEntitiesForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, ...func(*health.Options)) (*health.DescribeAffectedEntitiesForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, ...func(*health.Options)) *health.DescribeAffectedEntitiesForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeAffectedEntitiesForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeAffectedEntitiesForOrganizationInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEntityAggregates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEntityAggregates(ctx context.Context, params *health.DescribeEntityAggregatesInput, optFns ...func(*health.Options)) (*health.DescribeEntityAggregatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEntityAggregates")
	}

	var r0 *health.DescribeEntityAggregatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEntityAggregatesInput, ...func(*health.Options)) (*health.DescribeEntityAggregatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEntityAggregatesInput, ...func(*health.Options)) *health.DescribeEntityAggregatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeEntityAggregatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeEntityAggregatesInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEntityAggregatesForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEntityAggregatesForOrganization(ctx context.Context, params *health.DescribeEntityAggregatesForOrganizationInput, optFns ...func(*health.Options)) (*health.DescribeEntityAggregatesForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEntityAggregatesForOrganization")
	}

	var r0 *health.DescribeEntityAggregatesForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEntityAggregatesForOrganizationInput, ...func(*health.Options)) (*health.DescribeEntityAggregatesForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEntityAggregatesForOrganizationInput, ...func(*health.Options)) *health.DescribeEntityAggregatesForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeEntityAggregatesForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeEntityAggregatesForOrganizationInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventAggregates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventAggregates(ctx context.Context, params *health.DescribeEventAggregatesInput, optFns ...func(*health.Options)) (*health.DescribeEventAggregatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventAggregates")
	}

	var r0 *health.DescribeEventAggregatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventAggregatesInput, ...func(*health.Options)) (*health.DescribeEventAggregatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventAggregatesInput, ...func(*health.Options)) *health.DescribeEventAggregatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeEventAggregatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeEventAggregatesInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventDetails(ctx context.Context, params *health.DescribeEventDetailsInput, optFns ...func(*health.Options)) (*health.DescribeEventDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventDetails")
	}

	var r0 *health.DescribeEventDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventDetailsInput, ...func(*health.Options)) (*health.DescribeEventDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventDetailsInput, ...func(*health.Options)) *health.DescribeEventDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeEventDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeEventDetailsInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventDetailsForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventDetailsForOrganization(ctx context.Context, params *health.DescribeEventDetailsForOrganizationInput, optFns ...func(*health.Options)) (*health.DescribeEventDetailsForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventDetailsForOrganization")
	}

	var r0 *health.DescribeEventDetailsForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventDetailsForOrganizationInput, ...func(*health.Options)) (*health.DescribeEventDetailsForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventDetailsForOrganizationInput, ...func(*health.Options)) *health.DescribeEventDetailsForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeEventDetailsForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeEventDetailsForOrganizationInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventTypes(ctx context.Context, params *health.DescribeEventTypesInput, optFns ...func(*health.Options)) (*health.DescribeEventTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventTypes")
	}

	var r0 *health.DescribeEventTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventTypesInput, ...func(*health.Options)) (*health.DescribeEventTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventTypesInput, ...func(*health.Options)) *health.DescribeEventTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeEventTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeEventTypesInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEvents(ctx context.Context, params *health.DescribeEventsInput, optFns ...func(*health.Options)) (*health.DescribeEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEvents")
	}

	var r0 *health.DescribeEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventsInput, ...func(*health.Options)) (*health.DescribeEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventsInput, ...func(*health.Options)) *health.DescribeEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeEventsInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventsForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventsForOrganization(ctx context.Context, params *health.DescribeEventsForOrganizationInput, optFns ...func(*health.Options)) (*health.DescribeEventsForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventsForOrganization")
	}

	var r0 *health.DescribeEventsForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventsForOrganizationInput, ...func(*health.Options)) (*health.DescribeEventsForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeEventsForOrganizationInput, ...func(*health.Options)) *health.DescribeEventsForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeEventsForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeEventsForOrganizationInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHealthServiceStatusForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHealthServiceStatusForOrganization(ctx context.Context, params *health.DescribeHealthServiceStatusForOrganizationInput, optFns ...func(*health.Options)) (*health.DescribeHealthServiceStatusForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHealthServiceStatusForOrganization")
	}

	var r0 *health.DescribeHealthServiceStatusForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeHealthServiceStatusForOrganizationInput, ...func(*health.Options)) (*health.DescribeHealthServiceStatusForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DescribeHealthServiceStatusForOrganizationInput, ...func(*health.Options)) *health.DescribeHealthServiceStatusForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DescribeHealthServiceStatusForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DescribeHealthServiceStatusForOrganizationInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableHealthServiceAccessForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableHealthServiceAccessForOrganization(ctx context.Context, params *health.DisableHealthServiceAccessForOrganizationInput, optFns ...func(*health.Options)) (*health.DisableHealthServiceAccessForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableHealthServiceAccessForOrganization")
	}

	var r0 *health.DisableHealthServiceAccessForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.DisableHealthServiceAccessForOrganizationInput, ...func(*health.Options)) (*health.DisableHealthServiceAccessForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.DisableHealthServiceAccessForOrganizationInput, ...func(*health.Options)) *health.DisableHealthServiceAccessForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.DisableHealthServiceAccessForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.DisableHealthServiceAccessForOrganizationInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableHealthServiceAccessForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableHealthServiceAccessForOrganization(ctx context.Context, params *health.EnableHealthServiceAccessForOrganizationInput, optFns ...func(*health.Options)) (*health.EnableHealthServiceAccessForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableHealthServiceAccessForOrganization")
	}

	var r0 *health.EnableHealthServiceAccessForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *health.EnableHealthServiceAccessForOrganizationInput, ...func(*health.Options)) (*health.EnableHealthServiceAccessForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *health.EnableHealthServiceAccessForOrganizationInput, ...func(*health.Options)) *health.EnableHealthServiceAccessForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*health.EnableHealthServiceAccessForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *health.EnableHealthServiceAccessForOrganizationInput, ...func(*health.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() health.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 health.Options
	if rf, ok := ret.Get(0).(func() health.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(health.Options)
	}

	return r0
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
