// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	timestreaminfluxdb "github.com/aws/aws-sdk-go-v2/service/timestreaminfluxdb"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateDbCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDbCluster(ctx context.Context, params *timestreaminfluxdb.CreateDbClusterInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.CreateDbClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDbCluster")
	}

	var r0 *timestreaminfluxdb.CreateDbClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.CreateDbClusterInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.CreateDbClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.CreateDbClusterInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.CreateDbClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.CreateDbClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.CreateDbClusterInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDbInstance(ctx context.Context, params *timestreaminfluxdb.CreateDbInstanceInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.CreateDbInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDbInstance")
	}

	var r0 *timestreaminfluxdb.CreateDbInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.CreateDbInstanceInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.CreateDbInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.CreateDbInstanceInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.CreateDbInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.CreateDbInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.CreateDbInstanceInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDbParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDbParameterGroup(ctx context.Context, params *timestreaminfluxdb.CreateDbParameterGroupInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.CreateDbParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDbParameterGroup")
	}

	var r0 *timestreaminfluxdb.CreateDbParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.CreateDbParameterGroupInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.CreateDbParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.CreateDbParameterGroupInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.CreateDbParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.CreateDbParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.CreateDbParameterGroupInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDbCluster(ctx context.Context, params *timestreaminfluxdb.DeleteDbClusterInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.DeleteDbClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDbCluster")
	}

	var r0 *timestreaminfluxdb.DeleteDbClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.DeleteDbClusterInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.DeleteDbClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.DeleteDbClusterInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.DeleteDbClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.DeleteDbClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.DeleteDbClusterInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDbInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDbInstance(ctx context.Context, params *timestreaminfluxdb.DeleteDbInstanceInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.DeleteDbInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDbInstance")
	}

	var r0 *timestreaminfluxdb.DeleteDbInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.DeleteDbInstanceInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.DeleteDbInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.DeleteDbInstanceInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.DeleteDbInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.DeleteDbInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.DeleteDbInstanceInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDbCluster(ctx context.Context, params *timestreaminfluxdb.GetDbClusterInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.GetDbClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDbCluster")
	}

	var r0 *timestreaminfluxdb.GetDbClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.GetDbClusterInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.GetDbClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.GetDbClusterInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.GetDbClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.GetDbClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.GetDbClusterInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDbInstance(ctx context.Context, params *timestreaminfluxdb.GetDbInstanceInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.GetDbInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDbInstance")
	}

	var r0 *timestreaminfluxdb.GetDbInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.GetDbInstanceInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.GetDbInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.GetDbInstanceInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.GetDbInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.GetDbInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.GetDbInstanceInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDbParameterGroup(ctx context.Context, params *timestreaminfluxdb.GetDbParameterGroupInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.GetDbParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDbParameterGroup")
	}

	var r0 *timestreaminfluxdb.GetDbParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.GetDbParameterGroupInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.GetDbParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.GetDbParameterGroupInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.GetDbParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.GetDbParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.GetDbParameterGroupInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDbClusters(ctx context.Context, params *timestreaminfluxdb.ListDbClustersInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListDbClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDbClusters")
	}

	var r0 *timestreaminfluxdb.ListDbClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListDbClustersInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListDbClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListDbClustersInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.ListDbClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.ListDbClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.ListDbClustersInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDbInstances(ctx context.Context, params *timestreaminfluxdb.ListDbInstancesInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListDbInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDbInstances")
	}

	var r0 *timestreaminfluxdb.ListDbInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListDbInstancesInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListDbInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListDbInstancesInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.ListDbInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.ListDbInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.ListDbInstancesInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbInstancesForCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDbInstancesForCluster(ctx context.Context, params *timestreaminfluxdb.ListDbInstancesForClusterInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListDbInstancesForClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDbInstancesForCluster")
	}

	var r0 *timestreaminfluxdb.ListDbInstancesForClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListDbInstancesForClusterInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListDbInstancesForClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListDbInstancesForClusterInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.ListDbInstancesForClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.ListDbInstancesForClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.ListDbInstancesForClusterInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbParameterGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDbParameterGroups(ctx context.Context, params *timestreaminfluxdb.ListDbParameterGroupsInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListDbParameterGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDbParameterGroups")
	}

	var r0 *timestreaminfluxdb.ListDbParameterGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListDbParameterGroupsInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListDbParameterGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListDbParameterGroupsInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.ListDbParameterGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.ListDbParameterGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.ListDbParameterGroupsInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *timestreaminfluxdb.ListTagsForResourceInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *timestreaminfluxdb.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListTagsForResourceInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.ListTagsForResourceInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.ListTagsForResourceInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() timestreaminfluxdb.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 timestreaminfluxdb.Options
	if rf, ok := ret.Get(0).(func() timestreaminfluxdb.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(timestreaminfluxdb.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *timestreaminfluxdb.TagResourceInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *timestreaminfluxdb.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.TagResourceInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.TagResourceInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.TagResourceInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *timestreaminfluxdb.UntagResourceInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *timestreaminfluxdb.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.UntagResourceInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.UntagResourceInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.UntagResourceInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDbCluster(ctx context.Context, params *timestreaminfluxdb.UpdateDbClusterInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.UpdateDbClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDbCluster")
	}

	var r0 *timestreaminfluxdb.UpdateDbClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.UpdateDbClusterInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.UpdateDbClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.UpdateDbClusterInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.UpdateDbClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.UpdateDbClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.UpdateDbClusterInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDbInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDbInstance(ctx context.Context, params *timestreaminfluxdb.UpdateDbInstanceInput, optFns ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.UpdateDbInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDbInstance")
	}

	var r0 *timestreaminfluxdb.UpdateDbInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.UpdateDbInstanceInput, ...func(*timestreaminfluxdb.Options)) (*timestreaminfluxdb.UpdateDbInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreaminfluxdb.UpdateDbInstanceInput, ...func(*timestreaminfluxdb.Options)) *timestreaminfluxdb.UpdateDbInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreaminfluxdb.UpdateDbInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreaminfluxdb.UpdateDbInstanceInput, ...func(*timestreaminfluxdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
