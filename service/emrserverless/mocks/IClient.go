// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	emrserverless "github.com/aws/aws-sdk-go-v2/service/emrserverless"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelJobRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelJobRun(ctx context.Context, params *emrserverless.CancelJobRunInput, optFns ...func(*emrserverless.Options)) (*emrserverless.CancelJobRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelJobRun")
	}

	var r0 *emrserverless.CancelJobRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.CancelJobRunInput, ...func(*emrserverless.Options)) (*emrserverless.CancelJobRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.CancelJobRunInput, ...func(*emrserverless.Options)) *emrserverless.CancelJobRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.CancelJobRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.CancelJobRunInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *emrserverless.CreateApplicationInput, optFns ...func(*emrserverless.Options)) (*emrserverless.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *emrserverless.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.CreateApplicationInput, ...func(*emrserverless.Options)) (*emrserverless.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.CreateApplicationInput, ...func(*emrserverless.Options)) *emrserverless.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.CreateApplicationInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *emrserverless.DeleteApplicationInput, optFns ...func(*emrserverless.Options)) (*emrserverless.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *emrserverless.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.DeleteApplicationInput, ...func(*emrserverless.Options)) (*emrserverless.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.DeleteApplicationInput, ...func(*emrserverless.Options)) *emrserverless.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.DeleteApplicationInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplication(ctx context.Context, params *emrserverless.GetApplicationInput, optFns ...func(*emrserverless.Options)) (*emrserverless.GetApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *emrserverless.GetApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.GetApplicationInput, ...func(*emrserverless.Options)) (*emrserverless.GetApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.GetApplicationInput, ...func(*emrserverless.Options)) *emrserverless.GetApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.GetApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.GetApplicationInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardForJobRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDashboardForJobRun(ctx context.Context, params *emrserverless.GetDashboardForJobRunInput, optFns ...func(*emrserverless.Options)) (*emrserverless.GetDashboardForJobRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboardForJobRun")
	}

	var r0 *emrserverless.GetDashboardForJobRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.GetDashboardForJobRunInput, ...func(*emrserverless.Options)) (*emrserverless.GetDashboardForJobRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.GetDashboardForJobRunInput, ...func(*emrserverless.Options)) *emrserverless.GetDashboardForJobRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.GetDashboardForJobRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.GetDashboardForJobRunInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJobRun(ctx context.Context, params *emrserverless.GetJobRunInput, optFns ...func(*emrserverless.Options)) (*emrserverless.GetJobRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJobRun")
	}

	var r0 *emrserverless.GetJobRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.GetJobRunInput, ...func(*emrserverless.Options)) (*emrserverless.GetJobRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.GetJobRunInput, ...func(*emrserverless.Options)) *emrserverless.GetJobRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.GetJobRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.GetJobRunInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *emrserverless.ListApplicationsInput, optFns ...func(*emrserverless.Options)) (*emrserverless.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *emrserverless.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.ListApplicationsInput, ...func(*emrserverless.Options)) (*emrserverless.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.ListApplicationsInput, ...func(*emrserverless.Options)) *emrserverless.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.ListApplicationsInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobRunAttempts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobRunAttempts(ctx context.Context, params *emrserverless.ListJobRunAttemptsInput, optFns ...func(*emrserverless.Options)) (*emrserverless.ListJobRunAttemptsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobRunAttempts")
	}

	var r0 *emrserverless.ListJobRunAttemptsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.ListJobRunAttemptsInput, ...func(*emrserverless.Options)) (*emrserverless.ListJobRunAttemptsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.ListJobRunAttemptsInput, ...func(*emrserverless.Options)) *emrserverless.ListJobRunAttemptsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.ListJobRunAttemptsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.ListJobRunAttemptsInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobRuns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobRuns(ctx context.Context, params *emrserverless.ListJobRunsInput, optFns ...func(*emrserverless.Options)) (*emrserverless.ListJobRunsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobRuns")
	}

	var r0 *emrserverless.ListJobRunsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.ListJobRunsInput, ...func(*emrserverless.Options)) (*emrserverless.ListJobRunsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.ListJobRunsInput, ...func(*emrserverless.Options)) *emrserverless.ListJobRunsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.ListJobRunsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.ListJobRunsInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *emrserverless.ListTagsForResourceInput, optFns ...func(*emrserverless.Options)) (*emrserverless.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *emrserverless.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.ListTagsForResourceInput, ...func(*emrserverless.Options)) (*emrserverless.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.ListTagsForResourceInput, ...func(*emrserverless.Options)) *emrserverless.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.ListTagsForResourceInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() emrserverless.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 emrserverless.Options
	if rf, ok := ret.Get(0).(func() emrserverless.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(emrserverless.Options)
	}

	return r0
}

// StartApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartApplication(ctx context.Context, params *emrserverless.StartApplicationInput, optFns ...func(*emrserverless.Options)) (*emrserverless.StartApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartApplication")
	}

	var r0 *emrserverless.StartApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.StartApplicationInput, ...func(*emrserverless.Options)) (*emrserverless.StartApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.StartApplicationInput, ...func(*emrserverless.Options)) *emrserverless.StartApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.StartApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.StartApplicationInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartJobRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartJobRun(ctx context.Context, params *emrserverless.StartJobRunInput, optFns ...func(*emrserverless.Options)) (*emrserverless.StartJobRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartJobRun")
	}

	var r0 *emrserverless.StartJobRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.StartJobRunInput, ...func(*emrserverless.Options)) (*emrserverless.StartJobRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.StartJobRunInput, ...func(*emrserverless.Options)) *emrserverless.StartJobRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.StartJobRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.StartJobRunInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopApplication(ctx context.Context, params *emrserverless.StopApplicationInput, optFns ...func(*emrserverless.Options)) (*emrserverless.StopApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopApplication")
	}

	var r0 *emrserverless.StopApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.StopApplicationInput, ...func(*emrserverless.Options)) (*emrserverless.StopApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.StopApplicationInput, ...func(*emrserverless.Options)) *emrserverless.StopApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.StopApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.StopApplicationInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *emrserverless.TagResourceInput, optFns ...func(*emrserverless.Options)) (*emrserverless.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *emrserverless.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.TagResourceInput, ...func(*emrserverless.Options)) (*emrserverless.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.TagResourceInput, ...func(*emrserverless.Options)) *emrserverless.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.TagResourceInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *emrserverless.UntagResourceInput, optFns ...func(*emrserverless.Options)) (*emrserverless.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *emrserverless.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.UntagResourceInput, ...func(*emrserverless.Options)) (*emrserverless.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.UntagResourceInput, ...func(*emrserverless.Options)) *emrserverless.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.UntagResourceInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *emrserverless.UpdateApplicationInput, optFns ...func(*emrserverless.Options)) (*emrserverless.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *emrserverless.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.UpdateApplicationInput, ...func(*emrserverless.Options)) (*emrserverless.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emrserverless.UpdateApplicationInput, ...func(*emrserverless.Options)) *emrserverless.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*emrserverless.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emrserverless.UpdateApplicationInput, ...func(*emrserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
