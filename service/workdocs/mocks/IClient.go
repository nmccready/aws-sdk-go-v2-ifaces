// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	workdocs "github.com/aws/aws-sdk-go-v2/service/workdocs"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AbortDocumentVersionUpload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AbortDocumentVersionUpload(ctx context.Context, params *workdocs.AbortDocumentVersionUploadInput, optFns ...func(*workdocs.Options)) (*workdocs.AbortDocumentVersionUploadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AbortDocumentVersionUpload")
	}

	var r0 *workdocs.AbortDocumentVersionUploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.AbortDocumentVersionUploadInput, ...func(*workdocs.Options)) (*workdocs.AbortDocumentVersionUploadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.AbortDocumentVersionUploadInput, ...func(*workdocs.Options)) *workdocs.AbortDocumentVersionUploadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.AbortDocumentVersionUploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.AbortDocumentVersionUploadInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateUser(ctx context.Context, params *workdocs.ActivateUserInput, optFns ...func(*workdocs.Options)) (*workdocs.ActivateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateUser")
	}

	var r0 *workdocs.ActivateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.ActivateUserInput, ...func(*workdocs.Options)) (*workdocs.ActivateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.ActivateUserInput, ...func(*workdocs.Options)) *workdocs.ActivateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.ActivateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.ActivateUserInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddResourcePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddResourcePermissions(ctx context.Context, params *workdocs.AddResourcePermissionsInput, optFns ...func(*workdocs.Options)) (*workdocs.AddResourcePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddResourcePermissions")
	}

	var r0 *workdocs.AddResourcePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.AddResourcePermissionsInput, ...func(*workdocs.Options)) (*workdocs.AddResourcePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.AddResourcePermissionsInput, ...func(*workdocs.Options)) *workdocs.AddResourcePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.AddResourcePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.AddResourcePermissionsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComment(ctx context.Context, params *workdocs.CreateCommentInput, optFns ...func(*workdocs.Options)) (*workdocs.CreateCommentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComment")
	}

	var r0 *workdocs.CreateCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateCommentInput, ...func(*workdocs.Options)) (*workdocs.CreateCommentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateCommentInput, ...func(*workdocs.Options)) *workdocs.CreateCommentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.CreateCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.CreateCommentInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomMetadata(ctx context.Context, params *workdocs.CreateCustomMetadataInput, optFns ...func(*workdocs.Options)) (*workdocs.CreateCustomMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomMetadata")
	}

	var r0 *workdocs.CreateCustomMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateCustomMetadataInput, ...func(*workdocs.Options)) (*workdocs.CreateCustomMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateCustomMetadataInput, ...func(*workdocs.Options)) *workdocs.CreateCustomMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.CreateCustomMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.CreateCustomMetadataInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFolder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFolder(ctx context.Context, params *workdocs.CreateFolderInput, optFns ...func(*workdocs.Options)) (*workdocs.CreateFolderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFolder")
	}

	var r0 *workdocs.CreateFolderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateFolderInput, ...func(*workdocs.Options)) (*workdocs.CreateFolderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateFolderInput, ...func(*workdocs.Options)) *workdocs.CreateFolderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.CreateFolderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.CreateFolderInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLabels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLabels(ctx context.Context, params *workdocs.CreateLabelsInput, optFns ...func(*workdocs.Options)) (*workdocs.CreateLabelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLabels")
	}

	var r0 *workdocs.CreateLabelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateLabelsInput, ...func(*workdocs.Options)) (*workdocs.CreateLabelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateLabelsInput, ...func(*workdocs.Options)) *workdocs.CreateLabelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.CreateLabelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.CreateLabelsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotificationSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNotificationSubscription(ctx context.Context, params *workdocs.CreateNotificationSubscriptionInput, optFns ...func(*workdocs.Options)) (*workdocs.CreateNotificationSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotificationSubscription")
	}

	var r0 *workdocs.CreateNotificationSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateNotificationSubscriptionInput, ...func(*workdocs.Options)) (*workdocs.CreateNotificationSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateNotificationSubscriptionInput, ...func(*workdocs.Options)) *workdocs.CreateNotificationSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.CreateNotificationSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.CreateNotificationSubscriptionInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *workdocs.CreateUserInput, optFns ...func(*workdocs.Options)) (*workdocs.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *workdocs.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateUserInput, ...func(*workdocs.Options)) (*workdocs.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.CreateUserInput, ...func(*workdocs.Options)) *workdocs.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.CreateUserInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeactivateUser(ctx context.Context, params *workdocs.DeactivateUserInput, optFns ...func(*workdocs.Options)) (*workdocs.DeactivateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateUser")
	}

	var r0 *workdocs.DeactivateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeactivateUserInput, ...func(*workdocs.Options)) (*workdocs.DeactivateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeactivateUserInput, ...func(*workdocs.Options)) *workdocs.DeactivateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeactivateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeactivateUserInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteComment(ctx context.Context, params *workdocs.DeleteCommentInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteCommentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 *workdocs.DeleteCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteCommentInput, ...func(*workdocs.Options)) (*workdocs.DeleteCommentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteCommentInput, ...func(*workdocs.Options)) *workdocs.DeleteCommentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteCommentInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomMetadata(ctx context.Context, params *workdocs.DeleteCustomMetadataInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteCustomMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomMetadata")
	}

	var r0 *workdocs.DeleteCustomMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteCustomMetadataInput, ...func(*workdocs.Options)) (*workdocs.DeleteCustomMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteCustomMetadataInput, ...func(*workdocs.Options)) *workdocs.DeleteCustomMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteCustomMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteCustomMetadataInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDocument provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDocument(ctx context.Context, params *workdocs.DeleteDocumentInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteDocumentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDocument")
	}

	var r0 *workdocs.DeleteDocumentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteDocumentInput, ...func(*workdocs.Options)) (*workdocs.DeleteDocumentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteDocumentInput, ...func(*workdocs.Options)) *workdocs.DeleteDocumentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteDocumentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteDocumentInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDocumentVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDocumentVersion(ctx context.Context, params *workdocs.DeleteDocumentVersionInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteDocumentVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDocumentVersion")
	}

	var r0 *workdocs.DeleteDocumentVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteDocumentVersionInput, ...func(*workdocs.Options)) (*workdocs.DeleteDocumentVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteDocumentVersionInput, ...func(*workdocs.Options)) *workdocs.DeleteDocumentVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteDocumentVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteDocumentVersionInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFolder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFolder(ctx context.Context, params *workdocs.DeleteFolderInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteFolderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFolder")
	}

	var r0 *workdocs.DeleteFolderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteFolderInput, ...func(*workdocs.Options)) (*workdocs.DeleteFolderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteFolderInput, ...func(*workdocs.Options)) *workdocs.DeleteFolderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteFolderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteFolderInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFolderContents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFolderContents(ctx context.Context, params *workdocs.DeleteFolderContentsInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteFolderContentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFolderContents")
	}

	var r0 *workdocs.DeleteFolderContentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteFolderContentsInput, ...func(*workdocs.Options)) (*workdocs.DeleteFolderContentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteFolderContentsInput, ...func(*workdocs.Options)) *workdocs.DeleteFolderContentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteFolderContentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteFolderContentsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLabels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLabels(ctx context.Context, params *workdocs.DeleteLabelsInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteLabelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLabels")
	}

	var r0 *workdocs.DeleteLabelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteLabelsInput, ...func(*workdocs.Options)) (*workdocs.DeleteLabelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteLabelsInput, ...func(*workdocs.Options)) *workdocs.DeleteLabelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteLabelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteLabelsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotificationSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNotificationSubscription(ctx context.Context, params *workdocs.DeleteNotificationSubscriptionInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteNotificationSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationSubscription")
	}

	var r0 *workdocs.DeleteNotificationSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteNotificationSubscriptionInput, ...func(*workdocs.Options)) (*workdocs.DeleteNotificationSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteNotificationSubscriptionInput, ...func(*workdocs.Options)) *workdocs.DeleteNotificationSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteNotificationSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteNotificationSubscriptionInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *workdocs.DeleteUserInput, optFns ...func(*workdocs.Options)) (*workdocs.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *workdocs.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteUserInput, ...func(*workdocs.Options)) (*workdocs.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DeleteUserInput, ...func(*workdocs.Options)) *workdocs.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DeleteUserInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeActivities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeActivities(ctx context.Context, params *workdocs.DescribeActivitiesInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeActivitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeActivities")
	}

	var r0 *workdocs.DescribeActivitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeActivitiesInput, ...func(*workdocs.Options)) (*workdocs.DescribeActivitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeActivitiesInput, ...func(*workdocs.Options)) *workdocs.DescribeActivitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeActivitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeActivitiesInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeComments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeComments(ctx context.Context, params *workdocs.DescribeCommentsInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeCommentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeComments")
	}

	var r0 *workdocs.DescribeCommentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeCommentsInput, ...func(*workdocs.Options)) (*workdocs.DescribeCommentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeCommentsInput, ...func(*workdocs.Options)) *workdocs.DescribeCommentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeCommentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeCommentsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDocumentVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDocumentVersions(ctx context.Context, params *workdocs.DescribeDocumentVersionsInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeDocumentVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDocumentVersions")
	}

	var r0 *workdocs.DescribeDocumentVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeDocumentVersionsInput, ...func(*workdocs.Options)) (*workdocs.DescribeDocumentVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeDocumentVersionsInput, ...func(*workdocs.Options)) *workdocs.DescribeDocumentVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeDocumentVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeDocumentVersionsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFolderContents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFolderContents(ctx context.Context, params *workdocs.DescribeFolderContentsInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeFolderContentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFolderContents")
	}

	var r0 *workdocs.DescribeFolderContentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeFolderContentsInput, ...func(*workdocs.Options)) (*workdocs.DescribeFolderContentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeFolderContentsInput, ...func(*workdocs.Options)) *workdocs.DescribeFolderContentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeFolderContentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeFolderContentsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGroups(ctx context.Context, params *workdocs.DescribeGroupsInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGroups")
	}

	var r0 *workdocs.DescribeGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeGroupsInput, ...func(*workdocs.Options)) (*workdocs.DescribeGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeGroupsInput, ...func(*workdocs.Options)) *workdocs.DescribeGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeGroupsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNotificationSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNotificationSubscriptions(ctx context.Context, params *workdocs.DescribeNotificationSubscriptionsInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeNotificationSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNotificationSubscriptions")
	}

	var r0 *workdocs.DescribeNotificationSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeNotificationSubscriptionsInput, ...func(*workdocs.Options)) (*workdocs.DescribeNotificationSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeNotificationSubscriptionsInput, ...func(*workdocs.Options)) *workdocs.DescribeNotificationSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeNotificationSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeNotificationSubscriptionsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResourcePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeResourcePermissions(ctx context.Context, params *workdocs.DescribeResourcePermissionsInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeResourcePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeResourcePermissions")
	}

	var r0 *workdocs.DescribeResourcePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeResourcePermissionsInput, ...func(*workdocs.Options)) (*workdocs.DescribeResourcePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeResourcePermissionsInput, ...func(*workdocs.Options)) *workdocs.DescribeResourcePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeResourcePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeResourcePermissionsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRootFolders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRootFolders(ctx context.Context, params *workdocs.DescribeRootFoldersInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeRootFoldersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRootFolders")
	}

	var r0 *workdocs.DescribeRootFoldersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeRootFoldersInput, ...func(*workdocs.Options)) (*workdocs.DescribeRootFoldersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeRootFoldersInput, ...func(*workdocs.Options)) *workdocs.DescribeRootFoldersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeRootFoldersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeRootFoldersInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUsers(ctx context.Context, params *workdocs.DescribeUsersInput, optFns ...func(*workdocs.Options)) (*workdocs.DescribeUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUsers")
	}

	var r0 *workdocs.DescribeUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeUsersInput, ...func(*workdocs.Options)) (*workdocs.DescribeUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.DescribeUsersInput, ...func(*workdocs.Options)) *workdocs.DescribeUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.DescribeUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.DescribeUsersInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCurrentUser(ctx context.Context, params *workdocs.GetCurrentUserInput, optFns ...func(*workdocs.Options)) (*workdocs.GetCurrentUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUser")
	}

	var r0 *workdocs.GetCurrentUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetCurrentUserInput, ...func(*workdocs.Options)) (*workdocs.GetCurrentUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetCurrentUserInput, ...func(*workdocs.Options)) *workdocs.GetCurrentUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.GetCurrentUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.GetCurrentUserInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocument provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDocument(ctx context.Context, params *workdocs.GetDocumentInput, optFns ...func(*workdocs.Options)) (*workdocs.GetDocumentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDocument")
	}

	var r0 *workdocs.GetDocumentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetDocumentInput, ...func(*workdocs.Options)) (*workdocs.GetDocumentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetDocumentInput, ...func(*workdocs.Options)) *workdocs.GetDocumentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.GetDocumentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.GetDocumentInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocumentPath provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDocumentPath(ctx context.Context, params *workdocs.GetDocumentPathInput, optFns ...func(*workdocs.Options)) (*workdocs.GetDocumentPathOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentPath")
	}

	var r0 *workdocs.GetDocumentPathOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetDocumentPathInput, ...func(*workdocs.Options)) (*workdocs.GetDocumentPathOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetDocumentPathInput, ...func(*workdocs.Options)) *workdocs.GetDocumentPathOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.GetDocumentPathOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.GetDocumentPathInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDocumentVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDocumentVersion(ctx context.Context, params *workdocs.GetDocumentVersionInput, optFns ...func(*workdocs.Options)) (*workdocs.GetDocumentVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDocumentVersion")
	}

	var r0 *workdocs.GetDocumentVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetDocumentVersionInput, ...func(*workdocs.Options)) (*workdocs.GetDocumentVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetDocumentVersionInput, ...func(*workdocs.Options)) *workdocs.GetDocumentVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.GetDocumentVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.GetDocumentVersionInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFolder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFolder(ctx context.Context, params *workdocs.GetFolderInput, optFns ...func(*workdocs.Options)) (*workdocs.GetFolderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFolder")
	}

	var r0 *workdocs.GetFolderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetFolderInput, ...func(*workdocs.Options)) (*workdocs.GetFolderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetFolderInput, ...func(*workdocs.Options)) *workdocs.GetFolderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.GetFolderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.GetFolderInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFolderPath provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFolderPath(ctx context.Context, params *workdocs.GetFolderPathInput, optFns ...func(*workdocs.Options)) (*workdocs.GetFolderPathOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFolderPath")
	}

	var r0 *workdocs.GetFolderPathOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetFolderPathInput, ...func(*workdocs.Options)) (*workdocs.GetFolderPathOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetFolderPathInput, ...func(*workdocs.Options)) *workdocs.GetFolderPathOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.GetFolderPathOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.GetFolderPathInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResources(ctx context.Context, params *workdocs.GetResourcesInput, optFns ...func(*workdocs.Options)) (*workdocs.GetResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResources")
	}

	var r0 *workdocs.GetResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetResourcesInput, ...func(*workdocs.Options)) (*workdocs.GetResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.GetResourcesInput, ...func(*workdocs.Options)) *workdocs.GetResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.GetResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.GetResourcesInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitiateDocumentVersionUpload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InitiateDocumentVersionUpload(ctx context.Context, params *workdocs.InitiateDocumentVersionUploadInput, optFns ...func(*workdocs.Options)) (*workdocs.InitiateDocumentVersionUploadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitiateDocumentVersionUpload")
	}

	var r0 *workdocs.InitiateDocumentVersionUploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.InitiateDocumentVersionUploadInput, ...func(*workdocs.Options)) (*workdocs.InitiateDocumentVersionUploadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.InitiateDocumentVersionUploadInput, ...func(*workdocs.Options)) *workdocs.InitiateDocumentVersionUploadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.InitiateDocumentVersionUploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.InitiateDocumentVersionUploadInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() workdocs.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 workdocs.Options
	if rf, ok := ret.Get(0).(func() workdocs.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(workdocs.Options)
	}

	return r0
}

// RemoveAllResourcePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveAllResourcePermissions(ctx context.Context, params *workdocs.RemoveAllResourcePermissionsInput, optFns ...func(*workdocs.Options)) (*workdocs.RemoveAllResourcePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllResourcePermissions")
	}

	var r0 *workdocs.RemoveAllResourcePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.RemoveAllResourcePermissionsInput, ...func(*workdocs.Options)) (*workdocs.RemoveAllResourcePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.RemoveAllResourcePermissionsInput, ...func(*workdocs.Options)) *workdocs.RemoveAllResourcePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.RemoveAllResourcePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.RemoveAllResourcePermissionsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveResourcePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveResourcePermission(ctx context.Context, params *workdocs.RemoveResourcePermissionInput, optFns ...func(*workdocs.Options)) (*workdocs.RemoveResourcePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveResourcePermission")
	}

	var r0 *workdocs.RemoveResourcePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.RemoveResourcePermissionInput, ...func(*workdocs.Options)) (*workdocs.RemoveResourcePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.RemoveResourcePermissionInput, ...func(*workdocs.Options)) *workdocs.RemoveResourcePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.RemoveResourcePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.RemoveResourcePermissionInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDocumentVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDocumentVersions(ctx context.Context, params *workdocs.RestoreDocumentVersionsInput, optFns ...func(*workdocs.Options)) (*workdocs.RestoreDocumentVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDocumentVersions")
	}

	var r0 *workdocs.RestoreDocumentVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.RestoreDocumentVersionsInput, ...func(*workdocs.Options)) (*workdocs.RestoreDocumentVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.RestoreDocumentVersionsInput, ...func(*workdocs.Options)) *workdocs.RestoreDocumentVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.RestoreDocumentVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.RestoreDocumentVersionsInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchResources(ctx context.Context, params *workdocs.SearchResourcesInput, optFns ...func(*workdocs.Options)) (*workdocs.SearchResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchResources")
	}

	var r0 *workdocs.SearchResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.SearchResourcesInput, ...func(*workdocs.Options)) (*workdocs.SearchResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.SearchResourcesInput, ...func(*workdocs.Options)) *workdocs.SearchResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.SearchResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.SearchResourcesInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDocument provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDocument(ctx context.Context, params *workdocs.UpdateDocumentInput, optFns ...func(*workdocs.Options)) (*workdocs.UpdateDocumentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDocument")
	}

	var r0 *workdocs.UpdateDocumentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.UpdateDocumentInput, ...func(*workdocs.Options)) (*workdocs.UpdateDocumentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.UpdateDocumentInput, ...func(*workdocs.Options)) *workdocs.UpdateDocumentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.UpdateDocumentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.UpdateDocumentInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDocumentVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDocumentVersion(ctx context.Context, params *workdocs.UpdateDocumentVersionInput, optFns ...func(*workdocs.Options)) (*workdocs.UpdateDocumentVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDocumentVersion")
	}

	var r0 *workdocs.UpdateDocumentVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.UpdateDocumentVersionInput, ...func(*workdocs.Options)) (*workdocs.UpdateDocumentVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.UpdateDocumentVersionInput, ...func(*workdocs.Options)) *workdocs.UpdateDocumentVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.UpdateDocumentVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.UpdateDocumentVersionInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFolder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFolder(ctx context.Context, params *workdocs.UpdateFolderInput, optFns ...func(*workdocs.Options)) (*workdocs.UpdateFolderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFolder")
	}

	var r0 *workdocs.UpdateFolderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.UpdateFolderInput, ...func(*workdocs.Options)) (*workdocs.UpdateFolderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.UpdateFolderInput, ...func(*workdocs.Options)) *workdocs.UpdateFolderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.UpdateFolderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.UpdateFolderInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *workdocs.UpdateUserInput, optFns ...func(*workdocs.Options)) (*workdocs.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *workdocs.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.UpdateUserInput, ...func(*workdocs.Options)) (*workdocs.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workdocs.UpdateUserInput, ...func(*workdocs.Options)) *workdocs.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workdocs.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workdocs.UpdateUserInput, ...func(*workdocs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
