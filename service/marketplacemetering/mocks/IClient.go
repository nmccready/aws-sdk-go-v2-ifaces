// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	marketplacemetering "github.com/aws/aws-sdk-go-v2/service/marketplacemetering"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchMeterUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchMeterUsage(ctx context.Context, params *marketplacemetering.BatchMeterUsageInput, optFns ...func(*marketplacemetering.Options)) (*marketplacemetering.BatchMeterUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchMeterUsage")
	}

	var r0 *marketplacemetering.BatchMeterUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *marketplacemetering.BatchMeterUsageInput, ...func(*marketplacemetering.Options)) (*marketplacemetering.BatchMeterUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *marketplacemetering.BatchMeterUsageInput, ...func(*marketplacemetering.Options)) *marketplacemetering.BatchMeterUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplacemetering.BatchMeterUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *marketplacemetering.BatchMeterUsageInput, ...func(*marketplacemetering.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MeterUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) MeterUsage(ctx context.Context, params *marketplacemetering.MeterUsageInput, optFns ...func(*marketplacemetering.Options)) (*marketplacemetering.MeterUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MeterUsage")
	}

	var r0 *marketplacemetering.MeterUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *marketplacemetering.MeterUsageInput, ...func(*marketplacemetering.Options)) (*marketplacemetering.MeterUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *marketplacemetering.MeterUsageInput, ...func(*marketplacemetering.Options)) *marketplacemetering.MeterUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplacemetering.MeterUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *marketplacemetering.MeterUsageInput, ...func(*marketplacemetering.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() marketplacemetering.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 marketplacemetering.Options
	if rf, ok := ret.Get(0).(func() marketplacemetering.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(marketplacemetering.Options)
	}

	return r0
}

// RegisterUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterUsage(ctx context.Context, params *marketplacemetering.RegisterUsageInput, optFns ...func(*marketplacemetering.Options)) (*marketplacemetering.RegisterUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUsage")
	}

	var r0 *marketplacemetering.RegisterUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *marketplacemetering.RegisterUsageInput, ...func(*marketplacemetering.Options)) (*marketplacemetering.RegisterUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *marketplacemetering.RegisterUsageInput, ...func(*marketplacemetering.Options)) *marketplacemetering.RegisterUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplacemetering.RegisterUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *marketplacemetering.RegisterUsageInput, ...func(*marketplacemetering.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveCustomer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResolveCustomer(ctx context.Context, params *marketplacemetering.ResolveCustomerInput, optFns ...func(*marketplacemetering.Options)) (*marketplacemetering.ResolveCustomerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResolveCustomer")
	}

	var r0 *marketplacemetering.ResolveCustomerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *marketplacemetering.ResolveCustomerInput, ...func(*marketplacemetering.Options)) (*marketplacemetering.ResolveCustomerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *marketplacemetering.ResolveCustomerInput, ...func(*marketplacemetering.Options)) *marketplacemetering.ResolveCustomerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*marketplacemetering.ResolveCustomerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *marketplacemetering.ResolveCustomerInput, ...func(*marketplacemetering.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
