// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	cloudwatch "github.com/aws/aws-sdk-go-v2/service/cloudwatch"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DeleteAlarms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAlarms(ctx context.Context, params *cloudwatch.DeleteAlarmsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DeleteAlarmsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlarms")
	}

	var r0 *cloudwatch.DeleteAlarmsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteAlarmsInput, ...func(*cloudwatch.Options)) (*cloudwatch.DeleteAlarmsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteAlarmsInput, ...func(*cloudwatch.Options)) *cloudwatch.DeleteAlarmsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DeleteAlarmsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DeleteAlarmsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAnomalyDetector(ctx context.Context, params *cloudwatch.DeleteAnomalyDetectorInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DeleteAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnomalyDetector")
	}

	var r0 *cloudwatch.DeleteAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteAnomalyDetectorInput, ...func(*cloudwatch.Options)) (*cloudwatch.DeleteAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteAnomalyDetectorInput, ...func(*cloudwatch.Options)) *cloudwatch.DeleteAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DeleteAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DeleteAnomalyDetectorInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDashboards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDashboards(ctx context.Context, params *cloudwatch.DeleteDashboardsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DeleteDashboardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDashboards")
	}

	var r0 *cloudwatch.DeleteDashboardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteDashboardsInput, ...func(*cloudwatch.Options)) (*cloudwatch.DeleteDashboardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteDashboardsInput, ...func(*cloudwatch.Options)) *cloudwatch.DeleteDashboardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DeleteDashboardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DeleteDashboardsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInsightRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInsightRules(ctx context.Context, params *cloudwatch.DeleteInsightRulesInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DeleteInsightRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInsightRules")
	}

	var r0 *cloudwatch.DeleteInsightRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteInsightRulesInput, ...func(*cloudwatch.Options)) (*cloudwatch.DeleteInsightRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteInsightRulesInput, ...func(*cloudwatch.Options)) *cloudwatch.DeleteInsightRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DeleteInsightRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DeleteInsightRulesInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMetricStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMetricStream(ctx context.Context, params *cloudwatch.DeleteMetricStreamInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DeleteMetricStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMetricStream")
	}

	var r0 *cloudwatch.DeleteMetricStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteMetricStreamInput, ...func(*cloudwatch.Options)) (*cloudwatch.DeleteMetricStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DeleteMetricStreamInput, ...func(*cloudwatch.Options)) *cloudwatch.DeleteMetricStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DeleteMetricStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DeleteMetricStreamInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAlarmHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAlarmHistory(ctx context.Context, params *cloudwatch.DescribeAlarmHistoryInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAlarmHistory")
	}

	var r0 *cloudwatch.DescribeAlarmHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, ...func(*cloudwatch.Options)) *cloudwatch.DescribeAlarmHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DescribeAlarmHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DescribeAlarmHistoryInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAlarms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAlarms(ctx context.Context, params *cloudwatch.DescribeAlarmsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAlarms")
	}

	var r0 *cloudwatch.DescribeAlarmsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeAlarmsInput, ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeAlarmsInput, ...func(*cloudwatch.Options)) *cloudwatch.DescribeAlarmsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DescribeAlarmsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DescribeAlarmsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAlarmsForMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAlarmsForMetric(ctx context.Context, params *cloudwatch.DescribeAlarmsForMetricInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmsForMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAlarmsForMetric")
	}

	var r0 *cloudwatch.DescribeAlarmsForMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeAlarmsForMetricInput, ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAlarmsForMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeAlarmsForMetricInput, ...func(*cloudwatch.Options)) *cloudwatch.DescribeAlarmsForMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DescribeAlarmsForMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DescribeAlarmsForMetricInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAnomalyDetectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAnomalyDetectors(ctx context.Context, params *cloudwatch.DescribeAnomalyDetectorsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAnomalyDetectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAnomalyDetectors")
	}

	var r0 *cloudwatch.DescribeAnomalyDetectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, ...func(*cloudwatch.Options)) (*cloudwatch.DescribeAnomalyDetectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, ...func(*cloudwatch.Options)) *cloudwatch.DescribeAnomalyDetectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DescribeAnomalyDetectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DescribeAnomalyDetectorsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInsightRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInsightRules(ctx context.Context, params *cloudwatch.DescribeInsightRulesInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DescribeInsightRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInsightRules")
	}

	var r0 *cloudwatch.DescribeInsightRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeInsightRulesInput, ...func(*cloudwatch.Options)) (*cloudwatch.DescribeInsightRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DescribeInsightRulesInput, ...func(*cloudwatch.Options)) *cloudwatch.DescribeInsightRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DescribeInsightRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DescribeInsightRulesInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableAlarmActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableAlarmActions(ctx context.Context, params *cloudwatch.DisableAlarmActionsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DisableAlarmActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableAlarmActions")
	}

	var r0 *cloudwatch.DisableAlarmActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DisableAlarmActionsInput, ...func(*cloudwatch.Options)) (*cloudwatch.DisableAlarmActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DisableAlarmActionsInput, ...func(*cloudwatch.Options)) *cloudwatch.DisableAlarmActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DisableAlarmActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DisableAlarmActionsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableInsightRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableInsightRules(ctx context.Context, params *cloudwatch.DisableInsightRulesInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.DisableInsightRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableInsightRules")
	}

	var r0 *cloudwatch.DisableInsightRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DisableInsightRulesInput, ...func(*cloudwatch.Options)) (*cloudwatch.DisableInsightRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.DisableInsightRulesInput, ...func(*cloudwatch.Options)) *cloudwatch.DisableInsightRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.DisableInsightRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.DisableInsightRulesInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableAlarmActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableAlarmActions(ctx context.Context, params *cloudwatch.EnableAlarmActionsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.EnableAlarmActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableAlarmActions")
	}

	var r0 *cloudwatch.EnableAlarmActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.EnableAlarmActionsInput, ...func(*cloudwatch.Options)) (*cloudwatch.EnableAlarmActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.EnableAlarmActionsInput, ...func(*cloudwatch.Options)) *cloudwatch.EnableAlarmActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.EnableAlarmActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.EnableAlarmActionsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableInsightRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableInsightRules(ctx context.Context, params *cloudwatch.EnableInsightRulesInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.EnableInsightRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableInsightRules")
	}

	var r0 *cloudwatch.EnableInsightRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.EnableInsightRulesInput, ...func(*cloudwatch.Options)) (*cloudwatch.EnableInsightRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.EnableInsightRulesInput, ...func(*cloudwatch.Options)) *cloudwatch.EnableInsightRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.EnableInsightRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.EnableInsightRulesInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDashboard(ctx context.Context, params *cloudwatch.GetDashboardInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.GetDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboard")
	}

	var r0 *cloudwatch.GetDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetDashboardInput, ...func(*cloudwatch.Options)) (*cloudwatch.GetDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetDashboardInput, ...func(*cloudwatch.Options)) *cloudwatch.GetDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.GetDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.GetDashboardInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInsightRuleReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInsightRuleReport(ctx context.Context, params *cloudwatch.GetInsightRuleReportInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.GetInsightRuleReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInsightRuleReport")
	}

	var r0 *cloudwatch.GetInsightRuleReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetInsightRuleReportInput, ...func(*cloudwatch.Options)) (*cloudwatch.GetInsightRuleReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetInsightRuleReportInput, ...func(*cloudwatch.Options)) *cloudwatch.GetInsightRuleReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.GetInsightRuleReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.GetInsightRuleReportInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMetricData(ctx context.Context, params *cloudwatch.GetMetricDataInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricData")
	}

	var r0 *cloudwatch.GetMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetMetricDataInput, ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetMetricDataInput, ...func(*cloudwatch.Options)) *cloudwatch.GetMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.GetMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.GetMetricDataInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMetricStatistics(ctx context.Context, params *cloudwatch.GetMetricStatisticsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricStatistics")
	}

	var r0 *cloudwatch.GetMetricStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetMetricStatisticsInput, ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetMetricStatisticsInput, ...func(*cloudwatch.Options)) *cloudwatch.GetMetricStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.GetMetricStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.GetMetricStatisticsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMetricStream(ctx context.Context, params *cloudwatch.GetMetricStreamInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricStream")
	}

	var r0 *cloudwatch.GetMetricStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetMetricStreamInput, ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetMetricStreamInput, ...func(*cloudwatch.Options)) *cloudwatch.GetMetricStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.GetMetricStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.GetMetricStreamInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricWidgetImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMetricWidgetImage(ctx context.Context, params *cloudwatch.GetMetricWidgetImageInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricWidgetImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricWidgetImage")
	}

	var r0 *cloudwatch.GetMetricWidgetImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetMetricWidgetImageInput, ...func(*cloudwatch.Options)) (*cloudwatch.GetMetricWidgetImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.GetMetricWidgetImageInput, ...func(*cloudwatch.Options)) *cloudwatch.GetMetricWidgetImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.GetMetricWidgetImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.GetMetricWidgetImageInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDashboards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDashboards(ctx context.Context, params *cloudwatch.ListDashboardsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.ListDashboardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDashboards")
	}

	var r0 *cloudwatch.ListDashboardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListDashboardsInput, ...func(*cloudwatch.Options)) (*cloudwatch.ListDashboardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListDashboardsInput, ...func(*cloudwatch.Options)) *cloudwatch.ListDashboardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.ListDashboardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.ListDashboardsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedInsightRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListManagedInsightRules(ctx context.Context, params *cloudwatch.ListManagedInsightRulesInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.ListManagedInsightRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListManagedInsightRules")
	}

	var r0 *cloudwatch.ListManagedInsightRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListManagedInsightRulesInput, ...func(*cloudwatch.Options)) (*cloudwatch.ListManagedInsightRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListManagedInsightRulesInput, ...func(*cloudwatch.Options)) *cloudwatch.ListManagedInsightRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.ListManagedInsightRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.ListManagedInsightRulesInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetricStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMetricStreams(ctx context.Context, params *cloudwatch.ListMetricStreamsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.ListMetricStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricStreams")
	}

	var r0 *cloudwatch.ListMetricStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListMetricStreamsInput, ...func(*cloudwatch.Options)) (*cloudwatch.ListMetricStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListMetricStreamsInput, ...func(*cloudwatch.Options)) *cloudwatch.ListMetricStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.ListMetricStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.ListMetricStreamsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMetrics(ctx context.Context, params *cloudwatch.ListMetricsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.ListMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMetrics")
	}

	var r0 *cloudwatch.ListMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListMetricsInput, ...func(*cloudwatch.Options)) (*cloudwatch.ListMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListMetricsInput, ...func(*cloudwatch.Options)) *cloudwatch.ListMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.ListMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.ListMetricsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *cloudwatch.ListTagsForResourceInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *cloudwatch.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListTagsForResourceInput, ...func(*cloudwatch.Options)) (*cloudwatch.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.ListTagsForResourceInput, ...func(*cloudwatch.Options)) *cloudwatch.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.ListTagsForResourceInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cloudwatch.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cloudwatch.Options
	if rf, ok := ret.Get(0).(func() cloudwatch.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cloudwatch.Options)
	}

	return r0
}

// PutAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAnomalyDetector(ctx context.Context, params *cloudwatch.PutAnomalyDetectorInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAnomalyDetector")
	}

	var r0 *cloudwatch.PutAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutAnomalyDetectorInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutAnomalyDetectorInput, ...func(*cloudwatch.Options)) *cloudwatch.PutAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.PutAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.PutAnomalyDetectorInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutCompositeAlarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutCompositeAlarm(ctx context.Context, params *cloudwatch.PutCompositeAlarmInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutCompositeAlarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutCompositeAlarm")
	}

	var r0 *cloudwatch.PutCompositeAlarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutCompositeAlarmInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutCompositeAlarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutCompositeAlarmInput, ...func(*cloudwatch.Options)) *cloudwatch.PutCompositeAlarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.PutCompositeAlarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.PutCompositeAlarmInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDashboard(ctx context.Context, params *cloudwatch.PutDashboardInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDashboard")
	}

	var r0 *cloudwatch.PutDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutDashboardInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutDashboardInput, ...func(*cloudwatch.Options)) *cloudwatch.PutDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.PutDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.PutDashboardInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutInsightRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutInsightRule(ctx context.Context, params *cloudwatch.PutInsightRuleInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutInsightRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutInsightRule")
	}

	var r0 *cloudwatch.PutInsightRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutInsightRuleInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutInsightRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutInsightRuleInput, ...func(*cloudwatch.Options)) *cloudwatch.PutInsightRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.PutInsightRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.PutInsightRuleInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutManagedInsightRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutManagedInsightRules(ctx context.Context, params *cloudwatch.PutManagedInsightRulesInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutManagedInsightRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutManagedInsightRules")
	}

	var r0 *cloudwatch.PutManagedInsightRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutManagedInsightRulesInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutManagedInsightRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutManagedInsightRulesInput, ...func(*cloudwatch.Options)) *cloudwatch.PutManagedInsightRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.PutManagedInsightRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.PutManagedInsightRulesInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMetricAlarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMetricAlarm(ctx context.Context, params *cloudwatch.PutMetricAlarmInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricAlarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMetricAlarm")
	}

	var r0 *cloudwatch.PutMetricAlarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutMetricAlarmInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricAlarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutMetricAlarmInput, ...func(*cloudwatch.Options)) *cloudwatch.PutMetricAlarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.PutMetricAlarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.PutMetricAlarmInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMetricData(ctx context.Context, params *cloudwatch.PutMetricDataInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMetricData")
	}

	var r0 *cloudwatch.PutMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutMetricDataInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutMetricDataInput, ...func(*cloudwatch.Options)) *cloudwatch.PutMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.PutMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.PutMetricDataInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMetricStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMetricStream(ctx context.Context, params *cloudwatch.PutMetricStreamInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMetricStream")
	}

	var r0 *cloudwatch.PutMetricStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutMetricStreamInput, ...func(*cloudwatch.Options)) (*cloudwatch.PutMetricStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.PutMetricStreamInput, ...func(*cloudwatch.Options)) *cloudwatch.PutMetricStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.PutMetricStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.PutMetricStreamInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetAlarmState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetAlarmState(ctx context.Context, params *cloudwatch.SetAlarmStateInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.SetAlarmStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetAlarmState")
	}

	var r0 *cloudwatch.SetAlarmStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.SetAlarmStateInput, ...func(*cloudwatch.Options)) (*cloudwatch.SetAlarmStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.SetAlarmStateInput, ...func(*cloudwatch.Options)) *cloudwatch.SetAlarmStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.SetAlarmStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.SetAlarmStateInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMetricStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMetricStreams(ctx context.Context, params *cloudwatch.StartMetricStreamsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.StartMetricStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMetricStreams")
	}

	var r0 *cloudwatch.StartMetricStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.StartMetricStreamsInput, ...func(*cloudwatch.Options)) (*cloudwatch.StartMetricStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.StartMetricStreamsInput, ...func(*cloudwatch.Options)) *cloudwatch.StartMetricStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.StartMetricStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.StartMetricStreamsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMetricStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopMetricStreams(ctx context.Context, params *cloudwatch.StopMetricStreamsInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.StopMetricStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopMetricStreams")
	}

	var r0 *cloudwatch.StopMetricStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.StopMetricStreamsInput, ...func(*cloudwatch.Options)) (*cloudwatch.StopMetricStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.StopMetricStreamsInput, ...func(*cloudwatch.Options)) *cloudwatch.StopMetricStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.StopMetricStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.StopMetricStreamsInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *cloudwatch.TagResourceInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *cloudwatch.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.TagResourceInput, ...func(*cloudwatch.Options)) (*cloudwatch.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.TagResourceInput, ...func(*cloudwatch.Options)) *cloudwatch.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.TagResourceInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *cloudwatch.UntagResourceInput, optFns ...func(*cloudwatch.Options)) (*cloudwatch.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *cloudwatch.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.UntagResourceInput, ...func(*cloudwatch.Options)) (*cloudwatch.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatch.UntagResourceInput, ...func(*cloudwatch.Options)) *cloudwatch.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatch.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatch.UntagResourceInput, ...func(*cloudwatch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
