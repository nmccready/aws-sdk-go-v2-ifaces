// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	datasync "github.com/aws/aws-sdk-go-v2/service/datasync"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddStorageSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddStorageSystem(ctx context.Context, params *datasync.AddStorageSystemInput, optFns ...func(*datasync.Options)) (*datasync.AddStorageSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddStorageSystem")
	}

	var r0 *datasync.AddStorageSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.AddStorageSystemInput, ...func(*datasync.Options)) (*datasync.AddStorageSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.AddStorageSystemInput, ...func(*datasync.Options)) *datasync.AddStorageSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.AddStorageSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.AddStorageSystemInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelTaskExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelTaskExecution(ctx context.Context, params *datasync.CancelTaskExecutionInput, optFns ...func(*datasync.Options)) (*datasync.CancelTaskExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelTaskExecution")
	}

	var r0 *datasync.CancelTaskExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CancelTaskExecutionInput, ...func(*datasync.Options)) (*datasync.CancelTaskExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CancelTaskExecutionInput, ...func(*datasync.Options)) *datasync.CancelTaskExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CancelTaskExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CancelTaskExecutionInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAgent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAgent(ctx context.Context, params *datasync.CreateAgentInput, optFns ...func(*datasync.Options)) (*datasync.CreateAgentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAgent")
	}

	var r0 *datasync.CreateAgentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateAgentInput, ...func(*datasync.Options)) (*datasync.CreateAgentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateAgentInput, ...func(*datasync.Options)) *datasync.CreateAgentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateAgentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateAgentInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationAzureBlob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationAzureBlob(ctx context.Context, params *datasync.CreateLocationAzureBlobInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationAzureBlobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationAzureBlob")
	}

	var r0 *datasync.CreateLocationAzureBlobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationAzureBlobInput, ...func(*datasync.Options)) (*datasync.CreateLocationAzureBlobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationAzureBlobInput, ...func(*datasync.Options)) *datasync.CreateLocationAzureBlobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationAzureBlobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationAzureBlobInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationEfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationEfs(ctx context.Context, params *datasync.CreateLocationEfsInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationEfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationEfs")
	}

	var r0 *datasync.CreateLocationEfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationEfsInput, ...func(*datasync.Options)) (*datasync.CreateLocationEfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationEfsInput, ...func(*datasync.Options)) *datasync.CreateLocationEfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationEfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationEfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationFsxLustre provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationFsxLustre(ctx context.Context, params *datasync.CreateLocationFsxLustreInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationFsxLustreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationFsxLustre")
	}

	var r0 *datasync.CreateLocationFsxLustreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationFsxLustreInput, ...func(*datasync.Options)) (*datasync.CreateLocationFsxLustreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationFsxLustreInput, ...func(*datasync.Options)) *datasync.CreateLocationFsxLustreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationFsxLustreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationFsxLustreInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationFsxOntap provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationFsxOntap(ctx context.Context, params *datasync.CreateLocationFsxOntapInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationFsxOntapOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationFsxOntap")
	}

	var r0 *datasync.CreateLocationFsxOntapOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationFsxOntapInput, ...func(*datasync.Options)) (*datasync.CreateLocationFsxOntapOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationFsxOntapInput, ...func(*datasync.Options)) *datasync.CreateLocationFsxOntapOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationFsxOntapOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationFsxOntapInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationFsxOpenZfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationFsxOpenZfs(ctx context.Context, params *datasync.CreateLocationFsxOpenZfsInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationFsxOpenZfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationFsxOpenZfs")
	}

	var r0 *datasync.CreateLocationFsxOpenZfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationFsxOpenZfsInput, ...func(*datasync.Options)) (*datasync.CreateLocationFsxOpenZfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationFsxOpenZfsInput, ...func(*datasync.Options)) *datasync.CreateLocationFsxOpenZfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationFsxOpenZfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationFsxOpenZfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationFsxWindows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationFsxWindows(ctx context.Context, params *datasync.CreateLocationFsxWindowsInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationFsxWindowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationFsxWindows")
	}

	var r0 *datasync.CreateLocationFsxWindowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationFsxWindowsInput, ...func(*datasync.Options)) (*datasync.CreateLocationFsxWindowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationFsxWindowsInput, ...func(*datasync.Options)) *datasync.CreateLocationFsxWindowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationFsxWindowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationFsxWindowsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationHdfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationHdfs(ctx context.Context, params *datasync.CreateLocationHdfsInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationHdfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationHdfs")
	}

	var r0 *datasync.CreateLocationHdfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationHdfsInput, ...func(*datasync.Options)) (*datasync.CreateLocationHdfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationHdfsInput, ...func(*datasync.Options)) *datasync.CreateLocationHdfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationHdfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationHdfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationNfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationNfs(ctx context.Context, params *datasync.CreateLocationNfsInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationNfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationNfs")
	}

	var r0 *datasync.CreateLocationNfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationNfsInput, ...func(*datasync.Options)) (*datasync.CreateLocationNfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationNfsInput, ...func(*datasync.Options)) *datasync.CreateLocationNfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationNfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationNfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationObjectStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationObjectStorage(ctx context.Context, params *datasync.CreateLocationObjectStorageInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationObjectStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationObjectStorage")
	}

	var r0 *datasync.CreateLocationObjectStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationObjectStorageInput, ...func(*datasync.Options)) (*datasync.CreateLocationObjectStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationObjectStorageInput, ...func(*datasync.Options)) *datasync.CreateLocationObjectStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationObjectStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationObjectStorageInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationS3 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationS3(ctx context.Context, params *datasync.CreateLocationS3Input, optFns ...func(*datasync.Options)) (*datasync.CreateLocationS3Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationS3")
	}

	var r0 *datasync.CreateLocationS3Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationS3Input, ...func(*datasync.Options)) (*datasync.CreateLocationS3Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationS3Input, ...func(*datasync.Options)) *datasync.CreateLocationS3Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationS3Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationS3Input, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLocationSmb provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLocationSmb(ctx context.Context, params *datasync.CreateLocationSmbInput, optFns ...func(*datasync.Options)) (*datasync.CreateLocationSmbOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationSmb")
	}

	var r0 *datasync.CreateLocationSmbOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationSmbInput, ...func(*datasync.Options)) (*datasync.CreateLocationSmbOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateLocationSmbInput, ...func(*datasync.Options)) *datasync.CreateLocationSmbOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateLocationSmbOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateLocationSmbInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTask(ctx context.Context, params *datasync.CreateTaskInput, optFns ...func(*datasync.Options)) (*datasync.CreateTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *datasync.CreateTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateTaskInput, ...func(*datasync.Options)) (*datasync.CreateTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.CreateTaskInput, ...func(*datasync.Options)) *datasync.CreateTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.CreateTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.CreateTaskInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAgent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAgent(ctx context.Context, params *datasync.DeleteAgentInput, optFns ...func(*datasync.Options)) (*datasync.DeleteAgentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAgent")
	}

	var r0 *datasync.DeleteAgentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DeleteAgentInput, ...func(*datasync.Options)) (*datasync.DeleteAgentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DeleteAgentInput, ...func(*datasync.Options)) *datasync.DeleteAgentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DeleteAgentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DeleteAgentInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLocation(ctx context.Context, params *datasync.DeleteLocationInput, optFns ...func(*datasync.Options)) (*datasync.DeleteLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLocation")
	}

	var r0 *datasync.DeleteLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DeleteLocationInput, ...func(*datasync.Options)) (*datasync.DeleteLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DeleteLocationInput, ...func(*datasync.Options)) *datasync.DeleteLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DeleteLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DeleteLocationInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTask(ctx context.Context, params *datasync.DeleteTaskInput, optFns ...func(*datasync.Options)) (*datasync.DeleteTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *datasync.DeleteTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DeleteTaskInput, ...func(*datasync.Options)) (*datasync.DeleteTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DeleteTaskInput, ...func(*datasync.Options)) *datasync.DeleteTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DeleteTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DeleteTaskInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAgent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAgent(ctx context.Context, params *datasync.DescribeAgentInput, optFns ...func(*datasync.Options)) (*datasync.DescribeAgentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAgent")
	}

	var r0 *datasync.DescribeAgentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeAgentInput, ...func(*datasync.Options)) (*datasync.DescribeAgentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeAgentInput, ...func(*datasync.Options)) *datasync.DescribeAgentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeAgentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeAgentInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDiscoveryJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDiscoveryJob(ctx context.Context, params *datasync.DescribeDiscoveryJobInput, optFns ...func(*datasync.Options)) (*datasync.DescribeDiscoveryJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDiscoveryJob")
	}

	var r0 *datasync.DescribeDiscoveryJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeDiscoveryJobInput, ...func(*datasync.Options)) (*datasync.DescribeDiscoveryJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeDiscoveryJobInput, ...func(*datasync.Options)) *datasync.DescribeDiscoveryJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeDiscoveryJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeDiscoveryJobInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationAzureBlob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationAzureBlob(ctx context.Context, params *datasync.DescribeLocationAzureBlobInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationAzureBlobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationAzureBlob")
	}

	var r0 *datasync.DescribeLocationAzureBlobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationAzureBlobInput, ...func(*datasync.Options)) (*datasync.DescribeLocationAzureBlobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationAzureBlobInput, ...func(*datasync.Options)) *datasync.DescribeLocationAzureBlobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationAzureBlobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationAzureBlobInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationEfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationEfs(ctx context.Context, params *datasync.DescribeLocationEfsInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationEfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationEfs")
	}

	var r0 *datasync.DescribeLocationEfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationEfsInput, ...func(*datasync.Options)) (*datasync.DescribeLocationEfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationEfsInput, ...func(*datasync.Options)) *datasync.DescribeLocationEfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationEfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationEfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationFsxLustre provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationFsxLustre(ctx context.Context, params *datasync.DescribeLocationFsxLustreInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationFsxLustreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationFsxLustre")
	}

	var r0 *datasync.DescribeLocationFsxLustreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationFsxLustreInput, ...func(*datasync.Options)) (*datasync.DescribeLocationFsxLustreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationFsxLustreInput, ...func(*datasync.Options)) *datasync.DescribeLocationFsxLustreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationFsxLustreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationFsxLustreInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationFsxOntap provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationFsxOntap(ctx context.Context, params *datasync.DescribeLocationFsxOntapInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationFsxOntapOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationFsxOntap")
	}

	var r0 *datasync.DescribeLocationFsxOntapOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationFsxOntapInput, ...func(*datasync.Options)) (*datasync.DescribeLocationFsxOntapOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationFsxOntapInput, ...func(*datasync.Options)) *datasync.DescribeLocationFsxOntapOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationFsxOntapOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationFsxOntapInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationFsxOpenZfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationFsxOpenZfs(ctx context.Context, params *datasync.DescribeLocationFsxOpenZfsInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationFsxOpenZfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationFsxOpenZfs")
	}

	var r0 *datasync.DescribeLocationFsxOpenZfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationFsxOpenZfsInput, ...func(*datasync.Options)) (*datasync.DescribeLocationFsxOpenZfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationFsxOpenZfsInput, ...func(*datasync.Options)) *datasync.DescribeLocationFsxOpenZfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationFsxOpenZfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationFsxOpenZfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationFsxWindows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationFsxWindows(ctx context.Context, params *datasync.DescribeLocationFsxWindowsInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationFsxWindowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationFsxWindows")
	}

	var r0 *datasync.DescribeLocationFsxWindowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationFsxWindowsInput, ...func(*datasync.Options)) (*datasync.DescribeLocationFsxWindowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationFsxWindowsInput, ...func(*datasync.Options)) *datasync.DescribeLocationFsxWindowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationFsxWindowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationFsxWindowsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationHdfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationHdfs(ctx context.Context, params *datasync.DescribeLocationHdfsInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationHdfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationHdfs")
	}

	var r0 *datasync.DescribeLocationHdfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationHdfsInput, ...func(*datasync.Options)) (*datasync.DescribeLocationHdfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationHdfsInput, ...func(*datasync.Options)) *datasync.DescribeLocationHdfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationHdfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationHdfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationNfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationNfs(ctx context.Context, params *datasync.DescribeLocationNfsInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationNfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationNfs")
	}

	var r0 *datasync.DescribeLocationNfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationNfsInput, ...func(*datasync.Options)) (*datasync.DescribeLocationNfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationNfsInput, ...func(*datasync.Options)) *datasync.DescribeLocationNfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationNfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationNfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationObjectStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationObjectStorage(ctx context.Context, params *datasync.DescribeLocationObjectStorageInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationObjectStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationObjectStorage")
	}

	var r0 *datasync.DescribeLocationObjectStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationObjectStorageInput, ...func(*datasync.Options)) (*datasync.DescribeLocationObjectStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationObjectStorageInput, ...func(*datasync.Options)) *datasync.DescribeLocationObjectStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationObjectStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationObjectStorageInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationS3 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationS3(ctx context.Context, params *datasync.DescribeLocationS3Input, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationS3Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationS3")
	}

	var r0 *datasync.DescribeLocationS3Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationS3Input, ...func(*datasync.Options)) (*datasync.DescribeLocationS3Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationS3Input, ...func(*datasync.Options)) *datasync.DescribeLocationS3Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationS3Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationS3Input, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLocationSmb provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLocationSmb(ctx context.Context, params *datasync.DescribeLocationSmbInput, optFns ...func(*datasync.Options)) (*datasync.DescribeLocationSmbOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLocationSmb")
	}

	var r0 *datasync.DescribeLocationSmbOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationSmbInput, ...func(*datasync.Options)) (*datasync.DescribeLocationSmbOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeLocationSmbInput, ...func(*datasync.Options)) *datasync.DescribeLocationSmbOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeLocationSmbOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeLocationSmbInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStorageSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStorageSystem(ctx context.Context, params *datasync.DescribeStorageSystemInput, optFns ...func(*datasync.Options)) (*datasync.DescribeStorageSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStorageSystem")
	}

	var r0 *datasync.DescribeStorageSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeStorageSystemInput, ...func(*datasync.Options)) (*datasync.DescribeStorageSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeStorageSystemInput, ...func(*datasync.Options)) *datasync.DescribeStorageSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeStorageSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeStorageSystemInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStorageSystemResourceMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStorageSystemResourceMetrics(ctx context.Context, params *datasync.DescribeStorageSystemResourceMetricsInput, optFns ...func(*datasync.Options)) (*datasync.DescribeStorageSystemResourceMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStorageSystemResourceMetrics")
	}

	var r0 *datasync.DescribeStorageSystemResourceMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeStorageSystemResourceMetricsInput, ...func(*datasync.Options)) (*datasync.DescribeStorageSystemResourceMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeStorageSystemResourceMetricsInput, ...func(*datasync.Options)) *datasync.DescribeStorageSystemResourceMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeStorageSystemResourceMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeStorageSystemResourceMetricsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStorageSystemResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStorageSystemResources(ctx context.Context, params *datasync.DescribeStorageSystemResourcesInput, optFns ...func(*datasync.Options)) (*datasync.DescribeStorageSystemResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStorageSystemResources")
	}

	var r0 *datasync.DescribeStorageSystemResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeStorageSystemResourcesInput, ...func(*datasync.Options)) (*datasync.DescribeStorageSystemResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeStorageSystemResourcesInput, ...func(*datasync.Options)) *datasync.DescribeStorageSystemResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeStorageSystemResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeStorageSystemResourcesInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTask(ctx context.Context, params *datasync.DescribeTaskInput, optFns ...func(*datasync.Options)) (*datasync.DescribeTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTask")
	}

	var r0 *datasync.DescribeTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeTaskInput, ...func(*datasync.Options)) (*datasync.DescribeTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeTaskInput, ...func(*datasync.Options)) *datasync.DescribeTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeTaskInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTaskExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTaskExecution(ctx context.Context, params *datasync.DescribeTaskExecutionInput, optFns ...func(*datasync.Options)) (*datasync.DescribeTaskExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTaskExecution")
	}

	var r0 *datasync.DescribeTaskExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeTaskExecutionInput, ...func(*datasync.Options)) (*datasync.DescribeTaskExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.DescribeTaskExecutionInput, ...func(*datasync.Options)) *datasync.DescribeTaskExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.DescribeTaskExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.DescribeTaskExecutionInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateRecommendations(ctx context.Context, params *datasync.GenerateRecommendationsInput, optFns ...func(*datasync.Options)) (*datasync.GenerateRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRecommendations")
	}

	var r0 *datasync.GenerateRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.GenerateRecommendationsInput, ...func(*datasync.Options)) (*datasync.GenerateRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.GenerateRecommendationsInput, ...func(*datasync.Options)) *datasync.GenerateRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.GenerateRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.GenerateRecommendationsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAgents(ctx context.Context, params *datasync.ListAgentsInput, optFns ...func(*datasync.Options)) (*datasync.ListAgentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAgents")
	}

	var r0 *datasync.ListAgentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListAgentsInput, ...func(*datasync.Options)) (*datasync.ListAgentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListAgentsInput, ...func(*datasync.Options)) *datasync.ListAgentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.ListAgentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.ListAgentsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiscoveryJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDiscoveryJobs(ctx context.Context, params *datasync.ListDiscoveryJobsInput, optFns ...func(*datasync.Options)) (*datasync.ListDiscoveryJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDiscoveryJobs")
	}

	var r0 *datasync.ListDiscoveryJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListDiscoveryJobsInput, ...func(*datasync.Options)) (*datasync.ListDiscoveryJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListDiscoveryJobsInput, ...func(*datasync.Options)) *datasync.ListDiscoveryJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.ListDiscoveryJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.ListDiscoveryJobsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLocations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLocations(ctx context.Context, params *datasync.ListLocationsInput, optFns ...func(*datasync.Options)) (*datasync.ListLocationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLocations")
	}

	var r0 *datasync.ListLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListLocationsInput, ...func(*datasync.Options)) (*datasync.ListLocationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListLocationsInput, ...func(*datasync.Options)) *datasync.ListLocationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.ListLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.ListLocationsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorageSystems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStorageSystems(ctx context.Context, params *datasync.ListStorageSystemsInput, optFns ...func(*datasync.Options)) (*datasync.ListStorageSystemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageSystems")
	}

	var r0 *datasync.ListStorageSystemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListStorageSystemsInput, ...func(*datasync.Options)) (*datasync.ListStorageSystemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListStorageSystemsInput, ...func(*datasync.Options)) *datasync.ListStorageSystemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.ListStorageSystemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.ListStorageSystemsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *datasync.ListTagsForResourceInput, optFns ...func(*datasync.Options)) (*datasync.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *datasync.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListTagsForResourceInput, ...func(*datasync.Options)) (*datasync.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListTagsForResourceInput, ...func(*datasync.Options)) *datasync.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.ListTagsForResourceInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTaskExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTaskExecutions(ctx context.Context, params *datasync.ListTaskExecutionsInput, optFns ...func(*datasync.Options)) (*datasync.ListTaskExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskExecutions")
	}

	var r0 *datasync.ListTaskExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListTaskExecutionsInput, ...func(*datasync.Options)) (*datasync.ListTaskExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListTaskExecutionsInput, ...func(*datasync.Options)) *datasync.ListTaskExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.ListTaskExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.ListTaskExecutionsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTasks(ctx context.Context, params *datasync.ListTasksInput, optFns ...func(*datasync.Options)) (*datasync.ListTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *datasync.ListTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListTasksInput, ...func(*datasync.Options)) (*datasync.ListTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.ListTasksInput, ...func(*datasync.Options)) *datasync.ListTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.ListTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.ListTasksInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() datasync.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 datasync.Options
	if rf, ok := ret.Get(0).(func() datasync.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(datasync.Options)
	}

	return r0
}

// RemoveStorageSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveStorageSystem(ctx context.Context, params *datasync.RemoveStorageSystemInput, optFns ...func(*datasync.Options)) (*datasync.RemoveStorageSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveStorageSystem")
	}

	var r0 *datasync.RemoveStorageSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.RemoveStorageSystemInput, ...func(*datasync.Options)) (*datasync.RemoveStorageSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.RemoveStorageSystemInput, ...func(*datasync.Options)) *datasync.RemoveStorageSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.RemoveStorageSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.RemoveStorageSystemInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDiscoveryJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDiscoveryJob(ctx context.Context, params *datasync.StartDiscoveryJobInput, optFns ...func(*datasync.Options)) (*datasync.StartDiscoveryJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDiscoveryJob")
	}

	var r0 *datasync.StartDiscoveryJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.StartDiscoveryJobInput, ...func(*datasync.Options)) (*datasync.StartDiscoveryJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.StartDiscoveryJobInput, ...func(*datasync.Options)) *datasync.StartDiscoveryJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.StartDiscoveryJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.StartDiscoveryJobInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTaskExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTaskExecution(ctx context.Context, params *datasync.StartTaskExecutionInput, optFns ...func(*datasync.Options)) (*datasync.StartTaskExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTaskExecution")
	}

	var r0 *datasync.StartTaskExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.StartTaskExecutionInput, ...func(*datasync.Options)) (*datasync.StartTaskExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.StartTaskExecutionInput, ...func(*datasync.Options)) *datasync.StartTaskExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.StartTaskExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.StartTaskExecutionInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDiscoveryJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDiscoveryJob(ctx context.Context, params *datasync.StopDiscoveryJobInput, optFns ...func(*datasync.Options)) (*datasync.StopDiscoveryJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDiscoveryJob")
	}

	var r0 *datasync.StopDiscoveryJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.StopDiscoveryJobInput, ...func(*datasync.Options)) (*datasync.StopDiscoveryJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.StopDiscoveryJobInput, ...func(*datasync.Options)) *datasync.StopDiscoveryJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.StopDiscoveryJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.StopDiscoveryJobInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *datasync.TagResourceInput, optFns ...func(*datasync.Options)) (*datasync.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *datasync.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.TagResourceInput, ...func(*datasync.Options)) (*datasync.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.TagResourceInput, ...func(*datasync.Options)) *datasync.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.TagResourceInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *datasync.UntagResourceInput, optFns ...func(*datasync.Options)) (*datasync.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *datasync.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UntagResourceInput, ...func(*datasync.Options)) (*datasync.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UntagResourceInput, ...func(*datasync.Options)) *datasync.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UntagResourceInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAgent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAgent(ctx context.Context, params *datasync.UpdateAgentInput, optFns ...func(*datasync.Options)) (*datasync.UpdateAgentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgent")
	}

	var r0 *datasync.UpdateAgentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateAgentInput, ...func(*datasync.Options)) (*datasync.UpdateAgentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateAgentInput, ...func(*datasync.Options)) *datasync.UpdateAgentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateAgentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateAgentInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDiscoveryJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDiscoveryJob(ctx context.Context, params *datasync.UpdateDiscoveryJobInput, optFns ...func(*datasync.Options)) (*datasync.UpdateDiscoveryJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDiscoveryJob")
	}

	var r0 *datasync.UpdateDiscoveryJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateDiscoveryJobInput, ...func(*datasync.Options)) (*datasync.UpdateDiscoveryJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateDiscoveryJobInput, ...func(*datasync.Options)) *datasync.UpdateDiscoveryJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateDiscoveryJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateDiscoveryJobInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLocationAzureBlob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLocationAzureBlob(ctx context.Context, params *datasync.UpdateLocationAzureBlobInput, optFns ...func(*datasync.Options)) (*datasync.UpdateLocationAzureBlobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocationAzureBlob")
	}

	var r0 *datasync.UpdateLocationAzureBlobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationAzureBlobInput, ...func(*datasync.Options)) (*datasync.UpdateLocationAzureBlobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationAzureBlobInput, ...func(*datasync.Options)) *datasync.UpdateLocationAzureBlobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateLocationAzureBlobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateLocationAzureBlobInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLocationHdfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLocationHdfs(ctx context.Context, params *datasync.UpdateLocationHdfsInput, optFns ...func(*datasync.Options)) (*datasync.UpdateLocationHdfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocationHdfs")
	}

	var r0 *datasync.UpdateLocationHdfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationHdfsInput, ...func(*datasync.Options)) (*datasync.UpdateLocationHdfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationHdfsInput, ...func(*datasync.Options)) *datasync.UpdateLocationHdfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateLocationHdfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateLocationHdfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLocationNfs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLocationNfs(ctx context.Context, params *datasync.UpdateLocationNfsInput, optFns ...func(*datasync.Options)) (*datasync.UpdateLocationNfsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocationNfs")
	}

	var r0 *datasync.UpdateLocationNfsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationNfsInput, ...func(*datasync.Options)) (*datasync.UpdateLocationNfsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationNfsInput, ...func(*datasync.Options)) *datasync.UpdateLocationNfsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateLocationNfsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateLocationNfsInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLocationObjectStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLocationObjectStorage(ctx context.Context, params *datasync.UpdateLocationObjectStorageInput, optFns ...func(*datasync.Options)) (*datasync.UpdateLocationObjectStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocationObjectStorage")
	}

	var r0 *datasync.UpdateLocationObjectStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationObjectStorageInput, ...func(*datasync.Options)) (*datasync.UpdateLocationObjectStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationObjectStorageInput, ...func(*datasync.Options)) *datasync.UpdateLocationObjectStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateLocationObjectStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateLocationObjectStorageInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLocationSmb provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLocationSmb(ctx context.Context, params *datasync.UpdateLocationSmbInput, optFns ...func(*datasync.Options)) (*datasync.UpdateLocationSmbOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLocationSmb")
	}

	var r0 *datasync.UpdateLocationSmbOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationSmbInput, ...func(*datasync.Options)) (*datasync.UpdateLocationSmbOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateLocationSmbInput, ...func(*datasync.Options)) *datasync.UpdateLocationSmbOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateLocationSmbOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateLocationSmbInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStorageSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStorageSystem(ctx context.Context, params *datasync.UpdateStorageSystemInput, optFns ...func(*datasync.Options)) (*datasync.UpdateStorageSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStorageSystem")
	}

	var r0 *datasync.UpdateStorageSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateStorageSystemInput, ...func(*datasync.Options)) (*datasync.UpdateStorageSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateStorageSystemInput, ...func(*datasync.Options)) *datasync.UpdateStorageSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateStorageSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateStorageSystemInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTask(ctx context.Context, params *datasync.UpdateTaskInput, optFns ...func(*datasync.Options)) (*datasync.UpdateTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *datasync.UpdateTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateTaskInput, ...func(*datasync.Options)) (*datasync.UpdateTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateTaskInput, ...func(*datasync.Options)) *datasync.UpdateTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateTaskInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTaskExecution(ctx context.Context, params *datasync.UpdateTaskExecutionInput, optFns ...func(*datasync.Options)) (*datasync.UpdateTaskExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskExecution")
	}

	var r0 *datasync.UpdateTaskExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateTaskExecutionInput, ...func(*datasync.Options)) (*datasync.UpdateTaskExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *datasync.UpdateTaskExecutionInput, ...func(*datasync.Options)) *datasync.UpdateTaskExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datasync.UpdateTaskExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *datasync.UpdateTaskExecutionInput, ...func(*datasync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
