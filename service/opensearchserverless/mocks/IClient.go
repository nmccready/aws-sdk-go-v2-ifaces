// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	opensearchserverless "github.com/aws/aws-sdk-go-v2/service/opensearchserverless"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetCollection(ctx context.Context, params *opensearchserverless.BatchGetCollectionInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.BatchGetCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetCollection")
	}

	var r0 *opensearchserverless.BatchGetCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.BatchGetCollectionInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.BatchGetCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.BatchGetCollectionInput, ...func(*opensearchserverless.Options)) *opensearchserverless.BatchGetCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.BatchGetCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.BatchGetCollectionInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetEffectiveLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetEffectiveLifecyclePolicy(ctx context.Context, params *opensearchserverless.BatchGetEffectiveLifecyclePolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.BatchGetEffectiveLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetEffectiveLifecyclePolicy")
	}

	var r0 *opensearchserverless.BatchGetEffectiveLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.BatchGetEffectiveLifecyclePolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.BatchGetEffectiveLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.BatchGetEffectiveLifecyclePolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.BatchGetEffectiveLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.BatchGetEffectiveLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.BatchGetEffectiveLifecyclePolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetLifecyclePolicy(ctx context.Context, params *opensearchserverless.BatchGetLifecyclePolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.BatchGetLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetLifecyclePolicy")
	}

	var r0 *opensearchserverless.BatchGetLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.BatchGetLifecyclePolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.BatchGetLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.BatchGetLifecyclePolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.BatchGetLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.BatchGetLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.BatchGetLifecyclePolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetVpcEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetVpcEndpoint(ctx context.Context, params *opensearchserverless.BatchGetVpcEndpointInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.BatchGetVpcEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetVpcEndpoint")
	}

	var r0 *opensearchserverless.BatchGetVpcEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.BatchGetVpcEndpointInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.BatchGetVpcEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.BatchGetVpcEndpointInput, ...func(*opensearchserverless.Options)) *opensearchserverless.BatchGetVpcEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.BatchGetVpcEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.BatchGetVpcEndpointInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccessPolicy(ctx context.Context, params *opensearchserverless.CreateAccessPolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateAccessPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessPolicy")
	}

	var r0 *opensearchserverless.CreateAccessPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateAccessPolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateAccessPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateAccessPolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.CreateAccessPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.CreateAccessPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.CreateAccessPolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCollection(ctx context.Context, params *opensearchserverless.CreateCollectionInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCollection")
	}

	var r0 *opensearchserverless.CreateCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateCollectionInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateCollectionInput, ...func(*opensearchserverless.Options)) *opensearchserverless.CreateCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.CreateCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.CreateCollectionInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLifecyclePolicy(ctx context.Context, params *opensearchserverless.CreateLifecyclePolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLifecyclePolicy")
	}

	var r0 *opensearchserverless.CreateLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateLifecyclePolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateLifecyclePolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.CreateLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.CreateLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.CreateLifecyclePolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSecurityConfig(ctx context.Context, params *opensearchserverless.CreateSecurityConfigInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateSecurityConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecurityConfig")
	}

	var r0 *opensearchserverless.CreateSecurityConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateSecurityConfigInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateSecurityConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateSecurityConfigInput, ...func(*opensearchserverless.Options)) *opensearchserverless.CreateSecurityConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.CreateSecurityConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.CreateSecurityConfigInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSecurityPolicy(ctx context.Context, params *opensearchserverless.CreateSecurityPolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateSecurityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecurityPolicy")
	}

	var r0 *opensearchserverless.CreateSecurityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateSecurityPolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateSecurityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateSecurityPolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.CreateSecurityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.CreateSecurityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.CreateSecurityPolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVpcEndpoint(ctx context.Context, params *opensearchserverless.CreateVpcEndpointInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateVpcEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVpcEndpoint")
	}

	var r0 *opensearchserverless.CreateVpcEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateVpcEndpointInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.CreateVpcEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.CreateVpcEndpointInput, ...func(*opensearchserverless.Options)) *opensearchserverless.CreateVpcEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.CreateVpcEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.CreateVpcEndpointInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessPolicy(ctx context.Context, params *opensearchserverless.DeleteAccessPolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteAccessPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessPolicy")
	}

	var r0 *opensearchserverless.DeleteAccessPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteAccessPolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteAccessPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteAccessPolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.DeleteAccessPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.DeleteAccessPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.DeleteAccessPolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCollection(ctx context.Context, params *opensearchserverless.DeleteCollectionInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCollection")
	}

	var r0 *opensearchserverless.DeleteCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteCollectionInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteCollectionInput, ...func(*opensearchserverless.Options)) *opensearchserverless.DeleteCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.DeleteCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.DeleteCollectionInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLifecyclePolicy(ctx context.Context, params *opensearchserverless.DeleteLifecyclePolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLifecyclePolicy")
	}

	var r0 *opensearchserverless.DeleteLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteLifecyclePolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteLifecyclePolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.DeleteLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.DeleteLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.DeleteLifecyclePolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecurityConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSecurityConfig(ctx context.Context, params *opensearchserverless.DeleteSecurityConfigInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteSecurityConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecurityConfig")
	}

	var r0 *opensearchserverless.DeleteSecurityConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteSecurityConfigInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteSecurityConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteSecurityConfigInput, ...func(*opensearchserverless.Options)) *opensearchserverless.DeleteSecurityConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.DeleteSecurityConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.DeleteSecurityConfigInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecurityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSecurityPolicy(ctx context.Context, params *opensearchserverless.DeleteSecurityPolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteSecurityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecurityPolicy")
	}

	var r0 *opensearchserverless.DeleteSecurityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteSecurityPolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteSecurityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteSecurityPolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.DeleteSecurityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.DeleteSecurityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.DeleteSecurityPolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVpcEndpoint(ctx context.Context, params *opensearchserverless.DeleteVpcEndpointInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteVpcEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcEndpoint")
	}

	var r0 *opensearchserverless.DeleteVpcEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteVpcEndpointInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.DeleteVpcEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.DeleteVpcEndpointInput, ...func(*opensearchserverless.Options)) *opensearchserverless.DeleteVpcEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.DeleteVpcEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.DeleteVpcEndpointInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessPolicy(ctx context.Context, params *opensearchserverless.GetAccessPolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.GetAccessPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessPolicy")
	}

	var r0 *opensearchserverless.GetAccessPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetAccessPolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.GetAccessPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetAccessPolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.GetAccessPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.GetAccessPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.GetAccessPolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountSettings(ctx context.Context, params *opensearchserverless.GetAccountSettingsInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.GetAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSettings")
	}

	var r0 *opensearchserverless.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetAccountSettingsInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.GetAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetAccountSettingsInput, ...func(*opensearchserverless.Options)) *opensearchserverless.GetAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.GetAccountSettingsInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPoliciesStats provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPoliciesStats(ctx context.Context, params *opensearchserverless.GetPoliciesStatsInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.GetPoliciesStatsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPoliciesStats")
	}

	var r0 *opensearchserverless.GetPoliciesStatsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetPoliciesStatsInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.GetPoliciesStatsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetPoliciesStatsInput, ...func(*opensearchserverless.Options)) *opensearchserverless.GetPoliciesStatsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.GetPoliciesStatsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.GetPoliciesStatsInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecurityConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSecurityConfig(ctx context.Context, params *opensearchserverless.GetSecurityConfigInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.GetSecurityConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityConfig")
	}

	var r0 *opensearchserverless.GetSecurityConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetSecurityConfigInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.GetSecurityConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetSecurityConfigInput, ...func(*opensearchserverless.Options)) *opensearchserverless.GetSecurityConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.GetSecurityConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.GetSecurityConfigInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecurityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSecurityPolicy(ctx context.Context, params *opensearchserverless.GetSecurityPolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.GetSecurityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityPolicy")
	}

	var r0 *opensearchserverless.GetSecurityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetSecurityPolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.GetSecurityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.GetSecurityPolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.GetSecurityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.GetSecurityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.GetSecurityPolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccessPolicies(ctx context.Context, params *opensearchserverless.ListAccessPoliciesInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.ListAccessPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessPolicies")
	}

	var r0 *opensearchserverless.ListAccessPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListAccessPoliciesInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.ListAccessPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListAccessPoliciesInput, ...func(*opensearchserverless.Options)) *opensearchserverless.ListAccessPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.ListAccessPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.ListAccessPoliciesInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCollections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCollections(ctx context.Context, params *opensearchserverless.ListCollectionsInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.ListCollectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCollections")
	}

	var r0 *opensearchserverless.ListCollectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListCollectionsInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.ListCollectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListCollectionsInput, ...func(*opensearchserverless.Options)) *opensearchserverless.ListCollectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.ListCollectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.ListCollectionsInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLifecyclePolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLifecyclePolicies(ctx context.Context, params *opensearchserverless.ListLifecyclePoliciesInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.ListLifecyclePoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLifecyclePolicies")
	}

	var r0 *opensearchserverless.ListLifecyclePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListLifecyclePoliciesInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.ListLifecyclePoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListLifecyclePoliciesInput, ...func(*opensearchserverless.Options)) *opensearchserverless.ListLifecyclePoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.ListLifecyclePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.ListLifecyclePoliciesInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityConfigs(ctx context.Context, params *opensearchserverless.ListSecurityConfigsInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.ListSecurityConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityConfigs")
	}

	var r0 *opensearchserverless.ListSecurityConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListSecurityConfigsInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.ListSecurityConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListSecurityConfigsInput, ...func(*opensearchserverless.Options)) *opensearchserverless.ListSecurityConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.ListSecurityConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.ListSecurityConfigsInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityPolicies(ctx context.Context, params *opensearchserverless.ListSecurityPoliciesInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.ListSecurityPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityPolicies")
	}

	var r0 *opensearchserverless.ListSecurityPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListSecurityPoliciesInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.ListSecurityPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListSecurityPoliciesInput, ...func(*opensearchserverless.Options)) *opensearchserverless.ListSecurityPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.ListSecurityPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.ListSecurityPoliciesInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *opensearchserverless.ListTagsForResourceInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *opensearchserverless.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListTagsForResourceInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListTagsForResourceInput, ...func(*opensearchserverless.Options)) *opensearchserverless.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.ListTagsForResourceInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVpcEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVpcEndpoints(ctx context.Context, params *opensearchserverless.ListVpcEndpointsInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.ListVpcEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVpcEndpoints")
	}

	var r0 *opensearchserverless.ListVpcEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListVpcEndpointsInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.ListVpcEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.ListVpcEndpointsInput, ...func(*opensearchserverless.Options)) *opensearchserverless.ListVpcEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.ListVpcEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.ListVpcEndpointsInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() opensearchserverless.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 opensearchserverless.Options
	if rf, ok := ret.Get(0).(func() opensearchserverless.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(opensearchserverless.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *opensearchserverless.TagResourceInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *opensearchserverless.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.TagResourceInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.TagResourceInput, ...func(*opensearchserverless.Options)) *opensearchserverless.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.TagResourceInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *opensearchserverless.UntagResourceInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *opensearchserverless.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UntagResourceInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UntagResourceInput, ...func(*opensearchserverless.Options)) *opensearchserverless.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.UntagResourceInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccessPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccessPolicy(ctx context.Context, params *opensearchserverless.UpdateAccessPolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateAccessPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessPolicy")
	}

	var r0 *opensearchserverless.UpdateAccessPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateAccessPolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateAccessPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateAccessPolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.UpdateAccessPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.UpdateAccessPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.UpdateAccessPolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccountSettings(ctx context.Context, params *opensearchserverless.UpdateAccountSettingsInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountSettings")
	}

	var r0 *opensearchserverless.UpdateAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateAccountSettingsInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateAccountSettingsInput, ...func(*opensearchserverless.Options)) *opensearchserverless.UpdateAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.UpdateAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.UpdateAccountSettingsInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCollection(ctx context.Context, params *opensearchserverless.UpdateCollectionInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCollection")
	}

	var r0 *opensearchserverless.UpdateCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateCollectionInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateCollectionInput, ...func(*opensearchserverless.Options)) *opensearchserverless.UpdateCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.UpdateCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.UpdateCollectionInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLifecyclePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLifecyclePolicy(ctx context.Context, params *opensearchserverless.UpdateLifecyclePolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateLifecyclePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLifecyclePolicy")
	}

	var r0 *opensearchserverless.UpdateLifecyclePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateLifecyclePolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateLifecyclePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateLifecyclePolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.UpdateLifecyclePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.UpdateLifecyclePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.UpdateLifecyclePolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSecurityConfig(ctx context.Context, params *opensearchserverless.UpdateSecurityConfigInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateSecurityConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecurityConfig")
	}

	var r0 *opensearchserverless.UpdateSecurityConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateSecurityConfigInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateSecurityConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateSecurityConfigInput, ...func(*opensearchserverless.Options)) *opensearchserverless.UpdateSecurityConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.UpdateSecurityConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.UpdateSecurityConfigInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSecurityPolicy(ctx context.Context, params *opensearchserverless.UpdateSecurityPolicyInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateSecurityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecurityPolicy")
	}

	var r0 *opensearchserverless.UpdateSecurityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateSecurityPolicyInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateSecurityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateSecurityPolicyInput, ...func(*opensearchserverless.Options)) *opensearchserverless.UpdateSecurityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.UpdateSecurityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.UpdateSecurityPolicyInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVpcEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVpcEndpoint(ctx context.Context, params *opensearchserverless.UpdateVpcEndpointInput, optFns ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateVpcEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVpcEndpoint")
	}

	var r0 *opensearchserverless.UpdateVpcEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateVpcEndpointInput, ...func(*opensearchserverless.Options)) (*opensearchserverless.UpdateVpcEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opensearchserverless.UpdateVpcEndpointInput, ...func(*opensearchserverless.Options)) *opensearchserverless.UpdateVpcEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opensearchserverless.UpdateVpcEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opensearchserverless.UpdateVpcEndpointInput, ...func(*opensearchserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
