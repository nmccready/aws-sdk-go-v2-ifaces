// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	neptunedata "github.com/aws/aws-sdk-go-v2/service/neptunedata"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelGremlinQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelGremlinQuery(ctx context.Context, params *neptunedata.CancelGremlinQueryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.CancelGremlinQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelGremlinQuery")
	}

	var r0 *neptunedata.CancelGremlinQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelGremlinQueryInput, ...func(*neptunedata.Options)) (*neptunedata.CancelGremlinQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelGremlinQueryInput, ...func(*neptunedata.Options)) *neptunedata.CancelGremlinQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.CancelGremlinQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.CancelGremlinQueryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelLoaderJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelLoaderJob(ctx context.Context, params *neptunedata.CancelLoaderJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.CancelLoaderJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelLoaderJob")
	}

	var r0 *neptunedata.CancelLoaderJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelLoaderJobInput, ...func(*neptunedata.Options)) (*neptunedata.CancelLoaderJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelLoaderJobInput, ...func(*neptunedata.Options)) *neptunedata.CancelLoaderJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.CancelLoaderJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.CancelLoaderJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelMLDataProcessingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelMLDataProcessingJob(ctx context.Context, params *neptunedata.CancelMLDataProcessingJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.CancelMLDataProcessingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelMLDataProcessingJob")
	}

	var r0 *neptunedata.CancelMLDataProcessingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelMLDataProcessingJobInput, ...func(*neptunedata.Options)) (*neptunedata.CancelMLDataProcessingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelMLDataProcessingJobInput, ...func(*neptunedata.Options)) *neptunedata.CancelMLDataProcessingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.CancelMLDataProcessingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.CancelMLDataProcessingJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelMLModelTrainingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelMLModelTrainingJob(ctx context.Context, params *neptunedata.CancelMLModelTrainingJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.CancelMLModelTrainingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelMLModelTrainingJob")
	}

	var r0 *neptunedata.CancelMLModelTrainingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelMLModelTrainingJobInput, ...func(*neptunedata.Options)) (*neptunedata.CancelMLModelTrainingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelMLModelTrainingJobInput, ...func(*neptunedata.Options)) *neptunedata.CancelMLModelTrainingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.CancelMLModelTrainingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.CancelMLModelTrainingJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelMLModelTransformJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelMLModelTransformJob(ctx context.Context, params *neptunedata.CancelMLModelTransformJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.CancelMLModelTransformJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelMLModelTransformJob")
	}

	var r0 *neptunedata.CancelMLModelTransformJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelMLModelTransformJobInput, ...func(*neptunedata.Options)) (*neptunedata.CancelMLModelTransformJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelMLModelTransformJobInput, ...func(*neptunedata.Options)) *neptunedata.CancelMLModelTransformJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.CancelMLModelTransformJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.CancelMLModelTransformJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelOpenCypherQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelOpenCypherQuery(ctx context.Context, params *neptunedata.CancelOpenCypherQueryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.CancelOpenCypherQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelOpenCypherQuery")
	}

	var r0 *neptunedata.CancelOpenCypherQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelOpenCypherQueryInput, ...func(*neptunedata.Options)) (*neptunedata.CancelOpenCypherQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CancelOpenCypherQueryInput, ...func(*neptunedata.Options)) *neptunedata.CancelOpenCypherQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.CancelOpenCypherQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.CancelOpenCypherQueryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMLEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMLEndpoint(ctx context.Context, params *neptunedata.CreateMLEndpointInput, optFns ...func(*neptunedata.Options)) (*neptunedata.CreateMLEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMLEndpoint")
	}

	var r0 *neptunedata.CreateMLEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CreateMLEndpointInput, ...func(*neptunedata.Options)) (*neptunedata.CreateMLEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.CreateMLEndpointInput, ...func(*neptunedata.Options)) *neptunedata.CreateMLEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.CreateMLEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.CreateMLEndpointInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMLEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMLEndpoint(ctx context.Context, params *neptunedata.DeleteMLEndpointInput, optFns ...func(*neptunedata.Options)) (*neptunedata.DeleteMLEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMLEndpoint")
	}

	var r0 *neptunedata.DeleteMLEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.DeleteMLEndpointInput, ...func(*neptunedata.Options)) (*neptunedata.DeleteMLEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.DeleteMLEndpointInput, ...func(*neptunedata.Options)) *neptunedata.DeleteMLEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.DeleteMLEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.DeleteMLEndpointInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePropertygraphStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePropertygraphStatistics(ctx context.Context, params *neptunedata.DeletePropertygraphStatisticsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.DeletePropertygraphStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePropertygraphStatistics")
	}

	var r0 *neptunedata.DeletePropertygraphStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.DeletePropertygraphStatisticsInput, ...func(*neptunedata.Options)) (*neptunedata.DeletePropertygraphStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.DeletePropertygraphStatisticsInput, ...func(*neptunedata.Options)) *neptunedata.DeletePropertygraphStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.DeletePropertygraphStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.DeletePropertygraphStatisticsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSparqlStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSparqlStatistics(ctx context.Context, params *neptunedata.DeleteSparqlStatisticsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.DeleteSparqlStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSparqlStatistics")
	}

	var r0 *neptunedata.DeleteSparqlStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.DeleteSparqlStatisticsInput, ...func(*neptunedata.Options)) (*neptunedata.DeleteSparqlStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.DeleteSparqlStatisticsInput, ...func(*neptunedata.Options)) *neptunedata.DeleteSparqlStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.DeleteSparqlStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.DeleteSparqlStatisticsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteFastReset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteFastReset(ctx context.Context, params *neptunedata.ExecuteFastResetInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ExecuteFastResetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteFastReset")
	}

	var r0 *neptunedata.ExecuteFastResetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteFastResetInput, ...func(*neptunedata.Options)) (*neptunedata.ExecuteFastResetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteFastResetInput, ...func(*neptunedata.Options)) *neptunedata.ExecuteFastResetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ExecuteFastResetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ExecuteFastResetInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteGremlinExplainQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteGremlinExplainQuery(ctx context.Context, params *neptunedata.ExecuteGremlinExplainQueryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ExecuteGremlinExplainQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteGremlinExplainQuery")
	}

	var r0 *neptunedata.ExecuteGremlinExplainQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteGremlinExplainQueryInput, ...func(*neptunedata.Options)) (*neptunedata.ExecuteGremlinExplainQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteGremlinExplainQueryInput, ...func(*neptunedata.Options)) *neptunedata.ExecuteGremlinExplainQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ExecuteGremlinExplainQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ExecuteGremlinExplainQueryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteGremlinProfileQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteGremlinProfileQuery(ctx context.Context, params *neptunedata.ExecuteGremlinProfileQueryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ExecuteGremlinProfileQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteGremlinProfileQuery")
	}

	var r0 *neptunedata.ExecuteGremlinProfileQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteGremlinProfileQueryInput, ...func(*neptunedata.Options)) (*neptunedata.ExecuteGremlinProfileQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteGremlinProfileQueryInput, ...func(*neptunedata.Options)) *neptunedata.ExecuteGremlinProfileQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ExecuteGremlinProfileQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ExecuteGremlinProfileQueryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteGremlinQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteGremlinQuery(ctx context.Context, params *neptunedata.ExecuteGremlinQueryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ExecuteGremlinQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteGremlinQuery")
	}

	var r0 *neptunedata.ExecuteGremlinQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteGremlinQueryInput, ...func(*neptunedata.Options)) (*neptunedata.ExecuteGremlinQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteGremlinQueryInput, ...func(*neptunedata.Options)) *neptunedata.ExecuteGremlinQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ExecuteGremlinQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ExecuteGremlinQueryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteOpenCypherExplainQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteOpenCypherExplainQuery(ctx context.Context, params *neptunedata.ExecuteOpenCypherExplainQueryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ExecuteOpenCypherExplainQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteOpenCypherExplainQuery")
	}

	var r0 *neptunedata.ExecuteOpenCypherExplainQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteOpenCypherExplainQueryInput, ...func(*neptunedata.Options)) (*neptunedata.ExecuteOpenCypherExplainQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteOpenCypherExplainQueryInput, ...func(*neptunedata.Options)) *neptunedata.ExecuteOpenCypherExplainQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ExecuteOpenCypherExplainQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ExecuteOpenCypherExplainQueryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteOpenCypherQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteOpenCypherQuery(ctx context.Context, params *neptunedata.ExecuteOpenCypherQueryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ExecuteOpenCypherQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteOpenCypherQuery")
	}

	var r0 *neptunedata.ExecuteOpenCypherQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteOpenCypherQueryInput, ...func(*neptunedata.Options)) (*neptunedata.ExecuteOpenCypherQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ExecuteOpenCypherQueryInput, ...func(*neptunedata.Options)) *neptunedata.ExecuteOpenCypherQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ExecuteOpenCypherQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ExecuteOpenCypherQueryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEngineStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEngineStatus(ctx context.Context, params *neptunedata.GetEngineStatusInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetEngineStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEngineStatus")
	}

	var r0 *neptunedata.GetEngineStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetEngineStatusInput, ...func(*neptunedata.Options)) (*neptunedata.GetEngineStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetEngineStatusInput, ...func(*neptunedata.Options)) *neptunedata.GetEngineStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetEngineStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetEngineStatusInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGremlinQueryStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGremlinQueryStatus(ctx context.Context, params *neptunedata.GetGremlinQueryStatusInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetGremlinQueryStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGremlinQueryStatus")
	}

	var r0 *neptunedata.GetGremlinQueryStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetGremlinQueryStatusInput, ...func(*neptunedata.Options)) (*neptunedata.GetGremlinQueryStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetGremlinQueryStatusInput, ...func(*neptunedata.Options)) *neptunedata.GetGremlinQueryStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetGremlinQueryStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetGremlinQueryStatusInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoaderJobStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoaderJobStatus(ctx context.Context, params *neptunedata.GetLoaderJobStatusInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetLoaderJobStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoaderJobStatus")
	}

	var r0 *neptunedata.GetLoaderJobStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetLoaderJobStatusInput, ...func(*neptunedata.Options)) (*neptunedata.GetLoaderJobStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetLoaderJobStatusInput, ...func(*neptunedata.Options)) *neptunedata.GetLoaderJobStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetLoaderJobStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetLoaderJobStatusInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMLDataProcessingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMLDataProcessingJob(ctx context.Context, params *neptunedata.GetMLDataProcessingJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetMLDataProcessingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMLDataProcessingJob")
	}

	var r0 *neptunedata.GetMLDataProcessingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetMLDataProcessingJobInput, ...func(*neptunedata.Options)) (*neptunedata.GetMLDataProcessingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetMLDataProcessingJobInput, ...func(*neptunedata.Options)) *neptunedata.GetMLDataProcessingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetMLDataProcessingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetMLDataProcessingJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMLEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMLEndpoint(ctx context.Context, params *neptunedata.GetMLEndpointInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetMLEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMLEndpoint")
	}

	var r0 *neptunedata.GetMLEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetMLEndpointInput, ...func(*neptunedata.Options)) (*neptunedata.GetMLEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetMLEndpointInput, ...func(*neptunedata.Options)) *neptunedata.GetMLEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetMLEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetMLEndpointInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMLModelTrainingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMLModelTrainingJob(ctx context.Context, params *neptunedata.GetMLModelTrainingJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetMLModelTrainingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMLModelTrainingJob")
	}

	var r0 *neptunedata.GetMLModelTrainingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetMLModelTrainingJobInput, ...func(*neptunedata.Options)) (*neptunedata.GetMLModelTrainingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetMLModelTrainingJobInput, ...func(*neptunedata.Options)) *neptunedata.GetMLModelTrainingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetMLModelTrainingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetMLModelTrainingJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMLModelTransformJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMLModelTransformJob(ctx context.Context, params *neptunedata.GetMLModelTransformJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetMLModelTransformJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMLModelTransformJob")
	}

	var r0 *neptunedata.GetMLModelTransformJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetMLModelTransformJobInput, ...func(*neptunedata.Options)) (*neptunedata.GetMLModelTransformJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetMLModelTransformJobInput, ...func(*neptunedata.Options)) *neptunedata.GetMLModelTransformJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetMLModelTransformJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetMLModelTransformJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpenCypherQueryStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOpenCypherQueryStatus(ctx context.Context, params *neptunedata.GetOpenCypherQueryStatusInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetOpenCypherQueryStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOpenCypherQueryStatus")
	}

	var r0 *neptunedata.GetOpenCypherQueryStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetOpenCypherQueryStatusInput, ...func(*neptunedata.Options)) (*neptunedata.GetOpenCypherQueryStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetOpenCypherQueryStatusInput, ...func(*neptunedata.Options)) *neptunedata.GetOpenCypherQueryStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetOpenCypherQueryStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetOpenCypherQueryStatusInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertygraphStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPropertygraphStatistics(ctx context.Context, params *neptunedata.GetPropertygraphStatisticsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetPropertygraphStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertygraphStatistics")
	}

	var r0 *neptunedata.GetPropertygraphStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetPropertygraphStatisticsInput, ...func(*neptunedata.Options)) (*neptunedata.GetPropertygraphStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetPropertygraphStatisticsInput, ...func(*neptunedata.Options)) *neptunedata.GetPropertygraphStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetPropertygraphStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetPropertygraphStatisticsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertygraphStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPropertygraphStream(ctx context.Context, params *neptunedata.GetPropertygraphStreamInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetPropertygraphStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertygraphStream")
	}

	var r0 *neptunedata.GetPropertygraphStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetPropertygraphStreamInput, ...func(*neptunedata.Options)) (*neptunedata.GetPropertygraphStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetPropertygraphStreamInput, ...func(*neptunedata.Options)) *neptunedata.GetPropertygraphStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetPropertygraphStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetPropertygraphStreamInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPropertygraphSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPropertygraphSummary(ctx context.Context, params *neptunedata.GetPropertygraphSummaryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetPropertygraphSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPropertygraphSummary")
	}

	var r0 *neptunedata.GetPropertygraphSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetPropertygraphSummaryInput, ...func(*neptunedata.Options)) (*neptunedata.GetPropertygraphSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetPropertygraphSummaryInput, ...func(*neptunedata.Options)) *neptunedata.GetPropertygraphSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetPropertygraphSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetPropertygraphSummaryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRDFGraphSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRDFGraphSummary(ctx context.Context, params *neptunedata.GetRDFGraphSummaryInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetRDFGraphSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRDFGraphSummary")
	}

	var r0 *neptunedata.GetRDFGraphSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetRDFGraphSummaryInput, ...func(*neptunedata.Options)) (*neptunedata.GetRDFGraphSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetRDFGraphSummaryInput, ...func(*neptunedata.Options)) *neptunedata.GetRDFGraphSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetRDFGraphSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetRDFGraphSummaryInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSparqlStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSparqlStatistics(ctx context.Context, params *neptunedata.GetSparqlStatisticsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetSparqlStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSparqlStatistics")
	}

	var r0 *neptunedata.GetSparqlStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetSparqlStatisticsInput, ...func(*neptunedata.Options)) (*neptunedata.GetSparqlStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetSparqlStatisticsInput, ...func(*neptunedata.Options)) *neptunedata.GetSparqlStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetSparqlStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetSparqlStatisticsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSparqlStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSparqlStream(ctx context.Context, params *neptunedata.GetSparqlStreamInput, optFns ...func(*neptunedata.Options)) (*neptunedata.GetSparqlStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSparqlStream")
	}

	var r0 *neptunedata.GetSparqlStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetSparqlStreamInput, ...func(*neptunedata.Options)) (*neptunedata.GetSparqlStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.GetSparqlStreamInput, ...func(*neptunedata.Options)) *neptunedata.GetSparqlStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.GetSparqlStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.GetSparqlStreamInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGremlinQueries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGremlinQueries(ctx context.Context, params *neptunedata.ListGremlinQueriesInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ListGremlinQueriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGremlinQueries")
	}

	var r0 *neptunedata.ListGremlinQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListGremlinQueriesInput, ...func(*neptunedata.Options)) (*neptunedata.ListGremlinQueriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListGremlinQueriesInput, ...func(*neptunedata.Options)) *neptunedata.ListGremlinQueriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ListGremlinQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ListGremlinQueriesInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoaderJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLoaderJobs(ctx context.Context, params *neptunedata.ListLoaderJobsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ListLoaderJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLoaderJobs")
	}

	var r0 *neptunedata.ListLoaderJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListLoaderJobsInput, ...func(*neptunedata.Options)) (*neptunedata.ListLoaderJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListLoaderJobsInput, ...func(*neptunedata.Options)) *neptunedata.ListLoaderJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ListLoaderJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ListLoaderJobsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMLDataProcessingJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMLDataProcessingJobs(ctx context.Context, params *neptunedata.ListMLDataProcessingJobsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ListMLDataProcessingJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMLDataProcessingJobs")
	}

	var r0 *neptunedata.ListMLDataProcessingJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListMLDataProcessingJobsInput, ...func(*neptunedata.Options)) (*neptunedata.ListMLDataProcessingJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListMLDataProcessingJobsInput, ...func(*neptunedata.Options)) *neptunedata.ListMLDataProcessingJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ListMLDataProcessingJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ListMLDataProcessingJobsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMLEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMLEndpoints(ctx context.Context, params *neptunedata.ListMLEndpointsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ListMLEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMLEndpoints")
	}

	var r0 *neptunedata.ListMLEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListMLEndpointsInput, ...func(*neptunedata.Options)) (*neptunedata.ListMLEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListMLEndpointsInput, ...func(*neptunedata.Options)) *neptunedata.ListMLEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ListMLEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ListMLEndpointsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMLModelTrainingJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMLModelTrainingJobs(ctx context.Context, params *neptunedata.ListMLModelTrainingJobsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ListMLModelTrainingJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMLModelTrainingJobs")
	}

	var r0 *neptunedata.ListMLModelTrainingJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListMLModelTrainingJobsInput, ...func(*neptunedata.Options)) (*neptunedata.ListMLModelTrainingJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListMLModelTrainingJobsInput, ...func(*neptunedata.Options)) *neptunedata.ListMLModelTrainingJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ListMLModelTrainingJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ListMLModelTrainingJobsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMLModelTransformJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMLModelTransformJobs(ctx context.Context, params *neptunedata.ListMLModelTransformJobsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ListMLModelTransformJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMLModelTransformJobs")
	}

	var r0 *neptunedata.ListMLModelTransformJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListMLModelTransformJobsInput, ...func(*neptunedata.Options)) (*neptunedata.ListMLModelTransformJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListMLModelTransformJobsInput, ...func(*neptunedata.Options)) *neptunedata.ListMLModelTransformJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ListMLModelTransformJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ListMLModelTransformJobsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOpenCypherQueries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOpenCypherQueries(ctx context.Context, params *neptunedata.ListOpenCypherQueriesInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ListOpenCypherQueriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOpenCypherQueries")
	}

	var r0 *neptunedata.ListOpenCypherQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListOpenCypherQueriesInput, ...func(*neptunedata.Options)) (*neptunedata.ListOpenCypherQueriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ListOpenCypherQueriesInput, ...func(*neptunedata.Options)) *neptunedata.ListOpenCypherQueriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ListOpenCypherQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ListOpenCypherQueriesInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManagePropertygraphStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ManagePropertygraphStatistics(ctx context.Context, params *neptunedata.ManagePropertygraphStatisticsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ManagePropertygraphStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ManagePropertygraphStatistics")
	}

	var r0 *neptunedata.ManagePropertygraphStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ManagePropertygraphStatisticsInput, ...func(*neptunedata.Options)) (*neptunedata.ManagePropertygraphStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ManagePropertygraphStatisticsInput, ...func(*neptunedata.Options)) *neptunedata.ManagePropertygraphStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ManagePropertygraphStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ManagePropertygraphStatisticsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManageSparqlStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ManageSparqlStatistics(ctx context.Context, params *neptunedata.ManageSparqlStatisticsInput, optFns ...func(*neptunedata.Options)) (*neptunedata.ManageSparqlStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ManageSparqlStatistics")
	}

	var r0 *neptunedata.ManageSparqlStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ManageSparqlStatisticsInput, ...func(*neptunedata.Options)) (*neptunedata.ManageSparqlStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.ManageSparqlStatisticsInput, ...func(*neptunedata.Options)) *neptunedata.ManageSparqlStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.ManageSparqlStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.ManageSparqlStatisticsInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() neptunedata.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 neptunedata.Options
	if rf, ok := ret.Get(0).(func() neptunedata.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(neptunedata.Options)
	}

	return r0
}

// StartLoaderJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartLoaderJob(ctx context.Context, params *neptunedata.StartLoaderJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.StartLoaderJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartLoaderJob")
	}

	var r0 *neptunedata.StartLoaderJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.StartLoaderJobInput, ...func(*neptunedata.Options)) (*neptunedata.StartLoaderJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.StartLoaderJobInput, ...func(*neptunedata.Options)) *neptunedata.StartLoaderJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.StartLoaderJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.StartLoaderJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMLDataProcessingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMLDataProcessingJob(ctx context.Context, params *neptunedata.StartMLDataProcessingJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.StartMLDataProcessingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMLDataProcessingJob")
	}

	var r0 *neptunedata.StartMLDataProcessingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.StartMLDataProcessingJobInput, ...func(*neptunedata.Options)) (*neptunedata.StartMLDataProcessingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.StartMLDataProcessingJobInput, ...func(*neptunedata.Options)) *neptunedata.StartMLDataProcessingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.StartMLDataProcessingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.StartMLDataProcessingJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMLModelTrainingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMLModelTrainingJob(ctx context.Context, params *neptunedata.StartMLModelTrainingJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.StartMLModelTrainingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMLModelTrainingJob")
	}

	var r0 *neptunedata.StartMLModelTrainingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.StartMLModelTrainingJobInput, ...func(*neptunedata.Options)) (*neptunedata.StartMLModelTrainingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.StartMLModelTrainingJobInput, ...func(*neptunedata.Options)) *neptunedata.StartMLModelTrainingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.StartMLModelTrainingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.StartMLModelTrainingJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMLModelTransformJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMLModelTransformJob(ctx context.Context, params *neptunedata.StartMLModelTransformJobInput, optFns ...func(*neptunedata.Options)) (*neptunedata.StartMLModelTransformJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMLModelTransformJob")
	}

	var r0 *neptunedata.StartMLModelTransformJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.StartMLModelTransformJobInput, ...func(*neptunedata.Options)) (*neptunedata.StartMLModelTransformJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptunedata.StartMLModelTransformJobInput, ...func(*neptunedata.Options)) *neptunedata.StartMLModelTransformJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptunedata.StartMLModelTransformJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptunedata.StartMLModelTransformJobInput, ...func(*neptunedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
