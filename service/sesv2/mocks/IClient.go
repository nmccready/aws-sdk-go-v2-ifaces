// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	sesv2 "github.com/aws/aws-sdk-go-v2/service/sesv2"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetMetricData(ctx context.Context, params *sesv2.BatchGetMetricDataInput, optFns ...func(*sesv2.Options)) (*sesv2.BatchGetMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetMetricData")
	}

	var r0 *sesv2.BatchGetMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.BatchGetMetricDataInput, ...func(*sesv2.Options)) (*sesv2.BatchGetMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.BatchGetMetricDataInput, ...func(*sesv2.Options)) *sesv2.BatchGetMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.BatchGetMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.BatchGetMetricDataInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelExportJob(ctx context.Context, params *sesv2.CancelExportJobInput, optFns ...func(*sesv2.Options)) (*sesv2.CancelExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelExportJob")
	}

	var r0 *sesv2.CancelExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CancelExportJobInput, ...func(*sesv2.Options)) (*sesv2.CancelExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CancelExportJobInput, ...func(*sesv2.Options)) *sesv2.CancelExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CancelExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CancelExportJobInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSet(ctx context.Context, params *sesv2.CreateConfigurationSetInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSet")
	}

	var r0 *sesv2.CreateConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateConfigurationSetInput, ...func(*sesv2.Options)) (*sesv2.CreateConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateConfigurationSetInput, ...func(*sesv2.Options)) *sesv2.CreateConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateConfigurationSetInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSetEventDestination(ctx context.Context, params *sesv2.CreateConfigurationSetEventDestinationInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSetEventDestination")
	}

	var r0 *sesv2.CreateConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) (*sesv2.CreateConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) *sesv2.CreateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContact(ctx context.Context, params *sesv2.CreateContactInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContact")
	}

	var r0 *sesv2.CreateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateContactInput, ...func(*sesv2.Options)) (*sesv2.CreateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateContactInput, ...func(*sesv2.Options)) *sesv2.CreateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateContactInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContactList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContactList(ctx context.Context, params *sesv2.CreateContactListInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateContactListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContactList")
	}

	var r0 *sesv2.CreateContactListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateContactListInput, ...func(*sesv2.Options)) (*sesv2.CreateContactListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateContactListInput, ...func(*sesv2.Options)) *sesv2.CreateContactListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateContactListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateContactListInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomVerificationEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomVerificationEmailTemplate(ctx context.Context, params *sesv2.CreateCustomVerificationEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomVerificationEmailTemplate")
	}

	var r0 *sesv2.CreateCustomVerificationEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.CreateCustomVerificationEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.CreateCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateCustomVerificationEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDedicatedIpPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDedicatedIpPool(ctx context.Context, params *sesv2.CreateDedicatedIpPoolInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateDedicatedIpPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDedicatedIpPool")
	}

	var r0 *sesv2.CreateDedicatedIpPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateDedicatedIpPoolInput, ...func(*sesv2.Options)) (*sesv2.CreateDedicatedIpPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateDedicatedIpPoolInput, ...func(*sesv2.Options)) *sesv2.CreateDedicatedIpPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateDedicatedIpPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateDedicatedIpPoolInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeliverabilityTestReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeliverabilityTestReport(ctx context.Context, params *sesv2.CreateDeliverabilityTestReportInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateDeliverabilityTestReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeliverabilityTestReport")
	}

	var r0 *sesv2.CreateDeliverabilityTestReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateDeliverabilityTestReportInput, ...func(*sesv2.Options)) (*sesv2.CreateDeliverabilityTestReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateDeliverabilityTestReportInput, ...func(*sesv2.Options)) *sesv2.CreateDeliverabilityTestReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateDeliverabilityTestReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateDeliverabilityTestReportInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEmailIdentity(ctx context.Context, params *sesv2.CreateEmailIdentityInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateEmailIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailIdentity")
	}

	var r0 *sesv2.CreateEmailIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailIdentityInput, ...func(*sesv2.Options)) (*sesv2.CreateEmailIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailIdentityInput, ...func(*sesv2.Options)) *sesv2.CreateEmailIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateEmailIdentityInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailIdentityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEmailIdentityPolicy(ctx context.Context, params *sesv2.CreateEmailIdentityPolicyInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateEmailIdentityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailIdentityPolicy")
	}

	var r0 *sesv2.CreateEmailIdentityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailIdentityPolicyInput, ...func(*sesv2.Options)) (*sesv2.CreateEmailIdentityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailIdentityPolicyInput, ...func(*sesv2.Options)) *sesv2.CreateEmailIdentityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailIdentityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateEmailIdentityPolicyInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEmailTemplate(ctx context.Context, params *sesv2.CreateEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailTemplate")
	}

	var r0 *sesv2.CreateEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.CreateEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.CreateEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateExportJob(ctx context.Context, params *sesv2.CreateExportJobInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExportJob")
	}

	var r0 *sesv2.CreateExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateExportJobInput, ...func(*sesv2.Options)) (*sesv2.CreateExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateExportJobInput, ...func(*sesv2.Options)) *sesv2.CreateExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateExportJobInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImportJob(ctx context.Context, params *sesv2.CreateImportJobInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImportJob")
	}

	var r0 *sesv2.CreateImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateImportJobInput, ...func(*sesv2.Options)) (*sesv2.CreateImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateImportJobInput, ...func(*sesv2.Options)) *sesv2.CreateImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateImportJobInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiRegionEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMultiRegionEndpoint(ctx context.Context, params *sesv2.CreateMultiRegionEndpointInput, optFns ...func(*sesv2.Options)) (*sesv2.CreateMultiRegionEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiRegionEndpoint")
	}

	var r0 *sesv2.CreateMultiRegionEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateMultiRegionEndpointInput, ...func(*sesv2.Options)) (*sesv2.CreateMultiRegionEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.CreateMultiRegionEndpointInput, ...func(*sesv2.Options)) *sesv2.CreateMultiRegionEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.CreateMultiRegionEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.CreateMultiRegionEndpointInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSet(ctx context.Context, params *sesv2.DeleteConfigurationSetInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSet")
	}

	var r0 *sesv2.DeleteConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteConfigurationSetInput, ...func(*sesv2.Options)) (*sesv2.DeleteConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteConfigurationSetInput, ...func(*sesv2.Options)) *sesv2.DeleteConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteConfigurationSetInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSetEventDestination(ctx context.Context, params *sesv2.DeleteConfigurationSetEventDestinationInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSetEventDestination")
	}

	var r0 *sesv2.DeleteConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) (*sesv2.DeleteConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) *sesv2.DeleteConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContact(ctx context.Context, params *sesv2.DeleteContactInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContact")
	}

	var r0 *sesv2.DeleteContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteContactInput, ...func(*sesv2.Options)) (*sesv2.DeleteContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteContactInput, ...func(*sesv2.Options)) *sesv2.DeleteContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteContactInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContactList(ctx context.Context, params *sesv2.DeleteContactListInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteContactListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContactList")
	}

	var r0 *sesv2.DeleteContactListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteContactListInput, ...func(*sesv2.Options)) (*sesv2.DeleteContactListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteContactListInput, ...func(*sesv2.Options)) *sesv2.DeleteContactListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteContactListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteContactListInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomVerificationEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomVerificationEmailTemplate(ctx context.Context, params *sesv2.DeleteCustomVerificationEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomVerificationEmailTemplate")
	}

	var r0 *sesv2.DeleteCustomVerificationEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.DeleteCustomVerificationEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.DeleteCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteCustomVerificationEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDedicatedIpPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDedicatedIpPool(ctx context.Context, params *sesv2.DeleteDedicatedIpPoolInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteDedicatedIpPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDedicatedIpPool")
	}

	var r0 *sesv2.DeleteDedicatedIpPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteDedicatedIpPoolInput, ...func(*sesv2.Options)) (*sesv2.DeleteDedicatedIpPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteDedicatedIpPoolInput, ...func(*sesv2.Options)) *sesv2.DeleteDedicatedIpPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteDedicatedIpPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteDedicatedIpPoolInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEmailIdentity(ctx context.Context, params *sesv2.DeleteEmailIdentityInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteEmailIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmailIdentity")
	}

	var r0 *sesv2.DeleteEmailIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailIdentityInput, ...func(*sesv2.Options)) (*sesv2.DeleteEmailIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailIdentityInput, ...func(*sesv2.Options)) *sesv2.DeleteEmailIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteEmailIdentityInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailIdentityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEmailIdentityPolicy(ctx context.Context, params *sesv2.DeleteEmailIdentityPolicyInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteEmailIdentityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmailIdentityPolicy")
	}

	var r0 *sesv2.DeleteEmailIdentityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailIdentityPolicyInput, ...func(*sesv2.Options)) (*sesv2.DeleteEmailIdentityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailIdentityPolicyInput, ...func(*sesv2.Options)) *sesv2.DeleteEmailIdentityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailIdentityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteEmailIdentityPolicyInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEmailTemplate(ctx context.Context, params *sesv2.DeleteEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmailTemplate")
	}

	var r0 *sesv2.DeleteEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.DeleteEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.DeleteEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMultiRegionEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMultiRegionEndpoint(ctx context.Context, params *sesv2.DeleteMultiRegionEndpointInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteMultiRegionEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMultiRegionEndpoint")
	}

	var r0 *sesv2.DeleteMultiRegionEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteMultiRegionEndpointInput, ...func(*sesv2.Options)) (*sesv2.DeleteMultiRegionEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteMultiRegionEndpointInput, ...func(*sesv2.Options)) *sesv2.DeleteMultiRegionEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteMultiRegionEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteMultiRegionEndpointInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSuppressedDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSuppressedDestination(ctx context.Context, params *sesv2.DeleteSuppressedDestinationInput, optFns ...func(*sesv2.Options)) (*sesv2.DeleteSuppressedDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSuppressedDestination")
	}

	var r0 *sesv2.DeleteSuppressedDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteSuppressedDestinationInput, ...func(*sesv2.Options)) (*sesv2.DeleteSuppressedDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.DeleteSuppressedDestinationInput, ...func(*sesv2.Options)) *sesv2.DeleteSuppressedDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.DeleteSuppressedDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.DeleteSuppressedDestinationInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccount(ctx context.Context, params *sesv2.GetAccountInput, optFns ...func(*sesv2.Options)) (*sesv2.GetAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *sesv2.GetAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetAccountInput, ...func(*sesv2.Options)) (*sesv2.GetAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetAccountInput, ...func(*sesv2.Options)) *sesv2.GetAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetAccountInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlacklistReports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBlacklistReports(ctx context.Context, params *sesv2.GetBlacklistReportsInput, optFns ...func(*sesv2.Options)) (*sesv2.GetBlacklistReportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlacklistReports")
	}

	var r0 *sesv2.GetBlacklistReportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetBlacklistReportsInput, ...func(*sesv2.Options)) (*sesv2.GetBlacklistReportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetBlacklistReportsInput, ...func(*sesv2.Options)) *sesv2.GetBlacklistReportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetBlacklistReportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetBlacklistReportsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationSet(ctx context.Context, params *sesv2.GetConfigurationSetInput, optFns ...func(*sesv2.Options)) (*sesv2.GetConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationSet")
	}

	var r0 *sesv2.GetConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetConfigurationSetInput, ...func(*sesv2.Options)) (*sesv2.GetConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetConfigurationSetInput, ...func(*sesv2.Options)) *sesv2.GetConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetConfigurationSetInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationSetEventDestinations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationSetEventDestinations(ctx context.Context, params *sesv2.GetConfigurationSetEventDestinationsInput, optFns ...func(*sesv2.Options)) (*sesv2.GetConfigurationSetEventDestinationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationSetEventDestinations")
	}

	var r0 *sesv2.GetConfigurationSetEventDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetConfigurationSetEventDestinationsInput, ...func(*sesv2.Options)) (*sesv2.GetConfigurationSetEventDestinationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetConfigurationSetEventDestinationsInput, ...func(*sesv2.Options)) *sesv2.GetConfigurationSetEventDestinationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetConfigurationSetEventDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetConfigurationSetEventDestinationsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContact(ctx context.Context, params *sesv2.GetContactInput, optFns ...func(*sesv2.Options)) (*sesv2.GetContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContact")
	}

	var r0 *sesv2.GetContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetContactInput, ...func(*sesv2.Options)) (*sesv2.GetContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetContactInput, ...func(*sesv2.Options)) *sesv2.GetContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetContactInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContactList(ctx context.Context, params *sesv2.GetContactListInput, optFns ...func(*sesv2.Options)) (*sesv2.GetContactListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactList")
	}

	var r0 *sesv2.GetContactListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetContactListInput, ...func(*sesv2.Options)) (*sesv2.GetContactListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetContactListInput, ...func(*sesv2.Options)) *sesv2.GetContactListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetContactListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetContactListInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomVerificationEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCustomVerificationEmailTemplate(ctx context.Context, params *sesv2.GetCustomVerificationEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.GetCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomVerificationEmailTemplate")
	}

	var r0 *sesv2.GetCustomVerificationEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.GetCustomVerificationEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.GetCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetCustomVerificationEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDedicatedIp(ctx context.Context, params *sesv2.GetDedicatedIpInput, optFns ...func(*sesv2.Options)) (*sesv2.GetDedicatedIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDedicatedIp")
	}

	var r0 *sesv2.GetDedicatedIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpInput, ...func(*sesv2.Options)) (*sesv2.GetDedicatedIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpInput, ...func(*sesv2.Options)) *sesv2.GetDedicatedIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDedicatedIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDedicatedIpInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIpPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDedicatedIpPool(ctx context.Context, params *sesv2.GetDedicatedIpPoolInput, optFns ...func(*sesv2.Options)) (*sesv2.GetDedicatedIpPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDedicatedIpPool")
	}

	var r0 *sesv2.GetDedicatedIpPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpPoolInput, ...func(*sesv2.Options)) (*sesv2.GetDedicatedIpPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpPoolInput, ...func(*sesv2.Options)) *sesv2.GetDedicatedIpPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDedicatedIpPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDedicatedIpPoolInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDedicatedIps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDedicatedIps(ctx context.Context, params *sesv2.GetDedicatedIpsInput, optFns ...func(*sesv2.Options)) (*sesv2.GetDedicatedIpsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDedicatedIps")
	}

	var r0 *sesv2.GetDedicatedIpsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpsInput, ...func(*sesv2.Options)) (*sesv2.GetDedicatedIpsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDedicatedIpsInput, ...func(*sesv2.Options)) *sesv2.GetDedicatedIpsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDedicatedIpsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDedicatedIpsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverabilityDashboardOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeliverabilityDashboardOptions(ctx context.Context, params *sesv2.GetDeliverabilityDashboardOptionsInput, optFns ...func(*sesv2.Options)) (*sesv2.GetDeliverabilityDashboardOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeliverabilityDashboardOptions")
	}

	var r0 *sesv2.GetDeliverabilityDashboardOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDeliverabilityDashboardOptionsInput, ...func(*sesv2.Options)) (*sesv2.GetDeliverabilityDashboardOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDeliverabilityDashboardOptionsInput, ...func(*sesv2.Options)) *sesv2.GetDeliverabilityDashboardOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDeliverabilityDashboardOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDeliverabilityDashboardOptionsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeliverabilityTestReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeliverabilityTestReport(ctx context.Context, params *sesv2.GetDeliverabilityTestReportInput, optFns ...func(*sesv2.Options)) (*sesv2.GetDeliverabilityTestReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeliverabilityTestReport")
	}

	var r0 *sesv2.GetDeliverabilityTestReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDeliverabilityTestReportInput, ...func(*sesv2.Options)) (*sesv2.GetDeliverabilityTestReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDeliverabilityTestReportInput, ...func(*sesv2.Options)) *sesv2.GetDeliverabilityTestReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDeliverabilityTestReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDeliverabilityTestReportInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainDeliverabilityCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainDeliverabilityCampaign(ctx context.Context, params *sesv2.GetDomainDeliverabilityCampaignInput, optFns ...func(*sesv2.Options)) (*sesv2.GetDomainDeliverabilityCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainDeliverabilityCampaign")
	}

	var r0 *sesv2.GetDomainDeliverabilityCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDomainDeliverabilityCampaignInput, ...func(*sesv2.Options)) (*sesv2.GetDomainDeliverabilityCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDomainDeliverabilityCampaignInput, ...func(*sesv2.Options)) *sesv2.GetDomainDeliverabilityCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDomainDeliverabilityCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDomainDeliverabilityCampaignInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainStatisticsReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainStatisticsReport(ctx context.Context, params *sesv2.GetDomainStatisticsReportInput, optFns ...func(*sesv2.Options)) (*sesv2.GetDomainStatisticsReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainStatisticsReport")
	}

	var r0 *sesv2.GetDomainStatisticsReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDomainStatisticsReportInput, ...func(*sesv2.Options)) (*sesv2.GetDomainStatisticsReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetDomainStatisticsReportInput, ...func(*sesv2.Options)) *sesv2.GetDomainStatisticsReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetDomainStatisticsReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetDomainStatisticsReportInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEmailIdentity(ctx context.Context, params *sesv2.GetEmailIdentityInput, optFns ...func(*sesv2.Options)) (*sesv2.GetEmailIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailIdentity")
	}

	var r0 *sesv2.GetEmailIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailIdentityInput, ...func(*sesv2.Options)) (*sesv2.GetEmailIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailIdentityInput, ...func(*sesv2.Options)) *sesv2.GetEmailIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetEmailIdentityInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailIdentityPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEmailIdentityPolicies(ctx context.Context, params *sesv2.GetEmailIdentityPoliciesInput, optFns ...func(*sesv2.Options)) (*sesv2.GetEmailIdentityPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailIdentityPolicies")
	}

	var r0 *sesv2.GetEmailIdentityPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailIdentityPoliciesInput, ...func(*sesv2.Options)) (*sesv2.GetEmailIdentityPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailIdentityPoliciesInput, ...func(*sesv2.Options)) *sesv2.GetEmailIdentityPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailIdentityPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetEmailIdentityPoliciesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEmailTemplate(ctx context.Context, params *sesv2.GetEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.GetEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailTemplate")
	}

	var r0 *sesv2.GetEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.GetEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.GetEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExportJob(ctx context.Context, params *sesv2.GetExportJobInput, optFns ...func(*sesv2.Options)) (*sesv2.GetExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExportJob")
	}

	var r0 *sesv2.GetExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetExportJobInput, ...func(*sesv2.Options)) (*sesv2.GetExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetExportJobInput, ...func(*sesv2.Options)) *sesv2.GetExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetExportJobInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImportJob(ctx context.Context, params *sesv2.GetImportJobInput, optFns ...func(*sesv2.Options)) (*sesv2.GetImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImportJob")
	}

	var r0 *sesv2.GetImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetImportJobInput, ...func(*sesv2.Options)) (*sesv2.GetImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetImportJobInput, ...func(*sesv2.Options)) *sesv2.GetImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetImportJobInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageInsights provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMessageInsights(ctx context.Context, params *sesv2.GetMessageInsightsInput, optFns ...func(*sesv2.Options)) (*sesv2.GetMessageInsightsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMessageInsights")
	}

	var r0 *sesv2.GetMessageInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetMessageInsightsInput, ...func(*sesv2.Options)) (*sesv2.GetMessageInsightsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetMessageInsightsInput, ...func(*sesv2.Options)) *sesv2.GetMessageInsightsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetMessageInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetMessageInsightsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMultiRegionEndpoint(ctx context.Context, params *sesv2.GetMultiRegionEndpointInput, optFns ...func(*sesv2.Options)) (*sesv2.GetMultiRegionEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiRegionEndpoint")
	}

	var r0 *sesv2.GetMultiRegionEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetMultiRegionEndpointInput, ...func(*sesv2.Options)) (*sesv2.GetMultiRegionEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetMultiRegionEndpointInput, ...func(*sesv2.Options)) *sesv2.GetMultiRegionEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetMultiRegionEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetMultiRegionEndpointInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuppressedDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSuppressedDestination(ctx context.Context, params *sesv2.GetSuppressedDestinationInput, optFns ...func(*sesv2.Options)) (*sesv2.GetSuppressedDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSuppressedDestination")
	}

	var r0 *sesv2.GetSuppressedDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetSuppressedDestinationInput, ...func(*sesv2.Options)) (*sesv2.GetSuppressedDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.GetSuppressedDestinationInput, ...func(*sesv2.Options)) *sesv2.GetSuppressedDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.GetSuppressedDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.GetSuppressedDestinationInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationSets(ctx context.Context, params *sesv2.ListConfigurationSetsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListConfigurationSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationSets")
	}

	var r0 *sesv2.ListConfigurationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListConfigurationSetsInput, ...func(*sesv2.Options)) (*sesv2.ListConfigurationSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListConfigurationSetsInput, ...func(*sesv2.Options)) *sesv2.ListConfigurationSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListConfigurationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListConfigurationSetsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactLists provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContactLists(ctx context.Context, params *sesv2.ListContactListsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListContactListsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContactLists")
	}

	var r0 *sesv2.ListContactListsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListContactListsInput, ...func(*sesv2.Options)) (*sesv2.ListContactListsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListContactListsInput, ...func(*sesv2.Options)) *sesv2.ListContactListsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListContactListsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListContactListsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContacts(ctx context.Context, params *sesv2.ListContactsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListContactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContacts")
	}

	var r0 *sesv2.ListContactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListContactsInput, ...func(*sesv2.Options)) (*sesv2.ListContactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListContactsInput, ...func(*sesv2.Options)) *sesv2.ListContactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListContactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListContactsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomVerificationEmailTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomVerificationEmailTemplates(ctx context.Context, params *sesv2.ListCustomVerificationEmailTemplatesInput, optFns ...func(*sesv2.Options)) (*sesv2.ListCustomVerificationEmailTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomVerificationEmailTemplates")
	}

	var r0 *sesv2.ListCustomVerificationEmailTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListCustomVerificationEmailTemplatesInput, ...func(*sesv2.Options)) (*sesv2.ListCustomVerificationEmailTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListCustomVerificationEmailTemplatesInput, ...func(*sesv2.Options)) *sesv2.ListCustomVerificationEmailTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListCustomVerificationEmailTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListCustomVerificationEmailTemplatesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDedicatedIpPools provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDedicatedIpPools(ctx context.Context, params *sesv2.ListDedicatedIpPoolsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListDedicatedIpPoolsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDedicatedIpPools")
	}

	var r0 *sesv2.ListDedicatedIpPoolsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDedicatedIpPoolsInput, ...func(*sesv2.Options)) (*sesv2.ListDedicatedIpPoolsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDedicatedIpPoolsInput, ...func(*sesv2.Options)) *sesv2.ListDedicatedIpPoolsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDedicatedIpPoolsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListDedicatedIpPoolsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeliverabilityTestReports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeliverabilityTestReports(ctx context.Context, params *sesv2.ListDeliverabilityTestReportsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListDeliverabilityTestReportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeliverabilityTestReports")
	}

	var r0 *sesv2.ListDeliverabilityTestReportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDeliverabilityTestReportsInput, ...func(*sesv2.Options)) (*sesv2.ListDeliverabilityTestReportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDeliverabilityTestReportsInput, ...func(*sesv2.Options)) *sesv2.ListDeliverabilityTestReportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDeliverabilityTestReportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListDeliverabilityTestReportsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainDeliverabilityCampaigns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomainDeliverabilityCampaigns(ctx context.Context, params *sesv2.ListDomainDeliverabilityCampaignsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListDomainDeliverabilityCampaignsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainDeliverabilityCampaigns")
	}

	var r0 *sesv2.ListDomainDeliverabilityCampaignsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDomainDeliverabilityCampaignsInput, ...func(*sesv2.Options)) (*sesv2.ListDomainDeliverabilityCampaignsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListDomainDeliverabilityCampaignsInput, ...func(*sesv2.Options)) *sesv2.ListDomainDeliverabilityCampaignsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListDomainDeliverabilityCampaignsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListDomainDeliverabilityCampaignsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEmailIdentities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEmailIdentities(ctx context.Context, params *sesv2.ListEmailIdentitiesInput, optFns ...func(*sesv2.Options)) (*sesv2.ListEmailIdentitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEmailIdentities")
	}

	var r0 *sesv2.ListEmailIdentitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListEmailIdentitiesInput, ...func(*sesv2.Options)) (*sesv2.ListEmailIdentitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListEmailIdentitiesInput, ...func(*sesv2.Options)) *sesv2.ListEmailIdentitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListEmailIdentitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListEmailIdentitiesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEmailTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEmailTemplates(ctx context.Context, params *sesv2.ListEmailTemplatesInput, optFns ...func(*sesv2.Options)) (*sesv2.ListEmailTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEmailTemplates")
	}

	var r0 *sesv2.ListEmailTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListEmailTemplatesInput, ...func(*sesv2.Options)) (*sesv2.ListEmailTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListEmailTemplatesInput, ...func(*sesv2.Options)) *sesv2.ListEmailTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListEmailTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListEmailTemplatesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExportJobs(ctx context.Context, params *sesv2.ListExportJobsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExportJobs")
	}

	var r0 *sesv2.ListExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListExportJobsInput, ...func(*sesv2.Options)) (*sesv2.ListExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListExportJobsInput, ...func(*sesv2.Options)) *sesv2.ListExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListExportJobsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImportJobs(ctx context.Context, params *sesv2.ListImportJobsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImportJobs")
	}

	var r0 *sesv2.ListImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListImportJobsInput, ...func(*sesv2.Options)) (*sesv2.ListImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListImportJobsInput, ...func(*sesv2.Options)) *sesv2.ListImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListImportJobsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMultiRegionEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMultiRegionEndpoints(ctx context.Context, params *sesv2.ListMultiRegionEndpointsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListMultiRegionEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMultiRegionEndpoints")
	}

	var r0 *sesv2.ListMultiRegionEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListMultiRegionEndpointsInput, ...func(*sesv2.Options)) (*sesv2.ListMultiRegionEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListMultiRegionEndpointsInput, ...func(*sesv2.Options)) *sesv2.ListMultiRegionEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListMultiRegionEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListMultiRegionEndpointsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecommendations(ctx context.Context, params *sesv2.ListRecommendationsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecommendations")
	}

	var r0 *sesv2.ListRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListRecommendationsInput, ...func(*sesv2.Options)) (*sesv2.ListRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListRecommendationsInput, ...func(*sesv2.Options)) *sesv2.ListRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListRecommendationsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSuppressedDestinations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSuppressedDestinations(ctx context.Context, params *sesv2.ListSuppressedDestinationsInput, optFns ...func(*sesv2.Options)) (*sesv2.ListSuppressedDestinationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSuppressedDestinations")
	}

	var r0 *sesv2.ListSuppressedDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListSuppressedDestinationsInput, ...func(*sesv2.Options)) (*sesv2.ListSuppressedDestinationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListSuppressedDestinationsInput, ...func(*sesv2.Options)) *sesv2.ListSuppressedDestinationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListSuppressedDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListSuppressedDestinationsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *sesv2.ListTagsForResourceInput, optFns ...func(*sesv2.Options)) (*sesv2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *sesv2.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListTagsForResourceInput, ...func(*sesv2.Options)) (*sesv2.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.ListTagsForResourceInput, ...func(*sesv2.Options)) *sesv2.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.ListTagsForResourceInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() sesv2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 sesv2.Options
	if rf, ok := ret.Get(0).(func() sesv2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sesv2.Options)
	}

	return r0
}

// PutAccountDedicatedIpWarmupAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountDedicatedIpWarmupAttributes(ctx context.Context, params *sesv2.PutAccountDedicatedIpWarmupAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutAccountDedicatedIpWarmupAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountDedicatedIpWarmupAttributes")
	}

	var r0 *sesv2.PutAccountDedicatedIpWarmupAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountDedicatedIpWarmupAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutAccountDedicatedIpWarmupAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountDedicatedIpWarmupAttributesInput, ...func(*sesv2.Options)) *sesv2.PutAccountDedicatedIpWarmupAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountDedicatedIpWarmupAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountDedicatedIpWarmupAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountDetails(ctx context.Context, params *sesv2.PutAccountDetailsInput, optFns ...func(*sesv2.Options)) (*sesv2.PutAccountDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountDetails")
	}

	var r0 *sesv2.PutAccountDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountDetailsInput, ...func(*sesv2.Options)) (*sesv2.PutAccountDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountDetailsInput, ...func(*sesv2.Options)) *sesv2.PutAccountDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountDetailsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountSendingAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountSendingAttributes(ctx context.Context, params *sesv2.PutAccountSendingAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutAccountSendingAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountSendingAttributes")
	}

	var r0 *sesv2.PutAccountSendingAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountSendingAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutAccountSendingAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountSendingAttributesInput, ...func(*sesv2.Options)) *sesv2.PutAccountSendingAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountSendingAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountSendingAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountSuppressionAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountSuppressionAttributes(ctx context.Context, params *sesv2.PutAccountSuppressionAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutAccountSuppressionAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountSuppressionAttributes")
	}

	var r0 *sesv2.PutAccountSuppressionAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountSuppressionAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutAccountSuppressionAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountSuppressionAttributesInput, ...func(*sesv2.Options)) *sesv2.PutAccountSuppressionAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountSuppressionAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountSuppressionAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountVdmAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountVdmAttributes(ctx context.Context, params *sesv2.PutAccountVdmAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutAccountVdmAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountVdmAttributes")
	}

	var r0 *sesv2.PutAccountVdmAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountVdmAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutAccountVdmAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutAccountVdmAttributesInput, ...func(*sesv2.Options)) *sesv2.PutAccountVdmAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutAccountVdmAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutAccountVdmAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetDeliveryOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetDeliveryOptions(ctx context.Context, params *sesv2.PutConfigurationSetDeliveryOptionsInput, optFns ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetDeliveryOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetDeliveryOptions")
	}

	var r0 *sesv2.PutConfigurationSetDeliveryOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetDeliveryOptionsInput, ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetDeliveryOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetDeliveryOptionsInput, ...func(*sesv2.Options)) *sesv2.PutConfigurationSetDeliveryOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetDeliveryOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetDeliveryOptionsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetReputationOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetReputationOptions(ctx context.Context, params *sesv2.PutConfigurationSetReputationOptionsInput, optFns ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetReputationOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetReputationOptions")
	}

	var r0 *sesv2.PutConfigurationSetReputationOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetReputationOptionsInput, ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetReputationOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetReputationOptionsInput, ...func(*sesv2.Options)) *sesv2.PutConfigurationSetReputationOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetReputationOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetReputationOptionsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetSendingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetSendingOptions(ctx context.Context, params *sesv2.PutConfigurationSetSendingOptionsInput, optFns ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetSendingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetSendingOptions")
	}

	var r0 *sesv2.PutConfigurationSetSendingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetSendingOptionsInput, ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetSendingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetSendingOptionsInput, ...func(*sesv2.Options)) *sesv2.PutConfigurationSetSendingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetSendingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetSendingOptionsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetSuppressionOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetSuppressionOptions(ctx context.Context, params *sesv2.PutConfigurationSetSuppressionOptionsInput, optFns ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetSuppressionOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetSuppressionOptions")
	}

	var r0 *sesv2.PutConfigurationSetSuppressionOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetSuppressionOptionsInput, ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetSuppressionOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetSuppressionOptionsInput, ...func(*sesv2.Options)) *sesv2.PutConfigurationSetSuppressionOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetSuppressionOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetSuppressionOptionsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetTrackingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetTrackingOptions(ctx context.Context, params *sesv2.PutConfigurationSetTrackingOptionsInput, optFns ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetTrackingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetTrackingOptions")
	}

	var r0 *sesv2.PutConfigurationSetTrackingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetTrackingOptionsInput, ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetTrackingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetTrackingOptionsInput, ...func(*sesv2.Options)) *sesv2.PutConfigurationSetTrackingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetTrackingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetTrackingOptionsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationSetVdmOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetVdmOptions(ctx context.Context, params *sesv2.PutConfigurationSetVdmOptionsInput, optFns ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetVdmOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetVdmOptions")
	}

	var r0 *sesv2.PutConfigurationSetVdmOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetVdmOptionsInput, ...func(*sesv2.Options)) (*sesv2.PutConfigurationSetVdmOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutConfigurationSetVdmOptionsInput, ...func(*sesv2.Options)) *sesv2.PutConfigurationSetVdmOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutConfigurationSetVdmOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutConfigurationSetVdmOptionsInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpInPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDedicatedIpInPool(ctx context.Context, params *sesv2.PutDedicatedIpInPoolInput, optFns ...func(*sesv2.Options)) (*sesv2.PutDedicatedIpInPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDedicatedIpInPool")
	}

	var r0 *sesv2.PutDedicatedIpInPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDedicatedIpInPoolInput, ...func(*sesv2.Options)) (*sesv2.PutDedicatedIpInPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDedicatedIpInPoolInput, ...func(*sesv2.Options)) *sesv2.PutDedicatedIpInPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDedicatedIpInPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutDedicatedIpInPoolInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpPoolScalingAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDedicatedIpPoolScalingAttributes(ctx context.Context, params *sesv2.PutDedicatedIpPoolScalingAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutDedicatedIpPoolScalingAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDedicatedIpPoolScalingAttributes")
	}

	var r0 *sesv2.PutDedicatedIpPoolScalingAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDedicatedIpPoolScalingAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutDedicatedIpPoolScalingAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDedicatedIpPoolScalingAttributesInput, ...func(*sesv2.Options)) *sesv2.PutDedicatedIpPoolScalingAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDedicatedIpPoolScalingAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutDedicatedIpPoolScalingAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDedicatedIpWarmupAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDedicatedIpWarmupAttributes(ctx context.Context, params *sesv2.PutDedicatedIpWarmupAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutDedicatedIpWarmupAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDedicatedIpWarmupAttributes")
	}

	var r0 *sesv2.PutDedicatedIpWarmupAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDedicatedIpWarmupAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutDedicatedIpWarmupAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDedicatedIpWarmupAttributesInput, ...func(*sesv2.Options)) *sesv2.PutDedicatedIpWarmupAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDedicatedIpWarmupAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutDedicatedIpWarmupAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliverabilityDashboardOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDeliverabilityDashboardOption(ctx context.Context, params *sesv2.PutDeliverabilityDashboardOptionInput, optFns ...func(*sesv2.Options)) (*sesv2.PutDeliverabilityDashboardOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDeliverabilityDashboardOption")
	}

	var r0 *sesv2.PutDeliverabilityDashboardOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDeliverabilityDashboardOptionInput, ...func(*sesv2.Options)) (*sesv2.PutDeliverabilityDashboardOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutDeliverabilityDashboardOptionInput, ...func(*sesv2.Options)) *sesv2.PutDeliverabilityDashboardOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutDeliverabilityDashboardOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutDeliverabilityDashboardOptionInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityConfigurationSetAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailIdentityConfigurationSetAttributes(ctx context.Context, params *sesv2.PutEmailIdentityConfigurationSetAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityConfigurationSetAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailIdentityConfigurationSetAttributes")
	}

	var r0 *sesv2.PutEmailIdentityConfigurationSetAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityConfigurationSetAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityConfigurationSetAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityConfigurationSetAttributesInput, ...func(*sesv2.Options)) *sesv2.PutEmailIdentityConfigurationSetAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityConfigurationSetAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityConfigurationSetAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityDkimAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailIdentityDkimAttributes(ctx context.Context, params *sesv2.PutEmailIdentityDkimAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityDkimAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailIdentityDkimAttributes")
	}

	var r0 *sesv2.PutEmailIdentityDkimAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityDkimAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityDkimAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityDkimAttributesInput, ...func(*sesv2.Options)) *sesv2.PutEmailIdentityDkimAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityDkimAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityDkimAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityDkimSigningAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailIdentityDkimSigningAttributes(ctx context.Context, params *sesv2.PutEmailIdentityDkimSigningAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityDkimSigningAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailIdentityDkimSigningAttributes")
	}

	var r0 *sesv2.PutEmailIdentityDkimSigningAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityDkimSigningAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityDkimSigningAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityDkimSigningAttributesInput, ...func(*sesv2.Options)) *sesv2.PutEmailIdentityDkimSigningAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityDkimSigningAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityDkimSigningAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityFeedbackAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailIdentityFeedbackAttributes(ctx context.Context, params *sesv2.PutEmailIdentityFeedbackAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityFeedbackAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailIdentityFeedbackAttributes")
	}

	var r0 *sesv2.PutEmailIdentityFeedbackAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityFeedbackAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityFeedbackAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityFeedbackAttributesInput, ...func(*sesv2.Options)) *sesv2.PutEmailIdentityFeedbackAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityFeedbackAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityFeedbackAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailIdentityMailFromAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailIdentityMailFromAttributes(ctx context.Context, params *sesv2.PutEmailIdentityMailFromAttributesInput, optFns ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityMailFromAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailIdentityMailFromAttributes")
	}

	var r0 *sesv2.PutEmailIdentityMailFromAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityMailFromAttributesInput, ...func(*sesv2.Options)) (*sesv2.PutEmailIdentityMailFromAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutEmailIdentityMailFromAttributesInput, ...func(*sesv2.Options)) *sesv2.PutEmailIdentityMailFromAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutEmailIdentityMailFromAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutEmailIdentityMailFromAttributesInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSuppressedDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSuppressedDestination(ctx context.Context, params *sesv2.PutSuppressedDestinationInput, optFns ...func(*sesv2.Options)) (*sesv2.PutSuppressedDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSuppressedDestination")
	}

	var r0 *sesv2.PutSuppressedDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutSuppressedDestinationInput, ...func(*sesv2.Options)) (*sesv2.PutSuppressedDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.PutSuppressedDestinationInput, ...func(*sesv2.Options)) *sesv2.PutSuppressedDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.PutSuppressedDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.PutSuppressedDestinationInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBulkEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendBulkEmail(ctx context.Context, params *sesv2.SendBulkEmailInput, optFns ...func(*sesv2.Options)) (*sesv2.SendBulkEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendBulkEmail")
	}

	var r0 *sesv2.SendBulkEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendBulkEmailInput, ...func(*sesv2.Options)) (*sesv2.SendBulkEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendBulkEmailInput, ...func(*sesv2.Options)) *sesv2.SendBulkEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendBulkEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.SendBulkEmailInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCustomVerificationEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendCustomVerificationEmail(ctx context.Context, params *sesv2.SendCustomVerificationEmailInput, optFns ...func(*sesv2.Options)) (*sesv2.SendCustomVerificationEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendCustomVerificationEmail")
	}

	var r0 *sesv2.SendCustomVerificationEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendCustomVerificationEmailInput, ...func(*sesv2.Options)) (*sesv2.SendCustomVerificationEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendCustomVerificationEmailInput, ...func(*sesv2.Options)) *sesv2.SendCustomVerificationEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendCustomVerificationEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.SendCustomVerificationEmailInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendEmail(ctx context.Context, params *sesv2.SendEmailInput, optFns ...func(*sesv2.Options)) (*sesv2.SendEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 *sesv2.SendEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendEmailInput, ...func(*sesv2.Options)) (*sesv2.SendEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.SendEmailInput, ...func(*sesv2.Options)) *sesv2.SendEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.SendEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.SendEmailInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *sesv2.TagResourceInput, optFns ...func(*sesv2.Options)) (*sesv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *sesv2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.TagResourceInput, ...func(*sesv2.Options)) (*sesv2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.TagResourceInput, ...func(*sesv2.Options)) *sesv2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.TagResourceInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestRenderEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestRenderEmailTemplate(ctx context.Context, params *sesv2.TestRenderEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.TestRenderEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestRenderEmailTemplate")
	}

	var r0 *sesv2.TestRenderEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.TestRenderEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.TestRenderEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.TestRenderEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.TestRenderEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.TestRenderEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.TestRenderEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *sesv2.UntagResourceInput, optFns ...func(*sesv2.Options)) (*sesv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *sesv2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UntagResourceInput, ...func(*sesv2.Options)) (*sesv2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UntagResourceInput, ...func(*sesv2.Options)) *sesv2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UntagResourceInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationSetEventDestination(ctx context.Context, params *sesv2.UpdateConfigurationSetEventDestinationInput, optFns ...func(*sesv2.Options)) (*sesv2.UpdateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationSetEventDestination")
	}

	var r0 *sesv2.UpdateConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) (*sesv2.UpdateConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) *sesv2.UpdateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateConfigurationSetEventDestinationInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContact(ctx context.Context, params *sesv2.UpdateContactInput, optFns ...func(*sesv2.Options)) (*sesv2.UpdateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContact")
	}

	var r0 *sesv2.UpdateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateContactInput, ...func(*sesv2.Options)) (*sesv2.UpdateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateContactInput, ...func(*sesv2.Options)) *sesv2.UpdateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateContactInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactList(ctx context.Context, params *sesv2.UpdateContactListInput, optFns ...func(*sesv2.Options)) (*sesv2.UpdateContactListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactList")
	}

	var r0 *sesv2.UpdateContactListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateContactListInput, ...func(*sesv2.Options)) (*sesv2.UpdateContactListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateContactListInput, ...func(*sesv2.Options)) *sesv2.UpdateContactListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateContactListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateContactListInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomVerificationEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCustomVerificationEmailTemplate(ctx context.Context, params *sesv2.UpdateCustomVerificationEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.UpdateCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomVerificationEmailTemplate")
	}

	var r0 *sesv2.UpdateCustomVerificationEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.UpdateCustomVerificationEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.UpdateCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateCustomVerificationEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateCustomVerificationEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailIdentityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEmailIdentityPolicy(ctx context.Context, params *sesv2.UpdateEmailIdentityPolicyInput, optFns ...func(*sesv2.Options)) (*sesv2.UpdateEmailIdentityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmailIdentityPolicy")
	}

	var r0 *sesv2.UpdateEmailIdentityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateEmailIdentityPolicyInput, ...func(*sesv2.Options)) (*sesv2.UpdateEmailIdentityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateEmailIdentityPolicyInput, ...func(*sesv2.Options)) *sesv2.UpdateEmailIdentityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateEmailIdentityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateEmailIdentityPolicyInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEmailTemplate(ctx context.Context, params *sesv2.UpdateEmailTemplateInput, optFns ...func(*sesv2.Options)) (*sesv2.UpdateEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmailTemplate")
	}

	var r0 *sesv2.UpdateEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateEmailTemplateInput, ...func(*sesv2.Options)) (*sesv2.UpdateEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sesv2.UpdateEmailTemplateInput, ...func(*sesv2.Options)) *sesv2.UpdateEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sesv2.UpdateEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sesv2.UpdateEmailTemplateInput, ...func(*sesv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
