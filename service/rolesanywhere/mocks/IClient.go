// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	rolesanywhere "github.com/aws/aws-sdk-go-v2/service/rolesanywhere"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProfile(ctx context.Context, params *rolesanywhere.CreateProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.CreateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 *rolesanywhere.CreateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.CreateProfileInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.CreateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.CreateProfileInput, ...func(*rolesanywhere.Options)) *rolesanywhere.CreateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.CreateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.CreateProfileInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrustAnchor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrustAnchor(ctx context.Context, params *rolesanywhere.CreateTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.CreateTrustAnchorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrustAnchor")
	}

	var r0 *rolesanywhere.CreateTrustAnchorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.CreateTrustAnchorInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.CreateTrustAnchorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.CreateTrustAnchorInput, ...func(*rolesanywhere.Options)) *rolesanywhere.CreateTrustAnchorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.CreateTrustAnchorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.CreateTrustAnchorInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttributeMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAttributeMapping(ctx context.Context, params *rolesanywhere.DeleteAttributeMappingInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteAttributeMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttributeMapping")
	}

	var r0 *rolesanywhere.DeleteAttributeMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DeleteAttributeMappingInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteAttributeMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DeleteAttributeMappingInput, ...func(*rolesanywhere.Options)) *rolesanywhere.DeleteAttributeMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.DeleteAttributeMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.DeleteAttributeMappingInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCrl(ctx context.Context, params *rolesanywhere.DeleteCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteCrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCrl")
	}

	var r0 *rolesanywhere.DeleteCrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DeleteCrlInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteCrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DeleteCrlInput, ...func(*rolesanywhere.Options)) *rolesanywhere.DeleteCrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.DeleteCrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.DeleteCrlInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfile(ctx context.Context, params *rolesanywhere.DeleteProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 *rolesanywhere.DeleteProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DeleteProfileInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DeleteProfileInput, ...func(*rolesanywhere.Options)) *rolesanywhere.DeleteProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.DeleteProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.DeleteProfileInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrustAnchor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrustAnchor(ctx context.Context, params *rolesanywhere.DeleteTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteTrustAnchorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustAnchor")
	}

	var r0 *rolesanywhere.DeleteTrustAnchorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DeleteTrustAnchorInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.DeleteTrustAnchorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DeleteTrustAnchorInput, ...func(*rolesanywhere.Options)) *rolesanywhere.DeleteTrustAnchorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.DeleteTrustAnchorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.DeleteTrustAnchorInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableCrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableCrl(ctx context.Context, params *rolesanywhere.DisableCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableCrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableCrl")
	}

	var r0 *rolesanywhere.DisableCrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DisableCrlInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableCrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DisableCrlInput, ...func(*rolesanywhere.Options)) *rolesanywhere.DisableCrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.DisableCrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.DisableCrlInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableProfile(ctx context.Context, params *rolesanywhere.DisableProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableProfile")
	}

	var r0 *rolesanywhere.DisableProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DisableProfileInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DisableProfileInput, ...func(*rolesanywhere.Options)) *rolesanywhere.DisableProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.DisableProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.DisableProfileInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableTrustAnchor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableTrustAnchor(ctx context.Context, params *rolesanywhere.DisableTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableTrustAnchorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableTrustAnchor")
	}

	var r0 *rolesanywhere.DisableTrustAnchorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DisableTrustAnchorInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.DisableTrustAnchorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.DisableTrustAnchorInput, ...func(*rolesanywhere.Options)) *rolesanywhere.DisableTrustAnchorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.DisableTrustAnchorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.DisableTrustAnchorInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableCrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableCrl(ctx context.Context, params *rolesanywhere.EnableCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableCrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableCrl")
	}

	var r0 *rolesanywhere.EnableCrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.EnableCrlInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableCrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.EnableCrlInput, ...func(*rolesanywhere.Options)) *rolesanywhere.EnableCrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.EnableCrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.EnableCrlInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableProfile(ctx context.Context, params *rolesanywhere.EnableProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableProfile")
	}

	var r0 *rolesanywhere.EnableProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.EnableProfileInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.EnableProfileInput, ...func(*rolesanywhere.Options)) *rolesanywhere.EnableProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.EnableProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.EnableProfileInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableTrustAnchor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableTrustAnchor(ctx context.Context, params *rolesanywhere.EnableTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableTrustAnchorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableTrustAnchor")
	}

	var r0 *rolesanywhere.EnableTrustAnchorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.EnableTrustAnchorInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.EnableTrustAnchorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.EnableTrustAnchorInput, ...func(*rolesanywhere.Options)) *rolesanywhere.EnableTrustAnchorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.EnableTrustAnchorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.EnableTrustAnchorInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCrl(ctx context.Context, params *rolesanywhere.GetCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.GetCrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCrl")
	}

	var r0 *rolesanywhere.GetCrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.GetCrlInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.GetCrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.GetCrlInput, ...func(*rolesanywhere.Options)) *rolesanywhere.GetCrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.GetCrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.GetCrlInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfile(ctx context.Context, params *rolesanywhere.GetProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.GetProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *rolesanywhere.GetProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.GetProfileInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.GetProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.GetProfileInput, ...func(*rolesanywhere.Options)) *rolesanywhere.GetProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.GetProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.GetProfileInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubject(ctx context.Context, params *rolesanywhere.GetSubjectInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.GetSubjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubject")
	}

	var r0 *rolesanywhere.GetSubjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.GetSubjectInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.GetSubjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.GetSubjectInput, ...func(*rolesanywhere.Options)) *rolesanywhere.GetSubjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.GetSubjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.GetSubjectInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrustAnchor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrustAnchor(ctx context.Context, params *rolesanywhere.GetTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.GetTrustAnchorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrustAnchor")
	}

	var r0 *rolesanywhere.GetTrustAnchorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.GetTrustAnchorInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.GetTrustAnchorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.GetTrustAnchorInput, ...func(*rolesanywhere.Options)) *rolesanywhere.GetTrustAnchorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.GetTrustAnchorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.GetTrustAnchorInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportCrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportCrl(ctx context.Context, params *rolesanywhere.ImportCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ImportCrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportCrl")
	}

	var r0 *rolesanywhere.ImportCrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ImportCrlInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.ImportCrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ImportCrlInput, ...func(*rolesanywhere.Options)) *rolesanywhere.ImportCrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.ImportCrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.ImportCrlInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCrls provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCrls(ctx context.Context, params *rolesanywhere.ListCrlsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListCrlsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCrls")
	}

	var r0 *rolesanywhere.ListCrlsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListCrlsInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.ListCrlsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListCrlsInput, ...func(*rolesanywhere.Options)) *rolesanywhere.ListCrlsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.ListCrlsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.ListCrlsInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfiles(ctx context.Context, params *rolesanywhere.ListProfilesInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfiles")
	}

	var r0 *rolesanywhere.ListProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListProfilesInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.ListProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListProfilesInput, ...func(*rolesanywhere.Options)) *rolesanywhere.ListProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.ListProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.ListProfilesInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubjects(ctx context.Context, params *rolesanywhere.ListSubjectsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListSubjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubjects")
	}

	var r0 *rolesanywhere.ListSubjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListSubjectsInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.ListSubjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListSubjectsInput, ...func(*rolesanywhere.Options)) *rolesanywhere.ListSubjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.ListSubjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.ListSubjectsInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *rolesanywhere.ListTagsForResourceInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *rolesanywhere.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListTagsForResourceInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListTagsForResourceInput, ...func(*rolesanywhere.Options)) *rolesanywhere.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.ListTagsForResourceInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrustAnchors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrustAnchors(ctx context.Context, params *rolesanywhere.ListTrustAnchorsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ListTrustAnchorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrustAnchors")
	}

	var r0 *rolesanywhere.ListTrustAnchorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListTrustAnchorsInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.ListTrustAnchorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ListTrustAnchorsInput, ...func(*rolesanywhere.Options)) *rolesanywhere.ListTrustAnchorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.ListTrustAnchorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.ListTrustAnchorsInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() rolesanywhere.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 rolesanywhere.Options
	if rf, ok := ret.Get(0).(func() rolesanywhere.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(rolesanywhere.Options)
	}

	return r0
}

// PutAttributeMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAttributeMapping(ctx context.Context, params *rolesanywhere.PutAttributeMappingInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.PutAttributeMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAttributeMapping")
	}

	var r0 *rolesanywhere.PutAttributeMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.PutAttributeMappingInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.PutAttributeMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.PutAttributeMappingInput, ...func(*rolesanywhere.Options)) *rolesanywhere.PutAttributeMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.PutAttributeMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.PutAttributeMappingInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutNotificationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutNotificationSettings(ctx context.Context, params *rolesanywhere.PutNotificationSettingsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.PutNotificationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutNotificationSettings")
	}

	var r0 *rolesanywhere.PutNotificationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.PutNotificationSettingsInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.PutNotificationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.PutNotificationSettingsInput, ...func(*rolesanywhere.Options)) *rolesanywhere.PutNotificationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.PutNotificationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.PutNotificationSettingsInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetNotificationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetNotificationSettings(ctx context.Context, params *rolesanywhere.ResetNotificationSettingsInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.ResetNotificationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetNotificationSettings")
	}

	var r0 *rolesanywhere.ResetNotificationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ResetNotificationSettingsInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.ResetNotificationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.ResetNotificationSettingsInput, ...func(*rolesanywhere.Options)) *rolesanywhere.ResetNotificationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.ResetNotificationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.ResetNotificationSettingsInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *rolesanywhere.TagResourceInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *rolesanywhere.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.TagResourceInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.TagResourceInput, ...func(*rolesanywhere.Options)) *rolesanywhere.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.TagResourceInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *rolesanywhere.UntagResourceInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *rolesanywhere.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.UntagResourceInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.UntagResourceInput, ...func(*rolesanywhere.Options)) *rolesanywhere.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.UntagResourceInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCrl(ctx context.Context, params *rolesanywhere.UpdateCrlInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateCrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCrl")
	}

	var r0 *rolesanywhere.UpdateCrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.UpdateCrlInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateCrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.UpdateCrlInput, ...func(*rolesanywhere.Options)) *rolesanywhere.UpdateCrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.UpdateCrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.UpdateCrlInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProfile(ctx context.Context, params *rolesanywhere.UpdateProfileInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *rolesanywhere.UpdateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.UpdateProfileInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.UpdateProfileInput, ...func(*rolesanywhere.Options)) *rolesanywhere.UpdateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.UpdateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.UpdateProfileInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrustAnchor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrustAnchor(ctx context.Context, params *rolesanywhere.UpdateTrustAnchorInput, optFns ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateTrustAnchorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustAnchor")
	}

	var r0 *rolesanywhere.UpdateTrustAnchorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.UpdateTrustAnchorInput, ...func(*rolesanywhere.Options)) (*rolesanywhere.UpdateTrustAnchorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *rolesanywhere.UpdateTrustAnchorInput, ...func(*rolesanywhere.Options)) *rolesanywhere.UpdateTrustAnchorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rolesanywhere.UpdateTrustAnchorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *rolesanywhere.UpdateTrustAnchorInput, ...func(*rolesanywhere.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
