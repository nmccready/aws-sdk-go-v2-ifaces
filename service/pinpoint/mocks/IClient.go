// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pinpoint "github.com/aws/aws-sdk-go-v2/service/pinpoint"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApp(ctx context.Context, params *pinpoint.CreateAppInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *pinpoint.CreateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateAppInput, ...func(*pinpoint.Options)) (*pinpoint.CreateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateAppInput, ...func(*pinpoint.Options)) *pinpoint.CreateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateAppInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCampaign(ctx context.Context, params *pinpoint.CreateCampaignInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCampaign")
	}

	var r0 *pinpoint.CreateCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateCampaignInput, ...func(*pinpoint.Options)) (*pinpoint.CreateCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateCampaignInput, ...func(*pinpoint.Options)) *pinpoint.CreateCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateCampaignInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEmailTemplate(ctx context.Context, params *pinpoint.CreateEmailTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailTemplate")
	}

	var r0 *pinpoint.CreateEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateEmailTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.CreateEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateEmailTemplateInput, ...func(*pinpoint.Options)) *pinpoint.CreateEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateEmailTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateExportJob(ctx context.Context, params *pinpoint.CreateExportJobInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExportJob")
	}

	var r0 *pinpoint.CreateExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateExportJobInput, ...func(*pinpoint.Options)) (*pinpoint.CreateExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateExportJobInput, ...func(*pinpoint.Options)) *pinpoint.CreateExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateExportJobInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImportJob(ctx context.Context, params *pinpoint.CreateImportJobInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImportJob")
	}

	var r0 *pinpoint.CreateImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateImportJobInput, ...func(*pinpoint.Options)) (*pinpoint.CreateImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateImportJobInput, ...func(*pinpoint.Options)) *pinpoint.CreateImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateImportJobInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInAppTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInAppTemplate(ctx context.Context, params *pinpoint.CreateInAppTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateInAppTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInAppTemplate")
	}

	var r0 *pinpoint.CreateInAppTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateInAppTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.CreateInAppTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateInAppTemplateInput, ...func(*pinpoint.Options)) *pinpoint.CreateInAppTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateInAppTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateInAppTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJourney provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJourney(ctx context.Context, params *pinpoint.CreateJourneyInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateJourneyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJourney")
	}

	var r0 *pinpoint.CreateJourneyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateJourneyInput, ...func(*pinpoint.Options)) (*pinpoint.CreateJourneyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateJourneyInput, ...func(*pinpoint.Options)) *pinpoint.CreateJourneyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateJourneyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateJourneyInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePushTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePushTemplate(ctx context.Context, params *pinpoint.CreatePushTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreatePushTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePushTemplate")
	}

	var r0 *pinpoint.CreatePushTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreatePushTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.CreatePushTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreatePushTemplateInput, ...func(*pinpoint.Options)) *pinpoint.CreatePushTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreatePushTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreatePushTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRecommenderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRecommenderConfiguration(ctx context.Context, params *pinpoint.CreateRecommenderConfigurationInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateRecommenderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecommenderConfiguration")
	}

	var r0 *pinpoint.CreateRecommenderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateRecommenderConfigurationInput, ...func(*pinpoint.Options)) (*pinpoint.CreateRecommenderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateRecommenderConfigurationInput, ...func(*pinpoint.Options)) *pinpoint.CreateRecommenderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateRecommenderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateRecommenderConfigurationInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSegment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSegment(ctx context.Context, params *pinpoint.CreateSegmentInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateSegmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSegment")
	}

	var r0 *pinpoint.CreateSegmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateSegmentInput, ...func(*pinpoint.Options)) (*pinpoint.CreateSegmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateSegmentInput, ...func(*pinpoint.Options)) *pinpoint.CreateSegmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateSegmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateSegmentInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSmsTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSmsTemplate(ctx context.Context, params *pinpoint.CreateSmsTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateSmsTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSmsTemplate")
	}

	var r0 *pinpoint.CreateSmsTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateSmsTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.CreateSmsTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateSmsTemplateInput, ...func(*pinpoint.Options)) *pinpoint.CreateSmsTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateSmsTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateSmsTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVoiceTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVoiceTemplate(ctx context.Context, params *pinpoint.CreateVoiceTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.CreateVoiceTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVoiceTemplate")
	}

	var r0 *pinpoint.CreateVoiceTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateVoiceTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.CreateVoiceTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.CreateVoiceTemplateInput, ...func(*pinpoint.Options)) *pinpoint.CreateVoiceTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.CreateVoiceTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.CreateVoiceTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAdmChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAdmChannel(ctx context.Context, params *pinpoint.DeleteAdmChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteAdmChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAdmChannel")
	}

	var r0 *pinpoint.DeleteAdmChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteAdmChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteAdmChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteAdmChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteAdmChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteAdmChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteAdmChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApnsChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApnsChannel(ctx context.Context, params *pinpoint.DeleteApnsChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteApnsChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApnsChannel")
	}

	var r0 *pinpoint.DeleteApnsChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteApnsChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteApnsChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteApnsChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteApnsChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteApnsChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteApnsChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApnsSandboxChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApnsSandboxChannel(ctx context.Context, params *pinpoint.DeleteApnsSandboxChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteApnsSandboxChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApnsSandboxChannel")
	}

	var r0 *pinpoint.DeleteApnsSandboxChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteApnsSandboxChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteApnsSandboxChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteApnsSandboxChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteApnsSandboxChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteApnsSandboxChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteApnsSandboxChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApnsVoipChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApnsVoipChannel(ctx context.Context, params *pinpoint.DeleteApnsVoipChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteApnsVoipChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApnsVoipChannel")
	}

	var r0 *pinpoint.DeleteApnsVoipChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteApnsVoipChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteApnsVoipChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteApnsVoipChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteApnsVoipChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteApnsVoipChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteApnsVoipChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApnsVoipSandboxChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApnsVoipSandboxChannel(ctx context.Context, params *pinpoint.DeleteApnsVoipSandboxChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteApnsVoipSandboxChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApnsVoipSandboxChannel")
	}

	var r0 *pinpoint.DeleteApnsVoipSandboxChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteApnsVoipSandboxChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteApnsVoipSandboxChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteApnsVoipSandboxChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApp(ctx context.Context, params *pinpoint.DeleteAppInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *pinpoint.DeleteAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteAppInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteAppInput, ...func(*pinpoint.Options)) *pinpoint.DeleteAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteAppInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBaiduChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBaiduChannel(ctx context.Context, params *pinpoint.DeleteBaiduChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteBaiduChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBaiduChannel")
	}

	var r0 *pinpoint.DeleteBaiduChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteBaiduChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteBaiduChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteBaiduChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteBaiduChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteBaiduChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteBaiduChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCampaign(ctx context.Context, params *pinpoint.DeleteCampaignInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCampaign")
	}

	var r0 *pinpoint.DeleteCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteCampaignInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteCampaignInput, ...func(*pinpoint.Options)) *pinpoint.DeleteCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteCampaignInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEmailChannel(ctx context.Context, params *pinpoint.DeleteEmailChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteEmailChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmailChannel")
	}

	var r0 *pinpoint.DeleteEmailChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteEmailChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteEmailChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteEmailChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteEmailChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteEmailChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteEmailChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEmailTemplate(ctx context.Context, params *pinpoint.DeleteEmailTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmailTemplate")
	}

	var r0 *pinpoint.DeleteEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteEmailTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteEmailTemplateInput, ...func(*pinpoint.Options)) *pinpoint.DeleteEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteEmailTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEndpoint(ctx context.Context, params *pinpoint.DeleteEndpointInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpoint")
	}

	var r0 *pinpoint.DeleteEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteEndpointInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteEndpointInput, ...func(*pinpoint.Options)) *pinpoint.DeleteEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteEndpointInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventStream(ctx context.Context, params *pinpoint.DeleteEventStreamInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteEventStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventStream")
	}

	var r0 *pinpoint.DeleteEventStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteEventStreamInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteEventStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteEventStreamInput, ...func(*pinpoint.Options)) *pinpoint.DeleteEventStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteEventStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteEventStreamInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGcmChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGcmChannel(ctx context.Context, params *pinpoint.DeleteGcmChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteGcmChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGcmChannel")
	}

	var r0 *pinpoint.DeleteGcmChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteGcmChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteGcmChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteGcmChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteGcmChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteGcmChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteGcmChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInAppTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInAppTemplate(ctx context.Context, params *pinpoint.DeleteInAppTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteInAppTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInAppTemplate")
	}

	var r0 *pinpoint.DeleteInAppTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteInAppTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteInAppTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteInAppTemplateInput, ...func(*pinpoint.Options)) *pinpoint.DeleteInAppTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteInAppTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteInAppTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJourney provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJourney(ctx context.Context, params *pinpoint.DeleteJourneyInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteJourneyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJourney")
	}

	var r0 *pinpoint.DeleteJourneyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteJourneyInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteJourneyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteJourneyInput, ...func(*pinpoint.Options)) *pinpoint.DeleteJourneyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteJourneyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteJourneyInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePushTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePushTemplate(ctx context.Context, params *pinpoint.DeletePushTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeletePushTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePushTemplate")
	}

	var r0 *pinpoint.DeletePushTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeletePushTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.DeletePushTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeletePushTemplateInput, ...func(*pinpoint.Options)) *pinpoint.DeletePushTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeletePushTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeletePushTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecommenderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRecommenderConfiguration(ctx context.Context, params *pinpoint.DeleteRecommenderConfigurationInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteRecommenderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecommenderConfiguration")
	}

	var r0 *pinpoint.DeleteRecommenderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteRecommenderConfigurationInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteRecommenderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteRecommenderConfigurationInput, ...func(*pinpoint.Options)) *pinpoint.DeleteRecommenderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteRecommenderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteRecommenderConfigurationInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSegment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSegment(ctx context.Context, params *pinpoint.DeleteSegmentInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteSegmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSegment")
	}

	var r0 *pinpoint.DeleteSegmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteSegmentInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteSegmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteSegmentInput, ...func(*pinpoint.Options)) *pinpoint.DeleteSegmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteSegmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteSegmentInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSmsChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSmsChannel(ctx context.Context, params *pinpoint.DeleteSmsChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteSmsChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSmsChannel")
	}

	var r0 *pinpoint.DeleteSmsChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteSmsChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteSmsChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteSmsChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteSmsChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteSmsChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteSmsChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSmsTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSmsTemplate(ctx context.Context, params *pinpoint.DeleteSmsTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteSmsTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSmsTemplate")
	}

	var r0 *pinpoint.DeleteSmsTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteSmsTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteSmsTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteSmsTemplateInput, ...func(*pinpoint.Options)) *pinpoint.DeleteSmsTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteSmsTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteSmsTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserEndpoints(ctx context.Context, params *pinpoint.DeleteUserEndpointsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteUserEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserEndpoints")
	}

	var r0 *pinpoint.DeleteUserEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteUserEndpointsInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteUserEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteUserEndpointsInput, ...func(*pinpoint.Options)) *pinpoint.DeleteUserEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteUserEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteUserEndpointsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceChannel(ctx context.Context, params *pinpoint.DeleteVoiceChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteVoiceChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceChannel")
	}

	var r0 *pinpoint.DeleteVoiceChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteVoiceChannelInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteVoiceChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteVoiceChannelInput, ...func(*pinpoint.Options)) *pinpoint.DeleteVoiceChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteVoiceChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteVoiceChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVoiceTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVoiceTemplate(ctx context.Context, params *pinpoint.DeleteVoiceTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.DeleteVoiceTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVoiceTemplate")
	}

	var r0 *pinpoint.DeleteVoiceTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteVoiceTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.DeleteVoiceTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.DeleteVoiceTemplateInput, ...func(*pinpoint.Options)) *pinpoint.DeleteVoiceTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.DeleteVoiceTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.DeleteVoiceTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdmChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAdmChannel(ctx context.Context, params *pinpoint.GetAdmChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetAdmChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAdmChannel")
	}

	var r0 *pinpoint.GetAdmChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetAdmChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetAdmChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetAdmChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetAdmChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetAdmChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetAdmChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApnsChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApnsChannel(ctx context.Context, params *pinpoint.GetApnsChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetApnsChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApnsChannel")
	}

	var r0 *pinpoint.GetApnsChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApnsChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetApnsChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApnsChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetApnsChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetApnsChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetApnsChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApnsSandboxChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApnsSandboxChannel(ctx context.Context, params *pinpoint.GetApnsSandboxChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetApnsSandboxChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApnsSandboxChannel")
	}

	var r0 *pinpoint.GetApnsSandboxChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApnsSandboxChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetApnsSandboxChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApnsSandboxChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetApnsSandboxChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetApnsSandboxChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetApnsSandboxChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApnsVoipChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApnsVoipChannel(ctx context.Context, params *pinpoint.GetApnsVoipChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetApnsVoipChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApnsVoipChannel")
	}

	var r0 *pinpoint.GetApnsVoipChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApnsVoipChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetApnsVoipChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApnsVoipChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetApnsVoipChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetApnsVoipChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetApnsVoipChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApnsVoipSandboxChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApnsVoipSandboxChannel(ctx context.Context, params *pinpoint.GetApnsVoipSandboxChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetApnsVoipSandboxChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApnsVoipSandboxChannel")
	}

	var r0 *pinpoint.GetApnsVoipSandboxChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetApnsVoipSandboxChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetApnsVoipSandboxChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetApnsVoipSandboxChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApp(ctx context.Context, params *pinpoint.GetAppInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApp")
	}

	var r0 *pinpoint.GetAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetAppInput, ...func(*pinpoint.Options)) (*pinpoint.GetAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetAppInput, ...func(*pinpoint.Options)) *pinpoint.GetAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetAppInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationDateRangeKpi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplicationDateRangeKpi(ctx context.Context, params *pinpoint.GetApplicationDateRangeKpiInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetApplicationDateRangeKpiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationDateRangeKpi")
	}

	var r0 *pinpoint.GetApplicationDateRangeKpiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApplicationDateRangeKpiInput, ...func(*pinpoint.Options)) (*pinpoint.GetApplicationDateRangeKpiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApplicationDateRangeKpiInput, ...func(*pinpoint.Options)) *pinpoint.GetApplicationDateRangeKpiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetApplicationDateRangeKpiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetApplicationDateRangeKpiInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplicationSettings(ctx context.Context, params *pinpoint.GetApplicationSettingsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetApplicationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationSettings")
	}

	var r0 *pinpoint.GetApplicationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApplicationSettingsInput, ...func(*pinpoint.Options)) (*pinpoint.GetApplicationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetApplicationSettingsInput, ...func(*pinpoint.Options)) *pinpoint.GetApplicationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetApplicationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetApplicationSettingsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApps(ctx context.Context, params *pinpoint.GetAppsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApps")
	}

	var r0 *pinpoint.GetAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetAppsInput, ...func(*pinpoint.Options)) (*pinpoint.GetAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetAppsInput, ...func(*pinpoint.Options)) *pinpoint.GetAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetAppsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBaiduChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBaiduChannel(ctx context.Context, params *pinpoint.GetBaiduChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetBaiduChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBaiduChannel")
	}

	var r0 *pinpoint.GetBaiduChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetBaiduChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetBaiduChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetBaiduChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetBaiduChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetBaiduChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetBaiduChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCampaign(ctx context.Context, params *pinpoint.GetCampaignInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaign")
	}

	var r0 *pinpoint.GetCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignInput, ...func(*pinpoint.Options)) (*pinpoint.GetCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignInput, ...func(*pinpoint.Options)) *pinpoint.GetCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetCampaignInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignActivities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCampaignActivities(ctx context.Context, params *pinpoint.GetCampaignActivitiesInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetCampaignActivitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaignActivities")
	}

	var r0 *pinpoint.GetCampaignActivitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignActivitiesInput, ...func(*pinpoint.Options)) (*pinpoint.GetCampaignActivitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignActivitiesInput, ...func(*pinpoint.Options)) *pinpoint.GetCampaignActivitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetCampaignActivitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetCampaignActivitiesInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignDateRangeKpi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCampaignDateRangeKpi(ctx context.Context, params *pinpoint.GetCampaignDateRangeKpiInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetCampaignDateRangeKpiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaignDateRangeKpi")
	}

	var r0 *pinpoint.GetCampaignDateRangeKpiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignDateRangeKpiInput, ...func(*pinpoint.Options)) (*pinpoint.GetCampaignDateRangeKpiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignDateRangeKpiInput, ...func(*pinpoint.Options)) *pinpoint.GetCampaignDateRangeKpiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetCampaignDateRangeKpiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetCampaignDateRangeKpiInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCampaignVersion(ctx context.Context, params *pinpoint.GetCampaignVersionInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetCampaignVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaignVersion")
	}

	var r0 *pinpoint.GetCampaignVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignVersionInput, ...func(*pinpoint.Options)) (*pinpoint.GetCampaignVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignVersionInput, ...func(*pinpoint.Options)) *pinpoint.GetCampaignVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetCampaignVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetCampaignVersionInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaignVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCampaignVersions(ctx context.Context, params *pinpoint.GetCampaignVersionsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetCampaignVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaignVersions")
	}

	var r0 *pinpoint.GetCampaignVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignVersionsInput, ...func(*pinpoint.Options)) (*pinpoint.GetCampaignVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignVersionsInput, ...func(*pinpoint.Options)) *pinpoint.GetCampaignVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetCampaignVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetCampaignVersionsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCampaigns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCampaigns(ctx context.Context, params *pinpoint.GetCampaignsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetCampaignsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCampaigns")
	}

	var r0 *pinpoint.GetCampaignsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignsInput, ...func(*pinpoint.Options)) (*pinpoint.GetCampaignsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetCampaignsInput, ...func(*pinpoint.Options)) *pinpoint.GetCampaignsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetCampaignsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetCampaignsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChannels(ctx context.Context, params *pinpoint.GetChannelsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannels")
	}

	var r0 *pinpoint.GetChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetChannelsInput, ...func(*pinpoint.Options)) (*pinpoint.GetChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetChannelsInput, ...func(*pinpoint.Options)) *pinpoint.GetChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetChannelsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEmailChannel(ctx context.Context, params *pinpoint.GetEmailChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetEmailChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailChannel")
	}

	var r0 *pinpoint.GetEmailChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetEmailChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetEmailChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetEmailChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetEmailChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetEmailChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetEmailChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEmailTemplate(ctx context.Context, params *pinpoint.GetEmailTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailTemplate")
	}

	var r0 *pinpoint.GetEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetEmailTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.GetEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetEmailTemplateInput, ...func(*pinpoint.Options)) *pinpoint.GetEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetEmailTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEndpoint(ctx context.Context, params *pinpoint.GetEndpointInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpoint")
	}

	var r0 *pinpoint.GetEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetEndpointInput, ...func(*pinpoint.Options)) (*pinpoint.GetEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetEndpointInput, ...func(*pinpoint.Options)) *pinpoint.GetEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetEndpointInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEventStream(ctx context.Context, params *pinpoint.GetEventStreamInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetEventStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventStream")
	}

	var r0 *pinpoint.GetEventStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetEventStreamInput, ...func(*pinpoint.Options)) (*pinpoint.GetEventStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetEventStreamInput, ...func(*pinpoint.Options)) *pinpoint.GetEventStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetEventStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetEventStreamInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExportJob(ctx context.Context, params *pinpoint.GetExportJobInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExportJob")
	}

	var r0 *pinpoint.GetExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetExportJobInput, ...func(*pinpoint.Options)) (*pinpoint.GetExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetExportJobInput, ...func(*pinpoint.Options)) *pinpoint.GetExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetExportJobInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExportJobs(ctx context.Context, params *pinpoint.GetExportJobsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExportJobs")
	}

	var r0 *pinpoint.GetExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetExportJobsInput, ...func(*pinpoint.Options)) (*pinpoint.GetExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetExportJobsInput, ...func(*pinpoint.Options)) *pinpoint.GetExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetExportJobsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGcmChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGcmChannel(ctx context.Context, params *pinpoint.GetGcmChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetGcmChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGcmChannel")
	}

	var r0 *pinpoint.GetGcmChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetGcmChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetGcmChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetGcmChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetGcmChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetGcmChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetGcmChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImportJob(ctx context.Context, params *pinpoint.GetImportJobInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImportJob")
	}

	var r0 *pinpoint.GetImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetImportJobInput, ...func(*pinpoint.Options)) (*pinpoint.GetImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetImportJobInput, ...func(*pinpoint.Options)) *pinpoint.GetImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetImportJobInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImportJobs(ctx context.Context, params *pinpoint.GetImportJobsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImportJobs")
	}

	var r0 *pinpoint.GetImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetImportJobsInput, ...func(*pinpoint.Options)) (*pinpoint.GetImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetImportJobsInput, ...func(*pinpoint.Options)) *pinpoint.GetImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetImportJobsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInAppMessages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInAppMessages(ctx context.Context, params *pinpoint.GetInAppMessagesInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetInAppMessagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInAppMessages")
	}

	var r0 *pinpoint.GetInAppMessagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetInAppMessagesInput, ...func(*pinpoint.Options)) (*pinpoint.GetInAppMessagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetInAppMessagesInput, ...func(*pinpoint.Options)) *pinpoint.GetInAppMessagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetInAppMessagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetInAppMessagesInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInAppTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInAppTemplate(ctx context.Context, params *pinpoint.GetInAppTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetInAppTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInAppTemplate")
	}

	var r0 *pinpoint.GetInAppTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetInAppTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.GetInAppTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetInAppTemplateInput, ...func(*pinpoint.Options)) *pinpoint.GetInAppTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetInAppTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetInAppTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourney provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJourney(ctx context.Context, params *pinpoint.GetJourneyInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetJourneyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJourney")
	}

	var r0 *pinpoint.GetJourneyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyInput, ...func(*pinpoint.Options)) (*pinpoint.GetJourneyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyInput, ...func(*pinpoint.Options)) *pinpoint.GetJourneyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetJourneyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetJourneyInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourneyDateRangeKpi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJourneyDateRangeKpi(ctx context.Context, params *pinpoint.GetJourneyDateRangeKpiInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetJourneyDateRangeKpiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJourneyDateRangeKpi")
	}

	var r0 *pinpoint.GetJourneyDateRangeKpiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyDateRangeKpiInput, ...func(*pinpoint.Options)) (*pinpoint.GetJourneyDateRangeKpiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyDateRangeKpiInput, ...func(*pinpoint.Options)) *pinpoint.GetJourneyDateRangeKpiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetJourneyDateRangeKpiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetJourneyDateRangeKpiInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourneyExecutionActivityMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJourneyExecutionActivityMetrics(ctx context.Context, params *pinpoint.GetJourneyExecutionActivityMetricsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetJourneyExecutionActivityMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJourneyExecutionActivityMetrics")
	}

	var r0 *pinpoint.GetJourneyExecutionActivityMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyExecutionActivityMetricsInput, ...func(*pinpoint.Options)) (*pinpoint.GetJourneyExecutionActivityMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyExecutionActivityMetricsInput, ...func(*pinpoint.Options)) *pinpoint.GetJourneyExecutionActivityMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetJourneyExecutionActivityMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetJourneyExecutionActivityMetricsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourneyExecutionMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJourneyExecutionMetrics(ctx context.Context, params *pinpoint.GetJourneyExecutionMetricsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetJourneyExecutionMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJourneyExecutionMetrics")
	}

	var r0 *pinpoint.GetJourneyExecutionMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyExecutionMetricsInput, ...func(*pinpoint.Options)) (*pinpoint.GetJourneyExecutionMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyExecutionMetricsInput, ...func(*pinpoint.Options)) *pinpoint.GetJourneyExecutionMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetJourneyExecutionMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetJourneyExecutionMetricsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourneyRunExecutionActivityMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJourneyRunExecutionActivityMetrics(ctx context.Context, params *pinpoint.GetJourneyRunExecutionActivityMetricsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetJourneyRunExecutionActivityMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJourneyRunExecutionActivityMetrics")
	}

	var r0 *pinpoint.GetJourneyRunExecutionActivityMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyRunExecutionActivityMetricsInput, ...func(*pinpoint.Options)) (*pinpoint.GetJourneyRunExecutionActivityMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyRunExecutionActivityMetricsInput, ...func(*pinpoint.Options)) *pinpoint.GetJourneyRunExecutionActivityMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetJourneyRunExecutionActivityMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetJourneyRunExecutionActivityMetricsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourneyRunExecutionMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJourneyRunExecutionMetrics(ctx context.Context, params *pinpoint.GetJourneyRunExecutionMetricsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetJourneyRunExecutionMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJourneyRunExecutionMetrics")
	}

	var r0 *pinpoint.GetJourneyRunExecutionMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyRunExecutionMetricsInput, ...func(*pinpoint.Options)) (*pinpoint.GetJourneyRunExecutionMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyRunExecutionMetricsInput, ...func(*pinpoint.Options)) *pinpoint.GetJourneyRunExecutionMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetJourneyRunExecutionMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetJourneyRunExecutionMetricsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJourneyRuns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJourneyRuns(ctx context.Context, params *pinpoint.GetJourneyRunsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetJourneyRunsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJourneyRuns")
	}

	var r0 *pinpoint.GetJourneyRunsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyRunsInput, ...func(*pinpoint.Options)) (*pinpoint.GetJourneyRunsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetJourneyRunsInput, ...func(*pinpoint.Options)) *pinpoint.GetJourneyRunsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetJourneyRunsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetJourneyRunsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPushTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPushTemplate(ctx context.Context, params *pinpoint.GetPushTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetPushTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPushTemplate")
	}

	var r0 *pinpoint.GetPushTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetPushTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.GetPushTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetPushTemplateInput, ...func(*pinpoint.Options)) *pinpoint.GetPushTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetPushTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetPushTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommenderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecommenderConfiguration(ctx context.Context, params *pinpoint.GetRecommenderConfigurationInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetRecommenderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecommenderConfiguration")
	}

	var r0 *pinpoint.GetRecommenderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetRecommenderConfigurationInput, ...func(*pinpoint.Options)) (*pinpoint.GetRecommenderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetRecommenderConfigurationInput, ...func(*pinpoint.Options)) *pinpoint.GetRecommenderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetRecommenderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetRecommenderConfigurationInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecommenderConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecommenderConfigurations(ctx context.Context, params *pinpoint.GetRecommenderConfigurationsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetRecommenderConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecommenderConfigurations")
	}

	var r0 *pinpoint.GetRecommenderConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetRecommenderConfigurationsInput, ...func(*pinpoint.Options)) (*pinpoint.GetRecommenderConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetRecommenderConfigurationsInput, ...func(*pinpoint.Options)) *pinpoint.GetRecommenderConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetRecommenderConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetRecommenderConfigurationsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSegment(ctx context.Context, params *pinpoint.GetSegmentInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetSegmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSegment")
	}

	var r0 *pinpoint.GetSegmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentInput, ...func(*pinpoint.Options)) (*pinpoint.GetSegmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentInput, ...func(*pinpoint.Options)) *pinpoint.GetSegmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetSegmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetSegmentInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmentExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSegmentExportJobs(ctx context.Context, params *pinpoint.GetSegmentExportJobsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetSegmentExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentExportJobs")
	}

	var r0 *pinpoint.GetSegmentExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentExportJobsInput, ...func(*pinpoint.Options)) (*pinpoint.GetSegmentExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentExportJobsInput, ...func(*pinpoint.Options)) *pinpoint.GetSegmentExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetSegmentExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetSegmentExportJobsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmentImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSegmentImportJobs(ctx context.Context, params *pinpoint.GetSegmentImportJobsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetSegmentImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentImportJobs")
	}

	var r0 *pinpoint.GetSegmentImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentImportJobsInput, ...func(*pinpoint.Options)) (*pinpoint.GetSegmentImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentImportJobsInput, ...func(*pinpoint.Options)) *pinpoint.GetSegmentImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetSegmentImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetSegmentImportJobsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmentVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSegmentVersion(ctx context.Context, params *pinpoint.GetSegmentVersionInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetSegmentVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentVersion")
	}

	var r0 *pinpoint.GetSegmentVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentVersionInput, ...func(*pinpoint.Options)) (*pinpoint.GetSegmentVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentVersionInput, ...func(*pinpoint.Options)) *pinpoint.GetSegmentVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetSegmentVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetSegmentVersionInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegmentVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSegmentVersions(ctx context.Context, params *pinpoint.GetSegmentVersionsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetSegmentVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSegmentVersions")
	}

	var r0 *pinpoint.GetSegmentVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentVersionsInput, ...func(*pinpoint.Options)) (*pinpoint.GetSegmentVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentVersionsInput, ...func(*pinpoint.Options)) *pinpoint.GetSegmentVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetSegmentVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetSegmentVersionsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSegments(ctx context.Context, params *pinpoint.GetSegmentsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetSegmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSegments")
	}

	var r0 *pinpoint.GetSegmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentsInput, ...func(*pinpoint.Options)) (*pinpoint.GetSegmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSegmentsInput, ...func(*pinpoint.Options)) *pinpoint.GetSegmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetSegmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetSegmentsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSmsChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSmsChannel(ctx context.Context, params *pinpoint.GetSmsChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetSmsChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSmsChannel")
	}

	var r0 *pinpoint.GetSmsChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSmsChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetSmsChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSmsChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetSmsChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetSmsChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetSmsChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSmsTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSmsTemplate(ctx context.Context, params *pinpoint.GetSmsTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetSmsTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSmsTemplate")
	}

	var r0 *pinpoint.GetSmsTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSmsTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.GetSmsTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetSmsTemplateInput, ...func(*pinpoint.Options)) *pinpoint.GetSmsTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetSmsTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetSmsTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUserEndpoints(ctx context.Context, params *pinpoint.GetUserEndpointsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetUserEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUserEndpoints")
	}

	var r0 *pinpoint.GetUserEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetUserEndpointsInput, ...func(*pinpoint.Options)) (*pinpoint.GetUserEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetUserEndpointsInput, ...func(*pinpoint.Options)) *pinpoint.GetUserEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetUserEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetUserEndpointsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceChannel(ctx context.Context, params *pinpoint.GetVoiceChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetVoiceChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceChannel")
	}

	var r0 *pinpoint.GetVoiceChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetVoiceChannelInput, ...func(*pinpoint.Options)) (*pinpoint.GetVoiceChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetVoiceChannelInput, ...func(*pinpoint.Options)) *pinpoint.GetVoiceChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetVoiceChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetVoiceChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceTemplate(ctx context.Context, params *pinpoint.GetVoiceTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.GetVoiceTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceTemplate")
	}

	var r0 *pinpoint.GetVoiceTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetVoiceTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.GetVoiceTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.GetVoiceTemplateInput, ...func(*pinpoint.Options)) *pinpoint.GetVoiceTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.GetVoiceTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.GetVoiceTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJourneys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJourneys(ctx context.Context, params *pinpoint.ListJourneysInput, optFns ...func(*pinpoint.Options)) (*pinpoint.ListJourneysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJourneys")
	}

	var r0 *pinpoint.ListJourneysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.ListJourneysInput, ...func(*pinpoint.Options)) (*pinpoint.ListJourneysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.ListJourneysInput, ...func(*pinpoint.Options)) *pinpoint.ListJourneysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.ListJourneysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.ListJourneysInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *pinpoint.ListTagsForResourceInput, optFns ...func(*pinpoint.Options)) (*pinpoint.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *pinpoint.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.ListTagsForResourceInput, ...func(*pinpoint.Options)) (*pinpoint.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.ListTagsForResourceInput, ...func(*pinpoint.Options)) *pinpoint.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.ListTagsForResourceInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplateVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplateVersions(ctx context.Context, params *pinpoint.ListTemplateVersionsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.ListTemplateVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateVersions")
	}

	var r0 *pinpoint.ListTemplateVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.ListTemplateVersionsInput, ...func(*pinpoint.Options)) (*pinpoint.ListTemplateVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.ListTemplateVersionsInput, ...func(*pinpoint.Options)) *pinpoint.ListTemplateVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.ListTemplateVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.ListTemplateVersionsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplates(ctx context.Context, params *pinpoint.ListTemplatesInput, optFns ...func(*pinpoint.Options)) (*pinpoint.ListTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplates")
	}

	var r0 *pinpoint.ListTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.ListTemplatesInput, ...func(*pinpoint.Options)) (*pinpoint.ListTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.ListTemplatesInput, ...func(*pinpoint.Options)) *pinpoint.ListTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.ListTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.ListTemplatesInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() pinpoint.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 pinpoint.Options
	if rf, ok := ret.Get(0).(func() pinpoint.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pinpoint.Options)
	}

	return r0
}

// PhoneNumberValidate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PhoneNumberValidate(ctx context.Context, params *pinpoint.PhoneNumberValidateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.PhoneNumberValidateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PhoneNumberValidate")
	}

	var r0 *pinpoint.PhoneNumberValidateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.PhoneNumberValidateInput, ...func(*pinpoint.Options)) (*pinpoint.PhoneNumberValidateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.PhoneNumberValidateInput, ...func(*pinpoint.Options)) *pinpoint.PhoneNumberValidateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.PhoneNumberValidateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.PhoneNumberValidateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEventStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEventStream(ctx context.Context, params *pinpoint.PutEventStreamInput, optFns ...func(*pinpoint.Options)) (*pinpoint.PutEventStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEventStream")
	}

	var r0 *pinpoint.PutEventStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.PutEventStreamInput, ...func(*pinpoint.Options)) (*pinpoint.PutEventStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.PutEventStreamInput, ...func(*pinpoint.Options)) *pinpoint.PutEventStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.PutEventStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.PutEventStreamInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEvents(ctx context.Context, params *pinpoint.PutEventsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.PutEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEvents")
	}

	var r0 *pinpoint.PutEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.PutEventsInput, ...func(*pinpoint.Options)) (*pinpoint.PutEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.PutEventsInput, ...func(*pinpoint.Options)) *pinpoint.PutEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.PutEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.PutEventsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveAttributes(ctx context.Context, params *pinpoint.RemoveAttributesInput, optFns ...func(*pinpoint.Options)) (*pinpoint.RemoveAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAttributes")
	}

	var r0 *pinpoint.RemoveAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.RemoveAttributesInput, ...func(*pinpoint.Options)) (*pinpoint.RemoveAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.RemoveAttributesInput, ...func(*pinpoint.Options)) *pinpoint.RemoveAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.RemoveAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.RemoveAttributesInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendMessages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendMessages(ctx context.Context, params *pinpoint.SendMessagesInput, optFns ...func(*pinpoint.Options)) (*pinpoint.SendMessagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendMessages")
	}

	var r0 *pinpoint.SendMessagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.SendMessagesInput, ...func(*pinpoint.Options)) (*pinpoint.SendMessagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.SendMessagesInput, ...func(*pinpoint.Options)) *pinpoint.SendMessagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.SendMessagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.SendMessagesInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendOTPMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendOTPMessage(ctx context.Context, params *pinpoint.SendOTPMessageInput, optFns ...func(*pinpoint.Options)) (*pinpoint.SendOTPMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendOTPMessage")
	}

	var r0 *pinpoint.SendOTPMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.SendOTPMessageInput, ...func(*pinpoint.Options)) (*pinpoint.SendOTPMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.SendOTPMessageInput, ...func(*pinpoint.Options)) *pinpoint.SendOTPMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.SendOTPMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.SendOTPMessageInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendUsersMessages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendUsersMessages(ctx context.Context, params *pinpoint.SendUsersMessagesInput, optFns ...func(*pinpoint.Options)) (*pinpoint.SendUsersMessagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendUsersMessages")
	}

	var r0 *pinpoint.SendUsersMessagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.SendUsersMessagesInput, ...func(*pinpoint.Options)) (*pinpoint.SendUsersMessagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.SendUsersMessagesInput, ...func(*pinpoint.Options)) *pinpoint.SendUsersMessagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.SendUsersMessagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.SendUsersMessagesInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *pinpoint.TagResourceInput, optFns ...func(*pinpoint.Options)) (*pinpoint.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *pinpoint.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.TagResourceInput, ...func(*pinpoint.Options)) (*pinpoint.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.TagResourceInput, ...func(*pinpoint.Options)) *pinpoint.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.TagResourceInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *pinpoint.UntagResourceInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *pinpoint.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UntagResourceInput, ...func(*pinpoint.Options)) (*pinpoint.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UntagResourceInput, ...func(*pinpoint.Options)) *pinpoint.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UntagResourceInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAdmChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAdmChannel(ctx context.Context, params *pinpoint.UpdateAdmChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateAdmChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAdmChannel")
	}

	var r0 *pinpoint.UpdateAdmChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateAdmChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateAdmChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateAdmChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateAdmChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateAdmChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateAdmChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApnsChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApnsChannel(ctx context.Context, params *pinpoint.UpdateApnsChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateApnsChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApnsChannel")
	}

	var r0 *pinpoint.UpdateApnsChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApnsChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateApnsChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApnsChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateApnsChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateApnsChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateApnsChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApnsSandboxChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApnsSandboxChannel(ctx context.Context, params *pinpoint.UpdateApnsSandboxChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateApnsSandboxChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApnsSandboxChannel")
	}

	var r0 *pinpoint.UpdateApnsSandboxChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApnsSandboxChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateApnsSandboxChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApnsSandboxChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateApnsSandboxChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateApnsSandboxChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateApnsSandboxChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApnsVoipChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApnsVoipChannel(ctx context.Context, params *pinpoint.UpdateApnsVoipChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateApnsVoipChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApnsVoipChannel")
	}

	var r0 *pinpoint.UpdateApnsVoipChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApnsVoipChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateApnsVoipChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApnsVoipChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateApnsVoipChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateApnsVoipChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateApnsVoipChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApnsVoipSandboxChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApnsVoipSandboxChannel(ctx context.Context, params *pinpoint.UpdateApnsVoipSandboxChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateApnsVoipSandboxChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApnsVoipSandboxChannel")
	}

	var r0 *pinpoint.UpdateApnsVoipSandboxChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateApnsVoipSandboxChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateApnsVoipSandboxChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateApnsVoipSandboxChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateApnsVoipSandboxChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplicationSettings(ctx context.Context, params *pinpoint.UpdateApplicationSettingsInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateApplicationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationSettings")
	}

	var r0 *pinpoint.UpdateApplicationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApplicationSettingsInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateApplicationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateApplicationSettingsInput, ...func(*pinpoint.Options)) *pinpoint.UpdateApplicationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateApplicationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateApplicationSettingsInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBaiduChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBaiduChannel(ctx context.Context, params *pinpoint.UpdateBaiduChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateBaiduChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBaiduChannel")
	}

	var r0 *pinpoint.UpdateBaiduChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateBaiduChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateBaiduChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateBaiduChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateBaiduChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateBaiduChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateBaiduChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaign(ctx context.Context, params *pinpoint.UpdateCampaignInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaign")
	}

	var r0 *pinpoint.UpdateCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateCampaignInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateCampaignInput, ...func(*pinpoint.Options)) *pinpoint.UpdateCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateCampaignInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEmailChannel(ctx context.Context, params *pinpoint.UpdateEmailChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateEmailChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmailChannel")
	}

	var r0 *pinpoint.UpdateEmailChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateEmailChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateEmailChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateEmailChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateEmailChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateEmailChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateEmailChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEmailTemplate(ctx context.Context, params *pinpoint.UpdateEmailTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEmailTemplate")
	}

	var r0 *pinpoint.UpdateEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateEmailTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateEmailTemplateInput, ...func(*pinpoint.Options)) *pinpoint.UpdateEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateEmailTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEndpoint(ctx context.Context, params *pinpoint.UpdateEndpointInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEndpoint")
	}

	var r0 *pinpoint.UpdateEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateEndpointInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateEndpointInput, ...func(*pinpoint.Options)) *pinpoint.UpdateEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateEndpointInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEndpointsBatch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEndpointsBatch(ctx context.Context, params *pinpoint.UpdateEndpointsBatchInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateEndpointsBatchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEndpointsBatch")
	}

	var r0 *pinpoint.UpdateEndpointsBatchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateEndpointsBatchInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateEndpointsBatchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateEndpointsBatchInput, ...func(*pinpoint.Options)) *pinpoint.UpdateEndpointsBatchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateEndpointsBatchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateEndpointsBatchInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGcmChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGcmChannel(ctx context.Context, params *pinpoint.UpdateGcmChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateGcmChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGcmChannel")
	}

	var r0 *pinpoint.UpdateGcmChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateGcmChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateGcmChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateGcmChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateGcmChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateGcmChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateGcmChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInAppTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInAppTemplate(ctx context.Context, params *pinpoint.UpdateInAppTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateInAppTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInAppTemplate")
	}

	var r0 *pinpoint.UpdateInAppTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateInAppTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateInAppTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateInAppTemplateInput, ...func(*pinpoint.Options)) *pinpoint.UpdateInAppTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateInAppTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateInAppTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJourney provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateJourney(ctx context.Context, params *pinpoint.UpdateJourneyInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateJourneyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJourney")
	}

	var r0 *pinpoint.UpdateJourneyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateJourneyInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateJourneyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateJourneyInput, ...func(*pinpoint.Options)) *pinpoint.UpdateJourneyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateJourneyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateJourneyInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJourneyState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateJourneyState(ctx context.Context, params *pinpoint.UpdateJourneyStateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateJourneyStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJourneyState")
	}

	var r0 *pinpoint.UpdateJourneyStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateJourneyStateInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateJourneyStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateJourneyStateInput, ...func(*pinpoint.Options)) *pinpoint.UpdateJourneyStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateJourneyStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateJourneyStateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePushTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePushTemplate(ctx context.Context, params *pinpoint.UpdatePushTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdatePushTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePushTemplate")
	}

	var r0 *pinpoint.UpdatePushTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdatePushTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.UpdatePushTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdatePushTemplateInput, ...func(*pinpoint.Options)) *pinpoint.UpdatePushTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdatePushTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdatePushTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecommenderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRecommenderConfiguration(ctx context.Context, params *pinpoint.UpdateRecommenderConfigurationInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateRecommenderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecommenderConfiguration")
	}

	var r0 *pinpoint.UpdateRecommenderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateRecommenderConfigurationInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateRecommenderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateRecommenderConfigurationInput, ...func(*pinpoint.Options)) *pinpoint.UpdateRecommenderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateRecommenderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateRecommenderConfigurationInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSegment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSegment(ctx context.Context, params *pinpoint.UpdateSegmentInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateSegmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSegment")
	}

	var r0 *pinpoint.UpdateSegmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateSegmentInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateSegmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateSegmentInput, ...func(*pinpoint.Options)) *pinpoint.UpdateSegmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateSegmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateSegmentInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSmsChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSmsChannel(ctx context.Context, params *pinpoint.UpdateSmsChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateSmsChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSmsChannel")
	}

	var r0 *pinpoint.UpdateSmsChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateSmsChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateSmsChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateSmsChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateSmsChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateSmsChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateSmsChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSmsTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSmsTemplate(ctx context.Context, params *pinpoint.UpdateSmsTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateSmsTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSmsTemplate")
	}

	var r0 *pinpoint.UpdateSmsTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateSmsTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateSmsTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateSmsTemplateInput, ...func(*pinpoint.Options)) *pinpoint.UpdateSmsTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateSmsTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateSmsTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplateActiveVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTemplateActiveVersion(ctx context.Context, params *pinpoint.UpdateTemplateActiveVersionInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateTemplateActiveVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplateActiveVersion")
	}

	var r0 *pinpoint.UpdateTemplateActiveVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateTemplateActiveVersionInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateTemplateActiveVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateTemplateActiveVersionInput, ...func(*pinpoint.Options)) *pinpoint.UpdateTemplateActiveVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateTemplateActiveVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateTemplateActiveVersionInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoiceChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVoiceChannel(ctx context.Context, params *pinpoint.UpdateVoiceChannelInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateVoiceChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoiceChannel")
	}

	var r0 *pinpoint.UpdateVoiceChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateVoiceChannelInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateVoiceChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateVoiceChannelInput, ...func(*pinpoint.Options)) *pinpoint.UpdateVoiceChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateVoiceChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateVoiceChannelInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVoiceTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVoiceTemplate(ctx context.Context, params *pinpoint.UpdateVoiceTemplateInput, optFns ...func(*pinpoint.Options)) (*pinpoint.UpdateVoiceTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVoiceTemplate")
	}

	var r0 *pinpoint.UpdateVoiceTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateVoiceTemplateInput, ...func(*pinpoint.Options)) (*pinpoint.UpdateVoiceTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.UpdateVoiceTemplateInput, ...func(*pinpoint.Options)) *pinpoint.UpdateVoiceTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.UpdateVoiceTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.UpdateVoiceTemplateInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyOTPMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifyOTPMessage(ctx context.Context, params *pinpoint.VerifyOTPMessageInput, optFns ...func(*pinpoint.Options)) (*pinpoint.VerifyOTPMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyOTPMessage")
	}

	var r0 *pinpoint.VerifyOTPMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.VerifyOTPMessageInput, ...func(*pinpoint.Options)) (*pinpoint.VerifyOTPMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pinpoint.VerifyOTPMessageInput, ...func(*pinpoint.Options)) *pinpoint.VerifyOTPMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pinpoint.VerifyOTPMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pinpoint.VerifyOTPMessageInput, ...func(*pinpoint.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
