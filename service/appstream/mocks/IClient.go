// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	appstream "github.com/aws/aws-sdk-go-v2/service/appstream"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateAppBlockBuilderAppBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateAppBlockBuilderAppBlock(ctx context.Context, params *appstream.AssociateAppBlockBuilderAppBlockInput, optFns ...func(*appstream.Options)) (*appstream.AssociateAppBlockBuilderAppBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateAppBlockBuilderAppBlock")
	}

	var r0 *appstream.AssociateAppBlockBuilderAppBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.AssociateAppBlockBuilderAppBlockInput, ...func(*appstream.Options)) (*appstream.AssociateAppBlockBuilderAppBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.AssociateAppBlockBuilderAppBlockInput, ...func(*appstream.Options)) *appstream.AssociateAppBlockBuilderAppBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.AssociateAppBlockBuilderAppBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.AssociateAppBlockBuilderAppBlockInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateApplicationFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateApplicationFleet(ctx context.Context, params *appstream.AssociateApplicationFleetInput, optFns ...func(*appstream.Options)) (*appstream.AssociateApplicationFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateApplicationFleet")
	}

	var r0 *appstream.AssociateApplicationFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.AssociateApplicationFleetInput, ...func(*appstream.Options)) (*appstream.AssociateApplicationFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.AssociateApplicationFleetInput, ...func(*appstream.Options)) *appstream.AssociateApplicationFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.AssociateApplicationFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.AssociateApplicationFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateApplicationToEntitlement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateApplicationToEntitlement(ctx context.Context, params *appstream.AssociateApplicationToEntitlementInput, optFns ...func(*appstream.Options)) (*appstream.AssociateApplicationToEntitlementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateApplicationToEntitlement")
	}

	var r0 *appstream.AssociateApplicationToEntitlementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.AssociateApplicationToEntitlementInput, ...func(*appstream.Options)) (*appstream.AssociateApplicationToEntitlementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.AssociateApplicationToEntitlementInput, ...func(*appstream.Options)) *appstream.AssociateApplicationToEntitlementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.AssociateApplicationToEntitlementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.AssociateApplicationToEntitlementInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateFleet(ctx context.Context, params *appstream.AssociateFleetInput, optFns ...func(*appstream.Options)) (*appstream.AssociateFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateFleet")
	}

	var r0 *appstream.AssociateFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.AssociateFleetInput, ...func(*appstream.Options)) (*appstream.AssociateFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.AssociateFleetInput, ...func(*appstream.Options)) *appstream.AssociateFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.AssociateFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.AssociateFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchAssociateUserStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchAssociateUserStack(ctx context.Context, params *appstream.BatchAssociateUserStackInput, optFns ...func(*appstream.Options)) (*appstream.BatchAssociateUserStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchAssociateUserStack")
	}

	var r0 *appstream.BatchAssociateUserStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.BatchAssociateUserStackInput, ...func(*appstream.Options)) (*appstream.BatchAssociateUserStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.BatchAssociateUserStackInput, ...func(*appstream.Options)) *appstream.BatchAssociateUserStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.BatchAssociateUserStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.BatchAssociateUserStackInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDisassociateUserStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDisassociateUserStack(ctx context.Context, params *appstream.BatchDisassociateUserStackInput, optFns ...func(*appstream.Options)) (*appstream.BatchDisassociateUserStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDisassociateUserStack")
	}

	var r0 *appstream.BatchDisassociateUserStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.BatchDisassociateUserStackInput, ...func(*appstream.Options)) (*appstream.BatchDisassociateUserStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.BatchDisassociateUserStackInput, ...func(*appstream.Options)) *appstream.BatchDisassociateUserStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.BatchDisassociateUserStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.BatchDisassociateUserStackInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyImage(ctx context.Context, params *appstream.CopyImageInput, optFns ...func(*appstream.Options)) (*appstream.CopyImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyImage")
	}

	var r0 *appstream.CopyImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CopyImageInput, ...func(*appstream.Options)) (*appstream.CopyImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CopyImageInput, ...func(*appstream.Options)) *appstream.CopyImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CopyImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CopyImageInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppBlock(ctx context.Context, params *appstream.CreateAppBlockInput, optFns ...func(*appstream.Options)) (*appstream.CreateAppBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppBlock")
	}

	var r0 *appstream.CreateAppBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateAppBlockInput, ...func(*appstream.Options)) (*appstream.CreateAppBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateAppBlockInput, ...func(*appstream.Options)) *appstream.CreateAppBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateAppBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateAppBlockInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppBlockBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppBlockBuilder(ctx context.Context, params *appstream.CreateAppBlockBuilderInput, optFns ...func(*appstream.Options)) (*appstream.CreateAppBlockBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppBlockBuilder")
	}

	var r0 *appstream.CreateAppBlockBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateAppBlockBuilderInput, ...func(*appstream.Options)) (*appstream.CreateAppBlockBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateAppBlockBuilderInput, ...func(*appstream.Options)) *appstream.CreateAppBlockBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateAppBlockBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateAppBlockBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppBlockBuilderStreamingURL provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppBlockBuilderStreamingURL(ctx context.Context, params *appstream.CreateAppBlockBuilderStreamingURLInput, optFns ...func(*appstream.Options)) (*appstream.CreateAppBlockBuilderStreamingURLOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppBlockBuilderStreamingURL")
	}

	var r0 *appstream.CreateAppBlockBuilderStreamingURLOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateAppBlockBuilderStreamingURLInput, ...func(*appstream.Options)) (*appstream.CreateAppBlockBuilderStreamingURLOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateAppBlockBuilderStreamingURLInput, ...func(*appstream.Options)) *appstream.CreateAppBlockBuilderStreamingURLOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateAppBlockBuilderStreamingURLOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateAppBlockBuilderStreamingURLInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *appstream.CreateApplicationInput, optFns ...func(*appstream.Options)) (*appstream.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *appstream.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateApplicationInput, ...func(*appstream.Options)) (*appstream.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateApplicationInput, ...func(*appstream.Options)) *appstream.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateApplicationInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDirectoryConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDirectoryConfig(ctx context.Context, params *appstream.CreateDirectoryConfigInput, optFns ...func(*appstream.Options)) (*appstream.CreateDirectoryConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectoryConfig")
	}

	var r0 *appstream.CreateDirectoryConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateDirectoryConfigInput, ...func(*appstream.Options)) (*appstream.CreateDirectoryConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateDirectoryConfigInput, ...func(*appstream.Options)) *appstream.CreateDirectoryConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateDirectoryConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateDirectoryConfigInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEntitlement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEntitlement(ctx context.Context, params *appstream.CreateEntitlementInput, optFns ...func(*appstream.Options)) (*appstream.CreateEntitlementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEntitlement")
	}

	var r0 *appstream.CreateEntitlementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateEntitlementInput, ...func(*appstream.Options)) (*appstream.CreateEntitlementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateEntitlementInput, ...func(*appstream.Options)) *appstream.CreateEntitlementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateEntitlementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateEntitlementInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFleet(ctx context.Context, params *appstream.CreateFleetInput, optFns ...func(*appstream.Options)) (*appstream.CreateFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFleet")
	}

	var r0 *appstream.CreateFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateFleetInput, ...func(*appstream.Options)) (*appstream.CreateFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateFleetInput, ...func(*appstream.Options)) *appstream.CreateFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImageBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImageBuilder(ctx context.Context, params *appstream.CreateImageBuilderInput, optFns ...func(*appstream.Options)) (*appstream.CreateImageBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImageBuilder")
	}

	var r0 *appstream.CreateImageBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateImageBuilderInput, ...func(*appstream.Options)) (*appstream.CreateImageBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateImageBuilderInput, ...func(*appstream.Options)) *appstream.CreateImageBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateImageBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateImageBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImageBuilderStreamingURL provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImageBuilderStreamingURL(ctx context.Context, params *appstream.CreateImageBuilderStreamingURLInput, optFns ...func(*appstream.Options)) (*appstream.CreateImageBuilderStreamingURLOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImageBuilderStreamingURL")
	}

	var r0 *appstream.CreateImageBuilderStreamingURLOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateImageBuilderStreamingURLInput, ...func(*appstream.Options)) (*appstream.CreateImageBuilderStreamingURLOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateImageBuilderStreamingURLInput, ...func(*appstream.Options)) *appstream.CreateImageBuilderStreamingURLOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateImageBuilderStreamingURLOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateImageBuilderStreamingURLInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStack(ctx context.Context, params *appstream.CreateStackInput, optFns ...func(*appstream.Options)) (*appstream.CreateStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStack")
	}

	var r0 *appstream.CreateStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateStackInput, ...func(*appstream.Options)) (*appstream.CreateStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateStackInput, ...func(*appstream.Options)) *appstream.CreateStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateStackInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStreamingURL provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStreamingURL(ctx context.Context, params *appstream.CreateStreamingURLInput, optFns ...func(*appstream.Options)) (*appstream.CreateStreamingURLOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStreamingURL")
	}

	var r0 *appstream.CreateStreamingURLOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateStreamingURLInput, ...func(*appstream.Options)) (*appstream.CreateStreamingURLOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateStreamingURLInput, ...func(*appstream.Options)) *appstream.CreateStreamingURLOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateStreamingURLOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateStreamingURLInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUpdatedImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUpdatedImage(ctx context.Context, params *appstream.CreateUpdatedImageInput, optFns ...func(*appstream.Options)) (*appstream.CreateUpdatedImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpdatedImage")
	}

	var r0 *appstream.CreateUpdatedImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateUpdatedImageInput, ...func(*appstream.Options)) (*appstream.CreateUpdatedImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateUpdatedImageInput, ...func(*appstream.Options)) *appstream.CreateUpdatedImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateUpdatedImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateUpdatedImageInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUsageReportSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUsageReportSubscription(ctx context.Context, params *appstream.CreateUsageReportSubscriptionInput, optFns ...func(*appstream.Options)) (*appstream.CreateUsageReportSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUsageReportSubscription")
	}

	var r0 *appstream.CreateUsageReportSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateUsageReportSubscriptionInput, ...func(*appstream.Options)) (*appstream.CreateUsageReportSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateUsageReportSubscriptionInput, ...func(*appstream.Options)) *appstream.CreateUsageReportSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateUsageReportSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateUsageReportSubscriptionInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *appstream.CreateUserInput, optFns ...func(*appstream.Options)) (*appstream.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *appstream.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateUserInput, ...func(*appstream.Options)) (*appstream.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.CreateUserInput, ...func(*appstream.Options)) *appstream.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.CreateUserInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppBlock(ctx context.Context, params *appstream.DeleteAppBlockInput, optFns ...func(*appstream.Options)) (*appstream.DeleteAppBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppBlock")
	}

	var r0 *appstream.DeleteAppBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteAppBlockInput, ...func(*appstream.Options)) (*appstream.DeleteAppBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteAppBlockInput, ...func(*appstream.Options)) *appstream.DeleteAppBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteAppBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteAppBlockInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppBlockBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppBlockBuilder(ctx context.Context, params *appstream.DeleteAppBlockBuilderInput, optFns ...func(*appstream.Options)) (*appstream.DeleteAppBlockBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppBlockBuilder")
	}

	var r0 *appstream.DeleteAppBlockBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteAppBlockBuilderInput, ...func(*appstream.Options)) (*appstream.DeleteAppBlockBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteAppBlockBuilderInput, ...func(*appstream.Options)) *appstream.DeleteAppBlockBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteAppBlockBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteAppBlockBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *appstream.DeleteApplicationInput, optFns ...func(*appstream.Options)) (*appstream.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *appstream.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteApplicationInput, ...func(*appstream.Options)) (*appstream.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteApplicationInput, ...func(*appstream.Options)) *appstream.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteApplicationInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDirectoryConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDirectoryConfig(ctx context.Context, params *appstream.DeleteDirectoryConfigInput, optFns ...func(*appstream.Options)) (*appstream.DeleteDirectoryConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDirectoryConfig")
	}

	var r0 *appstream.DeleteDirectoryConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteDirectoryConfigInput, ...func(*appstream.Options)) (*appstream.DeleteDirectoryConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteDirectoryConfigInput, ...func(*appstream.Options)) *appstream.DeleteDirectoryConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteDirectoryConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteDirectoryConfigInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEntitlement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEntitlement(ctx context.Context, params *appstream.DeleteEntitlementInput, optFns ...func(*appstream.Options)) (*appstream.DeleteEntitlementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEntitlement")
	}

	var r0 *appstream.DeleteEntitlementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteEntitlementInput, ...func(*appstream.Options)) (*appstream.DeleteEntitlementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteEntitlementInput, ...func(*appstream.Options)) *appstream.DeleteEntitlementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteEntitlementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteEntitlementInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFleet(ctx context.Context, params *appstream.DeleteFleetInput, optFns ...func(*appstream.Options)) (*appstream.DeleteFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFleet")
	}

	var r0 *appstream.DeleteFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteFleetInput, ...func(*appstream.Options)) (*appstream.DeleteFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteFleetInput, ...func(*appstream.Options)) *appstream.DeleteFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImage(ctx context.Context, params *appstream.DeleteImageInput, optFns ...func(*appstream.Options)) (*appstream.DeleteImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 *appstream.DeleteImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteImageInput, ...func(*appstream.Options)) (*appstream.DeleteImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteImageInput, ...func(*appstream.Options)) *appstream.DeleteImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteImageInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImageBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImageBuilder(ctx context.Context, params *appstream.DeleteImageBuilderInput, optFns ...func(*appstream.Options)) (*appstream.DeleteImageBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImageBuilder")
	}

	var r0 *appstream.DeleteImageBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteImageBuilderInput, ...func(*appstream.Options)) (*appstream.DeleteImageBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteImageBuilderInput, ...func(*appstream.Options)) *appstream.DeleteImageBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteImageBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteImageBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImagePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImagePermissions(ctx context.Context, params *appstream.DeleteImagePermissionsInput, optFns ...func(*appstream.Options)) (*appstream.DeleteImagePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImagePermissions")
	}

	var r0 *appstream.DeleteImagePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteImagePermissionsInput, ...func(*appstream.Options)) (*appstream.DeleteImagePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteImagePermissionsInput, ...func(*appstream.Options)) *appstream.DeleteImagePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteImagePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteImagePermissionsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStack(ctx context.Context, params *appstream.DeleteStackInput, optFns ...func(*appstream.Options)) (*appstream.DeleteStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStack")
	}

	var r0 *appstream.DeleteStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteStackInput, ...func(*appstream.Options)) (*appstream.DeleteStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteStackInput, ...func(*appstream.Options)) *appstream.DeleteStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteStackInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsageReportSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUsageReportSubscription(ctx context.Context, params *appstream.DeleteUsageReportSubscriptionInput, optFns ...func(*appstream.Options)) (*appstream.DeleteUsageReportSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUsageReportSubscription")
	}

	var r0 *appstream.DeleteUsageReportSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteUsageReportSubscriptionInput, ...func(*appstream.Options)) (*appstream.DeleteUsageReportSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteUsageReportSubscriptionInput, ...func(*appstream.Options)) *appstream.DeleteUsageReportSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteUsageReportSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteUsageReportSubscriptionInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *appstream.DeleteUserInput, optFns ...func(*appstream.Options)) (*appstream.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *appstream.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteUserInput, ...func(*appstream.Options)) (*appstream.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DeleteUserInput, ...func(*appstream.Options)) *appstream.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DeleteUserInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppBlockBuilderAppBlockAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppBlockBuilderAppBlockAssociations(ctx context.Context, params *appstream.DescribeAppBlockBuilderAppBlockAssociationsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeAppBlockBuilderAppBlockAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppBlockBuilderAppBlockAssociations")
	}

	var r0 *appstream.DescribeAppBlockBuilderAppBlockAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeAppBlockBuilderAppBlockAssociationsInput, ...func(*appstream.Options)) (*appstream.DescribeAppBlockBuilderAppBlockAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeAppBlockBuilderAppBlockAssociationsInput, ...func(*appstream.Options)) *appstream.DescribeAppBlockBuilderAppBlockAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeAppBlockBuilderAppBlockAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeAppBlockBuilderAppBlockAssociationsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppBlockBuilders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppBlockBuilders(ctx context.Context, params *appstream.DescribeAppBlockBuildersInput, optFns ...func(*appstream.Options)) (*appstream.DescribeAppBlockBuildersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppBlockBuilders")
	}

	var r0 *appstream.DescribeAppBlockBuildersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeAppBlockBuildersInput, ...func(*appstream.Options)) (*appstream.DescribeAppBlockBuildersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeAppBlockBuildersInput, ...func(*appstream.Options)) *appstream.DescribeAppBlockBuildersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeAppBlockBuildersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeAppBlockBuildersInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppBlocks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppBlocks(ctx context.Context, params *appstream.DescribeAppBlocksInput, optFns ...func(*appstream.Options)) (*appstream.DescribeAppBlocksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppBlocks")
	}

	var r0 *appstream.DescribeAppBlocksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeAppBlocksInput, ...func(*appstream.Options)) (*appstream.DescribeAppBlocksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeAppBlocksInput, ...func(*appstream.Options)) *appstream.DescribeAppBlocksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeAppBlocksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeAppBlocksInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationFleetAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationFleetAssociations(ctx context.Context, params *appstream.DescribeApplicationFleetAssociationsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeApplicationFleetAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationFleetAssociations")
	}

	var r0 *appstream.DescribeApplicationFleetAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeApplicationFleetAssociationsInput, ...func(*appstream.Options)) (*appstream.DescribeApplicationFleetAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeApplicationFleetAssociationsInput, ...func(*appstream.Options)) *appstream.DescribeApplicationFleetAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeApplicationFleetAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeApplicationFleetAssociationsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplications(ctx context.Context, params *appstream.DescribeApplicationsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplications")
	}

	var r0 *appstream.DescribeApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeApplicationsInput, ...func(*appstream.Options)) (*appstream.DescribeApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeApplicationsInput, ...func(*appstream.Options)) *appstream.DescribeApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeApplicationsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDirectoryConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDirectoryConfigs(ctx context.Context, params *appstream.DescribeDirectoryConfigsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeDirectoryConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDirectoryConfigs")
	}

	var r0 *appstream.DescribeDirectoryConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeDirectoryConfigsInput, ...func(*appstream.Options)) (*appstream.DescribeDirectoryConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeDirectoryConfigsInput, ...func(*appstream.Options)) *appstream.DescribeDirectoryConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeDirectoryConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeDirectoryConfigsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEntitlements provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEntitlements(ctx context.Context, params *appstream.DescribeEntitlementsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeEntitlementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEntitlements")
	}

	var r0 *appstream.DescribeEntitlementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeEntitlementsInput, ...func(*appstream.Options)) (*appstream.DescribeEntitlementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeEntitlementsInput, ...func(*appstream.Options)) *appstream.DescribeEntitlementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeEntitlementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeEntitlementsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFleets(ctx context.Context, params *appstream.DescribeFleetsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeFleetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFleets")
	}

	var r0 *appstream.DescribeFleetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeFleetsInput, ...func(*appstream.Options)) (*appstream.DescribeFleetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeFleetsInput, ...func(*appstream.Options)) *appstream.DescribeFleetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeFleetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeFleetsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImageBuilders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeImageBuilders(ctx context.Context, params *appstream.DescribeImageBuildersInput, optFns ...func(*appstream.Options)) (*appstream.DescribeImageBuildersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeImageBuilders")
	}

	var r0 *appstream.DescribeImageBuildersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeImageBuildersInput, ...func(*appstream.Options)) (*appstream.DescribeImageBuildersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeImageBuildersInput, ...func(*appstream.Options)) *appstream.DescribeImageBuildersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeImageBuildersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeImageBuildersInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImagePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeImagePermissions(ctx context.Context, params *appstream.DescribeImagePermissionsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeImagePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeImagePermissions")
	}

	var r0 *appstream.DescribeImagePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeImagePermissionsInput, ...func(*appstream.Options)) (*appstream.DescribeImagePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeImagePermissionsInput, ...func(*appstream.Options)) *appstream.DescribeImagePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeImagePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeImagePermissionsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeImages(ctx context.Context, params *appstream.DescribeImagesInput, optFns ...func(*appstream.Options)) (*appstream.DescribeImagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeImages")
	}

	var r0 *appstream.DescribeImagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeImagesInput, ...func(*appstream.Options)) (*appstream.DescribeImagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeImagesInput, ...func(*appstream.Options)) *appstream.DescribeImagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeImagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeImagesInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSessions(ctx context.Context, params *appstream.DescribeSessionsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSessions")
	}

	var r0 *appstream.DescribeSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeSessionsInput, ...func(*appstream.Options)) (*appstream.DescribeSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeSessionsInput, ...func(*appstream.Options)) *appstream.DescribeSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeSessionsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStacks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStacks(ctx context.Context, params *appstream.DescribeStacksInput, optFns ...func(*appstream.Options)) (*appstream.DescribeStacksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStacks")
	}

	var r0 *appstream.DescribeStacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeStacksInput, ...func(*appstream.Options)) (*appstream.DescribeStacksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeStacksInput, ...func(*appstream.Options)) *appstream.DescribeStacksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeStacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeStacksInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUsageReportSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUsageReportSubscriptions(ctx context.Context, params *appstream.DescribeUsageReportSubscriptionsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeUsageReportSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUsageReportSubscriptions")
	}

	var r0 *appstream.DescribeUsageReportSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeUsageReportSubscriptionsInput, ...func(*appstream.Options)) (*appstream.DescribeUsageReportSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeUsageReportSubscriptionsInput, ...func(*appstream.Options)) *appstream.DescribeUsageReportSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeUsageReportSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeUsageReportSubscriptionsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserStackAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserStackAssociations(ctx context.Context, params *appstream.DescribeUserStackAssociationsInput, optFns ...func(*appstream.Options)) (*appstream.DescribeUserStackAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserStackAssociations")
	}

	var r0 *appstream.DescribeUserStackAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeUserStackAssociationsInput, ...func(*appstream.Options)) (*appstream.DescribeUserStackAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeUserStackAssociationsInput, ...func(*appstream.Options)) *appstream.DescribeUserStackAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeUserStackAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeUserStackAssociationsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUsers(ctx context.Context, params *appstream.DescribeUsersInput, optFns ...func(*appstream.Options)) (*appstream.DescribeUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUsers")
	}

	var r0 *appstream.DescribeUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeUsersInput, ...func(*appstream.Options)) (*appstream.DescribeUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DescribeUsersInput, ...func(*appstream.Options)) *appstream.DescribeUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DescribeUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DescribeUsersInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableUser(ctx context.Context, params *appstream.DisableUserInput, optFns ...func(*appstream.Options)) (*appstream.DisableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 *appstream.DisableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisableUserInput, ...func(*appstream.Options)) (*appstream.DisableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisableUserInput, ...func(*appstream.Options)) *appstream.DisableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DisableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DisableUserInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateAppBlockBuilderAppBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateAppBlockBuilderAppBlock(ctx context.Context, params *appstream.DisassociateAppBlockBuilderAppBlockInput, optFns ...func(*appstream.Options)) (*appstream.DisassociateAppBlockBuilderAppBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateAppBlockBuilderAppBlock")
	}

	var r0 *appstream.DisassociateAppBlockBuilderAppBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisassociateAppBlockBuilderAppBlockInput, ...func(*appstream.Options)) (*appstream.DisassociateAppBlockBuilderAppBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisassociateAppBlockBuilderAppBlockInput, ...func(*appstream.Options)) *appstream.DisassociateAppBlockBuilderAppBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DisassociateAppBlockBuilderAppBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DisassociateAppBlockBuilderAppBlockInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateApplicationFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateApplicationFleet(ctx context.Context, params *appstream.DisassociateApplicationFleetInput, optFns ...func(*appstream.Options)) (*appstream.DisassociateApplicationFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateApplicationFleet")
	}

	var r0 *appstream.DisassociateApplicationFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisassociateApplicationFleetInput, ...func(*appstream.Options)) (*appstream.DisassociateApplicationFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisassociateApplicationFleetInput, ...func(*appstream.Options)) *appstream.DisassociateApplicationFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DisassociateApplicationFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DisassociateApplicationFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateApplicationFromEntitlement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateApplicationFromEntitlement(ctx context.Context, params *appstream.DisassociateApplicationFromEntitlementInput, optFns ...func(*appstream.Options)) (*appstream.DisassociateApplicationFromEntitlementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateApplicationFromEntitlement")
	}

	var r0 *appstream.DisassociateApplicationFromEntitlementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisassociateApplicationFromEntitlementInput, ...func(*appstream.Options)) (*appstream.DisassociateApplicationFromEntitlementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisassociateApplicationFromEntitlementInput, ...func(*appstream.Options)) *appstream.DisassociateApplicationFromEntitlementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DisassociateApplicationFromEntitlementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DisassociateApplicationFromEntitlementInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFleet(ctx context.Context, params *appstream.DisassociateFleetInput, optFns ...func(*appstream.Options)) (*appstream.DisassociateFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFleet")
	}

	var r0 *appstream.DisassociateFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisassociateFleetInput, ...func(*appstream.Options)) (*appstream.DisassociateFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.DisassociateFleetInput, ...func(*appstream.Options)) *appstream.DisassociateFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.DisassociateFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.DisassociateFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableUser(ctx context.Context, params *appstream.EnableUserInput, optFns ...func(*appstream.Options)) (*appstream.EnableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableUser")
	}

	var r0 *appstream.EnableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.EnableUserInput, ...func(*appstream.Options)) (*appstream.EnableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.EnableUserInput, ...func(*appstream.Options)) *appstream.EnableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.EnableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.EnableUserInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExpireSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExpireSession(ctx context.Context, params *appstream.ExpireSessionInput, optFns ...func(*appstream.Options)) (*appstream.ExpireSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExpireSession")
	}

	var r0 *appstream.ExpireSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ExpireSessionInput, ...func(*appstream.Options)) (*appstream.ExpireSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ExpireSessionInput, ...func(*appstream.Options)) *appstream.ExpireSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.ExpireSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.ExpireSessionInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssociatedFleets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssociatedFleets(ctx context.Context, params *appstream.ListAssociatedFleetsInput, optFns ...func(*appstream.Options)) (*appstream.ListAssociatedFleetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssociatedFleets")
	}

	var r0 *appstream.ListAssociatedFleetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ListAssociatedFleetsInput, ...func(*appstream.Options)) (*appstream.ListAssociatedFleetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ListAssociatedFleetsInput, ...func(*appstream.Options)) *appstream.ListAssociatedFleetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.ListAssociatedFleetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.ListAssociatedFleetsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssociatedStacks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssociatedStacks(ctx context.Context, params *appstream.ListAssociatedStacksInput, optFns ...func(*appstream.Options)) (*appstream.ListAssociatedStacksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssociatedStacks")
	}

	var r0 *appstream.ListAssociatedStacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ListAssociatedStacksInput, ...func(*appstream.Options)) (*appstream.ListAssociatedStacksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ListAssociatedStacksInput, ...func(*appstream.Options)) *appstream.ListAssociatedStacksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.ListAssociatedStacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.ListAssociatedStacksInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEntitledApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEntitledApplications(ctx context.Context, params *appstream.ListEntitledApplicationsInput, optFns ...func(*appstream.Options)) (*appstream.ListEntitledApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEntitledApplications")
	}

	var r0 *appstream.ListEntitledApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ListEntitledApplicationsInput, ...func(*appstream.Options)) (*appstream.ListEntitledApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ListEntitledApplicationsInput, ...func(*appstream.Options)) *appstream.ListEntitledApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.ListEntitledApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.ListEntitledApplicationsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *appstream.ListTagsForResourceInput, optFns ...func(*appstream.Options)) (*appstream.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *appstream.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ListTagsForResourceInput, ...func(*appstream.Options)) (*appstream.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.ListTagsForResourceInput, ...func(*appstream.Options)) *appstream.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.ListTagsForResourceInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() appstream.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 appstream.Options
	if rf, ok := ret.Get(0).(func() appstream.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(appstream.Options)
	}

	return r0
}

// StartAppBlockBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAppBlockBuilder(ctx context.Context, params *appstream.StartAppBlockBuilderInput, optFns ...func(*appstream.Options)) (*appstream.StartAppBlockBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAppBlockBuilder")
	}

	var r0 *appstream.StartAppBlockBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StartAppBlockBuilderInput, ...func(*appstream.Options)) (*appstream.StartAppBlockBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StartAppBlockBuilderInput, ...func(*appstream.Options)) *appstream.StartAppBlockBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.StartAppBlockBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.StartAppBlockBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartFleet(ctx context.Context, params *appstream.StartFleetInput, optFns ...func(*appstream.Options)) (*appstream.StartFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartFleet")
	}

	var r0 *appstream.StartFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StartFleetInput, ...func(*appstream.Options)) (*appstream.StartFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StartFleetInput, ...func(*appstream.Options)) *appstream.StartFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.StartFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.StartFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartImageBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartImageBuilder(ctx context.Context, params *appstream.StartImageBuilderInput, optFns ...func(*appstream.Options)) (*appstream.StartImageBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartImageBuilder")
	}

	var r0 *appstream.StartImageBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StartImageBuilderInput, ...func(*appstream.Options)) (*appstream.StartImageBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StartImageBuilderInput, ...func(*appstream.Options)) *appstream.StartImageBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.StartImageBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.StartImageBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopAppBlockBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopAppBlockBuilder(ctx context.Context, params *appstream.StopAppBlockBuilderInput, optFns ...func(*appstream.Options)) (*appstream.StopAppBlockBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopAppBlockBuilder")
	}

	var r0 *appstream.StopAppBlockBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StopAppBlockBuilderInput, ...func(*appstream.Options)) (*appstream.StopAppBlockBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StopAppBlockBuilderInput, ...func(*appstream.Options)) *appstream.StopAppBlockBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.StopAppBlockBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.StopAppBlockBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopFleet(ctx context.Context, params *appstream.StopFleetInput, optFns ...func(*appstream.Options)) (*appstream.StopFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopFleet")
	}

	var r0 *appstream.StopFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StopFleetInput, ...func(*appstream.Options)) (*appstream.StopFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StopFleetInput, ...func(*appstream.Options)) *appstream.StopFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.StopFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.StopFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopImageBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopImageBuilder(ctx context.Context, params *appstream.StopImageBuilderInput, optFns ...func(*appstream.Options)) (*appstream.StopImageBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopImageBuilder")
	}

	var r0 *appstream.StopImageBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StopImageBuilderInput, ...func(*appstream.Options)) (*appstream.StopImageBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.StopImageBuilderInput, ...func(*appstream.Options)) *appstream.StopImageBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.StopImageBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.StopImageBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *appstream.TagResourceInput, optFns ...func(*appstream.Options)) (*appstream.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *appstream.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.TagResourceInput, ...func(*appstream.Options)) (*appstream.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.TagResourceInput, ...func(*appstream.Options)) *appstream.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.TagResourceInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *appstream.UntagResourceInput, optFns ...func(*appstream.Options)) (*appstream.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *appstream.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UntagResourceInput, ...func(*appstream.Options)) (*appstream.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UntagResourceInput, ...func(*appstream.Options)) *appstream.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.UntagResourceInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppBlockBuilder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppBlockBuilder(ctx context.Context, params *appstream.UpdateAppBlockBuilderInput, optFns ...func(*appstream.Options)) (*appstream.UpdateAppBlockBuilderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppBlockBuilder")
	}

	var r0 *appstream.UpdateAppBlockBuilderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateAppBlockBuilderInput, ...func(*appstream.Options)) (*appstream.UpdateAppBlockBuilderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateAppBlockBuilderInput, ...func(*appstream.Options)) *appstream.UpdateAppBlockBuilderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.UpdateAppBlockBuilderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.UpdateAppBlockBuilderInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *appstream.UpdateApplicationInput, optFns ...func(*appstream.Options)) (*appstream.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *appstream.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateApplicationInput, ...func(*appstream.Options)) (*appstream.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateApplicationInput, ...func(*appstream.Options)) *appstream.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.UpdateApplicationInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDirectoryConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDirectoryConfig(ctx context.Context, params *appstream.UpdateDirectoryConfigInput, optFns ...func(*appstream.Options)) (*appstream.UpdateDirectoryConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDirectoryConfig")
	}

	var r0 *appstream.UpdateDirectoryConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateDirectoryConfigInput, ...func(*appstream.Options)) (*appstream.UpdateDirectoryConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateDirectoryConfigInput, ...func(*appstream.Options)) *appstream.UpdateDirectoryConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.UpdateDirectoryConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.UpdateDirectoryConfigInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEntitlement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEntitlement(ctx context.Context, params *appstream.UpdateEntitlementInput, optFns ...func(*appstream.Options)) (*appstream.UpdateEntitlementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEntitlement")
	}

	var r0 *appstream.UpdateEntitlementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateEntitlementInput, ...func(*appstream.Options)) (*appstream.UpdateEntitlementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateEntitlementInput, ...func(*appstream.Options)) *appstream.UpdateEntitlementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.UpdateEntitlementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.UpdateEntitlementInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFleet(ctx context.Context, params *appstream.UpdateFleetInput, optFns ...func(*appstream.Options)) (*appstream.UpdateFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFleet")
	}

	var r0 *appstream.UpdateFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateFleetInput, ...func(*appstream.Options)) (*appstream.UpdateFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateFleetInput, ...func(*appstream.Options)) *appstream.UpdateFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.UpdateFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.UpdateFleetInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImagePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateImagePermissions(ctx context.Context, params *appstream.UpdateImagePermissionsInput, optFns ...func(*appstream.Options)) (*appstream.UpdateImagePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImagePermissions")
	}

	var r0 *appstream.UpdateImagePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateImagePermissionsInput, ...func(*appstream.Options)) (*appstream.UpdateImagePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateImagePermissionsInput, ...func(*appstream.Options)) *appstream.UpdateImagePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.UpdateImagePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.UpdateImagePermissionsInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStack(ctx context.Context, params *appstream.UpdateStackInput, optFns ...func(*appstream.Options)) (*appstream.UpdateStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStack")
	}

	var r0 *appstream.UpdateStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateStackInput, ...func(*appstream.Options)) (*appstream.UpdateStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appstream.UpdateStackInput, ...func(*appstream.Options)) *appstream.UpdateStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appstream.UpdateStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appstream.UpdateStackInput, ...func(*appstream.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
