// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	applicationsignals "github.com/aws/aws-sdk-go-v2/service/applicationsignals"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetServiceLevelObjectiveBudgetReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetServiceLevelObjectiveBudgetReport(ctx context.Context, params *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetServiceLevelObjectiveBudgetReport")
	}

	var r0 *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportInput, ...func(*applicationsignals.Options)) (*applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportInput, ...func(*applicationsignals.Options)) *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.BatchGetServiceLevelObjectiveBudgetReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.BatchGetServiceLevelObjectiveBudgetReportInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceLevelObjective provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceLevelObjective(ctx context.Context, params *applicationsignals.CreateServiceLevelObjectiveInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.CreateServiceLevelObjectiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceLevelObjective")
	}

	var r0 *applicationsignals.CreateServiceLevelObjectiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.CreateServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) (*applicationsignals.CreateServiceLevelObjectiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.CreateServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) *applicationsignals.CreateServiceLevelObjectiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.CreateServiceLevelObjectiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.CreateServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceLevelObjective provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceLevelObjective(ctx context.Context, params *applicationsignals.DeleteServiceLevelObjectiveInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.DeleteServiceLevelObjectiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceLevelObjective")
	}

	var r0 *applicationsignals.DeleteServiceLevelObjectiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.DeleteServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) (*applicationsignals.DeleteServiceLevelObjectiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.DeleteServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) *applicationsignals.DeleteServiceLevelObjectiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.DeleteServiceLevelObjectiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.DeleteServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetService(ctx context.Context, params *applicationsignals.GetServiceInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.GetServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *applicationsignals.GetServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.GetServiceInput, ...func(*applicationsignals.Options)) (*applicationsignals.GetServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.GetServiceInput, ...func(*applicationsignals.Options)) *applicationsignals.GetServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.GetServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.GetServiceInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceLevelObjective provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceLevelObjective(ctx context.Context, params *applicationsignals.GetServiceLevelObjectiveInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.GetServiceLevelObjectiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceLevelObjective")
	}

	var r0 *applicationsignals.GetServiceLevelObjectiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.GetServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) (*applicationsignals.GetServiceLevelObjectiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.GetServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) *applicationsignals.GetServiceLevelObjectiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.GetServiceLevelObjectiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.GetServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceDependencies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceDependencies(ctx context.Context, params *applicationsignals.ListServiceDependenciesInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.ListServiceDependenciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceDependencies")
	}

	var r0 *applicationsignals.ListServiceDependenciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServiceDependenciesInput, ...func(*applicationsignals.Options)) (*applicationsignals.ListServiceDependenciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServiceDependenciesInput, ...func(*applicationsignals.Options)) *applicationsignals.ListServiceDependenciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.ListServiceDependenciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.ListServiceDependenciesInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceDependents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceDependents(ctx context.Context, params *applicationsignals.ListServiceDependentsInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.ListServiceDependentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceDependents")
	}

	var r0 *applicationsignals.ListServiceDependentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServiceDependentsInput, ...func(*applicationsignals.Options)) (*applicationsignals.ListServiceDependentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServiceDependentsInput, ...func(*applicationsignals.Options)) *applicationsignals.ListServiceDependentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.ListServiceDependentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.ListServiceDependentsInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceLevelObjectives provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceLevelObjectives(ctx context.Context, params *applicationsignals.ListServiceLevelObjectivesInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.ListServiceLevelObjectivesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceLevelObjectives")
	}

	var r0 *applicationsignals.ListServiceLevelObjectivesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServiceLevelObjectivesInput, ...func(*applicationsignals.Options)) (*applicationsignals.ListServiceLevelObjectivesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServiceLevelObjectivesInput, ...func(*applicationsignals.Options)) *applicationsignals.ListServiceLevelObjectivesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.ListServiceLevelObjectivesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.ListServiceLevelObjectivesInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceOperations(ctx context.Context, params *applicationsignals.ListServiceOperationsInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.ListServiceOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceOperations")
	}

	var r0 *applicationsignals.ListServiceOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServiceOperationsInput, ...func(*applicationsignals.Options)) (*applicationsignals.ListServiceOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServiceOperationsInput, ...func(*applicationsignals.Options)) *applicationsignals.ListServiceOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.ListServiceOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.ListServiceOperationsInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServices(ctx context.Context, params *applicationsignals.ListServicesInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.ListServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *applicationsignals.ListServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServicesInput, ...func(*applicationsignals.Options)) (*applicationsignals.ListServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListServicesInput, ...func(*applicationsignals.Options)) *applicationsignals.ListServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.ListServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.ListServicesInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *applicationsignals.ListTagsForResourceInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *applicationsignals.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListTagsForResourceInput, ...func(*applicationsignals.Options)) (*applicationsignals.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.ListTagsForResourceInput, ...func(*applicationsignals.Options)) *applicationsignals.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.ListTagsForResourceInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() applicationsignals.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 applicationsignals.Options
	if rf, ok := ret.Get(0).(func() applicationsignals.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(applicationsignals.Options)
	}

	return r0
}

// StartDiscovery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDiscovery(ctx context.Context, params *applicationsignals.StartDiscoveryInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.StartDiscoveryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDiscovery")
	}

	var r0 *applicationsignals.StartDiscoveryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.StartDiscoveryInput, ...func(*applicationsignals.Options)) (*applicationsignals.StartDiscoveryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.StartDiscoveryInput, ...func(*applicationsignals.Options)) *applicationsignals.StartDiscoveryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.StartDiscoveryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.StartDiscoveryInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *applicationsignals.TagResourceInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *applicationsignals.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.TagResourceInput, ...func(*applicationsignals.Options)) (*applicationsignals.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.TagResourceInput, ...func(*applicationsignals.Options)) *applicationsignals.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.TagResourceInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *applicationsignals.UntagResourceInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *applicationsignals.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.UntagResourceInput, ...func(*applicationsignals.Options)) (*applicationsignals.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.UntagResourceInput, ...func(*applicationsignals.Options)) *applicationsignals.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.UntagResourceInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceLevelObjective provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceLevelObjective(ctx context.Context, params *applicationsignals.UpdateServiceLevelObjectiveInput, optFns ...func(*applicationsignals.Options)) (*applicationsignals.UpdateServiceLevelObjectiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceLevelObjective")
	}

	var r0 *applicationsignals.UpdateServiceLevelObjectiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.UpdateServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) (*applicationsignals.UpdateServiceLevelObjectiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationsignals.UpdateServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) *applicationsignals.UpdateServiceLevelObjectiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationsignals.UpdateServiceLevelObjectiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationsignals.UpdateServiceLevelObjectiveInput, ...func(*applicationsignals.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
