// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	networkmanager "github.com/aws/aws-sdk-go-v2/service/networkmanager"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptAttachment(ctx context.Context, params *networkmanager.AcceptAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.AcceptAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptAttachment")
	}

	var r0 *networkmanager.AcceptAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AcceptAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.AcceptAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AcceptAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.AcceptAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.AcceptAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.AcceptAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateConnectPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateConnectPeer(ctx context.Context, params *networkmanager.AssociateConnectPeerInput, optFns ...func(*networkmanager.Options)) (*networkmanager.AssociateConnectPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateConnectPeer")
	}

	var r0 *networkmanager.AssociateConnectPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AssociateConnectPeerInput, ...func(*networkmanager.Options)) (*networkmanager.AssociateConnectPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AssociateConnectPeerInput, ...func(*networkmanager.Options)) *networkmanager.AssociateConnectPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.AssociateConnectPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.AssociateConnectPeerInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateCustomerGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateCustomerGateway(ctx context.Context, params *networkmanager.AssociateCustomerGatewayInput, optFns ...func(*networkmanager.Options)) (*networkmanager.AssociateCustomerGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateCustomerGateway")
	}

	var r0 *networkmanager.AssociateCustomerGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AssociateCustomerGatewayInput, ...func(*networkmanager.Options)) (*networkmanager.AssociateCustomerGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AssociateCustomerGatewayInput, ...func(*networkmanager.Options)) *networkmanager.AssociateCustomerGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.AssociateCustomerGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.AssociateCustomerGatewayInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateLink(ctx context.Context, params *networkmanager.AssociateLinkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.AssociateLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateLink")
	}

	var r0 *networkmanager.AssociateLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AssociateLinkInput, ...func(*networkmanager.Options)) (*networkmanager.AssociateLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AssociateLinkInput, ...func(*networkmanager.Options)) *networkmanager.AssociateLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.AssociateLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.AssociateLinkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTransitGatewayConnectPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateTransitGatewayConnectPeer(ctx context.Context, params *networkmanager.AssociateTransitGatewayConnectPeerInput, optFns ...func(*networkmanager.Options)) (*networkmanager.AssociateTransitGatewayConnectPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateTransitGatewayConnectPeer")
	}

	var r0 *networkmanager.AssociateTransitGatewayConnectPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AssociateTransitGatewayConnectPeerInput, ...func(*networkmanager.Options)) (*networkmanager.AssociateTransitGatewayConnectPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.AssociateTransitGatewayConnectPeerInput, ...func(*networkmanager.Options)) *networkmanager.AssociateTransitGatewayConnectPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.AssociateTransitGatewayConnectPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.AssociateTransitGatewayConnectPeerInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnectAttachment(ctx context.Context, params *networkmanager.CreateConnectAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateConnectAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectAttachment")
	}

	var r0 *networkmanager.CreateConnectAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateConnectAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.CreateConnectAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateConnectAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.CreateConnectAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateConnectAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateConnectAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnectPeer(ctx context.Context, params *networkmanager.CreateConnectPeerInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateConnectPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectPeer")
	}

	var r0 *networkmanager.CreateConnectPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateConnectPeerInput, ...func(*networkmanager.Options)) (*networkmanager.CreateConnectPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateConnectPeerInput, ...func(*networkmanager.Options)) *networkmanager.CreateConnectPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateConnectPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateConnectPeerInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnection(ctx context.Context, params *networkmanager.CreateConnectionInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 *networkmanager.CreateConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateConnectionInput, ...func(*networkmanager.Options)) (*networkmanager.CreateConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateConnectionInput, ...func(*networkmanager.Options)) *networkmanager.CreateConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateConnectionInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCoreNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCoreNetwork(ctx context.Context, params *networkmanager.CreateCoreNetworkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateCoreNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCoreNetwork")
	}

	var r0 *networkmanager.CreateCoreNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateCoreNetworkInput, ...func(*networkmanager.Options)) (*networkmanager.CreateCoreNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateCoreNetworkInput, ...func(*networkmanager.Options)) *networkmanager.CreateCoreNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateCoreNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateCoreNetworkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDevice(ctx context.Context, params *networkmanager.CreateDeviceInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevice")
	}

	var r0 *networkmanager.CreateDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateDeviceInput, ...func(*networkmanager.Options)) (*networkmanager.CreateDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateDeviceInput, ...func(*networkmanager.Options)) *networkmanager.CreateDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateDeviceInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlobalNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGlobalNetwork(ctx context.Context, params *networkmanager.CreateGlobalNetworkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateGlobalNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlobalNetwork")
	}

	var r0 *networkmanager.CreateGlobalNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateGlobalNetworkInput, ...func(*networkmanager.Options)) (*networkmanager.CreateGlobalNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateGlobalNetworkInput, ...func(*networkmanager.Options)) *networkmanager.CreateGlobalNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateGlobalNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateGlobalNetworkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLink(ctx context.Context, params *networkmanager.CreateLinkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLink")
	}

	var r0 *networkmanager.CreateLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateLinkInput, ...func(*networkmanager.Options)) (*networkmanager.CreateLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateLinkInput, ...func(*networkmanager.Options)) *networkmanager.CreateLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateLinkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSite(ctx context.Context, params *networkmanager.CreateSiteInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateSiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSite")
	}

	var r0 *networkmanager.CreateSiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateSiteInput, ...func(*networkmanager.Options)) (*networkmanager.CreateSiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateSiteInput, ...func(*networkmanager.Options)) *networkmanager.CreateSiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateSiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateSiteInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSiteToSiteVpnAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSiteToSiteVpnAttachment(ctx context.Context, params *networkmanager.CreateSiteToSiteVpnAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateSiteToSiteVpnAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSiteToSiteVpnAttachment")
	}

	var r0 *networkmanager.CreateSiteToSiteVpnAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateSiteToSiteVpnAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.CreateSiteToSiteVpnAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateSiteToSiteVpnAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.CreateSiteToSiteVpnAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateSiteToSiteVpnAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateSiteToSiteVpnAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayPeering provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTransitGatewayPeering(ctx context.Context, params *networkmanager.CreateTransitGatewayPeeringInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateTransitGatewayPeeringOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransitGatewayPeering")
	}

	var r0 *networkmanager.CreateTransitGatewayPeeringOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateTransitGatewayPeeringInput, ...func(*networkmanager.Options)) (*networkmanager.CreateTransitGatewayPeeringOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateTransitGatewayPeeringInput, ...func(*networkmanager.Options)) *networkmanager.CreateTransitGatewayPeeringOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateTransitGatewayPeeringOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateTransitGatewayPeeringInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransitGatewayRouteTableAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTransitGatewayRouteTableAttachment(ctx context.Context, params *networkmanager.CreateTransitGatewayRouteTableAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateTransitGatewayRouteTableAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransitGatewayRouteTableAttachment")
	}

	var r0 *networkmanager.CreateTransitGatewayRouteTableAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateTransitGatewayRouteTableAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.CreateTransitGatewayRouteTableAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateTransitGatewayRouteTableAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.CreateTransitGatewayRouteTableAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateTransitGatewayRouteTableAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateTransitGatewayRouteTableAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVpcAttachment(ctx context.Context, params *networkmanager.CreateVpcAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.CreateVpcAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVpcAttachment")
	}

	var r0 *networkmanager.CreateVpcAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateVpcAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.CreateVpcAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.CreateVpcAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.CreateVpcAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.CreateVpcAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.CreateVpcAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAttachment(ctx context.Context, params *networkmanager.DeleteAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttachment")
	}

	var r0 *networkmanager.DeleteAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.DeleteAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnectPeer(ctx context.Context, params *networkmanager.DeleteConnectPeerInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteConnectPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectPeer")
	}

	var r0 *networkmanager.DeleteConnectPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteConnectPeerInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteConnectPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteConnectPeerInput, ...func(*networkmanager.Options)) *networkmanager.DeleteConnectPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteConnectPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteConnectPeerInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnection(ctx context.Context, params *networkmanager.DeleteConnectionInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnection")
	}

	var r0 *networkmanager.DeleteConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteConnectionInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteConnectionInput, ...func(*networkmanager.Options)) *networkmanager.DeleteConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteConnectionInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCoreNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCoreNetwork(ctx context.Context, params *networkmanager.DeleteCoreNetworkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteCoreNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCoreNetwork")
	}

	var r0 *networkmanager.DeleteCoreNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteCoreNetworkInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteCoreNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteCoreNetworkInput, ...func(*networkmanager.Options)) *networkmanager.DeleteCoreNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteCoreNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteCoreNetworkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCoreNetworkPolicyVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCoreNetworkPolicyVersion(ctx context.Context, params *networkmanager.DeleteCoreNetworkPolicyVersionInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteCoreNetworkPolicyVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCoreNetworkPolicyVersion")
	}

	var r0 *networkmanager.DeleteCoreNetworkPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteCoreNetworkPolicyVersionInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteCoreNetworkPolicyVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteCoreNetworkPolicyVersionInput, ...func(*networkmanager.Options)) *networkmanager.DeleteCoreNetworkPolicyVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteCoreNetworkPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteCoreNetworkPolicyVersionInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDevice(ctx context.Context, params *networkmanager.DeleteDeviceInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevice")
	}

	var r0 *networkmanager.DeleteDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteDeviceInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteDeviceInput, ...func(*networkmanager.Options)) *networkmanager.DeleteDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteDeviceInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGlobalNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGlobalNetwork(ctx context.Context, params *networkmanager.DeleteGlobalNetworkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteGlobalNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlobalNetwork")
	}

	var r0 *networkmanager.DeleteGlobalNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteGlobalNetworkInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteGlobalNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteGlobalNetworkInput, ...func(*networkmanager.Options)) *networkmanager.DeleteGlobalNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteGlobalNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteGlobalNetworkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLink(ctx context.Context, params *networkmanager.DeleteLinkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLink")
	}

	var r0 *networkmanager.DeleteLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteLinkInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteLinkInput, ...func(*networkmanager.Options)) *networkmanager.DeleteLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteLinkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePeering provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePeering(ctx context.Context, params *networkmanager.DeletePeeringInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeletePeeringOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePeering")
	}

	var r0 *networkmanager.DeletePeeringOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeletePeeringInput, ...func(*networkmanager.Options)) (*networkmanager.DeletePeeringOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeletePeeringInput, ...func(*networkmanager.Options)) *networkmanager.DeletePeeringOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeletePeeringOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeletePeeringInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcePolicy(ctx context.Context, params *networkmanager.DeleteResourcePolicyInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcePolicy")
	}

	var r0 *networkmanager.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteResourcePolicyInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteResourcePolicyInput, ...func(*networkmanager.Options)) *networkmanager.DeleteResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteResourcePolicyInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSite(ctx context.Context, params *networkmanager.DeleteSiteInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeleteSiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSite")
	}

	var r0 *networkmanager.DeleteSiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteSiteInput, ...func(*networkmanager.Options)) (*networkmanager.DeleteSiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeleteSiteInput, ...func(*networkmanager.Options)) *networkmanager.DeleteSiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeleteSiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeleteSiteInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTransitGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterTransitGateway(ctx context.Context, params *networkmanager.DeregisterTransitGatewayInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DeregisterTransitGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterTransitGateway")
	}

	var r0 *networkmanager.DeregisterTransitGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeregisterTransitGatewayInput, ...func(*networkmanager.Options)) (*networkmanager.DeregisterTransitGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DeregisterTransitGatewayInput, ...func(*networkmanager.Options)) *networkmanager.DeregisterTransitGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DeregisterTransitGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DeregisterTransitGatewayInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGlobalNetworks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGlobalNetworks(ctx context.Context, params *networkmanager.DescribeGlobalNetworksInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DescribeGlobalNetworksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGlobalNetworks")
	}

	var r0 *networkmanager.DescribeGlobalNetworksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DescribeGlobalNetworksInput, ...func(*networkmanager.Options)) (*networkmanager.DescribeGlobalNetworksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DescribeGlobalNetworksInput, ...func(*networkmanager.Options)) *networkmanager.DescribeGlobalNetworksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DescribeGlobalNetworksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DescribeGlobalNetworksInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateConnectPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateConnectPeer(ctx context.Context, params *networkmanager.DisassociateConnectPeerInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DisassociateConnectPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateConnectPeer")
	}

	var r0 *networkmanager.DisassociateConnectPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DisassociateConnectPeerInput, ...func(*networkmanager.Options)) (*networkmanager.DisassociateConnectPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DisassociateConnectPeerInput, ...func(*networkmanager.Options)) *networkmanager.DisassociateConnectPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DisassociateConnectPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DisassociateConnectPeerInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateCustomerGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateCustomerGateway(ctx context.Context, params *networkmanager.DisassociateCustomerGatewayInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DisassociateCustomerGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateCustomerGateway")
	}

	var r0 *networkmanager.DisassociateCustomerGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DisassociateCustomerGatewayInput, ...func(*networkmanager.Options)) (*networkmanager.DisassociateCustomerGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DisassociateCustomerGatewayInput, ...func(*networkmanager.Options)) *networkmanager.DisassociateCustomerGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DisassociateCustomerGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DisassociateCustomerGatewayInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateLink(ctx context.Context, params *networkmanager.DisassociateLinkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DisassociateLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateLink")
	}

	var r0 *networkmanager.DisassociateLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DisassociateLinkInput, ...func(*networkmanager.Options)) (*networkmanager.DisassociateLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DisassociateLinkInput, ...func(*networkmanager.Options)) *networkmanager.DisassociateLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DisassociateLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DisassociateLinkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTransitGatewayConnectPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateTransitGatewayConnectPeer(ctx context.Context, params *networkmanager.DisassociateTransitGatewayConnectPeerInput, optFns ...func(*networkmanager.Options)) (*networkmanager.DisassociateTransitGatewayConnectPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateTransitGatewayConnectPeer")
	}

	var r0 *networkmanager.DisassociateTransitGatewayConnectPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DisassociateTransitGatewayConnectPeerInput, ...func(*networkmanager.Options)) (*networkmanager.DisassociateTransitGatewayConnectPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.DisassociateTransitGatewayConnectPeerInput, ...func(*networkmanager.Options)) *networkmanager.DisassociateTransitGatewayConnectPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.DisassociateTransitGatewayConnectPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.DisassociateTransitGatewayConnectPeerInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteCoreNetworkChangeSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteCoreNetworkChangeSet(ctx context.Context, params *networkmanager.ExecuteCoreNetworkChangeSetInput, optFns ...func(*networkmanager.Options)) (*networkmanager.ExecuteCoreNetworkChangeSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCoreNetworkChangeSet")
	}

	var r0 *networkmanager.ExecuteCoreNetworkChangeSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ExecuteCoreNetworkChangeSetInput, ...func(*networkmanager.Options)) (*networkmanager.ExecuteCoreNetworkChangeSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ExecuteCoreNetworkChangeSetInput, ...func(*networkmanager.Options)) *networkmanager.ExecuteCoreNetworkChangeSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.ExecuteCoreNetworkChangeSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.ExecuteCoreNetworkChangeSetInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectAttachment(ctx context.Context, params *networkmanager.GetConnectAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetConnectAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectAttachment")
	}

	var r0 *networkmanager.GetConnectAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetConnectAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.GetConnectAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetConnectAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.GetConnectAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetConnectAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetConnectAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectPeer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectPeer(ctx context.Context, params *networkmanager.GetConnectPeerInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetConnectPeerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectPeer")
	}

	var r0 *networkmanager.GetConnectPeerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetConnectPeerInput, ...func(*networkmanager.Options)) (*networkmanager.GetConnectPeerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetConnectPeerInput, ...func(*networkmanager.Options)) *networkmanager.GetConnectPeerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetConnectPeerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetConnectPeerInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectPeerAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectPeerAssociations(ctx context.Context, params *networkmanager.GetConnectPeerAssociationsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetConnectPeerAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectPeerAssociations")
	}

	var r0 *networkmanager.GetConnectPeerAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetConnectPeerAssociationsInput, ...func(*networkmanager.Options)) (*networkmanager.GetConnectPeerAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetConnectPeerAssociationsInput, ...func(*networkmanager.Options)) *networkmanager.GetConnectPeerAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetConnectPeerAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetConnectPeerAssociationsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnections(ctx context.Context, params *networkmanager.GetConnectionsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnections")
	}

	var r0 *networkmanager.GetConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetConnectionsInput, ...func(*networkmanager.Options)) (*networkmanager.GetConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetConnectionsInput, ...func(*networkmanager.Options)) *networkmanager.GetConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetConnectionsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCoreNetwork(ctx context.Context, params *networkmanager.GetCoreNetworkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCoreNetwork")
	}

	var r0 *networkmanager.GetCoreNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCoreNetworkInput, ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCoreNetworkInput, ...func(*networkmanager.Options)) *networkmanager.GetCoreNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetCoreNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetCoreNetworkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreNetworkChangeEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCoreNetworkChangeEvents(ctx context.Context, params *networkmanager.GetCoreNetworkChangeEventsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkChangeEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCoreNetworkChangeEvents")
	}

	var r0 *networkmanager.GetCoreNetworkChangeEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCoreNetworkChangeEventsInput, ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkChangeEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCoreNetworkChangeEventsInput, ...func(*networkmanager.Options)) *networkmanager.GetCoreNetworkChangeEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetCoreNetworkChangeEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetCoreNetworkChangeEventsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreNetworkChangeSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCoreNetworkChangeSet(ctx context.Context, params *networkmanager.GetCoreNetworkChangeSetInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkChangeSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCoreNetworkChangeSet")
	}

	var r0 *networkmanager.GetCoreNetworkChangeSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCoreNetworkChangeSetInput, ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkChangeSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCoreNetworkChangeSetInput, ...func(*networkmanager.Options)) *networkmanager.GetCoreNetworkChangeSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetCoreNetworkChangeSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetCoreNetworkChangeSetInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreNetworkPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCoreNetworkPolicy(ctx context.Context, params *networkmanager.GetCoreNetworkPolicyInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCoreNetworkPolicy")
	}

	var r0 *networkmanager.GetCoreNetworkPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCoreNetworkPolicyInput, ...func(*networkmanager.Options)) (*networkmanager.GetCoreNetworkPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCoreNetworkPolicyInput, ...func(*networkmanager.Options)) *networkmanager.GetCoreNetworkPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetCoreNetworkPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetCoreNetworkPolicyInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomerGatewayAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCustomerGatewayAssociations(ctx context.Context, params *networkmanager.GetCustomerGatewayAssociationsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetCustomerGatewayAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomerGatewayAssociations")
	}

	var r0 *networkmanager.GetCustomerGatewayAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCustomerGatewayAssociationsInput, ...func(*networkmanager.Options)) (*networkmanager.GetCustomerGatewayAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetCustomerGatewayAssociationsInput, ...func(*networkmanager.Options)) *networkmanager.GetCustomerGatewayAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetCustomerGatewayAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetCustomerGatewayAssociationsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDevices(ctx context.Context, params *networkmanager.GetDevicesInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDevices")
	}

	var r0 *networkmanager.GetDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetDevicesInput, ...func(*networkmanager.Options)) (*networkmanager.GetDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetDevicesInput, ...func(*networkmanager.Options)) *networkmanager.GetDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetDevicesInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLinkAssociations(ctx context.Context, params *networkmanager.GetLinkAssociationsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetLinkAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkAssociations")
	}

	var r0 *networkmanager.GetLinkAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetLinkAssociationsInput, ...func(*networkmanager.Options)) (*networkmanager.GetLinkAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetLinkAssociationsInput, ...func(*networkmanager.Options)) *networkmanager.GetLinkAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetLinkAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetLinkAssociationsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLinks(ctx context.Context, params *networkmanager.GetLinksInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetLinksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLinks")
	}

	var r0 *networkmanager.GetLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetLinksInput, ...func(*networkmanager.Options)) (*networkmanager.GetLinksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetLinksInput, ...func(*networkmanager.Options)) *networkmanager.GetLinksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetLinksInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkResourceCounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkResourceCounts(ctx context.Context, params *networkmanager.GetNetworkResourceCountsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourceCountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkResourceCounts")
	}

	var r0 *networkmanager.GetNetworkResourceCountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkResourceCountsInput, ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourceCountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkResourceCountsInput, ...func(*networkmanager.Options)) *networkmanager.GetNetworkResourceCountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetNetworkResourceCountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetNetworkResourceCountsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkResourceRelationships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkResourceRelationships(ctx context.Context, params *networkmanager.GetNetworkResourceRelationshipsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourceRelationshipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkResourceRelationships")
	}

	var r0 *networkmanager.GetNetworkResourceRelationshipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkResourceRelationshipsInput, ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourceRelationshipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkResourceRelationshipsInput, ...func(*networkmanager.Options)) *networkmanager.GetNetworkResourceRelationshipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetNetworkResourceRelationshipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetNetworkResourceRelationshipsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkResources(ctx context.Context, params *networkmanager.GetNetworkResourcesInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkResources")
	}

	var r0 *networkmanager.GetNetworkResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkResourcesInput, ...func(*networkmanager.Options)) (*networkmanager.GetNetworkResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkResourcesInput, ...func(*networkmanager.Options)) *networkmanager.GetNetworkResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetNetworkResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetNetworkResourcesInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkRoutes(ctx context.Context, params *networkmanager.GetNetworkRoutesInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetNetworkRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkRoutes")
	}

	var r0 *networkmanager.GetNetworkRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkRoutesInput, ...func(*networkmanager.Options)) (*networkmanager.GetNetworkRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkRoutesInput, ...func(*networkmanager.Options)) *networkmanager.GetNetworkRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetNetworkRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetNetworkRoutesInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkTelemetry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkTelemetry(ctx context.Context, params *networkmanager.GetNetworkTelemetryInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetNetworkTelemetryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkTelemetry")
	}

	var r0 *networkmanager.GetNetworkTelemetryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkTelemetryInput, ...func(*networkmanager.Options)) (*networkmanager.GetNetworkTelemetryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetNetworkTelemetryInput, ...func(*networkmanager.Options)) *networkmanager.GetNetworkTelemetryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetNetworkTelemetryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetNetworkTelemetryInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *networkmanager.GetResourcePolicyInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *networkmanager.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetResourcePolicyInput, ...func(*networkmanager.Options)) (*networkmanager.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetResourcePolicyInput, ...func(*networkmanager.Options)) *networkmanager.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetResourcePolicyInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRouteAnalysis(ctx context.Context, params *networkmanager.GetRouteAnalysisInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetRouteAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRouteAnalysis")
	}

	var r0 *networkmanager.GetRouteAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetRouteAnalysisInput, ...func(*networkmanager.Options)) (*networkmanager.GetRouteAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetRouteAnalysisInput, ...func(*networkmanager.Options)) *networkmanager.GetRouteAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetRouteAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetRouteAnalysisInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSiteToSiteVpnAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSiteToSiteVpnAttachment(ctx context.Context, params *networkmanager.GetSiteToSiteVpnAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetSiteToSiteVpnAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSiteToSiteVpnAttachment")
	}

	var r0 *networkmanager.GetSiteToSiteVpnAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetSiteToSiteVpnAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.GetSiteToSiteVpnAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetSiteToSiteVpnAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.GetSiteToSiteVpnAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetSiteToSiteVpnAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetSiteToSiteVpnAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSites provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSites(ctx context.Context, params *networkmanager.GetSitesInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetSitesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSites")
	}

	var r0 *networkmanager.GetSitesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetSitesInput, ...func(*networkmanager.Options)) (*networkmanager.GetSitesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetSitesInput, ...func(*networkmanager.Options)) *networkmanager.GetSitesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetSitesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetSitesInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayConnectPeerAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTransitGatewayConnectPeerAssociations(ctx context.Context, params *networkmanager.GetTransitGatewayConnectPeerAssociationsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransitGatewayConnectPeerAssociations")
	}

	var r0 *networkmanager.GetTransitGatewayConnectPeerAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetTransitGatewayConnectPeerAssociationsInput, ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetTransitGatewayConnectPeerAssociationsInput, ...func(*networkmanager.Options)) *networkmanager.GetTransitGatewayConnectPeerAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetTransitGatewayConnectPeerAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetTransitGatewayConnectPeerAssociationsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayPeering provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTransitGatewayPeering(ctx context.Context, params *networkmanager.GetTransitGatewayPeeringInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayPeeringOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransitGatewayPeering")
	}

	var r0 *networkmanager.GetTransitGatewayPeeringOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetTransitGatewayPeeringInput, ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayPeeringOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetTransitGatewayPeeringInput, ...func(*networkmanager.Options)) *networkmanager.GetTransitGatewayPeeringOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetTransitGatewayPeeringOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetTransitGatewayPeeringInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayRegistrations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTransitGatewayRegistrations(ctx context.Context, params *networkmanager.GetTransitGatewayRegistrationsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayRegistrationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransitGatewayRegistrations")
	}

	var r0 *networkmanager.GetTransitGatewayRegistrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetTransitGatewayRegistrationsInput, ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayRegistrationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetTransitGatewayRegistrationsInput, ...func(*networkmanager.Options)) *networkmanager.GetTransitGatewayRegistrationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetTransitGatewayRegistrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetTransitGatewayRegistrationsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransitGatewayRouteTableAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTransitGatewayRouteTableAttachment(ctx context.Context, params *networkmanager.GetTransitGatewayRouteTableAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayRouteTableAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTransitGatewayRouteTableAttachment")
	}

	var r0 *networkmanager.GetTransitGatewayRouteTableAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetTransitGatewayRouteTableAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.GetTransitGatewayRouteTableAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetTransitGatewayRouteTableAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.GetTransitGatewayRouteTableAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetTransitGatewayRouteTableAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetTransitGatewayRouteTableAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVpcAttachment(ctx context.Context, params *networkmanager.GetVpcAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.GetVpcAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVpcAttachment")
	}

	var r0 *networkmanager.GetVpcAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetVpcAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.GetVpcAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.GetVpcAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.GetVpcAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.GetVpcAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.GetVpcAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttachments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttachments(ctx context.Context, params *networkmanager.ListAttachmentsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.ListAttachmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttachments")
	}

	var r0 *networkmanager.ListAttachmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListAttachmentsInput, ...func(*networkmanager.Options)) (*networkmanager.ListAttachmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListAttachmentsInput, ...func(*networkmanager.Options)) *networkmanager.ListAttachmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.ListAttachmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.ListAttachmentsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectPeers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectPeers(ctx context.Context, params *networkmanager.ListConnectPeersInput, optFns ...func(*networkmanager.Options)) (*networkmanager.ListConnectPeersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectPeers")
	}

	var r0 *networkmanager.ListConnectPeersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListConnectPeersInput, ...func(*networkmanager.Options)) (*networkmanager.ListConnectPeersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListConnectPeersInput, ...func(*networkmanager.Options)) *networkmanager.ListConnectPeersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.ListConnectPeersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.ListConnectPeersInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoreNetworkPolicyVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCoreNetworkPolicyVersions(ctx context.Context, params *networkmanager.ListCoreNetworkPolicyVersionsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.ListCoreNetworkPolicyVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCoreNetworkPolicyVersions")
	}

	var r0 *networkmanager.ListCoreNetworkPolicyVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListCoreNetworkPolicyVersionsInput, ...func(*networkmanager.Options)) (*networkmanager.ListCoreNetworkPolicyVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListCoreNetworkPolicyVersionsInput, ...func(*networkmanager.Options)) *networkmanager.ListCoreNetworkPolicyVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.ListCoreNetworkPolicyVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.ListCoreNetworkPolicyVersionsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoreNetworks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCoreNetworks(ctx context.Context, params *networkmanager.ListCoreNetworksInput, optFns ...func(*networkmanager.Options)) (*networkmanager.ListCoreNetworksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCoreNetworks")
	}

	var r0 *networkmanager.ListCoreNetworksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListCoreNetworksInput, ...func(*networkmanager.Options)) (*networkmanager.ListCoreNetworksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListCoreNetworksInput, ...func(*networkmanager.Options)) *networkmanager.ListCoreNetworksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.ListCoreNetworksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.ListCoreNetworksInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationServiceAccessStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizationServiceAccessStatus(ctx context.Context, params *networkmanager.ListOrganizationServiceAccessStatusInput, optFns ...func(*networkmanager.Options)) (*networkmanager.ListOrganizationServiceAccessStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationServiceAccessStatus")
	}

	var r0 *networkmanager.ListOrganizationServiceAccessStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListOrganizationServiceAccessStatusInput, ...func(*networkmanager.Options)) (*networkmanager.ListOrganizationServiceAccessStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListOrganizationServiceAccessStatusInput, ...func(*networkmanager.Options)) *networkmanager.ListOrganizationServiceAccessStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.ListOrganizationServiceAccessStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.ListOrganizationServiceAccessStatusInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPeerings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPeerings(ctx context.Context, params *networkmanager.ListPeeringsInput, optFns ...func(*networkmanager.Options)) (*networkmanager.ListPeeringsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPeerings")
	}

	var r0 *networkmanager.ListPeeringsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListPeeringsInput, ...func(*networkmanager.Options)) (*networkmanager.ListPeeringsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListPeeringsInput, ...func(*networkmanager.Options)) *networkmanager.ListPeeringsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.ListPeeringsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.ListPeeringsInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *networkmanager.ListTagsForResourceInput, optFns ...func(*networkmanager.Options)) (*networkmanager.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *networkmanager.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListTagsForResourceInput, ...func(*networkmanager.Options)) (*networkmanager.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.ListTagsForResourceInput, ...func(*networkmanager.Options)) *networkmanager.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.ListTagsForResourceInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() networkmanager.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 networkmanager.Options
	if rf, ok := ret.Get(0).(func() networkmanager.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(networkmanager.Options)
	}

	return r0
}

// PutCoreNetworkPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutCoreNetworkPolicy(ctx context.Context, params *networkmanager.PutCoreNetworkPolicyInput, optFns ...func(*networkmanager.Options)) (*networkmanager.PutCoreNetworkPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutCoreNetworkPolicy")
	}

	var r0 *networkmanager.PutCoreNetworkPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.PutCoreNetworkPolicyInput, ...func(*networkmanager.Options)) (*networkmanager.PutCoreNetworkPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.PutCoreNetworkPolicyInput, ...func(*networkmanager.Options)) *networkmanager.PutCoreNetworkPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.PutCoreNetworkPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.PutCoreNetworkPolicyInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourcePolicy(ctx context.Context, params *networkmanager.PutResourcePolicyInput, optFns ...func(*networkmanager.Options)) (*networkmanager.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourcePolicy")
	}

	var r0 *networkmanager.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.PutResourcePolicyInput, ...func(*networkmanager.Options)) (*networkmanager.PutResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.PutResourcePolicyInput, ...func(*networkmanager.Options)) *networkmanager.PutResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.PutResourcePolicyInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTransitGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterTransitGateway(ctx context.Context, params *networkmanager.RegisterTransitGatewayInput, optFns ...func(*networkmanager.Options)) (*networkmanager.RegisterTransitGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTransitGateway")
	}

	var r0 *networkmanager.RegisterTransitGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.RegisterTransitGatewayInput, ...func(*networkmanager.Options)) (*networkmanager.RegisterTransitGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.RegisterTransitGatewayInput, ...func(*networkmanager.Options)) *networkmanager.RegisterTransitGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.RegisterTransitGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.RegisterTransitGatewayInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectAttachment(ctx context.Context, params *networkmanager.RejectAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.RejectAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectAttachment")
	}

	var r0 *networkmanager.RejectAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.RejectAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.RejectAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.RejectAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.RejectAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.RejectAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.RejectAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreCoreNetworkPolicyVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreCoreNetworkPolicyVersion(ctx context.Context, params *networkmanager.RestoreCoreNetworkPolicyVersionInput, optFns ...func(*networkmanager.Options)) (*networkmanager.RestoreCoreNetworkPolicyVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreCoreNetworkPolicyVersion")
	}

	var r0 *networkmanager.RestoreCoreNetworkPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.RestoreCoreNetworkPolicyVersionInput, ...func(*networkmanager.Options)) (*networkmanager.RestoreCoreNetworkPolicyVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.RestoreCoreNetworkPolicyVersionInput, ...func(*networkmanager.Options)) *networkmanager.RestoreCoreNetworkPolicyVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.RestoreCoreNetworkPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.RestoreCoreNetworkPolicyVersionInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartOrganizationServiceAccessUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartOrganizationServiceAccessUpdate(ctx context.Context, params *networkmanager.StartOrganizationServiceAccessUpdateInput, optFns ...func(*networkmanager.Options)) (*networkmanager.StartOrganizationServiceAccessUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartOrganizationServiceAccessUpdate")
	}

	var r0 *networkmanager.StartOrganizationServiceAccessUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.StartOrganizationServiceAccessUpdateInput, ...func(*networkmanager.Options)) (*networkmanager.StartOrganizationServiceAccessUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.StartOrganizationServiceAccessUpdateInput, ...func(*networkmanager.Options)) *networkmanager.StartOrganizationServiceAccessUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.StartOrganizationServiceAccessUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.StartOrganizationServiceAccessUpdateInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRouteAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRouteAnalysis(ctx context.Context, params *networkmanager.StartRouteAnalysisInput, optFns ...func(*networkmanager.Options)) (*networkmanager.StartRouteAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRouteAnalysis")
	}

	var r0 *networkmanager.StartRouteAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.StartRouteAnalysisInput, ...func(*networkmanager.Options)) (*networkmanager.StartRouteAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.StartRouteAnalysisInput, ...func(*networkmanager.Options)) *networkmanager.StartRouteAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.StartRouteAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.StartRouteAnalysisInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *networkmanager.TagResourceInput, optFns ...func(*networkmanager.Options)) (*networkmanager.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *networkmanager.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.TagResourceInput, ...func(*networkmanager.Options)) (*networkmanager.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.TagResourceInput, ...func(*networkmanager.Options)) *networkmanager.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.TagResourceInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *networkmanager.UntagResourceInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *networkmanager.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UntagResourceInput, ...func(*networkmanager.Options)) (*networkmanager.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UntagResourceInput, ...func(*networkmanager.Options)) *networkmanager.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UntagResourceInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnection(ctx context.Context, params *networkmanager.UpdateConnectionInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UpdateConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnection")
	}

	var r0 *networkmanager.UpdateConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateConnectionInput, ...func(*networkmanager.Options)) (*networkmanager.UpdateConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateConnectionInput, ...func(*networkmanager.Options)) *networkmanager.UpdateConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UpdateConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UpdateConnectionInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCoreNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCoreNetwork(ctx context.Context, params *networkmanager.UpdateCoreNetworkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UpdateCoreNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCoreNetwork")
	}

	var r0 *networkmanager.UpdateCoreNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateCoreNetworkInput, ...func(*networkmanager.Options)) (*networkmanager.UpdateCoreNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateCoreNetworkInput, ...func(*networkmanager.Options)) *networkmanager.UpdateCoreNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UpdateCoreNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UpdateCoreNetworkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDevice(ctx context.Context, params *networkmanager.UpdateDeviceInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UpdateDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevice")
	}

	var r0 *networkmanager.UpdateDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateDeviceInput, ...func(*networkmanager.Options)) (*networkmanager.UpdateDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateDeviceInput, ...func(*networkmanager.Options)) *networkmanager.UpdateDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UpdateDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UpdateDeviceInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGlobalNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGlobalNetwork(ctx context.Context, params *networkmanager.UpdateGlobalNetworkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UpdateGlobalNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlobalNetwork")
	}

	var r0 *networkmanager.UpdateGlobalNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateGlobalNetworkInput, ...func(*networkmanager.Options)) (*networkmanager.UpdateGlobalNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateGlobalNetworkInput, ...func(*networkmanager.Options)) *networkmanager.UpdateGlobalNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UpdateGlobalNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UpdateGlobalNetworkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLink(ctx context.Context, params *networkmanager.UpdateLinkInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UpdateLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLink")
	}

	var r0 *networkmanager.UpdateLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateLinkInput, ...func(*networkmanager.Options)) (*networkmanager.UpdateLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateLinkInput, ...func(*networkmanager.Options)) *networkmanager.UpdateLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UpdateLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UpdateLinkInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNetworkResourceMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNetworkResourceMetadata(ctx context.Context, params *networkmanager.UpdateNetworkResourceMetadataInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UpdateNetworkResourceMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkResourceMetadata")
	}

	var r0 *networkmanager.UpdateNetworkResourceMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateNetworkResourceMetadataInput, ...func(*networkmanager.Options)) (*networkmanager.UpdateNetworkResourceMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateNetworkResourceMetadataInput, ...func(*networkmanager.Options)) *networkmanager.UpdateNetworkResourceMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UpdateNetworkResourceMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UpdateNetworkResourceMetadataInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSite(ctx context.Context, params *networkmanager.UpdateSiteInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UpdateSiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSite")
	}

	var r0 *networkmanager.UpdateSiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateSiteInput, ...func(*networkmanager.Options)) (*networkmanager.UpdateSiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateSiteInput, ...func(*networkmanager.Options)) *networkmanager.UpdateSiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UpdateSiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UpdateSiteInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVpcAttachment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVpcAttachment(ctx context.Context, params *networkmanager.UpdateVpcAttachmentInput, optFns ...func(*networkmanager.Options)) (*networkmanager.UpdateVpcAttachmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVpcAttachment")
	}

	var r0 *networkmanager.UpdateVpcAttachmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateVpcAttachmentInput, ...func(*networkmanager.Options)) (*networkmanager.UpdateVpcAttachmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *networkmanager.UpdateVpcAttachmentInput, ...func(*networkmanager.Options)) *networkmanager.UpdateVpcAttachmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*networkmanager.UpdateVpcAttachmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *networkmanager.UpdateVpcAttachmentInput, ...func(*networkmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
