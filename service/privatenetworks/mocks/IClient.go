// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	privatenetworks "github.com/aws/aws-sdk-go-v2/service/privatenetworks"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcknowledgeOrderReceipt provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcknowledgeOrderReceipt(ctx context.Context, params *privatenetworks.AcknowledgeOrderReceiptInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.AcknowledgeOrderReceiptOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcknowledgeOrderReceipt")
	}

	var r0 *privatenetworks.AcknowledgeOrderReceiptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.AcknowledgeOrderReceiptInput, ...func(*privatenetworks.Options)) (*privatenetworks.AcknowledgeOrderReceiptOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.AcknowledgeOrderReceiptInput, ...func(*privatenetworks.Options)) *privatenetworks.AcknowledgeOrderReceiptOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.AcknowledgeOrderReceiptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.AcknowledgeOrderReceiptInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateDeviceIdentifier provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateDeviceIdentifier(ctx context.Context, params *privatenetworks.ActivateDeviceIdentifierInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ActivateDeviceIdentifierOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateDeviceIdentifier")
	}

	var r0 *privatenetworks.ActivateDeviceIdentifierOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ActivateDeviceIdentifierInput, ...func(*privatenetworks.Options)) (*privatenetworks.ActivateDeviceIdentifierOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ActivateDeviceIdentifierInput, ...func(*privatenetworks.Options)) *privatenetworks.ActivateDeviceIdentifierOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ActivateDeviceIdentifierOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ActivateDeviceIdentifierInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateNetworkSite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateNetworkSite(ctx context.Context, params *privatenetworks.ActivateNetworkSiteInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ActivateNetworkSiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateNetworkSite")
	}

	var r0 *privatenetworks.ActivateNetworkSiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ActivateNetworkSiteInput, ...func(*privatenetworks.Options)) (*privatenetworks.ActivateNetworkSiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ActivateNetworkSiteInput, ...func(*privatenetworks.Options)) *privatenetworks.ActivateNetworkSiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ActivateNetworkSiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ActivateNetworkSiteInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfigureAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfigureAccessPoint(ctx context.Context, params *privatenetworks.ConfigureAccessPointInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ConfigureAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureAccessPoint")
	}

	var r0 *privatenetworks.ConfigureAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ConfigureAccessPointInput, ...func(*privatenetworks.Options)) (*privatenetworks.ConfigureAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ConfigureAccessPointInput, ...func(*privatenetworks.Options)) *privatenetworks.ConfigureAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ConfigureAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ConfigureAccessPointInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNetwork(ctx context.Context, params *privatenetworks.CreateNetworkInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.CreateNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetwork")
	}

	var r0 *privatenetworks.CreateNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.CreateNetworkInput, ...func(*privatenetworks.Options)) (*privatenetworks.CreateNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.CreateNetworkInput, ...func(*privatenetworks.Options)) *privatenetworks.CreateNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.CreateNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.CreateNetworkInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkSite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNetworkSite(ctx context.Context, params *privatenetworks.CreateNetworkSiteInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.CreateNetworkSiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkSite")
	}

	var r0 *privatenetworks.CreateNetworkSiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.CreateNetworkSiteInput, ...func(*privatenetworks.Options)) (*privatenetworks.CreateNetworkSiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.CreateNetworkSiteInput, ...func(*privatenetworks.Options)) *privatenetworks.CreateNetworkSiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.CreateNetworkSiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.CreateNetworkSiteInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateDeviceIdentifier provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeactivateDeviceIdentifier(ctx context.Context, params *privatenetworks.DeactivateDeviceIdentifierInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.DeactivateDeviceIdentifierOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateDeviceIdentifier")
	}

	var r0 *privatenetworks.DeactivateDeviceIdentifierOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.DeactivateDeviceIdentifierInput, ...func(*privatenetworks.Options)) (*privatenetworks.DeactivateDeviceIdentifierOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.DeactivateDeviceIdentifierInput, ...func(*privatenetworks.Options)) *privatenetworks.DeactivateDeviceIdentifierOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.DeactivateDeviceIdentifierOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.DeactivateDeviceIdentifierInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNetwork(ctx context.Context, params *privatenetworks.DeleteNetworkInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.DeleteNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetwork")
	}

	var r0 *privatenetworks.DeleteNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.DeleteNetworkInput, ...func(*privatenetworks.Options)) (*privatenetworks.DeleteNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.DeleteNetworkInput, ...func(*privatenetworks.Options)) *privatenetworks.DeleteNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.DeleteNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.DeleteNetworkInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkSite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNetworkSite(ctx context.Context, params *privatenetworks.DeleteNetworkSiteInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.DeleteNetworkSiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkSite")
	}

	var r0 *privatenetworks.DeleteNetworkSiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.DeleteNetworkSiteInput, ...func(*privatenetworks.Options)) (*privatenetworks.DeleteNetworkSiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.DeleteNetworkSiteInput, ...func(*privatenetworks.Options)) *privatenetworks.DeleteNetworkSiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.DeleteNetworkSiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.DeleteNetworkSiteInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceIdentifier provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeviceIdentifier(ctx context.Context, params *privatenetworks.GetDeviceIdentifierInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.GetDeviceIdentifierOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceIdentifier")
	}

	var r0 *privatenetworks.GetDeviceIdentifierOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetDeviceIdentifierInput, ...func(*privatenetworks.Options)) (*privatenetworks.GetDeviceIdentifierOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetDeviceIdentifierInput, ...func(*privatenetworks.Options)) *privatenetworks.GetDeviceIdentifierOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.GetDeviceIdentifierOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.GetDeviceIdentifierInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetwork(ctx context.Context, params *privatenetworks.GetNetworkInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.GetNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetwork")
	}

	var r0 *privatenetworks.GetNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetNetworkInput, ...func(*privatenetworks.Options)) (*privatenetworks.GetNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetNetworkInput, ...func(*privatenetworks.Options)) *privatenetworks.GetNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.GetNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.GetNetworkInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkResource(ctx context.Context, params *privatenetworks.GetNetworkResourceInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.GetNetworkResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkResource")
	}

	var r0 *privatenetworks.GetNetworkResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetNetworkResourceInput, ...func(*privatenetworks.Options)) (*privatenetworks.GetNetworkResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetNetworkResourceInput, ...func(*privatenetworks.Options)) *privatenetworks.GetNetworkResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.GetNetworkResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.GetNetworkResourceInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkSite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkSite(ctx context.Context, params *privatenetworks.GetNetworkSiteInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.GetNetworkSiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkSite")
	}

	var r0 *privatenetworks.GetNetworkSiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetNetworkSiteInput, ...func(*privatenetworks.Options)) (*privatenetworks.GetNetworkSiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetNetworkSiteInput, ...func(*privatenetworks.Options)) *privatenetworks.GetNetworkSiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.GetNetworkSiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.GetNetworkSiteInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOrder(ctx context.Context, params *privatenetworks.GetOrderInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.GetOrderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrder")
	}

	var r0 *privatenetworks.GetOrderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetOrderInput, ...func(*privatenetworks.Options)) (*privatenetworks.GetOrderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.GetOrderInput, ...func(*privatenetworks.Options)) *privatenetworks.GetOrderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.GetOrderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.GetOrderInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeviceIdentifiers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeviceIdentifiers(ctx context.Context, params *privatenetworks.ListDeviceIdentifiersInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ListDeviceIdentifiersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceIdentifiers")
	}

	var r0 *privatenetworks.ListDeviceIdentifiersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListDeviceIdentifiersInput, ...func(*privatenetworks.Options)) (*privatenetworks.ListDeviceIdentifiersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListDeviceIdentifiersInput, ...func(*privatenetworks.Options)) *privatenetworks.ListDeviceIdentifiersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ListDeviceIdentifiersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ListDeviceIdentifiersInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworkResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNetworkResources(ctx context.Context, params *privatenetworks.ListNetworkResourcesInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ListNetworkResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkResources")
	}

	var r0 *privatenetworks.ListNetworkResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListNetworkResourcesInput, ...func(*privatenetworks.Options)) (*privatenetworks.ListNetworkResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListNetworkResourcesInput, ...func(*privatenetworks.Options)) *privatenetworks.ListNetworkResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ListNetworkResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ListNetworkResourcesInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworkSites provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNetworkSites(ctx context.Context, params *privatenetworks.ListNetworkSitesInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ListNetworkSitesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkSites")
	}

	var r0 *privatenetworks.ListNetworkSitesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListNetworkSitesInput, ...func(*privatenetworks.Options)) (*privatenetworks.ListNetworkSitesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListNetworkSitesInput, ...func(*privatenetworks.Options)) *privatenetworks.ListNetworkSitesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ListNetworkSitesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ListNetworkSitesInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNetworks(ctx context.Context, params *privatenetworks.ListNetworksInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ListNetworksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworks")
	}

	var r0 *privatenetworks.ListNetworksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListNetworksInput, ...func(*privatenetworks.Options)) (*privatenetworks.ListNetworksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListNetworksInput, ...func(*privatenetworks.Options)) *privatenetworks.ListNetworksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ListNetworksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ListNetworksInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrders(ctx context.Context, params *privatenetworks.ListOrdersInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ListOrdersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrders")
	}

	var r0 *privatenetworks.ListOrdersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListOrdersInput, ...func(*privatenetworks.Options)) (*privatenetworks.ListOrdersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListOrdersInput, ...func(*privatenetworks.Options)) *privatenetworks.ListOrdersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ListOrdersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ListOrdersInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *privatenetworks.ListTagsForResourceInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *privatenetworks.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListTagsForResourceInput, ...func(*privatenetworks.Options)) (*privatenetworks.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.ListTagsForResourceInput, ...func(*privatenetworks.Options)) *privatenetworks.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.ListTagsForResourceInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() privatenetworks.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 privatenetworks.Options
	if rf, ok := ret.Get(0).(func() privatenetworks.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(privatenetworks.Options)
	}

	return r0
}

// Ping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Ping(ctx context.Context, params *privatenetworks.PingInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.PingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 *privatenetworks.PingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.PingInput, ...func(*privatenetworks.Options)) (*privatenetworks.PingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.PingInput, ...func(*privatenetworks.Options)) *privatenetworks.PingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.PingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.PingInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartNetworkResourceUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartNetworkResourceUpdate(ctx context.Context, params *privatenetworks.StartNetworkResourceUpdateInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.StartNetworkResourceUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartNetworkResourceUpdate")
	}

	var r0 *privatenetworks.StartNetworkResourceUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.StartNetworkResourceUpdateInput, ...func(*privatenetworks.Options)) (*privatenetworks.StartNetworkResourceUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.StartNetworkResourceUpdateInput, ...func(*privatenetworks.Options)) *privatenetworks.StartNetworkResourceUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.StartNetworkResourceUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.StartNetworkResourceUpdateInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *privatenetworks.TagResourceInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *privatenetworks.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.TagResourceInput, ...func(*privatenetworks.Options)) (*privatenetworks.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.TagResourceInput, ...func(*privatenetworks.Options)) *privatenetworks.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.TagResourceInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *privatenetworks.UntagResourceInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *privatenetworks.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.UntagResourceInput, ...func(*privatenetworks.Options)) (*privatenetworks.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.UntagResourceInput, ...func(*privatenetworks.Options)) *privatenetworks.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.UntagResourceInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNetworkSite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNetworkSite(ctx context.Context, params *privatenetworks.UpdateNetworkSiteInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.UpdateNetworkSiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkSite")
	}

	var r0 *privatenetworks.UpdateNetworkSiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.UpdateNetworkSiteInput, ...func(*privatenetworks.Options)) (*privatenetworks.UpdateNetworkSiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.UpdateNetworkSiteInput, ...func(*privatenetworks.Options)) *privatenetworks.UpdateNetworkSiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.UpdateNetworkSiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.UpdateNetworkSiteInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNetworkSitePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNetworkSitePlan(ctx context.Context, params *privatenetworks.UpdateNetworkSitePlanInput, optFns ...func(*privatenetworks.Options)) (*privatenetworks.UpdateNetworkSitePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkSitePlan")
	}

	var r0 *privatenetworks.UpdateNetworkSitePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.UpdateNetworkSitePlanInput, ...func(*privatenetworks.Options)) (*privatenetworks.UpdateNetworkSitePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *privatenetworks.UpdateNetworkSitePlanInput, ...func(*privatenetworks.Options)) *privatenetworks.UpdateNetworkSitePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*privatenetworks.UpdateNetworkSitePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *privatenetworks.UpdateNetworkSitePlanInput, ...func(*privatenetworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
