// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	healthlake "github.com/aws/aws-sdk-go-v2/service/healthlake"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateFHIRDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFHIRDatastore(ctx context.Context, params *healthlake.CreateFHIRDatastoreInput, optFns ...func(*healthlake.Options)) (*healthlake.CreateFHIRDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFHIRDatastore")
	}

	var r0 *healthlake.CreateFHIRDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.CreateFHIRDatastoreInput, ...func(*healthlake.Options)) (*healthlake.CreateFHIRDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.CreateFHIRDatastoreInput, ...func(*healthlake.Options)) *healthlake.CreateFHIRDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.CreateFHIRDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.CreateFHIRDatastoreInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFHIRDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFHIRDatastore(ctx context.Context, params *healthlake.DeleteFHIRDatastoreInput, optFns ...func(*healthlake.Options)) (*healthlake.DeleteFHIRDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFHIRDatastore")
	}

	var r0 *healthlake.DeleteFHIRDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.DeleteFHIRDatastoreInput, ...func(*healthlake.Options)) (*healthlake.DeleteFHIRDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.DeleteFHIRDatastoreInput, ...func(*healthlake.Options)) *healthlake.DeleteFHIRDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.DeleteFHIRDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.DeleteFHIRDatastoreInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFHIRDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFHIRDatastore(ctx context.Context, params *healthlake.DescribeFHIRDatastoreInput, optFns ...func(*healthlake.Options)) (*healthlake.DescribeFHIRDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFHIRDatastore")
	}

	var r0 *healthlake.DescribeFHIRDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.DescribeFHIRDatastoreInput, ...func(*healthlake.Options)) (*healthlake.DescribeFHIRDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.DescribeFHIRDatastoreInput, ...func(*healthlake.Options)) *healthlake.DescribeFHIRDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.DescribeFHIRDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.DescribeFHIRDatastoreInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFHIRExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFHIRExportJob(ctx context.Context, params *healthlake.DescribeFHIRExportJobInput, optFns ...func(*healthlake.Options)) (*healthlake.DescribeFHIRExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFHIRExportJob")
	}

	var r0 *healthlake.DescribeFHIRExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.DescribeFHIRExportJobInput, ...func(*healthlake.Options)) (*healthlake.DescribeFHIRExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.DescribeFHIRExportJobInput, ...func(*healthlake.Options)) *healthlake.DescribeFHIRExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.DescribeFHIRExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.DescribeFHIRExportJobInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFHIRImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFHIRImportJob(ctx context.Context, params *healthlake.DescribeFHIRImportJobInput, optFns ...func(*healthlake.Options)) (*healthlake.DescribeFHIRImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFHIRImportJob")
	}

	var r0 *healthlake.DescribeFHIRImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.DescribeFHIRImportJobInput, ...func(*healthlake.Options)) (*healthlake.DescribeFHIRImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.DescribeFHIRImportJobInput, ...func(*healthlake.Options)) *healthlake.DescribeFHIRImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.DescribeFHIRImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.DescribeFHIRImportJobInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFHIRDatastores provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFHIRDatastores(ctx context.Context, params *healthlake.ListFHIRDatastoresInput, optFns ...func(*healthlake.Options)) (*healthlake.ListFHIRDatastoresOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFHIRDatastores")
	}

	var r0 *healthlake.ListFHIRDatastoresOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.ListFHIRDatastoresInput, ...func(*healthlake.Options)) (*healthlake.ListFHIRDatastoresOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.ListFHIRDatastoresInput, ...func(*healthlake.Options)) *healthlake.ListFHIRDatastoresOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.ListFHIRDatastoresOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.ListFHIRDatastoresInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFHIRExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFHIRExportJobs(ctx context.Context, params *healthlake.ListFHIRExportJobsInput, optFns ...func(*healthlake.Options)) (*healthlake.ListFHIRExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFHIRExportJobs")
	}

	var r0 *healthlake.ListFHIRExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.ListFHIRExportJobsInput, ...func(*healthlake.Options)) (*healthlake.ListFHIRExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.ListFHIRExportJobsInput, ...func(*healthlake.Options)) *healthlake.ListFHIRExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.ListFHIRExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.ListFHIRExportJobsInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFHIRImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFHIRImportJobs(ctx context.Context, params *healthlake.ListFHIRImportJobsInput, optFns ...func(*healthlake.Options)) (*healthlake.ListFHIRImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFHIRImportJobs")
	}

	var r0 *healthlake.ListFHIRImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.ListFHIRImportJobsInput, ...func(*healthlake.Options)) (*healthlake.ListFHIRImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.ListFHIRImportJobsInput, ...func(*healthlake.Options)) *healthlake.ListFHIRImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.ListFHIRImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.ListFHIRImportJobsInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *healthlake.ListTagsForResourceInput, optFns ...func(*healthlake.Options)) (*healthlake.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *healthlake.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.ListTagsForResourceInput, ...func(*healthlake.Options)) (*healthlake.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.ListTagsForResourceInput, ...func(*healthlake.Options)) *healthlake.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.ListTagsForResourceInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() healthlake.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 healthlake.Options
	if rf, ok := ret.Get(0).(func() healthlake.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(healthlake.Options)
	}

	return r0
}

// StartFHIRExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartFHIRExportJob(ctx context.Context, params *healthlake.StartFHIRExportJobInput, optFns ...func(*healthlake.Options)) (*healthlake.StartFHIRExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartFHIRExportJob")
	}

	var r0 *healthlake.StartFHIRExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.StartFHIRExportJobInput, ...func(*healthlake.Options)) (*healthlake.StartFHIRExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.StartFHIRExportJobInput, ...func(*healthlake.Options)) *healthlake.StartFHIRExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.StartFHIRExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.StartFHIRExportJobInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartFHIRImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartFHIRImportJob(ctx context.Context, params *healthlake.StartFHIRImportJobInput, optFns ...func(*healthlake.Options)) (*healthlake.StartFHIRImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartFHIRImportJob")
	}

	var r0 *healthlake.StartFHIRImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.StartFHIRImportJobInput, ...func(*healthlake.Options)) (*healthlake.StartFHIRImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.StartFHIRImportJobInput, ...func(*healthlake.Options)) *healthlake.StartFHIRImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.StartFHIRImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.StartFHIRImportJobInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *healthlake.TagResourceInput, optFns ...func(*healthlake.Options)) (*healthlake.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *healthlake.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.TagResourceInput, ...func(*healthlake.Options)) (*healthlake.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.TagResourceInput, ...func(*healthlake.Options)) *healthlake.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.TagResourceInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *healthlake.UntagResourceInput, optFns ...func(*healthlake.Options)) (*healthlake.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *healthlake.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.UntagResourceInput, ...func(*healthlake.Options)) (*healthlake.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *healthlake.UntagResourceInput, ...func(*healthlake.Options)) *healthlake.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*healthlake.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *healthlake.UntagResourceInput, ...func(*healthlake.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
