// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	efs "github.com/aws/aws-sdk-go-v2/service/efs"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccessPoint(ctx context.Context, params *efs.CreateAccessPointInput, optFns ...func(*efs.Options)) (*efs.CreateAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessPoint")
	}

	var r0 *efs.CreateAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateAccessPointInput, ...func(*efs.Options)) (*efs.CreateAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateAccessPointInput, ...func(*efs.Options)) *efs.CreateAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.CreateAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.CreateAccessPointInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFileSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFileSystem(ctx context.Context, params *efs.CreateFileSystemInput, optFns ...func(*efs.Options)) (*efs.CreateFileSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFileSystem")
	}

	var r0 *efs.CreateFileSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateFileSystemInput, ...func(*efs.Options)) (*efs.CreateFileSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateFileSystemInput, ...func(*efs.Options)) *efs.CreateFileSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.CreateFileSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.CreateFileSystemInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMountTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMountTarget(ctx context.Context, params *efs.CreateMountTargetInput, optFns ...func(*efs.Options)) (*efs.CreateMountTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMountTarget")
	}

	var r0 *efs.CreateMountTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateMountTargetInput, ...func(*efs.Options)) (*efs.CreateMountTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateMountTargetInput, ...func(*efs.Options)) *efs.CreateMountTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.CreateMountTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.CreateMountTargetInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationConfiguration(ctx context.Context, params *efs.CreateReplicationConfigurationInput, optFns ...func(*efs.Options)) (*efs.CreateReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationConfiguration")
	}

	var r0 *efs.CreateReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateReplicationConfigurationInput, ...func(*efs.Options)) (*efs.CreateReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateReplicationConfigurationInput, ...func(*efs.Options)) *efs.CreateReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.CreateReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.CreateReplicationConfigurationInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTags(ctx context.Context, params *efs.CreateTagsInput, optFns ...func(*efs.Options)) (*efs.CreateTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTags")
	}

	var r0 *efs.CreateTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateTagsInput, ...func(*efs.Options)) (*efs.CreateTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.CreateTagsInput, ...func(*efs.Options)) *efs.CreateTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.CreateTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.CreateTagsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessPoint(ctx context.Context, params *efs.DeleteAccessPointInput, optFns ...func(*efs.Options)) (*efs.DeleteAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessPoint")
	}

	var r0 *efs.DeleteAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteAccessPointInput, ...func(*efs.Options)) (*efs.DeleteAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteAccessPointInput, ...func(*efs.Options)) *efs.DeleteAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DeleteAccessPointInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFileSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFileSystem(ctx context.Context, params *efs.DeleteFileSystemInput, optFns ...func(*efs.Options)) (*efs.DeleteFileSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFileSystem")
	}

	var r0 *efs.DeleteFileSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteFileSystemInput, ...func(*efs.Options)) (*efs.DeleteFileSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteFileSystemInput, ...func(*efs.Options)) *efs.DeleteFileSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteFileSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DeleteFileSystemInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFileSystemPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFileSystemPolicy(ctx context.Context, params *efs.DeleteFileSystemPolicyInput, optFns ...func(*efs.Options)) (*efs.DeleteFileSystemPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFileSystemPolicy")
	}

	var r0 *efs.DeleteFileSystemPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteFileSystemPolicyInput, ...func(*efs.Options)) (*efs.DeleteFileSystemPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteFileSystemPolicyInput, ...func(*efs.Options)) *efs.DeleteFileSystemPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteFileSystemPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DeleteFileSystemPolicyInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMountTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMountTarget(ctx context.Context, params *efs.DeleteMountTargetInput, optFns ...func(*efs.Options)) (*efs.DeleteMountTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMountTarget")
	}

	var r0 *efs.DeleteMountTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteMountTargetInput, ...func(*efs.Options)) (*efs.DeleteMountTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteMountTargetInput, ...func(*efs.Options)) *efs.DeleteMountTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteMountTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DeleteMountTargetInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationConfiguration(ctx context.Context, params *efs.DeleteReplicationConfigurationInput, optFns ...func(*efs.Options)) (*efs.DeleteReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationConfiguration")
	}

	var r0 *efs.DeleteReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteReplicationConfigurationInput, ...func(*efs.Options)) (*efs.DeleteReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteReplicationConfigurationInput, ...func(*efs.Options)) *efs.DeleteReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DeleteReplicationConfigurationInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTags(ctx context.Context, params *efs.DeleteTagsInput, optFns ...func(*efs.Options)) (*efs.DeleteTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTags")
	}

	var r0 *efs.DeleteTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteTagsInput, ...func(*efs.Options)) (*efs.DeleteTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DeleteTagsInput, ...func(*efs.Options)) *efs.DeleteTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DeleteTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DeleteTagsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccessPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccessPoints(ctx context.Context, params *efs.DescribeAccessPointsInput, optFns ...func(*efs.Options)) (*efs.DescribeAccessPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccessPoints")
	}

	var r0 *efs.DescribeAccessPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeAccessPointsInput, ...func(*efs.Options)) (*efs.DescribeAccessPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeAccessPointsInput, ...func(*efs.Options)) *efs.DescribeAccessPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeAccessPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeAccessPointsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountPreferences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountPreferences(ctx context.Context, params *efs.DescribeAccountPreferencesInput, optFns ...func(*efs.Options)) (*efs.DescribeAccountPreferencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountPreferences")
	}

	var r0 *efs.DescribeAccountPreferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeAccountPreferencesInput, ...func(*efs.Options)) (*efs.DescribeAccountPreferencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeAccountPreferencesInput, ...func(*efs.Options)) *efs.DescribeAccountPreferencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeAccountPreferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeAccountPreferencesInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBackupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBackupPolicy(ctx context.Context, params *efs.DescribeBackupPolicyInput, optFns ...func(*efs.Options)) (*efs.DescribeBackupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBackupPolicy")
	}

	var r0 *efs.DescribeBackupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeBackupPolicyInput, ...func(*efs.Options)) (*efs.DescribeBackupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeBackupPolicyInput, ...func(*efs.Options)) *efs.DescribeBackupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeBackupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeBackupPolicyInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFileSystemPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFileSystemPolicy(ctx context.Context, params *efs.DescribeFileSystemPolicyInput, optFns ...func(*efs.Options)) (*efs.DescribeFileSystemPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFileSystemPolicy")
	}

	var r0 *efs.DescribeFileSystemPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeFileSystemPolicyInput, ...func(*efs.Options)) (*efs.DescribeFileSystemPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeFileSystemPolicyInput, ...func(*efs.Options)) *efs.DescribeFileSystemPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeFileSystemPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeFileSystemPolicyInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFileSystems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFileSystems(ctx context.Context, params *efs.DescribeFileSystemsInput, optFns ...func(*efs.Options)) (*efs.DescribeFileSystemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFileSystems")
	}

	var r0 *efs.DescribeFileSystemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeFileSystemsInput, ...func(*efs.Options)) (*efs.DescribeFileSystemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeFileSystemsInput, ...func(*efs.Options)) *efs.DescribeFileSystemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeFileSystemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeFileSystemsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLifecycleConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLifecycleConfiguration(ctx context.Context, params *efs.DescribeLifecycleConfigurationInput, optFns ...func(*efs.Options)) (*efs.DescribeLifecycleConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLifecycleConfiguration")
	}

	var r0 *efs.DescribeLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeLifecycleConfigurationInput, ...func(*efs.Options)) (*efs.DescribeLifecycleConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeLifecycleConfigurationInput, ...func(*efs.Options)) *efs.DescribeLifecycleConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeLifecycleConfigurationInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMountTargetSecurityGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMountTargetSecurityGroups(ctx context.Context, params *efs.DescribeMountTargetSecurityGroupsInput, optFns ...func(*efs.Options)) (*efs.DescribeMountTargetSecurityGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMountTargetSecurityGroups")
	}

	var r0 *efs.DescribeMountTargetSecurityGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeMountTargetSecurityGroupsInput, ...func(*efs.Options)) (*efs.DescribeMountTargetSecurityGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeMountTargetSecurityGroupsInput, ...func(*efs.Options)) *efs.DescribeMountTargetSecurityGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeMountTargetSecurityGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeMountTargetSecurityGroupsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMountTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMountTargets(ctx context.Context, params *efs.DescribeMountTargetsInput, optFns ...func(*efs.Options)) (*efs.DescribeMountTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMountTargets")
	}

	var r0 *efs.DescribeMountTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeMountTargetsInput, ...func(*efs.Options)) (*efs.DescribeMountTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeMountTargetsInput, ...func(*efs.Options)) *efs.DescribeMountTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeMountTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeMountTargetsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationConfigurations(ctx context.Context, params *efs.DescribeReplicationConfigurationsInput, optFns ...func(*efs.Options)) (*efs.DescribeReplicationConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationConfigurations")
	}

	var r0 *efs.DescribeReplicationConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeReplicationConfigurationsInput, ...func(*efs.Options)) (*efs.DescribeReplicationConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeReplicationConfigurationsInput, ...func(*efs.Options)) *efs.DescribeReplicationConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeReplicationConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeReplicationConfigurationsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTags(ctx context.Context, params *efs.DescribeTagsInput, optFns ...func(*efs.Options)) (*efs.DescribeTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTags")
	}

	var r0 *efs.DescribeTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeTagsInput, ...func(*efs.Options)) (*efs.DescribeTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.DescribeTagsInput, ...func(*efs.Options)) *efs.DescribeTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.DescribeTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.DescribeTagsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *efs.ListTagsForResourceInput, optFns ...func(*efs.Options)) (*efs.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *efs.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.ListTagsForResourceInput, ...func(*efs.Options)) (*efs.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.ListTagsForResourceInput, ...func(*efs.Options)) *efs.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.ListTagsForResourceInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyMountTargetSecurityGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyMountTargetSecurityGroups(ctx context.Context, params *efs.ModifyMountTargetSecurityGroupsInput, optFns ...func(*efs.Options)) (*efs.ModifyMountTargetSecurityGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyMountTargetSecurityGroups")
	}

	var r0 *efs.ModifyMountTargetSecurityGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.ModifyMountTargetSecurityGroupsInput, ...func(*efs.Options)) (*efs.ModifyMountTargetSecurityGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.ModifyMountTargetSecurityGroupsInput, ...func(*efs.Options)) *efs.ModifyMountTargetSecurityGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.ModifyMountTargetSecurityGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.ModifyMountTargetSecurityGroupsInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() efs.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 efs.Options
	if rf, ok := ret.Get(0).(func() efs.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(efs.Options)
	}

	return r0
}

// PutAccountPreferences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountPreferences(ctx context.Context, params *efs.PutAccountPreferencesInput, optFns ...func(*efs.Options)) (*efs.PutAccountPreferencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountPreferences")
	}

	var r0 *efs.PutAccountPreferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.PutAccountPreferencesInput, ...func(*efs.Options)) (*efs.PutAccountPreferencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.PutAccountPreferencesInput, ...func(*efs.Options)) *efs.PutAccountPreferencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.PutAccountPreferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.PutAccountPreferencesInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBackupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBackupPolicy(ctx context.Context, params *efs.PutBackupPolicyInput, optFns ...func(*efs.Options)) (*efs.PutBackupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBackupPolicy")
	}

	var r0 *efs.PutBackupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.PutBackupPolicyInput, ...func(*efs.Options)) (*efs.PutBackupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.PutBackupPolicyInput, ...func(*efs.Options)) *efs.PutBackupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.PutBackupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.PutBackupPolicyInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFileSystemPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutFileSystemPolicy(ctx context.Context, params *efs.PutFileSystemPolicyInput, optFns ...func(*efs.Options)) (*efs.PutFileSystemPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutFileSystemPolicy")
	}

	var r0 *efs.PutFileSystemPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.PutFileSystemPolicyInput, ...func(*efs.Options)) (*efs.PutFileSystemPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.PutFileSystemPolicyInput, ...func(*efs.Options)) *efs.PutFileSystemPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.PutFileSystemPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.PutFileSystemPolicyInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutLifecycleConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutLifecycleConfiguration(ctx context.Context, params *efs.PutLifecycleConfigurationInput, optFns ...func(*efs.Options)) (*efs.PutLifecycleConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutLifecycleConfiguration")
	}

	var r0 *efs.PutLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.PutLifecycleConfigurationInput, ...func(*efs.Options)) (*efs.PutLifecycleConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.PutLifecycleConfigurationInput, ...func(*efs.Options)) *efs.PutLifecycleConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.PutLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.PutLifecycleConfigurationInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *efs.TagResourceInput, optFns ...func(*efs.Options)) (*efs.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *efs.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.TagResourceInput, ...func(*efs.Options)) (*efs.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.TagResourceInput, ...func(*efs.Options)) *efs.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.TagResourceInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *efs.UntagResourceInput, optFns ...func(*efs.Options)) (*efs.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *efs.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.UntagResourceInput, ...func(*efs.Options)) (*efs.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.UntagResourceInput, ...func(*efs.Options)) *efs.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.UntagResourceInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFileSystem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFileSystem(ctx context.Context, params *efs.UpdateFileSystemInput, optFns ...func(*efs.Options)) (*efs.UpdateFileSystemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileSystem")
	}

	var r0 *efs.UpdateFileSystemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.UpdateFileSystemInput, ...func(*efs.Options)) (*efs.UpdateFileSystemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.UpdateFileSystemInput, ...func(*efs.Options)) *efs.UpdateFileSystemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.UpdateFileSystemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.UpdateFileSystemInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFileSystemProtection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFileSystemProtection(ctx context.Context, params *efs.UpdateFileSystemProtectionInput, optFns ...func(*efs.Options)) (*efs.UpdateFileSystemProtectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFileSystemProtection")
	}

	var r0 *efs.UpdateFileSystemProtectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *efs.UpdateFileSystemProtectionInput, ...func(*efs.Options)) (*efs.UpdateFileSystemProtectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *efs.UpdateFileSystemProtectionInput, ...func(*efs.Options)) *efs.UpdateFileSystemProtectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*efs.UpdateFileSystemProtectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *efs.UpdateFileSystemProtectionInput, ...func(*efs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
