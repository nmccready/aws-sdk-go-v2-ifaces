// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	bcmpricingcalculator "github.com/aws/aws-sdk-go-v2/service/bcmpricingcalculator"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchCreateBillScenarioCommitmentModification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateBillScenarioCommitmentModification(ctx context.Context, params *bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateBillScenarioCommitmentModification")
	}

	var r0 *bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchCreateBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCreateBillScenarioUsageModification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateBillScenarioUsageModification(ctx context.Context, params *bcmpricingcalculator.BatchCreateBillScenarioUsageModificationInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchCreateBillScenarioUsageModificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateBillScenarioUsageModification")
	}

	var r0 *bcmpricingcalculator.BatchCreateBillScenarioUsageModificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchCreateBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchCreateBillScenarioUsageModificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchCreateBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchCreateBillScenarioUsageModificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchCreateBillScenarioUsageModificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchCreateBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCreateWorkloadEstimateUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateWorkloadEstimateUsage(ctx context.Context, params *bcmpricingcalculator.BatchCreateWorkloadEstimateUsageInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchCreateWorkloadEstimateUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateWorkloadEstimateUsage")
	}

	var r0 *bcmpricingcalculator.BatchCreateWorkloadEstimateUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchCreateWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchCreateWorkloadEstimateUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchCreateWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchCreateWorkloadEstimateUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchCreateWorkloadEstimateUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchCreateWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteBillScenarioCommitmentModification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteBillScenarioCommitmentModification(ctx context.Context, params *bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteBillScenarioCommitmentModification")
	}

	var r0 *bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchDeleteBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteBillScenarioUsageModification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteBillScenarioUsageModification(ctx context.Context, params *bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteBillScenarioUsageModification")
	}

	var r0 *bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchDeleteBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteWorkloadEstimateUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteWorkloadEstimateUsage(ctx context.Context, params *bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteWorkloadEstimateUsage")
	}

	var r0 *bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchDeleteWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateBillScenarioCommitmentModification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateBillScenarioCommitmentModification(ctx context.Context, params *bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateBillScenarioCommitmentModification")
	}

	var r0 *bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchUpdateBillScenarioCommitmentModificationInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateBillScenarioUsageModification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateBillScenarioUsageModification(ctx context.Context, params *bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateBillScenarioUsageModification")
	}

	var r0 *bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchUpdateBillScenarioUsageModificationInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateWorkloadEstimateUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateWorkloadEstimateUsage(ctx context.Context, params *bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateWorkloadEstimateUsage")
	}

	var r0 *bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.BatchUpdateWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBillEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBillEstimate(ctx context.Context, params *bcmpricingcalculator.CreateBillEstimateInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.CreateBillEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBillEstimate")
	}

	var r0 *bcmpricingcalculator.CreateBillEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.CreateBillEstimateInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.CreateBillEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.CreateBillEstimateInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.CreateBillEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.CreateBillEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.CreateBillEstimateInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBillScenario provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBillScenario(ctx context.Context, params *bcmpricingcalculator.CreateBillScenarioInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.CreateBillScenarioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBillScenario")
	}

	var r0 *bcmpricingcalculator.CreateBillScenarioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.CreateBillScenarioInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.CreateBillScenarioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.CreateBillScenarioInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.CreateBillScenarioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.CreateBillScenarioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.CreateBillScenarioInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkloadEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkloadEstimate(ctx context.Context, params *bcmpricingcalculator.CreateWorkloadEstimateInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.CreateWorkloadEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkloadEstimate")
	}

	var r0 *bcmpricingcalculator.CreateWorkloadEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.CreateWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.CreateWorkloadEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.CreateWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.CreateWorkloadEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.CreateWorkloadEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.CreateWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBillEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBillEstimate(ctx context.Context, params *bcmpricingcalculator.DeleteBillEstimateInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.DeleteBillEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBillEstimate")
	}

	var r0 *bcmpricingcalculator.DeleteBillEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.DeleteBillEstimateInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.DeleteBillEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.DeleteBillEstimateInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.DeleteBillEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.DeleteBillEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.DeleteBillEstimateInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBillScenario provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBillScenario(ctx context.Context, params *bcmpricingcalculator.DeleteBillScenarioInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.DeleteBillScenarioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBillScenario")
	}

	var r0 *bcmpricingcalculator.DeleteBillScenarioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.DeleteBillScenarioInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.DeleteBillScenarioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.DeleteBillScenarioInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.DeleteBillScenarioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.DeleteBillScenarioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.DeleteBillScenarioInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkloadEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkloadEstimate(ctx context.Context, params *bcmpricingcalculator.DeleteWorkloadEstimateInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.DeleteWorkloadEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkloadEstimate")
	}

	var r0 *bcmpricingcalculator.DeleteWorkloadEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.DeleteWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.DeleteWorkloadEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.DeleteWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.DeleteWorkloadEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.DeleteWorkloadEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.DeleteWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBillEstimate(ctx context.Context, params *bcmpricingcalculator.GetBillEstimateInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.GetBillEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBillEstimate")
	}

	var r0 *bcmpricingcalculator.GetBillEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.GetBillEstimateInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.GetBillEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.GetBillEstimateInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.GetBillEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.GetBillEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.GetBillEstimateInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillScenario provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBillScenario(ctx context.Context, params *bcmpricingcalculator.GetBillScenarioInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.GetBillScenarioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBillScenario")
	}

	var r0 *bcmpricingcalculator.GetBillScenarioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.GetBillScenarioInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.GetBillScenarioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.GetBillScenarioInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.GetBillScenarioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.GetBillScenarioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.GetBillScenarioInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreferences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPreferences(ctx context.Context, params *bcmpricingcalculator.GetPreferencesInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.GetPreferencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPreferences")
	}

	var r0 *bcmpricingcalculator.GetPreferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.GetPreferencesInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.GetPreferencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.GetPreferencesInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.GetPreferencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.GetPreferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.GetPreferencesInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkloadEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkloadEstimate(ctx context.Context, params *bcmpricingcalculator.GetWorkloadEstimateInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.GetWorkloadEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkloadEstimate")
	}

	var r0 *bcmpricingcalculator.GetWorkloadEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.GetWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.GetWorkloadEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.GetWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.GetWorkloadEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.GetWorkloadEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.GetWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillEstimateCommitments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillEstimateCommitments(ctx context.Context, params *bcmpricingcalculator.ListBillEstimateCommitmentsInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimateCommitmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillEstimateCommitments")
	}

	var r0 *bcmpricingcalculator.ListBillEstimateCommitmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimateCommitmentsInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimateCommitmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimateCommitmentsInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListBillEstimateCommitmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListBillEstimateCommitmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListBillEstimateCommitmentsInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillEstimateInputCommitmentModifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillEstimateInputCommitmentModifications(ctx context.Context, params *bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillEstimateInputCommitmentModifications")
	}

	var r0 *bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListBillEstimateInputCommitmentModificationsInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillEstimateInputUsageModifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillEstimateInputUsageModifications(ctx context.Context, params *bcmpricingcalculator.ListBillEstimateInputUsageModificationsInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimateInputUsageModificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillEstimateInputUsageModifications")
	}

	var r0 *bcmpricingcalculator.ListBillEstimateInputUsageModificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimateInputUsageModificationsInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimateInputUsageModificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimateInputUsageModificationsInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListBillEstimateInputUsageModificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListBillEstimateInputUsageModificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListBillEstimateInputUsageModificationsInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillEstimateLineItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillEstimateLineItems(ctx context.Context, params *bcmpricingcalculator.ListBillEstimateLineItemsInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimateLineItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillEstimateLineItems")
	}

	var r0 *bcmpricingcalculator.ListBillEstimateLineItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimateLineItemsInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimateLineItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimateLineItemsInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListBillEstimateLineItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListBillEstimateLineItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListBillEstimateLineItemsInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillEstimates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillEstimates(ctx context.Context, params *bcmpricingcalculator.ListBillEstimatesInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillEstimates")
	}

	var r0 *bcmpricingcalculator.ListBillEstimatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimatesInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillEstimatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillEstimatesInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListBillEstimatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListBillEstimatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListBillEstimatesInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillScenarioCommitmentModifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillScenarioCommitmentModifications(ctx context.Context, params *bcmpricingcalculator.ListBillScenarioCommitmentModificationsInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillScenarioCommitmentModificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillScenarioCommitmentModifications")
	}

	var r0 *bcmpricingcalculator.ListBillScenarioCommitmentModificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillScenarioCommitmentModificationsInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillScenarioCommitmentModificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillScenarioCommitmentModificationsInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListBillScenarioCommitmentModificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListBillScenarioCommitmentModificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListBillScenarioCommitmentModificationsInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillScenarioUsageModifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillScenarioUsageModifications(ctx context.Context, params *bcmpricingcalculator.ListBillScenarioUsageModificationsInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillScenarioUsageModificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillScenarioUsageModifications")
	}

	var r0 *bcmpricingcalculator.ListBillScenarioUsageModificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillScenarioUsageModificationsInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillScenarioUsageModificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillScenarioUsageModificationsInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListBillScenarioUsageModificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListBillScenarioUsageModificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListBillScenarioUsageModificationsInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillScenarios provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillScenarios(ctx context.Context, params *bcmpricingcalculator.ListBillScenariosInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillScenariosOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillScenarios")
	}

	var r0 *bcmpricingcalculator.ListBillScenariosOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillScenariosInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListBillScenariosOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListBillScenariosInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListBillScenariosOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListBillScenariosOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListBillScenariosInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *bcmpricingcalculator.ListTagsForResourceInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *bcmpricingcalculator.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListTagsForResourceInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListTagsForResourceInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListTagsForResourceInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkloadEstimateUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkloadEstimateUsage(ctx context.Context, params *bcmpricingcalculator.ListWorkloadEstimateUsageInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListWorkloadEstimateUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadEstimateUsage")
	}

	var r0 *bcmpricingcalculator.ListWorkloadEstimateUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListWorkloadEstimateUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListWorkloadEstimateUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListWorkloadEstimateUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListWorkloadEstimateUsageInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkloadEstimates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkloadEstimates(ctx context.Context, params *bcmpricingcalculator.ListWorkloadEstimatesInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListWorkloadEstimatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadEstimates")
	}

	var r0 *bcmpricingcalculator.ListWorkloadEstimatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListWorkloadEstimatesInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.ListWorkloadEstimatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.ListWorkloadEstimatesInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.ListWorkloadEstimatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.ListWorkloadEstimatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.ListWorkloadEstimatesInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() bcmpricingcalculator.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 bcmpricingcalculator.Options
	if rf, ok := ret.Get(0).(func() bcmpricingcalculator.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bcmpricingcalculator.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *bcmpricingcalculator.TagResourceInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *bcmpricingcalculator.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.TagResourceInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.TagResourceInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.TagResourceInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *bcmpricingcalculator.UntagResourceInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *bcmpricingcalculator.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UntagResourceInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UntagResourceInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.UntagResourceInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBillEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBillEstimate(ctx context.Context, params *bcmpricingcalculator.UpdateBillEstimateInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UpdateBillEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBillEstimate")
	}

	var r0 *bcmpricingcalculator.UpdateBillEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UpdateBillEstimateInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UpdateBillEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UpdateBillEstimateInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.UpdateBillEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.UpdateBillEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.UpdateBillEstimateInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBillScenario provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBillScenario(ctx context.Context, params *bcmpricingcalculator.UpdateBillScenarioInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UpdateBillScenarioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBillScenario")
	}

	var r0 *bcmpricingcalculator.UpdateBillScenarioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UpdateBillScenarioInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UpdateBillScenarioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UpdateBillScenarioInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.UpdateBillScenarioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.UpdateBillScenarioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.UpdateBillScenarioInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePreferences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePreferences(ctx context.Context, params *bcmpricingcalculator.UpdatePreferencesInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UpdatePreferencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePreferences")
	}

	var r0 *bcmpricingcalculator.UpdatePreferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UpdatePreferencesInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UpdatePreferencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UpdatePreferencesInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.UpdatePreferencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.UpdatePreferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.UpdatePreferencesInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkloadEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkloadEstimate(ctx context.Context, params *bcmpricingcalculator.UpdateWorkloadEstimateInput, optFns ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UpdateWorkloadEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkloadEstimate")
	}

	var r0 *bcmpricingcalculator.UpdateWorkloadEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UpdateWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) (*bcmpricingcalculator.UpdateWorkloadEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bcmpricingcalculator.UpdateWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) *bcmpricingcalculator.UpdateWorkloadEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bcmpricingcalculator.UpdateWorkloadEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bcmpricingcalculator.UpdateWorkloadEstimateInput, ...func(*bcmpricingcalculator.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
