// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	devicefarm "github.com/aws/aws-sdk-go-v2/service/devicefarm"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateDevicePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDevicePool(ctx context.Context, params *devicefarm.CreateDevicePoolInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateDevicePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDevicePool")
	}

	var r0 *devicefarm.CreateDevicePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateDevicePoolInput, ...func(*devicefarm.Options)) (*devicefarm.CreateDevicePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateDevicePoolInput, ...func(*devicefarm.Options)) *devicefarm.CreateDevicePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateDevicePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateDevicePoolInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstanceProfile(ctx context.Context, params *devicefarm.CreateInstanceProfileInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateInstanceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceProfile")
	}

	var r0 *devicefarm.CreateInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateInstanceProfileInput, ...func(*devicefarm.Options)) (*devicefarm.CreateInstanceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateInstanceProfileInput, ...func(*devicefarm.Options)) *devicefarm.CreateInstanceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateInstanceProfileInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNetworkProfile(ctx context.Context, params *devicefarm.CreateNetworkProfileInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNetworkProfile")
	}

	var r0 *devicefarm.CreateNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateNetworkProfileInput, ...func(*devicefarm.Options)) (*devicefarm.CreateNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateNetworkProfileInput, ...func(*devicefarm.Options)) *devicefarm.CreateNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateNetworkProfileInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProject(ctx context.Context, params *devicefarm.CreateProjectInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *devicefarm.CreateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateProjectInput, ...func(*devicefarm.Options)) (*devicefarm.CreateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateProjectInput, ...func(*devicefarm.Options)) *devicefarm.CreateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateProjectInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRemoteAccessSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRemoteAccessSession(ctx context.Context, params *devicefarm.CreateRemoteAccessSessionInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateRemoteAccessSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRemoteAccessSession")
	}

	var r0 *devicefarm.CreateRemoteAccessSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateRemoteAccessSessionInput, ...func(*devicefarm.Options)) (*devicefarm.CreateRemoteAccessSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateRemoteAccessSessionInput, ...func(*devicefarm.Options)) *devicefarm.CreateRemoteAccessSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateRemoteAccessSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateRemoteAccessSessionInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTestGridProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTestGridProject(ctx context.Context, params *devicefarm.CreateTestGridProjectInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateTestGridProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTestGridProject")
	}

	var r0 *devicefarm.CreateTestGridProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateTestGridProjectInput, ...func(*devicefarm.Options)) (*devicefarm.CreateTestGridProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateTestGridProjectInput, ...func(*devicefarm.Options)) *devicefarm.CreateTestGridProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateTestGridProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateTestGridProjectInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTestGridUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTestGridUrl(ctx context.Context, params *devicefarm.CreateTestGridUrlInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateTestGridUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTestGridUrl")
	}

	var r0 *devicefarm.CreateTestGridUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateTestGridUrlInput, ...func(*devicefarm.Options)) (*devicefarm.CreateTestGridUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateTestGridUrlInput, ...func(*devicefarm.Options)) *devicefarm.CreateTestGridUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateTestGridUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateTestGridUrlInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUpload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUpload(ctx context.Context, params *devicefarm.CreateUploadInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateUploadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUpload")
	}

	var r0 *devicefarm.CreateUploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateUploadInput, ...func(*devicefarm.Options)) (*devicefarm.CreateUploadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateUploadInput, ...func(*devicefarm.Options)) *devicefarm.CreateUploadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateUploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateUploadInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVPCEConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVPCEConfiguration(ctx context.Context, params *devicefarm.CreateVPCEConfigurationInput, optFns ...func(*devicefarm.Options)) (*devicefarm.CreateVPCEConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVPCEConfiguration")
	}

	var r0 *devicefarm.CreateVPCEConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateVPCEConfigurationInput, ...func(*devicefarm.Options)) (*devicefarm.CreateVPCEConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.CreateVPCEConfigurationInput, ...func(*devicefarm.Options)) *devicefarm.CreateVPCEConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.CreateVPCEConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.CreateVPCEConfigurationInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDevicePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDevicePool(ctx context.Context, params *devicefarm.DeleteDevicePoolInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteDevicePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDevicePool")
	}

	var r0 *devicefarm.DeleteDevicePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteDevicePoolInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteDevicePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteDevicePoolInput, ...func(*devicefarm.Options)) *devicefarm.DeleteDevicePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteDevicePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteDevicePoolInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstanceProfile(ctx context.Context, params *devicefarm.DeleteInstanceProfileInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteInstanceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceProfile")
	}

	var r0 *devicefarm.DeleteInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteInstanceProfileInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteInstanceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteInstanceProfileInput, ...func(*devicefarm.Options)) *devicefarm.DeleteInstanceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteInstanceProfileInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNetworkProfile(ctx context.Context, params *devicefarm.DeleteNetworkProfileInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNetworkProfile")
	}

	var r0 *devicefarm.DeleteNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteNetworkProfileInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteNetworkProfileInput, ...func(*devicefarm.Options)) *devicefarm.DeleteNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteNetworkProfileInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProject(ctx context.Context, params *devicefarm.DeleteProjectInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 *devicefarm.DeleteProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteProjectInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteProjectInput, ...func(*devicefarm.Options)) *devicefarm.DeleteProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteProjectInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRemoteAccessSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRemoteAccessSession(ctx context.Context, params *devicefarm.DeleteRemoteAccessSessionInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteRemoteAccessSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRemoteAccessSession")
	}

	var r0 *devicefarm.DeleteRemoteAccessSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteRemoteAccessSessionInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteRemoteAccessSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteRemoteAccessSessionInput, ...func(*devicefarm.Options)) *devicefarm.DeleteRemoteAccessSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteRemoteAccessSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteRemoteAccessSessionInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRun(ctx context.Context, params *devicefarm.DeleteRunInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRun")
	}

	var r0 *devicefarm.DeleteRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteRunInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteRunInput, ...func(*devicefarm.Options)) *devicefarm.DeleteRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteRunInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTestGridProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTestGridProject(ctx context.Context, params *devicefarm.DeleteTestGridProjectInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteTestGridProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTestGridProject")
	}

	var r0 *devicefarm.DeleteTestGridProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteTestGridProjectInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteTestGridProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteTestGridProjectInput, ...func(*devicefarm.Options)) *devicefarm.DeleteTestGridProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteTestGridProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteTestGridProjectInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUpload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUpload(ctx context.Context, params *devicefarm.DeleteUploadInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteUploadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUpload")
	}

	var r0 *devicefarm.DeleteUploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteUploadInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteUploadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteUploadInput, ...func(*devicefarm.Options)) *devicefarm.DeleteUploadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteUploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteUploadInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVPCEConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVPCEConfiguration(ctx context.Context, params *devicefarm.DeleteVPCEConfigurationInput, optFns ...func(*devicefarm.Options)) (*devicefarm.DeleteVPCEConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVPCEConfiguration")
	}

	var r0 *devicefarm.DeleteVPCEConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteVPCEConfigurationInput, ...func(*devicefarm.Options)) (*devicefarm.DeleteVPCEConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.DeleteVPCEConfigurationInput, ...func(*devicefarm.Options)) *devicefarm.DeleteVPCEConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.DeleteVPCEConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.DeleteVPCEConfigurationInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountSettings(ctx context.Context, params *devicefarm.GetAccountSettingsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSettings")
	}

	var r0 *devicefarm.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetAccountSettingsInput, ...func(*devicefarm.Options)) (*devicefarm.GetAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetAccountSettingsInput, ...func(*devicefarm.Options)) *devicefarm.GetAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetAccountSettingsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDevice(ctx context.Context, params *devicefarm.GetDeviceInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDevice")
	}

	var r0 *devicefarm.GetDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetDeviceInput, ...func(*devicefarm.Options)) (*devicefarm.GetDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetDeviceInput, ...func(*devicefarm.Options)) *devicefarm.GetDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetDeviceInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeviceInstance(ctx context.Context, params *devicefarm.GetDeviceInstanceInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetDeviceInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceInstance")
	}

	var r0 *devicefarm.GetDeviceInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetDeviceInstanceInput, ...func(*devicefarm.Options)) (*devicefarm.GetDeviceInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetDeviceInstanceInput, ...func(*devicefarm.Options)) *devicefarm.GetDeviceInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetDeviceInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetDeviceInstanceInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevicePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDevicePool(ctx context.Context, params *devicefarm.GetDevicePoolInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetDevicePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicePool")
	}

	var r0 *devicefarm.GetDevicePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetDevicePoolInput, ...func(*devicefarm.Options)) (*devicefarm.GetDevicePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetDevicePoolInput, ...func(*devicefarm.Options)) *devicefarm.GetDevicePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetDevicePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetDevicePoolInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDevicePoolCompatibility provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDevicePoolCompatibility(ctx context.Context, params *devicefarm.GetDevicePoolCompatibilityInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetDevicePoolCompatibilityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDevicePoolCompatibility")
	}

	var r0 *devicefarm.GetDevicePoolCompatibilityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetDevicePoolCompatibilityInput, ...func(*devicefarm.Options)) (*devicefarm.GetDevicePoolCompatibilityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetDevicePoolCompatibilityInput, ...func(*devicefarm.Options)) *devicefarm.GetDevicePoolCompatibilityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetDevicePoolCompatibilityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetDevicePoolCompatibilityInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstanceProfile(ctx context.Context, params *devicefarm.GetInstanceProfileInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetInstanceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceProfile")
	}

	var r0 *devicefarm.GetInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetInstanceProfileInput, ...func(*devicefarm.Options)) (*devicefarm.GetInstanceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetInstanceProfileInput, ...func(*devicefarm.Options)) *devicefarm.GetInstanceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetInstanceProfileInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJob(ctx context.Context, params *devicefarm.GetJobInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *devicefarm.GetJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetJobInput, ...func(*devicefarm.Options)) (*devicefarm.GetJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetJobInput, ...func(*devicefarm.Options)) *devicefarm.GetJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetJobInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNetworkProfile(ctx context.Context, params *devicefarm.GetNetworkProfileInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNetworkProfile")
	}

	var r0 *devicefarm.GetNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetNetworkProfileInput, ...func(*devicefarm.Options)) (*devicefarm.GetNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetNetworkProfileInput, ...func(*devicefarm.Options)) *devicefarm.GetNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetNetworkProfileInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOfferingStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOfferingStatus(ctx context.Context, params *devicefarm.GetOfferingStatusInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetOfferingStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOfferingStatus")
	}

	var r0 *devicefarm.GetOfferingStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetOfferingStatusInput, ...func(*devicefarm.Options)) (*devicefarm.GetOfferingStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetOfferingStatusInput, ...func(*devicefarm.Options)) *devicefarm.GetOfferingStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetOfferingStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetOfferingStatusInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProject(ctx context.Context, params *devicefarm.GetProjectInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *devicefarm.GetProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetProjectInput, ...func(*devicefarm.Options)) (*devicefarm.GetProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetProjectInput, ...func(*devicefarm.Options)) *devicefarm.GetProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetProjectInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemoteAccessSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRemoteAccessSession(ctx context.Context, params *devicefarm.GetRemoteAccessSessionInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetRemoteAccessSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRemoteAccessSession")
	}

	var r0 *devicefarm.GetRemoteAccessSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetRemoteAccessSessionInput, ...func(*devicefarm.Options)) (*devicefarm.GetRemoteAccessSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetRemoteAccessSessionInput, ...func(*devicefarm.Options)) *devicefarm.GetRemoteAccessSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetRemoteAccessSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetRemoteAccessSessionInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRun(ctx context.Context, params *devicefarm.GetRunInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRun")
	}

	var r0 *devicefarm.GetRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetRunInput, ...func(*devicefarm.Options)) (*devicefarm.GetRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetRunInput, ...func(*devicefarm.Options)) *devicefarm.GetRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetRunInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSuite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSuite(ctx context.Context, params *devicefarm.GetSuiteInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetSuiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSuite")
	}

	var r0 *devicefarm.GetSuiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetSuiteInput, ...func(*devicefarm.Options)) (*devicefarm.GetSuiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetSuiteInput, ...func(*devicefarm.Options)) *devicefarm.GetSuiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetSuiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetSuiteInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTest(ctx context.Context, params *devicefarm.GetTestInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetTestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTest")
	}

	var r0 *devicefarm.GetTestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetTestInput, ...func(*devicefarm.Options)) (*devicefarm.GetTestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetTestInput, ...func(*devicefarm.Options)) *devicefarm.GetTestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetTestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetTestInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestGridProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTestGridProject(ctx context.Context, params *devicefarm.GetTestGridProjectInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetTestGridProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTestGridProject")
	}

	var r0 *devicefarm.GetTestGridProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetTestGridProjectInput, ...func(*devicefarm.Options)) (*devicefarm.GetTestGridProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetTestGridProjectInput, ...func(*devicefarm.Options)) *devicefarm.GetTestGridProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetTestGridProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetTestGridProjectInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestGridSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTestGridSession(ctx context.Context, params *devicefarm.GetTestGridSessionInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetTestGridSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTestGridSession")
	}

	var r0 *devicefarm.GetTestGridSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetTestGridSessionInput, ...func(*devicefarm.Options)) (*devicefarm.GetTestGridSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetTestGridSessionInput, ...func(*devicefarm.Options)) *devicefarm.GetTestGridSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetTestGridSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetTestGridSessionInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUpload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUpload(ctx context.Context, params *devicefarm.GetUploadInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetUploadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUpload")
	}

	var r0 *devicefarm.GetUploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetUploadInput, ...func(*devicefarm.Options)) (*devicefarm.GetUploadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetUploadInput, ...func(*devicefarm.Options)) *devicefarm.GetUploadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetUploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetUploadInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVPCEConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVPCEConfiguration(ctx context.Context, params *devicefarm.GetVPCEConfigurationInput, optFns ...func(*devicefarm.Options)) (*devicefarm.GetVPCEConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVPCEConfiguration")
	}

	var r0 *devicefarm.GetVPCEConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetVPCEConfigurationInput, ...func(*devicefarm.Options)) (*devicefarm.GetVPCEConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.GetVPCEConfigurationInput, ...func(*devicefarm.Options)) *devicefarm.GetVPCEConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.GetVPCEConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.GetVPCEConfigurationInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstallToRemoteAccessSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InstallToRemoteAccessSession(ctx context.Context, params *devicefarm.InstallToRemoteAccessSessionInput, optFns ...func(*devicefarm.Options)) (*devicefarm.InstallToRemoteAccessSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InstallToRemoteAccessSession")
	}

	var r0 *devicefarm.InstallToRemoteAccessSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.InstallToRemoteAccessSessionInput, ...func(*devicefarm.Options)) (*devicefarm.InstallToRemoteAccessSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.InstallToRemoteAccessSessionInput, ...func(*devicefarm.Options)) *devicefarm.InstallToRemoteAccessSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.InstallToRemoteAccessSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.InstallToRemoteAccessSessionInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArtifacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListArtifacts(ctx context.Context, params *devicefarm.ListArtifactsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListArtifactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 *devicefarm.ListArtifactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListArtifactsInput, ...func(*devicefarm.Options)) (*devicefarm.ListArtifactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListArtifactsInput, ...func(*devicefarm.Options)) *devicefarm.ListArtifactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListArtifactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListArtifactsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeviceInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeviceInstances(ctx context.Context, params *devicefarm.ListDeviceInstancesInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListDeviceInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceInstances")
	}

	var r0 *devicefarm.ListDeviceInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListDeviceInstancesInput, ...func(*devicefarm.Options)) (*devicefarm.ListDeviceInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListDeviceInstancesInput, ...func(*devicefarm.Options)) *devicefarm.ListDeviceInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListDeviceInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListDeviceInstancesInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevicePools provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDevicePools(ctx context.Context, params *devicefarm.ListDevicePoolsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListDevicePoolsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDevicePools")
	}

	var r0 *devicefarm.ListDevicePoolsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListDevicePoolsInput, ...func(*devicefarm.Options)) (*devicefarm.ListDevicePoolsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListDevicePoolsInput, ...func(*devicefarm.Options)) *devicefarm.ListDevicePoolsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListDevicePoolsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListDevicePoolsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDevices(ctx context.Context, params *devicefarm.ListDevicesInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 *devicefarm.ListDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListDevicesInput, ...func(*devicefarm.Options)) (*devicefarm.ListDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListDevicesInput, ...func(*devicefarm.Options)) *devicefarm.ListDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListDevicesInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstanceProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInstanceProfiles(ctx context.Context, params *devicefarm.ListInstanceProfilesInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListInstanceProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstanceProfiles")
	}

	var r0 *devicefarm.ListInstanceProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListInstanceProfilesInput, ...func(*devicefarm.Options)) (*devicefarm.ListInstanceProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListInstanceProfilesInput, ...func(*devicefarm.Options)) *devicefarm.ListInstanceProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListInstanceProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListInstanceProfilesInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobs(ctx context.Context, params *devicefarm.ListJobsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *devicefarm.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListJobsInput, ...func(*devicefarm.Options)) (*devicefarm.ListJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListJobsInput, ...func(*devicefarm.Options)) *devicefarm.ListJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListJobsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNetworkProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNetworkProfiles(ctx context.Context, params *devicefarm.ListNetworkProfilesInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListNetworkProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNetworkProfiles")
	}

	var r0 *devicefarm.ListNetworkProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListNetworkProfilesInput, ...func(*devicefarm.Options)) (*devicefarm.ListNetworkProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListNetworkProfilesInput, ...func(*devicefarm.Options)) *devicefarm.ListNetworkProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListNetworkProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListNetworkProfilesInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOfferingPromotions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOfferingPromotions(ctx context.Context, params *devicefarm.ListOfferingPromotionsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListOfferingPromotionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOfferingPromotions")
	}

	var r0 *devicefarm.ListOfferingPromotionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListOfferingPromotionsInput, ...func(*devicefarm.Options)) (*devicefarm.ListOfferingPromotionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListOfferingPromotionsInput, ...func(*devicefarm.Options)) *devicefarm.ListOfferingPromotionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListOfferingPromotionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListOfferingPromotionsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOfferingTransactions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOfferingTransactions(ctx context.Context, params *devicefarm.ListOfferingTransactionsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListOfferingTransactionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOfferingTransactions")
	}

	var r0 *devicefarm.ListOfferingTransactionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListOfferingTransactionsInput, ...func(*devicefarm.Options)) (*devicefarm.ListOfferingTransactionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListOfferingTransactionsInput, ...func(*devicefarm.Options)) *devicefarm.ListOfferingTransactionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListOfferingTransactionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListOfferingTransactionsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOfferings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOfferings(ctx context.Context, params *devicefarm.ListOfferingsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListOfferingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOfferings")
	}

	var r0 *devicefarm.ListOfferingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListOfferingsInput, ...func(*devicefarm.Options)) (*devicefarm.ListOfferingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListOfferingsInput, ...func(*devicefarm.Options)) *devicefarm.ListOfferingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListOfferingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListOfferingsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProjects(ctx context.Context, params *devicefarm.ListProjectsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListProjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *devicefarm.ListProjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListProjectsInput, ...func(*devicefarm.Options)) (*devicefarm.ListProjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListProjectsInput, ...func(*devicefarm.Options)) *devicefarm.ListProjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListProjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListProjectsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRemoteAccessSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRemoteAccessSessions(ctx context.Context, params *devicefarm.ListRemoteAccessSessionsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListRemoteAccessSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRemoteAccessSessions")
	}

	var r0 *devicefarm.ListRemoteAccessSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListRemoteAccessSessionsInput, ...func(*devicefarm.Options)) (*devicefarm.ListRemoteAccessSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListRemoteAccessSessionsInput, ...func(*devicefarm.Options)) *devicefarm.ListRemoteAccessSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListRemoteAccessSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListRemoteAccessSessionsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRuns(ctx context.Context, params *devicefarm.ListRunsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListRunsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRuns")
	}

	var r0 *devicefarm.ListRunsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListRunsInput, ...func(*devicefarm.Options)) (*devicefarm.ListRunsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListRunsInput, ...func(*devicefarm.Options)) *devicefarm.ListRunsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListRunsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListRunsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSamples provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSamples(ctx context.Context, params *devicefarm.ListSamplesInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListSamplesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSamples")
	}

	var r0 *devicefarm.ListSamplesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListSamplesInput, ...func(*devicefarm.Options)) (*devicefarm.ListSamplesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListSamplesInput, ...func(*devicefarm.Options)) *devicefarm.ListSamplesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListSamplesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListSamplesInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSuites provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSuites(ctx context.Context, params *devicefarm.ListSuitesInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListSuitesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSuites")
	}

	var r0 *devicefarm.ListSuitesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListSuitesInput, ...func(*devicefarm.Options)) (*devicefarm.ListSuitesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListSuitesInput, ...func(*devicefarm.Options)) *devicefarm.ListSuitesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListSuitesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListSuitesInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *devicefarm.ListTagsForResourceInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *devicefarm.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTagsForResourceInput, ...func(*devicefarm.Options)) (*devicefarm.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTagsForResourceInput, ...func(*devicefarm.Options)) *devicefarm.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListTagsForResourceInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestGridProjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestGridProjects(ctx context.Context, params *devicefarm.ListTestGridProjectsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListTestGridProjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestGridProjects")
	}

	var r0 *devicefarm.ListTestGridProjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestGridProjectsInput, ...func(*devicefarm.Options)) (*devicefarm.ListTestGridProjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestGridProjectsInput, ...func(*devicefarm.Options)) *devicefarm.ListTestGridProjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListTestGridProjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListTestGridProjectsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestGridSessionActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestGridSessionActions(ctx context.Context, params *devicefarm.ListTestGridSessionActionsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListTestGridSessionActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestGridSessionActions")
	}

	var r0 *devicefarm.ListTestGridSessionActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestGridSessionActionsInput, ...func(*devicefarm.Options)) (*devicefarm.ListTestGridSessionActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestGridSessionActionsInput, ...func(*devicefarm.Options)) *devicefarm.ListTestGridSessionActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListTestGridSessionActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListTestGridSessionActionsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestGridSessionArtifacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestGridSessionArtifacts(ctx context.Context, params *devicefarm.ListTestGridSessionArtifactsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListTestGridSessionArtifactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestGridSessionArtifacts")
	}

	var r0 *devicefarm.ListTestGridSessionArtifactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestGridSessionArtifactsInput, ...func(*devicefarm.Options)) (*devicefarm.ListTestGridSessionArtifactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestGridSessionArtifactsInput, ...func(*devicefarm.Options)) *devicefarm.ListTestGridSessionArtifactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListTestGridSessionArtifactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListTestGridSessionArtifactsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestGridSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestGridSessions(ctx context.Context, params *devicefarm.ListTestGridSessionsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListTestGridSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestGridSessions")
	}

	var r0 *devicefarm.ListTestGridSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestGridSessionsInput, ...func(*devicefarm.Options)) (*devicefarm.ListTestGridSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestGridSessionsInput, ...func(*devicefarm.Options)) *devicefarm.ListTestGridSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListTestGridSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListTestGridSessionsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTests provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTests(ctx context.Context, params *devicefarm.ListTestsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListTestsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTests")
	}

	var r0 *devicefarm.ListTestsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestsInput, ...func(*devicefarm.Options)) (*devicefarm.ListTestsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListTestsInput, ...func(*devicefarm.Options)) *devicefarm.ListTestsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListTestsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListTestsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUniqueProblems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUniqueProblems(ctx context.Context, params *devicefarm.ListUniqueProblemsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListUniqueProblemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUniqueProblems")
	}

	var r0 *devicefarm.ListUniqueProblemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListUniqueProblemsInput, ...func(*devicefarm.Options)) (*devicefarm.ListUniqueProblemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListUniqueProblemsInput, ...func(*devicefarm.Options)) *devicefarm.ListUniqueProblemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListUniqueProblemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListUniqueProblemsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUploads provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUploads(ctx context.Context, params *devicefarm.ListUploadsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListUploadsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUploads")
	}

	var r0 *devicefarm.ListUploadsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListUploadsInput, ...func(*devicefarm.Options)) (*devicefarm.ListUploadsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListUploadsInput, ...func(*devicefarm.Options)) *devicefarm.ListUploadsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListUploadsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListUploadsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVPCEConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVPCEConfigurations(ctx context.Context, params *devicefarm.ListVPCEConfigurationsInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ListVPCEConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVPCEConfigurations")
	}

	var r0 *devicefarm.ListVPCEConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListVPCEConfigurationsInput, ...func(*devicefarm.Options)) (*devicefarm.ListVPCEConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ListVPCEConfigurationsInput, ...func(*devicefarm.Options)) *devicefarm.ListVPCEConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ListVPCEConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ListVPCEConfigurationsInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() devicefarm.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 devicefarm.Options
	if rf, ok := ret.Get(0).(func() devicefarm.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(devicefarm.Options)
	}

	return r0
}

// PurchaseOffering provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PurchaseOffering(ctx context.Context, params *devicefarm.PurchaseOfferingInput, optFns ...func(*devicefarm.Options)) (*devicefarm.PurchaseOfferingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PurchaseOffering")
	}

	var r0 *devicefarm.PurchaseOfferingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.PurchaseOfferingInput, ...func(*devicefarm.Options)) (*devicefarm.PurchaseOfferingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.PurchaseOfferingInput, ...func(*devicefarm.Options)) *devicefarm.PurchaseOfferingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.PurchaseOfferingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.PurchaseOfferingInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenewOffering provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RenewOffering(ctx context.Context, params *devicefarm.RenewOfferingInput, optFns ...func(*devicefarm.Options)) (*devicefarm.RenewOfferingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RenewOffering")
	}

	var r0 *devicefarm.RenewOfferingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.RenewOfferingInput, ...func(*devicefarm.Options)) (*devicefarm.RenewOfferingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.RenewOfferingInput, ...func(*devicefarm.Options)) *devicefarm.RenewOfferingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.RenewOfferingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.RenewOfferingInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScheduleRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ScheduleRun(ctx context.Context, params *devicefarm.ScheduleRunInput, optFns ...func(*devicefarm.Options)) (*devicefarm.ScheduleRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScheduleRun")
	}

	var r0 *devicefarm.ScheduleRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ScheduleRunInput, ...func(*devicefarm.Options)) (*devicefarm.ScheduleRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.ScheduleRunInput, ...func(*devicefarm.Options)) *devicefarm.ScheduleRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.ScheduleRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.ScheduleRunInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopJob(ctx context.Context, params *devicefarm.StopJobInput, optFns ...func(*devicefarm.Options)) (*devicefarm.StopJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopJob")
	}

	var r0 *devicefarm.StopJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.StopJobInput, ...func(*devicefarm.Options)) (*devicefarm.StopJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.StopJobInput, ...func(*devicefarm.Options)) *devicefarm.StopJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.StopJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.StopJobInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopRemoteAccessSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopRemoteAccessSession(ctx context.Context, params *devicefarm.StopRemoteAccessSessionInput, optFns ...func(*devicefarm.Options)) (*devicefarm.StopRemoteAccessSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopRemoteAccessSession")
	}

	var r0 *devicefarm.StopRemoteAccessSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.StopRemoteAccessSessionInput, ...func(*devicefarm.Options)) (*devicefarm.StopRemoteAccessSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.StopRemoteAccessSessionInput, ...func(*devicefarm.Options)) *devicefarm.StopRemoteAccessSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.StopRemoteAccessSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.StopRemoteAccessSessionInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopRun(ctx context.Context, params *devicefarm.StopRunInput, optFns ...func(*devicefarm.Options)) (*devicefarm.StopRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopRun")
	}

	var r0 *devicefarm.StopRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.StopRunInput, ...func(*devicefarm.Options)) (*devicefarm.StopRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.StopRunInput, ...func(*devicefarm.Options)) *devicefarm.StopRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.StopRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.StopRunInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *devicefarm.TagResourceInput, optFns ...func(*devicefarm.Options)) (*devicefarm.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *devicefarm.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.TagResourceInput, ...func(*devicefarm.Options)) (*devicefarm.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.TagResourceInput, ...func(*devicefarm.Options)) *devicefarm.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.TagResourceInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *devicefarm.UntagResourceInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *devicefarm.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UntagResourceInput, ...func(*devicefarm.Options)) (*devicefarm.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UntagResourceInput, ...func(*devicefarm.Options)) *devicefarm.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UntagResourceInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeviceInstance(ctx context.Context, params *devicefarm.UpdateDeviceInstanceInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UpdateDeviceInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceInstance")
	}

	var r0 *devicefarm.UpdateDeviceInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateDeviceInstanceInput, ...func(*devicefarm.Options)) (*devicefarm.UpdateDeviceInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateDeviceInstanceInput, ...func(*devicefarm.Options)) *devicefarm.UpdateDeviceInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UpdateDeviceInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UpdateDeviceInstanceInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevicePool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDevicePool(ctx context.Context, params *devicefarm.UpdateDevicePoolInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UpdateDevicePoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevicePool")
	}

	var r0 *devicefarm.UpdateDevicePoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateDevicePoolInput, ...func(*devicefarm.Options)) (*devicefarm.UpdateDevicePoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateDevicePoolInput, ...func(*devicefarm.Options)) *devicefarm.UpdateDevicePoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UpdateDevicePoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UpdateDevicePoolInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInstanceProfile(ctx context.Context, params *devicefarm.UpdateInstanceProfileInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UpdateInstanceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceProfile")
	}

	var r0 *devicefarm.UpdateInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateInstanceProfileInput, ...func(*devicefarm.Options)) (*devicefarm.UpdateInstanceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateInstanceProfileInput, ...func(*devicefarm.Options)) *devicefarm.UpdateInstanceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UpdateInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UpdateInstanceProfileInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNetworkProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNetworkProfile(ctx context.Context, params *devicefarm.UpdateNetworkProfileInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UpdateNetworkProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNetworkProfile")
	}

	var r0 *devicefarm.UpdateNetworkProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateNetworkProfileInput, ...func(*devicefarm.Options)) (*devicefarm.UpdateNetworkProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateNetworkProfileInput, ...func(*devicefarm.Options)) *devicefarm.UpdateNetworkProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UpdateNetworkProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UpdateNetworkProfileInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProject(ctx context.Context, params *devicefarm.UpdateProjectInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UpdateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *devicefarm.UpdateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateProjectInput, ...func(*devicefarm.Options)) (*devicefarm.UpdateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateProjectInput, ...func(*devicefarm.Options)) *devicefarm.UpdateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UpdateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UpdateProjectInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTestGridProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTestGridProject(ctx context.Context, params *devicefarm.UpdateTestGridProjectInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UpdateTestGridProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTestGridProject")
	}

	var r0 *devicefarm.UpdateTestGridProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateTestGridProjectInput, ...func(*devicefarm.Options)) (*devicefarm.UpdateTestGridProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateTestGridProjectInput, ...func(*devicefarm.Options)) *devicefarm.UpdateTestGridProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UpdateTestGridProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UpdateTestGridProjectInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUpload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUpload(ctx context.Context, params *devicefarm.UpdateUploadInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UpdateUploadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUpload")
	}

	var r0 *devicefarm.UpdateUploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateUploadInput, ...func(*devicefarm.Options)) (*devicefarm.UpdateUploadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateUploadInput, ...func(*devicefarm.Options)) *devicefarm.UpdateUploadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UpdateUploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UpdateUploadInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVPCEConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVPCEConfiguration(ctx context.Context, params *devicefarm.UpdateVPCEConfigurationInput, optFns ...func(*devicefarm.Options)) (*devicefarm.UpdateVPCEConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVPCEConfiguration")
	}

	var r0 *devicefarm.UpdateVPCEConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateVPCEConfigurationInput, ...func(*devicefarm.Options)) (*devicefarm.UpdateVPCEConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *devicefarm.UpdateVPCEConfigurationInput, ...func(*devicefarm.Options)) *devicefarm.UpdateVPCEConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*devicefarm.UpdateVPCEConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *devicefarm.UpdateVPCEConfigurationInput, ...func(*devicefarm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
