// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	configservice "github.com/aws/aws-sdk-go-v2/service/configservice"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetAggregateResourceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetAggregateResourceConfig(ctx context.Context, params *configservice.BatchGetAggregateResourceConfigInput, optFns ...func(*configservice.Options)) (*configservice.BatchGetAggregateResourceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetAggregateResourceConfig")
	}

	var r0 *configservice.BatchGetAggregateResourceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.BatchGetAggregateResourceConfigInput, ...func(*configservice.Options)) (*configservice.BatchGetAggregateResourceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.BatchGetAggregateResourceConfigInput, ...func(*configservice.Options)) *configservice.BatchGetAggregateResourceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.BatchGetAggregateResourceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.BatchGetAggregateResourceConfigInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetResourceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetResourceConfig(ctx context.Context, params *configservice.BatchGetResourceConfigInput, optFns ...func(*configservice.Options)) (*configservice.BatchGetResourceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetResourceConfig")
	}

	var r0 *configservice.BatchGetResourceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.BatchGetResourceConfigInput, ...func(*configservice.Options)) (*configservice.BatchGetResourceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.BatchGetResourceConfigInput, ...func(*configservice.Options)) *configservice.BatchGetResourceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.BatchGetResourceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.BatchGetResourceConfigInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAggregationAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAggregationAuthorization(ctx context.Context, params *configservice.DeleteAggregationAuthorizationInput, optFns ...func(*configservice.Options)) (*configservice.DeleteAggregationAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAggregationAuthorization")
	}

	var r0 *configservice.DeleteAggregationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteAggregationAuthorizationInput, ...func(*configservice.Options)) (*configservice.DeleteAggregationAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteAggregationAuthorizationInput, ...func(*configservice.Options)) *configservice.DeleteAggregationAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteAggregationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteAggregationAuthorizationInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigRule(ctx context.Context, params *configservice.DeleteConfigRuleInput, optFns ...func(*configservice.Options)) (*configservice.DeleteConfigRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigRule")
	}

	var r0 *configservice.DeleteConfigRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteConfigRuleInput, ...func(*configservice.Options)) (*configservice.DeleteConfigRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteConfigRuleInput, ...func(*configservice.Options)) *configservice.DeleteConfigRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteConfigRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteConfigRuleInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationAggregator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationAggregator(ctx context.Context, params *configservice.DeleteConfigurationAggregatorInput, optFns ...func(*configservice.Options)) (*configservice.DeleteConfigurationAggregatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationAggregator")
	}

	var r0 *configservice.DeleteConfigurationAggregatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteConfigurationAggregatorInput, ...func(*configservice.Options)) (*configservice.DeleteConfigurationAggregatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteConfigurationAggregatorInput, ...func(*configservice.Options)) *configservice.DeleteConfigurationAggregatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteConfigurationAggregatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteConfigurationAggregatorInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationRecorder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationRecorder(ctx context.Context, params *configservice.DeleteConfigurationRecorderInput, optFns ...func(*configservice.Options)) (*configservice.DeleteConfigurationRecorderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationRecorder")
	}

	var r0 *configservice.DeleteConfigurationRecorderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteConfigurationRecorderInput, ...func(*configservice.Options)) (*configservice.DeleteConfigurationRecorderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteConfigurationRecorderInput, ...func(*configservice.Options)) *configservice.DeleteConfigurationRecorderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteConfigurationRecorderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteConfigurationRecorderInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConformancePack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConformancePack(ctx context.Context, params *configservice.DeleteConformancePackInput, optFns ...func(*configservice.Options)) (*configservice.DeleteConformancePackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConformancePack")
	}

	var r0 *configservice.DeleteConformancePackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteConformancePackInput, ...func(*configservice.Options)) (*configservice.DeleteConformancePackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteConformancePackInput, ...func(*configservice.Options)) *configservice.DeleteConformancePackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteConformancePackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteConformancePackInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeliveryChannel(ctx context.Context, params *configservice.DeleteDeliveryChannelInput, optFns ...func(*configservice.Options)) (*configservice.DeleteDeliveryChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeliveryChannel")
	}

	var r0 *configservice.DeleteDeliveryChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteDeliveryChannelInput, ...func(*configservice.Options)) (*configservice.DeleteDeliveryChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteDeliveryChannelInput, ...func(*configservice.Options)) *configservice.DeleteDeliveryChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteDeliveryChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteDeliveryChannelInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvaluationResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEvaluationResults(ctx context.Context, params *configservice.DeleteEvaluationResultsInput, optFns ...func(*configservice.Options)) (*configservice.DeleteEvaluationResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvaluationResults")
	}

	var r0 *configservice.DeleteEvaluationResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteEvaluationResultsInput, ...func(*configservice.Options)) (*configservice.DeleteEvaluationResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteEvaluationResultsInput, ...func(*configservice.Options)) *configservice.DeleteEvaluationResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteEvaluationResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteEvaluationResultsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationConfigRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOrganizationConfigRule(ctx context.Context, params *configservice.DeleteOrganizationConfigRuleInput, optFns ...func(*configservice.Options)) (*configservice.DeleteOrganizationConfigRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationConfigRule")
	}

	var r0 *configservice.DeleteOrganizationConfigRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteOrganizationConfigRuleInput, ...func(*configservice.Options)) (*configservice.DeleteOrganizationConfigRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteOrganizationConfigRuleInput, ...func(*configservice.Options)) *configservice.DeleteOrganizationConfigRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteOrganizationConfigRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteOrganizationConfigRuleInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganizationConformancePack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOrganizationConformancePack(ctx context.Context, params *configservice.DeleteOrganizationConformancePackInput, optFns ...func(*configservice.Options)) (*configservice.DeleteOrganizationConformancePackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganizationConformancePack")
	}

	var r0 *configservice.DeleteOrganizationConformancePackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteOrganizationConformancePackInput, ...func(*configservice.Options)) (*configservice.DeleteOrganizationConformancePackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteOrganizationConformancePackInput, ...func(*configservice.Options)) *configservice.DeleteOrganizationConformancePackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteOrganizationConformancePackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteOrganizationConformancePackInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePendingAggregationRequest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePendingAggregationRequest(ctx context.Context, params *configservice.DeletePendingAggregationRequestInput, optFns ...func(*configservice.Options)) (*configservice.DeletePendingAggregationRequestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePendingAggregationRequest")
	}

	var r0 *configservice.DeletePendingAggregationRequestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeletePendingAggregationRequestInput, ...func(*configservice.Options)) (*configservice.DeletePendingAggregationRequestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeletePendingAggregationRequestInput, ...func(*configservice.Options)) *configservice.DeletePendingAggregationRequestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeletePendingAggregationRequestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeletePendingAggregationRequestInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRemediationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRemediationConfiguration(ctx context.Context, params *configservice.DeleteRemediationConfigurationInput, optFns ...func(*configservice.Options)) (*configservice.DeleteRemediationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRemediationConfiguration")
	}

	var r0 *configservice.DeleteRemediationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteRemediationConfigurationInput, ...func(*configservice.Options)) (*configservice.DeleteRemediationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteRemediationConfigurationInput, ...func(*configservice.Options)) *configservice.DeleteRemediationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteRemediationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteRemediationConfigurationInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRemediationExceptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRemediationExceptions(ctx context.Context, params *configservice.DeleteRemediationExceptionsInput, optFns ...func(*configservice.Options)) (*configservice.DeleteRemediationExceptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRemediationExceptions")
	}

	var r0 *configservice.DeleteRemediationExceptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteRemediationExceptionsInput, ...func(*configservice.Options)) (*configservice.DeleteRemediationExceptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteRemediationExceptionsInput, ...func(*configservice.Options)) *configservice.DeleteRemediationExceptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteRemediationExceptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteRemediationExceptionsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceConfig(ctx context.Context, params *configservice.DeleteResourceConfigInput, optFns ...func(*configservice.Options)) (*configservice.DeleteResourceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceConfig")
	}

	var r0 *configservice.DeleteResourceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteResourceConfigInput, ...func(*configservice.Options)) (*configservice.DeleteResourceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteResourceConfigInput, ...func(*configservice.Options)) *configservice.DeleteResourceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteResourceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteResourceConfigInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRetentionConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRetentionConfiguration(ctx context.Context, params *configservice.DeleteRetentionConfigurationInput, optFns ...func(*configservice.Options)) (*configservice.DeleteRetentionConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRetentionConfiguration")
	}

	var r0 *configservice.DeleteRetentionConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteRetentionConfigurationInput, ...func(*configservice.Options)) (*configservice.DeleteRetentionConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteRetentionConfigurationInput, ...func(*configservice.Options)) *configservice.DeleteRetentionConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteRetentionConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteRetentionConfigurationInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStoredQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStoredQuery(ctx context.Context, params *configservice.DeleteStoredQueryInput, optFns ...func(*configservice.Options)) (*configservice.DeleteStoredQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStoredQuery")
	}

	var r0 *configservice.DeleteStoredQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteStoredQueryInput, ...func(*configservice.Options)) (*configservice.DeleteStoredQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeleteStoredQueryInput, ...func(*configservice.Options)) *configservice.DeleteStoredQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeleteStoredQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeleteStoredQueryInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeliverConfigSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeliverConfigSnapshot(ctx context.Context, params *configservice.DeliverConfigSnapshotInput, optFns ...func(*configservice.Options)) (*configservice.DeliverConfigSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeliverConfigSnapshot")
	}

	var r0 *configservice.DeliverConfigSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeliverConfigSnapshotInput, ...func(*configservice.Options)) (*configservice.DeliverConfigSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DeliverConfigSnapshotInput, ...func(*configservice.Options)) *configservice.DeliverConfigSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DeliverConfigSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DeliverConfigSnapshotInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAggregateComplianceByConfigRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAggregateComplianceByConfigRules(ctx context.Context, params *configservice.DescribeAggregateComplianceByConfigRulesInput, optFns ...func(*configservice.Options)) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAggregateComplianceByConfigRules")
	}

	var r0 *configservice.DescribeAggregateComplianceByConfigRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeAggregateComplianceByConfigRulesInput, ...func(*configservice.Options)) (*configservice.DescribeAggregateComplianceByConfigRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeAggregateComplianceByConfigRulesInput, ...func(*configservice.Options)) *configservice.DescribeAggregateComplianceByConfigRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeAggregateComplianceByConfigRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeAggregateComplianceByConfigRulesInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAggregateComplianceByConformancePacks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAggregateComplianceByConformancePacks(ctx context.Context, params *configservice.DescribeAggregateComplianceByConformancePacksInput, optFns ...func(*configservice.Options)) (*configservice.DescribeAggregateComplianceByConformancePacksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAggregateComplianceByConformancePacks")
	}

	var r0 *configservice.DescribeAggregateComplianceByConformancePacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeAggregateComplianceByConformancePacksInput, ...func(*configservice.Options)) (*configservice.DescribeAggregateComplianceByConformancePacksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeAggregateComplianceByConformancePacksInput, ...func(*configservice.Options)) *configservice.DescribeAggregateComplianceByConformancePacksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeAggregateComplianceByConformancePacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeAggregateComplianceByConformancePacksInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAggregationAuthorizations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAggregationAuthorizations(ctx context.Context, params *configservice.DescribeAggregationAuthorizationsInput, optFns ...func(*configservice.Options)) (*configservice.DescribeAggregationAuthorizationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAggregationAuthorizations")
	}

	var r0 *configservice.DescribeAggregationAuthorizationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeAggregationAuthorizationsInput, ...func(*configservice.Options)) (*configservice.DescribeAggregationAuthorizationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeAggregationAuthorizationsInput, ...func(*configservice.Options)) *configservice.DescribeAggregationAuthorizationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeAggregationAuthorizationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeAggregationAuthorizationsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeComplianceByConfigRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeComplianceByConfigRule(ctx context.Context, params *configservice.DescribeComplianceByConfigRuleInput, optFns ...func(*configservice.Options)) (*configservice.DescribeComplianceByConfigRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeComplianceByConfigRule")
	}

	var r0 *configservice.DescribeComplianceByConfigRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeComplianceByConfigRuleInput, ...func(*configservice.Options)) (*configservice.DescribeComplianceByConfigRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeComplianceByConfigRuleInput, ...func(*configservice.Options)) *configservice.DescribeComplianceByConfigRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeComplianceByConfigRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeComplianceByConfigRuleInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeComplianceByResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeComplianceByResource(ctx context.Context, params *configservice.DescribeComplianceByResourceInput, optFns ...func(*configservice.Options)) (*configservice.DescribeComplianceByResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeComplianceByResource")
	}

	var r0 *configservice.DescribeComplianceByResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeComplianceByResourceInput, ...func(*configservice.Options)) (*configservice.DescribeComplianceByResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeComplianceByResourceInput, ...func(*configservice.Options)) *configservice.DescribeComplianceByResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeComplianceByResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeComplianceByResourceInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigRuleEvaluationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigRuleEvaluationStatus(ctx context.Context, params *configservice.DescribeConfigRuleEvaluationStatusInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigRuleEvaluationStatus")
	}

	var r0 *configservice.DescribeConfigRuleEvaluationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigRuleEvaluationStatusInput, ...func(*configservice.Options)) (*configservice.DescribeConfigRuleEvaluationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigRuleEvaluationStatusInput, ...func(*configservice.Options)) *configservice.DescribeConfigRuleEvaluationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConfigRuleEvaluationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConfigRuleEvaluationStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigRules(ctx context.Context, params *configservice.DescribeConfigRulesInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigRules")
	}

	var r0 *configservice.DescribeConfigRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigRulesInput, ...func(*configservice.Options)) (*configservice.DescribeConfigRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigRulesInput, ...func(*configservice.Options)) *configservice.DescribeConfigRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConfigRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConfigRulesInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationAggregatorSourcesStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurationAggregatorSourcesStatus(ctx context.Context, params *configservice.DescribeConfigurationAggregatorSourcesStatusInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationAggregatorSourcesStatus")
	}

	var r0 *configservice.DescribeConfigurationAggregatorSourcesStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationAggregatorSourcesStatusInput, ...func(*configservice.Options)) (*configservice.DescribeConfigurationAggregatorSourcesStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationAggregatorSourcesStatusInput, ...func(*configservice.Options)) *configservice.DescribeConfigurationAggregatorSourcesStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConfigurationAggregatorSourcesStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConfigurationAggregatorSourcesStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationAggregators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurationAggregators(ctx context.Context, params *configservice.DescribeConfigurationAggregatorsInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigurationAggregatorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationAggregators")
	}

	var r0 *configservice.DescribeConfigurationAggregatorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationAggregatorsInput, ...func(*configservice.Options)) (*configservice.DescribeConfigurationAggregatorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationAggregatorsInput, ...func(*configservice.Options)) *configservice.DescribeConfigurationAggregatorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConfigurationAggregatorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConfigurationAggregatorsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationRecorderStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurationRecorderStatus(ctx context.Context, params *configservice.DescribeConfigurationRecorderStatusInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecorderStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationRecorderStatus")
	}

	var r0 *configservice.DescribeConfigurationRecorderStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationRecorderStatusInput, ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecorderStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationRecorderStatusInput, ...func(*configservice.Options)) *configservice.DescribeConfigurationRecorderStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConfigurationRecorderStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConfigurationRecorderStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationRecorders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurationRecorders(ctx context.Context, params *configservice.DescribeConfigurationRecordersInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecordersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationRecorders")
	}

	var r0 *configservice.DescribeConfigurationRecordersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationRecordersInput, ...func(*configservice.Options)) (*configservice.DescribeConfigurationRecordersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConfigurationRecordersInput, ...func(*configservice.Options)) *configservice.DescribeConfigurationRecordersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConfigurationRecordersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConfigurationRecordersInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConformancePackCompliance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConformancePackCompliance(ctx context.Context, params *configservice.DescribeConformancePackComplianceInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConformancePackComplianceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConformancePackCompliance")
	}

	var r0 *configservice.DescribeConformancePackComplianceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConformancePackComplianceInput, ...func(*configservice.Options)) (*configservice.DescribeConformancePackComplianceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConformancePackComplianceInput, ...func(*configservice.Options)) *configservice.DescribeConformancePackComplianceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConformancePackComplianceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConformancePackComplianceInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConformancePackStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConformancePackStatus(ctx context.Context, params *configservice.DescribeConformancePackStatusInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConformancePackStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConformancePackStatus")
	}

	var r0 *configservice.DescribeConformancePackStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConformancePackStatusInput, ...func(*configservice.Options)) (*configservice.DescribeConformancePackStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConformancePackStatusInput, ...func(*configservice.Options)) *configservice.DescribeConformancePackStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConformancePackStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConformancePackStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConformancePacks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConformancePacks(ctx context.Context, params *configservice.DescribeConformancePacksInput, optFns ...func(*configservice.Options)) (*configservice.DescribeConformancePacksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConformancePacks")
	}

	var r0 *configservice.DescribeConformancePacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConformancePacksInput, ...func(*configservice.Options)) (*configservice.DescribeConformancePacksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeConformancePacksInput, ...func(*configservice.Options)) *configservice.DescribeConformancePacksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeConformancePacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeConformancePacksInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveryChannelStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDeliveryChannelStatus(ctx context.Context, params *configservice.DescribeDeliveryChannelStatusInput, optFns ...func(*configservice.Options)) (*configservice.DescribeDeliveryChannelStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDeliveryChannelStatus")
	}

	var r0 *configservice.DescribeDeliveryChannelStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeDeliveryChannelStatusInput, ...func(*configservice.Options)) (*configservice.DescribeDeliveryChannelStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeDeliveryChannelStatusInput, ...func(*configservice.Options)) *configservice.DescribeDeliveryChannelStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeDeliveryChannelStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeDeliveryChannelStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveryChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDeliveryChannels(ctx context.Context, params *configservice.DescribeDeliveryChannelsInput, optFns ...func(*configservice.Options)) (*configservice.DescribeDeliveryChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDeliveryChannels")
	}

	var r0 *configservice.DescribeDeliveryChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeDeliveryChannelsInput, ...func(*configservice.Options)) (*configservice.DescribeDeliveryChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeDeliveryChannelsInput, ...func(*configservice.Options)) *configservice.DescribeDeliveryChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeDeliveryChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeDeliveryChannelsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationConfigRuleStatuses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationConfigRuleStatuses(ctx context.Context, params *configservice.DescribeOrganizationConfigRuleStatusesInput, optFns ...func(*configservice.Options)) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationConfigRuleStatuses")
	}

	var r0 *configservice.DescribeOrganizationConfigRuleStatusesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeOrganizationConfigRuleStatusesInput, ...func(*configservice.Options)) (*configservice.DescribeOrganizationConfigRuleStatusesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeOrganizationConfigRuleStatusesInput, ...func(*configservice.Options)) *configservice.DescribeOrganizationConfigRuleStatusesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeOrganizationConfigRuleStatusesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeOrganizationConfigRuleStatusesInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationConfigRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationConfigRules(ctx context.Context, params *configservice.DescribeOrganizationConfigRulesInput, optFns ...func(*configservice.Options)) (*configservice.DescribeOrganizationConfigRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationConfigRules")
	}

	var r0 *configservice.DescribeOrganizationConfigRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeOrganizationConfigRulesInput, ...func(*configservice.Options)) (*configservice.DescribeOrganizationConfigRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeOrganizationConfigRulesInput, ...func(*configservice.Options)) *configservice.DescribeOrganizationConfigRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeOrganizationConfigRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeOrganizationConfigRulesInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationConformancePackStatuses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationConformancePackStatuses(ctx context.Context, params *configservice.DescribeOrganizationConformancePackStatusesInput, optFns ...func(*configservice.Options)) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationConformancePackStatuses")
	}

	var r0 *configservice.DescribeOrganizationConformancePackStatusesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeOrganizationConformancePackStatusesInput, ...func(*configservice.Options)) (*configservice.DescribeOrganizationConformancePackStatusesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeOrganizationConformancePackStatusesInput, ...func(*configservice.Options)) *configservice.DescribeOrganizationConformancePackStatusesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeOrganizationConformancePackStatusesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeOrganizationConformancePackStatusesInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationConformancePacks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationConformancePacks(ctx context.Context, params *configservice.DescribeOrganizationConformancePacksInput, optFns ...func(*configservice.Options)) (*configservice.DescribeOrganizationConformancePacksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationConformancePacks")
	}

	var r0 *configservice.DescribeOrganizationConformancePacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeOrganizationConformancePacksInput, ...func(*configservice.Options)) (*configservice.DescribeOrganizationConformancePacksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeOrganizationConformancePacksInput, ...func(*configservice.Options)) *configservice.DescribeOrganizationConformancePacksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeOrganizationConformancePacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeOrganizationConformancePacksInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePendingAggregationRequests provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePendingAggregationRequests(ctx context.Context, params *configservice.DescribePendingAggregationRequestsInput, optFns ...func(*configservice.Options)) (*configservice.DescribePendingAggregationRequestsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePendingAggregationRequests")
	}

	var r0 *configservice.DescribePendingAggregationRequestsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribePendingAggregationRequestsInput, ...func(*configservice.Options)) (*configservice.DescribePendingAggregationRequestsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribePendingAggregationRequestsInput, ...func(*configservice.Options)) *configservice.DescribePendingAggregationRequestsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribePendingAggregationRequestsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribePendingAggregationRequestsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRemediationConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRemediationConfigurations(ctx context.Context, params *configservice.DescribeRemediationConfigurationsInput, optFns ...func(*configservice.Options)) (*configservice.DescribeRemediationConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRemediationConfigurations")
	}

	var r0 *configservice.DescribeRemediationConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeRemediationConfigurationsInput, ...func(*configservice.Options)) (*configservice.DescribeRemediationConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeRemediationConfigurationsInput, ...func(*configservice.Options)) *configservice.DescribeRemediationConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeRemediationConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeRemediationConfigurationsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRemediationExceptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRemediationExceptions(ctx context.Context, params *configservice.DescribeRemediationExceptionsInput, optFns ...func(*configservice.Options)) (*configservice.DescribeRemediationExceptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRemediationExceptions")
	}

	var r0 *configservice.DescribeRemediationExceptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeRemediationExceptionsInput, ...func(*configservice.Options)) (*configservice.DescribeRemediationExceptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeRemediationExceptionsInput, ...func(*configservice.Options)) *configservice.DescribeRemediationExceptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeRemediationExceptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeRemediationExceptionsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRemediationExecutionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRemediationExecutionStatus(ctx context.Context, params *configservice.DescribeRemediationExecutionStatusInput, optFns ...func(*configservice.Options)) (*configservice.DescribeRemediationExecutionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRemediationExecutionStatus")
	}

	var r0 *configservice.DescribeRemediationExecutionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeRemediationExecutionStatusInput, ...func(*configservice.Options)) (*configservice.DescribeRemediationExecutionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeRemediationExecutionStatusInput, ...func(*configservice.Options)) *configservice.DescribeRemediationExecutionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeRemediationExecutionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeRemediationExecutionStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRetentionConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRetentionConfigurations(ctx context.Context, params *configservice.DescribeRetentionConfigurationsInput, optFns ...func(*configservice.Options)) (*configservice.DescribeRetentionConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRetentionConfigurations")
	}

	var r0 *configservice.DescribeRetentionConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeRetentionConfigurationsInput, ...func(*configservice.Options)) (*configservice.DescribeRetentionConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.DescribeRetentionConfigurationsInput, ...func(*configservice.Options)) *configservice.DescribeRetentionConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.DescribeRetentionConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.DescribeRetentionConfigurationsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregateComplianceDetailsByConfigRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAggregateComplianceDetailsByConfigRule(ctx context.Context, params *configservice.GetAggregateComplianceDetailsByConfigRuleInput, optFns ...func(*configservice.Options)) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregateComplianceDetailsByConfigRule")
	}

	var r0 *configservice.GetAggregateComplianceDetailsByConfigRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateComplianceDetailsByConfigRuleInput, ...func(*configservice.Options)) (*configservice.GetAggregateComplianceDetailsByConfigRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateComplianceDetailsByConfigRuleInput, ...func(*configservice.Options)) *configservice.GetAggregateComplianceDetailsByConfigRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetAggregateComplianceDetailsByConfigRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetAggregateComplianceDetailsByConfigRuleInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregateConfigRuleComplianceSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAggregateConfigRuleComplianceSummary(ctx context.Context, params *configservice.GetAggregateConfigRuleComplianceSummaryInput, optFns ...func(*configservice.Options)) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregateConfigRuleComplianceSummary")
	}

	var r0 *configservice.GetAggregateConfigRuleComplianceSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateConfigRuleComplianceSummaryInput, ...func(*configservice.Options)) (*configservice.GetAggregateConfigRuleComplianceSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateConfigRuleComplianceSummaryInput, ...func(*configservice.Options)) *configservice.GetAggregateConfigRuleComplianceSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetAggregateConfigRuleComplianceSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetAggregateConfigRuleComplianceSummaryInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregateConformancePackComplianceSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAggregateConformancePackComplianceSummary(ctx context.Context, params *configservice.GetAggregateConformancePackComplianceSummaryInput, optFns ...func(*configservice.Options)) (*configservice.GetAggregateConformancePackComplianceSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregateConformancePackComplianceSummary")
	}

	var r0 *configservice.GetAggregateConformancePackComplianceSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateConformancePackComplianceSummaryInput, ...func(*configservice.Options)) (*configservice.GetAggregateConformancePackComplianceSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateConformancePackComplianceSummaryInput, ...func(*configservice.Options)) *configservice.GetAggregateConformancePackComplianceSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetAggregateConformancePackComplianceSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetAggregateConformancePackComplianceSummaryInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregateDiscoveredResourceCounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAggregateDiscoveredResourceCounts(ctx context.Context, params *configservice.GetAggregateDiscoveredResourceCountsInput, optFns ...func(*configservice.Options)) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregateDiscoveredResourceCounts")
	}

	var r0 *configservice.GetAggregateDiscoveredResourceCountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateDiscoveredResourceCountsInput, ...func(*configservice.Options)) (*configservice.GetAggregateDiscoveredResourceCountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateDiscoveredResourceCountsInput, ...func(*configservice.Options)) *configservice.GetAggregateDiscoveredResourceCountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetAggregateDiscoveredResourceCountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetAggregateDiscoveredResourceCountsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAggregateResourceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAggregateResourceConfig(ctx context.Context, params *configservice.GetAggregateResourceConfigInput, optFns ...func(*configservice.Options)) (*configservice.GetAggregateResourceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAggregateResourceConfig")
	}

	var r0 *configservice.GetAggregateResourceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateResourceConfigInput, ...func(*configservice.Options)) (*configservice.GetAggregateResourceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetAggregateResourceConfigInput, ...func(*configservice.Options)) *configservice.GetAggregateResourceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetAggregateResourceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetAggregateResourceConfigInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComplianceDetailsByConfigRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComplianceDetailsByConfigRule(ctx context.Context, params *configservice.GetComplianceDetailsByConfigRuleInput, optFns ...func(*configservice.Options)) (*configservice.GetComplianceDetailsByConfigRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComplianceDetailsByConfigRule")
	}

	var r0 *configservice.GetComplianceDetailsByConfigRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetComplianceDetailsByConfigRuleInput, ...func(*configservice.Options)) (*configservice.GetComplianceDetailsByConfigRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetComplianceDetailsByConfigRuleInput, ...func(*configservice.Options)) *configservice.GetComplianceDetailsByConfigRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetComplianceDetailsByConfigRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetComplianceDetailsByConfigRuleInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComplianceDetailsByResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComplianceDetailsByResource(ctx context.Context, params *configservice.GetComplianceDetailsByResourceInput, optFns ...func(*configservice.Options)) (*configservice.GetComplianceDetailsByResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComplianceDetailsByResource")
	}

	var r0 *configservice.GetComplianceDetailsByResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetComplianceDetailsByResourceInput, ...func(*configservice.Options)) (*configservice.GetComplianceDetailsByResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetComplianceDetailsByResourceInput, ...func(*configservice.Options)) *configservice.GetComplianceDetailsByResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetComplianceDetailsByResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetComplianceDetailsByResourceInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComplianceSummaryByConfigRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComplianceSummaryByConfigRule(ctx context.Context, params *configservice.GetComplianceSummaryByConfigRuleInput, optFns ...func(*configservice.Options)) (*configservice.GetComplianceSummaryByConfigRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComplianceSummaryByConfigRule")
	}

	var r0 *configservice.GetComplianceSummaryByConfigRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetComplianceSummaryByConfigRuleInput, ...func(*configservice.Options)) (*configservice.GetComplianceSummaryByConfigRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetComplianceSummaryByConfigRuleInput, ...func(*configservice.Options)) *configservice.GetComplianceSummaryByConfigRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetComplianceSummaryByConfigRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetComplianceSummaryByConfigRuleInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComplianceSummaryByResourceType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComplianceSummaryByResourceType(ctx context.Context, params *configservice.GetComplianceSummaryByResourceTypeInput, optFns ...func(*configservice.Options)) (*configservice.GetComplianceSummaryByResourceTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComplianceSummaryByResourceType")
	}

	var r0 *configservice.GetComplianceSummaryByResourceTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetComplianceSummaryByResourceTypeInput, ...func(*configservice.Options)) (*configservice.GetComplianceSummaryByResourceTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetComplianceSummaryByResourceTypeInput, ...func(*configservice.Options)) *configservice.GetComplianceSummaryByResourceTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetComplianceSummaryByResourceTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetComplianceSummaryByResourceTypeInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConformancePackComplianceDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConformancePackComplianceDetails(ctx context.Context, params *configservice.GetConformancePackComplianceDetailsInput, optFns ...func(*configservice.Options)) (*configservice.GetConformancePackComplianceDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConformancePackComplianceDetails")
	}

	var r0 *configservice.GetConformancePackComplianceDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetConformancePackComplianceDetailsInput, ...func(*configservice.Options)) (*configservice.GetConformancePackComplianceDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetConformancePackComplianceDetailsInput, ...func(*configservice.Options)) *configservice.GetConformancePackComplianceDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetConformancePackComplianceDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetConformancePackComplianceDetailsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConformancePackComplianceSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConformancePackComplianceSummary(ctx context.Context, params *configservice.GetConformancePackComplianceSummaryInput, optFns ...func(*configservice.Options)) (*configservice.GetConformancePackComplianceSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConformancePackComplianceSummary")
	}

	var r0 *configservice.GetConformancePackComplianceSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetConformancePackComplianceSummaryInput, ...func(*configservice.Options)) (*configservice.GetConformancePackComplianceSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetConformancePackComplianceSummaryInput, ...func(*configservice.Options)) *configservice.GetConformancePackComplianceSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetConformancePackComplianceSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetConformancePackComplianceSummaryInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomRulePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCustomRulePolicy(ctx context.Context, params *configservice.GetCustomRulePolicyInput, optFns ...func(*configservice.Options)) (*configservice.GetCustomRulePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomRulePolicy")
	}

	var r0 *configservice.GetCustomRulePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetCustomRulePolicyInput, ...func(*configservice.Options)) (*configservice.GetCustomRulePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetCustomRulePolicyInput, ...func(*configservice.Options)) *configservice.GetCustomRulePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetCustomRulePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetCustomRulePolicyInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscoveredResourceCounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDiscoveredResourceCounts(ctx context.Context, params *configservice.GetDiscoveredResourceCountsInput, optFns ...func(*configservice.Options)) (*configservice.GetDiscoveredResourceCountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDiscoveredResourceCounts")
	}

	var r0 *configservice.GetDiscoveredResourceCountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetDiscoveredResourceCountsInput, ...func(*configservice.Options)) (*configservice.GetDiscoveredResourceCountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetDiscoveredResourceCountsInput, ...func(*configservice.Options)) *configservice.GetDiscoveredResourceCountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetDiscoveredResourceCountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetDiscoveredResourceCountsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationConfigRuleDetailedStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOrganizationConfigRuleDetailedStatus(ctx context.Context, params *configservice.GetOrganizationConfigRuleDetailedStatusInput, optFns ...func(*configservice.Options)) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationConfigRuleDetailedStatus")
	}

	var r0 *configservice.GetOrganizationConfigRuleDetailedStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetOrganizationConfigRuleDetailedStatusInput, ...func(*configservice.Options)) (*configservice.GetOrganizationConfigRuleDetailedStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetOrganizationConfigRuleDetailedStatusInput, ...func(*configservice.Options)) *configservice.GetOrganizationConfigRuleDetailedStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetOrganizationConfigRuleDetailedStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetOrganizationConfigRuleDetailedStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationConformancePackDetailedStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOrganizationConformancePackDetailedStatus(ctx context.Context, params *configservice.GetOrganizationConformancePackDetailedStatusInput, optFns ...func(*configservice.Options)) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationConformancePackDetailedStatus")
	}

	var r0 *configservice.GetOrganizationConformancePackDetailedStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetOrganizationConformancePackDetailedStatusInput, ...func(*configservice.Options)) (*configservice.GetOrganizationConformancePackDetailedStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetOrganizationConformancePackDetailedStatusInput, ...func(*configservice.Options)) *configservice.GetOrganizationConformancePackDetailedStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetOrganizationConformancePackDetailedStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetOrganizationConformancePackDetailedStatusInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationCustomRulePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOrganizationCustomRulePolicy(ctx context.Context, params *configservice.GetOrganizationCustomRulePolicyInput, optFns ...func(*configservice.Options)) (*configservice.GetOrganizationCustomRulePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationCustomRulePolicy")
	}

	var r0 *configservice.GetOrganizationCustomRulePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetOrganizationCustomRulePolicyInput, ...func(*configservice.Options)) (*configservice.GetOrganizationCustomRulePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetOrganizationCustomRulePolicyInput, ...func(*configservice.Options)) *configservice.GetOrganizationCustomRulePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetOrganizationCustomRulePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetOrganizationCustomRulePolicyInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceConfigHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceConfigHistory(ctx context.Context, params *configservice.GetResourceConfigHistoryInput, optFns ...func(*configservice.Options)) (*configservice.GetResourceConfigHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceConfigHistory")
	}

	var r0 *configservice.GetResourceConfigHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetResourceConfigHistoryInput, ...func(*configservice.Options)) (*configservice.GetResourceConfigHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetResourceConfigHistoryInput, ...func(*configservice.Options)) *configservice.GetResourceConfigHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetResourceConfigHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetResourceConfigHistoryInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceEvaluationSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceEvaluationSummary(ctx context.Context, params *configservice.GetResourceEvaluationSummaryInput, optFns ...func(*configservice.Options)) (*configservice.GetResourceEvaluationSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceEvaluationSummary")
	}

	var r0 *configservice.GetResourceEvaluationSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetResourceEvaluationSummaryInput, ...func(*configservice.Options)) (*configservice.GetResourceEvaluationSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetResourceEvaluationSummaryInput, ...func(*configservice.Options)) *configservice.GetResourceEvaluationSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetResourceEvaluationSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetResourceEvaluationSummaryInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStoredQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStoredQuery(ctx context.Context, params *configservice.GetStoredQueryInput, optFns ...func(*configservice.Options)) (*configservice.GetStoredQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStoredQuery")
	}

	var r0 *configservice.GetStoredQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetStoredQueryInput, ...func(*configservice.Options)) (*configservice.GetStoredQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.GetStoredQueryInput, ...func(*configservice.Options)) *configservice.GetStoredQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.GetStoredQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.GetStoredQueryInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAggregateDiscoveredResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAggregateDiscoveredResources(ctx context.Context, params *configservice.ListAggregateDiscoveredResourcesInput, optFns ...func(*configservice.Options)) (*configservice.ListAggregateDiscoveredResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAggregateDiscoveredResources")
	}

	var r0 *configservice.ListAggregateDiscoveredResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListAggregateDiscoveredResourcesInput, ...func(*configservice.Options)) (*configservice.ListAggregateDiscoveredResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListAggregateDiscoveredResourcesInput, ...func(*configservice.Options)) *configservice.ListAggregateDiscoveredResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.ListAggregateDiscoveredResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.ListAggregateDiscoveredResourcesInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConformancePackComplianceScores provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConformancePackComplianceScores(ctx context.Context, params *configservice.ListConformancePackComplianceScoresInput, optFns ...func(*configservice.Options)) (*configservice.ListConformancePackComplianceScoresOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConformancePackComplianceScores")
	}

	var r0 *configservice.ListConformancePackComplianceScoresOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListConformancePackComplianceScoresInput, ...func(*configservice.Options)) (*configservice.ListConformancePackComplianceScoresOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListConformancePackComplianceScoresInput, ...func(*configservice.Options)) *configservice.ListConformancePackComplianceScoresOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.ListConformancePackComplianceScoresOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.ListConformancePackComplianceScoresInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiscoveredResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDiscoveredResources(ctx context.Context, params *configservice.ListDiscoveredResourcesInput, optFns ...func(*configservice.Options)) (*configservice.ListDiscoveredResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDiscoveredResources")
	}

	var r0 *configservice.ListDiscoveredResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListDiscoveredResourcesInput, ...func(*configservice.Options)) (*configservice.ListDiscoveredResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListDiscoveredResourcesInput, ...func(*configservice.Options)) *configservice.ListDiscoveredResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.ListDiscoveredResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.ListDiscoveredResourcesInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceEvaluations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceEvaluations(ctx context.Context, params *configservice.ListResourceEvaluationsInput, optFns ...func(*configservice.Options)) (*configservice.ListResourceEvaluationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceEvaluations")
	}

	var r0 *configservice.ListResourceEvaluationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListResourceEvaluationsInput, ...func(*configservice.Options)) (*configservice.ListResourceEvaluationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListResourceEvaluationsInput, ...func(*configservice.Options)) *configservice.ListResourceEvaluationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.ListResourceEvaluationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.ListResourceEvaluationsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStoredQueries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStoredQueries(ctx context.Context, params *configservice.ListStoredQueriesInput, optFns ...func(*configservice.Options)) (*configservice.ListStoredQueriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStoredQueries")
	}

	var r0 *configservice.ListStoredQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListStoredQueriesInput, ...func(*configservice.Options)) (*configservice.ListStoredQueriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListStoredQueriesInput, ...func(*configservice.Options)) *configservice.ListStoredQueriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.ListStoredQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.ListStoredQueriesInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *configservice.ListTagsForResourceInput, optFns ...func(*configservice.Options)) (*configservice.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *configservice.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListTagsForResourceInput, ...func(*configservice.Options)) (*configservice.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.ListTagsForResourceInput, ...func(*configservice.Options)) *configservice.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.ListTagsForResourceInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() configservice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 configservice.Options
	if rf, ok := ret.Get(0).(func() configservice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(configservice.Options)
	}

	return r0
}

// PutAggregationAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAggregationAuthorization(ctx context.Context, params *configservice.PutAggregationAuthorizationInput, optFns ...func(*configservice.Options)) (*configservice.PutAggregationAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAggregationAuthorization")
	}

	var r0 *configservice.PutAggregationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutAggregationAuthorizationInput, ...func(*configservice.Options)) (*configservice.PutAggregationAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutAggregationAuthorizationInput, ...func(*configservice.Options)) *configservice.PutAggregationAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutAggregationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutAggregationAuthorizationInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigRule(ctx context.Context, params *configservice.PutConfigRuleInput, optFns ...func(*configservice.Options)) (*configservice.PutConfigRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigRule")
	}

	var r0 *configservice.PutConfigRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutConfigRuleInput, ...func(*configservice.Options)) (*configservice.PutConfigRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutConfigRuleInput, ...func(*configservice.Options)) *configservice.PutConfigRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutConfigRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutConfigRuleInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationAggregator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationAggregator(ctx context.Context, params *configservice.PutConfigurationAggregatorInput, optFns ...func(*configservice.Options)) (*configservice.PutConfigurationAggregatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationAggregator")
	}

	var r0 *configservice.PutConfigurationAggregatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutConfigurationAggregatorInput, ...func(*configservice.Options)) (*configservice.PutConfigurationAggregatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutConfigurationAggregatorInput, ...func(*configservice.Options)) *configservice.PutConfigurationAggregatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutConfigurationAggregatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutConfigurationAggregatorInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConfigurationRecorder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationRecorder(ctx context.Context, params *configservice.PutConfigurationRecorderInput, optFns ...func(*configservice.Options)) (*configservice.PutConfigurationRecorderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationRecorder")
	}

	var r0 *configservice.PutConfigurationRecorderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutConfigurationRecorderInput, ...func(*configservice.Options)) (*configservice.PutConfigurationRecorderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutConfigurationRecorderInput, ...func(*configservice.Options)) *configservice.PutConfigurationRecorderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutConfigurationRecorderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutConfigurationRecorderInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutConformancePack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConformancePack(ctx context.Context, params *configservice.PutConformancePackInput, optFns ...func(*configservice.Options)) (*configservice.PutConformancePackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConformancePack")
	}

	var r0 *configservice.PutConformancePackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutConformancePackInput, ...func(*configservice.Options)) (*configservice.PutConformancePackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutConformancePackInput, ...func(*configservice.Options)) *configservice.PutConformancePackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutConformancePackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutConformancePackInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDeliveryChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDeliveryChannel(ctx context.Context, params *configservice.PutDeliveryChannelInput, optFns ...func(*configservice.Options)) (*configservice.PutDeliveryChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDeliveryChannel")
	}

	var r0 *configservice.PutDeliveryChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutDeliveryChannelInput, ...func(*configservice.Options)) (*configservice.PutDeliveryChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutDeliveryChannelInput, ...func(*configservice.Options)) *configservice.PutDeliveryChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutDeliveryChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutDeliveryChannelInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEvaluations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEvaluations(ctx context.Context, params *configservice.PutEvaluationsInput, optFns ...func(*configservice.Options)) (*configservice.PutEvaluationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEvaluations")
	}

	var r0 *configservice.PutEvaluationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutEvaluationsInput, ...func(*configservice.Options)) (*configservice.PutEvaluationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutEvaluationsInput, ...func(*configservice.Options)) *configservice.PutEvaluationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutEvaluationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutEvaluationsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutExternalEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutExternalEvaluation(ctx context.Context, params *configservice.PutExternalEvaluationInput, optFns ...func(*configservice.Options)) (*configservice.PutExternalEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutExternalEvaluation")
	}

	var r0 *configservice.PutExternalEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutExternalEvaluationInput, ...func(*configservice.Options)) (*configservice.PutExternalEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutExternalEvaluationInput, ...func(*configservice.Options)) *configservice.PutExternalEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutExternalEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutExternalEvaluationInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationConfigRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutOrganizationConfigRule(ctx context.Context, params *configservice.PutOrganizationConfigRuleInput, optFns ...func(*configservice.Options)) (*configservice.PutOrganizationConfigRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationConfigRule")
	}

	var r0 *configservice.PutOrganizationConfigRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutOrganizationConfigRuleInput, ...func(*configservice.Options)) (*configservice.PutOrganizationConfigRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutOrganizationConfigRuleInput, ...func(*configservice.Options)) *configservice.PutOrganizationConfigRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutOrganizationConfigRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutOrganizationConfigRuleInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutOrganizationConformancePack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutOrganizationConformancePack(ctx context.Context, params *configservice.PutOrganizationConformancePackInput, optFns ...func(*configservice.Options)) (*configservice.PutOrganizationConformancePackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutOrganizationConformancePack")
	}

	var r0 *configservice.PutOrganizationConformancePackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutOrganizationConformancePackInput, ...func(*configservice.Options)) (*configservice.PutOrganizationConformancePackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutOrganizationConformancePackInput, ...func(*configservice.Options)) *configservice.PutOrganizationConformancePackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutOrganizationConformancePackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutOrganizationConformancePackInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRemediationConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRemediationConfigurations(ctx context.Context, params *configservice.PutRemediationConfigurationsInput, optFns ...func(*configservice.Options)) (*configservice.PutRemediationConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRemediationConfigurations")
	}

	var r0 *configservice.PutRemediationConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutRemediationConfigurationsInput, ...func(*configservice.Options)) (*configservice.PutRemediationConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutRemediationConfigurationsInput, ...func(*configservice.Options)) *configservice.PutRemediationConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutRemediationConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutRemediationConfigurationsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRemediationExceptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRemediationExceptions(ctx context.Context, params *configservice.PutRemediationExceptionsInput, optFns ...func(*configservice.Options)) (*configservice.PutRemediationExceptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRemediationExceptions")
	}

	var r0 *configservice.PutRemediationExceptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutRemediationExceptionsInput, ...func(*configservice.Options)) (*configservice.PutRemediationExceptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutRemediationExceptionsInput, ...func(*configservice.Options)) *configservice.PutRemediationExceptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutRemediationExceptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutRemediationExceptionsInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourceConfig(ctx context.Context, params *configservice.PutResourceConfigInput, optFns ...func(*configservice.Options)) (*configservice.PutResourceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourceConfig")
	}

	var r0 *configservice.PutResourceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutResourceConfigInput, ...func(*configservice.Options)) (*configservice.PutResourceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutResourceConfigInput, ...func(*configservice.Options)) *configservice.PutResourceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutResourceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutResourceConfigInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRetentionConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRetentionConfiguration(ctx context.Context, params *configservice.PutRetentionConfigurationInput, optFns ...func(*configservice.Options)) (*configservice.PutRetentionConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRetentionConfiguration")
	}

	var r0 *configservice.PutRetentionConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutRetentionConfigurationInput, ...func(*configservice.Options)) (*configservice.PutRetentionConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutRetentionConfigurationInput, ...func(*configservice.Options)) *configservice.PutRetentionConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutRetentionConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutRetentionConfigurationInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStoredQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutStoredQuery(ctx context.Context, params *configservice.PutStoredQueryInput, optFns ...func(*configservice.Options)) (*configservice.PutStoredQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutStoredQuery")
	}

	var r0 *configservice.PutStoredQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutStoredQueryInput, ...func(*configservice.Options)) (*configservice.PutStoredQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.PutStoredQueryInput, ...func(*configservice.Options)) *configservice.PutStoredQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.PutStoredQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.PutStoredQueryInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAggregateResourceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SelectAggregateResourceConfig(ctx context.Context, params *configservice.SelectAggregateResourceConfigInput, optFns ...func(*configservice.Options)) (*configservice.SelectAggregateResourceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SelectAggregateResourceConfig")
	}

	var r0 *configservice.SelectAggregateResourceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.SelectAggregateResourceConfigInput, ...func(*configservice.Options)) (*configservice.SelectAggregateResourceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.SelectAggregateResourceConfigInput, ...func(*configservice.Options)) *configservice.SelectAggregateResourceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.SelectAggregateResourceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.SelectAggregateResourceConfigInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectResourceConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SelectResourceConfig(ctx context.Context, params *configservice.SelectResourceConfigInput, optFns ...func(*configservice.Options)) (*configservice.SelectResourceConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SelectResourceConfig")
	}

	var r0 *configservice.SelectResourceConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.SelectResourceConfigInput, ...func(*configservice.Options)) (*configservice.SelectResourceConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.SelectResourceConfigInput, ...func(*configservice.Options)) *configservice.SelectResourceConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.SelectResourceConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.SelectResourceConfigInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartConfigRulesEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartConfigRulesEvaluation(ctx context.Context, params *configservice.StartConfigRulesEvaluationInput, optFns ...func(*configservice.Options)) (*configservice.StartConfigRulesEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartConfigRulesEvaluation")
	}

	var r0 *configservice.StartConfigRulesEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StartConfigRulesEvaluationInput, ...func(*configservice.Options)) (*configservice.StartConfigRulesEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StartConfigRulesEvaluationInput, ...func(*configservice.Options)) *configservice.StartConfigRulesEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.StartConfigRulesEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.StartConfigRulesEvaluationInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartConfigurationRecorder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartConfigurationRecorder(ctx context.Context, params *configservice.StartConfigurationRecorderInput, optFns ...func(*configservice.Options)) (*configservice.StartConfigurationRecorderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartConfigurationRecorder")
	}

	var r0 *configservice.StartConfigurationRecorderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StartConfigurationRecorderInput, ...func(*configservice.Options)) (*configservice.StartConfigurationRecorderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StartConfigurationRecorderInput, ...func(*configservice.Options)) *configservice.StartConfigurationRecorderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.StartConfigurationRecorderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.StartConfigurationRecorderInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRemediationExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRemediationExecution(ctx context.Context, params *configservice.StartRemediationExecutionInput, optFns ...func(*configservice.Options)) (*configservice.StartRemediationExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRemediationExecution")
	}

	var r0 *configservice.StartRemediationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StartRemediationExecutionInput, ...func(*configservice.Options)) (*configservice.StartRemediationExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StartRemediationExecutionInput, ...func(*configservice.Options)) *configservice.StartRemediationExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.StartRemediationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.StartRemediationExecutionInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartResourceEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartResourceEvaluation(ctx context.Context, params *configservice.StartResourceEvaluationInput, optFns ...func(*configservice.Options)) (*configservice.StartResourceEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartResourceEvaluation")
	}

	var r0 *configservice.StartResourceEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StartResourceEvaluationInput, ...func(*configservice.Options)) (*configservice.StartResourceEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StartResourceEvaluationInput, ...func(*configservice.Options)) *configservice.StartResourceEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.StartResourceEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.StartResourceEvaluationInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopConfigurationRecorder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopConfigurationRecorder(ctx context.Context, params *configservice.StopConfigurationRecorderInput, optFns ...func(*configservice.Options)) (*configservice.StopConfigurationRecorderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopConfigurationRecorder")
	}

	var r0 *configservice.StopConfigurationRecorderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StopConfigurationRecorderInput, ...func(*configservice.Options)) (*configservice.StopConfigurationRecorderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.StopConfigurationRecorderInput, ...func(*configservice.Options)) *configservice.StopConfigurationRecorderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.StopConfigurationRecorderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.StopConfigurationRecorderInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *configservice.TagResourceInput, optFns ...func(*configservice.Options)) (*configservice.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *configservice.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.TagResourceInput, ...func(*configservice.Options)) (*configservice.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.TagResourceInput, ...func(*configservice.Options)) *configservice.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.TagResourceInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *configservice.UntagResourceInput, optFns ...func(*configservice.Options)) (*configservice.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *configservice.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.UntagResourceInput, ...func(*configservice.Options)) (*configservice.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *configservice.UntagResourceInput, ...func(*configservice.Options)) *configservice.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*configservice.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *configservice.UntagResourceInput, ...func(*configservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
