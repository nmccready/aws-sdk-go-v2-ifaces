// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	geoplaces "github.com/aws/aws-sdk-go-v2/service/geoplaces"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// Autocomplete provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Autocomplete(ctx context.Context, params *geoplaces.AutocompleteInput, optFns ...func(*geoplaces.Options)) (*geoplaces.AutocompleteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Autocomplete")
	}

	var r0 *geoplaces.AutocompleteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.AutocompleteInput, ...func(*geoplaces.Options)) (*geoplaces.AutocompleteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.AutocompleteInput, ...func(*geoplaces.Options)) *geoplaces.AutocompleteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoplaces.AutocompleteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geoplaces.AutocompleteInput, ...func(*geoplaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Geocode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Geocode(ctx context.Context, params *geoplaces.GeocodeInput, optFns ...func(*geoplaces.Options)) (*geoplaces.GeocodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Geocode")
	}

	var r0 *geoplaces.GeocodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.GeocodeInput, ...func(*geoplaces.Options)) (*geoplaces.GeocodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.GeocodeInput, ...func(*geoplaces.Options)) *geoplaces.GeocodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoplaces.GeocodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geoplaces.GeocodeInput, ...func(*geoplaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPlace(ctx context.Context, params *geoplaces.GetPlaceInput, optFns ...func(*geoplaces.Options)) (*geoplaces.GetPlaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlace")
	}

	var r0 *geoplaces.GetPlaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.GetPlaceInput, ...func(*geoplaces.Options)) (*geoplaces.GetPlaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.GetPlaceInput, ...func(*geoplaces.Options)) *geoplaces.GetPlaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoplaces.GetPlaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geoplaces.GetPlaceInput, ...func(*geoplaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() geoplaces.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 geoplaces.Options
	if rf, ok := ret.Get(0).(func() geoplaces.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(geoplaces.Options)
	}

	return r0
}

// ReverseGeocode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReverseGeocode(ctx context.Context, params *geoplaces.ReverseGeocodeInput, optFns ...func(*geoplaces.Options)) (*geoplaces.ReverseGeocodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReverseGeocode")
	}

	var r0 *geoplaces.ReverseGeocodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.ReverseGeocodeInput, ...func(*geoplaces.Options)) (*geoplaces.ReverseGeocodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.ReverseGeocodeInput, ...func(*geoplaces.Options)) *geoplaces.ReverseGeocodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoplaces.ReverseGeocodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geoplaces.ReverseGeocodeInput, ...func(*geoplaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchNearby provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchNearby(ctx context.Context, params *geoplaces.SearchNearbyInput, optFns ...func(*geoplaces.Options)) (*geoplaces.SearchNearbyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchNearby")
	}

	var r0 *geoplaces.SearchNearbyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.SearchNearbyInput, ...func(*geoplaces.Options)) (*geoplaces.SearchNearbyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.SearchNearbyInput, ...func(*geoplaces.Options)) *geoplaces.SearchNearbyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoplaces.SearchNearbyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geoplaces.SearchNearbyInput, ...func(*geoplaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchText provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchText(ctx context.Context, params *geoplaces.SearchTextInput, optFns ...func(*geoplaces.Options)) (*geoplaces.SearchTextOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchText")
	}

	var r0 *geoplaces.SearchTextOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.SearchTextInput, ...func(*geoplaces.Options)) (*geoplaces.SearchTextOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.SearchTextInput, ...func(*geoplaces.Options)) *geoplaces.SearchTextOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoplaces.SearchTextOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geoplaces.SearchTextInput, ...func(*geoplaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Suggest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Suggest(ctx context.Context, params *geoplaces.SuggestInput, optFns ...func(*geoplaces.Options)) (*geoplaces.SuggestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Suggest")
	}

	var r0 *geoplaces.SuggestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.SuggestInput, ...func(*geoplaces.Options)) (*geoplaces.SuggestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *geoplaces.SuggestInput, ...func(*geoplaces.Options)) *geoplaces.SuggestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*geoplaces.SuggestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *geoplaces.SuggestInput, ...func(*geoplaces.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
