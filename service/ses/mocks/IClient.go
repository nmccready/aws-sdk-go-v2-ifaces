// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	ses "github.com/aws/aws-sdk-go-v2/service/ses"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CloneReceiptRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CloneReceiptRuleSet(ctx context.Context, params *ses.CloneReceiptRuleSetInput, optFns ...func(*ses.Options)) (*ses.CloneReceiptRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloneReceiptRuleSet")
	}

	var r0 *ses.CloneReceiptRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CloneReceiptRuleSetInput, ...func(*ses.Options)) (*ses.CloneReceiptRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CloneReceiptRuleSetInput, ...func(*ses.Options)) *ses.CloneReceiptRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CloneReceiptRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CloneReceiptRuleSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSet(ctx context.Context, params *ses.CreateConfigurationSetInput, optFns ...func(*ses.Options)) (*ses.CreateConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSet")
	}

	var r0 *ses.CreateConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateConfigurationSetInput, ...func(*ses.Options)) (*ses.CreateConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateConfigurationSetInput, ...func(*ses.Options)) *ses.CreateConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CreateConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CreateConfigurationSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSetEventDestination(ctx context.Context, params *ses.CreateConfigurationSetEventDestinationInput, optFns ...func(*ses.Options)) (*ses.CreateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSetEventDestination")
	}

	var r0 *ses.CreateConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateConfigurationSetEventDestinationInput, ...func(*ses.Options)) (*ses.CreateConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateConfigurationSetEventDestinationInput, ...func(*ses.Options)) *ses.CreateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CreateConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CreateConfigurationSetEventDestinationInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationSetTrackingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationSetTrackingOptions(ctx context.Context, params *ses.CreateConfigurationSetTrackingOptionsInput, optFns ...func(*ses.Options)) (*ses.CreateConfigurationSetTrackingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationSetTrackingOptions")
	}

	var r0 *ses.CreateConfigurationSetTrackingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) (*ses.CreateConfigurationSetTrackingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) *ses.CreateConfigurationSetTrackingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CreateConfigurationSetTrackingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CreateConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomVerificationEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomVerificationEmailTemplate(ctx context.Context, params *ses.CreateCustomVerificationEmailTemplateInput, optFns ...func(*ses.Options)) (*ses.CreateCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomVerificationEmailTemplate")
	}

	var r0 *ses.CreateCustomVerificationEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateCustomVerificationEmailTemplateInput, ...func(*ses.Options)) (*ses.CreateCustomVerificationEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateCustomVerificationEmailTemplateInput, ...func(*ses.Options)) *ses.CreateCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CreateCustomVerificationEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CreateCustomVerificationEmailTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReceiptFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReceiptFilter(ctx context.Context, params *ses.CreateReceiptFilterInput, optFns ...func(*ses.Options)) (*ses.CreateReceiptFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReceiptFilter")
	}

	var r0 *ses.CreateReceiptFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateReceiptFilterInput, ...func(*ses.Options)) (*ses.CreateReceiptFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateReceiptFilterInput, ...func(*ses.Options)) *ses.CreateReceiptFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CreateReceiptFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CreateReceiptFilterInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReceiptRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReceiptRule(ctx context.Context, params *ses.CreateReceiptRuleInput, optFns ...func(*ses.Options)) (*ses.CreateReceiptRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReceiptRule")
	}

	var r0 *ses.CreateReceiptRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateReceiptRuleInput, ...func(*ses.Options)) (*ses.CreateReceiptRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateReceiptRuleInput, ...func(*ses.Options)) *ses.CreateReceiptRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CreateReceiptRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CreateReceiptRuleInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReceiptRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReceiptRuleSet(ctx context.Context, params *ses.CreateReceiptRuleSetInput, optFns ...func(*ses.Options)) (*ses.CreateReceiptRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReceiptRuleSet")
	}

	var r0 *ses.CreateReceiptRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateReceiptRuleSetInput, ...func(*ses.Options)) (*ses.CreateReceiptRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateReceiptRuleSetInput, ...func(*ses.Options)) *ses.CreateReceiptRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CreateReceiptRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CreateReceiptRuleSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTemplate(ctx context.Context, params *ses.CreateTemplateInput, optFns ...func(*ses.Options)) (*ses.CreateTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 *ses.CreateTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateTemplateInput, ...func(*ses.Options)) (*ses.CreateTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.CreateTemplateInput, ...func(*ses.Options)) *ses.CreateTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.CreateTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.CreateTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSet(ctx context.Context, params *ses.DeleteConfigurationSetInput, optFns ...func(*ses.Options)) (*ses.DeleteConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSet")
	}

	var r0 *ses.DeleteConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteConfigurationSetInput, ...func(*ses.Options)) (*ses.DeleteConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteConfigurationSetInput, ...func(*ses.Options)) *ses.DeleteConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteConfigurationSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSetEventDestination(ctx context.Context, params *ses.DeleteConfigurationSetEventDestinationInput, optFns ...func(*ses.Options)) (*ses.DeleteConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSetEventDestination")
	}

	var r0 *ses.DeleteConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteConfigurationSetEventDestinationInput, ...func(*ses.Options)) (*ses.DeleteConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteConfigurationSetEventDestinationInput, ...func(*ses.Options)) *ses.DeleteConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteConfigurationSetEventDestinationInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationSetTrackingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationSetTrackingOptions(ctx context.Context, params *ses.DeleteConfigurationSetTrackingOptionsInput, optFns ...func(*ses.Options)) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationSetTrackingOptions")
	}

	var r0 *ses.DeleteConfigurationSetTrackingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) (*ses.DeleteConfigurationSetTrackingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) *ses.DeleteConfigurationSetTrackingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteConfigurationSetTrackingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomVerificationEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomVerificationEmailTemplate(ctx context.Context, params *ses.DeleteCustomVerificationEmailTemplateInput, optFns ...func(*ses.Options)) (*ses.DeleteCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomVerificationEmailTemplate")
	}

	var r0 *ses.DeleteCustomVerificationEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteCustomVerificationEmailTemplateInput, ...func(*ses.Options)) (*ses.DeleteCustomVerificationEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteCustomVerificationEmailTemplateInput, ...func(*ses.Options)) *ses.DeleteCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteCustomVerificationEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteCustomVerificationEmailTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIdentity(ctx context.Context, params *ses.DeleteIdentityInput, optFns ...func(*ses.Options)) (*ses.DeleteIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentity")
	}

	var r0 *ses.DeleteIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteIdentityInput, ...func(*ses.Options)) (*ses.DeleteIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteIdentityInput, ...func(*ses.Options)) *ses.DeleteIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteIdentityInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIdentityPolicy(ctx context.Context, params *ses.DeleteIdentityPolicyInput, optFns ...func(*ses.Options)) (*ses.DeleteIdentityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityPolicy")
	}

	var r0 *ses.DeleteIdentityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteIdentityPolicyInput, ...func(*ses.Options)) (*ses.DeleteIdentityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteIdentityPolicyInput, ...func(*ses.Options)) *ses.DeleteIdentityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteIdentityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteIdentityPolicyInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReceiptFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReceiptFilter(ctx context.Context, params *ses.DeleteReceiptFilterInput, optFns ...func(*ses.Options)) (*ses.DeleteReceiptFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReceiptFilter")
	}

	var r0 *ses.DeleteReceiptFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteReceiptFilterInput, ...func(*ses.Options)) (*ses.DeleteReceiptFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteReceiptFilterInput, ...func(*ses.Options)) *ses.DeleteReceiptFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteReceiptFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteReceiptFilterInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReceiptRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReceiptRule(ctx context.Context, params *ses.DeleteReceiptRuleInput, optFns ...func(*ses.Options)) (*ses.DeleteReceiptRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReceiptRule")
	}

	var r0 *ses.DeleteReceiptRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteReceiptRuleInput, ...func(*ses.Options)) (*ses.DeleteReceiptRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteReceiptRuleInput, ...func(*ses.Options)) *ses.DeleteReceiptRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteReceiptRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteReceiptRuleInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReceiptRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReceiptRuleSet(ctx context.Context, params *ses.DeleteReceiptRuleSetInput, optFns ...func(*ses.Options)) (*ses.DeleteReceiptRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReceiptRuleSet")
	}

	var r0 *ses.DeleteReceiptRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteReceiptRuleSetInput, ...func(*ses.Options)) (*ses.DeleteReceiptRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteReceiptRuleSetInput, ...func(*ses.Options)) *ses.DeleteReceiptRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteReceiptRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteReceiptRuleSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTemplate(ctx context.Context, params *ses.DeleteTemplateInput, optFns ...func(*ses.Options)) (*ses.DeleteTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 *ses.DeleteTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteTemplateInput, ...func(*ses.Options)) (*ses.DeleteTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteTemplateInput, ...func(*ses.Options)) *ses.DeleteTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVerifiedEmailAddress provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVerifiedEmailAddress(ctx context.Context, params *ses.DeleteVerifiedEmailAddressInput, optFns ...func(*ses.Options)) (*ses.DeleteVerifiedEmailAddressOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVerifiedEmailAddress")
	}

	var r0 *ses.DeleteVerifiedEmailAddressOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteVerifiedEmailAddressInput, ...func(*ses.Options)) (*ses.DeleteVerifiedEmailAddressOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DeleteVerifiedEmailAddressInput, ...func(*ses.Options)) *ses.DeleteVerifiedEmailAddressOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DeleteVerifiedEmailAddressOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DeleteVerifiedEmailAddressInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeActiveReceiptRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeActiveReceiptRuleSet(ctx context.Context, params *ses.DescribeActiveReceiptRuleSetInput, optFns ...func(*ses.Options)) (*ses.DescribeActiveReceiptRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeActiveReceiptRuleSet")
	}

	var r0 *ses.DescribeActiveReceiptRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DescribeActiveReceiptRuleSetInput, ...func(*ses.Options)) (*ses.DescribeActiveReceiptRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DescribeActiveReceiptRuleSetInput, ...func(*ses.Options)) *ses.DescribeActiveReceiptRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DescribeActiveReceiptRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DescribeActiveReceiptRuleSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurationSet(ctx context.Context, params *ses.DescribeConfigurationSetInput, optFns ...func(*ses.Options)) (*ses.DescribeConfigurationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurationSet")
	}

	var r0 *ses.DescribeConfigurationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DescribeConfigurationSetInput, ...func(*ses.Options)) (*ses.DescribeConfigurationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DescribeConfigurationSetInput, ...func(*ses.Options)) *ses.DescribeConfigurationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DescribeConfigurationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DescribeConfigurationSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReceiptRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReceiptRule(ctx context.Context, params *ses.DescribeReceiptRuleInput, optFns ...func(*ses.Options)) (*ses.DescribeReceiptRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReceiptRule")
	}

	var r0 *ses.DescribeReceiptRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DescribeReceiptRuleInput, ...func(*ses.Options)) (*ses.DescribeReceiptRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DescribeReceiptRuleInput, ...func(*ses.Options)) *ses.DescribeReceiptRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DescribeReceiptRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DescribeReceiptRuleInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReceiptRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReceiptRuleSet(ctx context.Context, params *ses.DescribeReceiptRuleSetInput, optFns ...func(*ses.Options)) (*ses.DescribeReceiptRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReceiptRuleSet")
	}

	var r0 *ses.DescribeReceiptRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DescribeReceiptRuleSetInput, ...func(*ses.Options)) (*ses.DescribeReceiptRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.DescribeReceiptRuleSetInput, ...func(*ses.Options)) *ses.DescribeReceiptRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.DescribeReceiptRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.DescribeReceiptRuleSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountSendingEnabled provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountSendingEnabled(ctx context.Context, params *ses.GetAccountSendingEnabledInput, optFns ...func(*ses.Options)) (*ses.GetAccountSendingEnabledOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSendingEnabled")
	}

	var r0 *ses.GetAccountSendingEnabledOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetAccountSendingEnabledInput, ...func(*ses.Options)) (*ses.GetAccountSendingEnabledOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetAccountSendingEnabledInput, ...func(*ses.Options)) *ses.GetAccountSendingEnabledOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetAccountSendingEnabledOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetAccountSendingEnabledInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomVerificationEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCustomVerificationEmailTemplate(ctx context.Context, params *ses.GetCustomVerificationEmailTemplateInput, optFns ...func(*ses.Options)) (*ses.GetCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomVerificationEmailTemplate")
	}

	var r0 *ses.GetCustomVerificationEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetCustomVerificationEmailTemplateInput, ...func(*ses.Options)) (*ses.GetCustomVerificationEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetCustomVerificationEmailTemplateInput, ...func(*ses.Options)) *ses.GetCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetCustomVerificationEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetCustomVerificationEmailTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityDkimAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentityDkimAttributes(ctx context.Context, params *ses.GetIdentityDkimAttributesInput, optFns ...func(*ses.Options)) (*ses.GetIdentityDkimAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityDkimAttributes")
	}

	var r0 *ses.GetIdentityDkimAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityDkimAttributesInput, ...func(*ses.Options)) (*ses.GetIdentityDkimAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityDkimAttributesInput, ...func(*ses.Options)) *ses.GetIdentityDkimAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetIdentityDkimAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetIdentityDkimAttributesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityMailFromDomainAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentityMailFromDomainAttributes(ctx context.Context, params *ses.GetIdentityMailFromDomainAttributesInput, optFns ...func(*ses.Options)) (*ses.GetIdentityMailFromDomainAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityMailFromDomainAttributes")
	}

	var r0 *ses.GetIdentityMailFromDomainAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityMailFromDomainAttributesInput, ...func(*ses.Options)) (*ses.GetIdentityMailFromDomainAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityMailFromDomainAttributesInput, ...func(*ses.Options)) *ses.GetIdentityMailFromDomainAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetIdentityMailFromDomainAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetIdentityMailFromDomainAttributesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityNotificationAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentityNotificationAttributes(ctx context.Context, params *ses.GetIdentityNotificationAttributesInput, optFns ...func(*ses.Options)) (*ses.GetIdentityNotificationAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityNotificationAttributes")
	}

	var r0 *ses.GetIdentityNotificationAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityNotificationAttributesInput, ...func(*ses.Options)) (*ses.GetIdentityNotificationAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityNotificationAttributesInput, ...func(*ses.Options)) *ses.GetIdentityNotificationAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetIdentityNotificationAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetIdentityNotificationAttributesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentityPolicies(ctx context.Context, params *ses.GetIdentityPoliciesInput, optFns ...func(*ses.Options)) (*ses.GetIdentityPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityPolicies")
	}

	var r0 *ses.GetIdentityPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityPoliciesInput, ...func(*ses.Options)) (*ses.GetIdentityPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityPoliciesInput, ...func(*ses.Options)) *ses.GetIdentityPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetIdentityPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetIdentityPoliciesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityVerificationAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentityVerificationAttributes(ctx context.Context, params *ses.GetIdentityVerificationAttributesInput, optFns ...func(*ses.Options)) (*ses.GetIdentityVerificationAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityVerificationAttributes")
	}

	var r0 *ses.GetIdentityVerificationAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityVerificationAttributesInput, ...func(*ses.Options)) (*ses.GetIdentityVerificationAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetIdentityVerificationAttributesInput, ...func(*ses.Options)) *ses.GetIdentityVerificationAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetIdentityVerificationAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetIdentityVerificationAttributesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSendQuota(ctx context.Context, params *ses.GetSendQuotaInput, optFns ...func(*ses.Options)) (*ses.GetSendQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSendQuota")
	}

	var r0 *ses.GetSendQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetSendQuotaInput, ...func(*ses.Options)) (*ses.GetSendQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetSendQuotaInput, ...func(*ses.Options)) *ses.GetSendQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetSendQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetSendQuotaInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSendStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSendStatistics(ctx context.Context, params *ses.GetSendStatisticsInput, optFns ...func(*ses.Options)) (*ses.GetSendStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSendStatistics")
	}

	var r0 *ses.GetSendStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetSendStatisticsInput, ...func(*ses.Options)) (*ses.GetSendStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetSendStatisticsInput, ...func(*ses.Options)) *ses.GetSendStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetSendStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetSendStatisticsInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTemplate(ctx context.Context, params *ses.GetTemplateInput, optFns ...func(*ses.Options)) (*ses.GetTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 *ses.GetTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetTemplateInput, ...func(*ses.Options)) (*ses.GetTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.GetTemplateInput, ...func(*ses.Options)) *ses.GetTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.GetTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.GetTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationSets(ctx context.Context, params *ses.ListConfigurationSetsInput, optFns ...func(*ses.Options)) (*ses.ListConfigurationSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationSets")
	}

	var r0 *ses.ListConfigurationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListConfigurationSetsInput, ...func(*ses.Options)) (*ses.ListConfigurationSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListConfigurationSetsInput, ...func(*ses.Options)) *ses.ListConfigurationSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ListConfigurationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ListConfigurationSetsInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomVerificationEmailTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomVerificationEmailTemplates(ctx context.Context, params *ses.ListCustomVerificationEmailTemplatesInput, optFns ...func(*ses.Options)) (*ses.ListCustomVerificationEmailTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomVerificationEmailTemplates")
	}

	var r0 *ses.ListCustomVerificationEmailTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListCustomVerificationEmailTemplatesInput, ...func(*ses.Options)) (*ses.ListCustomVerificationEmailTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListCustomVerificationEmailTemplatesInput, ...func(*ses.Options)) *ses.ListCustomVerificationEmailTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ListCustomVerificationEmailTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ListCustomVerificationEmailTemplatesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIdentities(ctx context.Context, params *ses.ListIdentitiesInput, optFns ...func(*ses.Options)) (*ses.ListIdentitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentities")
	}

	var r0 *ses.ListIdentitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListIdentitiesInput, ...func(*ses.Options)) (*ses.ListIdentitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListIdentitiesInput, ...func(*ses.Options)) *ses.ListIdentitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ListIdentitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ListIdentitiesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentityPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIdentityPolicies(ctx context.Context, params *ses.ListIdentityPoliciesInput, optFns ...func(*ses.Options)) (*ses.ListIdentityPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentityPolicies")
	}

	var r0 *ses.ListIdentityPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListIdentityPoliciesInput, ...func(*ses.Options)) (*ses.ListIdentityPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListIdentityPoliciesInput, ...func(*ses.Options)) *ses.ListIdentityPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ListIdentityPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ListIdentityPoliciesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceiptFilters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReceiptFilters(ctx context.Context, params *ses.ListReceiptFiltersInput, optFns ...func(*ses.Options)) (*ses.ListReceiptFiltersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReceiptFilters")
	}

	var r0 *ses.ListReceiptFiltersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListReceiptFiltersInput, ...func(*ses.Options)) (*ses.ListReceiptFiltersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListReceiptFiltersInput, ...func(*ses.Options)) *ses.ListReceiptFiltersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ListReceiptFiltersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ListReceiptFiltersInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReceiptRuleSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReceiptRuleSets(ctx context.Context, params *ses.ListReceiptRuleSetsInput, optFns ...func(*ses.Options)) (*ses.ListReceiptRuleSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReceiptRuleSets")
	}

	var r0 *ses.ListReceiptRuleSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListReceiptRuleSetsInput, ...func(*ses.Options)) (*ses.ListReceiptRuleSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListReceiptRuleSetsInput, ...func(*ses.Options)) *ses.ListReceiptRuleSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ListReceiptRuleSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ListReceiptRuleSetsInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplates(ctx context.Context, params *ses.ListTemplatesInput, optFns ...func(*ses.Options)) (*ses.ListTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplates")
	}

	var r0 *ses.ListTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListTemplatesInput, ...func(*ses.Options)) (*ses.ListTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListTemplatesInput, ...func(*ses.Options)) *ses.ListTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ListTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ListTemplatesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVerifiedEmailAddresses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVerifiedEmailAddresses(ctx context.Context, params *ses.ListVerifiedEmailAddressesInput, optFns ...func(*ses.Options)) (*ses.ListVerifiedEmailAddressesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVerifiedEmailAddresses")
	}

	var r0 *ses.ListVerifiedEmailAddressesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListVerifiedEmailAddressesInput, ...func(*ses.Options)) (*ses.ListVerifiedEmailAddressesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ListVerifiedEmailAddressesInput, ...func(*ses.Options)) *ses.ListVerifiedEmailAddressesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ListVerifiedEmailAddressesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ListVerifiedEmailAddressesInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() ses.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 ses.Options
	if rf, ok := ret.Get(0).(func() ses.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ses.Options)
	}

	return r0
}

// PutConfigurationSetDeliveryOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutConfigurationSetDeliveryOptions(ctx context.Context, params *ses.PutConfigurationSetDeliveryOptionsInput, optFns ...func(*ses.Options)) (*ses.PutConfigurationSetDeliveryOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutConfigurationSetDeliveryOptions")
	}

	var r0 *ses.PutConfigurationSetDeliveryOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.PutConfigurationSetDeliveryOptionsInput, ...func(*ses.Options)) (*ses.PutConfigurationSetDeliveryOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.PutConfigurationSetDeliveryOptionsInput, ...func(*ses.Options)) *ses.PutConfigurationSetDeliveryOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.PutConfigurationSetDeliveryOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.PutConfigurationSetDeliveryOptionsInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutIdentityPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutIdentityPolicy(ctx context.Context, params *ses.PutIdentityPolicyInput, optFns ...func(*ses.Options)) (*ses.PutIdentityPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutIdentityPolicy")
	}

	var r0 *ses.PutIdentityPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.PutIdentityPolicyInput, ...func(*ses.Options)) (*ses.PutIdentityPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.PutIdentityPolicyInput, ...func(*ses.Options)) *ses.PutIdentityPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.PutIdentityPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.PutIdentityPolicyInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReorderReceiptRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReorderReceiptRuleSet(ctx context.Context, params *ses.ReorderReceiptRuleSetInput, optFns ...func(*ses.Options)) (*ses.ReorderReceiptRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReorderReceiptRuleSet")
	}

	var r0 *ses.ReorderReceiptRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ReorderReceiptRuleSetInput, ...func(*ses.Options)) (*ses.ReorderReceiptRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.ReorderReceiptRuleSetInput, ...func(*ses.Options)) *ses.ReorderReceiptRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.ReorderReceiptRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.ReorderReceiptRuleSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBounce provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendBounce(ctx context.Context, params *ses.SendBounceInput, optFns ...func(*ses.Options)) (*ses.SendBounceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendBounce")
	}

	var r0 *ses.SendBounceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendBounceInput, ...func(*ses.Options)) (*ses.SendBounceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendBounceInput, ...func(*ses.Options)) *ses.SendBounceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SendBounceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SendBounceInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendBulkTemplatedEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendBulkTemplatedEmail(ctx context.Context, params *ses.SendBulkTemplatedEmailInput, optFns ...func(*ses.Options)) (*ses.SendBulkTemplatedEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendBulkTemplatedEmail")
	}

	var r0 *ses.SendBulkTemplatedEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendBulkTemplatedEmailInput, ...func(*ses.Options)) (*ses.SendBulkTemplatedEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendBulkTemplatedEmailInput, ...func(*ses.Options)) *ses.SendBulkTemplatedEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SendBulkTemplatedEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SendBulkTemplatedEmailInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCustomVerificationEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendCustomVerificationEmail(ctx context.Context, params *ses.SendCustomVerificationEmailInput, optFns ...func(*ses.Options)) (*ses.SendCustomVerificationEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendCustomVerificationEmail")
	}

	var r0 *ses.SendCustomVerificationEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendCustomVerificationEmailInput, ...func(*ses.Options)) (*ses.SendCustomVerificationEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendCustomVerificationEmailInput, ...func(*ses.Options)) *ses.SendCustomVerificationEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SendCustomVerificationEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SendCustomVerificationEmailInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendEmail(ctx context.Context, params *ses.SendEmailInput, optFns ...func(*ses.Options)) (*ses.SendEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 *ses.SendEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendEmailInput, ...func(*ses.Options)) (*ses.SendEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendEmailInput, ...func(*ses.Options)) *ses.SendEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SendEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SendEmailInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendRawEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendRawEmail(ctx context.Context, params *ses.SendRawEmailInput, optFns ...func(*ses.Options)) (*ses.SendRawEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendRawEmail")
	}

	var r0 *ses.SendRawEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendRawEmailInput, ...func(*ses.Options)) (*ses.SendRawEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendRawEmailInput, ...func(*ses.Options)) *ses.SendRawEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SendRawEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SendRawEmailInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendTemplatedEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendTemplatedEmail(ctx context.Context, params *ses.SendTemplatedEmailInput, optFns ...func(*ses.Options)) (*ses.SendTemplatedEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendTemplatedEmail")
	}

	var r0 *ses.SendTemplatedEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendTemplatedEmailInput, ...func(*ses.Options)) (*ses.SendTemplatedEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SendTemplatedEmailInput, ...func(*ses.Options)) *ses.SendTemplatedEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SendTemplatedEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SendTemplatedEmailInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetActiveReceiptRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetActiveReceiptRuleSet(ctx context.Context, params *ses.SetActiveReceiptRuleSetInput, optFns ...func(*ses.Options)) (*ses.SetActiveReceiptRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetActiveReceiptRuleSet")
	}

	var r0 *ses.SetActiveReceiptRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetActiveReceiptRuleSetInput, ...func(*ses.Options)) (*ses.SetActiveReceiptRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetActiveReceiptRuleSetInput, ...func(*ses.Options)) *ses.SetActiveReceiptRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SetActiveReceiptRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SetActiveReceiptRuleSetInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIdentityDkimEnabled provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetIdentityDkimEnabled(ctx context.Context, params *ses.SetIdentityDkimEnabledInput, optFns ...func(*ses.Options)) (*ses.SetIdentityDkimEnabledOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetIdentityDkimEnabled")
	}

	var r0 *ses.SetIdentityDkimEnabledOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityDkimEnabledInput, ...func(*ses.Options)) (*ses.SetIdentityDkimEnabledOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityDkimEnabledInput, ...func(*ses.Options)) *ses.SetIdentityDkimEnabledOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SetIdentityDkimEnabledOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SetIdentityDkimEnabledInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIdentityFeedbackForwardingEnabled provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetIdentityFeedbackForwardingEnabled(ctx context.Context, params *ses.SetIdentityFeedbackForwardingEnabledInput, optFns ...func(*ses.Options)) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetIdentityFeedbackForwardingEnabled")
	}

	var r0 *ses.SetIdentityFeedbackForwardingEnabledOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityFeedbackForwardingEnabledInput, ...func(*ses.Options)) (*ses.SetIdentityFeedbackForwardingEnabledOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityFeedbackForwardingEnabledInput, ...func(*ses.Options)) *ses.SetIdentityFeedbackForwardingEnabledOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SetIdentityFeedbackForwardingEnabledOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SetIdentityFeedbackForwardingEnabledInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIdentityHeadersInNotificationsEnabled provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetIdentityHeadersInNotificationsEnabled(ctx context.Context, params *ses.SetIdentityHeadersInNotificationsEnabledInput, optFns ...func(*ses.Options)) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetIdentityHeadersInNotificationsEnabled")
	}

	var r0 *ses.SetIdentityHeadersInNotificationsEnabledOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityHeadersInNotificationsEnabledInput, ...func(*ses.Options)) (*ses.SetIdentityHeadersInNotificationsEnabledOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityHeadersInNotificationsEnabledInput, ...func(*ses.Options)) *ses.SetIdentityHeadersInNotificationsEnabledOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SetIdentityHeadersInNotificationsEnabledOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SetIdentityHeadersInNotificationsEnabledInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIdentityMailFromDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetIdentityMailFromDomain(ctx context.Context, params *ses.SetIdentityMailFromDomainInput, optFns ...func(*ses.Options)) (*ses.SetIdentityMailFromDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetIdentityMailFromDomain")
	}

	var r0 *ses.SetIdentityMailFromDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityMailFromDomainInput, ...func(*ses.Options)) (*ses.SetIdentityMailFromDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityMailFromDomainInput, ...func(*ses.Options)) *ses.SetIdentityMailFromDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SetIdentityMailFromDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SetIdentityMailFromDomainInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIdentityNotificationTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetIdentityNotificationTopic(ctx context.Context, params *ses.SetIdentityNotificationTopicInput, optFns ...func(*ses.Options)) (*ses.SetIdentityNotificationTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetIdentityNotificationTopic")
	}

	var r0 *ses.SetIdentityNotificationTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityNotificationTopicInput, ...func(*ses.Options)) (*ses.SetIdentityNotificationTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetIdentityNotificationTopicInput, ...func(*ses.Options)) *ses.SetIdentityNotificationTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SetIdentityNotificationTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SetIdentityNotificationTopicInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetReceiptRulePosition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetReceiptRulePosition(ctx context.Context, params *ses.SetReceiptRulePositionInput, optFns ...func(*ses.Options)) (*ses.SetReceiptRulePositionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetReceiptRulePosition")
	}

	var r0 *ses.SetReceiptRulePositionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetReceiptRulePositionInput, ...func(*ses.Options)) (*ses.SetReceiptRulePositionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.SetReceiptRulePositionInput, ...func(*ses.Options)) *ses.SetReceiptRulePositionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.SetReceiptRulePositionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.SetReceiptRulePositionInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestRenderTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestRenderTemplate(ctx context.Context, params *ses.TestRenderTemplateInput, optFns ...func(*ses.Options)) (*ses.TestRenderTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestRenderTemplate")
	}

	var r0 *ses.TestRenderTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.TestRenderTemplateInput, ...func(*ses.Options)) (*ses.TestRenderTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.TestRenderTemplateInput, ...func(*ses.Options)) *ses.TestRenderTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.TestRenderTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.TestRenderTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountSendingEnabled provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccountSendingEnabled(ctx context.Context, params *ses.UpdateAccountSendingEnabledInput, optFns ...func(*ses.Options)) (*ses.UpdateAccountSendingEnabledOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountSendingEnabled")
	}

	var r0 *ses.UpdateAccountSendingEnabledOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateAccountSendingEnabledInput, ...func(*ses.Options)) (*ses.UpdateAccountSendingEnabledOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateAccountSendingEnabledInput, ...func(*ses.Options)) *ses.UpdateAccountSendingEnabledOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.UpdateAccountSendingEnabledOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.UpdateAccountSendingEnabledInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetEventDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationSetEventDestination(ctx context.Context, params *ses.UpdateConfigurationSetEventDestinationInput, optFns ...func(*ses.Options)) (*ses.UpdateConfigurationSetEventDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationSetEventDestination")
	}

	var r0 *ses.UpdateConfigurationSetEventDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateConfigurationSetEventDestinationInput, ...func(*ses.Options)) (*ses.UpdateConfigurationSetEventDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateConfigurationSetEventDestinationInput, ...func(*ses.Options)) *ses.UpdateConfigurationSetEventDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.UpdateConfigurationSetEventDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.UpdateConfigurationSetEventDestinationInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetReputationMetricsEnabled provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationSetReputationMetricsEnabled(ctx context.Context, params *ses.UpdateConfigurationSetReputationMetricsEnabledInput, optFns ...func(*ses.Options)) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationSetReputationMetricsEnabled")
	}

	var r0 *ses.UpdateConfigurationSetReputationMetricsEnabledOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateConfigurationSetReputationMetricsEnabledInput, ...func(*ses.Options)) (*ses.UpdateConfigurationSetReputationMetricsEnabledOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateConfigurationSetReputationMetricsEnabledInput, ...func(*ses.Options)) *ses.UpdateConfigurationSetReputationMetricsEnabledOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.UpdateConfigurationSetReputationMetricsEnabledOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.UpdateConfigurationSetReputationMetricsEnabledInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetSendingEnabled provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationSetSendingEnabled(ctx context.Context, params *ses.UpdateConfigurationSetSendingEnabledInput, optFns ...func(*ses.Options)) (*ses.UpdateConfigurationSetSendingEnabledOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationSetSendingEnabled")
	}

	var r0 *ses.UpdateConfigurationSetSendingEnabledOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateConfigurationSetSendingEnabledInput, ...func(*ses.Options)) (*ses.UpdateConfigurationSetSendingEnabledOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateConfigurationSetSendingEnabledInput, ...func(*ses.Options)) *ses.UpdateConfigurationSetSendingEnabledOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.UpdateConfigurationSetSendingEnabledOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.UpdateConfigurationSetSendingEnabledInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationSetTrackingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationSetTrackingOptions(ctx context.Context, params *ses.UpdateConfigurationSetTrackingOptionsInput, optFns ...func(*ses.Options)) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationSetTrackingOptions")
	}

	var r0 *ses.UpdateConfigurationSetTrackingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) (*ses.UpdateConfigurationSetTrackingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) *ses.UpdateConfigurationSetTrackingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.UpdateConfigurationSetTrackingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.UpdateConfigurationSetTrackingOptionsInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomVerificationEmailTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCustomVerificationEmailTemplate(ctx context.Context, params *ses.UpdateCustomVerificationEmailTemplateInput, optFns ...func(*ses.Options)) (*ses.UpdateCustomVerificationEmailTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomVerificationEmailTemplate")
	}

	var r0 *ses.UpdateCustomVerificationEmailTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateCustomVerificationEmailTemplateInput, ...func(*ses.Options)) (*ses.UpdateCustomVerificationEmailTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateCustomVerificationEmailTemplateInput, ...func(*ses.Options)) *ses.UpdateCustomVerificationEmailTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.UpdateCustomVerificationEmailTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.UpdateCustomVerificationEmailTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReceiptRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReceiptRule(ctx context.Context, params *ses.UpdateReceiptRuleInput, optFns ...func(*ses.Options)) (*ses.UpdateReceiptRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReceiptRule")
	}

	var r0 *ses.UpdateReceiptRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateReceiptRuleInput, ...func(*ses.Options)) (*ses.UpdateReceiptRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateReceiptRuleInput, ...func(*ses.Options)) *ses.UpdateReceiptRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.UpdateReceiptRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.UpdateReceiptRuleInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTemplate(ctx context.Context, params *ses.UpdateTemplateInput, optFns ...func(*ses.Options)) (*ses.UpdateTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplate")
	}

	var r0 *ses.UpdateTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateTemplateInput, ...func(*ses.Options)) (*ses.UpdateTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.UpdateTemplateInput, ...func(*ses.Options)) *ses.UpdateTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.UpdateTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.UpdateTemplateInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyDomainDkim provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifyDomainDkim(ctx context.Context, params *ses.VerifyDomainDkimInput, optFns ...func(*ses.Options)) (*ses.VerifyDomainDkimOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyDomainDkim")
	}

	var r0 *ses.VerifyDomainDkimOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.VerifyDomainDkimInput, ...func(*ses.Options)) (*ses.VerifyDomainDkimOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.VerifyDomainDkimInput, ...func(*ses.Options)) *ses.VerifyDomainDkimOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.VerifyDomainDkimOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.VerifyDomainDkimInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyDomainIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifyDomainIdentity(ctx context.Context, params *ses.VerifyDomainIdentityInput, optFns ...func(*ses.Options)) (*ses.VerifyDomainIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyDomainIdentity")
	}

	var r0 *ses.VerifyDomainIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.VerifyDomainIdentityInput, ...func(*ses.Options)) (*ses.VerifyDomainIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.VerifyDomainIdentityInput, ...func(*ses.Options)) *ses.VerifyDomainIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.VerifyDomainIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.VerifyDomainIdentityInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyEmailAddress provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifyEmailAddress(ctx context.Context, params *ses.VerifyEmailAddressInput, optFns ...func(*ses.Options)) (*ses.VerifyEmailAddressOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmailAddress")
	}

	var r0 *ses.VerifyEmailAddressOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.VerifyEmailAddressInput, ...func(*ses.Options)) (*ses.VerifyEmailAddressOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.VerifyEmailAddressInput, ...func(*ses.Options)) *ses.VerifyEmailAddressOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.VerifyEmailAddressOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.VerifyEmailAddressInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyEmailIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifyEmailIdentity(ctx context.Context, params *ses.VerifyEmailIdentityInput, optFns ...func(*ses.Options)) (*ses.VerifyEmailIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmailIdentity")
	}

	var r0 *ses.VerifyEmailIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ses.VerifyEmailIdentityInput, ...func(*ses.Options)) (*ses.VerifyEmailIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ses.VerifyEmailIdentityInput, ...func(*ses.Options)) *ses.VerifyEmailIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ses.VerifyEmailIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ses.VerifyEmailIdentityInput, ...func(*ses.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
