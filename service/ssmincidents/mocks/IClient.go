// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	ssmincidents "github.com/aws/aws-sdk-go-v2/service/ssmincidents"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetIncidentFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetIncidentFindings(ctx context.Context, params *ssmincidents.BatchGetIncidentFindingsInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.BatchGetIncidentFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetIncidentFindings")
	}

	var r0 *ssmincidents.BatchGetIncidentFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.BatchGetIncidentFindingsInput, ...func(*ssmincidents.Options)) (*ssmincidents.BatchGetIncidentFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.BatchGetIncidentFindingsInput, ...func(*ssmincidents.Options)) *ssmincidents.BatchGetIncidentFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.BatchGetIncidentFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.BatchGetIncidentFindingsInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationSet(ctx context.Context, params *ssmincidents.CreateReplicationSetInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.CreateReplicationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationSet")
	}

	var r0 *ssmincidents.CreateReplicationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.CreateReplicationSetInput, ...func(*ssmincidents.Options)) (*ssmincidents.CreateReplicationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.CreateReplicationSetInput, ...func(*ssmincidents.Options)) *ssmincidents.CreateReplicationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.CreateReplicationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.CreateReplicationSetInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResponsePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResponsePlan(ctx context.Context, params *ssmincidents.CreateResponsePlanInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.CreateResponsePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResponsePlan")
	}

	var r0 *ssmincidents.CreateResponsePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.CreateResponsePlanInput, ...func(*ssmincidents.Options)) (*ssmincidents.CreateResponsePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.CreateResponsePlanInput, ...func(*ssmincidents.Options)) *ssmincidents.CreateResponsePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.CreateResponsePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.CreateResponsePlanInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTimelineEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTimelineEvent(ctx context.Context, params *ssmincidents.CreateTimelineEventInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.CreateTimelineEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTimelineEvent")
	}

	var r0 *ssmincidents.CreateTimelineEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.CreateTimelineEventInput, ...func(*ssmincidents.Options)) (*ssmincidents.CreateTimelineEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.CreateTimelineEventInput, ...func(*ssmincidents.Options)) *ssmincidents.CreateTimelineEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.CreateTimelineEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.CreateTimelineEventInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIncidentRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIncidentRecord(ctx context.Context, params *ssmincidents.DeleteIncidentRecordInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.DeleteIncidentRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIncidentRecord")
	}

	var r0 *ssmincidents.DeleteIncidentRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteIncidentRecordInput, ...func(*ssmincidents.Options)) (*ssmincidents.DeleteIncidentRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteIncidentRecordInput, ...func(*ssmincidents.Options)) *ssmincidents.DeleteIncidentRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.DeleteIncidentRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.DeleteIncidentRecordInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationSet(ctx context.Context, params *ssmincidents.DeleteReplicationSetInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.DeleteReplicationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationSet")
	}

	var r0 *ssmincidents.DeleteReplicationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteReplicationSetInput, ...func(*ssmincidents.Options)) (*ssmincidents.DeleteReplicationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteReplicationSetInput, ...func(*ssmincidents.Options)) *ssmincidents.DeleteReplicationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.DeleteReplicationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.DeleteReplicationSetInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcePolicy(ctx context.Context, params *ssmincidents.DeleteResourcePolicyInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcePolicy")
	}

	var r0 *ssmincidents.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteResourcePolicyInput, ...func(*ssmincidents.Options)) (*ssmincidents.DeleteResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteResourcePolicyInput, ...func(*ssmincidents.Options)) *ssmincidents.DeleteResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.DeleteResourcePolicyInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResponsePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResponsePlan(ctx context.Context, params *ssmincidents.DeleteResponsePlanInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.DeleteResponsePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResponsePlan")
	}

	var r0 *ssmincidents.DeleteResponsePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteResponsePlanInput, ...func(*ssmincidents.Options)) (*ssmincidents.DeleteResponsePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteResponsePlanInput, ...func(*ssmincidents.Options)) *ssmincidents.DeleteResponsePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.DeleteResponsePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.DeleteResponsePlanInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTimelineEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTimelineEvent(ctx context.Context, params *ssmincidents.DeleteTimelineEventInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.DeleteTimelineEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTimelineEvent")
	}

	var r0 *ssmincidents.DeleteTimelineEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteTimelineEventInput, ...func(*ssmincidents.Options)) (*ssmincidents.DeleteTimelineEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.DeleteTimelineEventInput, ...func(*ssmincidents.Options)) *ssmincidents.DeleteTimelineEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.DeleteTimelineEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.DeleteTimelineEventInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIncidentRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIncidentRecord(ctx context.Context, params *ssmincidents.GetIncidentRecordInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.GetIncidentRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIncidentRecord")
	}

	var r0 *ssmincidents.GetIncidentRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetIncidentRecordInput, ...func(*ssmincidents.Options)) (*ssmincidents.GetIncidentRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetIncidentRecordInput, ...func(*ssmincidents.Options)) *ssmincidents.GetIncidentRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.GetIncidentRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.GetIncidentRecordInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReplicationSet(ctx context.Context, params *ssmincidents.GetReplicationSetInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.GetReplicationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationSet")
	}

	var r0 *ssmincidents.GetReplicationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetReplicationSetInput, ...func(*ssmincidents.Options)) (*ssmincidents.GetReplicationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetReplicationSetInput, ...func(*ssmincidents.Options)) *ssmincidents.GetReplicationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.GetReplicationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.GetReplicationSetInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicies(ctx context.Context, params *ssmincidents.GetResourcePoliciesInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.GetResourcePoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicies")
	}

	var r0 *ssmincidents.GetResourcePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetResourcePoliciesInput, ...func(*ssmincidents.Options)) (*ssmincidents.GetResourcePoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetResourcePoliciesInput, ...func(*ssmincidents.Options)) *ssmincidents.GetResourcePoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.GetResourcePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.GetResourcePoliciesInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResponsePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResponsePlan(ctx context.Context, params *ssmincidents.GetResponsePlanInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.GetResponsePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResponsePlan")
	}

	var r0 *ssmincidents.GetResponsePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetResponsePlanInput, ...func(*ssmincidents.Options)) (*ssmincidents.GetResponsePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetResponsePlanInput, ...func(*ssmincidents.Options)) *ssmincidents.GetResponsePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.GetResponsePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.GetResponsePlanInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTimelineEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTimelineEvent(ctx context.Context, params *ssmincidents.GetTimelineEventInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.GetTimelineEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTimelineEvent")
	}

	var r0 *ssmincidents.GetTimelineEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetTimelineEventInput, ...func(*ssmincidents.Options)) (*ssmincidents.GetTimelineEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.GetTimelineEventInput, ...func(*ssmincidents.Options)) *ssmincidents.GetTimelineEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.GetTimelineEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.GetTimelineEventInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIncidentFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIncidentFindings(ctx context.Context, params *ssmincidents.ListIncidentFindingsInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.ListIncidentFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIncidentFindings")
	}

	var r0 *ssmincidents.ListIncidentFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListIncidentFindingsInput, ...func(*ssmincidents.Options)) (*ssmincidents.ListIncidentFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListIncidentFindingsInput, ...func(*ssmincidents.Options)) *ssmincidents.ListIncidentFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.ListIncidentFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.ListIncidentFindingsInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIncidentRecords provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIncidentRecords(ctx context.Context, params *ssmincidents.ListIncidentRecordsInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.ListIncidentRecordsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIncidentRecords")
	}

	var r0 *ssmincidents.ListIncidentRecordsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListIncidentRecordsInput, ...func(*ssmincidents.Options)) (*ssmincidents.ListIncidentRecordsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListIncidentRecordsInput, ...func(*ssmincidents.Options)) *ssmincidents.ListIncidentRecordsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.ListIncidentRecordsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.ListIncidentRecordsInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelatedItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRelatedItems(ctx context.Context, params *ssmincidents.ListRelatedItemsInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.ListRelatedItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRelatedItems")
	}

	var r0 *ssmincidents.ListRelatedItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListRelatedItemsInput, ...func(*ssmincidents.Options)) (*ssmincidents.ListRelatedItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListRelatedItemsInput, ...func(*ssmincidents.Options)) *ssmincidents.ListRelatedItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.ListRelatedItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.ListRelatedItemsInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplicationSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReplicationSets(ctx context.Context, params *ssmincidents.ListReplicationSetsInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.ListReplicationSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReplicationSets")
	}

	var r0 *ssmincidents.ListReplicationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListReplicationSetsInput, ...func(*ssmincidents.Options)) (*ssmincidents.ListReplicationSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListReplicationSetsInput, ...func(*ssmincidents.Options)) *ssmincidents.ListReplicationSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.ListReplicationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.ListReplicationSetsInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResponsePlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResponsePlans(ctx context.Context, params *ssmincidents.ListResponsePlansInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.ListResponsePlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResponsePlans")
	}

	var r0 *ssmincidents.ListResponsePlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListResponsePlansInput, ...func(*ssmincidents.Options)) (*ssmincidents.ListResponsePlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListResponsePlansInput, ...func(*ssmincidents.Options)) *ssmincidents.ListResponsePlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.ListResponsePlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.ListResponsePlansInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *ssmincidents.ListTagsForResourceInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *ssmincidents.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListTagsForResourceInput, ...func(*ssmincidents.Options)) (*ssmincidents.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListTagsForResourceInput, ...func(*ssmincidents.Options)) *ssmincidents.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.ListTagsForResourceInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTimelineEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTimelineEvents(ctx context.Context, params *ssmincidents.ListTimelineEventsInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.ListTimelineEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTimelineEvents")
	}

	var r0 *ssmincidents.ListTimelineEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListTimelineEventsInput, ...func(*ssmincidents.Options)) (*ssmincidents.ListTimelineEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.ListTimelineEventsInput, ...func(*ssmincidents.Options)) *ssmincidents.ListTimelineEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.ListTimelineEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.ListTimelineEventsInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() ssmincidents.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 ssmincidents.Options
	if rf, ok := ret.Get(0).(func() ssmincidents.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ssmincidents.Options)
	}

	return r0
}

// PutResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourcePolicy(ctx context.Context, params *ssmincidents.PutResourcePolicyInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourcePolicy")
	}

	var r0 *ssmincidents.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.PutResourcePolicyInput, ...func(*ssmincidents.Options)) (*ssmincidents.PutResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.PutResourcePolicyInput, ...func(*ssmincidents.Options)) *ssmincidents.PutResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.PutResourcePolicyInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartIncident provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartIncident(ctx context.Context, params *ssmincidents.StartIncidentInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.StartIncidentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartIncident")
	}

	var r0 *ssmincidents.StartIncidentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.StartIncidentInput, ...func(*ssmincidents.Options)) (*ssmincidents.StartIncidentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.StartIncidentInput, ...func(*ssmincidents.Options)) *ssmincidents.StartIncidentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.StartIncidentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.StartIncidentInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *ssmincidents.TagResourceInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *ssmincidents.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.TagResourceInput, ...func(*ssmincidents.Options)) (*ssmincidents.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.TagResourceInput, ...func(*ssmincidents.Options)) *ssmincidents.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.TagResourceInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *ssmincidents.UntagResourceInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *ssmincidents.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UntagResourceInput, ...func(*ssmincidents.Options)) (*ssmincidents.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UntagResourceInput, ...func(*ssmincidents.Options)) *ssmincidents.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.UntagResourceInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeletionProtection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeletionProtection(ctx context.Context, params *ssmincidents.UpdateDeletionProtectionInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.UpdateDeletionProtectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeletionProtection")
	}

	var r0 *ssmincidents.UpdateDeletionProtectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateDeletionProtectionInput, ...func(*ssmincidents.Options)) (*ssmincidents.UpdateDeletionProtectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateDeletionProtectionInput, ...func(*ssmincidents.Options)) *ssmincidents.UpdateDeletionProtectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.UpdateDeletionProtectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.UpdateDeletionProtectionInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIncidentRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIncidentRecord(ctx context.Context, params *ssmincidents.UpdateIncidentRecordInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.UpdateIncidentRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIncidentRecord")
	}

	var r0 *ssmincidents.UpdateIncidentRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateIncidentRecordInput, ...func(*ssmincidents.Options)) (*ssmincidents.UpdateIncidentRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateIncidentRecordInput, ...func(*ssmincidents.Options)) *ssmincidents.UpdateIncidentRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.UpdateIncidentRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.UpdateIncidentRecordInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelatedItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRelatedItems(ctx context.Context, params *ssmincidents.UpdateRelatedItemsInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.UpdateRelatedItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRelatedItems")
	}

	var r0 *ssmincidents.UpdateRelatedItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateRelatedItemsInput, ...func(*ssmincidents.Options)) (*ssmincidents.UpdateRelatedItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateRelatedItemsInput, ...func(*ssmincidents.Options)) *ssmincidents.UpdateRelatedItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.UpdateRelatedItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.UpdateRelatedItemsInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReplicationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReplicationSet(ctx context.Context, params *ssmincidents.UpdateReplicationSetInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.UpdateReplicationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReplicationSet")
	}

	var r0 *ssmincidents.UpdateReplicationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateReplicationSetInput, ...func(*ssmincidents.Options)) (*ssmincidents.UpdateReplicationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateReplicationSetInput, ...func(*ssmincidents.Options)) *ssmincidents.UpdateReplicationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.UpdateReplicationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.UpdateReplicationSetInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResponsePlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResponsePlan(ctx context.Context, params *ssmincidents.UpdateResponsePlanInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.UpdateResponsePlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResponsePlan")
	}

	var r0 *ssmincidents.UpdateResponsePlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateResponsePlanInput, ...func(*ssmincidents.Options)) (*ssmincidents.UpdateResponsePlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateResponsePlanInput, ...func(*ssmincidents.Options)) *ssmincidents.UpdateResponsePlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.UpdateResponsePlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.UpdateResponsePlanInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTimelineEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTimelineEvent(ctx context.Context, params *ssmincidents.UpdateTimelineEventInput, optFns ...func(*ssmincidents.Options)) (*ssmincidents.UpdateTimelineEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTimelineEvent")
	}

	var r0 *ssmincidents.UpdateTimelineEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateTimelineEventInput, ...func(*ssmincidents.Options)) (*ssmincidents.UpdateTimelineEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmincidents.UpdateTimelineEventInput, ...func(*ssmincidents.Options)) *ssmincidents.UpdateTimelineEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmincidents.UpdateTimelineEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmincidents.UpdateTimelineEventInput, ...func(*ssmincidents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
