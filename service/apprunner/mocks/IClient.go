// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	apprunner "github.com/aws/aws-sdk-go-v2/service/apprunner"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateCustomDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateCustomDomain(ctx context.Context, params *apprunner.AssociateCustomDomainInput, optFns ...func(*apprunner.Options)) (*apprunner.AssociateCustomDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateCustomDomain")
	}

	var r0 *apprunner.AssociateCustomDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.AssociateCustomDomainInput, ...func(*apprunner.Options)) (*apprunner.AssociateCustomDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.AssociateCustomDomainInput, ...func(*apprunner.Options)) *apprunner.AssociateCustomDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.AssociateCustomDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.AssociateCustomDomainInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAutoScalingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAutoScalingConfiguration(ctx context.Context, params *apprunner.CreateAutoScalingConfigurationInput, optFns ...func(*apprunner.Options)) (*apprunner.CreateAutoScalingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAutoScalingConfiguration")
	}

	var r0 *apprunner.CreateAutoScalingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateAutoScalingConfigurationInput, ...func(*apprunner.Options)) (*apprunner.CreateAutoScalingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateAutoScalingConfigurationInput, ...func(*apprunner.Options)) *apprunner.CreateAutoScalingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.CreateAutoScalingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.CreateAutoScalingConfigurationInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnection(ctx context.Context, params *apprunner.CreateConnectionInput, optFns ...func(*apprunner.Options)) (*apprunner.CreateConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 *apprunner.CreateConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateConnectionInput, ...func(*apprunner.Options)) (*apprunner.CreateConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateConnectionInput, ...func(*apprunner.Options)) *apprunner.CreateConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.CreateConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.CreateConnectionInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateObservabilityConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateObservabilityConfiguration(ctx context.Context, params *apprunner.CreateObservabilityConfigurationInput, optFns ...func(*apprunner.Options)) (*apprunner.CreateObservabilityConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateObservabilityConfiguration")
	}

	var r0 *apprunner.CreateObservabilityConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateObservabilityConfigurationInput, ...func(*apprunner.Options)) (*apprunner.CreateObservabilityConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateObservabilityConfigurationInput, ...func(*apprunner.Options)) *apprunner.CreateObservabilityConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.CreateObservabilityConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.CreateObservabilityConfigurationInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateService(ctx context.Context, params *apprunner.CreateServiceInput, optFns ...func(*apprunner.Options)) (*apprunner.CreateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *apprunner.CreateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateServiceInput, ...func(*apprunner.Options)) (*apprunner.CreateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateServiceInput, ...func(*apprunner.Options)) *apprunner.CreateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.CreateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.CreateServiceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVpcConnector(ctx context.Context, params *apprunner.CreateVpcConnectorInput, optFns ...func(*apprunner.Options)) (*apprunner.CreateVpcConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVpcConnector")
	}

	var r0 *apprunner.CreateVpcConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateVpcConnectorInput, ...func(*apprunner.Options)) (*apprunner.CreateVpcConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateVpcConnectorInput, ...func(*apprunner.Options)) *apprunner.CreateVpcConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.CreateVpcConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.CreateVpcConnectorInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcIngressConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVpcIngressConnection(ctx context.Context, params *apprunner.CreateVpcIngressConnectionInput, optFns ...func(*apprunner.Options)) (*apprunner.CreateVpcIngressConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVpcIngressConnection")
	}

	var r0 *apprunner.CreateVpcIngressConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateVpcIngressConnectionInput, ...func(*apprunner.Options)) (*apprunner.CreateVpcIngressConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.CreateVpcIngressConnectionInput, ...func(*apprunner.Options)) *apprunner.CreateVpcIngressConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.CreateVpcIngressConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.CreateVpcIngressConnectionInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAutoScalingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAutoScalingConfiguration(ctx context.Context, params *apprunner.DeleteAutoScalingConfigurationInput, optFns ...func(*apprunner.Options)) (*apprunner.DeleteAutoScalingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAutoScalingConfiguration")
	}

	var r0 *apprunner.DeleteAutoScalingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteAutoScalingConfigurationInput, ...func(*apprunner.Options)) (*apprunner.DeleteAutoScalingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteAutoScalingConfigurationInput, ...func(*apprunner.Options)) *apprunner.DeleteAutoScalingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DeleteAutoScalingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DeleteAutoScalingConfigurationInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnection(ctx context.Context, params *apprunner.DeleteConnectionInput, optFns ...func(*apprunner.Options)) (*apprunner.DeleteConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnection")
	}

	var r0 *apprunner.DeleteConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteConnectionInput, ...func(*apprunner.Options)) (*apprunner.DeleteConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteConnectionInput, ...func(*apprunner.Options)) *apprunner.DeleteConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DeleteConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DeleteConnectionInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteObservabilityConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteObservabilityConfiguration(ctx context.Context, params *apprunner.DeleteObservabilityConfigurationInput, optFns ...func(*apprunner.Options)) (*apprunner.DeleteObservabilityConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObservabilityConfiguration")
	}

	var r0 *apprunner.DeleteObservabilityConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteObservabilityConfigurationInput, ...func(*apprunner.Options)) (*apprunner.DeleteObservabilityConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteObservabilityConfigurationInput, ...func(*apprunner.Options)) *apprunner.DeleteObservabilityConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DeleteObservabilityConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DeleteObservabilityConfigurationInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteService(ctx context.Context, params *apprunner.DeleteServiceInput, optFns ...func(*apprunner.Options)) (*apprunner.DeleteServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 *apprunner.DeleteServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteServiceInput, ...func(*apprunner.Options)) (*apprunner.DeleteServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteServiceInput, ...func(*apprunner.Options)) *apprunner.DeleteServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DeleteServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DeleteServiceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVpcConnector(ctx context.Context, params *apprunner.DeleteVpcConnectorInput, optFns ...func(*apprunner.Options)) (*apprunner.DeleteVpcConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcConnector")
	}

	var r0 *apprunner.DeleteVpcConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteVpcConnectorInput, ...func(*apprunner.Options)) (*apprunner.DeleteVpcConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteVpcConnectorInput, ...func(*apprunner.Options)) *apprunner.DeleteVpcConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DeleteVpcConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DeleteVpcConnectorInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcIngressConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVpcIngressConnection(ctx context.Context, params *apprunner.DeleteVpcIngressConnectionInput, optFns ...func(*apprunner.Options)) (*apprunner.DeleteVpcIngressConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcIngressConnection")
	}

	var r0 *apprunner.DeleteVpcIngressConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteVpcIngressConnectionInput, ...func(*apprunner.Options)) (*apprunner.DeleteVpcIngressConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DeleteVpcIngressConnectionInput, ...func(*apprunner.Options)) *apprunner.DeleteVpcIngressConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DeleteVpcIngressConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DeleteVpcIngressConnectionInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAutoScalingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAutoScalingConfiguration(ctx context.Context, params *apprunner.DescribeAutoScalingConfigurationInput, optFns ...func(*apprunner.Options)) (*apprunner.DescribeAutoScalingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAutoScalingConfiguration")
	}

	var r0 *apprunner.DescribeAutoScalingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeAutoScalingConfigurationInput, ...func(*apprunner.Options)) (*apprunner.DescribeAutoScalingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeAutoScalingConfigurationInput, ...func(*apprunner.Options)) *apprunner.DescribeAutoScalingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DescribeAutoScalingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DescribeAutoScalingConfigurationInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCustomDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCustomDomains(ctx context.Context, params *apprunner.DescribeCustomDomainsInput, optFns ...func(*apprunner.Options)) (*apprunner.DescribeCustomDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCustomDomains")
	}

	var r0 *apprunner.DescribeCustomDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeCustomDomainsInput, ...func(*apprunner.Options)) (*apprunner.DescribeCustomDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeCustomDomainsInput, ...func(*apprunner.Options)) *apprunner.DescribeCustomDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DescribeCustomDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DescribeCustomDomainsInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeObservabilityConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeObservabilityConfiguration(ctx context.Context, params *apprunner.DescribeObservabilityConfigurationInput, optFns ...func(*apprunner.Options)) (*apprunner.DescribeObservabilityConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeObservabilityConfiguration")
	}

	var r0 *apprunner.DescribeObservabilityConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeObservabilityConfigurationInput, ...func(*apprunner.Options)) (*apprunner.DescribeObservabilityConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeObservabilityConfigurationInput, ...func(*apprunner.Options)) *apprunner.DescribeObservabilityConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DescribeObservabilityConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DescribeObservabilityConfigurationInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeService(ctx context.Context, params *apprunner.DescribeServiceInput, optFns ...func(*apprunner.Options)) (*apprunner.DescribeServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeService")
	}

	var r0 *apprunner.DescribeServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeServiceInput, ...func(*apprunner.Options)) (*apprunner.DescribeServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeServiceInput, ...func(*apprunner.Options)) *apprunner.DescribeServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DescribeServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DescribeServiceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVpcConnector(ctx context.Context, params *apprunner.DescribeVpcConnectorInput, optFns ...func(*apprunner.Options)) (*apprunner.DescribeVpcConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVpcConnector")
	}

	var r0 *apprunner.DescribeVpcConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeVpcConnectorInput, ...func(*apprunner.Options)) (*apprunner.DescribeVpcConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeVpcConnectorInput, ...func(*apprunner.Options)) *apprunner.DescribeVpcConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DescribeVpcConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DescribeVpcConnectorInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVpcIngressConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVpcIngressConnection(ctx context.Context, params *apprunner.DescribeVpcIngressConnectionInput, optFns ...func(*apprunner.Options)) (*apprunner.DescribeVpcIngressConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVpcIngressConnection")
	}

	var r0 *apprunner.DescribeVpcIngressConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeVpcIngressConnectionInput, ...func(*apprunner.Options)) (*apprunner.DescribeVpcIngressConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DescribeVpcIngressConnectionInput, ...func(*apprunner.Options)) *apprunner.DescribeVpcIngressConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DescribeVpcIngressConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DescribeVpcIngressConnectionInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateCustomDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateCustomDomain(ctx context.Context, params *apprunner.DisassociateCustomDomainInput, optFns ...func(*apprunner.Options)) (*apprunner.DisassociateCustomDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateCustomDomain")
	}

	var r0 *apprunner.DisassociateCustomDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DisassociateCustomDomainInput, ...func(*apprunner.Options)) (*apprunner.DisassociateCustomDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.DisassociateCustomDomainInput, ...func(*apprunner.Options)) *apprunner.DisassociateCustomDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.DisassociateCustomDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.DisassociateCustomDomainInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAutoScalingConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAutoScalingConfigurations(ctx context.Context, params *apprunner.ListAutoScalingConfigurationsInput, optFns ...func(*apprunner.Options)) (*apprunner.ListAutoScalingConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAutoScalingConfigurations")
	}

	var r0 *apprunner.ListAutoScalingConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListAutoScalingConfigurationsInput, ...func(*apprunner.Options)) (*apprunner.ListAutoScalingConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListAutoScalingConfigurationsInput, ...func(*apprunner.Options)) *apprunner.ListAutoScalingConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListAutoScalingConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListAutoScalingConfigurationsInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnections(ctx context.Context, params *apprunner.ListConnectionsInput, optFns ...func(*apprunner.Options)) (*apprunner.ListConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnections")
	}

	var r0 *apprunner.ListConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListConnectionsInput, ...func(*apprunner.Options)) (*apprunner.ListConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListConnectionsInput, ...func(*apprunner.Options)) *apprunner.ListConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListConnectionsInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObservabilityConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListObservabilityConfigurations(ctx context.Context, params *apprunner.ListObservabilityConfigurationsInput, optFns ...func(*apprunner.Options)) (*apprunner.ListObservabilityConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListObservabilityConfigurations")
	}

	var r0 *apprunner.ListObservabilityConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListObservabilityConfigurationsInput, ...func(*apprunner.Options)) (*apprunner.ListObservabilityConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListObservabilityConfigurationsInput, ...func(*apprunner.Options)) *apprunner.ListObservabilityConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListObservabilityConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListObservabilityConfigurationsInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOperations(ctx context.Context, params *apprunner.ListOperationsInput, optFns ...func(*apprunner.Options)) (*apprunner.ListOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 *apprunner.ListOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListOperationsInput, ...func(*apprunner.Options)) (*apprunner.ListOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListOperationsInput, ...func(*apprunner.Options)) *apprunner.ListOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListOperationsInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServices(ctx context.Context, params *apprunner.ListServicesInput, optFns ...func(*apprunner.Options)) (*apprunner.ListServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *apprunner.ListServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListServicesInput, ...func(*apprunner.Options)) (*apprunner.ListServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListServicesInput, ...func(*apprunner.Options)) *apprunner.ListServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListServicesInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicesForAutoScalingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServicesForAutoScalingConfiguration(ctx context.Context, params *apprunner.ListServicesForAutoScalingConfigurationInput, optFns ...func(*apprunner.Options)) (*apprunner.ListServicesForAutoScalingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServicesForAutoScalingConfiguration")
	}

	var r0 *apprunner.ListServicesForAutoScalingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListServicesForAutoScalingConfigurationInput, ...func(*apprunner.Options)) (*apprunner.ListServicesForAutoScalingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListServicesForAutoScalingConfigurationInput, ...func(*apprunner.Options)) *apprunner.ListServicesForAutoScalingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListServicesForAutoScalingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListServicesForAutoScalingConfigurationInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *apprunner.ListTagsForResourceInput, optFns ...func(*apprunner.Options)) (*apprunner.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *apprunner.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListTagsForResourceInput, ...func(*apprunner.Options)) (*apprunner.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListTagsForResourceInput, ...func(*apprunner.Options)) *apprunner.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListTagsForResourceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVpcConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVpcConnectors(ctx context.Context, params *apprunner.ListVpcConnectorsInput, optFns ...func(*apprunner.Options)) (*apprunner.ListVpcConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVpcConnectors")
	}

	var r0 *apprunner.ListVpcConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListVpcConnectorsInput, ...func(*apprunner.Options)) (*apprunner.ListVpcConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListVpcConnectorsInput, ...func(*apprunner.Options)) *apprunner.ListVpcConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListVpcConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListVpcConnectorsInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVpcIngressConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVpcIngressConnections(ctx context.Context, params *apprunner.ListVpcIngressConnectionsInput, optFns ...func(*apprunner.Options)) (*apprunner.ListVpcIngressConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVpcIngressConnections")
	}

	var r0 *apprunner.ListVpcIngressConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListVpcIngressConnectionsInput, ...func(*apprunner.Options)) (*apprunner.ListVpcIngressConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ListVpcIngressConnectionsInput, ...func(*apprunner.Options)) *apprunner.ListVpcIngressConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ListVpcIngressConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ListVpcIngressConnectionsInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() apprunner.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 apprunner.Options
	if rf, ok := ret.Get(0).(func() apprunner.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(apprunner.Options)
	}

	return r0
}

// PauseService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PauseService(ctx context.Context, params *apprunner.PauseServiceInput, optFns ...func(*apprunner.Options)) (*apprunner.PauseServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PauseService")
	}

	var r0 *apprunner.PauseServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.PauseServiceInput, ...func(*apprunner.Options)) (*apprunner.PauseServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.PauseServiceInput, ...func(*apprunner.Options)) *apprunner.PauseServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.PauseServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.PauseServiceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResumeService(ctx context.Context, params *apprunner.ResumeServiceInput, optFns ...func(*apprunner.Options)) (*apprunner.ResumeServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResumeService")
	}

	var r0 *apprunner.ResumeServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ResumeServiceInput, ...func(*apprunner.Options)) (*apprunner.ResumeServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.ResumeServiceInput, ...func(*apprunner.Options)) *apprunner.ResumeServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.ResumeServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.ResumeServiceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDeployment(ctx context.Context, params *apprunner.StartDeploymentInput, optFns ...func(*apprunner.Options)) (*apprunner.StartDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDeployment")
	}

	var r0 *apprunner.StartDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.StartDeploymentInput, ...func(*apprunner.Options)) (*apprunner.StartDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.StartDeploymentInput, ...func(*apprunner.Options)) *apprunner.StartDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.StartDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.StartDeploymentInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *apprunner.TagResourceInput, optFns ...func(*apprunner.Options)) (*apprunner.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *apprunner.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.TagResourceInput, ...func(*apprunner.Options)) (*apprunner.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.TagResourceInput, ...func(*apprunner.Options)) *apprunner.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.TagResourceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *apprunner.UntagResourceInput, optFns ...func(*apprunner.Options)) (*apprunner.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *apprunner.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.UntagResourceInput, ...func(*apprunner.Options)) (*apprunner.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.UntagResourceInput, ...func(*apprunner.Options)) *apprunner.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.UntagResourceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefaultAutoScalingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDefaultAutoScalingConfiguration(ctx context.Context, params *apprunner.UpdateDefaultAutoScalingConfigurationInput, optFns ...func(*apprunner.Options)) (*apprunner.UpdateDefaultAutoScalingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDefaultAutoScalingConfiguration")
	}

	var r0 *apprunner.UpdateDefaultAutoScalingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.UpdateDefaultAutoScalingConfigurationInput, ...func(*apprunner.Options)) (*apprunner.UpdateDefaultAutoScalingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.UpdateDefaultAutoScalingConfigurationInput, ...func(*apprunner.Options)) *apprunner.UpdateDefaultAutoScalingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.UpdateDefaultAutoScalingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.UpdateDefaultAutoScalingConfigurationInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateService(ctx context.Context, params *apprunner.UpdateServiceInput, optFns ...func(*apprunner.Options)) (*apprunner.UpdateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *apprunner.UpdateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.UpdateServiceInput, ...func(*apprunner.Options)) (*apprunner.UpdateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.UpdateServiceInput, ...func(*apprunner.Options)) *apprunner.UpdateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.UpdateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.UpdateServiceInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVpcIngressConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVpcIngressConnection(ctx context.Context, params *apprunner.UpdateVpcIngressConnectionInput, optFns ...func(*apprunner.Options)) (*apprunner.UpdateVpcIngressConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVpcIngressConnection")
	}

	var r0 *apprunner.UpdateVpcIngressConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.UpdateVpcIngressConnectionInput, ...func(*apprunner.Options)) (*apprunner.UpdateVpcIngressConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apprunner.UpdateVpcIngressConnectionInput, ...func(*apprunner.Options)) *apprunner.UpdateVpcIngressConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apprunner.UpdateVpcIngressConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apprunner.UpdateVpcIngressConnectionInput, ...func(*apprunner.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
