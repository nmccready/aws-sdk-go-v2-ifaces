// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	licensemanagerlinuxsubscriptions "github.com/aws/aws-sdk-go-v2/service/licensemanagerlinuxsubscriptions"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DeregisterSubscriptionProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterSubscriptionProvider(ctx context.Context, params *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterSubscriptionProvider")
	}

	var r0 *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.DeregisterSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegisteredSubscriptionProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRegisteredSubscriptionProvider(ctx context.Context, params *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegisteredSubscriptionProvider")
	}

	var r0 *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.GetRegisteredSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceSettings(ctx context.Context, params *licensemanagerlinuxsubscriptions.GetServiceSettingsInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceSettings")
	}

	var r0 *licensemanagerlinuxsubscriptions.GetServiceSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.GetServiceSettingsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.GetServiceSettingsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.GetServiceSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.GetServiceSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.GetServiceSettingsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLinuxSubscriptionInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLinuxSubscriptionInstances(ctx context.Context, params *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLinuxSubscriptionInstances")
	}

	var r0 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionInstancesInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLinuxSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLinuxSubscriptions(ctx context.Context, params *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLinuxSubscriptions")
	}

	var r0 *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.ListLinuxSubscriptionsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegisteredSubscriptionProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRegisteredSubscriptionProviders(ctx context.Context, params *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRegisteredSubscriptionProviders")
	}

	var r0 *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.ListRegisteredSubscriptionProvidersInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *licensemanagerlinuxsubscriptions.ListTagsForResourceInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *licensemanagerlinuxsubscriptions.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.ListTagsForResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.ListTagsForResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.ListTagsForResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() licensemanagerlinuxsubscriptions.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 licensemanagerlinuxsubscriptions.Options
	if rf, ok := ret.Get(0).(func() licensemanagerlinuxsubscriptions.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(licensemanagerlinuxsubscriptions.Options)
	}

	return r0
}

// RegisterSubscriptionProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterSubscriptionProvider(ctx context.Context, params *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterSubscriptionProvider")
	}

	var r0 *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.RegisterSubscriptionProviderInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *licensemanagerlinuxsubscriptions.TagResourceInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *licensemanagerlinuxsubscriptions.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.TagResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.TagResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.TagResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *licensemanagerlinuxsubscriptions.UntagResourceInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *licensemanagerlinuxsubscriptions.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.UntagResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.UntagResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.UntagResourceInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceSettings(ctx context.Context, params *licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput, optFns ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceSettings")
	}

	var r0 *licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) (*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) *licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*licensemanagerlinuxsubscriptions.UpdateServiceSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *licensemanagerlinuxsubscriptions.UpdateServiceSettingsInput, ...func(*licensemanagerlinuxsubscriptions.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
