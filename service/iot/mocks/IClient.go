// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	iot "github.com/aws/aws-sdk-go-v2/service/iot"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptCertificateTransfer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptCertificateTransfer(ctx context.Context, params *iot.AcceptCertificateTransferInput, optFns ...func(*iot.Options)) (*iot.AcceptCertificateTransferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptCertificateTransfer")
	}

	var r0 *iot.AcceptCertificateTransferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AcceptCertificateTransferInput, ...func(*iot.Options)) (*iot.AcceptCertificateTransferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AcceptCertificateTransferInput, ...func(*iot.Options)) *iot.AcceptCertificateTransferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AcceptCertificateTransferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AcceptCertificateTransferInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddThingToBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddThingToBillingGroup(ctx context.Context, params *iot.AddThingToBillingGroupInput, optFns ...func(*iot.Options)) (*iot.AddThingToBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddThingToBillingGroup")
	}

	var r0 *iot.AddThingToBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AddThingToBillingGroupInput, ...func(*iot.Options)) (*iot.AddThingToBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AddThingToBillingGroupInput, ...func(*iot.Options)) *iot.AddThingToBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AddThingToBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AddThingToBillingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddThingToThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddThingToThingGroup(ctx context.Context, params *iot.AddThingToThingGroupInput, optFns ...func(*iot.Options)) (*iot.AddThingToThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddThingToThingGroup")
	}

	var r0 *iot.AddThingToThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AddThingToThingGroupInput, ...func(*iot.Options)) (*iot.AddThingToThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AddThingToThingGroupInput, ...func(*iot.Options)) *iot.AddThingToThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AddThingToThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AddThingToThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSbomWithPackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateSbomWithPackageVersion(ctx context.Context, params *iot.AssociateSbomWithPackageVersionInput, optFns ...func(*iot.Options)) (*iot.AssociateSbomWithPackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSbomWithPackageVersion")
	}

	var r0 *iot.AssociateSbomWithPackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AssociateSbomWithPackageVersionInput, ...func(*iot.Options)) (*iot.AssociateSbomWithPackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AssociateSbomWithPackageVersionInput, ...func(*iot.Options)) *iot.AssociateSbomWithPackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AssociateSbomWithPackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AssociateSbomWithPackageVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTargetsWithJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateTargetsWithJob(ctx context.Context, params *iot.AssociateTargetsWithJobInput, optFns ...func(*iot.Options)) (*iot.AssociateTargetsWithJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateTargetsWithJob")
	}

	var r0 *iot.AssociateTargetsWithJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AssociateTargetsWithJobInput, ...func(*iot.Options)) (*iot.AssociateTargetsWithJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AssociateTargetsWithJobInput, ...func(*iot.Options)) *iot.AssociateTargetsWithJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AssociateTargetsWithJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AssociateTargetsWithJobInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachPolicy(ctx context.Context, params *iot.AttachPolicyInput, optFns ...func(*iot.Options)) (*iot.AttachPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachPolicy")
	}

	var r0 *iot.AttachPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AttachPolicyInput, ...func(*iot.Options)) (*iot.AttachPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AttachPolicyInput, ...func(*iot.Options)) *iot.AttachPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AttachPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AttachPolicyInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachPrincipalPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachPrincipalPolicy(ctx context.Context, params *iot.AttachPrincipalPolicyInput, optFns ...func(*iot.Options)) (*iot.AttachPrincipalPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachPrincipalPolicy")
	}

	var r0 *iot.AttachPrincipalPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AttachPrincipalPolicyInput, ...func(*iot.Options)) (*iot.AttachPrincipalPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AttachPrincipalPolicyInput, ...func(*iot.Options)) *iot.AttachPrincipalPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AttachPrincipalPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AttachPrincipalPolicyInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachSecurityProfile(ctx context.Context, params *iot.AttachSecurityProfileInput, optFns ...func(*iot.Options)) (*iot.AttachSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachSecurityProfile")
	}

	var r0 *iot.AttachSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AttachSecurityProfileInput, ...func(*iot.Options)) (*iot.AttachSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AttachSecurityProfileInput, ...func(*iot.Options)) *iot.AttachSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AttachSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AttachSecurityProfileInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachThingPrincipal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachThingPrincipal(ctx context.Context, params *iot.AttachThingPrincipalInput, optFns ...func(*iot.Options)) (*iot.AttachThingPrincipalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachThingPrincipal")
	}

	var r0 *iot.AttachThingPrincipalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AttachThingPrincipalInput, ...func(*iot.Options)) (*iot.AttachThingPrincipalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.AttachThingPrincipalInput, ...func(*iot.Options)) *iot.AttachThingPrincipalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.AttachThingPrincipalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.AttachThingPrincipalInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelAuditMitigationActionsTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelAuditMitigationActionsTask(ctx context.Context, params *iot.CancelAuditMitigationActionsTaskInput, optFns ...func(*iot.Options)) (*iot.CancelAuditMitigationActionsTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelAuditMitigationActionsTask")
	}

	var r0 *iot.CancelAuditMitigationActionsTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelAuditMitigationActionsTaskInput, ...func(*iot.Options)) (*iot.CancelAuditMitigationActionsTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelAuditMitigationActionsTaskInput, ...func(*iot.Options)) *iot.CancelAuditMitigationActionsTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CancelAuditMitigationActionsTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CancelAuditMitigationActionsTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelAuditTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelAuditTask(ctx context.Context, params *iot.CancelAuditTaskInput, optFns ...func(*iot.Options)) (*iot.CancelAuditTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelAuditTask")
	}

	var r0 *iot.CancelAuditTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelAuditTaskInput, ...func(*iot.Options)) (*iot.CancelAuditTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelAuditTaskInput, ...func(*iot.Options)) *iot.CancelAuditTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CancelAuditTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CancelAuditTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelCertificateTransfer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelCertificateTransfer(ctx context.Context, params *iot.CancelCertificateTransferInput, optFns ...func(*iot.Options)) (*iot.CancelCertificateTransferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelCertificateTransfer")
	}

	var r0 *iot.CancelCertificateTransferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelCertificateTransferInput, ...func(*iot.Options)) (*iot.CancelCertificateTransferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelCertificateTransferInput, ...func(*iot.Options)) *iot.CancelCertificateTransferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CancelCertificateTransferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CancelCertificateTransferInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelDetectMitigationActionsTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelDetectMitigationActionsTask(ctx context.Context, params *iot.CancelDetectMitigationActionsTaskInput, optFns ...func(*iot.Options)) (*iot.CancelDetectMitigationActionsTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelDetectMitigationActionsTask")
	}

	var r0 *iot.CancelDetectMitigationActionsTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelDetectMitigationActionsTaskInput, ...func(*iot.Options)) (*iot.CancelDetectMitigationActionsTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelDetectMitigationActionsTaskInput, ...func(*iot.Options)) *iot.CancelDetectMitigationActionsTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CancelDetectMitigationActionsTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CancelDetectMitigationActionsTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelJob(ctx context.Context, params *iot.CancelJobInput, optFns ...func(*iot.Options)) (*iot.CancelJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelJob")
	}

	var r0 *iot.CancelJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelJobInput, ...func(*iot.Options)) (*iot.CancelJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelJobInput, ...func(*iot.Options)) *iot.CancelJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CancelJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CancelJobInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelJobExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelJobExecution(ctx context.Context, params *iot.CancelJobExecutionInput, optFns ...func(*iot.Options)) (*iot.CancelJobExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelJobExecution")
	}

	var r0 *iot.CancelJobExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelJobExecutionInput, ...func(*iot.Options)) (*iot.CancelJobExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CancelJobExecutionInput, ...func(*iot.Options)) *iot.CancelJobExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CancelJobExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CancelJobExecutionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearDefaultAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ClearDefaultAuthorizer(ctx context.Context, params *iot.ClearDefaultAuthorizerInput, optFns ...func(*iot.Options)) (*iot.ClearDefaultAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClearDefaultAuthorizer")
	}

	var r0 *iot.ClearDefaultAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ClearDefaultAuthorizerInput, ...func(*iot.Options)) (*iot.ClearDefaultAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ClearDefaultAuthorizerInput, ...func(*iot.Options)) *iot.ClearDefaultAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ClearDefaultAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ClearDefaultAuthorizerInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConfirmTopicRuleDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfirmTopicRuleDestination(ctx context.Context, params *iot.ConfirmTopicRuleDestinationInput, optFns ...func(*iot.Options)) (*iot.ConfirmTopicRuleDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfirmTopicRuleDestination")
	}

	var r0 *iot.ConfirmTopicRuleDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ConfirmTopicRuleDestinationInput, ...func(*iot.Options)) (*iot.ConfirmTopicRuleDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ConfirmTopicRuleDestinationInput, ...func(*iot.Options)) *iot.ConfirmTopicRuleDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ConfirmTopicRuleDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ConfirmTopicRuleDestinationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuditSuppression provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAuditSuppression(ctx context.Context, params *iot.CreateAuditSuppressionInput, optFns ...func(*iot.Options)) (*iot.CreateAuditSuppressionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuditSuppression")
	}

	var r0 *iot.CreateAuditSuppressionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateAuditSuppressionInput, ...func(*iot.Options)) (*iot.CreateAuditSuppressionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateAuditSuppressionInput, ...func(*iot.Options)) *iot.CreateAuditSuppressionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateAuditSuppressionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateAuditSuppressionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAuthorizer(ctx context.Context, params *iot.CreateAuthorizerInput, optFns ...func(*iot.Options)) (*iot.CreateAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthorizer")
	}

	var r0 *iot.CreateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateAuthorizerInput, ...func(*iot.Options)) (*iot.CreateAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateAuthorizerInput, ...func(*iot.Options)) *iot.CreateAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateAuthorizerInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBillingGroup(ctx context.Context, params *iot.CreateBillingGroupInput, optFns ...func(*iot.Options)) (*iot.CreateBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBillingGroup")
	}

	var r0 *iot.CreateBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateBillingGroupInput, ...func(*iot.Options)) (*iot.CreateBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateBillingGroupInput, ...func(*iot.Options)) *iot.CreateBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateBillingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCertificateFromCsr provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCertificateFromCsr(ctx context.Context, params *iot.CreateCertificateFromCsrInput, optFns ...func(*iot.Options)) (*iot.CreateCertificateFromCsrOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificateFromCsr")
	}

	var r0 *iot.CreateCertificateFromCsrOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateCertificateFromCsrInput, ...func(*iot.Options)) (*iot.CreateCertificateFromCsrOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateCertificateFromCsrInput, ...func(*iot.Options)) *iot.CreateCertificateFromCsrOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateCertificateFromCsrOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateCertificateFromCsrInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCertificateProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCertificateProvider(ctx context.Context, params *iot.CreateCertificateProviderInput, optFns ...func(*iot.Options)) (*iot.CreateCertificateProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificateProvider")
	}

	var r0 *iot.CreateCertificateProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateCertificateProviderInput, ...func(*iot.Options)) (*iot.CreateCertificateProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateCertificateProviderInput, ...func(*iot.Options)) *iot.CreateCertificateProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateCertificateProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateCertificateProviderInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCommand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCommand(ctx context.Context, params *iot.CreateCommandInput, optFns ...func(*iot.Options)) (*iot.CreateCommandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCommand")
	}

	var r0 *iot.CreateCommandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateCommandInput, ...func(*iot.Options)) (*iot.CreateCommandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateCommandInput, ...func(*iot.Options)) *iot.CreateCommandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateCommandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateCommandInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomMetric(ctx context.Context, params *iot.CreateCustomMetricInput, optFns ...func(*iot.Options)) (*iot.CreateCustomMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomMetric")
	}

	var r0 *iot.CreateCustomMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateCustomMetricInput, ...func(*iot.Options)) (*iot.CreateCustomMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateCustomMetricInput, ...func(*iot.Options)) *iot.CreateCustomMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateCustomMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateCustomMetricInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDimension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDimension(ctx context.Context, params *iot.CreateDimensionInput, optFns ...func(*iot.Options)) (*iot.CreateDimensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDimension")
	}

	var r0 *iot.CreateDimensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateDimensionInput, ...func(*iot.Options)) (*iot.CreateDimensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateDimensionInput, ...func(*iot.Options)) *iot.CreateDimensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateDimensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateDimensionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomainConfiguration(ctx context.Context, params *iot.CreateDomainConfigurationInput, optFns ...func(*iot.Options)) (*iot.CreateDomainConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainConfiguration")
	}

	var r0 *iot.CreateDomainConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateDomainConfigurationInput, ...func(*iot.Options)) (*iot.CreateDomainConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateDomainConfigurationInput, ...func(*iot.Options)) *iot.CreateDomainConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateDomainConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateDomainConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDynamicThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDynamicThingGroup(ctx context.Context, params *iot.CreateDynamicThingGroupInput, optFns ...func(*iot.Options)) (*iot.CreateDynamicThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDynamicThingGroup")
	}

	var r0 *iot.CreateDynamicThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateDynamicThingGroupInput, ...func(*iot.Options)) (*iot.CreateDynamicThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateDynamicThingGroupInput, ...func(*iot.Options)) *iot.CreateDynamicThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateDynamicThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateDynamicThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFleetMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFleetMetric(ctx context.Context, params *iot.CreateFleetMetricInput, optFns ...func(*iot.Options)) (*iot.CreateFleetMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFleetMetric")
	}

	var r0 *iot.CreateFleetMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateFleetMetricInput, ...func(*iot.Options)) (*iot.CreateFleetMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateFleetMetricInput, ...func(*iot.Options)) *iot.CreateFleetMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateFleetMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateFleetMetricInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJob(ctx context.Context, params *iot.CreateJobInput, optFns ...func(*iot.Options)) (*iot.CreateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *iot.CreateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateJobInput, ...func(*iot.Options)) (*iot.CreateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateJobInput, ...func(*iot.Options)) *iot.CreateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateJobInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJobTemplate(ctx context.Context, params *iot.CreateJobTemplateInput, optFns ...func(*iot.Options)) (*iot.CreateJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobTemplate")
	}

	var r0 *iot.CreateJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateJobTemplateInput, ...func(*iot.Options)) (*iot.CreateJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateJobTemplateInput, ...func(*iot.Options)) *iot.CreateJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateJobTemplateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeysAndCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateKeysAndCertificate(ctx context.Context, params *iot.CreateKeysAndCertificateInput, optFns ...func(*iot.Options)) (*iot.CreateKeysAndCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeysAndCertificate")
	}

	var r0 *iot.CreateKeysAndCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateKeysAndCertificateInput, ...func(*iot.Options)) (*iot.CreateKeysAndCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateKeysAndCertificateInput, ...func(*iot.Options)) *iot.CreateKeysAndCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateKeysAndCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateKeysAndCertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMitigationAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMitigationAction(ctx context.Context, params *iot.CreateMitigationActionInput, optFns ...func(*iot.Options)) (*iot.CreateMitigationActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMitigationAction")
	}

	var r0 *iot.CreateMitigationActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateMitigationActionInput, ...func(*iot.Options)) (*iot.CreateMitigationActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateMitigationActionInput, ...func(*iot.Options)) *iot.CreateMitigationActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateMitigationActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateMitigationActionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOTAUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOTAUpdate(ctx context.Context, params *iot.CreateOTAUpdateInput, optFns ...func(*iot.Options)) (*iot.CreateOTAUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOTAUpdate")
	}

	var r0 *iot.CreateOTAUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateOTAUpdateInput, ...func(*iot.Options)) (*iot.CreateOTAUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateOTAUpdateInput, ...func(*iot.Options)) *iot.CreateOTAUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateOTAUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateOTAUpdateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePackage(ctx context.Context, params *iot.CreatePackageInput, optFns ...func(*iot.Options)) (*iot.CreatePackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackage")
	}

	var r0 *iot.CreatePackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreatePackageInput, ...func(*iot.Options)) (*iot.CreatePackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreatePackageInput, ...func(*iot.Options)) *iot.CreatePackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreatePackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreatePackageInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePackageVersion(ctx context.Context, params *iot.CreatePackageVersionInput, optFns ...func(*iot.Options)) (*iot.CreatePackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackageVersion")
	}

	var r0 *iot.CreatePackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreatePackageVersionInput, ...func(*iot.Options)) (*iot.CreatePackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreatePackageVersionInput, ...func(*iot.Options)) *iot.CreatePackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreatePackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreatePackageVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePolicy(ctx context.Context, params *iot.CreatePolicyInput, optFns ...func(*iot.Options)) (*iot.CreatePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicy")
	}

	var r0 *iot.CreatePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreatePolicyInput, ...func(*iot.Options)) (*iot.CreatePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreatePolicyInput, ...func(*iot.Options)) *iot.CreatePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreatePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreatePolicyInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePolicyVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePolicyVersion(ctx context.Context, params *iot.CreatePolicyVersionInput, optFns ...func(*iot.Options)) (*iot.CreatePolicyVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePolicyVersion")
	}

	var r0 *iot.CreatePolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreatePolicyVersionInput, ...func(*iot.Options)) (*iot.CreatePolicyVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreatePolicyVersionInput, ...func(*iot.Options)) *iot.CreatePolicyVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreatePolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreatePolicyVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProvisioningClaim provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProvisioningClaim(ctx context.Context, params *iot.CreateProvisioningClaimInput, optFns ...func(*iot.Options)) (*iot.CreateProvisioningClaimOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvisioningClaim")
	}

	var r0 *iot.CreateProvisioningClaimOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateProvisioningClaimInput, ...func(*iot.Options)) (*iot.CreateProvisioningClaimOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateProvisioningClaimInput, ...func(*iot.Options)) *iot.CreateProvisioningClaimOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateProvisioningClaimOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateProvisioningClaimInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProvisioningTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProvisioningTemplate(ctx context.Context, params *iot.CreateProvisioningTemplateInput, optFns ...func(*iot.Options)) (*iot.CreateProvisioningTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvisioningTemplate")
	}

	var r0 *iot.CreateProvisioningTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateProvisioningTemplateInput, ...func(*iot.Options)) (*iot.CreateProvisioningTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateProvisioningTemplateInput, ...func(*iot.Options)) *iot.CreateProvisioningTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateProvisioningTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateProvisioningTemplateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProvisioningTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProvisioningTemplateVersion(ctx context.Context, params *iot.CreateProvisioningTemplateVersionInput, optFns ...func(*iot.Options)) (*iot.CreateProvisioningTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvisioningTemplateVersion")
	}

	var r0 *iot.CreateProvisioningTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateProvisioningTemplateVersionInput, ...func(*iot.Options)) (*iot.CreateProvisioningTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateProvisioningTemplateVersionInput, ...func(*iot.Options)) *iot.CreateProvisioningTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateProvisioningTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateProvisioningTemplateVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoleAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoleAlias(ctx context.Context, params *iot.CreateRoleAliasInput, optFns ...func(*iot.Options)) (*iot.CreateRoleAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleAlias")
	}

	var r0 *iot.CreateRoleAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateRoleAliasInput, ...func(*iot.Options)) (*iot.CreateRoleAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateRoleAliasInput, ...func(*iot.Options)) *iot.CreateRoleAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateRoleAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateRoleAliasInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateScheduledAudit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateScheduledAudit(ctx context.Context, params *iot.CreateScheduledAuditInput, optFns ...func(*iot.Options)) (*iot.CreateScheduledAuditOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduledAudit")
	}

	var r0 *iot.CreateScheduledAuditOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateScheduledAuditInput, ...func(*iot.Options)) (*iot.CreateScheduledAuditOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateScheduledAuditInput, ...func(*iot.Options)) *iot.CreateScheduledAuditOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateScheduledAuditOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateScheduledAuditInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSecurityProfile(ctx context.Context, params *iot.CreateSecurityProfileInput, optFns ...func(*iot.Options)) (*iot.CreateSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecurityProfile")
	}

	var r0 *iot.CreateSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateSecurityProfileInput, ...func(*iot.Options)) (*iot.CreateSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateSecurityProfileInput, ...func(*iot.Options)) *iot.CreateSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateSecurityProfileInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStream(ctx context.Context, params *iot.CreateStreamInput, optFns ...func(*iot.Options)) (*iot.CreateStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStream")
	}

	var r0 *iot.CreateStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateStreamInput, ...func(*iot.Options)) (*iot.CreateStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateStreamInput, ...func(*iot.Options)) *iot.CreateStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateStreamInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateThing(ctx context.Context, params *iot.CreateThingInput, optFns ...func(*iot.Options)) (*iot.CreateThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateThing")
	}

	var r0 *iot.CreateThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateThingInput, ...func(*iot.Options)) (*iot.CreateThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateThingInput, ...func(*iot.Options)) *iot.CreateThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateThingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateThingGroup(ctx context.Context, params *iot.CreateThingGroupInput, optFns ...func(*iot.Options)) (*iot.CreateThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateThingGroup")
	}

	var r0 *iot.CreateThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateThingGroupInput, ...func(*iot.Options)) (*iot.CreateThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateThingGroupInput, ...func(*iot.Options)) *iot.CreateThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThingType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateThingType(ctx context.Context, params *iot.CreateThingTypeInput, optFns ...func(*iot.Options)) (*iot.CreateThingTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateThingType")
	}

	var r0 *iot.CreateThingTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateThingTypeInput, ...func(*iot.Options)) (*iot.CreateThingTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateThingTypeInput, ...func(*iot.Options)) *iot.CreateThingTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateThingTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateThingTypeInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopicRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTopicRule(ctx context.Context, params *iot.CreateTopicRuleInput, optFns ...func(*iot.Options)) (*iot.CreateTopicRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopicRule")
	}

	var r0 *iot.CreateTopicRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateTopicRuleInput, ...func(*iot.Options)) (*iot.CreateTopicRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateTopicRuleInput, ...func(*iot.Options)) *iot.CreateTopicRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateTopicRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateTopicRuleInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopicRuleDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTopicRuleDestination(ctx context.Context, params *iot.CreateTopicRuleDestinationInput, optFns ...func(*iot.Options)) (*iot.CreateTopicRuleDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopicRuleDestination")
	}

	var r0 *iot.CreateTopicRuleDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateTopicRuleDestinationInput, ...func(*iot.Options)) (*iot.CreateTopicRuleDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.CreateTopicRuleDestinationInput, ...func(*iot.Options)) *iot.CreateTopicRuleDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.CreateTopicRuleDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.CreateTopicRuleDestinationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountAuditConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccountAuditConfiguration(ctx context.Context, params *iot.DeleteAccountAuditConfigurationInput, optFns ...func(*iot.Options)) (*iot.DeleteAccountAuditConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountAuditConfiguration")
	}

	var r0 *iot.DeleteAccountAuditConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteAccountAuditConfigurationInput, ...func(*iot.Options)) (*iot.DeleteAccountAuditConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteAccountAuditConfigurationInput, ...func(*iot.Options)) *iot.DeleteAccountAuditConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteAccountAuditConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteAccountAuditConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuditSuppression provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAuditSuppression(ctx context.Context, params *iot.DeleteAuditSuppressionInput, optFns ...func(*iot.Options)) (*iot.DeleteAuditSuppressionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuditSuppression")
	}

	var r0 *iot.DeleteAuditSuppressionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteAuditSuppressionInput, ...func(*iot.Options)) (*iot.DeleteAuditSuppressionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteAuditSuppressionInput, ...func(*iot.Options)) *iot.DeleteAuditSuppressionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteAuditSuppressionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteAuditSuppressionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAuthorizer(ctx context.Context, params *iot.DeleteAuthorizerInput, optFns ...func(*iot.Options)) (*iot.DeleteAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthorizer")
	}

	var r0 *iot.DeleteAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteAuthorizerInput, ...func(*iot.Options)) (*iot.DeleteAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteAuthorizerInput, ...func(*iot.Options)) *iot.DeleteAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteAuthorizerInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBillingGroup(ctx context.Context, params *iot.DeleteBillingGroupInput, optFns ...func(*iot.Options)) (*iot.DeleteBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBillingGroup")
	}

	var r0 *iot.DeleteBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteBillingGroupInput, ...func(*iot.Options)) (*iot.DeleteBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteBillingGroupInput, ...func(*iot.Options)) *iot.DeleteBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteBillingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCACertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCACertificate(ctx context.Context, params *iot.DeleteCACertificateInput, optFns ...func(*iot.Options)) (*iot.DeleteCACertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCACertificate")
	}

	var r0 *iot.DeleteCACertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCACertificateInput, ...func(*iot.Options)) (*iot.DeleteCACertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCACertificateInput, ...func(*iot.Options)) *iot.DeleteCACertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteCACertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteCACertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCertificate(ctx context.Context, params *iot.DeleteCertificateInput, optFns ...func(*iot.Options)) (*iot.DeleteCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 *iot.DeleteCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCertificateInput, ...func(*iot.Options)) (*iot.DeleteCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCertificateInput, ...func(*iot.Options)) *iot.DeleteCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteCertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCertificateProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCertificateProvider(ctx context.Context, params *iot.DeleteCertificateProviderInput, optFns ...func(*iot.Options)) (*iot.DeleteCertificateProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificateProvider")
	}

	var r0 *iot.DeleteCertificateProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCertificateProviderInput, ...func(*iot.Options)) (*iot.DeleteCertificateProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCertificateProviderInput, ...func(*iot.Options)) *iot.DeleteCertificateProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteCertificateProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteCertificateProviderInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCommand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCommand(ctx context.Context, params *iot.DeleteCommandInput, optFns ...func(*iot.Options)) (*iot.DeleteCommandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommand")
	}

	var r0 *iot.DeleteCommandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCommandInput, ...func(*iot.Options)) (*iot.DeleteCommandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCommandInput, ...func(*iot.Options)) *iot.DeleteCommandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteCommandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteCommandInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCommandExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCommandExecution(ctx context.Context, params *iot.DeleteCommandExecutionInput, optFns ...func(*iot.Options)) (*iot.DeleteCommandExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCommandExecution")
	}

	var r0 *iot.DeleteCommandExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCommandExecutionInput, ...func(*iot.Options)) (*iot.DeleteCommandExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCommandExecutionInput, ...func(*iot.Options)) *iot.DeleteCommandExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteCommandExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteCommandExecutionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomMetric(ctx context.Context, params *iot.DeleteCustomMetricInput, optFns ...func(*iot.Options)) (*iot.DeleteCustomMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomMetric")
	}

	var r0 *iot.DeleteCustomMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCustomMetricInput, ...func(*iot.Options)) (*iot.DeleteCustomMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteCustomMetricInput, ...func(*iot.Options)) *iot.DeleteCustomMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteCustomMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteCustomMetricInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDimension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDimension(ctx context.Context, params *iot.DeleteDimensionInput, optFns ...func(*iot.Options)) (*iot.DeleteDimensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDimension")
	}

	var r0 *iot.DeleteDimensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteDimensionInput, ...func(*iot.Options)) (*iot.DeleteDimensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteDimensionInput, ...func(*iot.Options)) *iot.DeleteDimensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteDimensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteDimensionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomainConfiguration(ctx context.Context, params *iot.DeleteDomainConfigurationInput, optFns ...func(*iot.Options)) (*iot.DeleteDomainConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainConfiguration")
	}

	var r0 *iot.DeleteDomainConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteDomainConfigurationInput, ...func(*iot.Options)) (*iot.DeleteDomainConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteDomainConfigurationInput, ...func(*iot.Options)) *iot.DeleteDomainConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteDomainConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteDomainConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDynamicThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDynamicThingGroup(ctx context.Context, params *iot.DeleteDynamicThingGroupInput, optFns ...func(*iot.Options)) (*iot.DeleteDynamicThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDynamicThingGroup")
	}

	var r0 *iot.DeleteDynamicThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteDynamicThingGroupInput, ...func(*iot.Options)) (*iot.DeleteDynamicThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteDynamicThingGroupInput, ...func(*iot.Options)) *iot.DeleteDynamicThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteDynamicThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteDynamicThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFleetMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFleetMetric(ctx context.Context, params *iot.DeleteFleetMetricInput, optFns ...func(*iot.Options)) (*iot.DeleteFleetMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFleetMetric")
	}

	var r0 *iot.DeleteFleetMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteFleetMetricInput, ...func(*iot.Options)) (*iot.DeleteFleetMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteFleetMetricInput, ...func(*iot.Options)) *iot.DeleteFleetMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteFleetMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteFleetMetricInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJob(ctx context.Context, params *iot.DeleteJobInput, optFns ...func(*iot.Options)) (*iot.DeleteJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 *iot.DeleteJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteJobInput, ...func(*iot.Options)) (*iot.DeleteJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteJobInput, ...func(*iot.Options)) *iot.DeleteJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteJobInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJobExecution(ctx context.Context, params *iot.DeleteJobExecutionInput, optFns ...func(*iot.Options)) (*iot.DeleteJobExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobExecution")
	}

	var r0 *iot.DeleteJobExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteJobExecutionInput, ...func(*iot.Options)) (*iot.DeleteJobExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteJobExecutionInput, ...func(*iot.Options)) *iot.DeleteJobExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteJobExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteJobExecutionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJobTemplate(ctx context.Context, params *iot.DeleteJobTemplateInput, optFns ...func(*iot.Options)) (*iot.DeleteJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobTemplate")
	}

	var r0 *iot.DeleteJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteJobTemplateInput, ...func(*iot.Options)) (*iot.DeleteJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteJobTemplateInput, ...func(*iot.Options)) *iot.DeleteJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteJobTemplateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMitigationAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMitigationAction(ctx context.Context, params *iot.DeleteMitigationActionInput, optFns ...func(*iot.Options)) (*iot.DeleteMitigationActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMitigationAction")
	}

	var r0 *iot.DeleteMitigationActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteMitigationActionInput, ...func(*iot.Options)) (*iot.DeleteMitigationActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteMitigationActionInput, ...func(*iot.Options)) *iot.DeleteMitigationActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteMitigationActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteMitigationActionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOTAUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOTAUpdate(ctx context.Context, params *iot.DeleteOTAUpdateInput, optFns ...func(*iot.Options)) (*iot.DeleteOTAUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOTAUpdate")
	}

	var r0 *iot.DeleteOTAUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteOTAUpdateInput, ...func(*iot.Options)) (*iot.DeleteOTAUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteOTAUpdateInput, ...func(*iot.Options)) *iot.DeleteOTAUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteOTAUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteOTAUpdateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePackage(ctx context.Context, params *iot.DeletePackageInput, optFns ...func(*iot.Options)) (*iot.DeletePackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePackage")
	}

	var r0 *iot.DeletePackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeletePackageInput, ...func(*iot.Options)) (*iot.DeletePackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeletePackageInput, ...func(*iot.Options)) *iot.DeletePackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeletePackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeletePackageInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePackageVersion(ctx context.Context, params *iot.DeletePackageVersionInput, optFns ...func(*iot.Options)) (*iot.DeletePackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePackageVersion")
	}

	var r0 *iot.DeletePackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeletePackageVersionInput, ...func(*iot.Options)) (*iot.DeletePackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeletePackageVersionInput, ...func(*iot.Options)) *iot.DeletePackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeletePackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeletePackageVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePolicy(ctx context.Context, params *iot.DeletePolicyInput, optFns ...func(*iot.Options)) (*iot.DeletePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 *iot.DeletePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeletePolicyInput, ...func(*iot.Options)) (*iot.DeletePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeletePolicyInput, ...func(*iot.Options)) *iot.DeletePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeletePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeletePolicyInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicyVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePolicyVersion(ctx context.Context, params *iot.DeletePolicyVersionInput, optFns ...func(*iot.Options)) (*iot.DeletePolicyVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicyVersion")
	}

	var r0 *iot.DeletePolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeletePolicyVersionInput, ...func(*iot.Options)) (*iot.DeletePolicyVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeletePolicyVersionInput, ...func(*iot.Options)) *iot.DeletePolicyVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeletePolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeletePolicyVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvisioningTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProvisioningTemplate(ctx context.Context, params *iot.DeleteProvisioningTemplateInput, optFns ...func(*iot.Options)) (*iot.DeleteProvisioningTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvisioningTemplate")
	}

	var r0 *iot.DeleteProvisioningTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteProvisioningTemplateInput, ...func(*iot.Options)) (*iot.DeleteProvisioningTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteProvisioningTemplateInput, ...func(*iot.Options)) *iot.DeleteProvisioningTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteProvisioningTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteProvisioningTemplateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvisioningTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProvisioningTemplateVersion(ctx context.Context, params *iot.DeleteProvisioningTemplateVersionInput, optFns ...func(*iot.Options)) (*iot.DeleteProvisioningTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvisioningTemplateVersion")
	}

	var r0 *iot.DeleteProvisioningTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteProvisioningTemplateVersionInput, ...func(*iot.Options)) (*iot.DeleteProvisioningTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteProvisioningTemplateVersionInput, ...func(*iot.Options)) *iot.DeleteProvisioningTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteProvisioningTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteProvisioningTemplateVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRegistrationCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRegistrationCode(ctx context.Context, params *iot.DeleteRegistrationCodeInput, optFns ...func(*iot.Options)) (*iot.DeleteRegistrationCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRegistrationCode")
	}

	var r0 *iot.DeleteRegistrationCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteRegistrationCodeInput, ...func(*iot.Options)) (*iot.DeleteRegistrationCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteRegistrationCodeInput, ...func(*iot.Options)) *iot.DeleteRegistrationCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteRegistrationCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteRegistrationCodeInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoleAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoleAlias(ctx context.Context, params *iot.DeleteRoleAliasInput, optFns ...func(*iot.Options)) (*iot.DeleteRoleAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleAlias")
	}

	var r0 *iot.DeleteRoleAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteRoleAliasInput, ...func(*iot.Options)) (*iot.DeleteRoleAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteRoleAliasInput, ...func(*iot.Options)) *iot.DeleteRoleAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteRoleAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteRoleAliasInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteScheduledAudit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteScheduledAudit(ctx context.Context, params *iot.DeleteScheduledAuditInput, optFns ...func(*iot.Options)) (*iot.DeleteScheduledAuditOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScheduledAudit")
	}

	var r0 *iot.DeleteScheduledAuditOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteScheduledAuditInput, ...func(*iot.Options)) (*iot.DeleteScheduledAuditOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteScheduledAuditInput, ...func(*iot.Options)) *iot.DeleteScheduledAuditOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteScheduledAuditOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteScheduledAuditInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSecurityProfile(ctx context.Context, params *iot.DeleteSecurityProfileInput, optFns ...func(*iot.Options)) (*iot.DeleteSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecurityProfile")
	}

	var r0 *iot.DeleteSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteSecurityProfileInput, ...func(*iot.Options)) (*iot.DeleteSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteSecurityProfileInput, ...func(*iot.Options)) *iot.DeleteSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteSecurityProfileInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStream(ctx context.Context, params *iot.DeleteStreamInput, optFns ...func(*iot.Options)) (*iot.DeleteStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStream")
	}

	var r0 *iot.DeleteStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteStreamInput, ...func(*iot.Options)) (*iot.DeleteStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteStreamInput, ...func(*iot.Options)) *iot.DeleteStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteStreamInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteThing(ctx context.Context, params *iot.DeleteThingInput, optFns ...func(*iot.Options)) (*iot.DeleteThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteThing")
	}

	var r0 *iot.DeleteThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteThingInput, ...func(*iot.Options)) (*iot.DeleteThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteThingInput, ...func(*iot.Options)) *iot.DeleteThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteThingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteThingGroup(ctx context.Context, params *iot.DeleteThingGroupInput, optFns ...func(*iot.Options)) (*iot.DeleteThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteThingGroup")
	}

	var r0 *iot.DeleteThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteThingGroupInput, ...func(*iot.Options)) (*iot.DeleteThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteThingGroupInput, ...func(*iot.Options)) *iot.DeleteThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThingType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteThingType(ctx context.Context, params *iot.DeleteThingTypeInput, optFns ...func(*iot.Options)) (*iot.DeleteThingTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteThingType")
	}

	var r0 *iot.DeleteThingTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteThingTypeInput, ...func(*iot.Options)) (*iot.DeleteThingTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteThingTypeInput, ...func(*iot.Options)) *iot.DeleteThingTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteThingTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteThingTypeInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopicRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTopicRule(ctx context.Context, params *iot.DeleteTopicRuleInput, optFns ...func(*iot.Options)) (*iot.DeleteTopicRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopicRule")
	}

	var r0 *iot.DeleteTopicRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteTopicRuleInput, ...func(*iot.Options)) (*iot.DeleteTopicRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteTopicRuleInput, ...func(*iot.Options)) *iot.DeleteTopicRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteTopicRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteTopicRuleInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopicRuleDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTopicRuleDestination(ctx context.Context, params *iot.DeleteTopicRuleDestinationInput, optFns ...func(*iot.Options)) (*iot.DeleteTopicRuleDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopicRuleDestination")
	}

	var r0 *iot.DeleteTopicRuleDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteTopicRuleDestinationInput, ...func(*iot.Options)) (*iot.DeleteTopicRuleDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteTopicRuleDestinationInput, ...func(*iot.Options)) *iot.DeleteTopicRuleDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteTopicRuleDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteTopicRuleDestinationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteV2LoggingLevel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteV2LoggingLevel(ctx context.Context, params *iot.DeleteV2LoggingLevelInput, optFns ...func(*iot.Options)) (*iot.DeleteV2LoggingLevelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteV2LoggingLevel")
	}

	var r0 *iot.DeleteV2LoggingLevelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteV2LoggingLevelInput, ...func(*iot.Options)) (*iot.DeleteV2LoggingLevelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeleteV2LoggingLevelInput, ...func(*iot.Options)) *iot.DeleteV2LoggingLevelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeleteV2LoggingLevelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeleteV2LoggingLevelInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeprecateThingType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeprecateThingType(ctx context.Context, params *iot.DeprecateThingTypeInput, optFns ...func(*iot.Options)) (*iot.DeprecateThingTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeprecateThingType")
	}

	var r0 *iot.DeprecateThingTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeprecateThingTypeInput, ...func(*iot.Options)) (*iot.DeprecateThingTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DeprecateThingTypeInput, ...func(*iot.Options)) *iot.DeprecateThingTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DeprecateThingTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DeprecateThingTypeInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAuditConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountAuditConfiguration(ctx context.Context, params *iot.DescribeAccountAuditConfigurationInput, optFns ...func(*iot.Options)) (*iot.DescribeAccountAuditConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountAuditConfiguration")
	}

	var r0 *iot.DescribeAccountAuditConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAccountAuditConfigurationInput, ...func(*iot.Options)) (*iot.DescribeAccountAuditConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAccountAuditConfigurationInput, ...func(*iot.Options)) *iot.DescribeAccountAuditConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeAccountAuditConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeAccountAuditConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAuditFinding provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAuditFinding(ctx context.Context, params *iot.DescribeAuditFindingInput, optFns ...func(*iot.Options)) (*iot.DescribeAuditFindingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAuditFinding")
	}

	var r0 *iot.DescribeAuditFindingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuditFindingInput, ...func(*iot.Options)) (*iot.DescribeAuditFindingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuditFindingInput, ...func(*iot.Options)) *iot.DescribeAuditFindingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeAuditFindingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeAuditFindingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAuditMitigationActionsTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAuditMitigationActionsTask(ctx context.Context, params *iot.DescribeAuditMitigationActionsTaskInput, optFns ...func(*iot.Options)) (*iot.DescribeAuditMitigationActionsTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAuditMitigationActionsTask")
	}

	var r0 *iot.DescribeAuditMitigationActionsTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuditMitigationActionsTaskInput, ...func(*iot.Options)) (*iot.DescribeAuditMitigationActionsTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuditMitigationActionsTaskInput, ...func(*iot.Options)) *iot.DescribeAuditMitigationActionsTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeAuditMitigationActionsTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeAuditMitigationActionsTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAuditSuppression provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAuditSuppression(ctx context.Context, params *iot.DescribeAuditSuppressionInput, optFns ...func(*iot.Options)) (*iot.DescribeAuditSuppressionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAuditSuppression")
	}

	var r0 *iot.DescribeAuditSuppressionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuditSuppressionInput, ...func(*iot.Options)) (*iot.DescribeAuditSuppressionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuditSuppressionInput, ...func(*iot.Options)) *iot.DescribeAuditSuppressionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeAuditSuppressionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeAuditSuppressionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAuditTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAuditTask(ctx context.Context, params *iot.DescribeAuditTaskInput, optFns ...func(*iot.Options)) (*iot.DescribeAuditTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAuditTask")
	}

	var r0 *iot.DescribeAuditTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuditTaskInput, ...func(*iot.Options)) (*iot.DescribeAuditTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuditTaskInput, ...func(*iot.Options)) *iot.DescribeAuditTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeAuditTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeAuditTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAuthorizer(ctx context.Context, params *iot.DescribeAuthorizerInput, optFns ...func(*iot.Options)) (*iot.DescribeAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAuthorizer")
	}

	var r0 *iot.DescribeAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuthorizerInput, ...func(*iot.Options)) (*iot.DescribeAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeAuthorizerInput, ...func(*iot.Options)) *iot.DescribeAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeAuthorizerInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBillingGroup(ctx context.Context, params *iot.DescribeBillingGroupInput, optFns ...func(*iot.Options)) (*iot.DescribeBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBillingGroup")
	}

	var r0 *iot.DescribeBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeBillingGroupInput, ...func(*iot.Options)) (*iot.DescribeBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeBillingGroupInput, ...func(*iot.Options)) *iot.DescribeBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeBillingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCACertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCACertificate(ctx context.Context, params *iot.DescribeCACertificateInput, optFns ...func(*iot.Options)) (*iot.DescribeCACertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCACertificate")
	}

	var r0 *iot.DescribeCACertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeCACertificateInput, ...func(*iot.Options)) (*iot.DescribeCACertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeCACertificateInput, ...func(*iot.Options)) *iot.DescribeCACertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeCACertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeCACertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificate(ctx context.Context, params *iot.DescribeCertificateInput, optFns ...func(*iot.Options)) (*iot.DescribeCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificate")
	}

	var r0 *iot.DescribeCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeCertificateInput, ...func(*iot.Options)) (*iot.DescribeCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeCertificateInput, ...func(*iot.Options)) *iot.DescribeCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeCertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificateProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificateProvider(ctx context.Context, params *iot.DescribeCertificateProviderInput, optFns ...func(*iot.Options)) (*iot.DescribeCertificateProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificateProvider")
	}

	var r0 *iot.DescribeCertificateProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeCertificateProviderInput, ...func(*iot.Options)) (*iot.DescribeCertificateProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeCertificateProviderInput, ...func(*iot.Options)) *iot.DescribeCertificateProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeCertificateProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeCertificateProviderInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCustomMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCustomMetric(ctx context.Context, params *iot.DescribeCustomMetricInput, optFns ...func(*iot.Options)) (*iot.DescribeCustomMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCustomMetric")
	}

	var r0 *iot.DescribeCustomMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeCustomMetricInput, ...func(*iot.Options)) (*iot.DescribeCustomMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeCustomMetricInput, ...func(*iot.Options)) *iot.DescribeCustomMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeCustomMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeCustomMetricInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDefaultAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDefaultAuthorizer(ctx context.Context, params *iot.DescribeDefaultAuthorizerInput, optFns ...func(*iot.Options)) (*iot.DescribeDefaultAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDefaultAuthorizer")
	}

	var r0 *iot.DescribeDefaultAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeDefaultAuthorizerInput, ...func(*iot.Options)) (*iot.DescribeDefaultAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeDefaultAuthorizerInput, ...func(*iot.Options)) *iot.DescribeDefaultAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeDefaultAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeDefaultAuthorizerInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDetectMitigationActionsTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDetectMitigationActionsTask(ctx context.Context, params *iot.DescribeDetectMitigationActionsTaskInput, optFns ...func(*iot.Options)) (*iot.DescribeDetectMitigationActionsTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDetectMitigationActionsTask")
	}

	var r0 *iot.DescribeDetectMitigationActionsTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeDetectMitigationActionsTaskInput, ...func(*iot.Options)) (*iot.DescribeDetectMitigationActionsTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeDetectMitigationActionsTaskInput, ...func(*iot.Options)) *iot.DescribeDetectMitigationActionsTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeDetectMitigationActionsTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeDetectMitigationActionsTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDimension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDimension(ctx context.Context, params *iot.DescribeDimensionInput, optFns ...func(*iot.Options)) (*iot.DescribeDimensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDimension")
	}

	var r0 *iot.DescribeDimensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeDimensionInput, ...func(*iot.Options)) (*iot.DescribeDimensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeDimensionInput, ...func(*iot.Options)) *iot.DescribeDimensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeDimensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeDimensionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDomainConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDomainConfiguration(ctx context.Context, params *iot.DescribeDomainConfigurationInput, optFns ...func(*iot.Options)) (*iot.DescribeDomainConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDomainConfiguration")
	}

	var r0 *iot.DescribeDomainConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeDomainConfigurationInput, ...func(*iot.Options)) (*iot.DescribeDomainConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeDomainConfigurationInput, ...func(*iot.Options)) *iot.DescribeDomainConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeDomainConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeDomainConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEndpoint(ctx context.Context, params *iot.DescribeEndpointInput, optFns ...func(*iot.Options)) (*iot.DescribeEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEndpoint")
	}

	var r0 *iot.DescribeEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeEndpointInput, ...func(*iot.Options)) (*iot.DescribeEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeEndpointInput, ...func(*iot.Options)) *iot.DescribeEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeEndpointInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventConfigurations(ctx context.Context, params *iot.DescribeEventConfigurationsInput, optFns ...func(*iot.Options)) (*iot.DescribeEventConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventConfigurations")
	}

	var r0 *iot.DescribeEventConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeEventConfigurationsInput, ...func(*iot.Options)) (*iot.DescribeEventConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeEventConfigurationsInput, ...func(*iot.Options)) *iot.DescribeEventConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeEventConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeEventConfigurationsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFleetMetric(ctx context.Context, params *iot.DescribeFleetMetricInput, optFns ...func(*iot.Options)) (*iot.DescribeFleetMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFleetMetric")
	}

	var r0 *iot.DescribeFleetMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeFleetMetricInput, ...func(*iot.Options)) (*iot.DescribeFleetMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeFleetMetricInput, ...func(*iot.Options)) *iot.DescribeFleetMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeFleetMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeFleetMetricInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIndex(ctx context.Context, params *iot.DescribeIndexInput, optFns ...func(*iot.Options)) (*iot.DescribeIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIndex")
	}

	var r0 *iot.DescribeIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeIndexInput, ...func(*iot.Options)) (*iot.DescribeIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeIndexInput, ...func(*iot.Options)) *iot.DescribeIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeIndexInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeJob(ctx context.Context, params *iot.DescribeJobInput, optFns ...func(*iot.Options)) (*iot.DescribeJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJob")
	}

	var r0 *iot.DescribeJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeJobInput, ...func(*iot.Options)) (*iot.DescribeJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeJobInput, ...func(*iot.Options)) *iot.DescribeJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeJobInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeJobExecution(ctx context.Context, params *iot.DescribeJobExecutionInput, optFns ...func(*iot.Options)) (*iot.DescribeJobExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJobExecution")
	}

	var r0 *iot.DescribeJobExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeJobExecutionInput, ...func(*iot.Options)) (*iot.DescribeJobExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeJobExecutionInput, ...func(*iot.Options)) *iot.DescribeJobExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeJobExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeJobExecutionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeJobTemplate(ctx context.Context, params *iot.DescribeJobTemplateInput, optFns ...func(*iot.Options)) (*iot.DescribeJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJobTemplate")
	}

	var r0 *iot.DescribeJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeJobTemplateInput, ...func(*iot.Options)) (*iot.DescribeJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeJobTemplateInput, ...func(*iot.Options)) *iot.DescribeJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeJobTemplateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeManagedJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeManagedJobTemplate(ctx context.Context, params *iot.DescribeManagedJobTemplateInput, optFns ...func(*iot.Options)) (*iot.DescribeManagedJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeManagedJobTemplate")
	}

	var r0 *iot.DescribeManagedJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeManagedJobTemplateInput, ...func(*iot.Options)) (*iot.DescribeManagedJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeManagedJobTemplateInput, ...func(*iot.Options)) *iot.DescribeManagedJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeManagedJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeManagedJobTemplateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMitigationAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMitigationAction(ctx context.Context, params *iot.DescribeMitigationActionInput, optFns ...func(*iot.Options)) (*iot.DescribeMitigationActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMitigationAction")
	}

	var r0 *iot.DescribeMitigationActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeMitigationActionInput, ...func(*iot.Options)) (*iot.DescribeMitigationActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeMitigationActionInput, ...func(*iot.Options)) *iot.DescribeMitigationActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeMitigationActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeMitigationActionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProvisioningTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProvisioningTemplate(ctx context.Context, params *iot.DescribeProvisioningTemplateInput, optFns ...func(*iot.Options)) (*iot.DescribeProvisioningTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProvisioningTemplate")
	}

	var r0 *iot.DescribeProvisioningTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeProvisioningTemplateInput, ...func(*iot.Options)) (*iot.DescribeProvisioningTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeProvisioningTemplateInput, ...func(*iot.Options)) *iot.DescribeProvisioningTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeProvisioningTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeProvisioningTemplateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProvisioningTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProvisioningTemplateVersion(ctx context.Context, params *iot.DescribeProvisioningTemplateVersionInput, optFns ...func(*iot.Options)) (*iot.DescribeProvisioningTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProvisioningTemplateVersion")
	}

	var r0 *iot.DescribeProvisioningTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeProvisioningTemplateVersionInput, ...func(*iot.Options)) (*iot.DescribeProvisioningTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeProvisioningTemplateVersionInput, ...func(*iot.Options)) *iot.DescribeProvisioningTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeProvisioningTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeProvisioningTemplateVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRoleAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRoleAlias(ctx context.Context, params *iot.DescribeRoleAliasInput, optFns ...func(*iot.Options)) (*iot.DescribeRoleAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRoleAlias")
	}

	var r0 *iot.DescribeRoleAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeRoleAliasInput, ...func(*iot.Options)) (*iot.DescribeRoleAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeRoleAliasInput, ...func(*iot.Options)) *iot.DescribeRoleAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeRoleAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeRoleAliasInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeScheduledAudit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeScheduledAudit(ctx context.Context, params *iot.DescribeScheduledAuditInput, optFns ...func(*iot.Options)) (*iot.DescribeScheduledAuditOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeScheduledAudit")
	}

	var r0 *iot.DescribeScheduledAuditOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeScheduledAuditInput, ...func(*iot.Options)) (*iot.DescribeScheduledAuditOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeScheduledAuditInput, ...func(*iot.Options)) *iot.DescribeScheduledAuditOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeScheduledAuditOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeScheduledAuditInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSecurityProfile(ctx context.Context, params *iot.DescribeSecurityProfileInput, optFns ...func(*iot.Options)) (*iot.DescribeSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSecurityProfile")
	}

	var r0 *iot.DescribeSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeSecurityProfileInput, ...func(*iot.Options)) (*iot.DescribeSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeSecurityProfileInput, ...func(*iot.Options)) *iot.DescribeSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeSecurityProfileInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStream(ctx context.Context, params *iot.DescribeStreamInput, optFns ...func(*iot.Options)) (*iot.DescribeStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStream")
	}

	var r0 *iot.DescribeStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeStreamInput, ...func(*iot.Options)) (*iot.DescribeStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeStreamInput, ...func(*iot.Options)) *iot.DescribeStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeStreamInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeThing(ctx context.Context, params *iot.DescribeThingInput, optFns ...func(*iot.Options)) (*iot.DescribeThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeThing")
	}

	var r0 *iot.DescribeThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeThingInput, ...func(*iot.Options)) (*iot.DescribeThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeThingInput, ...func(*iot.Options)) *iot.DescribeThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeThingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeThingGroup(ctx context.Context, params *iot.DescribeThingGroupInput, optFns ...func(*iot.Options)) (*iot.DescribeThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeThingGroup")
	}

	var r0 *iot.DescribeThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeThingGroupInput, ...func(*iot.Options)) (*iot.DescribeThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeThingGroupInput, ...func(*iot.Options)) *iot.DescribeThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeThingRegistrationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeThingRegistrationTask(ctx context.Context, params *iot.DescribeThingRegistrationTaskInput, optFns ...func(*iot.Options)) (*iot.DescribeThingRegistrationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeThingRegistrationTask")
	}

	var r0 *iot.DescribeThingRegistrationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeThingRegistrationTaskInput, ...func(*iot.Options)) (*iot.DescribeThingRegistrationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeThingRegistrationTaskInput, ...func(*iot.Options)) *iot.DescribeThingRegistrationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeThingRegistrationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeThingRegistrationTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeThingType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeThingType(ctx context.Context, params *iot.DescribeThingTypeInput, optFns ...func(*iot.Options)) (*iot.DescribeThingTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeThingType")
	}

	var r0 *iot.DescribeThingTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeThingTypeInput, ...func(*iot.Options)) (*iot.DescribeThingTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DescribeThingTypeInput, ...func(*iot.Options)) *iot.DescribeThingTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DescribeThingTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DescribeThingTypeInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachPolicy(ctx context.Context, params *iot.DetachPolicyInput, optFns ...func(*iot.Options)) (*iot.DetachPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachPolicy")
	}

	var r0 *iot.DetachPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DetachPolicyInput, ...func(*iot.Options)) (*iot.DetachPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DetachPolicyInput, ...func(*iot.Options)) *iot.DetachPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DetachPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DetachPolicyInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachPrincipalPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachPrincipalPolicy(ctx context.Context, params *iot.DetachPrincipalPolicyInput, optFns ...func(*iot.Options)) (*iot.DetachPrincipalPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachPrincipalPolicy")
	}

	var r0 *iot.DetachPrincipalPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DetachPrincipalPolicyInput, ...func(*iot.Options)) (*iot.DetachPrincipalPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DetachPrincipalPolicyInput, ...func(*iot.Options)) *iot.DetachPrincipalPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DetachPrincipalPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DetachPrincipalPolicyInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachSecurityProfile(ctx context.Context, params *iot.DetachSecurityProfileInput, optFns ...func(*iot.Options)) (*iot.DetachSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachSecurityProfile")
	}

	var r0 *iot.DetachSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DetachSecurityProfileInput, ...func(*iot.Options)) (*iot.DetachSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DetachSecurityProfileInput, ...func(*iot.Options)) *iot.DetachSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DetachSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DetachSecurityProfileInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachThingPrincipal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachThingPrincipal(ctx context.Context, params *iot.DetachThingPrincipalInput, optFns ...func(*iot.Options)) (*iot.DetachThingPrincipalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachThingPrincipal")
	}

	var r0 *iot.DetachThingPrincipalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DetachThingPrincipalInput, ...func(*iot.Options)) (*iot.DetachThingPrincipalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DetachThingPrincipalInput, ...func(*iot.Options)) *iot.DetachThingPrincipalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DetachThingPrincipalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DetachThingPrincipalInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableTopicRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableTopicRule(ctx context.Context, params *iot.DisableTopicRuleInput, optFns ...func(*iot.Options)) (*iot.DisableTopicRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableTopicRule")
	}

	var r0 *iot.DisableTopicRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DisableTopicRuleInput, ...func(*iot.Options)) (*iot.DisableTopicRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DisableTopicRuleInput, ...func(*iot.Options)) *iot.DisableTopicRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DisableTopicRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DisableTopicRuleInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSbomFromPackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateSbomFromPackageVersion(ctx context.Context, params *iot.DisassociateSbomFromPackageVersionInput, optFns ...func(*iot.Options)) (*iot.DisassociateSbomFromPackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSbomFromPackageVersion")
	}

	var r0 *iot.DisassociateSbomFromPackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DisassociateSbomFromPackageVersionInput, ...func(*iot.Options)) (*iot.DisassociateSbomFromPackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.DisassociateSbomFromPackageVersionInput, ...func(*iot.Options)) *iot.DisassociateSbomFromPackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.DisassociateSbomFromPackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.DisassociateSbomFromPackageVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableTopicRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableTopicRule(ctx context.Context, params *iot.EnableTopicRuleInput, optFns ...func(*iot.Options)) (*iot.EnableTopicRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableTopicRule")
	}

	var r0 *iot.EnableTopicRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.EnableTopicRuleInput, ...func(*iot.Options)) (*iot.EnableTopicRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.EnableTopicRuleInput, ...func(*iot.Options)) *iot.EnableTopicRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.EnableTopicRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.EnableTopicRuleInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBehaviorModelTrainingSummaries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBehaviorModelTrainingSummaries(ctx context.Context, params *iot.GetBehaviorModelTrainingSummariesInput, optFns ...func(*iot.Options)) (*iot.GetBehaviorModelTrainingSummariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBehaviorModelTrainingSummaries")
	}

	var r0 *iot.GetBehaviorModelTrainingSummariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetBehaviorModelTrainingSummariesInput, ...func(*iot.Options)) (*iot.GetBehaviorModelTrainingSummariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetBehaviorModelTrainingSummariesInput, ...func(*iot.Options)) *iot.GetBehaviorModelTrainingSummariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetBehaviorModelTrainingSummariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetBehaviorModelTrainingSummariesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketsAggregation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketsAggregation(ctx context.Context, params *iot.GetBucketsAggregationInput, optFns ...func(*iot.Options)) (*iot.GetBucketsAggregationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketsAggregation")
	}

	var r0 *iot.GetBucketsAggregationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetBucketsAggregationInput, ...func(*iot.Options)) (*iot.GetBucketsAggregationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetBucketsAggregationInput, ...func(*iot.Options)) *iot.GetBucketsAggregationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetBucketsAggregationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetBucketsAggregationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCardinality provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCardinality(ctx context.Context, params *iot.GetCardinalityInput, optFns ...func(*iot.Options)) (*iot.GetCardinalityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCardinality")
	}

	var r0 *iot.GetCardinalityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetCardinalityInput, ...func(*iot.Options)) (*iot.GetCardinalityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetCardinalityInput, ...func(*iot.Options)) *iot.GetCardinalityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetCardinalityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetCardinalityInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCommand(ctx context.Context, params *iot.GetCommandInput, optFns ...func(*iot.Options)) (*iot.GetCommandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCommand")
	}

	var r0 *iot.GetCommandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetCommandInput, ...func(*iot.Options)) (*iot.GetCommandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetCommandInput, ...func(*iot.Options)) *iot.GetCommandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetCommandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetCommandInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCommandExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCommandExecution(ctx context.Context, params *iot.GetCommandExecutionInput, optFns ...func(*iot.Options)) (*iot.GetCommandExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCommandExecution")
	}

	var r0 *iot.GetCommandExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetCommandExecutionInput, ...func(*iot.Options)) (*iot.GetCommandExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetCommandExecutionInput, ...func(*iot.Options)) *iot.GetCommandExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetCommandExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetCommandExecutionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEffectivePolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEffectivePolicies(ctx context.Context, params *iot.GetEffectivePoliciesInput, optFns ...func(*iot.Options)) (*iot.GetEffectivePoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEffectivePolicies")
	}

	var r0 *iot.GetEffectivePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetEffectivePoliciesInput, ...func(*iot.Options)) (*iot.GetEffectivePoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetEffectivePoliciesInput, ...func(*iot.Options)) *iot.GetEffectivePoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetEffectivePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetEffectivePoliciesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndexingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIndexingConfiguration(ctx context.Context, params *iot.GetIndexingConfigurationInput, optFns ...func(*iot.Options)) (*iot.GetIndexingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIndexingConfiguration")
	}

	var r0 *iot.GetIndexingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetIndexingConfigurationInput, ...func(*iot.Options)) (*iot.GetIndexingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetIndexingConfigurationInput, ...func(*iot.Options)) *iot.GetIndexingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetIndexingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetIndexingConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobDocument provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJobDocument(ctx context.Context, params *iot.GetJobDocumentInput, optFns ...func(*iot.Options)) (*iot.GetJobDocumentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJobDocument")
	}

	var r0 *iot.GetJobDocumentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetJobDocumentInput, ...func(*iot.Options)) (*iot.GetJobDocumentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetJobDocumentInput, ...func(*iot.Options)) *iot.GetJobDocumentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetJobDocumentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetJobDocumentInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoggingOptions(ctx context.Context, params *iot.GetLoggingOptionsInput, optFns ...func(*iot.Options)) (*iot.GetLoggingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoggingOptions")
	}

	var r0 *iot.GetLoggingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetLoggingOptionsInput, ...func(*iot.Options)) (*iot.GetLoggingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetLoggingOptionsInput, ...func(*iot.Options)) *iot.GetLoggingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetLoggingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetLoggingOptionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOTAUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOTAUpdate(ctx context.Context, params *iot.GetOTAUpdateInput, optFns ...func(*iot.Options)) (*iot.GetOTAUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOTAUpdate")
	}

	var r0 *iot.GetOTAUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetOTAUpdateInput, ...func(*iot.Options)) (*iot.GetOTAUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetOTAUpdateInput, ...func(*iot.Options)) *iot.GetOTAUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetOTAUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetOTAUpdateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPackage(ctx context.Context, params *iot.GetPackageInput, optFns ...func(*iot.Options)) (*iot.GetPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPackage")
	}

	var r0 *iot.GetPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPackageInput, ...func(*iot.Options)) (*iot.GetPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPackageInput, ...func(*iot.Options)) *iot.GetPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetPackageInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackageConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPackageConfiguration(ctx context.Context, params *iot.GetPackageConfigurationInput, optFns ...func(*iot.Options)) (*iot.GetPackageConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPackageConfiguration")
	}

	var r0 *iot.GetPackageConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPackageConfigurationInput, ...func(*iot.Options)) (*iot.GetPackageConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPackageConfigurationInput, ...func(*iot.Options)) *iot.GetPackageConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetPackageConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetPackageConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPackageVersion(ctx context.Context, params *iot.GetPackageVersionInput, optFns ...func(*iot.Options)) (*iot.GetPackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPackageVersion")
	}

	var r0 *iot.GetPackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPackageVersionInput, ...func(*iot.Options)) (*iot.GetPackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPackageVersionInput, ...func(*iot.Options)) *iot.GetPackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetPackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetPackageVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPercentiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPercentiles(ctx context.Context, params *iot.GetPercentilesInput, optFns ...func(*iot.Options)) (*iot.GetPercentilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPercentiles")
	}

	var r0 *iot.GetPercentilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPercentilesInput, ...func(*iot.Options)) (*iot.GetPercentilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPercentilesInput, ...func(*iot.Options)) *iot.GetPercentilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetPercentilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetPercentilesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPolicy(ctx context.Context, params *iot.GetPolicyInput, optFns ...func(*iot.Options)) (*iot.GetPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *iot.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPolicyInput, ...func(*iot.Options)) (*iot.GetPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPolicyInput, ...func(*iot.Options)) *iot.GetPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetPolicyInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicyVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPolicyVersion(ctx context.Context, params *iot.GetPolicyVersionInput, optFns ...func(*iot.Options)) (*iot.GetPolicyVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyVersion")
	}

	var r0 *iot.GetPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPolicyVersionInput, ...func(*iot.Options)) (*iot.GetPolicyVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetPolicyVersionInput, ...func(*iot.Options)) *iot.GetPolicyVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetPolicyVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegistrationCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRegistrationCode(ctx context.Context, params *iot.GetRegistrationCodeInput, optFns ...func(*iot.Options)) (*iot.GetRegistrationCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegistrationCode")
	}

	var r0 *iot.GetRegistrationCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetRegistrationCodeInput, ...func(*iot.Options)) (*iot.GetRegistrationCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetRegistrationCodeInput, ...func(*iot.Options)) *iot.GetRegistrationCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetRegistrationCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetRegistrationCodeInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStatistics(ctx context.Context, params *iot.GetStatisticsInput, optFns ...func(*iot.Options)) (*iot.GetStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStatistics")
	}

	var r0 *iot.GetStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetStatisticsInput, ...func(*iot.Options)) (*iot.GetStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetStatisticsInput, ...func(*iot.Options)) *iot.GetStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetStatisticsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThingConnectivityData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetThingConnectivityData(ctx context.Context, params *iot.GetThingConnectivityDataInput, optFns ...func(*iot.Options)) (*iot.GetThingConnectivityDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetThingConnectivityData")
	}

	var r0 *iot.GetThingConnectivityDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetThingConnectivityDataInput, ...func(*iot.Options)) (*iot.GetThingConnectivityDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetThingConnectivityDataInput, ...func(*iot.Options)) *iot.GetThingConnectivityDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetThingConnectivityDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetThingConnectivityDataInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTopicRule(ctx context.Context, params *iot.GetTopicRuleInput, optFns ...func(*iot.Options)) (*iot.GetTopicRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTopicRule")
	}

	var r0 *iot.GetTopicRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetTopicRuleInput, ...func(*iot.Options)) (*iot.GetTopicRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetTopicRuleInput, ...func(*iot.Options)) *iot.GetTopicRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetTopicRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetTopicRuleInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTopicRuleDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTopicRuleDestination(ctx context.Context, params *iot.GetTopicRuleDestinationInput, optFns ...func(*iot.Options)) (*iot.GetTopicRuleDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTopicRuleDestination")
	}

	var r0 *iot.GetTopicRuleDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetTopicRuleDestinationInput, ...func(*iot.Options)) (*iot.GetTopicRuleDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetTopicRuleDestinationInput, ...func(*iot.Options)) *iot.GetTopicRuleDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetTopicRuleDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetTopicRuleDestinationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetV2LoggingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetV2LoggingOptions(ctx context.Context, params *iot.GetV2LoggingOptionsInput, optFns ...func(*iot.Options)) (*iot.GetV2LoggingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetV2LoggingOptions")
	}

	var r0 *iot.GetV2LoggingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetV2LoggingOptionsInput, ...func(*iot.Options)) (*iot.GetV2LoggingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.GetV2LoggingOptionsInput, ...func(*iot.Options)) *iot.GetV2LoggingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.GetV2LoggingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.GetV2LoggingOptionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActiveViolations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListActiveViolations(ctx context.Context, params *iot.ListActiveViolationsInput, optFns ...func(*iot.Options)) (*iot.ListActiveViolationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListActiveViolations")
	}

	var r0 *iot.ListActiveViolationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListActiveViolationsInput, ...func(*iot.Options)) (*iot.ListActiveViolationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListActiveViolationsInput, ...func(*iot.Options)) *iot.ListActiveViolationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListActiveViolationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListActiveViolationsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttachedPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttachedPolicies(ctx context.Context, params *iot.ListAttachedPoliciesInput, optFns ...func(*iot.Options)) (*iot.ListAttachedPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttachedPolicies")
	}

	var r0 *iot.ListAttachedPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAttachedPoliciesInput, ...func(*iot.Options)) (*iot.ListAttachedPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAttachedPoliciesInput, ...func(*iot.Options)) *iot.ListAttachedPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListAttachedPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListAttachedPoliciesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAuditFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAuditFindings(ctx context.Context, params *iot.ListAuditFindingsInput, optFns ...func(*iot.Options)) (*iot.ListAuditFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAuditFindings")
	}

	var r0 *iot.ListAuditFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditFindingsInput, ...func(*iot.Options)) (*iot.ListAuditFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditFindingsInput, ...func(*iot.Options)) *iot.ListAuditFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListAuditFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListAuditFindingsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAuditMitigationActionsExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAuditMitigationActionsExecutions(ctx context.Context, params *iot.ListAuditMitigationActionsExecutionsInput, optFns ...func(*iot.Options)) (*iot.ListAuditMitigationActionsExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAuditMitigationActionsExecutions")
	}

	var r0 *iot.ListAuditMitigationActionsExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditMitigationActionsExecutionsInput, ...func(*iot.Options)) (*iot.ListAuditMitigationActionsExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditMitigationActionsExecutionsInput, ...func(*iot.Options)) *iot.ListAuditMitigationActionsExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListAuditMitigationActionsExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListAuditMitigationActionsExecutionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAuditMitigationActionsTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAuditMitigationActionsTasks(ctx context.Context, params *iot.ListAuditMitigationActionsTasksInput, optFns ...func(*iot.Options)) (*iot.ListAuditMitigationActionsTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAuditMitigationActionsTasks")
	}

	var r0 *iot.ListAuditMitigationActionsTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditMitigationActionsTasksInput, ...func(*iot.Options)) (*iot.ListAuditMitigationActionsTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditMitigationActionsTasksInput, ...func(*iot.Options)) *iot.ListAuditMitigationActionsTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListAuditMitigationActionsTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListAuditMitigationActionsTasksInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAuditSuppressions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAuditSuppressions(ctx context.Context, params *iot.ListAuditSuppressionsInput, optFns ...func(*iot.Options)) (*iot.ListAuditSuppressionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAuditSuppressions")
	}

	var r0 *iot.ListAuditSuppressionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditSuppressionsInput, ...func(*iot.Options)) (*iot.ListAuditSuppressionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditSuppressionsInput, ...func(*iot.Options)) *iot.ListAuditSuppressionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListAuditSuppressionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListAuditSuppressionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAuditTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAuditTasks(ctx context.Context, params *iot.ListAuditTasksInput, optFns ...func(*iot.Options)) (*iot.ListAuditTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAuditTasks")
	}

	var r0 *iot.ListAuditTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditTasksInput, ...func(*iot.Options)) (*iot.ListAuditTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuditTasksInput, ...func(*iot.Options)) *iot.ListAuditTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListAuditTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListAuditTasksInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAuthorizers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAuthorizers(ctx context.Context, params *iot.ListAuthorizersInput, optFns ...func(*iot.Options)) (*iot.ListAuthorizersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAuthorizers")
	}

	var r0 *iot.ListAuthorizersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuthorizersInput, ...func(*iot.Options)) (*iot.ListAuthorizersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListAuthorizersInput, ...func(*iot.Options)) *iot.ListAuthorizersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListAuthorizersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListAuthorizersInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillingGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillingGroups(ctx context.Context, params *iot.ListBillingGroupsInput, optFns ...func(*iot.Options)) (*iot.ListBillingGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillingGroups")
	}

	var r0 *iot.ListBillingGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListBillingGroupsInput, ...func(*iot.Options)) (*iot.ListBillingGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListBillingGroupsInput, ...func(*iot.Options)) *iot.ListBillingGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListBillingGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListBillingGroupsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCACertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCACertificates(ctx context.Context, params *iot.ListCACertificatesInput, optFns ...func(*iot.Options)) (*iot.ListCACertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCACertificates")
	}

	var r0 *iot.ListCACertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCACertificatesInput, ...func(*iot.Options)) (*iot.ListCACertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCACertificatesInput, ...func(*iot.Options)) *iot.ListCACertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListCACertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListCACertificatesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCertificateProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCertificateProviders(ctx context.Context, params *iot.ListCertificateProvidersInput, optFns ...func(*iot.Options)) (*iot.ListCertificateProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCertificateProviders")
	}

	var r0 *iot.ListCertificateProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCertificateProvidersInput, ...func(*iot.Options)) (*iot.ListCertificateProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCertificateProvidersInput, ...func(*iot.Options)) *iot.ListCertificateProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListCertificateProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListCertificateProvidersInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCertificates(ctx context.Context, params *iot.ListCertificatesInput, optFns ...func(*iot.Options)) (*iot.ListCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCertificates")
	}

	var r0 *iot.ListCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCertificatesInput, ...func(*iot.Options)) (*iot.ListCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCertificatesInput, ...func(*iot.Options)) *iot.ListCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListCertificatesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCertificatesByCA provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCertificatesByCA(ctx context.Context, params *iot.ListCertificatesByCAInput, optFns ...func(*iot.Options)) (*iot.ListCertificatesByCAOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCertificatesByCA")
	}

	var r0 *iot.ListCertificatesByCAOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCertificatesByCAInput, ...func(*iot.Options)) (*iot.ListCertificatesByCAOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCertificatesByCAInput, ...func(*iot.Options)) *iot.ListCertificatesByCAOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListCertificatesByCAOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListCertificatesByCAInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCommandExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCommandExecutions(ctx context.Context, params *iot.ListCommandExecutionsInput, optFns ...func(*iot.Options)) (*iot.ListCommandExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCommandExecutions")
	}

	var r0 *iot.ListCommandExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCommandExecutionsInput, ...func(*iot.Options)) (*iot.ListCommandExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCommandExecutionsInput, ...func(*iot.Options)) *iot.ListCommandExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListCommandExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListCommandExecutionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCommands provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCommands(ctx context.Context, params *iot.ListCommandsInput, optFns ...func(*iot.Options)) (*iot.ListCommandsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCommands")
	}

	var r0 *iot.ListCommandsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCommandsInput, ...func(*iot.Options)) (*iot.ListCommandsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCommandsInput, ...func(*iot.Options)) *iot.ListCommandsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListCommandsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListCommandsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomMetrics(ctx context.Context, params *iot.ListCustomMetricsInput, optFns ...func(*iot.Options)) (*iot.ListCustomMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomMetrics")
	}

	var r0 *iot.ListCustomMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCustomMetricsInput, ...func(*iot.Options)) (*iot.ListCustomMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListCustomMetricsInput, ...func(*iot.Options)) *iot.ListCustomMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListCustomMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListCustomMetricsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDetectMitigationActionsExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDetectMitigationActionsExecutions(ctx context.Context, params *iot.ListDetectMitigationActionsExecutionsInput, optFns ...func(*iot.Options)) (*iot.ListDetectMitigationActionsExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDetectMitigationActionsExecutions")
	}

	var r0 *iot.ListDetectMitigationActionsExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListDetectMitigationActionsExecutionsInput, ...func(*iot.Options)) (*iot.ListDetectMitigationActionsExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListDetectMitigationActionsExecutionsInput, ...func(*iot.Options)) *iot.ListDetectMitigationActionsExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListDetectMitigationActionsExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListDetectMitigationActionsExecutionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDetectMitigationActionsTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDetectMitigationActionsTasks(ctx context.Context, params *iot.ListDetectMitigationActionsTasksInput, optFns ...func(*iot.Options)) (*iot.ListDetectMitigationActionsTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDetectMitigationActionsTasks")
	}

	var r0 *iot.ListDetectMitigationActionsTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListDetectMitigationActionsTasksInput, ...func(*iot.Options)) (*iot.ListDetectMitigationActionsTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListDetectMitigationActionsTasksInput, ...func(*iot.Options)) *iot.ListDetectMitigationActionsTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListDetectMitigationActionsTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListDetectMitigationActionsTasksInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDimensions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDimensions(ctx context.Context, params *iot.ListDimensionsInput, optFns ...func(*iot.Options)) (*iot.ListDimensionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDimensions")
	}

	var r0 *iot.ListDimensionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListDimensionsInput, ...func(*iot.Options)) (*iot.ListDimensionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListDimensionsInput, ...func(*iot.Options)) *iot.ListDimensionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListDimensionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListDimensionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomainConfigurations(ctx context.Context, params *iot.ListDomainConfigurationsInput, optFns ...func(*iot.Options)) (*iot.ListDomainConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainConfigurations")
	}

	var r0 *iot.ListDomainConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListDomainConfigurationsInput, ...func(*iot.Options)) (*iot.ListDomainConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListDomainConfigurationsInput, ...func(*iot.Options)) *iot.ListDomainConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListDomainConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListDomainConfigurationsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFleetMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFleetMetrics(ctx context.Context, params *iot.ListFleetMetricsInput, optFns ...func(*iot.Options)) (*iot.ListFleetMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFleetMetrics")
	}

	var r0 *iot.ListFleetMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListFleetMetricsInput, ...func(*iot.Options)) (*iot.ListFleetMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListFleetMetricsInput, ...func(*iot.Options)) *iot.ListFleetMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListFleetMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListFleetMetricsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIndices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIndices(ctx context.Context, params *iot.ListIndicesInput, optFns ...func(*iot.Options)) (*iot.ListIndicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndices")
	}

	var r0 *iot.ListIndicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListIndicesInput, ...func(*iot.Options)) (*iot.ListIndicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListIndicesInput, ...func(*iot.Options)) *iot.ListIndicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListIndicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListIndicesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobExecutionsForJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobExecutionsForJob(ctx context.Context, params *iot.ListJobExecutionsForJobInput, optFns ...func(*iot.Options)) (*iot.ListJobExecutionsForJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobExecutionsForJob")
	}

	var r0 *iot.ListJobExecutionsForJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListJobExecutionsForJobInput, ...func(*iot.Options)) (*iot.ListJobExecutionsForJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListJobExecutionsForJobInput, ...func(*iot.Options)) *iot.ListJobExecutionsForJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListJobExecutionsForJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListJobExecutionsForJobInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobExecutionsForThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobExecutionsForThing(ctx context.Context, params *iot.ListJobExecutionsForThingInput, optFns ...func(*iot.Options)) (*iot.ListJobExecutionsForThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobExecutionsForThing")
	}

	var r0 *iot.ListJobExecutionsForThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListJobExecutionsForThingInput, ...func(*iot.Options)) (*iot.ListJobExecutionsForThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListJobExecutionsForThingInput, ...func(*iot.Options)) *iot.ListJobExecutionsForThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListJobExecutionsForThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListJobExecutionsForThingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobTemplates(ctx context.Context, params *iot.ListJobTemplatesInput, optFns ...func(*iot.Options)) (*iot.ListJobTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobTemplates")
	}

	var r0 *iot.ListJobTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListJobTemplatesInput, ...func(*iot.Options)) (*iot.ListJobTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListJobTemplatesInput, ...func(*iot.Options)) *iot.ListJobTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListJobTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListJobTemplatesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobs(ctx context.Context, params *iot.ListJobsInput, optFns ...func(*iot.Options)) (*iot.ListJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *iot.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListJobsInput, ...func(*iot.Options)) (*iot.ListJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListJobsInput, ...func(*iot.Options)) *iot.ListJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListJobsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedJobTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListManagedJobTemplates(ctx context.Context, params *iot.ListManagedJobTemplatesInput, optFns ...func(*iot.Options)) (*iot.ListManagedJobTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListManagedJobTemplates")
	}

	var r0 *iot.ListManagedJobTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListManagedJobTemplatesInput, ...func(*iot.Options)) (*iot.ListManagedJobTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListManagedJobTemplatesInput, ...func(*iot.Options)) *iot.ListManagedJobTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListManagedJobTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListManagedJobTemplatesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetricValues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMetricValues(ctx context.Context, params *iot.ListMetricValuesInput, optFns ...func(*iot.Options)) (*iot.ListMetricValuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricValues")
	}

	var r0 *iot.ListMetricValuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListMetricValuesInput, ...func(*iot.Options)) (*iot.ListMetricValuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListMetricValuesInput, ...func(*iot.Options)) *iot.ListMetricValuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListMetricValuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListMetricValuesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMitigationActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMitigationActions(ctx context.Context, params *iot.ListMitigationActionsInput, optFns ...func(*iot.Options)) (*iot.ListMitigationActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMitigationActions")
	}

	var r0 *iot.ListMitigationActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListMitigationActionsInput, ...func(*iot.Options)) (*iot.ListMitigationActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListMitigationActionsInput, ...func(*iot.Options)) *iot.ListMitigationActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListMitigationActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListMitigationActionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOTAUpdates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOTAUpdates(ctx context.Context, params *iot.ListOTAUpdatesInput, optFns ...func(*iot.Options)) (*iot.ListOTAUpdatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOTAUpdates")
	}

	var r0 *iot.ListOTAUpdatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListOTAUpdatesInput, ...func(*iot.Options)) (*iot.ListOTAUpdatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListOTAUpdatesInput, ...func(*iot.Options)) *iot.ListOTAUpdatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListOTAUpdatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListOTAUpdatesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOutgoingCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOutgoingCertificates(ctx context.Context, params *iot.ListOutgoingCertificatesInput, optFns ...func(*iot.Options)) (*iot.ListOutgoingCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOutgoingCertificates")
	}

	var r0 *iot.ListOutgoingCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListOutgoingCertificatesInput, ...func(*iot.Options)) (*iot.ListOutgoingCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListOutgoingCertificatesInput, ...func(*iot.Options)) *iot.ListOutgoingCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListOutgoingCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListOutgoingCertificatesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPackageVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPackageVersions(ctx context.Context, params *iot.ListPackageVersionsInput, optFns ...func(*iot.Options)) (*iot.ListPackageVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPackageVersions")
	}

	var r0 *iot.ListPackageVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPackageVersionsInput, ...func(*iot.Options)) (*iot.ListPackageVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPackageVersionsInput, ...func(*iot.Options)) *iot.ListPackageVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListPackageVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListPackageVersionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPackages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPackages(ctx context.Context, params *iot.ListPackagesInput, optFns ...func(*iot.Options)) (*iot.ListPackagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPackages")
	}

	var r0 *iot.ListPackagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPackagesInput, ...func(*iot.Options)) (*iot.ListPackagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPackagesInput, ...func(*iot.Options)) *iot.ListPackagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListPackagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListPackagesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPolicies(ctx context.Context, params *iot.ListPoliciesInput, optFns ...func(*iot.Options)) (*iot.ListPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicies")
	}

	var r0 *iot.ListPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPoliciesInput, ...func(*iot.Options)) (*iot.ListPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPoliciesInput, ...func(*iot.Options)) *iot.ListPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListPoliciesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicyPrincipals provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPolicyPrincipals(ctx context.Context, params *iot.ListPolicyPrincipalsInput, optFns ...func(*iot.Options)) (*iot.ListPolicyPrincipalsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicyPrincipals")
	}

	var r0 *iot.ListPolicyPrincipalsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPolicyPrincipalsInput, ...func(*iot.Options)) (*iot.ListPolicyPrincipalsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPolicyPrincipalsInput, ...func(*iot.Options)) *iot.ListPolicyPrincipalsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListPolicyPrincipalsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListPolicyPrincipalsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicyVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPolicyVersions(ctx context.Context, params *iot.ListPolicyVersionsInput, optFns ...func(*iot.Options)) (*iot.ListPolicyVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicyVersions")
	}

	var r0 *iot.ListPolicyVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPolicyVersionsInput, ...func(*iot.Options)) (*iot.ListPolicyVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPolicyVersionsInput, ...func(*iot.Options)) *iot.ListPolicyVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListPolicyVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListPolicyVersionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrincipalPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrincipalPolicies(ctx context.Context, params *iot.ListPrincipalPoliciesInput, optFns ...func(*iot.Options)) (*iot.ListPrincipalPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrincipalPolicies")
	}

	var r0 *iot.ListPrincipalPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPrincipalPoliciesInput, ...func(*iot.Options)) (*iot.ListPrincipalPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPrincipalPoliciesInput, ...func(*iot.Options)) *iot.ListPrincipalPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListPrincipalPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListPrincipalPoliciesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrincipalThings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrincipalThings(ctx context.Context, params *iot.ListPrincipalThingsInput, optFns ...func(*iot.Options)) (*iot.ListPrincipalThingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrincipalThings")
	}

	var r0 *iot.ListPrincipalThingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPrincipalThingsInput, ...func(*iot.Options)) (*iot.ListPrincipalThingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPrincipalThingsInput, ...func(*iot.Options)) *iot.ListPrincipalThingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListPrincipalThingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListPrincipalThingsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrincipalThingsV2 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrincipalThingsV2(ctx context.Context, params *iot.ListPrincipalThingsV2Input, optFns ...func(*iot.Options)) (*iot.ListPrincipalThingsV2Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrincipalThingsV2")
	}

	var r0 *iot.ListPrincipalThingsV2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPrincipalThingsV2Input, ...func(*iot.Options)) (*iot.ListPrincipalThingsV2Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListPrincipalThingsV2Input, ...func(*iot.Options)) *iot.ListPrincipalThingsV2Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListPrincipalThingsV2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListPrincipalThingsV2Input, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProvisioningTemplateVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProvisioningTemplateVersions(ctx context.Context, params *iot.ListProvisioningTemplateVersionsInput, optFns ...func(*iot.Options)) (*iot.ListProvisioningTemplateVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisioningTemplateVersions")
	}

	var r0 *iot.ListProvisioningTemplateVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListProvisioningTemplateVersionsInput, ...func(*iot.Options)) (*iot.ListProvisioningTemplateVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListProvisioningTemplateVersionsInput, ...func(*iot.Options)) *iot.ListProvisioningTemplateVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListProvisioningTemplateVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListProvisioningTemplateVersionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProvisioningTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProvisioningTemplates(ctx context.Context, params *iot.ListProvisioningTemplatesInput, optFns ...func(*iot.Options)) (*iot.ListProvisioningTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisioningTemplates")
	}

	var r0 *iot.ListProvisioningTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListProvisioningTemplatesInput, ...func(*iot.Options)) (*iot.ListProvisioningTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListProvisioningTemplatesInput, ...func(*iot.Options)) *iot.ListProvisioningTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListProvisioningTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListProvisioningTemplatesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelatedResourcesForAuditFinding provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRelatedResourcesForAuditFinding(ctx context.Context, params *iot.ListRelatedResourcesForAuditFindingInput, optFns ...func(*iot.Options)) (*iot.ListRelatedResourcesForAuditFindingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRelatedResourcesForAuditFinding")
	}

	var r0 *iot.ListRelatedResourcesForAuditFindingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListRelatedResourcesForAuditFindingInput, ...func(*iot.Options)) (*iot.ListRelatedResourcesForAuditFindingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListRelatedResourcesForAuditFindingInput, ...func(*iot.Options)) *iot.ListRelatedResourcesForAuditFindingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListRelatedResourcesForAuditFindingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListRelatedResourcesForAuditFindingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoleAliases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoleAliases(ctx context.Context, params *iot.ListRoleAliasesInput, optFns ...func(*iot.Options)) (*iot.ListRoleAliasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleAliases")
	}

	var r0 *iot.ListRoleAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListRoleAliasesInput, ...func(*iot.Options)) (*iot.ListRoleAliasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListRoleAliasesInput, ...func(*iot.Options)) *iot.ListRoleAliasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListRoleAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListRoleAliasesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSbomValidationResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSbomValidationResults(ctx context.Context, params *iot.ListSbomValidationResultsInput, optFns ...func(*iot.Options)) (*iot.ListSbomValidationResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSbomValidationResults")
	}

	var r0 *iot.ListSbomValidationResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListSbomValidationResultsInput, ...func(*iot.Options)) (*iot.ListSbomValidationResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListSbomValidationResultsInput, ...func(*iot.Options)) *iot.ListSbomValidationResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListSbomValidationResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListSbomValidationResultsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListScheduledAudits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListScheduledAudits(ctx context.Context, params *iot.ListScheduledAuditsInput, optFns ...func(*iot.Options)) (*iot.ListScheduledAuditsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScheduledAudits")
	}

	var r0 *iot.ListScheduledAuditsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListScheduledAuditsInput, ...func(*iot.Options)) (*iot.ListScheduledAuditsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListScheduledAuditsInput, ...func(*iot.Options)) *iot.ListScheduledAuditsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListScheduledAuditsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListScheduledAuditsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityProfiles(ctx context.Context, params *iot.ListSecurityProfilesInput, optFns ...func(*iot.Options)) (*iot.ListSecurityProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityProfiles")
	}

	var r0 *iot.ListSecurityProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListSecurityProfilesInput, ...func(*iot.Options)) (*iot.ListSecurityProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListSecurityProfilesInput, ...func(*iot.Options)) *iot.ListSecurityProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListSecurityProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListSecurityProfilesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityProfilesForTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityProfilesForTarget(ctx context.Context, params *iot.ListSecurityProfilesForTargetInput, optFns ...func(*iot.Options)) (*iot.ListSecurityProfilesForTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityProfilesForTarget")
	}

	var r0 *iot.ListSecurityProfilesForTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListSecurityProfilesForTargetInput, ...func(*iot.Options)) (*iot.ListSecurityProfilesForTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListSecurityProfilesForTargetInput, ...func(*iot.Options)) *iot.ListSecurityProfilesForTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListSecurityProfilesForTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListSecurityProfilesForTargetInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreams(ctx context.Context, params *iot.ListStreamsInput, optFns ...func(*iot.Options)) (*iot.ListStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreams")
	}

	var r0 *iot.ListStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListStreamsInput, ...func(*iot.Options)) (*iot.ListStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListStreamsInput, ...func(*iot.Options)) *iot.ListStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListStreamsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *iot.ListTagsForResourceInput, optFns ...func(*iot.Options)) (*iot.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *iot.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTagsForResourceInput, ...func(*iot.Options)) (*iot.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTagsForResourceInput, ...func(*iot.Options)) *iot.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListTagsForResourceInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsForPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTargetsForPolicy(ctx context.Context, params *iot.ListTargetsForPolicyInput, optFns ...func(*iot.Options)) (*iot.ListTargetsForPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTargetsForPolicy")
	}

	var r0 *iot.ListTargetsForPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTargetsForPolicyInput, ...func(*iot.Options)) (*iot.ListTargetsForPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTargetsForPolicyInput, ...func(*iot.Options)) *iot.ListTargetsForPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListTargetsForPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListTargetsForPolicyInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsForSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTargetsForSecurityProfile(ctx context.Context, params *iot.ListTargetsForSecurityProfileInput, optFns ...func(*iot.Options)) (*iot.ListTargetsForSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTargetsForSecurityProfile")
	}

	var r0 *iot.ListTargetsForSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTargetsForSecurityProfileInput, ...func(*iot.Options)) (*iot.ListTargetsForSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTargetsForSecurityProfileInput, ...func(*iot.Options)) *iot.ListTargetsForSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListTargetsForSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListTargetsForSecurityProfileInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingGroups(ctx context.Context, params *iot.ListThingGroupsInput, optFns ...func(*iot.Options)) (*iot.ListThingGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingGroups")
	}

	var r0 *iot.ListThingGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingGroupsInput, ...func(*iot.Options)) (*iot.ListThingGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingGroupsInput, ...func(*iot.Options)) *iot.ListThingGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingGroupsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingGroupsForThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingGroupsForThing(ctx context.Context, params *iot.ListThingGroupsForThingInput, optFns ...func(*iot.Options)) (*iot.ListThingGroupsForThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingGroupsForThing")
	}

	var r0 *iot.ListThingGroupsForThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingGroupsForThingInput, ...func(*iot.Options)) (*iot.ListThingGroupsForThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingGroupsForThingInput, ...func(*iot.Options)) *iot.ListThingGroupsForThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingGroupsForThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingGroupsForThingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingPrincipals provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingPrincipals(ctx context.Context, params *iot.ListThingPrincipalsInput, optFns ...func(*iot.Options)) (*iot.ListThingPrincipalsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingPrincipals")
	}

	var r0 *iot.ListThingPrincipalsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingPrincipalsInput, ...func(*iot.Options)) (*iot.ListThingPrincipalsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingPrincipalsInput, ...func(*iot.Options)) *iot.ListThingPrincipalsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingPrincipalsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingPrincipalsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingPrincipalsV2 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingPrincipalsV2(ctx context.Context, params *iot.ListThingPrincipalsV2Input, optFns ...func(*iot.Options)) (*iot.ListThingPrincipalsV2Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingPrincipalsV2")
	}

	var r0 *iot.ListThingPrincipalsV2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingPrincipalsV2Input, ...func(*iot.Options)) (*iot.ListThingPrincipalsV2Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingPrincipalsV2Input, ...func(*iot.Options)) *iot.ListThingPrincipalsV2Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingPrincipalsV2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingPrincipalsV2Input, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingRegistrationTaskReports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingRegistrationTaskReports(ctx context.Context, params *iot.ListThingRegistrationTaskReportsInput, optFns ...func(*iot.Options)) (*iot.ListThingRegistrationTaskReportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingRegistrationTaskReports")
	}

	var r0 *iot.ListThingRegistrationTaskReportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingRegistrationTaskReportsInput, ...func(*iot.Options)) (*iot.ListThingRegistrationTaskReportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingRegistrationTaskReportsInput, ...func(*iot.Options)) *iot.ListThingRegistrationTaskReportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingRegistrationTaskReportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingRegistrationTaskReportsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingRegistrationTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingRegistrationTasks(ctx context.Context, params *iot.ListThingRegistrationTasksInput, optFns ...func(*iot.Options)) (*iot.ListThingRegistrationTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingRegistrationTasks")
	}

	var r0 *iot.ListThingRegistrationTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingRegistrationTasksInput, ...func(*iot.Options)) (*iot.ListThingRegistrationTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingRegistrationTasksInput, ...func(*iot.Options)) *iot.ListThingRegistrationTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingRegistrationTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingRegistrationTasksInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingTypes(ctx context.Context, params *iot.ListThingTypesInput, optFns ...func(*iot.Options)) (*iot.ListThingTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingTypes")
	}

	var r0 *iot.ListThingTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingTypesInput, ...func(*iot.Options)) (*iot.ListThingTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingTypesInput, ...func(*iot.Options)) *iot.ListThingTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingTypesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThings(ctx context.Context, params *iot.ListThingsInput, optFns ...func(*iot.Options)) (*iot.ListThingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThings")
	}

	var r0 *iot.ListThingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingsInput, ...func(*iot.Options)) (*iot.ListThingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingsInput, ...func(*iot.Options)) *iot.ListThingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingsInBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingsInBillingGroup(ctx context.Context, params *iot.ListThingsInBillingGroupInput, optFns ...func(*iot.Options)) (*iot.ListThingsInBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingsInBillingGroup")
	}

	var r0 *iot.ListThingsInBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingsInBillingGroupInput, ...func(*iot.Options)) (*iot.ListThingsInBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingsInBillingGroupInput, ...func(*iot.Options)) *iot.ListThingsInBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingsInBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingsInBillingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThingsInThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThingsInThingGroup(ctx context.Context, params *iot.ListThingsInThingGroupInput, optFns ...func(*iot.Options)) (*iot.ListThingsInThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThingsInThingGroup")
	}

	var r0 *iot.ListThingsInThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingsInThingGroupInput, ...func(*iot.Options)) (*iot.ListThingsInThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListThingsInThingGroupInput, ...func(*iot.Options)) *iot.ListThingsInThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListThingsInThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListThingsInThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopicRuleDestinations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTopicRuleDestinations(ctx context.Context, params *iot.ListTopicRuleDestinationsInput, optFns ...func(*iot.Options)) (*iot.ListTopicRuleDestinationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopicRuleDestinations")
	}

	var r0 *iot.ListTopicRuleDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTopicRuleDestinationsInput, ...func(*iot.Options)) (*iot.ListTopicRuleDestinationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTopicRuleDestinationsInput, ...func(*iot.Options)) *iot.ListTopicRuleDestinationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListTopicRuleDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListTopicRuleDestinationsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopicRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTopicRules(ctx context.Context, params *iot.ListTopicRulesInput, optFns ...func(*iot.Options)) (*iot.ListTopicRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopicRules")
	}

	var r0 *iot.ListTopicRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTopicRulesInput, ...func(*iot.Options)) (*iot.ListTopicRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListTopicRulesInput, ...func(*iot.Options)) *iot.ListTopicRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListTopicRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListTopicRulesInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListV2LoggingLevels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListV2LoggingLevels(ctx context.Context, params *iot.ListV2LoggingLevelsInput, optFns ...func(*iot.Options)) (*iot.ListV2LoggingLevelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListV2LoggingLevels")
	}

	var r0 *iot.ListV2LoggingLevelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListV2LoggingLevelsInput, ...func(*iot.Options)) (*iot.ListV2LoggingLevelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListV2LoggingLevelsInput, ...func(*iot.Options)) *iot.ListV2LoggingLevelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListV2LoggingLevelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListV2LoggingLevelsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListViolationEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListViolationEvents(ctx context.Context, params *iot.ListViolationEventsInput, optFns ...func(*iot.Options)) (*iot.ListViolationEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListViolationEvents")
	}

	var r0 *iot.ListViolationEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListViolationEventsInput, ...func(*iot.Options)) (*iot.ListViolationEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ListViolationEventsInput, ...func(*iot.Options)) *iot.ListViolationEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ListViolationEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ListViolationEventsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() iot.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 iot.Options
	if rf, ok := ret.Get(0).(func() iot.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(iot.Options)
	}

	return r0
}

// PutVerificationStateOnViolation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutVerificationStateOnViolation(ctx context.Context, params *iot.PutVerificationStateOnViolationInput, optFns ...func(*iot.Options)) (*iot.PutVerificationStateOnViolationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutVerificationStateOnViolation")
	}

	var r0 *iot.PutVerificationStateOnViolationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.PutVerificationStateOnViolationInput, ...func(*iot.Options)) (*iot.PutVerificationStateOnViolationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.PutVerificationStateOnViolationInput, ...func(*iot.Options)) *iot.PutVerificationStateOnViolationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.PutVerificationStateOnViolationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.PutVerificationStateOnViolationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCACertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterCACertificate(ctx context.Context, params *iot.RegisterCACertificateInput, optFns ...func(*iot.Options)) (*iot.RegisterCACertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCACertificate")
	}

	var r0 *iot.RegisterCACertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RegisterCACertificateInput, ...func(*iot.Options)) (*iot.RegisterCACertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RegisterCACertificateInput, ...func(*iot.Options)) *iot.RegisterCACertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.RegisterCACertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.RegisterCACertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterCertificate(ctx context.Context, params *iot.RegisterCertificateInput, optFns ...func(*iot.Options)) (*iot.RegisterCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCertificate")
	}

	var r0 *iot.RegisterCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RegisterCertificateInput, ...func(*iot.Options)) (*iot.RegisterCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RegisterCertificateInput, ...func(*iot.Options)) *iot.RegisterCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.RegisterCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.RegisterCertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterCertificateWithoutCA provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterCertificateWithoutCA(ctx context.Context, params *iot.RegisterCertificateWithoutCAInput, optFns ...func(*iot.Options)) (*iot.RegisterCertificateWithoutCAOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCertificateWithoutCA")
	}

	var r0 *iot.RegisterCertificateWithoutCAOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RegisterCertificateWithoutCAInput, ...func(*iot.Options)) (*iot.RegisterCertificateWithoutCAOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RegisterCertificateWithoutCAInput, ...func(*iot.Options)) *iot.RegisterCertificateWithoutCAOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.RegisterCertificateWithoutCAOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.RegisterCertificateWithoutCAInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterThing(ctx context.Context, params *iot.RegisterThingInput, optFns ...func(*iot.Options)) (*iot.RegisterThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterThing")
	}

	var r0 *iot.RegisterThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RegisterThingInput, ...func(*iot.Options)) (*iot.RegisterThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RegisterThingInput, ...func(*iot.Options)) *iot.RegisterThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.RegisterThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.RegisterThingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectCertificateTransfer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectCertificateTransfer(ctx context.Context, params *iot.RejectCertificateTransferInput, optFns ...func(*iot.Options)) (*iot.RejectCertificateTransferOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectCertificateTransfer")
	}

	var r0 *iot.RejectCertificateTransferOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RejectCertificateTransferInput, ...func(*iot.Options)) (*iot.RejectCertificateTransferOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RejectCertificateTransferInput, ...func(*iot.Options)) *iot.RejectCertificateTransferOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.RejectCertificateTransferOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.RejectCertificateTransferInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveThingFromBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveThingFromBillingGroup(ctx context.Context, params *iot.RemoveThingFromBillingGroupInput, optFns ...func(*iot.Options)) (*iot.RemoveThingFromBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveThingFromBillingGroup")
	}

	var r0 *iot.RemoveThingFromBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RemoveThingFromBillingGroupInput, ...func(*iot.Options)) (*iot.RemoveThingFromBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RemoveThingFromBillingGroupInput, ...func(*iot.Options)) *iot.RemoveThingFromBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.RemoveThingFromBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.RemoveThingFromBillingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveThingFromThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveThingFromThingGroup(ctx context.Context, params *iot.RemoveThingFromThingGroupInput, optFns ...func(*iot.Options)) (*iot.RemoveThingFromThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveThingFromThingGroup")
	}

	var r0 *iot.RemoveThingFromThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RemoveThingFromThingGroupInput, ...func(*iot.Options)) (*iot.RemoveThingFromThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.RemoveThingFromThingGroupInput, ...func(*iot.Options)) *iot.RemoveThingFromThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.RemoveThingFromThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.RemoveThingFromThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplaceTopicRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReplaceTopicRule(ctx context.Context, params *iot.ReplaceTopicRuleInput, optFns ...func(*iot.Options)) (*iot.ReplaceTopicRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceTopicRule")
	}

	var r0 *iot.ReplaceTopicRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ReplaceTopicRuleInput, ...func(*iot.Options)) (*iot.ReplaceTopicRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ReplaceTopicRuleInput, ...func(*iot.Options)) *iot.ReplaceTopicRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ReplaceTopicRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ReplaceTopicRuleInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchIndex(ctx context.Context, params *iot.SearchIndexInput, optFns ...func(*iot.Options)) (*iot.SearchIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchIndex")
	}

	var r0 *iot.SearchIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SearchIndexInput, ...func(*iot.Options)) (*iot.SearchIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SearchIndexInput, ...func(*iot.Options)) *iot.SearchIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.SearchIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.SearchIndexInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetDefaultAuthorizer(ctx context.Context, params *iot.SetDefaultAuthorizerInput, optFns ...func(*iot.Options)) (*iot.SetDefaultAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultAuthorizer")
	}

	var r0 *iot.SetDefaultAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetDefaultAuthorizerInput, ...func(*iot.Options)) (*iot.SetDefaultAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetDefaultAuthorizerInput, ...func(*iot.Options)) *iot.SetDefaultAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.SetDefaultAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.SetDefaultAuthorizerInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultPolicyVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetDefaultPolicyVersion(ctx context.Context, params *iot.SetDefaultPolicyVersionInput, optFns ...func(*iot.Options)) (*iot.SetDefaultPolicyVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultPolicyVersion")
	}

	var r0 *iot.SetDefaultPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetDefaultPolicyVersionInput, ...func(*iot.Options)) (*iot.SetDefaultPolicyVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetDefaultPolicyVersionInput, ...func(*iot.Options)) *iot.SetDefaultPolicyVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.SetDefaultPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.SetDefaultPolicyVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLoggingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetLoggingOptions(ctx context.Context, params *iot.SetLoggingOptionsInput, optFns ...func(*iot.Options)) (*iot.SetLoggingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetLoggingOptions")
	}

	var r0 *iot.SetLoggingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetLoggingOptionsInput, ...func(*iot.Options)) (*iot.SetLoggingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetLoggingOptionsInput, ...func(*iot.Options)) *iot.SetLoggingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.SetLoggingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.SetLoggingOptionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetV2LoggingLevel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetV2LoggingLevel(ctx context.Context, params *iot.SetV2LoggingLevelInput, optFns ...func(*iot.Options)) (*iot.SetV2LoggingLevelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetV2LoggingLevel")
	}

	var r0 *iot.SetV2LoggingLevelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetV2LoggingLevelInput, ...func(*iot.Options)) (*iot.SetV2LoggingLevelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetV2LoggingLevelInput, ...func(*iot.Options)) *iot.SetV2LoggingLevelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.SetV2LoggingLevelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.SetV2LoggingLevelInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetV2LoggingOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetV2LoggingOptions(ctx context.Context, params *iot.SetV2LoggingOptionsInput, optFns ...func(*iot.Options)) (*iot.SetV2LoggingOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetV2LoggingOptions")
	}

	var r0 *iot.SetV2LoggingOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetV2LoggingOptionsInput, ...func(*iot.Options)) (*iot.SetV2LoggingOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.SetV2LoggingOptionsInput, ...func(*iot.Options)) *iot.SetV2LoggingOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.SetV2LoggingOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.SetV2LoggingOptionsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAuditMitigationActionsTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAuditMitigationActionsTask(ctx context.Context, params *iot.StartAuditMitigationActionsTaskInput, optFns ...func(*iot.Options)) (*iot.StartAuditMitigationActionsTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAuditMitigationActionsTask")
	}

	var r0 *iot.StartAuditMitigationActionsTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StartAuditMitigationActionsTaskInput, ...func(*iot.Options)) (*iot.StartAuditMitigationActionsTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StartAuditMitigationActionsTaskInput, ...func(*iot.Options)) *iot.StartAuditMitigationActionsTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.StartAuditMitigationActionsTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.StartAuditMitigationActionsTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDetectMitigationActionsTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDetectMitigationActionsTask(ctx context.Context, params *iot.StartDetectMitigationActionsTaskInput, optFns ...func(*iot.Options)) (*iot.StartDetectMitigationActionsTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDetectMitigationActionsTask")
	}

	var r0 *iot.StartDetectMitigationActionsTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StartDetectMitigationActionsTaskInput, ...func(*iot.Options)) (*iot.StartDetectMitigationActionsTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StartDetectMitigationActionsTaskInput, ...func(*iot.Options)) *iot.StartDetectMitigationActionsTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.StartDetectMitigationActionsTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.StartDetectMitigationActionsTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartOnDemandAuditTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartOnDemandAuditTask(ctx context.Context, params *iot.StartOnDemandAuditTaskInput, optFns ...func(*iot.Options)) (*iot.StartOnDemandAuditTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartOnDemandAuditTask")
	}

	var r0 *iot.StartOnDemandAuditTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StartOnDemandAuditTaskInput, ...func(*iot.Options)) (*iot.StartOnDemandAuditTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StartOnDemandAuditTaskInput, ...func(*iot.Options)) *iot.StartOnDemandAuditTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.StartOnDemandAuditTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.StartOnDemandAuditTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartThingRegistrationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartThingRegistrationTask(ctx context.Context, params *iot.StartThingRegistrationTaskInput, optFns ...func(*iot.Options)) (*iot.StartThingRegistrationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartThingRegistrationTask")
	}

	var r0 *iot.StartThingRegistrationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StartThingRegistrationTaskInput, ...func(*iot.Options)) (*iot.StartThingRegistrationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StartThingRegistrationTaskInput, ...func(*iot.Options)) *iot.StartThingRegistrationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.StartThingRegistrationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.StartThingRegistrationTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopThingRegistrationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopThingRegistrationTask(ctx context.Context, params *iot.StopThingRegistrationTaskInput, optFns ...func(*iot.Options)) (*iot.StopThingRegistrationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopThingRegistrationTask")
	}

	var r0 *iot.StopThingRegistrationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StopThingRegistrationTaskInput, ...func(*iot.Options)) (*iot.StopThingRegistrationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.StopThingRegistrationTaskInput, ...func(*iot.Options)) *iot.StopThingRegistrationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.StopThingRegistrationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.StopThingRegistrationTaskInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *iot.TagResourceInput, optFns ...func(*iot.Options)) (*iot.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *iot.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.TagResourceInput, ...func(*iot.Options)) (*iot.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.TagResourceInput, ...func(*iot.Options)) *iot.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.TagResourceInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestAuthorization(ctx context.Context, params *iot.TestAuthorizationInput, optFns ...func(*iot.Options)) (*iot.TestAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestAuthorization")
	}

	var r0 *iot.TestAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.TestAuthorizationInput, ...func(*iot.Options)) (*iot.TestAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.TestAuthorizationInput, ...func(*iot.Options)) *iot.TestAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.TestAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.TestAuthorizationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestInvokeAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestInvokeAuthorizer(ctx context.Context, params *iot.TestInvokeAuthorizerInput, optFns ...func(*iot.Options)) (*iot.TestInvokeAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestInvokeAuthorizer")
	}

	var r0 *iot.TestInvokeAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.TestInvokeAuthorizerInput, ...func(*iot.Options)) (*iot.TestInvokeAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.TestInvokeAuthorizerInput, ...func(*iot.Options)) *iot.TestInvokeAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.TestInvokeAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.TestInvokeAuthorizerInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TransferCertificate(ctx context.Context, params *iot.TransferCertificateInput, optFns ...func(*iot.Options)) (*iot.TransferCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TransferCertificate")
	}

	var r0 *iot.TransferCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.TransferCertificateInput, ...func(*iot.Options)) (*iot.TransferCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.TransferCertificateInput, ...func(*iot.Options)) *iot.TransferCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.TransferCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.TransferCertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *iot.UntagResourceInput, optFns ...func(*iot.Options)) (*iot.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *iot.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UntagResourceInput, ...func(*iot.Options)) (*iot.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UntagResourceInput, ...func(*iot.Options)) *iot.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UntagResourceInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountAuditConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccountAuditConfiguration(ctx context.Context, params *iot.UpdateAccountAuditConfigurationInput, optFns ...func(*iot.Options)) (*iot.UpdateAccountAuditConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountAuditConfiguration")
	}

	var r0 *iot.UpdateAccountAuditConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateAccountAuditConfigurationInput, ...func(*iot.Options)) (*iot.UpdateAccountAuditConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateAccountAuditConfigurationInput, ...func(*iot.Options)) *iot.UpdateAccountAuditConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateAccountAuditConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateAccountAuditConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuditSuppression provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAuditSuppression(ctx context.Context, params *iot.UpdateAuditSuppressionInput, optFns ...func(*iot.Options)) (*iot.UpdateAuditSuppressionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuditSuppression")
	}

	var r0 *iot.UpdateAuditSuppressionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateAuditSuppressionInput, ...func(*iot.Options)) (*iot.UpdateAuditSuppressionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateAuditSuppressionInput, ...func(*iot.Options)) *iot.UpdateAuditSuppressionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateAuditSuppressionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateAuditSuppressionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAuthorizer(ctx context.Context, params *iot.UpdateAuthorizerInput, optFns ...func(*iot.Options)) (*iot.UpdateAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthorizer")
	}

	var r0 *iot.UpdateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateAuthorizerInput, ...func(*iot.Options)) (*iot.UpdateAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateAuthorizerInput, ...func(*iot.Options)) *iot.UpdateAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateAuthorizerInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBillingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBillingGroup(ctx context.Context, params *iot.UpdateBillingGroupInput, optFns ...func(*iot.Options)) (*iot.UpdateBillingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBillingGroup")
	}

	var r0 *iot.UpdateBillingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateBillingGroupInput, ...func(*iot.Options)) (*iot.UpdateBillingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateBillingGroupInput, ...func(*iot.Options)) *iot.UpdateBillingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateBillingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateBillingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCACertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCACertificate(ctx context.Context, params *iot.UpdateCACertificateInput, optFns ...func(*iot.Options)) (*iot.UpdateCACertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCACertificate")
	}

	var r0 *iot.UpdateCACertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCACertificateInput, ...func(*iot.Options)) (*iot.UpdateCACertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCACertificateInput, ...func(*iot.Options)) *iot.UpdateCACertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateCACertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateCACertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCertificate(ctx context.Context, params *iot.UpdateCertificateInput, optFns ...func(*iot.Options)) (*iot.UpdateCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificate")
	}

	var r0 *iot.UpdateCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCertificateInput, ...func(*iot.Options)) (*iot.UpdateCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCertificateInput, ...func(*iot.Options)) *iot.UpdateCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateCertificateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCertificateProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCertificateProvider(ctx context.Context, params *iot.UpdateCertificateProviderInput, optFns ...func(*iot.Options)) (*iot.UpdateCertificateProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificateProvider")
	}

	var r0 *iot.UpdateCertificateProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCertificateProviderInput, ...func(*iot.Options)) (*iot.UpdateCertificateProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCertificateProviderInput, ...func(*iot.Options)) *iot.UpdateCertificateProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateCertificateProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateCertificateProviderInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCommand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCommand(ctx context.Context, params *iot.UpdateCommandInput, optFns ...func(*iot.Options)) (*iot.UpdateCommandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCommand")
	}

	var r0 *iot.UpdateCommandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCommandInput, ...func(*iot.Options)) (*iot.UpdateCommandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCommandInput, ...func(*iot.Options)) *iot.UpdateCommandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateCommandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateCommandInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCustomMetric(ctx context.Context, params *iot.UpdateCustomMetricInput, optFns ...func(*iot.Options)) (*iot.UpdateCustomMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomMetric")
	}

	var r0 *iot.UpdateCustomMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCustomMetricInput, ...func(*iot.Options)) (*iot.UpdateCustomMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateCustomMetricInput, ...func(*iot.Options)) *iot.UpdateCustomMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateCustomMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateCustomMetricInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDimension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDimension(ctx context.Context, params *iot.UpdateDimensionInput, optFns ...func(*iot.Options)) (*iot.UpdateDimensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDimension")
	}

	var r0 *iot.UpdateDimensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateDimensionInput, ...func(*iot.Options)) (*iot.UpdateDimensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateDimensionInput, ...func(*iot.Options)) *iot.UpdateDimensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateDimensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateDimensionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainConfiguration(ctx context.Context, params *iot.UpdateDomainConfigurationInput, optFns ...func(*iot.Options)) (*iot.UpdateDomainConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainConfiguration")
	}

	var r0 *iot.UpdateDomainConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateDomainConfigurationInput, ...func(*iot.Options)) (*iot.UpdateDomainConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateDomainConfigurationInput, ...func(*iot.Options)) *iot.UpdateDomainConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateDomainConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateDomainConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDynamicThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDynamicThingGroup(ctx context.Context, params *iot.UpdateDynamicThingGroupInput, optFns ...func(*iot.Options)) (*iot.UpdateDynamicThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDynamicThingGroup")
	}

	var r0 *iot.UpdateDynamicThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateDynamicThingGroupInput, ...func(*iot.Options)) (*iot.UpdateDynamicThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateDynamicThingGroupInput, ...func(*iot.Options)) *iot.UpdateDynamicThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateDynamicThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateDynamicThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEventConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEventConfigurations(ctx context.Context, params *iot.UpdateEventConfigurationsInput, optFns ...func(*iot.Options)) (*iot.UpdateEventConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEventConfigurations")
	}

	var r0 *iot.UpdateEventConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateEventConfigurationsInput, ...func(*iot.Options)) (*iot.UpdateEventConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateEventConfigurationsInput, ...func(*iot.Options)) *iot.UpdateEventConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateEventConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateEventConfigurationsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFleetMetric provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFleetMetric(ctx context.Context, params *iot.UpdateFleetMetricInput, optFns ...func(*iot.Options)) (*iot.UpdateFleetMetricOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFleetMetric")
	}

	var r0 *iot.UpdateFleetMetricOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateFleetMetricInput, ...func(*iot.Options)) (*iot.UpdateFleetMetricOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateFleetMetricInput, ...func(*iot.Options)) *iot.UpdateFleetMetricOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateFleetMetricOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateFleetMetricInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIndexingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIndexingConfiguration(ctx context.Context, params *iot.UpdateIndexingConfigurationInput, optFns ...func(*iot.Options)) (*iot.UpdateIndexingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIndexingConfiguration")
	}

	var r0 *iot.UpdateIndexingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateIndexingConfigurationInput, ...func(*iot.Options)) (*iot.UpdateIndexingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateIndexingConfigurationInput, ...func(*iot.Options)) *iot.UpdateIndexingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateIndexingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateIndexingConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateJob(ctx context.Context, params *iot.UpdateJobInput, optFns ...func(*iot.Options)) (*iot.UpdateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 *iot.UpdateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateJobInput, ...func(*iot.Options)) (*iot.UpdateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateJobInput, ...func(*iot.Options)) *iot.UpdateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateJobInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMitigationAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMitigationAction(ctx context.Context, params *iot.UpdateMitigationActionInput, optFns ...func(*iot.Options)) (*iot.UpdateMitigationActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMitigationAction")
	}

	var r0 *iot.UpdateMitigationActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateMitigationActionInput, ...func(*iot.Options)) (*iot.UpdateMitigationActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateMitigationActionInput, ...func(*iot.Options)) *iot.UpdateMitigationActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateMitigationActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateMitigationActionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePackage(ctx context.Context, params *iot.UpdatePackageInput, optFns ...func(*iot.Options)) (*iot.UpdatePackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePackage")
	}

	var r0 *iot.UpdatePackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdatePackageInput, ...func(*iot.Options)) (*iot.UpdatePackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdatePackageInput, ...func(*iot.Options)) *iot.UpdatePackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdatePackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdatePackageInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackageConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePackageConfiguration(ctx context.Context, params *iot.UpdatePackageConfigurationInput, optFns ...func(*iot.Options)) (*iot.UpdatePackageConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePackageConfiguration")
	}

	var r0 *iot.UpdatePackageConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdatePackageConfigurationInput, ...func(*iot.Options)) (*iot.UpdatePackageConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdatePackageConfigurationInput, ...func(*iot.Options)) *iot.UpdatePackageConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdatePackageConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdatePackageConfigurationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePackageVersion(ctx context.Context, params *iot.UpdatePackageVersionInput, optFns ...func(*iot.Options)) (*iot.UpdatePackageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePackageVersion")
	}

	var r0 *iot.UpdatePackageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdatePackageVersionInput, ...func(*iot.Options)) (*iot.UpdatePackageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdatePackageVersionInput, ...func(*iot.Options)) *iot.UpdatePackageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdatePackageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdatePackageVersionInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvisioningTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProvisioningTemplate(ctx context.Context, params *iot.UpdateProvisioningTemplateInput, optFns ...func(*iot.Options)) (*iot.UpdateProvisioningTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvisioningTemplate")
	}

	var r0 *iot.UpdateProvisioningTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateProvisioningTemplateInput, ...func(*iot.Options)) (*iot.UpdateProvisioningTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateProvisioningTemplateInput, ...func(*iot.Options)) *iot.UpdateProvisioningTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateProvisioningTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateProvisioningTemplateInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoleAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoleAlias(ctx context.Context, params *iot.UpdateRoleAliasInput, optFns ...func(*iot.Options)) (*iot.UpdateRoleAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleAlias")
	}

	var r0 *iot.UpdateRoleAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateRoleAliasInput, ...func(*iot.Options)) (*iot.UpdateRoleAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateRoleAliasInput, ...func(*iot.Options)) *iot.UpdateRoleAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateRoleAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateRoleAliasInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScheduledAudit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateScheduledAudit(ctx context.Context, params *iot.UpdateScheduledAuditInput, optFns ...func(*iot.Options)) (*iot.UpdateScheduledAuditOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScheduledAudit")
	}

	var r0 *iot.UpdateScheduledAuditOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateScheduledAuditInput, ...func(*iot.Options)) (*iot.UpdateScheduledAuditOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateScheduledAuditInput, ...func(*iot.Options)) *iot.UpdateScheduledAuditOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateScheduledAuditOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateScheduledAuditInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSecurityProfile(ctx context.Context, params *iot.UpdateSecurityProfileInput, optFns ...func(*iot.Options)) (*iot.UpdateSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecurityProfile")
	}

	var r0 *iot.UpdateSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateSecurityProfileInput, ...func(*iot.Options)) (*iot.UpdateSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateSecurityProfileInput, ...func(*iot.Options)) *iot.UpdateSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateSecurityProfileInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStream(ctx context.Context, params *iot.UpdateStreamInput, optFns ...func(*iot.Options)) (*iot.UpdateStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStream")
	}

	var r0 *iot.UpdateStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateStreamInput, ...func(*iot.Options)) (*iot.UpdateStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateStreamInput, ...func(*iot.Options)) *iot.UpdateStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateStreamInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThing(ctx context.Context, params *iot.UpdateThingInput, optFns ...func(*iot.Options)) (*iot.UpdateThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThing")
	}

	var r0 *iot.UpdateThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateThingInput, ...func(*iot.Options)) (*iot.UpdateThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateThingInput, ...func(*iot.Options)) *iot.UpdateThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateThingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThingGroup(ctx context.Context, params *iot.UpdateThingGroupInput, optFns ...func(*iot.Options)) (*iot.UpdateThingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingGroup")
	}

	var r0 *iot.UpdateThingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateThingGroupInput, ...func(*iot.Options)) (*iot.UpdateThingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateThingGroupInput, ...func(*iot.Options)) *iot.UpdateThingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateThingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateThingGroupInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThingGroupsForThing provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThingGroupsForThing(ctx context.Context, params *iot.UpdateThingGroupsForThingInput, optFns ...func(*iot.Options)) (*iot.UpdateThingGroupsForThingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingGroupsForThing")
	}

	var r0 *iot.UpdateThingGroupsForThingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateThingGroupsForThingInput, ...func(*iot.Options)) (*iot.UpdateThingGroupsForThingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateThingGroupsForThingInput, ...func(*iot.Options)) *iot.UpdateThingGroupsForThingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateThingGroupsForThingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateThingGroupsForThingInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThingType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThingType(ctx context.Context, params *iot.UpdateThingTypeInput, optFns ...func(*iot.Options)) (*iot.UpdateThingTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingType")
	}

	var r0 *iot.UpdateThingTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateThingTypeInput, ...func(*iot.Options)) (*iot.UpdateThingTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateThingTypeInput, ...func(*iot.Options)) *iot.UpdateThingTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateThingTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateThingTypeInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopicRuleDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTopicRuleDestination(ctx context.Context, params *iot.UpdateTopicRuleDestinationInput, optFns ...func(*iot.Options)) (*iot.UpdateTopicRuleDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTopicRuleDestination")
	}

	var r0 *iot.UpdateTopicRuleDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateTopicRuleDestinationInput, ...func(*iot.Options)) (*iot.UpdateTopicRuleDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.UpdateTopicRuleDestinationInput, ...func(*iot.Options)) *iot.UpdateTopicRuleDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.UpdateTopicRuleDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.UpdateTopicRuleDestinationInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateSecurityProfileBehaviors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ValidateSecurityProfileBehaviors(ctx context.Context, params *iot.ValidateSecurityProfileBehaviorsInput, optFns ...func(*iot.Options)) (*iot.ValidateSecurityProfileBehaviorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSecurityProfileBehaviors")
	}

	var r0 *iot.ValidateSecurityProfileBehaviorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ValidateSecurityProfileBehaviorsInput, ...func(*iot.Options)) (*iot.ValidateSecurityProfileBehaviorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *iot.ValidateSecurityProfileBehaviorsInput, ...func(*iot.Options)) *iot.ValidateSecurityProfileBehaviorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*iot.ValidateSecurityProfileBehaviorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *iot.ValidateSecurityProfileBehaviorsInput, ...func(*iot.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
