// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	qapps "github.com/aws/aws-sdk-go-v2/service/qapps"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateLibraryItemReview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateLibraryItemReview(ctx context.Context, params *qapps.AssociateLibraryItemReviewInput, optFns ...func(*qapps.Options)) (*qapps.AssociateLibraryItemReviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateLibraryItemReview")
	}

	var r0 *qapps.AssociateLibraryItemReviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.AssociateLibraryItemReviewInput, ...func(*qapps.Options)) (*qapps.AssociateLibraryItemReviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.AssociateLibraryItemReviewInput, ...func(*qapps.Options)) *qapps.AssociateLibraryItemReviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.AssociateLibraryItemReviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.AssociateLibraryItemReviewInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateQAppWithUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateQAppWithUser(ctx context.Context, params *qapps.AssociateQAppWithUserInput, optFns ...func(*qapps.Options)) (*qapps.AssociateQAppWithUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateQAppWithUser")
	}

	var r0 *qapps.AssociateQAppWithUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.AssociateQAppWithUserInput, ...func(*qapps.Options)) (*qapps.AssociateQAppWithUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.AssociateQAppWithUserInput, ...func(*qapps.Options)) *qapps.AssociateQAppWithUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.AssociateQAppWithUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.AssociateQAppWithUserInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCreateCategory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateCategory(ctx context.Context, params *qapps.BatchCreateCategoryInput, optFns ...func(*qapps.Options)) (*qapps.BatchCreateCategoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateCategory")
	}

	var r0 *qapps.BatchCreateCategoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.BatchCreateCategoryInput, ...func(*qapps.Options)) (*qapps.BatchCreateCategoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.BatchCreateCategoryInput, ...func(*qapps.Options)) *qapps.BatchCreateCategoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.BatchCreateCategoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.BatchCreateCategoryInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteCategory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteCategory(ctx context.Context, params *qapps.BatchDeleteCategoryInput, optFns ...func(*qapps.Options)) (*qapps.BatchDeleteCategoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteCategory")
	}

	var r0 *qapps.BatchDeleteCategoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.BatchDeleteCategoryInput, ...func(*qapps.Options)) (*qapps.BatchDeleteCategoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.BatchDeleteCategoryInput, ...func(*qapps.Options)) *qapps.BatchDeleteCategoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.BatchDeleteCategoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.BatchDeleteCategoryInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateCategory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateCategory(ctx context.Context, params *qapps.BatchUpdateCategoryInput, optFns ...func(*qapps.Options)) (*qapps.BatchUpdateCategoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateCategory")
	}

	var r0 *qapps.BatchUpdateCategoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.BatchUpdateCategoryInput, ...func(*qapps.Options)) (*qapps.BatchUpdateCategoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.BatchUpdateCategoryInput, ...func(*qapps.Options)) *qapps.BatchUpdateCategoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.BatchUpdateCategoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.BatchUpdateCategoryInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLibraryItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLibraryItem(ctx context.Context, params *qapps.CreateLibraryItemInput, optFns ...func(*qapps.Options)) (*qapps.CreateLibraryItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLibraryItem")
	}

	var r0 *qapps.CreateLibraryItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.CreateLibraryItemInput, ...func(*qapps.Options)) (*qapps.CreateLibraryItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.CreateLibraryItemInput, ...func(*qapps.Options)) *qapps.CreateLibraryItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.CreateLibraryItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.CreateLibraryItemInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePresignedUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePresignedUrl(ctx context.Context, params *qapps.CreatePresignedUrlInput, optFns ...func(*qapps.Options)) (*qapps.CreatePresignedUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePresignedUrl")
	}

	var r0 *qapps.CreatePresignedUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.CreatePresignedUrlInput, ...func(*qapps.Options)) (*qapps.CreatePresignedUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.CreatePresignedUrlInput, ...func(*qapps.Options)) *qapps.CreatePresignedUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.CreatePresignedUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.CreatePresignedUrlInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQApp(ctx context.Context, params *qapps.CreateQAppInput, optFns ...func(*qapps.Options)) (*qapps.CreateQAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQApp")
	}

	var r0 *qapps.CreateQAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.CreateQAppInput, ...func(*qapps.Options)) (*qapps.CreateQAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.CreateQAppInput, ...func(*qapps.Options)) *qapps.CreateQAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.CreateQAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.CreateQAppInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLibraryItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLibraryItem(ctx context.Context, params *qapps.DeleteLibraryItemInput, optFns ...func(*qapps.Options)) (*qapps.DeleteLibraryItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLibraryItem")
	}

	var r0 *qapps.DeleteLibraryItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DeleteLibraryItemInput, ...func(*qapps.Options)) (*qapps.DeleteLibraryItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DeleteLibraryItemInput, ...func(*qapps.Options)) *qapps.DeleteLibraryItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.DeleteLibraryItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.DeleteLibraryItemInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQApp(ctx context.Context, params *qapps.DeleteQAppInput, optFns ...func(*qapps.Options)) (*qapps.DeleteQAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQApp")
	}

	var r0 *qapps.DeleteQAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DeleteQAppInput, ...func(*qapps.Options)) (*qapps.DeleteQAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DeleteQAppInput, ...func(*qapps.Options)) *qapps.DeleteQAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.DeleteQAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.DeleteQAppInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQAppPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeQAppPermissions(ctx context.Context, params *qapps.DescribeQAppPermissionsInput, optFns ...func(*qapps.Options)) (*qapps.DescribeQAppPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeQAppPermissions")
	}

	var r0 *qapps.DescribeQAppPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DescribeQAppPermissionsInput, ...func(*qapps.Options)) (*qapps.DescribeQAppPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DescribeQAppPermissionsInput, ...func(*qapps.Options)) *qapps.DescribeQAppPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.DescribeQAppPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.DescribeQAppPermissionsInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateLibraryItemReview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateLibraryItemReview(ctx context.Context, params *qapps.DisassociateLibraryItemReviewInput, optFns ...func(*qapps.Options)) (*qapps.DisassociateLibraryItemReviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateLibraryItemReview")
	}

	var r0 *qapps.DisassociateLibraryItemReviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DisassociateLibraryItemReviewInput, ...func(*qapps.Options)) (*qapps.DisassociateLibraryItemReviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DisassociateLibraryItemReviewInput, ...func(*qapps.Options)) *qapps.DisassociateLibraryItemReviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.DisassociateLibraryItemReviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.DisassociateLibraryItemReviewInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateQAppFromUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateQAppFromUser(ctx context.Context, params *qapps.DisassociateQAppFromUserInput, optFns ...func(*qapps.Options)) (*qapps.DisassociateQAppFromUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateQAppFromUser")
	}

	var r0 *qapps.DisassociateQAppFromUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DisassociateQAppFromUserInput, ...func(*qapps.Options)) (*qapps.DisassociateQAppFromUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.DisassociateQAppFromUserInput, ...func(*qapps.Options)) *qapps.DisassociateQAppFromUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.DisassociateQAppFromUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.DisassociateQAppFromUserInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportQAppSessionData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportQAppSessionData(ctx context.Context, params *qapps.ExportQAppSessionDataInput, optFns ...func(*qapps.Options)) (*qapps.ExportQAppSessionDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportQAppSessionData")
	}

	var r0 *qapps.ExportQAppSessionDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ExportQAppSessionDataInput, ...func(*qapps.Options)) (*qapps.ExportQAppSessionDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ExportQAppSessionDataInput, ...func(*qapps.Options)) *qapps.ExportQAppSessionDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.ExportQAppSessionDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.ExportQAppSessionDataInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLibraryItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLibraryItem(ctx context.Context, params *qapps.GetLibraryItemInput, optFns ...func(*qapps.Options)) (*qapps.GetLibraryItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLibraryItem")
	}

	var r0 *qapps.GetLibraryItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.GetLibraryItemInput, ...func(*qapps.Options)) (*qapps.GetLibraryItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.GetLibraryItemInput, ...func(*qapps.Options)) *qapps.GetLibraryItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.GetLibraryItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.GetLibraryItemInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQApp(ctx context.Context, params *qapps.GetQAppInput, optFns ...func(*qapps.Options)) (*qapps.GetQAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQApp")
	}

	var r0 *qapps.GetQAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.GetQAppInput, ...func(*qapps.Options)) (*qapps.GetQAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.GetQAppInput, ...func(*qapps.Options)) *qapps.GetQAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.GetQAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.GetQAppInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQAppSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQAppSession(ctx context.Context, params *qapps.GetQAppSessionInput, optFns ...func(*qapps.Options)) (*qapps.GetQAppSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQAppSession")
	}

	var r0 *qapps.GetQAppSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.GetQAppSessionInput, ...func(*qapps.Options)) (*qapps.GetQAppSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.GetQAppSessionInput, ...func(*qapps.Options)) *qapps.GetQAppSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.GetQAppSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.GetQAppSessionInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQAppSessionMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQAppSessionMetadata(ctx context.Context, params *qapps.GetQAppSessionMetadataInput, optFns ...func(*qapps.Options)) (*qapps.GetQAppSessionMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQAppSessionMetadata")
	}

	var r0 *qapps.GetQAppSessionMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.GetQAppSessionMetadataInput, ...func(*qapps.Options)) (*qapps.GetQAppSessionMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.GetQAppSessionMetadataInput, ...func(*qapps.Options)) *qapps.GetQAppSessionMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.GetQAppSessionMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.GetQAppSessionMetadataInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportDocument provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportDocument(ctx context.Context, params *qapps.ImportDocumentInput, optFns ...func(*qapps.Options)) (*qapps.ImportDocumentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportDocument")
	}

	var r0 *qapps.ImportDocumentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ImportDocumentInput, ...func(*qapps.Options)) (*qapps.ImportDocumentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ImportDocumentInput, ...func(*qapps.Options)) *qapps.ImportDocumentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.ImportDocumentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.ImportDocumentInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCategories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCategories(ctx context.Context, params *qapps.ListCategoriesInput, optFns ...func(*qapps.Options)) (*qapps.ListCategoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCategories")
	}

	var r0 *qapps.ListCategoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListCategoriesInput, ...func(*qapps.Options)) (*qapps.ListCategoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListCategoriesInput, ...func(*qapps.Options)) *qapps.ListCategoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.ListCategoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.ListCategoriesInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLibraryItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLibraryItems(ctx context.Context, params *qapps.ListLibraryItemsInput, optFns ...func(*qapps.Options)) (*qapps.ListLibraryItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLibraryItems")
	}

	var r0 *qapps.ListLibraryItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListLibraryItemsInput, ...func(*qapps.Options)) (*qapps.ListLibraryItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListLibraryItemsInput, ...func(*qapps.Options)) *qapps.ListLibraryItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.ListLibraryItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.ListLibraryItemsInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQAppSessionData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQAppSessionData(ctx context.Context, params *qapps.ListQAppSessionDataInput, optFns ...func(*qapps.Options)) (*qapps.ListQAppSessionDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQAppSessionData")
	}

	var r0 *qapps.ListQAppSessionDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListQAppSessionDataInput, ...func(*qapps.Options)) (*qapps.ListQAppSessionDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListQAppSessionDataInput, ...func(*qapps.Options)) *qapps.ListQAppSessionDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.ListQAppSessionDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.ListQAppSessionDataInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQApps(ctx context.Context, params *qapps.ListQAppsInput, optFns ...func(*qapps.Options)) (*qapps.ListQAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQApps")
	}

	var r0 *qapps.ListQAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListQAppsInput, ...func(*qapps.Options)) (*qapps.ListQAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListQAppsInput, ...func(*qapps.Options)) *qapps.ListQAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.ListQAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.ListQAppsInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *qapps.ListTagsForResourceInput, optFns ...func(*qapps.Options)) (*qapps.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *qapps.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListTagsForResourceInput, ...func(*qapps.Options)) (*qapps.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.ListTagsForResourceInput, ...func(*qapps.Options)) *qapps.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.ListTagsForResourceInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() qapps.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 qapps.Options
	if rf, ok := ret.Get(0).(func() qapps.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(qapps.Options)
	}

	return r0
}

// PredictQApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PredictQApp(ctx context.Context, params *qapps.PredictQAppInput, optFns ...func(*qapps.Options)) (*qapps.PredictQAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PredictQApp")
	}

	var r0 *qapps.PredictQAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.PredictQAppInput, ...func(*qapps.Options)) (*qapps.PredictQAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.PredictQAppInput, ...func(*qapps.Options)) *qapps.PredictQAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.PredictQAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.PredictQAppInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartQAppSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartQAppSession(ctx context.Context, params *qapps.StartQAppSessionInput, optFns ...func(*qapps.Options)) (*qapps.StartQAppSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartQAppSession")
	}

	var r0 *qapps.StartQAppSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.StartQAppSessionInput, ...func(*qapps.Options)) (*qapps.StartQAppSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.StartQAppSessionInput, ...func(*qapps.Options)) *qapps.StartQAppSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.StartQAppSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.StartQAppSessionInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQAppSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopQAppSession(ctx context.Context, params *qapps.StopQAppSessionInput, optFns ...func(*qapps.Options)) (*qapps.StopQAppSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopQAppSession")
	}

	var r0 *qapps.StopQAppSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.StopQAppSessionInput, ...func(*qapps.Options)) (*qapps.StopQAppSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.StopQAppSessionInput, ...func(*qapps.Options)) *qapps.StopQAppSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.StopQAppSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.StopQAppSessionInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *qapps.TagResourceInput, optFns ...func(*qapps.Options)) (*qapps.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *qapps.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.TagResourceInput, ...func(*qapps.Options)) (*qapps.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.TagResourceInput, ...func(*qapps.Options)) *qapps.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.TagResourceInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *qapps.UntagResourceInput, optFns ...func(*qapps.Options)) (*qapps.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *qapps.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UntagResourceInput, ...func(*qapps.Options)) (*qapps.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UntagResourceInput, ...func(*qapps.Options)) *qapps.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.UntagResourceInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLibraryItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLibraryItem(ctx context.Context, params *qapps.UpdateLibraryItemInput, optFns ...func(*qapps.Options)) (*qapps.UpdateLibraryItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLibraryItem")
	}

	var r0 *qapps.UpdateLibraryItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateLibraryItemInput, ...func(*qapps.Options)) (*qapps.UpdateLibraryItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateLibraryItemInput, ...func(*qapps.Options)) *qapps.UpdateLibraryItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.UpdateLibraryItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.UpdateLibraryItemInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLibraryItemMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLibraryItemMetadata(ctx context.Context, params *qapps.UpdateLibraryItemMetadataInput, optFns ...func(*qapps.Options)) (*qapps.UpdateLibraryItemMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLibraryItemMetadata")
	}

	var r0 *qapps.UpdateLibraryItemMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateLibraryItemMetadataInput, ...func(*qapps.Options)) (*qapps.UpdateLibraryItemMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateLibraryItemMetadataInput, ...func(*qapps.Options)) *qapps.UpdateLibraryItemMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.UpdateLibraryItemMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.UpdateLibraryItemMetadataInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQApp(ctx context.Context, params *qapps.UpdateQAppInput, optFns ...func(*qapps.Options)) (*qapps.UpdateQAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQApp")
	}

	var r0 *qapps.UpdateQAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateQAppInput, ...func(*qapps.Options)) (*qapps.UpdateQAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateQAppInput, ...func(*qapps.Options)) *qapps.UpdateQAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.UpdateQAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.UpdateQAppInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQAppPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQAppPermissions(ctx context.Context, params *qapps.UpdateQAppPermissionsInput, optFns ...func(*qapps.Options)) (*qapps.UpdateQAppPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQAppPermissions")
	}

	var r0 *qapps.UpdateQAppPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateQAppPermissionsInput, ...func(*qapps.Options)) (*qapps.UpdateQAppPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateQAppPermissionsInput, ...func(*qapps.Options)) *qapps.UpdateQAppPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.UpdateQAppPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.UpdateQAppPermissionsInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQAppSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQAppSession(ctx context.Context, params *qapps.UpdateQAppSessionInput, optFns ...func(*qapps.Options)) (*qapps.UpdateQAppSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQAppSession")
	}

	var r0 *qapps.UpdateQAppSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateQAppSessionInput, ...func(*qapps.Options)) (*qapps.UpdateQAppSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateQAppSessionInput, ...func(*qapps.Options)) *qapps.UpdateQAppSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.UpdateQAppSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.UpdateQAppSessionInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQAppSessionMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQAppSessionMetadata(ctx context.Context, params *qapps.UpdateQAppSessionMetadataInput, optFns ...func(*qapps.Options)) (*qapps.UpdateQAppSessionMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQAppSessionMetadata")
	}

	var r0 *qapps.UpdateQAppSessionMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateQAppSessionMetadataInput, ...func(*qapps.Options)) (*qapps.UpdateQAppSessionMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qapps.UpdateQAppSessionMetadataInput, ...func(*qapps.Options)) *qapps.UpdateQAppSessionMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qapps.UpdateQAppSessionMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qapps.UpdateQAppSessionMetadataInput, ...func(*qapps.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
