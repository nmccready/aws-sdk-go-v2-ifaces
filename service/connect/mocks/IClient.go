// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	connect "github.com/aws/aws-sdk-go-v2/service/connect"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ActivateEvaluationForm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateEvaluationForm(ctx context.Context, params *connect.ActivateEvaluationFormInput, optFns ...func(*connect.Options)) (*connect.ActivateEvaluationFormOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateEvaluationForm")
	}

	var r0 *connect.ActivateEvaluationFormOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ActivateEvaluationFormInput, ...func(*connect.Options)) (*connect.ActivateEvaluationFormOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ActivateEvaluationFormInput, ...func(*connect.Options)) *connect.ActivateEvaluationFormOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ActivateEvaluationFormOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ActivateEvaluationFormInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateAnalyticsDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateAnalyticsDataSet(ctx context.Context, params *connect.AssociateAnalyticsDataSetInput, optFns ...func(*connect.Options)) (*connect.AssociateAnalyticsDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateAnalyticsDataSet")
	}

	var r0 *connect.AssociateAnalyticsDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateAnalyticsDataSetInput, ...func(*connect.Options)) (*connect.AssociateAnalyticsDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateAnalyticsDataSetInput, ...func(*connect.Options)) *connect.AssociateAnalyticsDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateAnalyticsDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateAnalyticsDataSetInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateApprovedOrigin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateApprovedOrigin(ctx context.Context, params *connect.AssociateApprovedOriginInput, optFns ...func(*connect.Options)) (*connect.AssociateApprovedOriginOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateApprovedOrigin")
	}

	var r0 *connect.AssociateApprovedOriginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateApprovedOriginInput, ...func(*connect.Options)) (*connect.AssociateApprovedOriginOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateApprovedOriginInput, ...func(*connect.Options)) *connect.AssociateApprovedOriginOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateApprovedOriginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateApprovedOriginInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateBot(ctx context.Context, params *connect.AssociateBotInput, optFns ...func(*connect.Options)) (*connect.AssociateBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateBot")
	}

	var r0 *connect.AssociateBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateBotInput, ...func(*connect.Options)) (*connect.AssociateBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateBotInput, ...func(*connect.Options)) *connect.AssociateBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateBotInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDefaultVocabulary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateDefaultVocabulary(ctx context.Context, params *connect.AssociateDefaultVocabularyInput, optFns ...func(*connect.Options)) (*connect.AssociateDefaultVocabularyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDefaultVocabulary")
	}

	var r0 *connect.AssociateDefaultVocabularyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateDefaultVocabularyInput, ...func(*connect.Options)) (*connect.AssociateDefaultVocabularyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateDefaultVocabularyInput, ...func(*connect.Options)) *connect.AssociateDefaultVocabularyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateDefaultVocabularyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateDefaultVocabularyInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateFlow(ctx context.Context, params *connect.AssociateFlowInput, optFns ...func(*connect.Options)) (*connect.AssociateFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateFlow")
	}

	var r0 *connect.AssociateFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateFlowInput, ...func(*connect.Options)) (*connect.AssociateFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateFlowInput, ...func(*connect.Options)) *connect.AssociateFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateFlowInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateInstanceStorageConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateInstanceStorageConfig(ctx context.Context, params *connect.AssociateInstanceStorageConfigInput, optFns ...func(*connect.Options)) (*connect.AssociateInstanceStorageConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateInstanceStorageConfig")
	}

	var r0 *connect.AssociateInstanceStorageConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateInstanceStorageConfigInput, ...func(*connect.Options)) (*connect.AssociateInstanceStorageConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateInstanceStorageConfigInput, ...func(*connect.Options)) *connect.AssociateInstanceStorageConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateInstanceStorageConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateInstanceStorageConfigInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateLambdaFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateLambdaFunction(ctx context.Context, params *connect.AssociateLambdaFunctionInput, optFns ...func(*connect.Options)) (*connect.AssociateLambdaFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateLambdaFunction")
	}

	var r0 *connect.AssociateLambdaFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateLambdaFunctionInput, ...func(*connect.Options)) (*connect.AssociateLambdaFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateLambdaFunctionInput, ...func(*connect.Options)) *connect.AssociateLambdaFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateLambdaFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateLambdaFunctionInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateLexBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateLexBot(ctx context.Context, params *connect.AssociateLexBotInput, optFns ...func(*connect.Options)) (*connect.AssociateLexBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateLexBot")
	}

	var r0 *connect.AssociateLexBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateLexBotInput, ...func(*connect.Options)) (*connect.AssociateLexBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateLexBotInput, ...func(*connect.Options)) *connect.AssociateLexBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateLexBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateLexBotInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociatePhoneNumberContactFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePhoneNumberContactFlow(ctx context.Context, params *connect.AssociatePhoneNumberContactFlowInput, optFns ...func(*connect.Options)) (*connect.AssociatePhoneNumberContactFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePhoneNumberContactFlow")
	}

	var r0 *connect.AssociatePhoneNumberContactFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociatePhoneNumberContactFlowInput, ...func(*connect.Options)) (*connect.AssociatePhoneNumberContactFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociatePhoneNumberContactFlowInput, ...func(*connect.Options)) *connect.AssociatePhoneNumberContactFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociatePhoneNumberContactFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociatePhoneNumberContactFlowInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateQueueQuickConnects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateQueueQuickConnects(ctx context.Context, params *connect.AssociateQueueQuickConnectsInput, optFns ...func(*connect.Options)) (*connect.AssociateQueueQuickConnectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateQueueQuickConnects")
	}

	var r0 *connect.AssociateQueueQuickConnectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateQueueQuickConnectsInput, ...func(*connect.Options)) (*connect.AssociateQueueQuickConnectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateQueueQuickConnectsInput, ...func(*connect.Options)) *connect.AssociateQueueQuickConnectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateQueueQuickConnectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateQueueQuickConnectsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateRoutingProfileQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateRoutingProfileQueues(ctx context.Context, params *connect.AssociateRoutingProfileQueuesInput, optFns ...func(*connect.Options)) (*connect.AssociateRoutingProfileQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateRoutingProfileQueues")
	}

	var r0 *connect.AssociateRoutingProfileQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateRoutingProfileQueuesInput, ...func(*connect.Options)) (*connect.AssociateRoutingProfileQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateRoutingProfileQueuesInput, ...func(*connect.Options)) *connect.AssociateRoutingProfileQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateRoutingProfileQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateRoutingProfileQueuesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSecurityKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateSecurityKey(ctx context.Context, params *connect.AssociateSecurityKeyInput, optFns ...func(*connect.Options)) (*connect.AssociateSecurityKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSecurityKey")
	}

	var r0 *connect.AssociateSecurityKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateSecurityKeyInput, ...func(*connect.Options)) (*connect.AssociateSecurityKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateSecurityKeyInput, ...func(*connect.Options)) *connect.AssociateSecurityKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateSecurityKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateSecurityKeyInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTrafficDistributionGroupUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateTrafficDistributionGroupUser(ctx context.Context, params *connect.AssociateTrafficDistributionGroupUserInput, optFns ...func(*connect.Options)) (*connect.AssociateTrafficDistributionGroupUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateTrafficDistributionGroupUser")
	}

	var r0 *connect.AssociateTrafficDistributionGroupUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateTrafficDistributionGroupUserInput, ...func(*connect.Options)) (*connect.AssociateTrafficDistributionGroupUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateTrafficDistributionGroupUserInput, ...func(*connect.Options)) *connect.AssociateTrafficDistributionGroupUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateTrafficDistributionGroupUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateTrafficDistributionGroupUserInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateUserProficiencies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateUserProficiencies(ctx context.Context, params *connect.AssociateUserProficienciesInput, optFns ...func(*connect.Options)) (*connect.AssociateUserProficienciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateUserProficiencies")
	}

	var r0 *connect.AssociateUserProficienciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateUserProficienciesInput, ...func(*connect.Options)) (*connect.AssociateUserProficienciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.AssociateUserProficienciesInput, ...func(*connect.Options)) *connect.AssociateUserProficienciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.AssociateUserProficienciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.AssociateUserProficienciesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchAssociateAnalyticsDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchAssociateAnalyticsDataSet(ctx context.Context, params *connect.BatchAssociateAnalyticsDataSetInput, optFns ...func(*connect.Options)) (*connect.BatchAssociateAnalyticsDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchAssociateAnalyticsDataSet")
	}

	var r0 *connect.BatchAssociateAnalyticsDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchAssociateAnalyticsDataSetInput, ...func(*connect.Options)) (*connect.BatchAssociateAnalyticsDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchAssociateAnalyticsDataSetInput, ...func(*connect.Options)) *connect.BatchAssociateAnalyticsDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.BatchAssociateAnalyticsDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.BatchAssociateAnalyticsDataSetInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDisassociateAnalyticsDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDisassociateAnalyticsDataSet(ctx context.Context, params *connect.BatchDisassociateAnalyticsDataSetInput, optFns ...func(*connect.Options)) (*connect.BatchDisassociateAnalyticsDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDisassociateAnalyticsDataSet")
	}

	var r0 *connect.BatchDisassociateAnalyticsDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchDisassociateAnalyticsDataSetInput, ...func(*connect.Options)) (*connect.BatchDisassociateAnalyticsDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchDisassociateAnalyticsDataSetInput, ...func(*connect.Options)) *connect.BatchDisassociateAnalyticsDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.BatchDisassociateAnalyticsDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.BatchDisassociateAnalyticsDataSetInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetAttachedFileMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetAttachedFileMetadata(ctx context.Context, params *connect.BatchGetAttachedFileMetadataInput, optFns ...func(*connect.Options)) (*connect.BatchGetAttachedFileMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetAttachedFileMetadata")
	}

	var r0 *connect.BatchGetAttachedFileMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchGetAttachedFileMetadataInput, ...func(*connect.Options)) (*connect.BatchGetAttachedFileMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchGetAttachedFileMetadataInput, ...func(*connect.Options)) *connect.BatchGetAttachedFileMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.BatchGetAttachedFileMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.BatchGetAttachedFileMetadataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetFlowAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetFlowAssociation(ctx context.Context, params *connect.BatchGetFlowAssociationInput, optFns ...func(*connect.Options)) (*connect.BatchGetFlowAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetFlowAssociation")
	}

	var r0 *connect.BatchGetFlowAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchGetFlowAssociationInput, ...func(*connect.Options)) (*connect.BatchGetFlowAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchGetFlowAssociationInput, ...func(*connect.Options)) *connect.BatchGetFlowAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.BatchGetFlowAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.BatchGetFlowAssociationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchPutContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchPutContact(ctx context.Context, params *connect.BatchPutContactInput, optFns ...func(*connect.Options)) (*connect.BatchPutContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutContact")
	}

	var r0 *connect.BatchPutContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchPutContactInput, ...func(*connect.Options)) (*connect.BatchPutContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.BatchPutContactInput, ...func(*connect.Options)) *connect.BatchPutContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.BatchPutContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.BatchPutContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClaimPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ClaimPhoneNumber(ctx context.Context, params *connect.ClaimPhoneNumberInput, optFns ...func(*connect.Options)) (*connect.ClaimPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ClaimPhoneNumber")
	}

	var r0 *connect.ClaimPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ClaimPhoneNumberInput, ...func(*connect.Options)) (*connect.ClaimPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ClaimPhoneNumberInput, ...func(*connect.Options)) *connect.ClaimPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ClaimPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ClaimPhoneNumberInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CompleteAttachedFileUpload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CompleteAttachedFileUpload(ctx context.Context, params *connect.CompleteAttachedFileUploadInput, optFns ...func(*connect.Options)) (*connect.CompleteAttachedFileUploadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CompleteAttachedFileUpload")
	}

	var r0 *connect.CompleteAttachedFileUploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CompleteAttachedFileUploadInput, ...func(*connect.Options)) (*connect.CompleteAttachedFileUploadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CompleteAttachedFileUploadInput, ...func(*connect.Options)) *connect.CompleteAttachedFileUploadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CompleteAttachedFileUploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CompleteAttachedFileUploadInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAgentStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAgentStatus(ctx context.Context, params *connect.CreateAgentStatusInput, optFns ...func(*connect.Options)) (*connect.CreateAgentStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAgentStatus")
	}

	var r0 *connect.CreateAgentStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateAgentStatusInput, ...func(*connect.Options)) (*connect.CreateAgentStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateAgentStatusInput, ...func(*connect.Options)) *connect.CreateAgentStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateAgentStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateAgentStatusInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContactFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContactFlow(ctx context.Context, params *connect.CreateContactFlowInput, optFns ...func(*connect.Options)) (*connect.CreateContactFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContactFlow")
	}

	var r0 *connect.CreateContactFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateContactFlowInput, ...func(*connect.Options)) (*connect.CreateContactFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateContactFlowInput, ...func(*connect.Options)) *connect.CreateContactFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateContactFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateContactFlowInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContactFlowModule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContactFlowModule(ctx context.Context, params *connect.CreateContactFlowModuleInput, optFns ...func(*connect.Options)) (*connect.CreateContactFlowModuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContactFlowModule")
	}

	var r0 *connect.CreateContactFlowModuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateContactFlowModuleInput, ...func(*connect.Options)) (*connect.CreateContactFlowModuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateContactFlowModuleInput, ...func(*connect.Options)) *connect.CreateContactFlowModuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateContactFlowModuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateContactFlowModuleInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEvaluationForm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEvaluationForm(ctx context.Context, params *connect.CreateEvaluationFormInput, optFns ...func(*connect.Options)) (*connect.CreateEvaluationFormOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEvaluationForm")
	}

	var r0 *connect.CreateEvaluationFormOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateEvaluationFormInput, ...func(*connect.Options)) (*connect.CreateEvaluationFormOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateEvaluationFormInput, ...func(*connect.Options)) *connect.CreateEvaluationFormOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateEvaluationFormOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateEvaluationFormInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHoursOfOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHoursOfOperation(ctx context.Context, params *connect.CreateHoursOfOperationInput, optFns ...func(*connect.Options)) (*connect.CreateHoursOfOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHoursOfOperation")
	}

	var r0 *connect.CreateHoursOfOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateHoursOfOperationInput, ...func(*connect.Options)) (*connect.CreateHoursOfOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateHoursOfOperationInput, ...func(*connect.Options)) *connect.CreateHoursOfOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateHoursOfOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateHoursOfOperationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstance(ctx context.Context, params *connect.CreateInstanceInput, optFns ...func(*connect.Options)) (*connect.CreateInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstance")
	}

	var r0 *connect.CreateInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateInstanceInput, ...func(*connect.Options)) (*connect.CreateInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateInstanceInput, ...func(*connect.Options)) *connect.CreateInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateInstanceInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegrationAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIntegrationAssociation(ctx context.Context, params *connect.CreateIntegrationAssociationInput, optFns ...func(*connect.Options)) (*connect.CreateIntegrationAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegrationAssociation")
	}

	var r0 *connect.CreateIntegrationAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateIntegrationAssociationInput, ...func(*connect.Options)) (*connect.CreateIntegrationAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateIntegrationAssociationInput, ...func(*connect.Options)) *connect.CreateIntegrationAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateIntegrationAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateIntegrationAssociationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateParticipant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateParticipant(ctx context.Context, params *connect.CreateParticipantInput, optFns ...func(*connect.Options)) (*connect.CreateParticipantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateParticipant")
	}

	var r0 *connect.CreateParticipantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateParticipantInput, ...func(*connect.Options)) (*connect.CreateParticipantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateParticipantInput, ...func(*connect.Options)) *connect.CreateParticipantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateParticipantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateParticipantInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePersistentContactAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePersistentContactAssociation(ctx context.Context, params *connect.CreatePersistentContactAssociationInput, optFns ...func(*connect.Options)) (*connect.CreatePersistentContactAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePersistentContactAssociation")
	}

	var r0 *connect.CreatePersistentContactAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreatePersistentContactAssociationInput, ...func(*connect.Options)) (*connect.CreatePersistentContactAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreatePersistentContactAssociationInput, ...func(*connect.Options)) *connect.CreatePersistentContactAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreatePersistentContactAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreatePersistentContactAssociationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePredefinedAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePredefinedAttribute(ctx context.Context, params *connect.CreatePredefinedAttributeInput, optFns ...func(*connect.Options)) (*connect.CreatePredefinedAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePredefinedAttribute")
	}

	var r0 *connect.CreatePredefinedAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreatePredefinedAttributeInput, ...func(*connect.Options)) (*connect.CreatePredefinedAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreatePredefinedAttributeInput, ...func(*connect.Options)) *connect.CreatePredefinedAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreatePredefinedAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreatePredefinedAttributeInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePrompt provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePrompt(ctx context.Context, params *connect.CreatePromptInput, optFns ...func(*connect.Options)) (*connect.CreatePromptOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePrompt")
	}

	var r0 *connect.CreatePromptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreatePromptInput, ...func(*connect.Options)) (*connect.CreatePromptOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreatePromptInput, ...func(*connect.Options)) *connect.CreatePromptOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreatePromptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreatePromptInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQueue(ctx context.Context, params *connect.CreateQueueInput, optFns ...func(*connect.Options)) (*connect.CreateQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *connect.CreateQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateQueueInput, ...func(*connect.Options)) (*connect.CreateQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateQueueInput, ...func(*connect.Options)) *connect.CreateQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateQueueInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQuickConnect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQuickConnect(ctx context.Context, params *connect.CreateQuickConnectInput, optFns ...func(*connect.Options)) (*connect.CreateQuickConnectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQuickConnect")
	}

	var r0 *connect.CreateQuickConnectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateQuickConnectInput, ...func(*connect.Options)) (*connect.CreateQuickConnectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateQuickConnectInput, ...func(*connect.Options)) *connect.CreateQuickConnectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateQuickConnectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateQuickConnectInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoutingProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoutingProfile(ctx context.Context, params *connect.CreateRoutingProfileInput, optFns ...func(*connect.Options)) (*connect.CreateRoutingProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoutingProfile")
	}

	var r0 *connect.CreateRoutingProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateRoutingProfileInput, ...func(*connect.Options)) (*connect.CreateRoutingProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateRoutingProfileInput, ...func(*connect.Options)) *connect.CreateRoutingProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateRoutingProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateRoutingProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRule(ctx context.Context, params *connect.CreateRuleInput, optFns ...func(*connect.Options)) (*connect.CreateRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRule")
	}

	var r0 *connect.CreateRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateRuleInput, ...func(*connect.Options)) (*connect.CreateRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateRuleInput, ...func(*connect.Options)) *connect.CreateRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateRuleInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSecurityProfile(ctx context.Context, params *connect.CreateSecurityProfileInput, optFns ...func(*connect.Options)) (*connect.CreateSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSecurityProfile")
	}

	var r0 *connect.CreateSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateSecurityProfileInput, ...func(*connect.Options)) (*connect.CreateSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateSecurityProfileInput, ...func(*connect.Options)) *connect.CreateSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateSecurityProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTaskTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTaskTemplate(ctx context.Context, params *connect.CreateTaskTemplateInput, optFns ...func(*connect.Options)) (*connect.CreateTaskTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskTemplate")
	}

	var r0 *connect.CreateTaskTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateTaskTemplateInput, ...func(*connect.Options)) (*connect.CreateTaskTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateTaskTemplateInput, ...func(*connect.Options)) *connect.CreateTaskTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateTaskTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateTaskTemplateInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficDistributionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrafficDistributionGroup(ctx context.Context, params *connect.CreateTrafficDistributionGroupInput, optFns ...func(*connect.Options)) (*connect.CreateTrafficDistributionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrafficDistributionGroup")
	}

	var r0 *connect.CreateTrafficDistributionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateTrafficDistributionGroupInput, ...func(*connect.Options)) (*connect.CreateTrafficDistributionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateTrafficDistributionGroupInput, ...func(*connect.Options)) *connect.CreateTrafficDistributionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateTrafficDistributionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateTrafficDistributionGroupInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUseCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUseCase(ctx context.Context, params *connect.CreateUseCaseInput, optFns ...func(*connect.Options)) (*connect.CreateUseCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUseCase")
	}

	var r0 *connect.CreateUseCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateUseCaseInput, ...func(*connect.Options)) (*connect.CreateUseCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateUseCaseInput, ...func(*connect.Options)) *connect.CreateUseCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateUseCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateUseCaseInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *connect.CreateUserInput, optFns ...func(*connect.Options)) (*connect.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *connect.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateUserInput, ...func(*connect.Options)) (*connect.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateUserInput, ...func(*connect.Options)) *connect.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateUserInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserHierarchyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserHierarchyGroup(ctx context.Context, params *connect.CreateUserHierarchyGroupInput, optFns ...func(*connect.Options)) (*connect.CreateUserHierarchyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserHierarchyGroup")
	}

	var r0 *connect.CreateUserHierarchyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateUserHierarchyGroupInput, ...func(*connect.Options)) (*connect.CreateUserHierarchyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateUserHierarchyGroupInput, ...func(*connect.Options)) *connect.CreateUserHierarchyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateUserHierarchyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateUserHierarchyGroupInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateView(ctx context.Context, params *connect.CreateViewInput, optFns ...func(*connect.Options)) (*connect.CreateViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateView")
	}

	var r0 *connect.CreateViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateViewInput, ...func(*connect.Options)) (*connect.CreateViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateViewInput, ...func(*connect.Options)) *connect.CreateViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateViewInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateViewVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateViewVersion(ctx context.Context, params *connect.CreateViewVersionInput, optFns ...func(*connect.Options)) (*connect.CreateViewVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateViewVersion")
	}

	var r0 *connect.CreateViewVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateViewVersionInput, ...func(*connect.Options)) (*connect.CreateViewVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateViewVersionInput, ...func(*connect.Options)) *connect.CreateViewVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateViewVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateViewVersionInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVocabulary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVocabulary(ctx context.Context, params *connect.CreateVocabularyInput, optFns ...func(*connect.Options)) (*connect.CreateVocabularyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVocabulary")
	}

	var r0 *connect.CreateVocabularyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateVocabularyInput, ...func(*connect.Options)) (*connect.CreateVocabularyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.CreateVocabularyInput, ...func(*connect.Options)) *connect.CreateVocabularyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.CreateVocabularyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.CreateVocabularyInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateEvaluationForm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeactivateEvaluationForm(ctx context.Context, params *connect.DeactivateEvaluationFormInput, optFns ...func(*connect.Options)) (*connect.DeactivateEvaluationFormOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateEvaluationForm")
	}

	var r0 *connect.DeactivateEvaluationFormOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeactivateEvaluationFormInput, ...func(*connect.Options)) (*connect.DeactivateEvaluationFormOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeactivateEvaluationFormInput, ...func(*connect.Options)) *connect.DeactivateEvaluationFormOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeactivateEvaluationFormOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeactivateEvaluationFormInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttachedFile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAttachedFile(ctx context.Context, params *connect.DeleteAttachedFileInput, optFns ...func(*connect.Options)) (*connect.DeleteAttachedFileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttachedFile")
	}

	var r0 *connect.DeleteAttachedFileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteAttachedFileInput, ...func(*connect.Options)) (*connect.DeleteAttachedFileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteAttachedFileInput, ...func(*connect.Options)) *connect.DeleteAttachedFileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteAttachedFileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteAttachedFileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContactEvaluation(ctx context.Context, params *connect.DeleteContactEvaluationInput, optFns ...func(*connect.Options)) (*connect.DeleteContactEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContactEvaluation")
	}

	var r0 *connect.DeleteContactEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteContactEvaluationInput, ...func(*connect.Options)) (*connect.DeleteContactEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteContactEvaluationInput, ...func(*connect.Options)) *connect.DeleteContactEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteContactEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteContactEvaluationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContactFlow(ctx context.Context, params *connect.DeleteContactFlowInput, optFns ...func(*connect.Options)) (*connect.DeleteContactFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContactFlow")
	}

	var r0 *connect.DeleteContactFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteContactFlowInput, ...func(*connect.Options)) (*connect.DeleteContactFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteContactFlowInput, ...func(*connect.Options)) *connect.DeleteContactFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteContactFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteContactFlowInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactFlowModule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContactFlowModule(ctx context.Context, params *connect.DeleteContactFlowModuleInput, optFns ...func(*connect.Options)) (*connect.DeleteContactFlowModuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContactFlowModule")
	}

	var r0 *connect.DeleteContactFlowModuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteContactFlowModuleInput, ...func(*connect.Options)) (*connect.DeleteContactFlowModuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteContactFlowModuleInput, ...func(*connect.Options)) *connect.DeleteContactFlowModuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteContactFlowModuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteContactFlowModuleInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEvaluationForm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEvaluationForm(ctx context.Context, params *connect.DeleteEvaluationFormInput, optFns ...func(*connect.Options)) (*connect.DeleteEvaluationFormOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEvaluationForm")
	}

	var r0 *connect.DeleteEvaluationFormOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteEvaluationFormInput, ...func(*connect.Options)) (*connect.DeleteEvaluationFormOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteEvaluationFormInput, ...func(*connect.Options)) *connect.DeleteEvaluationFormOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteEvaluationFormOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteEvaluationFormInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHoursOfOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHoursOfOperation(ctx context.Context, params *connect.DeleteHoursOfOperationInput, optFns ...func(*connect.Options)) (*connect.DeleteHoursOfOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHoursOfOperation")
	}

	var r0 *connect.DeleteHoursOfOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteHoursOfOperationInput, ...func(*connect.Options)) (*connect.DeleteHoursOfOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteHoursOfOperationInput, ...func(*connect.Options)) *connect.DeleteHoursOfOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteHoursOfOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteHoursOfOperationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstance(ctx context.Context, params *connect.DeleteInstanceInput, optFns ...func(*connect.Options)) (*connect.DeleteInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstance")
	}

	var r0 *connect.DeleteInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteInstanceInput, ...func(*connect.Options)) (*connect.DeleteInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteInstanceInput, ...func(*connect.Options)) *connect.DeleteInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteInstanceInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegrationAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntegrationAssociation(ctx context.Context, params *connect.DeleteIntegrationAssociationInput, optFns ...func(*connect.Options)) (*connect.DeleteIntegrationAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegrationAssociation")
	}

	var r0 *connect.DeleteIntegrationAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteIntegrationAssociationInput, ...func(*connect.Options)) (*connect.DeleteIntegrationAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteIntegrationAssociationInput, ...func(*connect.Options)) *connect.DeleteIntegrationAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteIntegrationAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteIntegrationAssociationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePredefinedAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePredefinedAttribute(ctx context.Context, params *connect.DeletePredefinedAttributeInput, optFns ...func(*connect.Options)) (*connect.DeletePredefinedAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePredefinedAttribute")
	}

	var r0 *connect.DeletePredefinedAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeletePredefinedAttributeInput, ...func(*connect.Options)) (*connect.DeletePredefinedAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeletePredefinedAttributeInput, ...func(*connect.Options)) *connect.DeletePredefinedAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeletePredefinedAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeletePredefinedAttributeInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePrompt provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePrompt(ctx context.Context, params *connect.DeletePromptInput, optFns ...func(*connect.Options)) (*connect.DeletePromptOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePrompt")
	}

	var r0 *connect.DeletePromptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeletePromptInput, ...func(*connect.Options)) (*connect.DeletePromptOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeletePromptInput, ...func(*connect.Options)) *connect.DeletePromptOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeletePromptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeletePromptInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQueue(ctx context.Context, params *connect.DeleteQueueInput, optFns ...func(*connect.Options)) (*connect.DeleteQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueue")
	}

	var r0 *connect.DeleteQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteQueueInput, ...func(*connect.Options)) (*connect.DeleteQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteQueueInput, ...func(*connect.Options)) *connect.DeleteQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteQueueInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQuickConnect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQuickConnect(ctx context.Context, params *connect.DeleteQuickConnectInput, optFns ...func(*connect.Options)) (*connect.DeleteQuickConnectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQuickConnect")
	}

	var r0 *connect.DeleteQuickConnectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteQuickConnectInput, ...func(*connect.Options)) (*connect.DeleteQuickConnectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteQuickConnectInput, ...func(*connect.Options)) *connect.DeleteQuickConnectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteQuickConnectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteQuickConnectInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoutingProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoutingProfile(ctx context.Context, params *connect.DeleteRoutingProfileInput, optFns ...func(*connect.Options)) (*connect.DeleteRoutingProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoutingProfile")
	}

	var r0 *connect.DeleteRoutingProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteRoutingProfileInput, ...func(*connect.Options)) (*connect.DeleteRoutingProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteRoutingProfileInput, ...func(*connect.Options)) *connect.DeleteRoutingProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteRoutingProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteRoutingProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRule(ctx context.Context, params *connect.DeleteRuleInput, optFns ...func(*connect.Options)) (*connect.DeleteRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRule")
	}

	var r0 *connect.DeleteRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteRuleInput, ...func(*connect.Options)) (*connect.DeleteRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteRuleInput, ...func(*connect.Options)) *connect.DeleteRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteRuleInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSecurityProfile(ctx context.Context, params *connect.DeleteSecurityProfileInput, optFns ...func(*connect.Options)) (*connect.DeleteSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSecurityProfile")
	}

	var r0 *connect.DeleteSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteSecurityProfileInput, ...func(*connect.Options)) (*connect.DeleteSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteSecurityProfileInput, ...func(*connect.Options)) *connect.DeleteSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteSecurityProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTaskTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTaskTemplate(ctx context.Context, params *connect.DeleteTaskTemplateInput, optFns ...func(*connect.Options)) (*connect.DeleteTaskTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskTemplate")
	}

	var r0 *connect.DeleteTaskTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteTaskTemplateInput, ...func(*connect.Options)) (*connect.DeleteTaskTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteTaskTemplateInput, ...func(*connect.Options)) *connect.DeleteTaskTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteTaskTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteTaskTemplateInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficDistributionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrafficDistributionGroup(ctx context.Context, params *connect.DeleteTrafficDistributionGroupInput, optFns ...func(*connect.Options)) (*connect.DeleteTrafficDistributionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrafficDistributionGroup")
	}

	var r0 *connect.DeleteTrafficDistributionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteTrafficDistributionGroupInput, ...func(*connect.Options)) (*connect.DeleteTrafficDistributionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteTrafficDistributionGroupInput, ...func(*connect.Options)) *connect.DeleteTrafficDistributionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteTrafficDistributionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteTrafficDistributionGroupInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUseCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUseCase(ctx context.Context, params *connect.DeleteUseCaseInput, optFns ...func(*connect.Options)) (*connect.DeleteUseCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUseCase")
	}

	var r0 *connect.DeleteUseCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteUseCaseInput, ...func(*connect.Options)) (*connect.DeleteUseCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteUseCaseInput, ...func(*connect.Options)) *connect.DeleteUseCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteUseCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteUseCaseInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *connect.DeleteUserInput, optFns ...func(*connect.Options)) (*connect.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *connect.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteUserInput, ...func(*connect.Options)) (*connect.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteUserInput, ...func(*connect.Options)) *connect.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteUserInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserHierarchyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserHierarchyGroup(ctx context.Context, params *connect.DeleteUserHierarchyGroupInput, optFns ...func(*connect.Options)) (*connect.DeleteUserHierarchyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserHierarchyGroup")
	}

	var r0 *connect.DeleteUserHierarchyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteUserHierarchyGroupInput, ...func(*connect.Options)) (*connect.DeleteUserHierarchyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteUserHierarchyGroupInput, ...func(*connect.Options)) *connect.DeleteUserHierarchyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteUserHierarchyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteUserHierarchyGroupInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteView(ctx context.Context, params *connect.DeleteViewInput, optFns ...func(*connect.Options)) (*connect.DeleteViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteView")
	}

	var r0 *connect.DeleteViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteViewInput, ...func(*connect.Options)) (*connect.DeleteViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteViewInput, ...func(*connect.Options)) *connect.DeleteViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteViewInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteViewVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteViewVersion(ctx context.Context, params *connect.DeleteViewVersionInput, optFns ...func(*connect.Options)) (*connect.DeleteViewVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteViewVersion")
	}

	var r0 *connect.DeleteViewVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteViewVersionInput, ...func(*connect.Options)) (*connect.DeleteViewVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteViewVersionInput, ...func(*connect.Options)) *connect.DeleteViewVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteViewVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteViewVersionInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVocabulary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVocabulary(ctx context.Context, params *connect.DeleteVocabularyInput, optFns ...func(*connect.Options)) (*connect.DeleteVocabularyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVocabulary")
	}

	var r0 *connect.DeleteVocabularyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteVocabularyInput, ...func(*connect.Options)) (*connect.DeleteVocabularyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DeleteVocabularyInput, ...func(*connect.Options)) *connect.DeleteVocabularyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DeleteVocabularyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DeleteVocabularyInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAgentStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAgentStatus(ctx context.Context, params *connect.DescribeAgentStatusInput, optFns ...func(*connect.Options)) (*connect.DescribeAgentStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAgentStatus")
	}

	var r0 *connect.DescribeAgentStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeAgentStatusInput, ...func(*connect.Options)) (*connect.DescribeAgentStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeAgentStatusInput, ...func(*connect.Options)) *connect.DescribeAgentStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeAgentStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeAgentStatusInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAuthenticationProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAuthenticationProfile(ctx context.Context, params *connect.DescribeAuthenticationProfileInput, optFns ...func(*connect.Options)) (*connect.DescribeAuthenticationProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAuthenticationProfile")
	}

	var r0 *connect.DescribeAuthenticationProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeAuthenticationProfileInput, ...func(*connect.Options)) (*connect.DescribeAuthenticationProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeAuthenticationProfileInput, ...func(*connect.Options)) *connect.DescribeAuthenticationProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeAuthenticationProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeAuthenticationProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeContact(ctx context.Context, params *connect.DescribeContactInput, optFns ...func(*connect.Options)) (*connect.DescribeContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeContact")
	}

	var r0 *connect.DescribeContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeContactInput, ...func(*connect.Options)) (*connect.DescribeContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeContactInput, ...func(*connect.Options)) *connect.DescribeContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContactEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeContactEvaluation(ctx context.Context, params *connect.DescribeContactEvaluationInput, optFns ...func(*connect.Options)) (*connect.DescribeContactEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeContactEvaluation")
	}

	var r0 *connect.DescribeContactEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeContactEvaluationInput, ...func(*connect.Options)) (*connect.DescribeContactEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeContactEvaluationInput, ...func(*connect.Options)) *connect.DescribeContactEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeContactEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeContactEvaluationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContactFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeContactFlow(ctx context.Context, params *connect.DescribeContactFlowInput, optFns ...func(*connect.Options)) (*connect.DescribeContactFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeContactFlow")
	}

	var r0 *connect.DescribeContactFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeContactFlowInput, ...func(*connect.Options)) (*connect.DescribeContactFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeContactFlowInput, ...func(*connect.Options)) *connect.DescribeContactFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeContactFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeContactFlowInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContactFlowModule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeContactFlowModule(ctx context.Context, params *connect.DescribeContactFlowModuleInput, optFns ...func(*connect.Options)) (*connect.DescribeContactFlowModuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeContactFlowModule")
	}

	var r0 *connect.DescribeContactFlowModuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeContactFlowModuleInput, ...func(*connect.Options)) (*connect.DescribeContactFlowModuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeContactFlowModuleInput, ...func(*connect.Options)) *connect.DescribeContactFlowModuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeContactFlowModuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeContactFlowModuleInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEvaluationForm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEvaluationForm(ctx context.Context, params *connect.DescribeEvaluationFormInput, optFns ...func(*connect.Options)) (*connect.DescribeEvaluationFormOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEvaluationForm")
	}

	var r0 *connect.DescribeEvaluationFormOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeEvaluationFormInput, ...func(*connect.Options)) (*connect.DescribeEvaluationFormOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeEvaluationFormInput, ...func(*connect.Options)) *connect.DescribeEvaluationFormOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeEvaluationFormOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeEvaluationFormInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHoursOfOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHoursOfOperation(ctx context.Context, params *connect.DescribeHoursOfOperationInput, optFns ...func(*connect.Options)) (*connect.DescribeHoursOfOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHoursOfOperation")
	}

	var r0 *connect.DescribeHoursOfOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeHoursOfOperationInput, ...func(*connect.Options)) (*connect.DescribeHoursOfOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeHoursOfOperationInput, ...func(*connect.Options)) *connect.DescribeHoursOfOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeHoursOfOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeHoursOfOperationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInstance(ctx context.Context, params *connect.DescribeInstanceInput, optFns ...func(*connect.Options)) (*connect.DescribeInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstance")
	}

	var r0 *connect.DescribeInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeInstanceInput, ...func(*connect.Options)) (*connect.DescribeInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeInstanceInput, ...func(*connect.Options)) *connect.DescribeInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeInstanceInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInstanceAttribute(ctx context.Context, params *connect.DescribeInstanceAttributeInput, optFns ...func(*connect.Options)) (*connect.DescribeInstanceAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstanceAttribute")
	}

	var r0 *connect.DescribeInstanceAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeInstanceAttributeInput, ...func(*connect.Options)) (*connect.DescribeInstanceAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeInstanceAttributeInput, ...func(*connect.Options)) *connect.DescribeInstanceAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeInstanceAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeInstanceAttributeInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceStorageConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInstanceStorageConfig(ctx context.Context, params *connect.DescribeInstanceStorageConfigInput, optFns ...func(*connect.Options)) (*connect.DescribeInstanceStorageConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstanceStorageConfig")
	}

	var r0 *connect.DescribeInstanceStorageConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeInstanceStorageConfigInput, ...func(*connect.Options)) (*connect.DescribeInstanceStorageConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeInstanceStorageConfigInput, ...func(*connect.Options)) *connect.DescribeInstanceStorageConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeInstanceStorageConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeInstanceStorageConfigInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePhoneNumber(ctx context.Context, params *connect.DescribePhoneNumberInput, optFns ...func(*connect.Options)) (*connect.DescribePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePhoneNumber")
	}

	var r0 *connect.DescribePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribePhoneNumberInput, ...func(*connect.Options)) (*connect.DescribePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribePhoneNumberInput, ...func(*connect.Options)) *connect.DescribePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribePhoneNumberInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePredefinedAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePredefinedAttribute(ctx context.Context, params *connect.DescribePredefinedAttributeInput, optFns ...func(*connect.Options)) (*connect.DescribePredefinedAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePredefinedAttribute")
	}

	var r0 *connect.DescribePredefinedAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribePredefinedAttributeInput, ...func(*connect.Options)) (*connect.DescribePredefinedAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribePredefinedAttributeInput, ...func(*connect.Options)) *connect.DescribePredefinedAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribePredefinedAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribePredefinedAttributeInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePrompt provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePrompt(ctx context.Context, params *connect.DescribePromptInput, optFns ...func(*connect.Options)) (*connect.DescribePromptOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePrompt")
	}

	var r0 *connect.DescribePromptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribePromptInput, ...func(*connect.Options)) (*connect.DescribePromptOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribePromptInput, ...func(*connect.Options)) *connect.DescribePromptOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribePromptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribePromptInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeQueue(ctx context.Context, params *connect.DescribeQueueInput, optFns ...func(*connect.Options)) (*connect.DescribeQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeQueue")
	}

	var r0 *connect.DescribeQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeQueueInput, ...func(*connect.Options)) (*connect.DescribeQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeQueueInput, ...func(*connect.Options)) *connect.DescribeQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeQueueInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQuickConnect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeQuickConnect(ctx context.Context, params *connect.DescribeQuickConnectInput, optFns ...func(*connect.Options)) (*connect.DescribeQuickConnectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeQuickConnect")
	}

	var r0 *connect.DescribeQuickConnectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeQuickConnectInput, ...func(*connect.Options)) (*connect.DescribeQuickConnectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeQuickConnectInput, ...func(*connect.Options)) *connect.DescribeQuickConnectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeQuickConnectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeQuickConnectInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRoutingProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRoutingProfile(ctx context.Context, params *connect.DescribeRoutingProfileInput, optFns ...func(*connect.Options)) (*connect.DescribeRoutingProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRoutingProfile")
	}

	var r0 *connect.DescribeRoutingProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeRoutingProfileInput, ...func(*connect.Options)) (*connect.DescribeRoutingProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeRoutingProfileInput, ...func(*connect.Options)) *connect.DescribeRoutingProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeRoutingProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeRoutingProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRule(ctx context.Context, params *connect.DescribeRuleInput, optFns ...func(*connect.Options)) (*connect.DescribeRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRule")
	}

	var r0 *connect.DescribeRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeRuleInput, ...func(*connect.Options)) (*connect.DescribeRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeRuleInput, ...func(*connect.Options)) *connect.DescribeRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeRuleInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSecurityProfile(ctx context.Context, params *connect.DescribeSecurityProfileInput, optFns ...func(*connect.Options)) (*connect.DescribeSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSecurityProfile")
	}

	var r0 *connect.DescribeSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeSecurityProfileInput, ...func(*connect.Options)) (*connect.DescribeSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeSecurityProfileInput, ...func(*connect.Options)) *connect.DescribeSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeSecurityProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrafficDistributionGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTrafficDistributionGroup(ctx context.Context, params *connect.DescribeTrafficDistributionGroupInput, optFns ...func(*connect.Options)) (*connect.DescribeTrafficDistributionGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTrafficDistributionGroup")
	}

	var r0 *connect.DescribeTrafficDistributionGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeTrafficDistributionGroupInput, ...func(*connect.Options)) (*connect.DescribeTrafficDistributionGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeTrafficDistributionGroupInput, ...func(*connect.Options)) *connect.DescribeTrafficDistributionGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeTrafficDistributionGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeTrafficDistributionGroupInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUser(ctx context.Context, params *connect.DescribeUserInput, optFns ...func(*connect.Options)) (*connect.DescribeUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUser")
	}

	var r0 *connect.DescribeUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeUserInput, ...func(*connect.Options)) (*connect.DescribeUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeUserInput, ...func(*connect.Options)) *connect.DescribeUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeUserInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserHierarchyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserHierarchyGroup(ctx context.Context, params *connect.DescribeUserHierarchyGroupInput, optFns ...func(*connect.Options)) (*connect.DescribeUserHierarchyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserHierarchyGroup")
	}

	var r0 *connect.DescribeUserHierarchyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeUserHierarchyGroupInput, ...func(*connect.Options)) (*connect.DescribeUserHierarchyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeUserHierarchyGroupInput, ...func(*connect.Options)) *connect.DescribeUserHierarchyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeUserHierarchyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeUserHierarchyGroupInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserHierarchyStructure provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserHierarchyStructure(ctx context.Context, params *connect.DescribeUserHierarchyStructureInput, optFns ...func(*connect.Options)) (*connect.DescribeUserHierarchyStructureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserHierarchyStructure")
	}

	var r0 *connect.DescribeUserHierarchyStructureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeUserHierarchyStructureInput, ...func(*connect.Options)) (*connect.DescribeUserHierarchyStructureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeUserHierarchyStructureInput, ...func(*connect.Options)) *connect.DescribeUserHierarchyStructureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeUserHierarchyStructureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeUserHierarchyStructureInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeView(ctx context.Context, params *connect.DescribeViewInput, optFns ...func(*connect.Options)) (*connect.DescribeViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeView")
	}

	var r0 *connect.DescribeViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeViewInput, ...func(*connect.Options)) (*connect.DescribeViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeViewInput, ...func(*connect.Options)) *connect.DescribeViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeViewInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVocabulary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVocabulary(ctx context.Context, params *connect.DescribeVocabularyInput, optFns ...func(*connect.Options)) (*connect.DescribeVocabularyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVocabulary")
	}

	var r0 *connect.DescribeVocabularyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeVocabularyInput, ...func(*connect.Options)) (*connect.DescribeVocabularyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DescribeVocabularyInput, ...func(*connect.Options)) *connect.DescribeVocabularyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DescribeVocabularyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DescribeVocabularyInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateAnalyticsDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateAnalyticsDataSet(ctx context.Context, params *connect.DisassociateAnalyticsDataSetInput, optFns ...func(*connect.Options)) (*connect.DisassociateAnalyticsDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateAnalyticsDataSet")
	}

	var r0 *connect.DisassociateAnalyticsDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateAnalyticsDataSetInput, ...func(*connect.Options)) (*connect.DisassociateAnalyticsDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateAnalyticsDataSetInput, ...func(*connect.Options)) *connect.DisassociateAnalyticsDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateAnalyticsDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateAnalyticsDataSetInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateApprovedOrigin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateApprovedOrigin(ctx context.Context, params *connect.DisassociateApprovedOriginInput, optFns ...func(*connect.Options)) (*connect.DisassociateApprovedOriginOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateApprovedOrigin")
	}

	var r0 *connect.DisassociateApprovedOriginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateApprovedOriginInput, ...func(*connect.Options)) (*connect.DisassociateApprovedOriginOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateApprovedOriginInput, ...func(*connect.Options)) *connect.DisassociateApprovedOriginOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateApprovedOriginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateApprovedOriginInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateBot(ctx context.Context, params *connect.DisassociateBotInput, optFns ...func(*connect.Options)) (*connect.DisassociateBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateBot")
	}

	var r0 *connect.DisassociateBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateBotInput, ...func(*connect.Options)) (*connect.DisassociateBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateBotInput, ...func(*connect.Options)) *connect.DisassociateBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateBotInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFlow(ctx context.Context, params *connect.DisassociateFlowInput, optFns ...func(*connect.Options)) (*connect.DisassociateFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFlow")
	}

	var r0 *connect.DisassociateFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateFlowInput, ...func(*connect.Options)) (*connect.DisassociateFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateFlowInput, ...func(*connect.Options)) *connect.DisassociateFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateFlowInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateInstanceStorageConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateInstanceStorageConfig(ctx context.Context, params *connect.DisassociateInstanceStorageConfigInput, optFns ...func(*connect.Options)) (*connect.DisassociateInstanceStorageConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateInstanceStorageConfig")
	}

	var r0 *connect.DisassociateInstanceStorageConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateInstanceStorageConfigInput, ...func(*connect.Options)) (*connect.DisassociateInstanceStorageConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateInstanceStorageConfigInput, ...func(*connect.Options)) *connect.DisassociateInstanceStorageConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateInstanceStorageConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateInstanceStorageConfigInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateLambdaFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateLambdaFunction(ctx context.Context, params *connect.DisassociateLambdaFunctionInput, optFns ...func(*connect.Options)) (*connect.DisassociateLambdaFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateLambdaFunction")
	}

	var r0 *connect.DisassociateLambdaFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateLambdaFunctionInput, ...func(*connect.Options)) (*connect.DisassociateLambdaFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateLambdaFunctionInput, ...func(*connect.Options)) *connect.DisassociateLambdaFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateLambdaFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateLambdaFunctionInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateLexBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateLexBot(ctx context.Context, params *connect.DisassociateLexBotInput, optFns ...func(*connect.Options)) (*connect.DisassociateLexBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateLexBot")
	}

	var r0 *connect.DisassociateLexBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateLexBotInput, ...func(*connect.Options)) (*connect.DisassociateLexBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateLexBotInput, ...func(*connect.Options)) *connect.DisassociateLexBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateLexBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateLexBotInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePhoneNumberContactFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePhoneNumberContactFlow(ctx context.Context, params *connect.DisassociatePhoneNumberContactFlowInput, optFns ...func(*connect.Options)) (*connect.DisassociatePhoneNumberContactFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePhoneNumberContactFlow")
	}

	var r0 *connect.DisassociatePhoneNumberContactFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociatePhoneNumberContactFlowInput, ...func(*connect.Options)) (*connect.DisassociatePhoneNumberContactFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociatePhoneNumberContactFlowInput, ...func(*connect.Options)) *connect.DisassociatePhoneNumberContactFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociatePhoneNumberContactFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociatePhoneNumberContactFlowInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateQueueQuickConnects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateQueueQuickConnects(ctx context.Context, params *connect.DisassociateQueueQuickConnectsInput, optFns ...func(*connect.Options)) (*connect.DisassociateQueueQuickConnectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateQueueQuickConnects")
	}

	var r0 *connect.DisassociateQueueQuickConnectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateQueueQuickConnectsInput, ...func(*connect.Options)) (*connect.DisassociateQueueQuickConnectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateQueueQuickConnectsInput, ...func(*connect.Options)) *connect.DisassociateQueueQuickConnectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateQueueQuickConnectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateQueueQuickConnectsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateRoutingProfileQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateRoutingProfileQueues(ctx context.Context, params *connect.DisassociateRoutingProfileQueuesInput, optFns ...func(*connect.Options)) (*connect.DisassociateRoutingProfileQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateRoutingProfileQueues")
	}

	var r0 *connect.DisassociateRoutingProfileQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateRoutingProfileQueuesInput, ...func(*connect.Options)) (*connect.DisassociateRoutingProfileQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateRoutingProfileQueuesInput, ...func(*connect.Options)) *connect.DisassociateRoutingProfileQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateRoutingProfileQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateRoutingProfileQueuesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSecurityKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateSecurityKey(ctx context.Context, params *connect.DisassociateSecurityKeyInput, optFns ...func(*connect.Options)) (*connect.DisassociateSecurityKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSecurityKey")
	}

	var r0 *connect.DisassociateSecurityKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateSecurityKeyInput, ...func(*connect.Options)) (*connect.DisassociateSecurityKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateSecurityKeyInput, ...func(*connect.Options)) *connect.DisassociateSecurityKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateSecurityKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateSecurityKeyInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTrafficDistributionGroupUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateTrafficDistributionGroupUser(ctx context.Context, params *connect.DisassociateTrafficDistributionGroupUserInput, optFns ...func(*connect.Options)) (*connect.DisassociateTrafficDistributionGroupUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateTrafficDistributionGroupUser")
	}

	var r0 *connect.DisassociateTrafficDistributionGroupUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateTrafficDistributionGroupUserInput, ...func(*connect.Options)) (*connect.DisassociateTrafficDistributionGroupUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateTrafficDistributionGroupUserInput, ...func(*connect.Options)) *connect.DisassociateTrafficDistributionGroupUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateTrafficDistributionGroupUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateTrafficDistributionGroupUserInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateUserProficiencies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateUserProficiencies(ctx context.Context, params *connect.DisassociateUserProficienciesInput, optFns ...func(*connect.Options)) (*connect.DisassociateUserProficienciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateUserProficiencies")
	}

	var r0 *connect.DisassociateUserProficienciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateUserProficienciesInput, ...func(*connect.Options)) (*connect.DisassociateUserProficienciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DisassociateUserProficienciesInput, ...func(*connect.Options)) *connect.DisassociateUserProficienciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DisassociateUserProficienciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DisassociateUserProficienciesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DismissUserContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DismissUserContact(ctx context.Context, params *connect.DismissUserContactInput, optFns ...func(*connect.Options)) (*connect.DismissUserContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DismissUserContact")
	}

	var r0 *connect.DismissUserContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DismissUserContactInput, ...func(*connect.Options)) (*connect.DismissUserContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.DismissUserContactInput, ...func(*connect.Options)) *connect.DismissUserContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.DismissUserContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.DismissUserContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttachedFile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAttachedFile(ctx context.Context, params *connect.GetAttachedFileInput, optFns ...func(*connect.Options)) (*connect.GetAttachedFileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAttachedFile")
	}

	var r0 *connect.GetAttachedFileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetAttachedFileInput, ...func(*connect.Options)) (*connect.GetAttachedFileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetAttachedFileInput, ...func(*connect.Options)) *connect.GetAttachedFileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetAttachedFileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetAttachedFileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContactAttributes(ctx context.Context, params *connect.GetContactAttributesInput, optFns ...func(*connect.Options)) (*connect.GetContactAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactAttributes")
	}

	var r0 *connect.GetContactAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetContactAttributesInput, ...func(*connect.Options)) (*connect.GetContactAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetContactAttributesInput, ...func(*connect.Options)) *connect.GetContactAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetContactAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetContactAttributesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCurrentMetricData(ctx context.Context, params *connect.GetCurrentMetricDataInput, optFns ...func(*connect.Options)) (*connect.GetCurrentMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentMetricData")
	}

	var r0 *connect.GetCurrentMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetCurrentMetricDataInput, ...func(*connect.Options)) (*connect.GetCurrentMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetCurrentMetricDataInput, ...func(*connect.Options)) *connect.GetCurrentMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetCurrentMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetCurrentMetricDataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentUserData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCurrentUserData(ctx context.Context, params *connect.GetCurrentUserDataInput, optFns ...func(*connect.Options)) (*connect.GetCurrentUserDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentUserData")
	}

	var r0 *connect.GetCurrentUserDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetCurrentUserDataInput, ...func(*connect.Options)) (*connect.GetCurrentUserDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetCurrentUserDataInput, ...func(*connect.Options)) *connect.GetCurrentUserDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetCurrentUserDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetCurrentUserDataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFederationToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFederationToken(ctx context.Context, params *connect.GetFederationTokenInput, optFns ...func(*connect.Options)) (*connect.GetFederationTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFederationToken")
	}

	var r0 *connect.GetFederationTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetFederationTokenInput, ...func(*connect.Options)) (*connect.GetFederationTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetFederationTokenInput, ...func(*connect.Options)) *connect.GetFederationTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetFederationTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetFederationTokenInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFlowAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFlowAssociation(ctx context.Context, params *connect.GetFlowAssociationInput, optFns ...func(*connect.Options)) (*connect.GetFlowAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFlowAssociation")
	}

	var r0 *connect.GetFlowAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetFlowAssociationInput, ...func(*connect.Options)) (*connect.GetFlowAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetFlowAssociationInput, ...func(*connect.Options)) *connect.GetFlowAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetFlowAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetFlowAssociationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMetricData(ctx context.Context, params *connect.GetMetricDataInput, optFns ...func(*connect.Options)) (*connect.GetMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricData")
	}

	var r0 *connect.GetMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetMetricDataInput, ...func(*connect.Options)) (*connect.GetMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetMetricDataInput, ...func(*connect.Options)) *connect.GetMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetMetricDataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMetricDataV2 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMetricDataV2(ctx context.Context, params *connect.GetMetricDataV2Input, optFns ...func(*connect.Options)) (*connect.GetMetricDataV2Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMetricDataV2")
	}

	var r0 *connect.GetMetricDataV2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetMetricDataV2Input, ...func(*connect.Options)) (*connect.GetMetricDataV2Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetMetricDataV2Input, ...func(*connect.Options)) *connect.GetMetricDataV2Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetMetricDataV2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetMetricDataV2Input, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPromptFile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPromptFile(ctx context.Context, params *connect.GetPromptFileInput, optFns ...func(*connect.Options)) (*connect.GetPromptFileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPromptFile")
	}

	var r0 *connect.GetPromptFileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetPromptFileInput, ...func(*connect.Options)) (*connect.GetPromptFileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetPromptFileInput, ...func(*connect.Options)) *connect.GetPromptFileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetPromptFileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetPromptFileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTaskTemplate(ctx context.Context, params *connect.GetTaskTemplateInput, optFns ...func(*connect.Options)) (*connect.GetTaskTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskTemplate")
	}

	var r0 *connect.GetTaskTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetTaskTemplateInput, ...func(*connect.Options)) (*connect.GetTaskTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetTaskTemplateInput, ...func(*connect.Options)) *connect.GetTaskTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetTaskTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetTaskTemplateInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrafficDistribution(ctx context.Context, params *connect.GetTrafficDistributionInput, optFns ...func(*connect.Options)) (*connect.GetTrafficDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrafficDistribution")
	}

	var r0 *connect.GetTrafficDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetTrafficDistributionInput, ...func(*connect.Options)) (*connect.GetTrafficDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.GetTrafficDistributionInput, ...func(*connect.Options)) *connect.GetTrafficDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.GetTrafficDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.GetTrafficDistributionInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportPhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportPhoneNumber(ctx context.Context, params *connect.ImportPhoneNumberInput, optFns ...func(*connect.Options)) (*connect.ImportPhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportPhoneNumber")
	}

	var r0 *connect.ImportPhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ImportPhoneNumberInput, ...func(*connect.Options)) (*connect.ImportPhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ImportPhoneNumberInput, ...func(*connect.Options)) *connect.ImportPhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ImportPhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ImportPhoneNumberInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgentStatuses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAgentStatuses(ctx context.Context, params *connect.ListAgentStatusesInput, optFns ...func(*connect.Options)) (*connect.ListAgentStatusesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAgentStatuses")
	}

	var r0 *connect.ListAgentStatusesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListAgentStatusesInput, ...func(*connect.Options)) (*connect.ListAgentStatusesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListAgentStatusesInput, ...func(*connect.Options)) *connect.ListAgentStatusesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListAgentStatusesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListAgentStatusesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnalyticsDataAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnalyticsDataAssociations(ctx context.Context, params *connect.ListAnalyticsDataAssociationsInput, optFns ...func(*connect.Options)) (*connect.ListAnalyticsDataAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnalyticsDataAssociations")
	}

	var r0 *connect.ListAnalyticsDataAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListAnalyticsDataAssociationsInput, ...func(*connect.Options)) (*connect.ListAnalyticsDataAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListAnalyticsDataAssociationsInput, ...func(*connect.Options)) *connect.ListAnalyticsDataAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListAnalyticsDataAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListAnalyticsDataAssociationsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApprovedOrigins provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApprovedOrigins(ctx context.Context, params *connect.ListApprovedOriginsInput, optFns ...func(*connect.Options)) (*connect.ListApprovedOriginsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApprovedOrigins")
	}

	var r0 *connect.ListApprovedOriginsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListApprovedOriginsInput, ...func(*connect.Options)) (*connect.ListApprovedOriginsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListApprovedOriginsInput, ...func(*connect.Options)) *connect.ListApprovedOriginsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListApprovedOriginsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListApprovedOriginsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAuthenticationProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAuthenticationProfiles(ctx context.Context, params *connect.ListAuthenticationProfilesInput, optFns ...func(*connect.Options)) (*connect.ListAuthenticationProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAuthenticationProfiles")
	}

	var r0 *connect.ListAuthenticationProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListAuthenticationProfilesInput, ...func(*connect.Options)) (*connect.ListAuthenticationProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListAuthenticationProfilesInput, ...func(*connect.Options)) *connect.ListAuthenticationProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListAuthenticationProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListAuthenticationProfilesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBots(ctx context.Context, params *connect.ListBotsInput, optFns ...func(*connect.Options)) (*connect.ListBotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBots")
	}

	var r0 *connect.ListBotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListBotsInput, ...func(*connect.Options)) (*connect.ListBotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListBotsInput, ...func(*connect.Options)) *connect.ListBotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListBotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListBotsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactEvaluations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContactEvaluations(ctx context.Context, params *connect.ListContactEvaluationsInput, optFns ...func(*connect.Options)) (*connect.ListContactEvaluationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContactEvaluations")
	}

	var r0 *connect.ListContactEvaluationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListContactEvaluationsInput, ...func(*connect.Options)) (*connect.ListContactEvaluationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListContactEvaluationsInput, ...func(*connect.Options)) *connect.ListContactEvaluationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListContactEvaluationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListContactEvaluationsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactFlowModules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContactFlowModules(ctx context.Context, params *connect.ListContactFlowModulesInput, optFns ...func(*connect.Options)) (*connect.ListContactFlowModulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContactFlowModules")
	}

	var r0 *connect.ListContactFlowModulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListContactFlowModulesInput, ...func(*connect.Options)) (*connect.ListContactFlowModulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListContactFlowModulesInput, ...func(*connect.Options)) *connect.ListContactFlowModulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListContactFlowModulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListContactFlowModulesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactFlows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContactFlows(ctx context.Context, params *connect.ListContactFlowsInput, optFns ...func(*connect.Options)) (*connect.ListContactFlowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContactFlows")
	}

	var r0 *connect.ListContactFlowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListContactFlowsInput, ...func(*connect.Options)) (*connect.ListContactFlowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListContactFlowsInput, ...func(*connect.Options)) *connect.ListContactFlowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListContactFlowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListContactFlowsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactReferences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContactReferences(ctx context.Context, params *connect.ListContactReferencesInput, optFns ...func(*connect.Options)) (*connect.ListContactReferencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContactReferences")
	}

	var r0 *connect.ListContactReferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListContactReferencesInput, ...func(*connect.Options)) (*connect.ListContactReferencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListContactReferencesInput, ...func(*connect.Options)) *connect.ListContactReferencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListContactReferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListContactReferencesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDefaultVocabularies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDefaultVocabularies(ctx context.Context, params *connect.ListDefaultVocabulariesInput, optFns ...func(*connect.Options)) (*connect.ListDefaultVocabulariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDefaultVocabularies")
	}

	var r0 *connect.ListDefaultVocabulariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListDefaultVocabulariesInput, ...func(*connect.Options)) (*connect.ListDefaultVocabulariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListDefaultVocabulariesInput, ...func(*connect.Options)) *connect.ListDefaultVocabulariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListDefaultVocabulariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListDefaultVocabulariesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvaluationFormVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEvaluationFormVersions(ctx context.Context, params *connect.ListEvaluationFormVersionsInput, optFns ...func(*connect.Options)) (*connect.ListEvaluationFormVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEvaluationFormVersions")
	}

	var r0 *connect.ListEvaluationFormVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListEvaluationFormVersionsInput, ...func(*connect.Options)) (*connect.ListEvaluationFormVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListEvaluationFormVersionsInput, ...func(*connect.Options)) *connect.ListEvaluationFormVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListEvaluationFormVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListEvaluationFormVersionsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEvaluationForms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEvaluationForms(ctx context.Context, params *connect.ListEvaluationFormsInput, optFns ...func(*connect.Options)) (*connect.ListEvaluationFormsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEvaluationForms")
	}

	var r0 *connect.ListEvaluationFormsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListEvaluationFormsInput, ...func(*connect.Options)) (*connect.ListEvaluationFormsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListEvaluationFormsInput, ...func(*connect.Options)) *connect.ListEvaluationFormsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListEvaluationFormsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListEvaluationFormsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFlowAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFlowAssociations(ctx context.Context, params *connect.ListFlowAssociationsInput, optFns ...func(*connect.Options)) (*connect.ListFlowAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFlowAssociations")
	}

	var r0 *connect.ListFlowAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListFlowAssociationsInput, ...func(*connect.Options)) (*connect.ListFlowAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListFlowAssociationsInput, ...func(*connect.Options)) *connect.ListFlowAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListFlowAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListFlowAssociationsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHoursOfOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHoursOfOperations(ctx context.Context, params *connect.ListHoursOfOperationsInput, optFns ...func(*connect.Options)) (*connect.ListHoursOfOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHoursOfOperations")
	}

	var r0 *connect.ListHoursOfOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListHoursOfOperationsInput, ...func(*connect.Options)) (*connect.ListHoursOfOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListHoursOfOperationsInput, ...func(*connect.Options)) *connect.ListHoursOfOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListHoursOfOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListHoursOfOperationsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstanceAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInstanceAttributes(ctx context.Context, params *connect.ListInstanceAttributesInput, optFns ...func(*connect.Options)) (*connect.ListInstanceAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstanceAttributes")
	}

	var r0 *connect.ListInstanceAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListInstanceAttributesInput, ...func(*connect.Options)) (*connect.ListInstanceAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListInstanceAttributesInput, ...func(*connect.Options)) *connect.ListInstanceAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListInstanceAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListInstanceAttributesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstanceStorageConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInstanceStorageConfigs(ctx context.Context, params *connect.ListInstanceStorageConfigsInput, optFns ...func(*connect.Options)) (*connect.ListInstanceStorageConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstanceStorageConfigs")
	}

	var r0 *connect.ListInstanceStorageConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListInstanceStorageConfigsInput, ...func(*connect.Options)) (*connect.ListInstanceStorageConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListInstanceStorageConfigsInput, ...func(*connect.Options)) *connect.ListInstanceStorageConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListInstanceStorageConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListInstanceStorageConfigsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInstances(ctx context.Context, params *connect.ListInstancesInput, optFns ...func(*connect.Options)) (*connect.ListInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstances")
	}

	var r0 *connect.ListInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListInstancesInput, ...func(*connect.Options)) (*connect.ListInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListInstancesInput, ...func(*connect.Options)) *connect.ListInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListInstancesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIntegrationAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIntegrationAssociations(ctx context.Context, params *connect.ListIntegrationAssociationsInput, optFns ...func(*connect.Options)) (*connect.ListIntegrationAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIntegrationAssociations")
	}

	var r0 *connect.ListIntegrationAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListIntegrationAssociationsInput, ...func(*connect.Options)) (*connect.ListIntegrationAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListIntegrationAssociationsInput, ...func(*connect.Options)) *connect.ListIntegrationAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListIntegrationAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListIntegrationAssociationsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLambdaFunctions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLambdaFunctions(ctx context.Context, params *connect.ListLambdaFunctionsInput, optFns ...func(*connect.Options)) (*connect.ListLambdaFunctionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLambdaFunctions")
	}

	var r0 *connect.ListLambdaFunctionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListLambdaFunctionsInput, ...func(*connect.Options)) (*connect.ListLambdaFunctionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListLambdaFunctionsInput, ...func(*connect.Options)) *connect.ListLambdaFunctionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListLambdaFunctionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListLambdaFunctionsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLexBots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLexBots(ctx context.Context, params *connect.ListLexBotsInput, optFns ...func(*connect.Options)) (*connect.ListLexBotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLexBots")
	}

	var r0 *connect.ListLexBotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListLexBotsInput, ...func(*connect.Options)) (*connect.ListLexBotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListLexBotsInput, ...func(*connect.Options)) *connect.ListLexBotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListLexBotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListLexBotsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumbers(ctx context.Context, params *connect.ListPhoneNumbersInput, optFns ...func(*connect.Options)) (*connect.ListPhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumbers")
	}

	var r0 *connect.ListPhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListPhoneNumbersInput, ...func(*connect.Options)) (*connect.ListPhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListPhoneNumbersInput, ...func(*connect.Options)) *connect.ListPhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListPhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListPhoneNumbersInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPhoneNumbersV2 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPhoneNumbersV2(ctx context.Context, params *connect.ListPhoneNumbersV2Input, optFns ...func(*connect.Options)) (*connect.ListPhoneNumbersV2Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPhoneNumbersV2")
	}

	var r0 *connect.ListPhoneNumbersV2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListPhoneNumbersV2Input, ...func(*connect.Options)) (*connect.ListPhoneNumbersV2Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListPhoneNumbersV2Input, ...func(*connect.Options)) *connect.ListPhoneNumbersV2Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListPhoneNumbersV2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListPhoneNumbersV2Input, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPredefinedAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPredefinedAttributes(ctx context.Context, params *connect.ListPredefinedAttributesInput, optFns ...func(*connect.Options)) (*connect.ListPredefinedAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPredefinedAttributes")
	}

	var r0 *connect.ListPredefinedAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListPredefinedAttributesInput, ...func(*connect.Options)) (*connect.ListPredefinedAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListPredefinedAttributesInput, ...func(*connect.Options)) *connect.ListPredefinedAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListPredefinedAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListPredefinedAttributesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrompts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrompts(ctx context.Context, params *connect.ListPromptsInput, optFns ...func(*connect.Options)) (*connect.ListPromptsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrompts")
	}

	var r0 *connect.ListPromptsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListPromptsInput, ...func(*connect.Options)) (*connect.ListPromptsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListPromptsInput, ...func(*connect.Options)) *connect.ListPromptsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListPromptsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListPromptsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueueQuickConnects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueueQuickConnects(ctx context.Context, params *connect.ListQueueQuickConnectsInput, optFns ...func(*connect.Options)) (*connect.ListQueueQuickConnectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueueQuickConnects")
	}

	var r0 *connect.ListQueueQuickConnectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListQueueQuickConnectsInput, ...func(*connect.Options)) (*connect.ListQueueQuickConnectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListQueueQuickConnectsInput, ...func(*connect.Options)) *connect.ListQueueQuickConnectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListQueueQuickConnectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListQueueQuickConnectsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueues(ctx context.Context, params *connect.ListQueuesInput, optFns ...func(*connect.Options)) (*connect.ListQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueues")
	}

	var r0 *connect.ListQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListQueuesInput, ...func(*connect.Options)) (*connect.ListQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListQueuesInput, ...func(*connect.Options)) *connect.ListQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListQueuesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQuickConnects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQuickConnects(ctx context.Context, params *connect.ListQuickConnectsInput, optFns ...func(*connect.Options)) (*connect.ListQuickConnectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQuickConnects")
	}

	var r0 *connect.ListQuickConnectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListQuickConnectsInput, ...func(*connect.Options)) (*connect.ListQuickConnectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListQuickConnectsInput, ...func(*connect.Options)) *connect.ListQuickConnectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListQuickConnectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListQuickConnectsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRealtimeContactAnalysisSegmentsV2 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRealtimeContactAnalysisSegmentsV2(ctx context.Context, params *connect.ListRealtimeContactAnalysisSegmentsV2Input, optFns ...func(*connect.Options)) (*connect.ListRealtimeContactAnalysisSegmentsV2Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRealtimeContactAnalysisSegmentsV2")
	}

	var r0 *connect.ListRealtimeContactAnalysisSegmentsV2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListRealtimeContactAnalysisSegmentsV2Input, ...func(*connect.Options)) (*connect.ListRealtimeContactAnalysisSegmentsV2Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListRealtimeContactAnalysisSegmentsV2Input, ...func(*connect.Options)) *connect.ListRealtimeContactAnalysisSegmentsV2Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListRealtimeContactAnalysisSegmentsV2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListRealtimeContactAnalysisSegmentsV2Input, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoutingProfileQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoutingProfileQueues(ctx context.Context, params *connect.ListRoutingProfileQueuesInput, optFns ...func(*connect.Options)) (*connect.ListRoutingProfileQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoutingProfileQueues")
	}

	var r0 *connect.ListRoutingProfileQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListRoutingProfileQueuesInput, ...func(*connect.Options)) (*connect.ListRoutingProfileQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListRoutingProfileQueuesInput, ...func(*connect.Options)) *connect.ListRoutingProfileQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListRoutingProfileQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListRoutingProfileQueuesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoutingProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoutingProfiles(ctx context.Context, params *connect.ListRoutingProfilesInput, optFns ...func(*connect.Options)) (*connect.ListRoutingProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoutingProfiles")
	}

	var r0 *connect.ListRoutingProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListRoutingProfilesInput, ...func(*connect.Options)) (*connect.ListRoutingProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListRoutingProfilesInput, ...func(*connect.Options)) *connect.ListRoutingProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListRoutingProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListRoutingProfilesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRules(ctx context.Context, params *connect.ListRulesInput, optFns ...func(*connect.Options)) (*connect.ListRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRules")
	}

	var r0 *connect.ListRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListRulesInput, ...func(*connect.Options)) (*connect.ListRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListRulesInput, ...func(*connect.Options)) *connect.ListRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListRulesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityKeys(ctx context.Context, params *connect.ListSecurityKeysInput, optFns ...func(*connect.Options)) (*connect.ListSecurityKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityKeys")
	}

	var r0 *connect.ListSecurityKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListSecurityKeysInput, ...func(*connect.Options)) (*connect.ListSecurityKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListSecurityKeysInput, ...func(*connect.Options)) *connect.ListSecurityKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListSecurityKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListSecurityKeysInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityProfileApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityProfileApplications(ctx context.Context, params *connect.ListSecurityProfileApplicationsInput, optFns ...func(*connect.Options)) (*connect.ListSecurityProfileApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityProfileApplications")
	}

	var r0 *connect.ListSecurityProfileApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListSecurityProfileApplicationsInput, ...func(*connect.Options)) (*connect.ListSecurityProfileApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListSecurityProfileApplicationsInput, ...func(*connect.Options)) *connect.ListSecurityProfileApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListSecurityProfileApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListSecurityProfileApplicationsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityProfilePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityProfilePermissions(ctx context.Context, params *connect.ListSecurityProfilePermissionsInput, optFns ...func(*connect.Options)) (*connect.ListSecurityProfilePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityProfilePermissions")
	}

	var r0 *connect.ListSecurityProfilePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListSecurityProfilePermissionsInput, ...func(*connect.Options)) (*connect.ListSecurityProfilePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListSecurityProfilePermissionsInput, ...func(*connect.Options)) *connect.ListSecurityProfilePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListSecurityProfilePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListSecurityProfilePermissionsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityProfiles(ctx context.Context, params *connect.ListSecurityProfilesInput, optFns ...func(*connect.Options)) (*connect.ListSecurityProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityProfiles")
	}

	var r0 *connect.ListSecurityProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListSecurityProfilesInput, ...func(*connect.Options)) (*connect.ListSecurityProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListSecurityProfilesInput, ...func(*connect.Options)) *connect.ListSecurityProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListSecurityProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListSecurityProfilesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *connect.ListTagsForResourceInput, optFns ...func(*connect.Options)) (*connect.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *connect.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListTagsForResourceInput, ...func(*connect.Options)) (*connect.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListTagsForResourceInput, ...func(*connect.Options)) *connect.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListTagsForResourceInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTaskTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTaskTemplates(ctx context.Context, params *connect.ListTaskTemplatesInput, optFns ...func(*connect.Options)) (*connect.ListTaskTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskTemplates")
	}

	var r0 *connect.ListTaskTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListTaskTemplatesInput, ...func(*connect.Options)) (*connect.ListTaskTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListTaskTemplatesInput, ...func(*connect.Options)) *connect.ListTaskTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListTaskTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListTaskTemplatesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficDistributionGroupUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrafficDistributionGroupUsers(ctx context.Context, params *connect.ListTrafficDistributionGroupUsersInput, optFns ...func(*connect.Options)) (*connect.ListTrafficDistributionGroupUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrafficDistributionGroupUsers")
	}

	var r0 *connect.ListTrafficDistributionGroupUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListTrafficDistributionGroupUsersInput, ...func(*connect.Options)) (*connect.ListTrafficDistributionGroupUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListTrafficDistributionGroupUsersInput, ...func(*connect.Options)) *connect.ListTrafficDistributionGroupUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListTrafficDistributionGroupUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListTrafficDistributionGroupUsersInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficDistributionGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrafficDistributionGroups(ctx context.Context, params *connect.ListTrafficDistributionGroupsInput, optFns ...func(*connect.Options)) (*connect.ListTrafficDistributionGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrafficDistributionGroups")
	}

	var r0 *connect.ListTrafficDistributionGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListTrafficDistributionGroupsInput, ...func(*connect.Options)) (*connect.ListTrafficDistributionGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListTrafficDistributionGroupsInput, ...func(*connect.Options)) *connect.ListTrafficDistributionGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListTrafficDistributionGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListTrafficDistributionGroupsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUseCases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUseCases(ctx context.Context, params *connect.ListUseCasesInput, optFns ...func(*connect.Options)) (*connect.ListUseCasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUseCases")
	}

	var r0 *connect.ListUseCasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListUseCasesInput, ...func(*connect.Options)) (*connect.ListUseCasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListUseCasesInput, ...func(*connect.Options)) *connect.ListUseCasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListUseCasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListUseCasesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserHierarchyGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserHierarchyGroups(ctx context.Context, params *connect.ListUserHierarchyGroupsInput, optFns ...func(*connect.Options)) (*connect.ListUserHierarchyGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserHierarchyGroups")
	}

	var r0 *connect.ListUserHierarchyGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListUserHierarchyGroupsInput, ...func(*connect.Options)) (*connect.ListUserHierarchyGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListUserHierarchyGroupsInput, ...func(*connect.Options)) *connect.ListUserHierarchyGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListUserHierarchyGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListUserHierarchyGroupsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserProficiencies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserProficiencies(ctx context.Context, params *connect.ListUserProficienciesInput, optFns ...func(*connect.Options)) (*connect.ListUserProficienciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserProficiencies")
	}

	var r0 *connect.ListUserProficienciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListUserProficienciesInput, ...func(*connect.Options)) (*connect.ListUserProficienciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListUserProficienciesInput, ...func(*connect.Options)) *connect.ListUserProficienciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListUserProficienciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListUserProficienciesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *connect.ListUsersInput, optFns ...func(*connect.Options)) (*connect.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *connect.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListUsersInput, ...func(*connect.Options)) (*connect.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListUsersInput, ...func(*connect.Options)) *connect.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListUsersInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListViewVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListViewVersions(ctx context.Context, params *connect.ListViewVersionsInput, optFns ...func(*connect.Options)) (*connect.ListViewVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListViewVersions")
	}

	var r0 *connect.ListViewVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListViewVersionsInput, ...func(*connect.Options)) (*connect.ListViewVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListViewVersionsInput, ...func(*connect.Options)) *connect.ListViewVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListViewVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListViewVersionsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListViews provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListViews(ctx context.Context, params *connect.ListViewsInput, optFns ...func(*connect.Options)) (*connect.ListViewsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListViews")
	}

	var r0 *connect.ListViewsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListViewsInput, ...func(*connect.Options)) (*connect.ListViewsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ListViewsInput, ...func(*connect.Options)) *connect.ListViewsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ListViewsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ListViewsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MonitorContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) MonitorContact(ctx context.Context, params *connect.MonitorContactInput, optFns ...func(*connect.Options)) (*connect.MonitorContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MonitorContact")
	}

	var r0 *connect.MonitorContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.MonitorContactInput, ...func(*connect.Options)) (*connect.MonitorContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.MonitorContactInput, ...func(*connect.Options)) *connect.MonitorContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.MonitorContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.MonitorContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() connect.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 connect.Options
	if rf, ok := ret.Get(0).(func() connect.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(connect.Options)
	}

	return r0
}

// PauseContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PauseContact(ctx context.Context, params *connect.PauseContactInput, optFns ...func(*connect.Options)) (*connect.PauseContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PauseContact")
	}

	var r0 *connect.PauseContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.PauseContactInput, ...func(*connect.Options)) (*connect.PauseContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.PauseContactInput, ...func(*connect.Options)) *connect.PauseContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.PauseContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.PauseContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUserStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutUserStatus(ctx context.Context, params *connect.PutUserStatusInput, optFns ...func(*connect.Options)) (*connect.PutUserStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutUserStatus")
	}

	var r0 *connect.PutUserStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.PutUserStatusInput, ...func(*connect.Options)) (*connect.PutUserStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.PutUserStatusInput, ...func(*connect.Options)) *connect.PutUserStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.PutUserStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.PutUserStatusInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleasePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReleasePhoneNumber(ctx context.Context, params *connect.ReleasePhoneNumberInput, optFns ...func(*connect.Options)) (*connect.ReleasePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReleasePhoneNumber")
	}

	var r0 *connect.ReleasePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ReleasePhoneNumberInput, ...func(*connect.Options)) (*connect.ReleasePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ReleasePhoneNumberInput, ...func(*connect.Options)) *connect.ReleasePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ReleasePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ReleasePhoneNumberInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplicateInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReplicateInstance(ctx context.Context, params *connect.ReplicateInstanceInput, optFns ...func(*connect.Options)) (*connect.ReplicateInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplicateInstance")
	}

	var r0 *connect.ReplicateInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ReplicateInstanceInput, ...func(*connect.Options)) (*connect.ReplicateInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ReplicateInstanceInput, ...func(*connect.Options)) *connect.ReplicateInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ReplicateInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ReplicateInstanceInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResumeContact(ctx context.Context, params *connect.ResumeContactInput, optFns ...func(*connect.Options)) (*connect.ResumeContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResumeContact")
	}

	var r0 *connect.ResumeContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ResumeContactInput, ...func(*connect.Options)) (*connect.ResumeContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ResumeContactInput, ...func(*connect.Options)) *connect.ResumeContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ResumeContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ResumeContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeContactRecording provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResumeContactRecording(ctx context.Context, params *connect.ResumeContactRecordingInput, optFns ...func(*connect.Options)) (*connect.ResumeContactRecordingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResumeContactRecording")
	}

	var r0 *connect.ResumeContactRecordingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ResumeContactRecordingInput, ...func(*connect.Options)) (*connect.ResumeContactRecordingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.ResumeContactRecordingInput, ...func(*connect.Options)) *connect.ResumeContactRecordingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.ResumeContactRecordingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.ResumeContactRecordingInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAvailablePhoneNumbers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchAvailablePhoneNumbers(ctx context.Context, params *connect.SearchAvailablePhoneNumbersInput, optFns ...func(*connect.Options)) (*connect.SearchAvailablePhoneNumbersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchAvailablePhoneNumbers")
	}

	var r0 *connect.SearchAvailablePhoneNumbersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchAvailablePhoneNumbersInput, ...func(*connect.Options)) (*connect.SearchAvailablePhoneNumbersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchAvailablePhoneNumbersInput, ...func(*connect.Options)) *connect.SearchAvailablePhoneNumbersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchAvailablePhoneNumbersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchAvailablePhoneNumbersInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchContactFlowModules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchContactFlowModules(ctx context.Context, params *connect.SearchContactFlowModulesInput, optFns ...func(*connect.Options)) (*connect.SearchContactFlowModulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchContactFlowModules")
	}

	var r0 *connect.SearchContactFlowModulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchContactFlowModulesInput, ...func(*connect.Options)) (*connect.SearchContactFlowModulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchContactFlowModulesInput, ...func(*connect.Options)) *connect.SearchContactFlowModulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchContactFlowModulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchContactFlowModulesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchContactFlows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchContactFlows(ctx context.Context, params *connect.SearchContactFlowsInput, optFns ...func(*connect.Options)) (*connect.SearchContactFlowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchContactFlows")
	}

	var r0 *connect.SearchContactFlowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchContactFlowsInput, ...func(*connect.Options)) (*connect.SearchContactFlowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchContactFlowsInput, ...func(*connect.Options)) *connect.SearchContactFlowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchContactFlowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchContactFlowsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchContacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchContacts(ctx context.Context, params *connect.SearchContactsInput, optFns ...func(*connect.Options)) (*connect.SearchContactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchContacts")
	}

	var r0 *connect.SearchContactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchContactsInput, ...func(*connect.Options)) (*connect.SearchContactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchContactsInput, ...func(*connect.Options)) *connect.SearchContactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchContactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchContactsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchHoursOfOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchHoursOfOperations(ctx context.Context, params *connect.SearchHoursOfOperationsInput, optFns ...func(*connect.Options)) (*connect.SearchHoursOfOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchHoursOfOperations")
	}

	var r0 *connect.SearchHoursOfOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchHoursOfOperationsInput, ...func(*connect.Options)) (*connect.SearchHoursOfOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchHoursOfOperationsInput, ...func(*connect.Options)) *connect.SearchHoursOfOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchHoursOfOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchHoursOfOperationsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPredefinedAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchPredefinedAttributes(ctx context.Context, params *connect.SearchPredefinedAttributesInput, optFns ...func(*connect.Options)) (*connect.SearchPredefinedAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchPredefinedAttributes")
	}

	var r0 *connect.SearchPredefinedAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchPredefinedAttributesInput, ...func(*connect.Options)) (*connect.SearchPredefinedAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchPredefinedAttributesInput, ...func(*connect.Options)) *connect.SearchPredefinedAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchPredefinedAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchPredefinedAttributesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchPrompts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchPrompts(ctx context.Context, params *connect.SearchPromptsInput, optFns ...func(*connect.Options)) (*connect.SearchPromptsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchPrompts")
	}

	var r0 *connect.SearchPromptsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchPromptsInput, ...func(*connect.Options)) (*connect.SearchPromptsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchPromptsInput, ...func(*connect.Options)) *connect.SearchPromptsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchPromptsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchPromptsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchQueues(ctx context.Context, params *connect.SearchQueuesInput, optFns ...func(*connect.Options)) (*connect.SearchQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchQueues")
	}

	var r0 *connect.SearchQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchQueuesInput, ...func(*connect.Options)) (*connect.SearchQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchQueuesInput, ...func(*connect.Options)) *connect.SearchQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchQueuesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchQuickConnects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchQuickConnects(ctx context.Context, params *connect.SearchQuickConnectsInput, optFns ...func(*connect.Options)) (*connect.SearchQuickConnectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchQuickConnects")
	}

	var r0 *connect.SearchQuickConnectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchQuickConnectsInput, ...func(*connect.Options)) (*connect.SearchQuickConnectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchQuickConnectsInput, ...func(*connect.Options)) *connect.SearchQuickConnectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchQuickConnectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchQuickConnectsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchResourceTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchResourceTags(ctx context.Context, params *connect.SearchResourceTagsInput, optFns ...func(*connect.Options)) (*connect.SearchResourceTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchResourceTags")
	}

	var r0 *connect.SearchResourceTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchResourceTagsInput, ...func(*connect.Options)) (*connect.SearchResourceTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchResourceTagsInput, ...func(*connect.Options)) *connect.SearchResourceTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchResourceTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchResourceTagsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRoutingProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchRoutingProfiles(ctx context.Context, params *connect.SearchRoutingProfilesInput, optFns ...func(*connect.Options)) (*connect.SearchRoutingProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchRoutingProfiles")
	}

	var r0 *connect.SearchRoutingProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchRoutingProfilesInput, ...func(*connect.Options)) (*connect.SearchRoutingProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchRoutingProfilesInput, ...func(*connect.Options)) *connect.SearchRoutingProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchRoutingProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchRoutingProfilesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchSecurityProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchSecurityProfiles(ctx context.Context, params *connect.SearchSecurityProfilesInput, optFns ...func(*connect.Options)) (*connect.SearchSecurityProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchSecurityProfiles")
	}

	var r0 *connect.SearchSecurityProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchSecurityProfilesInput, ...func(*connect.Options)) (*connect.SearchSecurityProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchSecurityProfilesInput, ...func(*connect.Options)) *connect.SearchSecurityProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchSecurityProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchSecurityProfilesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchUsers(ctx context.Context, params *connect.SearchUsersInput, optFns ...func(*connect.Options)) (*connect.SearchUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 *connect.SearchUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchUsersInput, ...func(*connect.Options)) (*connect.SearchUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchUsersInput, ...func(*connect.Options)) *connect.SearchUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchUsersInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchVocabularies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchVocabularies(ctx context.Context, params *connect.SearchVocabulariesInput, optFns ...func(*connect.Options)) (*connect.SearchVocabulariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchVocabularies")
	}

	var r0 *connect.SearchVocabulariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchVocabulariesInput, ...func(*connect.Options)) (*connect.SearchVocabulariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SearchVocabulariesInput, ...func(*connect.Options)) *connect.SearchVocabulariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SearchVocabulariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SearchVocabulariesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChatIntegrationEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendChatIntegrationEvent(ctx context.Context, params *connect.SendChatIntegrationEventInput, optFns ...func(*connect.Options)) (*connect.SendChatIntegrationEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendChatIntegrationEvent")
	}

	var r0 *connect.SendChatIntegrationEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SendChatIntegrationEventInput, ...func(*connect.Options)) (*connect.SendChatIntegrationEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SendChatIntegrationEventInput, ...func(*connect.Options)) *connect.SendChatIntegrationEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SendChatIntegrationEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SendChatIntegrationEventInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAttachedFileUpload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAttachedFileUpload(ctx context.Context, params *connect.StartAttachedFileUploadInput, optFns ...func(*connect.Options)) (*connect.StartAttachedFileUploadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAttachedFileUpload")
	}

	var r0 *connect.StartAttachedFileUploadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartAttachedFileUploadInput, ...func(*connect.Options)) (*connect.StartAttachedFileUploadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartAttachedFileUploadInput, ...func(*connect.Options)) *connect.StartAttachedFileUploadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StartAttachedFileUploadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StartAttachedFileUploadInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartChatContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartChatContact(ctx context.Context, params *connect.StartChatContactInput, optFns ...func(*connect.Options)) (*connect.StartChatContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartChatContact")
	}

	var r0 *connect.StartChatContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartChatContactInput, ...func(*connect.Options)) (*connect.StartChatContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartChatContactInput, ...func(*connect.Options)) *connect.StartChatContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StartChatContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StartChatContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartContactEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartContactEvaluation(ctx context.Context, params *connect.StartContactEvaluationInput, optFns ...func(*connect.Options)) (*connect.StartContactEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartContactEvaluation")
	}

	var r0 *connect.StartContactEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartContactEvaluationInput, ...func(*connect.Options)) (*connect.StartContactEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartContactEvaluationInput, ...func(*connect.Options)) *connect.StartContactEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StartContactEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StartContactEvaluationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartContactRecording provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartContactRecording(ctx context.Context, params *connect.StartContactRecordingInput, optFns ...func(*connect.Options)) (*connect.StartContactRecordingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartContactRecording")
	}

	var r0 *connect.StartContactRecordingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartContactRecordingInput, ...func(*connect.Options)) (*connect.StartContactRecordingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartContactRecordingInput, ...func(*connect.Options)) *connect.StartContactRecordingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StartContactRecordingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StartContactRecordingInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartContactStreaming provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartContactStreaming(ctx context.Context, params *connect.StartContactStreamingInput, optFns ...func(*connect.Options)) (*connect.StartContactStreamingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartContactStreaming")
	}

	var r0 *connect.StartContactStreamingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartContactStreamingInput, ...func(*connect.Options)) (*connect.StartContactStreamingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartContactStreamingInput, ...func(*connect.Options)) *connect.StartContactStreamingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StartContactStreamingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StartContactStreamingInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartOutboundVoiceContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartOutboundVoiceContact(ctx context.Context, params *connect.StartOutboundVoiceContactInput, optFns ...func(*connect.Options)) (*connect.StartOutboundVoiceContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartOutboundVoiceContact")
	}

	var r0 *connect.StartOutboundVoiceContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartOutboundVoiceContactInput, ...func(*connect.Options)) (*connect.StartOutboundVoiceContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartOutboundVoiceContactInput, ...func(*connect.Options)) *connect.StartOutboundVoiceContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StartOutboundVoiceContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StartOutboundVoiceContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTaskContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTaskContact(ctx context.Context, params *connect.StartTaskContactInput, optFns ...func(*connect.Options)) (*connect.StartTaskContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTaskContact")
	}

	var r0 *connect.StartTaskContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartTaskContactInput, ...func(*connect.Options)) (*connect.StartTaskContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartTaskContactInput, ...func(*connect.Options)) *connect.StartTaskContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StartTaskContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StartTaskContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartWebRTCContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartWebRTCContact(ctx context.Context, params *connect.StartWebRTCContactInput, optFns ...func(*connect.Options)) (*connect.StartWebRTCContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartWebRTCContact")
	}

	var r0 *connect.StartWebRTCContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartWebRTCContactInput, ...func(*connect.Options)) (*connect.StartWebRTCContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StartWebRTCContactInput, ...func(*connect.Options)) *connect.StartWebRTCContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StartWebRTCContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StartWebRTCContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopContact(ctx context.Context, params *connect.StopContactInput, optFns ...func(*connect.Options)) (*connect.StopContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopContact")
	}

	var r0 *connect.StopContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StopContactInput, ...func(*connect.Options)) (*connect.StopContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StopContactInput, ...func(*connect.Options)) *connect.StopContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StopContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StopContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopContactRecording provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopContactRecording(ctx context.Context, params *connect.StopContactRecordingInput, optFns ...func(*connect.Options)) (*connect.StopContactRecordingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopContactRecording")
	}

	var r0 *connect.StopContactRecordingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StopContactRecordingInput, ...func(*connect.Options)) (*connect.StopContactRecordingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StopContactRecordingInput, ...func(*connect.Options)) *connect.StopContactRecordingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StopContactRecordingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StopContactRecordingInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopContactStreaming provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopContactStreaming(ctx context.Context, params *connect.StopContactStreamingInput, optFns ...func(*connect.Options)) (*connect.StopContactStreamingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopContactStreaming")
	}

	var r0 *connect.StopContactStreamingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StopContactStreamingInput, ...func(*connect.Options)) (*connect.StopContactStreamingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.StopContactStreamingInput, ...func(*connect.Options)) *connect.StopContactStreamingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.StopContactStreamingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.StopContactStreamingInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitContactEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SubmitContactEvaluation(ctx context.Context, params *connect.SubmitContactEvaluationInput, optFns ...func(*connect.Options)) (*connect.SubmitContactEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitContactEvaluation")
	}

	var r0 *connect.SubmitContactEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SubmitContactEvaluationInput, ...func(*connect.Options)) (*connect.SubmitContactEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SubmitContactEvaluationInput, ...func(*connect.Options)) *connect.SubmitContactEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SubmitContactEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SubmitContactEvaluationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SuspendContactRecording provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SuspendContactRecording(ctx context.Context, params *connect.SuspendContactRecordingInput, optFns ...func(*connect.Options)) (*connect.SuspendContactRecordingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SuspendContactRecording")
	}

	var r0 *connect.SuspendContactRecordingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SuspendContactRecordingInput, ...func(*connect.Options)) (*connect.SuspendContactRecordingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.SuspendContactRecordingInput, ...func(*connect.Options)) *connect.SuspendContactRecordingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.SuspendContactRecordingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.SuspendContactRecordingInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagContact(ctx context.Context, params *connect.TagContactInput, optFns ...func(*connect.Options)) (*connect.TagContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagContact")
	}

	var r0 *connect.TagContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.TagContactInput, ...func(*connect.Options)) (*connect.TagContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.TagContactInput, ...func(*connect.Options)) *connect.TagContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.TagContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.TagContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *connect.TagResourceInput, optFns ...func(*connect.Options)) (*connect.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *connect.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.TagResourceInput, ...func(*connect.Options)) (*connect.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.TagResourceInput, ...func(*connect.Options)) *connect.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.TagResourceInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TransferContact(ctx context.Context, params *connect.TransferContactInput, optFns ...func(*connect.Options)) (*connect.TransferContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TransferContact")
	}

	var r0 *connect.TransferContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.TransferContactInput, ...func(*connect.Options)) (*connect.TransferContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.TransferContactInput, ...func(*connect.Options)) *connect.TransferContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.TransferContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.TransferContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagContact(ctx context.Context, params *connect.UntagContactInput, optFns ...func(*connect.Options)) (*connect.UntagContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagContact")
	}

	var r0 *connect.UntagContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UntagContactInput, ...func(*connect.Options)) (*connect.UntagContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UntagContactInput, ...func(*connect.Options)) *connect.UntagContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UntagContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UntagContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *connect.UntagResourceInput, optFns ...func(*connect.Options)) (*connect.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *connect.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UntagResourceInput, ...func(*connect.Options)) (*connect.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UntagResourceInput, ...func(*connect.Options)) *connect.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UntagResourceInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAgentStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAgentStatus(ctx context.Context, params *connect.UpdateAgentStatusInput, optFns ...func(*connect.Options)) (*connect.UpdateAgentStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentStatus")
	}

	var r0 *connect.UpdateAgentStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateAgentStatusInput, ...func(*connect.Options)) (*connect.UpdateAgentStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateAgentStatusInput, ...func(*connect.Options)) *connect.UpdateAgentStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateAgentStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateAgentStatusInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthenticationProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAuthenticationProfile(ctx context.Context, params *connect.UpdateAuthenticationProfileInput, optFns ...func(*connect.Options)) (*connect.UpdateAuthenticationProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthenticationProfile")
	}

	var r0 *connect.UpdateAuthenticationProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateAuthenticationProfileInput, ...func(*connect.Options)) (*connect.UpdateAuthenticationProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateAuthenticationProfileInput, ...func(*connect.Options)) *connect.UpdateAuthenticationProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateAuthenticationProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateAuthenticationProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContact(ctx context.Context, params *connect.UpdateContactInput, optFns ...func(*connect.Options)) (*connect.UpdateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContact")
	}

	var r0 *connect.UpdateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactInput, ...func(*connect.Options)) (*connect.UpdateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactInput, ...func(*connect.Options)) *connect.UpdateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactAttributes(ctx context.Context, params *connect.UpdateContactAttributesInput, optFns ...func(*connect.Options)) (*connect.UpdateContactAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactAttributes")
	}

	var r0 *connect.UpdateContactAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactAttributesInput, ...func(*connect.Options)) (*connect.UpdateContactAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactAttributesInput, ...func(*connect.Options)) *connect.UpdateContactAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactAttributesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactEvaluation(ctx context.Context, params *connect.UpdateContactEvaluationInput, optFns ...func(*connect.Options)) (*connect.UpdateContactEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactEvaluation")
	}

	var r0 *connect.UpdateContactEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactEvaluationInput, ...func(*connect.Options)) (*connect.UpdateContactEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactEvaluationInput, ...func(*connect.Options)) *connect.UpdateContactEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactEvaluationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactFlowContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactFlowContent(ctx context.Context, params *connect.UpdateContactFlowContentInput, optFns ...func(*connect.Options)) (*connect.UpdateContactFlowContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactFlowContent")
	}

	var r0 *connect.UpdateContactFlowContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowContentInput, ...func(*connect.Options)) (*connect.UpdateContactFlowContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowContentInput, ...func(*connect.Options)) *connect.UpdateContactFlowContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactFlowContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactFlowContentInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactFlowMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactFlowMetadata(ctx context.Context, params *connect.UpdateContactFlowMetadataInput, optFns ...func(*connect.Options)) (*connect.UpdateContactFlowMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactFlowMetadata")
	}

	var r0 *connect.UpdateContactFlowMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowMetadataInput, ...func(*connect.Options)) (*connect.UpdateContactFlowMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowMetadataInput, ...func(*connect.Options)) *connect.UpdateContactFlowMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactFlowMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactFlowMetadataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactFlowModuleContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactFlowModuleContent(ctx context.Context, params *connect.UpdateContactFlowModuleContentInput, optFns ...func(*connect.Options)) (*connect.UpdateContactFlowModuleContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactFlowModuleContent")
	}

	var r0 *connect.UpdateContactFlowModuleContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowModuleContentInput, ...func(*connect.Options)) (*connect.UpdateContactFlowModuleContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowModuleContentInput, ...func(*connect.Options)) *connect.UpdateContactFlowModuleContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactFlowModuleContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactFlowModuleContentInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactFlowModuleMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactFlowModuleMetadata(ctx context.Context, params *connect.UpdateContactFlowModuleMetadataInput, optFns ...func(*connect.Options)) (*connect.UpdateContactFlowModuleMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactFlowModuleMetadata")
	}

	var r0 *connect.UpdateContactFlowModuleMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowModuleMetadataInput, ...func(*connect.Options)) (*connect.UpdateContactFlowModuleMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowModuleMetadataInput, ...func(*connect.Options)) *connect.UpdateContactFlowModuleMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactFlowModuleMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactFlowModuleMetadataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactFlowName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactFlowName(ctx context.Context, params *connect.UpdateContactFlowNameInput, optFns ...func(*connect.Options)) (*connect.UpdateContactFlowNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactFlowName")
	}

	var r0 *connect.UpdateContactFlowNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowNameInput, ...func(*connect.Options)) (*connect.UpdateContactFlowNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactFlowNameInput, ...func(*connect.Options)) *connect.UpdateContactFlowNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactFlowNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactFlowNameInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactRoutingData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactRoutingData(ctx context.Context, params *connect.UpdateContactRoutingDataInput, optFns ...func(*connect.Options)) (*connect.UpdateContactRoutingDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactRoutingData")
	}

	var r0 *connect.UpdateContactRoutingDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactRoutingDataInput, ...func(*connect.Options)) (*connect.UpdateContactRoutingDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactRoutingDataInput, ...func(*connect.Options)) *connect.UpdateContactRoutingDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactRoutingDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactRoutingDataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactSchedule(ctx context.Context, params *connect.UpdateContactScheduleInput, optFns ...func(*connect.Options)) (*connect.UpdateContactScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactSchedule")
	}

	var r0 *connect.UpdateContactScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactScheduleInput, ...func(*connect.Options)) (*connect.UpdateContactScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateContactScheduleInput, ...func(*connect.Options)) *connect.UpdateContactScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateContactScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateContactScheduleInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEvaluationForm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEvaluationForm(ctx context.Context, params *connect.UpdateEvaluationFormInput, optFns ...func(*connect.Options)) (*connect.UpdateEvaluationFormOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvaluationForm")
	}

	var r0 *connect.UpdateEvaluationFormOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateEvaluationFormInput, ...func(*connect.Options)) (*connect.UpdateEvaluationFormOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateEvaluationFormInput, ...func(*connect.Options)) *connect.UpdateEvaluationFormOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateEvaluationFormOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateEvaluationFormInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHoursOfOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHoursOfOperation(ctx context.Context, params *connect.UpdateHoursOfOperationInput, optFns ...func(*connect.Options)) (*connect.UpdateHoursOfOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHoursOfOperation")
	}

	var r0 *connect.UpdateHoursOfOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateHoursOfOperationInput, ...func(*connect.Options)) (*connect.UpdateHoursOfOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateHoursOfOperationInput, ...func(*connect.Options)) *connect.UpdateHoursOfOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateHoursOfOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateHoursOfOperationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInstanceAttribute(ctx context.Context, params *connect.UpdateInstanceAttributeInput, optFns ...func(*connect.Options)) (*connect.UpdateInstanceAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceAttribute")
	}

	var r0 *connect.UpdateInstanceAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateInstanceAttributeInput, ...func(*connect.Options)) (*connect.UpdateInstanceAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateInstanceAttributeInput, ...func(*connect.Options)) *connect.UpdateInstanceAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateInstanceAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateInstanceAttributeInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceStorageConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInstanceStorageConfig(ctx context.Context, params *connect.UpdateInstanceStorageConfigInput, optFns ...func(*connect.Options)) (*connect.UpdateInstanceStorageConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceStorageConfig")
	}

	var r0 *connect.UpdateInstanceStorageConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateInstanceStorageConfigInput, ...func(*connect.Options)) (*connect.UpdateInstanceStorageConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateInstanceStorageConfigInput, ...func(*connect.Options)) *connect.UpdateInstanceStorageConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateInstanceStorageConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateInstanceStorageConfigInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateParticipantRoleConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateParticipantRoleConfig(ctx context.Context, params *connect.UpdateParticipantRoleConfigInput, optFns ...func(*connect.Options)) (*connect.UpdateParticipantRoleConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateParticipantRoleConfig")
	}

	var r0 *connect.UpdateParticipantRoleConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateParticipantRoleConfigInput, ...func(*connect.Options)) (*connect.UpdateParticipantRoleConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateParticipantRoleConfigInput, ...func(*connect.Options)) *connect.UpdateParticipantRoleConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateParticipantRoleConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateParticipantRoleConfigInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumber provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumber(ctx context.Context, params *connect.UpdatePhoneNumberInput, optFns ...func(*connect.Options)) (*connect.UpdatePhoneNumberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumber")
	}

	var r0 *connect.UpdatePhoneNumberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdatePhoneNumberInput, ...func(*connect.Options)) (*connect.UpdatePhoneNumberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdatePhoneNumberInput, ...func(*connect.Options)) *connect.UpdatePhoneNumberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdatePhoneNumberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdatePhoneNumberInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePhoneNumberMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePhoneNumberMetadata(ctx context.Context, params *connect.UpdatePhoneNumberMetadataInput, optFns ...func(*connect.Options)) (*connect.UpdatePhoneNumberMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePhoneNumberMetadata")
	}

	var r0 *connect.UpdatePhoneNumberMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdatePhoneNumberMetadataInput, ...func(*connect.Options)) (*connect.UpdatePhoneNumberMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdatePhoneNumberMetadataInput, ...func(*connect.Options)) *connect.UpdatePhoneNumberMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdatePhoneNumberMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdatePhoneNumberMetadataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePredefinedAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePredefinedAttribute(ctx context.Context, params *connect.UpdatePredefinedAttributeInput, optFns ...func(*connect.Options)) (*connect.UpdatePredefinedAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePredefinedAttribute")
	}

	var r0 *connect.UpdatePredefinedAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdatePredefinedAttributeInput, ...func(*connect.Options)) (*connect.UpdatePredefinedAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdatePredefinedAttributeInput, ...func(*connect.Options)) *connect.UpdatePredefinedAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdatePredefinedAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdatePredefinedAttributeInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePrompt provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePrompt(ctx context.Context, params *connect.UpdatePromptInput, optFns ...func(*connect.Options)) (*connect.UpdatePromptOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrompt")
	}

	var r0 *connect.UpdatePromptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdatePromptInput, ...func(*connect.Options)) (*connect.UpdatePromptOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdatePromptInput, ...func(*connect.Options)) *connect.UpdatePromptOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdatePromptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdatePromptInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueueHoursOfOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueueHoursOfOperation(ctx context.Context, params *connect.UpdateQueueHoursOfOperationInput, optFns ...func(*connect.Options)) (*connect.UpdateQueueHoursOfOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueueHoursOfOperation")
	}

	var r0 *connect.UpdateQueueHoursOfOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueHoursOfOperationInput, ...func(*connect.Options)) (*connect.UpdateQueueHoursOfOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueHoursOfOperationInput, ...func(*connect.Options)) *connect.UpdateQueueHoursOfOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateQueueHoursOfOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateQueueHoursOfOperationInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueueMaxContacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueueMaxContacts(ctx context.Context, params *connect.UpdateQueueMaxContactsInput, optFns ...func(*connect.Options)) (*connect.UpdateQueueMaxContactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueueMaxContacts")
	}

	var r0 *connect.UpdateQueueMaxContactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueMaxContactsInput, ...func(*connect.Options)) (*connect.UpdateQueueMaxContactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueMaxContactsInput, ...func(*connect.Options)) *connect.UpdateQueueMaxContactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateQueueMaxContactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateQueueMaxContactsInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueueName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueueName(ctx context.Context, params *connect.UpdateQueueNameInput, optFns ...func(*connect.Options)) (*connect.UpdateQueueNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueueName")
	}

	var r0 *connect.UpdateQueueNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueNameInput, ...func(*connect.Options)) (*connect.UpdateQueueNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueNameInput, ...func(*connect.Options)) *connect.UpdateQueueNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateQueueNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateQueueNameInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueueOutboundCallerConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueueOutboundCallerConfig(ctx context.Context, params *connect.UpdateQueueOutboundCallerConfigInput, optFns ...func(*connect.Options)) (*connect.UpdateQueueOutboundCallerConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueueOutboundCallerConfig")
	}

	var r0 *connect.UpdateQueueOutboundCallerConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueOutboundCallerConfigInput, ...func(*connect.Options)) (*connect.UpdateQueueOutboundCallerConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueOutboundCallerConfigInput, ...func(*connect.Options)) *connect.UpdateQueueOutboundCallerConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateQueueOutboundCallerConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateQueueOutboundCallerConfigInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueueStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueueStatus(ctx context.Context, params *connect.UpdateQueueStatusInput, optFns ...func(*connect.Options)) (*connect.UpdateQueueStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueueStatus")
	}

	var r0 *connect.UpdateQueueStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueStatusInput, ...func(*connect.Options)) (*connect.UpdateQueueStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQueueStatusInput, ...func(*connect.Options)) *connect.UpdateQueueStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateQueueStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateQueueStatusInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuickConnectConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQuickConnectConfig(ctx context.Context, params *connect.UpdateQuickConnectConfigInput, optFns ...func(*connect.Options)) (*connect.UpdateQuickConnectConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuickConnectConfig")
	}

	var r0 *connect.UpdateQuickConnectConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQuickConnectConfigInput, ...func(*connect.Options)) (*connect.UpdateQuickConnectConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQuickConnectConfigInput, ...func(*connect.Options)) *connect.UpdateQuickConnectConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateQuickConnectConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateQuickConnectConfigInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuickConnectName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQuickConnectName(ctx context.Context, params *connect.UpdateQuickConnectNameInput, optFns ...func(*connect.Options)) (*connect.UpdateQuickConnectNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuickConnectName")
	}

	var r0 *connect.UpdateQuickConnectNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQuickConnectNameInput, ...func(*connect.Options)) (*connect.UpdateQuickConnectNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateQuickConnectNameInput, ...func(*connect.Options)) *connect.UpdateQuickConnectNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateQuickConnectNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateQuickConnectNameInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoutingProfileAgentAvailabilityTimer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoutingProfileAgentAvailabilityTimer(ctx context.Context, params *connect.UpdateRoutingProfileAgentAvailabilityTimerInput, optFns ...func(*connect.Options)) (*connect.UpdateRoutingProfileAgentAvailabilityTimerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoutingProfileAgentAvailabilityTimer")
	}

	var r0 *connect.UpdateRoutingProfileAgentAvailabilityTimerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileAgentAvailabilityTimerInput, ...func(*connect.Options)) (*connect.UpdateRoutingProfileAgentAvailabilityTimerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileAgentAvailabilityTimerInput, ...func(*connect.Options)) *connect.UpdateRoutingProfileAgentAvailabilityTimerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateRoutingProfileAgentAvailabilityTimerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateRoutingProfileAgentAvailabilityTimerInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoutingProfileConcurrency provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoutingProfileConcurrency(ctx context.Context, params *connect.UpdateRoutingProfileConcurrencyInput, optFns ...func(*connect.Options)) (*connect.UpdateRoutingProfileConcurrencyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoutingProfileConcurrency")
	}

	var r0 *connect.UpdateRoutingProfileConcurrencyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileConcurrencyInput, ...func(*connect.Options)) (*connect.UpdateRoutingProfileConcurrencyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileConcurrencyInput, ...func(*connect.Options)) *connect.UpdateRoutingProfileConcurrencyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateRoutingProfileConcurrencyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateRoutingProfileConcurrencyInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoutingProfileDefaultOutboundQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoutingProfileDefaultOutboundQueue(ctx context.Context, params *connect.UpdateRoutingProfileDefaultOutboundQueueInput, optFns ...func(*connect.Options)) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoutingProfileDefaultOutboundQueue")
	}

	var r0 *connect.UpdateRoutingProfileDefaultOutboundQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileDefaultOutboundQueueInput, ...func(*connect.Options)) (*connect.UpdateRoutingProfileDefaultOutboundQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileDefaultOutboundQueueInput, ...func(*connect.Options)) *connect.UpdateRoutingProfileDefaultOutboundQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateRoutingProfileDefaultOutboundQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateRoutingProfileDefaultOutboundQueueInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoutingProfileName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoutingProfileName(ctx context.Context, params *connect.UpdateRoutingProfileNameInput, optFns ...func(*connect.Options)) (*connect.UpdateRoutingProfileNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoutingProfileName")
	}

	var r0 *connect.UpdateRoutingProfileNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileNameInput, ...func(*connect.Options)) (*connect.UpdateRoutingProfileNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileNameInput, ...func(*connect.Options)) *connect.UpdateRoutingProfileNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateRoutingProfileNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateRoutingProfileNameInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoutingProfileQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoutingProfileQueues(ctx context.Context, params *connect.UpdateRoutingProfileQueuesInput, optFns ...func(*connect.Options)) (*connect.UpdateRoutingProfileQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoutingProfileQueues")
	}

	var r0 *connect.UpdateRoutingProfileQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileQueuesInput, ...func(*connect.Options)) (*connect.UpdateRoutingProfileQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRoutingProfileQueuesInput, ...func(*connect.Options)) *connect.UpdateRoutingProfileQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateRoutingProfileQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateRoutingProfileQueuesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRule(ctx context.Context, params *connect.UpdateRuleInput, optFns ...func(*connect.Options)) (*connect.UpdateRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRule")
	}

	var r0 *connect.UpdateRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRuleInput, ...func(*connect.Options)) (*connect.UpdateRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateRuleInput, ...func(*connect.Options)) *connect.UpdateRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateRuleInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSecurityProfile(ctx context.Context, params *connect.UpdateSecurityProfileInput, optFns ...func(*connect.Options)) (*connect.UpdateSecurityProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecurityProfile")
	}

	var r0 *connect.UpdateSecurityProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateSecurityProfileInput, ...func(*connect.Options)) (*connect.UpdateSecurityProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateSecurityProfileInput, ...func(*connect.Options)) *connect.UpdateSecurityProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateSecurityProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateSecurityProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTaskTemplate(ctx context.Context, params *connect.UpdateTaskTemplateInput, optFns ...func(*connect.Options)) (*connect.UpdateTaskTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskTemplate")
	}

	var r0 *connect.UpdateTaskTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateTaskTemplateInput, ...func(*connect.Options)) (*connect.UpdateTaskTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateTaskTemplateInput, ...func(*connect.Options)) *connect.UpdateTaskTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateTaskTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateTaskTemplateInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrafficDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrafficDistribution(ctx context.Context, params *connect.UpdateTrafficDistributionInput, optFns ...func(*connect.Options)) (*connect.UpdateTrafficDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrafficDistribution")
	}

	var r0 *connect.UpdateTrafficDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateTrafficDistributionInput, ...func(*connect.Options)) (*connect.UpdateTrafficDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateTrafficDistributionInput, ...func(*connect.Options)) *connect.UpdateTrafficDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateTrafficDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateTrafficDistributionInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserHierarchy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserHierarchy(ctx context.Context, params *connect.UpdateUserHierarchyInput, optFns ...func(*connect.Options)) (*connect.UpdateUserHierarchyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserHierarchy")
	}

	var r0 *connect.UpdateUserHierarchyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserHierarchyInput, ...func(*connect.Options)) (*connect.UpdateUserHierarchyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserHierarchyInput, ...func(*connect.Options)) *connect.UpdateUserHierarchyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateUserHierarchyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateUserHierarchyInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserHierarchyGroupName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserHierarchyGroupName(ctx context.Context, params *connect.UpdateUserHierarchyGroupNameInput, optFns ...func(*connect.Options)) (*connect.UpdateUserHierarchyGroupNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserHierarchyGroupName")
	}

	var r0 *connect.UpdateUserHierarchyGroupNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserHierarchyGroupNameInput, ...func(*connect.Options)) (*connect.UpdateUserHierarchyGroupNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserHierarchyGroupNameInput, ...func(*connect.Options)) *connect.UpdateUserHierarchyGroupNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateUserHierarchyGroupNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateUserHierarchyGroupNameInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserHierarchyStructure provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserHierarchyStructure(ctx context.Context, params *connect.UpdateUserHierarchyStructureInput, optFns ...func(*connect.Options)) (*connect.UpdateUserHierarchyStructureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserHierarchyStructure")
	}

	var r0 *connect.UpdateUserHierarchyStructureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserHierarchyStructureInput, ...func(*connect.Options)) (*connect.UpdateUserHierarchyStructureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserHierarchyStructureInput, ...func(*connect.Options)) *connect.UpdateUserHierarchyStructureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateUserHierarchyStructureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateUserHierarchyStructureInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserIdentityInfo provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserIdentityInfo(ctx context.Context, params *connect.UpdateUserIdentityInfoInput, optFns ...func(*connect.Options)) (*connect.UpdateUserIdentityInfoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserIdentityInfo")
	}

	var r0 *connect.UpdateUserIdentityInfoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserIdentityInfoInput, ...func(*connect.Options)) (*connect.UpdateUserIdentityInfoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserIdentityInfoInput, ...func(*connect.Options)) *connect.UpdateUserIdentityInfoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateUserIdentityInfoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateUserIdentityInfoInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserPhoneConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserPhoneConfig(ctx context.Context, params *connect.UpdateUserPhoneConfigInput, optFns ...func(*connect.Options)) (*connect.UpdateUserPhoneConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPhoneConfig")
	}

	var r0 *connect.UpdateUserPhoneConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserPhoneConfigInput, ...func(*connect.Options)) (*connect.UpdateUserPhoneConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserPhoneConfigInput, ...func(*connect.Options)) *connect.UpdateUserPhoneConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateUserPhoneConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateUserPhoneConfigInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserProficiencies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserProficiencies(ctx context.Context, params *connect.UpdateUserProficienciesInput, optFns ...func(*connect.Options)) (*connect.UpdateUserProficienciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProficiencies")
	}

	var r0 *connect.UpdateUserProficienciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserProficienciesInput, ...func(*connect.Options)) (*connect.UpdateUserProficienciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserProficienciesInput, ...func(*connect.Options)) *connect.UpdateUserProficienciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateUserProficienciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateUserProficienciesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserRoutingProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserRoutingProfile(ctx context.Context, params *connect.UpdateUserRoutingProfileInput, optFns ...func(*connect.Options)) (*connect.UpdateUserRoutingProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserRoutingProfile")
	}

	var r0 *connect.UpdateUserRoutingProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserRoutingProfileInput, ...func(*connect.Options)) (*connect.UpdateUserRoutingProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserRoutingProfileInput, ...func(*connect.Options)) *connect.UpdateUserRoutingProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateUserRoutingProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateUserRoutingProfileInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserSecurityProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserSecurityProfiles(ctx context.Context, params *connect.UpdateUserSecurityProfilesInput, optFns ...func(*connect.Options)) (*connect.UpdateUserSecurityProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSecurityProfiles")
	}

	var r0 *connect.UpdateUserSecurityProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserSecurityProfilesInput, ...func(*connect.Options)) (*connect.UpdateUserSecurityProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateUserSecurityProfilesInput, ...func(*connect.Options)) *connect.UpdateUserSecurityProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateUserSecurityProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateUserSecurityProfilesInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateViewContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateViewContent(ctx context.Context, params *connect.UpdateViewContentInput, optFns ...func(*connect.Options)) (*connect.UpdateViewContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateViewContent")
	}

	var r0 *connect.UpdateViewContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateViewContentInput, ...func(*connect.Options)) (*connect.UpdateViewContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateViewContentInput, ...func(*connect.Options)) *connect.UpdateViewContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateViewContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateViewContentInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateViewMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateViewMetadata(ctx context.Context, params *connect.UpdateViewMetadataInput, optFns ...func(*connect.Options)) (*connect.UpdateViewMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateViewMetadata")
	}

	var r0 *connect.UpdateViewMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateViewMetadataInput, ...func(*connect.Options)) (*connect.UpdateViewMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connect.UpdateViewMetadataInput, ...func(*connect.Options)) *connect.UpdateViewMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connect.UpdateViewMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connect.UpdateViewMetadataInput, ...func(*connect.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
