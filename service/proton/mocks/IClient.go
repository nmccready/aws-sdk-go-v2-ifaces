// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	proton "github.com/aws/aws-sdk-go-v2/service/proton"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptEnvironmentAccountConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptEnvironmentAccountConnection(ctx context.Context, params *proton.AcceptEnvironmentAccountConnectionInput, optFns ...func(*proton.Options)) (*proton.AcceptEnvironmentAccountConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptEnvironmentAccountConnection")
	}

	var r0 *proton.AcceptEnvironmentAccountConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.AcceptEnvironmentAccountConnectionInput, ...func(*proton.Options)) (*proton.AcceptEnvironmentAccountConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.AcceptEnvironmentAccountConnectionInput, ...func(*proton.Options)) *proton.AcceptEnvironmentAccountConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.AcceptEnvironmentAccountConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.AcceptEnvironmentAccountConnectionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelComponentDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelComponentDeployment(ctx context.Context, params *proton.CancelComponentDeploymentInput, optFns ...func(*proton.Options)) (*proton.CancelComponentDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelComponentDeployment")
	}

	var r0 *proton.CancelComponentDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CancelComponentDeploymentInput, ...func(*proton.Options)) (*proton.CancelComponentDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CancelComponentDeploymentInput, ...func(*proton.Options)) *proton.CancelComponentDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CancelComponentDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CancelComponentDeploymentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelEnvironmentDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelEnvironmentDeployment(ctx context.Context, params *proton.CancelEnvironmentDeploymentInput, optFns ...func(*proton.Options)) (*proton.CancelEnvironmentDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelEnvironmentDeployment")
	}

	var r0 *proton.CancelEnvironmentDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CancelEnvironmentDeploymentInput, ...func(*proton.Options)) (*proton.CancelEnvironmentDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CancelEnvironmentDeploymentInput, ...func(*proton.Options)) *proton.CancelEnvironmentDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CancelEnvironmentDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CancelEnvironmentDeploymentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelServiceInstanceDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelServiceInstanceDeployment(ctx context.Context, params *proton.CancelServiceInstanceDeploymentInput, optFns ...func(*proton.Options)) (*proton.CancelServiceInstanceDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelServiceInstanceDeployment")
	}

	var r0 *proton.CancelServiceInstanceDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CancelServiceInstanceDeploymentInput, ...func(*proton.Options)) (*proton.CancelServiceInstanceDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CancelServiceInstanceDeploymentInput, ...func(*proton.Options)) *proton.CancelServiceInstanceDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CancelServiceInstanceDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CancelServiceInstanceDeploymentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelServicePipelineDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelServicePipelineDeployment(ctx context.Context, params *proton.CancelServicePipelineDeploymentInput, optFns ...func(*proton.Options)) (*proton.CancelServicePipelineDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelServicePipelineDeployment")
	}

	var r0 *proton.CancelServicePipelineDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CancelServicePipelineDeploymentInput, ...func(*proton.Options)) (*proton.CancelServicePipelineDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CancelServicePipelineDeploymentInput, ...func(*proton.Options)) *proton.CancelServicePipelineDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CancelServicePipelineDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CancelServicePipelineDeploymentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComponent(ctx context.Context, params *proton.CreateComponentInput, optFns ...func(*proton.Options)) (*proton.CreateComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponent")
	}

	var r0 *proton.CreateComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateComponentInput, ...func(*proton.Options)) (*proton.CreateComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateComponentInput, ...func(*proton.Options)) *proton.CreateComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateComponentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironment(ctx context.Context, params *proton.CreateEnvironmentInput, optFns ...func(*proton.Options)) (*proton.CreateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironment")
	}

	var r0 *proton.CreateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateEnvironmentInput, ...func(*proton.Options)) (*proton.CreateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateEnvironmentInput, ...func(*proton.Options)) *proton.CreateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateEnvironmentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentAccountConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironmentAccountConnection(ctx context.Context, params *proton.CreateEnvironmentAccountConnectionInput, optFns ...func(*proton.Options)) (*proton.CreateEnvironmentAccountConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentAccountConnection")
	}

	var r0 *proton.CreateEnvironmentAccountConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateEnvironmentAccountConnectionInput, ...func(*proton.Options)) (*proton.CreateEnvironmentAccountConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateEnvironmentAccountConnectionInput, ...func(*proton.Options)) *proton.CreateEnvironmentAccountConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateEnvironmentAccountConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateEnvironmentAccountConnectionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironmentTemplate(ctx context.Context, params *proton.CreateEnvironmentTemplateInput, optFns ...func(*proton.Options)) (*proton.CreateEnvironmentTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentTemplate")
	}

	var r0 *proton.CreateEnvironmentTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateEnvironmentTemplateInput, ...func(*proton.Options)) (*proton.CreateEnvironmentTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateEnvironmentTemplateInput, ...func(*proton.Options)) *proton.CreateEnvironmentTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateEnvironmentTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateEnvironmentTemplateInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironmentTemplateVersion(ctx context.Context, params *proton.CreateEnvironmentTemplateVersionInput, optFns ...func(*proton.Options)) (*proton.CreateEnvironmentTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentTemplateVersion")
	}

	var r0 *proton.CreateEnvironmentTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateEnvironmentTemplateVersionInput, ...func(*proton.Options)) (*proton.CreateEnvironmentTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateEnvironmentTemplateVersionInput, ...func(*proton.Options)) *proton.CreateEnvironmentTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateEnvironmentTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateEnvironmentTemplateVersionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRepository provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRepository(ctx context.Context, params *proton.CreateRepositoryInput, optFns ...func(*proton.Options)) (*proton.CreateRepositoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepository")
	}

	var r0 *proton.CreateRepositoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateRepositoryInput, ...func(*proton.Options)) (*proton.CreateRepositoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateRepositoryInput, ...func(*proton.Options)) *proton.CreateRepositoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateRepositoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateRepositoryInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateService(ctx context.Context, params *proton.CreateServiceInput, optFns ...func(*proton.Options)) (*proton.CreateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *proton.CreateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceInput, ...func(*proton.Options)) (*proton.CreateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceInput, ...func(*proton.Options)) *proton.CreateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateServiceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceInstance(ctx context.Context, params *proton.CreateServiceInstanceInput, optFns ...func(*proton.Options)) (*proton.CreateServiceInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceInstance")
	}

	var r0 *proton.CreateServiceInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceInstanceInput, ...func(*proton.Options)) (*proton.CreateServiceInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceInstanceInput, ...func(*proton.Options)) *proton.CreateServiceInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateServiceInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateServiceInstanceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceSyncConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceSyncConfig(ctx context.Context, params *proton.CreateServiceSyncConfigInput, optFns ...func(*proton.Options)) (*proton.CreateServiceSyncConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceSyncConfig")
	}

	var r0 *proton.CreateServiceSyncConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceSyncConfigInput, ...func(*proton.Options)) (*proton.CreateServiceSyncConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceSyncConfigInput, ...func(*proton.Options)) *proton.CreateServiceSyncConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateServiceSyncConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateServiceSyncConfigInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceTemplate(ctx context.Context, params *proton.CreateServiceTemplateInput, optFns ...func(*proton.Options)) (*proton.CreateServiceTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceTemplate")
	}

	var r0 *proton.CreateServiceTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceTemplateInput, ...func(*proton.Options)) (*proton.CreateServiceTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceTemplateInput, ...func(*proton.Options)) *proton.CreateServiceTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateServiceTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateServiceTemplateInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceTemplateVersion(ctx context.Context, params *proton.CreateServiceTemplateVersionInput, optFns ...func(*proton.Options)) (*proton.CreateServiceTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceTemplateVersion")
	}

	var r0 *proton.CreateServiceTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceTemplateVersionInput, ...func(*proton.Options)) (*proton.CreateServiceTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateServiceTemplateVersionInput, ...func(*proton.Options)) *proton.CreateServiceTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateServiceTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateServiceTemplateVersionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTemplateSyncConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTemplateSyncConfig(ctx context.Context, params *proton.CreateTemplateSyncConfigInput, optFns ...func(*proton.Options)) (*proton.CreateTemplateSyncConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplateSyncConfig")
	}

	var r0 *proton.CreateTemplateSyncConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateTemplateSyncConfigInput, ...func(*proton.Options)) (*proton.CreateTemplateSyncConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.CreateTemplateSyncConfigInput, ...func(*proton.Options)) *proton.CreateTemplateSyncConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.CreateTemplateSyncConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.CreateTemplateSyncConfigInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteComponent(ctx context.Context, params *proton.DeleteComponentInput, optFns ...func(*proton.Options)) (*proton.DeleteComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponent")
	}

	var r0 *proton.DeleteComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteComponentInput, ...func(*proton.Options)) (*proton.DeleteComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteComponentInput, ...func(*proton.Options)) *proton.DeleteComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteComponentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeployment(ctx context.Context, params *proton.DeleteDeploymentInput, optFns ...func(*proton.Options)) (*proton.DeleteDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 *proton.DeleteDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteDeploymentInput, ...func(*proton.Options)) (*proton.DeleteDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteDeploymentInput, ...func(*proton.Options)) *proton.DeleteDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteDeploymentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironment(ctx context.Context, params *proton.DeleteEnvironmentInput, optFns ...func(*proton.Options)) (*proton.DeleteEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 *proton.DeleteEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteEnvironmentInput, ...func(*proton.Options)) (*proton.DeleteEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteEnvironmentInput, ...func(*proton.Options)) *proton.DeleteEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteEnvironmentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentAccountConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentAccountConnection(ctx context.Context, params *proton.DeleteEnvironmentAccountConnectionInput, optFns ...func(*proton.Options)) (*proton.DeleteEnvironmentAccountConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentAccountConnection")
	}

	var r0 *proton.DeleteEnvironmentAccountConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteEnvironmentAccountConnectionInput, ...func(*proton.Options)) (*proton.DeleteEnvironmentAccountConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteEnvironmentAccountConnectionInput, ...func(*proton.Options)) *proton.DeleteEnvironmentAccountConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteEnvironmentAccountConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteEnvironmentAccountConnectionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentTemplate(ctx context.Context, params *proton.DeleteEnvironmentTemplateInput, optFns ...func(*proton.Options)) (*proton.DeleteEnvironmentTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentTemplate")
	}

	var r0 *proton.DeleteEnvironmentTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteEnvironmentTemplateInput, ...func(*proton.Options)) (*proton.DeleteEnvironmentTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteEnvironmentTemplateInput, ...func(*proton.Options)) *proton.DeleteEnvironmentTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteEnvironmentTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteEnvironmentTemplateInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentTemplateVersion(ctx context.Context, params *proton.DeleteEnvironmentTemplateVersionInput, optFns ...func(*proton.Options)) (*proton.DeleteEnvironmentTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentTemplateVersion")
	}

	var r0 *proton.DeleteEnvironmentTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteEnvironmentTemplateVersionInput, ...func(*proton.Options)) (*proton.DeleteEnvironmentTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteEnvironmentTemplateVersionInput, ...func(*proton.Options)) *proton.DeleteEnvironmentTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteEnvironmentTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteEnvironmentTemplateVersionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepository provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRepository(ctx context.Context, params *proton.DeleteRepositoryInput, optFns ...func(*proton.Options)) (*proton.DeleteRepositoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepository")
	}

	var r0 *proton.DeleteRepositoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteRepositoryInput, ...func(*proton.Options)) (*proton.DeleteRepositoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteRepositoryInput, ...func(*proton.Options)) *proton.DeleteRepositoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteRepositoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteRepositoryInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteService(ctx context.Context, params *proton.DeleteServiceInput, optFns ...func(*proton.Options)) (*proton.DeleteServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 *proton.DeleteServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteServiceInput, ...func(*proton.Options)) (*proton.DeleteServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteServiceInput, ...func(*proton.Options)) *proton.DeleteServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteServiceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceSyncConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceSyncConfig(ctx context.Context, params *proton.DeleteServiceSyncConfigInput, optFns ...func(*proton.Options)) (*proton.DeleteServiceSyncConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceSyncConfig")
	}

	var r0 *proton.DeleteServiceSyncConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteServiceSyncConfigInput, ...func(*proton.Options)) (*proton.DeleteServiceSyncConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteServiceSyncConfigInput, ...func(*proton.Options)) *proton.DeleteServiceSyncConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteServiceSyncConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteServiceSyncConfigInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceTemplate(ctx context.Context, params *proton.DeleteServiceTemplateInput, optFns ...func(*proton.Options)) (*proton.DeleteServiceTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceTemplate")
	}

	var r0 *proton.DeleteServiceTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteServiceTemplateInput, ...func(*proton.Options)) (*proton.DeleteServiceTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteServiceTemplateInput, ...func(*proton.Options)) *proton.DeleteServiceTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteServiceTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteServiceTemplateInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceTemplateVersion(ctx context.Context, params *proton.DeleteServiceTemplateVersionInput, optFns ...func(*proton.Options)) (*proton.DeleteServiceTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceTemplateVersion")
	}

	var r0 *proton.DeleteServiceTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteServiceTemplateVersionInput, ...func(*proton.Options)) (*proton.DeleteServiceTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteServiceTemplateVersionInput, ...func(*proton.Options)) *proton.DeleteServiceTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteServiceTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteServiceTemplateVersionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplateSyncConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTemplateSyncConfig(ctx context.Context, params *proton.DeleteTemplateSyncConfigInput, optFns ...func(*proton.Options)) (*proton.DeleteTemplateSyncConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplateSyncConfig")
	}

	var r0 *proton.DeleteTemplateSyncConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteTemplateSyncConfigInput, ...func(*proton.Options)) (*proton.DeleteTemplateSyncConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.DeleteTemplateSyncConfigInput, ...func(*proton.Options)) *proton.DeleteTemplateSyncConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.DeleteTemplateSyncConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.DeleteTemplateSyncConfigInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountSettings(ctx context.Context, params *proton.GetAccountSettingsInput, optFns ...func(*proton.Options)) (*proton.GetAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountSettings")
	}

	var r0 *proton.GetAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetAccountSettingsInput, ...func(*proton.Options)) (*proton.GetAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetAccountSettingsInput, ...func(*proton.Options)) *proton.GetAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetAccountSettingsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComponent(ctx context.Context, params *proton.GetComponentInput, optFns ...func(*proton.Options)) (*proton.GetComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComponent")
	}

	var r0 *proton.GetComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetComponentInput, ...func(*proton.Options)) (*proton.GetComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetComponentInput, ...func(*proton.Options)) *proton.GetComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetComponentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployment(ctx context.Context, params *proton.GetDeploymentInput, optFns ...func(*proton.Options)) (*proton.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *proton.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetDeploymentInput, ...func(*proton.Options)) (*proton.GetDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetDeploymentInput, ...func(*proton.Options)) *proton.GetDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetDeploymentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironment(ctx context.Context, params *proton.GetEnvironmentInput, optFns ...func(*proton.Options)) (*proton.GetEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironment")
	}

	var r0 *proton.GetEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetEnvironmentInput, ...func(*proton.Options)) (*proton.GetEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetEnvironmentInput, ...func(*proton.Options)) *proton.GetEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetEnvironmentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentAccountConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironmentAccountConnection(ctx context.Context, params *proton.GetEnvironmentAccountConnectionInput, optFns ...func(*proton.Options)) (*proton.GetEnvironmentAccountConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentAccountConnection")
	}

	var r0 *proton.GetEnvironmentAccountConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetEnvironmentAccountConnectionInput, ...func(*proton.Options)) (*proton.GetEnvironmentAccountConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetEnvironmentAccountConnectionInput, ...func(*proton.Options)) *proton.GetEnvironmentAccountConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetEnvironmentAccountConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetEnvironmentAccountConnectionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironmentTemplate(ctx context.Context, params *proton.GetEnvironmentTemplateInput, optFns ...func(*proton.Options)) (*proton.GetEnvironmentTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentTemplate")
	}

	var r0 *proton.GetEnvironmentTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetEnvironmentTemplateInput, ...func(*proton.Options)) (*proton.GetEnvironmentTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetEnvironmentTemplateInput, ...func(*proton.Options)) *proton.GetEnvironmentTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetEnvironmentTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetEnvironmentTemplateInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironmentTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironmentTemplateVersion(ctx context.Context, params *proton.GetEnvironmentTemplateVersionInput, optFns ...func(*proton.Options)) (*proton.GetEnvironmentTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironmentTemplateVersion")
	}

	var r0 *proton.GetEnvironmentTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetEnvironmentTemplateVersionInput, ...func(*proton.Options)) (*proton.GetEnvironmentTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetEnvironmentTemplateVersionInput, ...func(*proton.Options)) *proton.GetEnvironmentTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetEnvironmentTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetEnvironmentTemplateVersionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepository provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRepository(ctx context.Context, params *proton.GetRepositoryInput, optFns ...func(*proton.Options)) (*proton.GetRepositoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRepository")
	}

	var r0 *proton.GetRepositoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetRepositoryInput, ...func(*proton.Options)) (*proton.GetRepositoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetRepositoryInput, ...func(*proton.Options)) *proton.GetRepositoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetRepositoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetRepositoryInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepositorySyncStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRepositorySyncStatus(ctx context.Context, params *proton.GetRepositorySyncStatusInput, optFns ...func(*proton.Options)) (*proton.GetRepositorySyncStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositorySyncStatus")
	}

	var r0 *proton.GetRepositorySyncStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetRepositorySyncStatusInput, ...func(*proton.Options)) (*proton.GetRepositorySyncStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetRepositorySyncStatusInput, ...func(*proton.Options)) *proton.GetRepositorySyncStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetRepositorySyncStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetRepositorySyncStatusInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcesSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcesSummary(ctx context.Context, params *proton.GetResourcesSummaryInput, optFns ...func(*proton.Options)) (*proton.GetResourcesSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesSummary")
	}

	var r0 *proton.GetResourcesSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetResourcesSummaryInput, ...func(*proton.Options)) (*proton.GetResourcesSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetResourcesSummaryInput, ...func(*proton.Options)) *proton.GetResourcesSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetResourcesSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetResourcesSummaryInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetService(ctx context.Context, params *proton.GetServiceInput, optFns ...func(*proton.Options)) (*proton.GetServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *proton.GetServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceInput, ...func(*proton.Options)) (*proton.GetServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceInput, ...func(*proton.Options)) *proton.GetServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetServiceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceInstance(ctx context.Context, params *proton.GetServiceInstanceInput, optFns ...func(*proton.Options)) (*proton.GetServiceInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceInstance")
	}

	var r0 *proton.GetServiceInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceInstanceInput, ...func(*proton.Options)) (*proton.GetServiceInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceInstanceInput, ...func(*proton.Options)) *proton.GetServiceInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetServiceInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetServiceInstanceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceInstanceSyncStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceInstanceSyncStatus(ctx context.Context, params *proton.GetServiceInstanceSyncStatusInput, optFns ...func(*proton.Options)) (*proton.GetServiceInstanceSyncStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceInstanceSyncStatus")
	}

	var r0 *proton.GetServiceInstanceSyncStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceInstanceSyncStatusInput, ...func(*proton.Options)) (*proton.GetServiceInstanceSyncStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceInstanceSyncStatusInput, ...func(*proton.Options)) *proton.GetServiceInstanceSyncStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetServiceInstanceSyncStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetServiceInstanceSyncStatusInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceSyncBlockerSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceSyncBlockerSummary(ctx context.Context, params *proton.GetServiceSyncBlockerSummaryInput, optFns ...func(*proton.Options)) (*proton.GetServiceSyncBlockerSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceSyncBlockerSummary")
	}

	var r0 *proton.GetServiceSyncBlockerSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceSyncBlockerSummaryInput, ...func(*proton.Options)) (*proton.GetServiceSyncBlockerSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceSyncBlockerSummaryInput, ...func(*proton.Options)) *proton.GetServiceSyncBlockerSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetServiceSyncBlockerSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetServiceSyncBlockerSummaryInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceSyncConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceSyncConfig(ctx context.Context, params *proton.GetServiceSyncConfigInput, optFns ...func(*proton.Options)) (*proton.GetServiceSyncConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceSyncConfig")
	}

	var r0 *proton.GetServiceSyncConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceSyncConfigInput, ...func(*proton.Options)) (*proton.GetServiceSyncConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceSyncConfigInput, ...func(*proton.Options)) *proton.GetServiceSyncConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetServiceSyncConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetServiceSyncConfigInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceTemplate(ctx context.Context, params *proton.GetServiceTemplateInput, optFns ...func(*proton.Options)) (*proton.GetServiceTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceTemplate")
	}

	var r0 *proton.GetServiceTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceTemplateInput, ...func(*proton.Options)) (*proton.GetServiceTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceTemplateInput, ...func(*proton.Options)) *proton.GetServiceTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetServiceTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetServiceTemplateInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceTemplateVersion(ctx context.Context, params *proton.GetServiceTemplateVersionInput, optFns ...func(*proton.Options)) (*proton.GetServiceTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceTemplateVersion")
	}

	var r0 *proton.GetServiceTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceTemplateVersionInput, ...func(*proton.Options)) (*proton.GetServiceTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetServiceTemplateVersionInput, ...func(*proton.Options)) *proton.GetServiceTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetServiceTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetServiceTemplateVersionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplateSyncConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTemplateSyncConfig(ctx context.Context, params *proton.GetTemplateSyncConfigInput, optFns ...func(*proton.Options)) (*proton.GetTemplateSyncConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateSyncConfig")
	}

	var r0 *proton.GetTemplateSyncConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetTemplateSyncConfigInput, ...func(*proton.Options)) (*proton.GetTemplateSyncConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetTemplateSyncConfigInput, ...func(*proton.Options)) *proton.GetTemplateSyncConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetTemplateSyncConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetTemplateSyncConfigInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplateSyncStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTemplateSyncStatus(ctx context.Context, params *proton.GetTemplateSyncStatusInput, optFns ...func(*proton.Options)) (*proton.GetTemplateSyncStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplateSyncStatus")
	}

	var r0 *proton.GetTemplateSyncStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetTemplateSyncStatusInput, ...func(*proton.Options)) (*proton.GetTemplateSyncStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.GetTemplateSyncStatusInput, ...func(*proton.Options)) *proton.GetTemplateSyncStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.GetTemplateSyncStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.GetTemplateSyncStatusInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponentOutputs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponentOutputs(ctx context.Context, params *proton.ListComponentOutputsInput, optFns ...func(*proton.Options)) (*proton.ListComponentOutputsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentOutputs")
	}

	var r0 *proton.ListComponentOutputsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListComponentOutputsInput, ...func(*proton.Options)) (*proton.ListComponentOutputsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListComponentOutputsInput, ...func(*proton.Options)) *proton.ListComponentOutputsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListComponentOutputsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListComponentOutputsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponentProvisionedResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponentProvisionedResources(ctx context.Context, params *proton.ListComponentProvisionedResourcesInput, optFns ...func(*proton.Options)) (*proton.ListComponentProvisionedResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentProvisionedResources")
	}

	var r0 *proton.ListComponentProvisionedResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListComponentProvisionedResourcesInput, ...func(*proton.Options)) (*proton.ListComponentProvisionedResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListComponentProvisionedResourcesInput, ...func(*proton.Options)) *proton.ListComponentProvisionedResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListComponentProvisionedResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListComponentProvisionedResourcesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponents(ctx context.Context, params *proton.ListComponentsInput, optFns ...func(*proton.Options)) (*proton.ListComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponents")
	}

	var r0 *proton.ListComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListComponentsInput, ...func(*proton.Options)) (*proton.ListComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListComponentsInput, ...func(*proton.Options)) *proton.ListComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListComponentsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeployments(ctx context.Context, params *proton.ListDeploymentsInput, optFns ...func(*proton.Options)) (*proton.ListDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 *proton.ListDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListDeploymentsInput, ...func(*proton.Options)) (*proton.ListDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListDeploymentsInput, ...func(*proton.Options)) *proton.ListDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListDeploymentsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentAccountConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentAccountConnections(ctx context.Context, params *proton.ListEnvironmentAccountConnectionsInput, optFns ...func(*proton.Options)) (*proton.ListEnvironmentAccountConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentAccountConnections")
	}

	var r0 *proton.ListEnvironmentAccountConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentAccountConnectionsInput, ...func(*proton.Options)) (*proton.ListEnvironmentAccountConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentAccountConnectionsInput, ...func(*proton.Options)) *proton.ListEnvironmentAccountConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListEnvironmentAccountConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListEnvironmentAccountConnectionsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentOutputs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentOutputs(ctx context.Context, params *proton.ListEnvironmentOutputsInput, optFns ...func(*proton.Options)) (*proton.ListEnvironmentOutputsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentOutputs")
	}

	var r0 *proton.ListEnvironmentOutputsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentOutputsInput, ...func(*proton.Options)) (*proton.ListEnvironmentOutputsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentOutputsInput, ...func(*proton.Options)) *proton.ListEnvironmentOutputsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListEnvironmentOutputsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListEnvironmentOutputsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentProvisionedResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentProvisionedResources(ctx context.Context, params *proton.ListEnvironmentProvisionedResourcesInput, optFns ...func(*proton.Options)) (*proton.ListEnvironmentProvisionedResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentProvisionedResources")
	}

	var r0 *proton.ListEnvironmentProvisionedResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentProvisionedResourcesInput, ...func(*proton.Options)) (*proton.ListEnvironmentProvisionedResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentProvisionedResourcesInput, ...func(*proton.Options)) *proton.ListEnvironmentProvisionedResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListEnvironmentProvisionedResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListEnvironmentProvisionedResourcesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentTemplateVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentTemplateVersions(ctx context.Context, params *proton.ListEnvironmentTemplateVersionsInput, optFns ...func(*proton.Options)) (*proton.ListEnvironmentTemplateVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentTemplateVersions")
	}

	var r0 *proton.ListEnvironmentTemplateVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentTemplateVersionsInput, ...func(*proton.Options)) (*proton.ListEnvironmentTemplateVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentTemplateVersionsInput, ...func(*proton.Options)) *proton.ListEnvironmentTemplateVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListEnvironmentTemplateVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListEnvironmentTemplateVersionsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironmentTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironmentTemplates(ctx context.Context, params *proton.ListEnvironmentTemplatesInput, optFns ...func(*proton.Options)) (*proton.ListEnvironmentTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironmentTemplates")
	}

	var r0 *proton.ListEnvironmentTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentTemplatesInput, ...func(*proton.Options)) (*proton.ListEnvironmentTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentTemplatesInput, ...func(*proton.Options)) *proton.ListEnvironmentTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListEnvironmentTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListEnvironmentTemplatesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironments(ctx context.Context, params *proton.ListEnvironmentsInput, optFns ...func(*proton.Options)) (*proton.ListEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironments")
	}

	var r0 *proton.ListEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentsInput, ...func(*proton.Options)) (*proton.ListEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListEnvironmentsInput, ...func(*proton.Options)) *proton.ListEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListEnvironmentsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRepositories(ctx context.Context, params *proton.ListRepositoriesInput, optFns ...func(*proton.Options)) (*proton.ListRepositoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositories")
	}

	var r0 *proton.ListRepositoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListRepositoriesInput, ...func(*proton.Options)) (*proton.ListRepositoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListRepositoriesInput, ...func(*proton.Options)) *proton.ListRepositoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListRepositoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListRepositoriesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositorySyncDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRepositorySyncDefinitions(ctx context.Context, params *proton.ListRepositorySyncDefinitionsInput, optFns ...func(*proton.Options)) (*proton.ListRepositorySyncDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositorySyncDefinitions")
	}

	var r0 *proton.ListRepositorySyncDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListRepositorySyncDefinitionsInput, ...func(*proton.Options)) (*proton.ListRepositorySyncDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListRepositorySyncDefinitionsInput, ...func(*proton.Options)) *proton.ListRepositorySyncDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListRepositorySyncDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListRepositorySyncDefinitionsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceInstanceOutputs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceInstanceOutputs(ctx context.Context, params *proton.ListServiceInstanceOutputsInput, optFns ...func(*proton.Options)) (*proton.ListServiceInstanceOutputsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceInstanceOutputs")
	}

	var r0 *proton.ListServiceInstanceOutputsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceInstanceOutputsInput, ...func(*proton.Options)) (*proton.ListServiceInstanceOutputsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceInstanceOutputsInput, ...func(*proton.Options)) *proton.ListServiceInstanceOutputsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListServiceInstanceOutputsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListServiceInstanceOutputsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceInstanceProvisionedResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceInstanceProvisionedResources(ctx context.Context, params *proton.ListServiceInstanceProvisionedResourcesInput, optFns ...func(*proton.Options)) (*proton.ListServiceInstanceProvisionedResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceInstanceProvisionedResources")
	}

	var r0 *proton.ListServiceInstanceProvisionedResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceInstanceProvisionedResourcesInput, ...func(*proton.Options)) (*proton.ListServiceInstanceProvisionedResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceInstanceProvisionedResourcesInput, ...func(*proton.Options)) *proton.ListServiceInstanceProvisionedResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListServiceInstanceProvisionedResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListServiceInstanceProvisionedResourcesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceInstances(ctx context.Context, params *proton.ListServiceInstancesInput, optFns ...func(*proton.Options)) (*proton.ListServiceInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceInstances")
	}

	var r0 *proton.ListServiceInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceInstancesInput, ...func(*proton.Options)) (*proton.ListServiceInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceInstancesInput, ...func(*proton.Options)) *proton.ListServiceInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListServiceInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListServiceInstancesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicePipelineOutputs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServicePipelineOutputs(ctx context.Context, params *proton.ListServicePipelineOutputsInput, optFns ...func(*proton.Options)) (*proton.ListServicePipelineOutputsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServicePipelineOutputs")
	}

	var r0 *proton.ListServicePipelineOutputsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServicePipelineOutputsInput, ...func(*proton.Options)) (*proton.ListServicePipelineOutputsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServicePipelineOutputsInput, ...func(*proton.Options)) *proton.ListServicePipelineOutputsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListServicePipelineOutputsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListServicePipelineOutputsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicePipelineProvisionedResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServicePipelineProvisionedResources(ctx context.Context, params *proton.ListServicePipelineProvisionedResourcesInput, optFns ...func(*proton.Options)) (*proton.ListServicePipelineProvisionedResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServicePipelineProvisionedResources")
	}

	var r0 *proton.ListServicePipelineProvisionedResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServicePipelineProvisionedResourcesInput, ...func(*proton.Options)) (*proton.ListServicePipelineProvisionedResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServicePipelineProvisionedResourcesInput, ...func(*proton.Options)) *proton.ListServicePipelineProvisionedResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListServicePipelineProvisionedResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListServicePipelineProvisionedResourcesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceTemplateVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceTemplateVersions(ctx context.Context, params *proton.ListServiceTemplateVersionsInput, optFns ...func(*proton.Options)) (*proton.ListServiceTemplateVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceTemplateVersions")
	}

	var r0 *proton.ListServiceTemplateVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceTemplateVersionsInput, ...func(*proton.Options)) (*proton.ListServiceTemplateVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceTemplateVersionsInput, ...func(*proton.Options)) *proton.ListServiceTemplateVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListServiceTemplateVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListServiceTemplateVersionsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceTemplates(ctx context.Context, params *proton.ListServiceTemplatesInput, optFns ...func(*proton.Options)) (*proton.ListServiceTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceTemplates")
	}

	var r0 *proton.ListServiceTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceTemplatesInput, ...func(*proton.Options)) (*proton.ListServiceTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServiceTemplatesInput, ...func(*proton.Options)) *proton.ListServiceTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListServiceTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListServiceTemplatesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServices(ctx context.Context, params *proton.ListServicesInput, optFns ...func(*proton.Options)) (*proton.ListServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *proton.ListServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServicesInput, ...func(*proton.Options)) (*proton.ListServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListServicesInput, ...func(*proton.Options)) *proton.ListServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListServicesInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *proton.ListTagsForResourceInput, optFns ...func(*proton.Options)) (*proton.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *proton.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListTagsForResourceInput, ...func(*proton.Options)) (*proton.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.ListTagsForResourceInput, ...func(*proton.Options)) *proton.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.ListTagsForResourceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyResourceDeploymentStatusChange provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) NotifyResourceDeploymentStatusChange(ctx context.Context, params *proton.NotifyResourceDeploymentStatusChangeInput, optFns ...func(*proton.Options)) (*proton.NotifyResourceDeploymentStatusChangeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyResourceDeploymentStatusChange")
	}

	var r0 *proton.NotifyResourceDeploymentStatusChangeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.NotifyResourceDeploymentStatusChangeInput, ...func(*proton.Options)) (*proton.NotifyResourceDeploymentStatusChangeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.NotifyResourceDeploymentStatusChangeInput, ...func(*proton.Options)) *proton.NotifyResourceDeploymentStatusChangeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.NotifyResourceDeploymentStatusChangeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.NotifyResourceDeploymentStatusChangeInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() proton.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 proton.Options
	if rf, ok := ret.Get(0).(func() proton.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(proton.Options)
	}

	return r0
}

// RejectEnvironmentAccountConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectEnvironmentAccountConnection(ctx context.Context, params *proton.RejectEnvironmentAccountConnectionInput, optFns ...func(*proton.Options)) (*proton.RejectEnvironmentAccountConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectEnvironmentAccountConnection")
	}

	var r0 *proton.RejectEnvironmentAccountConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.RejectEnvironmentAccountConnectionInput, ...func(*proton.Options)) (*proton.RejectEnvironmentAccountConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.RejectEnvironmentAccountConnectionInput, ...func(*proton.Options)) *proton.RejectEnvironmentAccountConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.RejectEnvironmentAccountConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.RejectEnvironmentAccountConnectionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *proton.TagResourceInput, optFns ...func(*proton.Options)) (*proton.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *proton.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.TagResourceInput, ...func(*proton.Options)) (*proton.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.TagResourceInput, ...func(*proton.Options)) *proton.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.TagResourceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *proton.UntagResourceInput, optFns ...func(*proton.Options)) (*proton.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *proton.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UntagResourceInput, ...func(*proton.Options)) (*proton.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UntagResourceInput, ...func(*proton.Options)) *proton.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UntagResourceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccountSettings(ctx context.Context, params *proton.UpdateAccountSettingsInput, optFns ...func(*proton.Options)) (*proton.UpdateAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountSettings")
	}

	var r0 *proton.UpdateAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateAccountSettingsInput, ...func(*proton.Options)) (*proton.UpdateAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateAccountSettingsInput, ...func(*proton.Options)) *proton.UpdateAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateAccountSettingsInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateComponent(ctx context.Context, params *proton.UpdateComponentInput, optFns ...func(*proton.Options)) (*proton.UpdateComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComponent")
	}

	var r0 *proton.UpdateComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateComponentInput, ...func(*proton.Options)) (*proton.UpdateComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateComponentInput, ...func(*proton.Options)) *proton.UpdateComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateComponentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironment(ctx context.Context, params *proton.UpdateEnvironmentInput, optFns ...func(*proton.Options)) (*proton.UpdateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironment")
	}

	var r0 *proton.UpdateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateEnvironmentInput, ...func(*proton.Options)) (*proton.UpdateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateEnvironmentInput, ...func(*proton.Options)) *proton.UpdateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateEnvironmentInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentAccountConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironmentAccountConnection(ctx context.Context, params *proton.UpdateEnvironmentAccountConnectionInput, optFns ...func(*proton.Options)) (*proton.UpdateEnvironmentAccountConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironmentAccountConnection")
	}

	var r0 *proton.UpdateEnvironmentAccountConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateEnvironmentAccountConnectionInput, ...func(*proton.Options)) (*proton.UpdateEnvironmentAccountConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateEnvironmentAccountConnectionInput, ...func(*proton.Options)) *proton.UpdateEnvironmentAccountConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateEnvironmentAccountConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateEnvironmentAccountConnectionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironmentTemplate(ctx context.Context, params *proton.UpdateEnvironmentTemplateInput, optFns ...func(*proton.Options)) (*proton.UpdateEnvironmentTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironmentTemplate")
	}

	var r0 *proton.UpdateEnvironmentTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateEnvironmentTemplateInput, ...func(*proton.Options)) (*proton.UpdateEnvironmentTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateEnvironmentTemplateInput, ...func(*proton.Options)) *proton.UpdateEnvironmentTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateEnvironmentTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateEnvironmentTemplateInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironmentTemplateVersion(ctx context.Context, params *proton.UpdateEnvironmentTemplateVersionInput, optFns ...func(*proton.Options)) (*proton.UpdateEnvironmentTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironmentTemplateVersion")
	}

	var r0 *proton.UpdateEnvironmentTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateEnvironmentTemplateVersionInput, ...func(*proton.Options)) (*proton.UpdateEnvironmentTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateEnvironmentTemplateVersionInput, ...func(*proton.Options)) *proton.UpdateEnvironmentTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateEnvironmentTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateEnvironmentTemplateVersionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateService(ctx context.Context, params *proton.UpdateServiceInput, optFns ...func(*proton.Options)) (*proton.UpdateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *proton.UpdateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceInput, ...func(*proton.Options)) (*proton.UpdateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceInput, ...func(*proton.Options)) *proton.UpdateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateServiceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceInstance(ctx context.Context, params *proton.UpdateServiceInstanceInput, optFns ...func(*proton.Options)) (*proton.UpdateServiceInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceInstance")
	}

	var r0 *proton.UpdateServiceInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceInstanceInput, ...func(*proton.Options)) (*proton.UpdateServiceInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceInstanceInput, ...func(*proton.Options)) *proton.UpdateServiceInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateServiceInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateServiceInstanceInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServicePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServicePipeline(ctx context.Context, params *proton.UpdateServicePipelineInput, optFns ...func(*proton.Options)) (*proton.UpdateServicePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServicePipeline")
	}

	var r0 *proton.UpdateServicePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServicePipelineInput, ...func(*proton.Options)) (*proton.UpdateServicePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServicePipelineInput, ...func(*proton.Options)) *proton.UpdateServicePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateServicePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateServicePipelineInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceSyncBlocker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceSyncBlocker(ctx context.Context, params *proton.UpdateServiceSyncBlockerInput, optFns ...func(*proton.Options)) (*proton.UpdateServiceSyncBlockerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceSyncBlocker")
	}

	var r0 *proton.UpdateServiceSyncBlockerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceSyncBlockerInput, ...func(*proton.Options)) (*proton.UpdateServiceSyncBlockerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceSyncBlockerInput, ...func(*proton.Options)) *proton.UpdateServiceSyncBlockerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateServiceSyncBlockerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateServiceSyncBlockerInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceSyncConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceSyncConfig(ctx context.Context, params *proton.UpdateServiceSyncConfigInput, optFns ...func(*proton.Options)) (*proton.UpdateServiceSyncConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceSyncConfig")
	}

	var r0 *proton.UpdateServiceSyncConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceSyncConfigInput, ...func(*proton.Options)) (*proton.UpdateServiceSyncConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceSyncConfigInput, ...func(*proton.Options)) *proton.UpdateServiceSyncConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateServiceSyncConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateServiceSyncConfigInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceTemplate(ctx context.Context, params *proton.UpdateServiceTemplateInput, optFns ...func(*proton.Options)) (*proton.UpdateServiceTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceTemplate")
	}

	var r0 *proton.UpdateServiceTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceTemplateInput, ...func(*proton.Options)) (*proton.UpdateServiceTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceTemplateInput, ...func(*proton.Options)) *proton.UpdateServiceTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateServiceTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateServiceTemplateInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceTemplateVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceTemplateVersion(ctx context.Context, params *proton.UpdateServiceTemplateVersionInput, optFns ...func(*proton.Options)) (*proton.UpdateServiceTemplateVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceTemplateVersion")
	}

	var r0 *proton.UpdateServiceTemplateVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceTemplateVersionInput, ...func(*proton.Options)) (*proton.UpdateServiceTemplateVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateServiceTemplateVersionInput, ...func(*proton.Options)) *proton.UpdateServiceTemplateVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateServiceTemplateVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateServiceTemplateVersionInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplateSyncConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTemplateSyncConfig(ctx context.Context, params *proton.UpdateTemplateSyncConfigInput, optFns ...func(*proton.Options)) (*proton.UpdateTemplateSyncConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplateSyncConfig")
	}

	var r0 *proton.UpdateTemplateSyncConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateTemplateSyncConfigInput, ...func(*proton.Options)) (*proton.UpdateTemplateSyncConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *proton.UpdateTemplateSyncConfigInput, ...func(*proton.Options)) *proton.UpdateTemplateSyncConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*proton.UpdateTemplateSyncConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *proton.UpdateTemplateSyncConfigInput, ...func(*proton.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
