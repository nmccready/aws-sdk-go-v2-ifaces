// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	macie2 "github.com/aws/aws-sdk-go-v2/service/macie2"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptInvitation(ctx context.Context, params *macie2.AcceptInvitationInput, optFns ...func(*macie2.Options)) (*macie2.AcceptInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 *macie2.AcceptInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.AcceptInvitationInput, ...func(*macie2.Options)) (*macie2.AcceptInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.AcceptInvitationInput, ...func(*macie2.Options)) *macie2.AcceptInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.AcceptInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.AcceptInvitationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetCustomDataIdentifiers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetCustomDataIdentifiers(ctx context.Context, params *macie2.BatchGetCustomDataIdentifiersInput, optFns ...func(*macie2.Options)) (*macie2.BatchGetCustomDataIdentifiersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetCustomDataIdentifiers")
	}

	var r0 *macie2.BatchGetCustomDataIdentifiersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.BatchGetCustomDataIdentifiersInput, ...func(*macie2.Options)) (*macie2.BatchGetCustomDataIdentifiersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.BatchGetCustomDataIdentifiersInput, ...func(*macie2.Options)) *macie2.BatchGetCustomDataIdentifiersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.BatchGetCustomDataIdentifiersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.BatchGetCustomDataIdentifiersInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateAutomatedDiscoveryAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateAutomatedDiscoveryAccounts(ctx context.Context, params *macie2.BatchUpdateAutomatedDiscoveryAccountsInput, optFns ...func(*macie2.Options)) (*macie2.BatchUpdateAutomatedDiscoveryAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateAutomatedDiscoveryAccounts")
	}

	var r0 *macie2.BatchUpdateAutomatedDiscoveryAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.BatchUpdateAutomatedDiscoveryAccountsInput, ...func(*macie2.Options)) (*macie2.BatchUpdateAutomatedDiscoveryAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.BatchUpdateAutomatedDiscoveryAccountsInput, ...func(*macie2.Options)) *macie2.BatchUpdateAutomatedDiscoveryAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.BatchUpdateAutomatedDiscoveryAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.BatchUpdateAutomatedDiscoveryAccountsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAllowList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAllowList(ctx context.Context, params *macie2.CreateAllowListInput, optFns ...func(*macie2.Options)) (*macie2.CreateAllowListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAllowList")
	}

	var r0 *macie2.CreateAllowListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateAllowListInput, ...func(*macie2.Options)) (*macie2.CreateAllowListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateAllowListInput, ...func(*macie2.Options)) *macie2.CreateAllowListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.CreateAllowListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.CreateAllowListInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClassificationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateClassificationJob(ctx context.Context, params *macie2.CreateClassificationJobInput, optFns ...func(*macie2.Options)) (*macie2.CreateClassificationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClassificationJob")
	}

	var r0 *macie2.CreateClassificationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateClassificationJobInput, ...func(*macie2.Options)) (*macie2.CreateClassificationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateClassificationJobInput, ...func(*macie2.Options)) *macie2.CreateClassificationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.CreateClassificationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.CreateClassificationJobInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomDataIdentifier provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomDataIdentifier(ctx context.Context, params *macie2.CreateCustomDataIdentifierInput, optFns ...func(*macie2.Options)) (*macie2.CreateCustomDataIdentifierOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomDataIdentifier")
	}

	var r0 *macie2.CreateCustomDataIdentifierOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateCustomDataIdentifierInput, ...func(*macie2.Options)) (*macie2.CreateCustomDataIdentifierOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateCustomDataIdentifierInput, ...func(*macie2.Options)) *macie2.CreateCustomDataIdentifierOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.CreateCustomDataIdentifierOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.CreateCustomDataIdentifierInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFindingsFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFindingsFilter(ctx context.Context, params *macie2.CreateFindingsFilterInput, optFns ...func(*macie2.Options)) (*macie2.CreateFindingsFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFindingsFilter")
	}

	var r0 *macie2.CreateFindingsFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateFindingsFilterInput, ...func(*macie2.Options)) (*macie2.CreateFindingsFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateFindingsFilterInput, ...func(*macie2.Options)) *macie2.CreateFindingsFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.CreateFindingsFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.CreateFindingsFilterInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInvitations(ctx context.Context, params *macie2.CreateInvitationsInput, optFns ...func(*macie2.Options)) (*macie2.CreateInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvitations")
	}

	var r0 *macie2.CreateInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateInvitationsInput, ...func(*macie2.Options)) (*macie2.CreateInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateInvitationsInput, ...func(*macie2.Options)) *macie2.CreateInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.CreateInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.CreateInvitationsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMember(ctx context.Context, params *macie2.CreateMemberInput, optFns ...func(*macie2.Options)) (*macie2.CreateMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMember")
	}

	var r0 *macie2.CreateMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateMemberInput, ...func(*macie2.Options)) (*macie2.CreateMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateMemberInput, ...func(*macie2.Options)) *macie2.CreateMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.CreateMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.CreateMemberInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSampleFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSampleFindings(ctx context.Context, params *macie2.CreateSampleFindingsInput, optFns ...func(*macie2.Options)) (*macie2.CreateSampleFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSampleFindings")
	}

	var r0 *macie2.CreateSampleFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateSampleFindingsInput, ...func(*macie2.Options)) (*macie2.CreateSampleFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.CreateSampleFindingsInput, ...func(*macie2.Options)) *macie2.CreateSampleFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.CreateSampleFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.CreateSampleFindingsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeclineInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeclineInvitations(ctx context.Context, params *macie2.DeclineInvitationsInput, optFns ...func(*macie2.Options)) (*macie2.DeclineInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeclineInvitations")
	}

	var r0 *macie2.DeclineInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeclineInvitationsInput, ...func(*macie2.Options)) (*macie2.DeclineInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeclineInvitationsInput, ...func(*macie2.Options)) *macie2.DeclineInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DeclineInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DeclineInvitationsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAllowList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAllowList(ctx context.Context, params *macie2.DeleteAllowListInput, optFns ...func(*macie2.Options)) (*macie2.DeleteAllowListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllowList")
	}

	var r0 *macie2.DeleteAllowListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteAllowListInput, ...func(*macie2.Options)) (*macie2.DeleteAllowListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteAllowListInput, ...func(*macie2.Options)) *macie2.DeleteAllowListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DeleteAllowListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DeleteAllowListInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomDataIdentifier provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomDataIdentifier(ctx context.Context, params *macie2.DeleteCustomDataIdentifierInput, optFns ...func(*macie2.Options)) (*macie2.DeleteCustomDataIdentifierOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomDataIdentifier")
	}

	var r0 *macie2.DeleteCustomDataIdentifierOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteCustomDataIdentifierInput, ...func(*macie2.Options)) (*macie2.DeleteCustomDataIdentifierOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteCustomDataIdentifierInput, ...func(*macie2.Options)) *macie2.DeleteCustomDataIdentifierOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DeleteCustomDataIdentifierOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DeleteCustomDataIdentifierInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFindingsFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFindingsFilter(ctx context.Context, params *macie2.DeleteFindingsFilterInput, optFns ...func(*macie2.Options)) (*macie2.DeleteFindingsFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFindingsFilter")
	}

	var r0 *macie2.DeleteFindingsFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteFindingsFilterInput, ...func(*macie2.Options)) (*macie2.DeleteFindingsFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteFindingsFilterInput, ...func(*macie2.Options)) *macie2.DeleteFindingsFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DeleteFindingsFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DeleteFindingsFilterInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInvitations(ctx context.Context, params *macie2.DeleteInvitationsInput, optFns ...func(*macie2.Options)) (*macie2.DeleteInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvitations")
	}

	var r0 *macie2.DeleteInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteInvitationsInput, ...func(*macie2.Options)) (*macie2.DeleteInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteInvitationsInput, ...func(*macie2.Options)) *macie2.DeleteInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DeleteInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DeleteInvitationsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMember(ctx context.Context, params *macie2.DeleteMemberInput, optFns ...func(*macie2.Options)) (*macie2.DeleteMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMember")
	}

	var r0 *macie2.DeleteMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteMemberInput, ...func(*macie2.Options)) (*macie2.DeleteMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DeleteMemberInput, ...func(*macie2.Options)) *macie2.DeleteMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DeleteMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DeleteMemberInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBuckets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBuckets(ctx context.Context, params *macie2.DescribeBucketsInput, optFns ...func(*macie2.Options)) (*macie2.DescribeBucketsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBuckets")
	}

	var r0 *macie2.DescribeBucketsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DescribeBucketsInput, ...func(*macie2.Options)) (*macie2.DescribeBucketsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DescribeBucketsInput, ...func(*macie2.Options)) *macie2.DescribeBucketsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DescribeBucketsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DescribeBucketsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClassificationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeClassificationJob(ctx context.Context, params *macie2.DescribeClassificationJobInput, optFns ...func(*macie2.Options)) (*macie2.DescribeClassificationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClassificationJob")
	}

	var r0 *macie2.DescribeClassificationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DescribeClassificationJobInput, ...func(*macie2.Options)) (*macie2.DescribeClassificationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DescribeClassificationJobInput, ...func(*macie2.Options)) *macie2.DescribeClassificationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DescribeClassificationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DescribeClassificationJobInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationConfiguration(ctx context.Context, params *macie2.DescribeOrganizationConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.DescribeOrganizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationConfiguration")
	}

	var r0 *macie2.DescribeOrganizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DescribeOrganizationConfigurationInput, ...func(*macie2.Options)) (*macie2.DescribeOrganizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DescribeOrganizationConfigurationInput, ...func(*macie2.Options)) *macie2.DescribeOrganizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DescribeOrganizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DescribeOrganizationConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableMacie provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableMacie(ctx context.Context, params *macie2.DisableMacieInput, optFns ...func(*macie2.Options)) (*macie2.DisableMacieOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableMacie")
	}

	var r0 *macie2.DisableMacieOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisableMacieInput, ...func(*macie2.Options)) (*macie2.DisableMacieOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisableMacieInput, ...func(*macie2.Options)) *macie2.DisableMacieOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DisableMacieOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DisableMacieInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableOrganizationAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableOrganizationAdminAccount(ctx context.Context, params *macie2.DisableOrganizationAdminAccountInput, optFns ...func(*macie2.Options)) (*macie2.DisableOrganizationAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableOrganizationAdminAccount")
	}

	var r0 *macie2.DisableOrganizationAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisableOrganizationAdminAccountInput, ...func(*macie2.Options)) (*macie2.DisableOrganizationAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisableOrganizationAdminAccountInput, ...func(*macie2.Options)) *macie2.DisableOrganizationAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DisableOrganizationAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DisableOrganizationAdminAccountInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFromAdministratorAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFromAdministratorAccount(ctx context.Context, params *macie2.DisassociateFromAdministratorAccountInput, optFns ...func(*macie2.Options)) (*macie2.DisassociateFromAdministratorAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFromAdministratorAccount")
	}

	var r0 *macie2.DisassociateFromAdministratorAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisassociateFromAdministratorAccountInput, ...func(*macie2.Options)) (*macie2.DisassociateFromAdministratorAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisassociateFromAdministratorAccountInput, ...func(*macie2.Options)) *macie2.DisassociateFromAdministratorAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DisassociateFromAdministratorAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DisassociateFromAdministratorAccountInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFromMasterAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFromMasterAccount(ctx context.Context, params *macie2.DisassociateFromMasterAccountInput, optFns ...func(*macie2.Options)) (*macie2.DisassociateFromMasterAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFromMasterAccount")
	}

	var r0 *macie2.DisassociateFromMasterAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisassociateFromMasterAccountInput, ...func(*macie2.Options)) (*macie2.DisassociateFromMasterAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisassociateFromMasterAccountInput, ...func(*macie2.Options)) *macie2.DisassociateFromMasterAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DisassociateFromMasterAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DisassociateFromMasterAccountInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMember(ctx context.Context, params *macie2.DisassociateMemberInput, optFns ...func(*macie2.Options)) (*macie2.DisassociateMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMember")
	}

	var r0 *macie2.DisassociateMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisassociateMemberInput, ...func(*macie2.Options)) (*macie2.DisassociateMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.DisassociateMemberInput, ...func(*macie2.Options)) *macie2.DisassociateMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.DisassociateMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.DisassociateMemberInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableMacie provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableMacie(ctx context.Context, params *macie2.EnableMacieInput, optFns ...func(*macie2.Options)) (*macie2.EnableMacieOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableMacie")
	}

	var r0 *macie2.EnableMacieOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.EnableMacieInput, ...func(*macie2.Options)) (*macie2.EnableMacieOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.EnableMacieInput, ...func(*macie2.Options)) *macie2.EnableMacieOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.EnableMacieOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.EnableMacieInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableOrganizationAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableOrganizationAdminAccount(ctx context.Context, params *macie2.EnableOrganizationAdminAccountInput, optFns ...func(*macie2.Options)) (*macie2.EnableOrganizationAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableOrganizationAdminAccount")
	}

	var r0 *macie2.EnableOrganizationAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.EnableOrganizationAdminAccountInput, ...func(*macie2.Options)) (*macie2.EnableOrganizationAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.EnableOrganizationAdminAccountInput, ...func(*macie2.Options)) *macie2.EnableOrganizationAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.EnableOrganizationAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.EnableOrganizationAdminAccountInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdministratorAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAdministratorAccount(ctx context.Context, params *macie2.GetAdministratorAccountInput, optFns ...func(*macie2.Options)) (*macie2.GetAdministratorAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAdministratorAccount")
	}

	var r0 *macie2.GetAdministratorAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetAdministratorAccountInput, ...func(*macie2.Options)) (*macie2.GetAdministratorAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetAdministratorAccountInput, ...func(*macie2.Options)) *macie2.GetAdministratorAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetAdministratorAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetAdministratorAccountInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllowList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAllowList(ctx context.Context, params *macie2.GetAllowListInput, optFns ...func(*macie2.Options)) (*macie2.GetAllowListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAllowList")
	}

	var r0 *macie2.GetAllowListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetAllowListInput, ...func(*macie2.Options)) (*macie2.GetAllowListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetAllowListInput, ...func(*macie2.Options)) *macie2.GetAllowListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetAllowListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetAllowListInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAutomatedDiscoveryConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAutomatedDiscoveryConfiguration(ctx context.Context, params *macie2.GetAutomatedDiscoveryConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.GetAutomatedDiscoveryConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAutomatedDiscoveryConfiguration")
	}

	var r0 *macie2.GetAutomatedDiscoveryConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetAutomatedDiscoveryConfigurationInput, ...func(*macie2.Options)) (*macie2.GetAutomatedDiscoveryConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetAutomatedDiscoveryConfigurationInput, ...func(*macie2.Options)) *macie2.GetAutomatedDiscoveryConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetAutomatedDiscoveryConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetAutomatedDiscoveryConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketStatistics(ctx context.Context, params *macie2.GetBucketStatisticsInput, optFns ...func(*macie2.Options)) (*macie2.GetBucketStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketStatistics")
	}

	var r0 *macie2.GetBucketStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetBucketStatisticsInput, ...func(*macie2.Options)) (*macie2.GetBucketStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetBucketStatisticsInput, ...func(*macie2.Options)) *macie2.GetBucketStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetBucketStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetBucketStatisticsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClassificationExportConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetClassificationExportConfiguration(ctx context.Context, params *macie2.GetClassificationExportConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.GetClassificationExportConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClassificationExportConfiguration")
	}

	var r0 *macie2.GetClassificationExportConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetClassificationExportConfigurationInput, ...func(*macie2.Options)) (*macie2.GetClassificationExportConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetClassificationExportConfigurationInput, ...func(*macie2.Options)) *macie2.GetClassificationExportConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetClassificationExportConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetClassificationExportConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClassificationScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetClassificationScope(ctx context.Context, params *macie2.GetClassificationScopeInput, optFns ...func(*macie2.Options)) (*macie2.GetClassificationScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetClassificationScope")
	}

	var r0 *macie2.GetClassificationScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetClassificationScopeInput, ...func(*macie2.Options)) (*macie2.GetClassificationScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetClassificationScopeInput, ...func(*macie2.Options)) *macie2.GetClassificationScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetClassificationScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetClassificationScopeInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomDataIdentifier provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCustomDataIdentifier(ctx context.Context, params *macie2.GetCustomDataIdentifierInput, optFns ...func(*macie2.Options)) (*macie2.GetCustomDataIdentifierOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomDataIdentifier")
	}

	var r0 *macie2.GetCustomDataIdentifierOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetCustomDataIdentifierInput, ...func(*macie2.Options)) (*macie2.GetCustomDataIdentifierOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetCustomDataIdentifierInput, ...func(*macie2.Options)) *macie2.GetCustomDataIdentifierOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetCustomDataIdentifierOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetCustomDataIdentifierInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindingStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindingStatistics(ctx context.Context, params *macie2.GetFindingStatisticsInput, optFns ...func(*macie2.Options)) (*macie2.GetFindingStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingStatistics")
	}

	var r0 *macie2.GetFindingStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetFindingStatisticsInput, ...func(*macie2.Options)) (*macie2.GetFindingStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetFindingStatisticsInput, ...func(*macie2.Options)) *macie2.GetFindingStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetFindingStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetFindingStatisticsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindings(ctx context.Context, params *macie2.GetFindingsInput, optFns ...func(*macie2.Options)) (*macie2.GetFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindings")
	}

	var r0 *macie2.GetFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetFindingsInput, ...func(*macie2.Options)) (*macie2.GetFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetFindingsInput, ...func(*macie2.Options)) *macie2.GetFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetFindingsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindingsFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindingsFilter(ctx context.Context, params *macie2.GetFindingsFilterInput, optFns ...func(*macie2.Options)) (*macie2.GetFindingsFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingsFilter")
	}

	var r0 *macie2.GetFindingsFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetFindingsFilterInput, ...func(*macie2.Options)) (*macie2.GetFindingsFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetFindingsFilterInput, ...func(*macie2.Options)) *macie2.GetFindingsFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetFindingsFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetFindingsFilterInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindingsPublicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindingsPublicationConfiguration(ctx context.Context, params *macie2.GetFindingsPublicationConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.GetFindingsPublicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingsPublicationConfiguration")
	}

	var r0 *macie2.GetFindingsPublicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetFindingsPublicationConfigurationInput, ...func(*macie2.Options)) (*macie2.GetFindingsPublicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetFindingsPublicationConfigurationInput, ...func(*macie2.Options)) *macie2.GetFindingsPublicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetFindingsPublicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetFindingsPublicationConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationsCount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInvitationsCount(ctx context.Context, params *macie2.GetInvitationsCountInput, optFns ...func(*macie2.Options)) (*macie2.GetInvitationsCountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitationsCount")
	}

	var r0 *macie2.GetInvitationsCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetInvitationsCountInput, ...func(*macie2.Options)) (*macie2.GetInvitationsCountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetInvitationsCountInput, ...func(*macie2.Options)) *macie2.GetInvitationsCountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetInvitationsCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetInvitationsCountInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMacieSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMacieSession(ctx context.Context, params *macie2.GetMacieSessionInput, optFns ...func(*macie2.Options)) (*macie2.GetMacieSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMacieSession")
	}

	var r0 *macie2.GetMacieSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetMacieSessionInput, ...func(*macie2.Options)) (*macie2.GetMacieSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetMacieSessionInput, ...func(*macie2.Options)) *macie2.GetMacieSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetMacieSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetMacieSessionInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMasterAccount(ctx context.Context, params *macie2.GetMasterAccountInput, optFns ...func(*macie2.Options)) (*macie2.GetMasterAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterAccount")
	}

	var r0 *macie2.GetMasterAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetMasterAccountInput, ...func(*macie2.Options)) (*macie2.GetMasterAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetMasterAccountInput, ...func(*macie2.Options)) *macie2.GetMasterAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetMasterAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetMasterAccountInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMember(ctx context.Context, params *macie2.GetMemberInput, optFns ...func(*macie2.Options)) (*macie2.GetMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMember")
	}

	var r0 *macie2.GetMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetMemberInput, ...func(*macie2.Options)) (*macie2.GetMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetMemberInput, ...func(*macie2.Options)) *macie2.GetMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetMemberInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceProfile(ctx context.Context, params *macie2.GetResourceProfileInput, optFns ...func(*macie2.Options)) (*macie2.GetResourceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceProfile")
	}

	var r0 *macie2.GetResourceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetResourceProfileInput, ...func(*macie2.Options)) (*macie2.GetResourceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetResourceProfileInput, ...func(*macie2.Options)) *macie2.GetResourceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetResourceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetResourceProfileInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRevealConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRevealConfiguration(ctx context.Context, params *macie2.GetRevealConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.GetRevealConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRevealConfiguration")
	}

	var r0 *macie2.GetRevealConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetRevealConfigurationInput, ...func(*macie2.Options)) (*macie2.GetRevealConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetRevealConfigurationInput, ...func(*macie2.Options)) *macie2.GetRevealConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetRevealConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetRevealConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSensitiveDataOccurrences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSensitiveDataOccurrences(ctx context.Context, params *macie2.GetSensitiveDataOccurrencesInput, optFns ...func(*macie2.Options)) (*macie2.GetSensitiveDataOccurrencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSensitiveDataOccurrences")
	}

	var r0 *macie2.GetSensitiveDataOccurrencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetSensitiveDataOccurrencesInput, ...func(*macie2.Options)) (*macie2.GetSensitiveDataOccurrencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetSensitiveDataOccurrencesInput, ...func(*macie2.Options)) *macie2.GetSensitiveDataOccurrencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetSensitiveDataOccurrencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetSensitiveDataOccurrencesInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSensitiveDataOccurrencesAvailability provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSensitiveDataOccurrencesAvailability(ctx context.Context, params *macie2.GetSensitiveDataOccurrencesAvailabilityInput, optFns ...func(*macie2.Options)) (*macie2.GetSensitiveDataOccurrencesAvailabilityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSensitiveDataOccurrencesAvailability")
	}

	var r0 *macie2.GetSensitiveDataOccurrencesAvailabilityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetSensitiveDataOccurrencesAvailabilityInput, ...func(*macie2.Options)) (*macie2.GetSensitiveDataOccurrencesAvailabilityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetSensitiveDataOccurrencesAvailabilityInput, ...func(*macie2.Options)) *macie2.GetSensitiveDataOccurrencesAvailabilityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetSensitiveDataOccurrencesAvailabilityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetSensitiveDataOccurrencesAvailabilityInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSensitivityInspectionTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSensitivityInspectionTemplate(ctx context.Context, params *macie2.GetSensitivityInspectionTemplateInput, optFns ...func(*macie2.Options)) (*macie2.GetSensitivityInspectionTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSensitivityInspectionTemplate")
	}

	var r0 *macie2.GetSensitivityInspectionTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetSensitivityInspectionTemplateInput, ...func(*macie2.Options)) (*macie2.GetSensitivityInspectionTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetSensitivityInspectionTemplateInput, ...func(*macie2.Options)) *macie2.GetSensitivityInspectionTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetSensitivityInspectionTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetSensitivityInspectionTemplateInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsageStatistics(ctx context.Context, params *macie2.GetUsageStatisticsInput, optFns ...func(*macie2.Options)) (*macie2.GetUsageStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsageStatistics")
	}

	var r0 *macie2.GetUsageStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetUsageStatisticsInput, ...func(*macie2.Options)) (*macie2.GetUsageStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetUsageStatisticsInput, ...func(*macie2.Options)) *macie2.GetUsageStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetUsageStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetUsageStatisticsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageTotals provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsageTotals(ctx context.Context, params *macie2.GetUsageTotalsInput, optFns ...func(*macie2.Options)) (*macie2.GetUsageTotalsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsageTotals")
	}

	var r0 *macie2.GetUsageTotalsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetUsageTotalsInput, ...func(*macie2.Options)) (*macie2.GetUsageTotalsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.GetUsageTotalsInput, ...func(*macie2.Options)) *macie2.GetUsageTotalsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.GetUsageTotalsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.GetUsageTotalsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAllowLists provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAllowLists(ctx context.Context, params *macie2.ListAllowListsInput, optFns ...func(*macie2.Options)) (*macie2.ListAllowListsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAllowLists")
	}

	var r0 *macie2.ListAllowListsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListAllowListsInput, ...func(*macie2.Options)) (*macie2.ListAllowListsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListAllowListsInput, ...func(*macie2.Options)) *macie2.ListAllowListsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListAllowListsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListAllowListsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAutomatedDiscoveryAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAutomatedDiscoveryAccounts(ctx context.Context, params *macie2.ListAutomatedDiscoveryAccountsInput, optFns ...func(*macie2.Options)) (*macie2.ListAutomatedDiscoveryAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAutomatedDiscoveryAccounts")
	}

	var r0 *macie2.ListAutomatedDiscoveryAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListAutomatedDiscoveryAccountsInput, ...func(*macie2.Options)) (*macie2.ListAutomatedDiscoveryAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListAutomatedDiscoveryAccountsInput, ...func(*macie2.Options)) *macie2.ListAutomatedDiscoveryAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListAutomatedDiscoveryAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListAutomatedDiscoveryAccountsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClassificationJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClassificationJobs(ctx context.Context, params *macie2.ListClassificationJobsInput, optFns ...func(*macie2.Options)) (*macie2.ListClassificationJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClassificationJobs")
	}

	var r0 *macie2.ListClassificationJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListClassificationJobsInput, ...func(*macie2.Options)) (*macie2.ListClassificationJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListClassificationJobsInput, ...func(*macie2.Options)) *macie2.ListClassificationJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListClassificationJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListClassificationJobsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClassificationScopes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClassificationScopes(ctx context.Context, params *macie2.ListClassificationScopesInput, optFns ...func(*macie2.Options)) (*macie2.ListClassificationScopesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClassificationScopes")
	}

	var r0 *macie2.ListClassificationScopesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListClassificationScopesInput, ...func(*macie2.Options)) (*macie2.ListClassificationScopesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListClassificationScopesInput, ...func(*macie2.Options)) *macie2.ListClassificationScopesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListClassificationScopesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListClassificationScopesInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomDataIdentifiers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomDataIdentifiers(ctx context.Context, params *macie2.ListCustomDataIdentifiersInput, optFns ...func(*macie2.Options)) (*macie2.ListCustomDataIdentifiersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomDataIdentifiers")
	}

	var r0 *macie2.ListCustomDataIdentifiersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListCustomDataIdentifiersInput, ...func(*macie2.Options)) (*macie2.ListCustomDataIdentifiersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListCustomDataIdentifiersInput, ...func(*macie2.Options)) *macie2.ListCustomDataIdentifiersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListCustomDataIdentifiersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListCustomDataIdentifiersInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFindings(ctx context.Context, params *macie2.ListFindingsInput, optFns ...func(*macie2.Options)) (*macie2.ListFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFindings")
	}

	var r0 *macie2.ListFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListFindingsInput, ...func(*macie2.Options)) (*macie2.ListFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListFindingsInput, ...func(*macie2.Options)) *macie2.ListFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListFindingsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFindingsFilters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFindingsFilters(ctx context.Context, params *macie2.ListFindingsFiltersInput, optFns ...func(*macie2.Options)) (*macie2.ListFindingsFiltersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFindingsFilters")
	}

	var r0 *macie2.ListFindingsFiltersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListFindingsFiltersInput, ...func(*macie2.Options)) (*macie2.ListFindingsFiltersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListFindingsFiltersInput, ...func(*macie2.Options)) *macie2.ListFindingsFiltersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListFindingsFiltersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListFindingsFiltersInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvitations(ctx context.Context, params *macie2.ListInvitationsInput, optFns ...func(*macie2.Options)) (*macie2.ListInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvitations")
	}

	var r0 *macie2.ListInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListInvitationsInput, ...func(*macie2.Options)) (*macie2.ListInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListInvitationsInput, ...func(*macie2.Options)) *macie2.ListInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListInvitationsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedDataIdentifiers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListManagedDataIdentifiers(ctx context.Context, params *macie2.ListManagedDataIdentifiersInput, optFns ...func(*macie2.Options)) (*macie2.ListManagedDataIdentifiersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListManagedDataIdentifiers")
	}

	var r0 *macie2.ListManagedDataIdentifiersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListManagedDataIdentifiersInput, ...func(*macie2.Options)) (*macie2.ListManagedDataIdentifiersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListManagedDataIdentifiersInput, ...func(*macie2.Options)) *macie2.ListManagedDataIdentifiersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListManagedDataIdentifiersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListManagedDataIdentifiersInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMembers(ctx context.Context, params *macie2.ListMembersInput, optFns ...func(*macie2.Options)) (*macie2.ListMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 *macie2.ListMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListMembersInput, ...func(*macie2.Options)) (*macie2.ListMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListMembersInput, ...func(*macie2.Options)) *macie2.ListMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListMembersInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationAdminAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizationAdminAccounts(ctx context.Context, params *macie2.ListOrganizationAdminAccountsInput, optFns ...func(*macie2.Options)) (*macie2.ListOrganizationAdminAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationAdminAccounts")
	}

	var r0 *macie2.ListOrganizationAdminAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListOrganizationAdminAccountsInput, ...func(*macie2.Options)) (*macie2.ListOrganizationAdminAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListOrganizationAdminAccountsInput, ...func(*macie2.Options)) *macie2.ListOrganizationAdminAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListOrganizationAdminAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListOrganizationAdminAccountsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceProfileArtifacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceProfileArtifacts(ctx context.Context, params *macie2.ListResourceProfileArtifactsInput, optFns ...func(*macie2.Options)) (*macie2.ListResourceProfileArtifactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceProfileArtifacts")
	}

	var r0 *macie2.ListResourceProfileArtifactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListResourceProfileArtifactsInput, ...func(*macie2.Options)) (*macie2.ListResourceProfileArtifactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListResourceProfileArtifactsInput, ...func(*macie2.Options)) *macie2.ListResourceProfileArtifactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListResourceProfileArtifactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListResourceProfileArtifactsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceProfileDetections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceProfileDetections(ctx context.Context, params *macie2.ListResourceProfileDetectionsInput, optFns ...func(*macie2.Options)) (*macie2.ListResourceProfileDetectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceProfileDetections")
	}

	var r0 *macie2.ListResourceProfileDetectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListResourceProfileDetectionsInput, ...func(*macie2.Options)) (*macie2.ListResourceProfileDetectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListResourceProfileDetectionsInput, ...func(*macie2.Options)) *macie2.ListResourceProfileDetectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListResourceProfileDetectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListResourceProfileDetectionsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSensitivityInspectionTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSensitivityInspectionTemplates(ctx context.Context, params *macie2.ListSensitivityInspectionTemplatesInput, optFns ...func(*macie2.Options)) (*macie2.ListSensitivityInspectionTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSensitivityInspectionTemplates")
	}

	var r0 *macie2.ListSensitivityInspectionTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListSensitivityInspectionTemplatesInput, ...func(*macie2.Options)) (*macie2.ListSensitivityInspectionTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListSensitivityInspectionTemplatesInput, ...func(*macie2.Options)) *macie2.ListSensitivityInspectionTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListSensitivityInspectionTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListSensitivityInspectionTemplatesInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *macie2.ListTagsForResourceInput, optFns ...func(*macie2.Options)) (*macie2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *macie2.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListTagsForResourceInput, ...func(*macie2.Options)) (*macie2.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.ListTagsForResourceInput, ...func(*macie2.Options)) *macie2.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.ListTagsForResourceInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() macie2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 macie2.Options
	if rf, ok := ret.Get(0).(func() macie2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(macie2.Options)
	}

	return r0
}

// PutClassificationExportConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutClassificationExportConfiguration(ctx context.Context, params *macie2.PutClassificationExportConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.PutClassificationExportConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutClassificationExportConfiguration")
	}

	var r0 *macie2.PutClassificationExportConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.PutClassificationExportConfigurationInput, ...func(*macie2.Options)) (*macie2.PutClassificationExportConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.PutClassificationExportConfigurationInput, ...func(*macie2.Options)) *macie2.PutClassificationExportConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.PutClassificationExportConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.PutClassificationExportConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutFindingsPublicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutFindingsPublicationConfiguration(ctx context.Context, params *macie2.PutFindingsPublicationConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.PutFindingsPublicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutFindingsPublicationConfiguration")
	}

	var r0 *macie2.PutFindingsPublicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.PutFindingsPublicationConfigurationInput, ...func(*macie2.Options)) (*macie2.PutFindingsPublicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.PutFindingsPublicationConfigurationInput, ...func(*macie2.Options)) *macie2.PutFindingsPublicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.PutFindingsPublicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.PutFindingsPublicationConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchResources(ctx context.Context, params *macie2.SearchResourcesInput, optFns ...func(*macie2.Options)) (*macie2.SearchResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchResources")
	}

	var r0 *macie2.SearchResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.SearchResourcesInput, ...func(*macie2.Options)) (*macie2.SearchResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.SearchResourcesInput, ...func(*macie2.Options)) *macie2.SearchResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.SearchResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.SearchResourcesInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *macie2.TagResourceInput, optFns ...func(*macie2.Options)) (*macie2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *macie2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.TagResourceInput, ...func(*macie2.Options)) (*macie2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.TagResourceInput, ...func(*macie2.Options)) *macie2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.TagResourceInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestCustomDataIdentifier provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestCustomDataIdentifier(ctx context.Context, params *macie2.TestCustomDataIdentifierInput, optFns ...func(*macie2.Options)) (*macie2.TestCustomDataIdentifierOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestCustomDataIdentifier")
	}

	var r0 *macie2.TestCustomDataIdentifierOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.TestCustomDataIdentifierInput, ...func(*macie2.Options)) (*macie2.TestCustomDataIdentifierOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.TestCustomDataIdentifierInput, ...func(*macie2.Options)) *macie2.TestCustomDataIdentifierOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.TestCustomDataIdentifierOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.TestCustomDataIdentifierInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *macie2.UntagResourceInput, optFns ...func(*macie2.Options)) (*macie2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *macie2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UntagResourceInput, ...func(*macie2.Options)) (*macie2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UntagResourceInput, ...func(*macie2.Options)) *macie2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UntagResourceInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAllowList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAllowList(ctx context.Context, params *macie2.UpdateAllowListInput, optFns ...func(*macie2.Options)) (*macie2.UpdateAllowListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAllowList")
	}

	var r0 *macie2.UpdateAllowListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateAllowListInput, ...func(*macie2.Options)) (*macie2.UpdateAllowListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateAllowListInput, ...func(*macie2.Options)) *macie2.UpdateAllowListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateAllowListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateAllowListInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAutomatedDiscoveryConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAutomatedDiscoveryConfiguration(ctx context.Context, params *macie2.UpdateAutomatedDiscoveryConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.UpdateAutomatedDiscoveryConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAutomatedDiscoveryConfiguration")
	}

	var r0 *macie2.UpdateAutomatedDiscoveryConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateAutomatedDiscoveryConfigurationInput, ...func(*macie2.Options)) (*macie2.UpdateAutomatedDiscoveryConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateAutomatedDiscoveryConfigurationInput, ...func(*macie2.Options)) *macie2.UpdateAutomatedDiscoveryConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateAutomatedDiscoveryConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateAutomatedDiscoveryConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClassificationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateClassificationJob(ctx context.Context, params *macie2.UpdateClassificationJobInput, optFns ...func(*macie2.Options)) (*macie2.UpdateClassificationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClassificationJob")
	}

	var r0 *macie2.UpdateClassificationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateClassificationJobInput, ...func(*macie2.Options)) (*macie2.UpdateClassificationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateClassificationJobInput, ...func(*macie2.Options)) *macie2.UpdateClassificationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateClassificationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateClassificationJobInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClassificationScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateClassificationScope(ctx context.Context, params *macie2.UpdateClassificationScopeInput, optFns ...func(*macie2.Options)) (*macie2.UpdateClassificationScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClassificationScope")
	}

	var r0 *macie2.UpdateClassificationScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateClassificationScopeInput, ...func(*macie2.Options)) (*macie2.UpdateClassificationScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateClassificationScopeInput, ...func(*macie2.Options)) *macie2.UpdateClassificationScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateClassificationScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateClassificationScopeInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFindingsFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFindingsFilter(ctx context.Context, params *macie2.UpdateFindingsFilterInput, optFns ...func(*macie2.Options)) (*macie2.UpdateFindingsFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFindingsFilter")
	}

	var r0 *macie2.UpdateFindingsFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateFindingsFilterInput, ...func(*macie2.Options)) (*macie2.UpdateFindingsFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateFindingsFilterInput, ...func(*macie2.Options)) *macie2.UpdateFindingsFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateFindingsFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateFindingsFilterInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMacieSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMacieSession(ctx context.Context, params *macie2.UpdateMacieSessionInput, optFns ...func(*macie2.Options)) (*macie2.UpdateMacieSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMacieSession")
	}

	var r0 *macie2.UpdateMacieSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateMacieSessionInput, ...func(*macie2.Options)) (*macie2.UpdateMacieSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateMacieSessionInput, ...func(*macie2.Options)) *macie2.UpdateMacieSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateMacieSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateMacieSessionInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMemberSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMemberSession(ctx context.Context, params *macie2.UpdateMemberSessionInput, optFns ...func(*macie2.Options)) (*macie2.UpdateMemberSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemberSession")
	}

	var r0 *macie2.UpdateMemberSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateMemberSessionInput, ...func(*macie2.Options)) (*macie2.UpdateMemberSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateMemberSessionInput, ...func(*macie2.Options)) *macie2.UpdateMemberSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateMemberSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateMemberSessionInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOrganizationConfiguration(ctx context.Context, params *macie2.UpdateOrganizationConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.UpdateOrganizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationConfiguration")
	}

	var r0 *macie2.UpdateOrganizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateOrganizationConfigurationInput, ...func(*macie2.Options)) (*macie2.UpdateOrganizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateOrganizationConfigurationInput, ...func(*macie2.Options)) *macie2.UpdateOrganizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateOrganizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateOrganizationConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceProfile(ctx context.Context, params *macie2.UpdateResourceProfileInput, optFns ...func(*macie2.Options)) (*macie2.UpdateResourceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceProfile")
	}

	var r0 *macie2.UpdateResourceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateResourceProfileInput, ...func(*macie2.Options)) (*macie2.UpdateResourceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateResourceProfileInput, ...func(*macie2.Options)) *macie2.UpdateResourceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateResourceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateResourceProfileInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceProfileDetections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceProfileDetections(ctx context.Context, params *macie2.UpdateResourceProfileDetectionsInput, optFns ...func(*macie2.Options)) (*macie2.UpdateResourceProfileDetectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceProfileDetections")
	}

	var r0 *macie2.UpdateResourceProfileDetectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateResourceProfileDetectionsInput, ...func(*macie2.Options)) (*macie2.UpdateResourceProfileDetectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateResourceProfileDetectionsInput, ...func(*macie2.Options)) *macie2.UpdateResourceProfileDetectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateResourceProfileDetectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateResourceProfileDetectionsInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRevealConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRevealConfiguration(ctx context.Context, params *macie2.UpdateRevealConfigurationInput, optFns ...func(*macie2.Options)) (*macie2.UpdateRevealConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRevealConfiguration")
	}

	var r0 *macie2.UpdateRevealConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateRevealConfigurationInput, ...func(*macie2.Options)) (*macie2.UpdateRevealConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateRevealConfigurationInput, ...func(*macie2.Options)) *macie2.UpdateRevealConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateRevealConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateRevealConfigurationInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSensitivityInspectionTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSensitivityInspectionTemplate(ctx context.Context, params *macie2.UpdateSensitivityInspectionTemplateInput, optFns ...func(*macie2.Options)) (*macie2.UpdateSensitivityInspectionTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSensitivityInspectionTemplate")
	}

	var r0 *macie2.UpdateSensitivityInspectionTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateSensitivityInspectionTemplateInput, ...func(*macie2.Options)) (*macie2.UpdateSensitivityInspectionTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *macie2.UpdateSensitivityInspectionTemplateInput, ...func(*macie2.Options)) *macie2.UpdateSensitivityInspectionTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*macie2.UpdateSensitivityInspectionTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *macie2.UpdateSensitivityInspectionTemplateInput, ...func(*macie2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
