// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	internetmonitor "github.com/aws/aws-sdk-go-v2/service/internetmonitor"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMonitor(ctx context.Context, params *internetmonitor.CreateMonitorInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.CreateMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMonitor")
	}

	var r0 *internetmonitor.CreateMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.CreateMonitorInput, ...func(*internetmonitor.Options)) (*internetmonitor.CreateMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.CreateMonitorInput, ...func(*internetmonitor.Options)) *internetmonitor.CreateMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.CreateMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.CreateMonitorInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMonitor(ctx context.Context, params *internetmonitor.DeleteMonitorInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.DeleteMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitor")
	}

	var r0 *internetmonitor.DeleteMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.DeleteMonitorInput, ...func(*internetmonitor.Options)) (*internetmonitor.DeleteMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.DeleteMonitorInput, ...func(*internetmonitor.Options)) *internetmonitor.DeleteMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.DeleteMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.DeleteMonitorInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHealthEvent(ctx context.Context, params *internetmonitor.GetHealthEventInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.GetHealthEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthEvent")
	}

	var r0 *internetmonitor.GetHealthEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetHealthEventInput, ...func(*internetmonitor.Options)) (*internetmonitor.GetHealthEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetHealthEventInput, ...func(*internetmonitor.Options)) *internetmonitor.GetHealthEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.GetHealthEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.GetHealthEventInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInternetEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInternetEvent(ctx context.Context, params *internetmonitor.GetInternetEventInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.GetInternetEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInternetEvent")
	}

	var r0 *internetmonitor.GetInternetEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetInternetEventInput, ...func(*internetmonitor.Options)) (*internetmonitor.GetInternetEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetInternetEventInput, ...func(*internetmonitor.Options)) *internetmonitor.GetInternetEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.GetInternetEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.GetInternetEventInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMonitor(ctx context.Context, params *internetmonitor.GetMonitorInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.GetMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitor")
	}

	var r0 *internetmonitor.GetMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetMonitorInput, ...func(*internetmonitor.Options)) (*internetmonitor.GetMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetMonitorInput, ...func(*internetmonitor.Options)) *internetmonitor.GetMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.GetMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.GetMonitorInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryResults(ctx context.Context, params *internetmonitor.GetQueryResultsInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.GetQueryResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryResults")
	}

	var r0 *internetmonitor.GetQueryResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetQueryResultsInput, ...func(*internetmonitor.Options)) (*internetmonitor.GetQueryResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetQueryResultsInput, ...func(*internetmonitor.Options)) *internetmonitor.GetQueryResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.GetQueryResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.GetQueryResultsInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryStatus(ctx context.Context, params *internetmonitor.GetQueryStatusInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.GetQueryStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryStatus")
	}

	var r0 *internetmonitor.GetQueryStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetQueryStatusInput, ...func(*internetmonitor.Options)) (*internetmonitor.GetQueryStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.GetQueryStatusInput, ...func(*internetmonitor.Options)) *internetmonitor.GetQueryStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.GetQueryStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.GetQueryStatusInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHealthEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHealthEvents(ctx context.Context, params *internetmonitor.ListHealthEventsInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.ListHealthEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHealthEvents")
	}

	var r0 *internetmonitor.ListHealthEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.ListHealthEventsInput, ...func(*internetmonitor.Options)) (*internetmonitor.ListHealthEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.ListHealthEventsInput, ...func(*internetmonitor.Options)) *internetmonitor.ListHealthEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.ListHealthEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.ListHealthEventsInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInternetEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInternetEvents(ctx context.Context, params *internetmonitor.ListInternetEventsInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.ListInternetEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInternetEvents")
	}

	var r0 *internetmonitor.ListInternetEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.ListInternetEventsInput, ...func(*internetmonitor.Options)) (*internetmonitor.ListInternetEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.ListInternetEventsInput, ...func(*internetmonitor.Options)) *internetmonitor.ListInternetEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.ListInternetEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.ListInternetEventsInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMonitors(ctx context.Context, params *internetmonitor.ListMonitorsInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.ListMonitorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitors")
	}

	var r0 *internetmonitor.ListMonitorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.ListMonitorsInput, ...func(*internetmonitor.Options)) (*internetmonitor.ListMonitorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.ListMonitorsInput, ...func(*internetmonitor.Options)) *internetmonitor.ListMonitorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.ListMonitorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.ListMonitorsInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *internetmonitor.ListTagsForResourceInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *internetmonitor.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.ListTagsForResourceInput, ...func(*internetmonitor.Options)) (*internetmonitor.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.ListTagsForResourceInput, ...func(*internetmonitor.Options)) *internetmonitor.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.ListTagsForResourceInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() internetmonitor.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 internetmonitor.Options
	if rf, ok := ret.Get(0).(func() internetmonitor.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(internetmonitor.Options)
	}

	return r0
}

// StartQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartQuery(ctx context.Context, params *internetmonitor.StartQueryInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.StartQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartQuery")
	}

	var r0 *internetmonitor.StartQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.StartQueryInput, ...func(*internetmonitor.Options)) (*internetmonitor.StartQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.StartQueryInput, ...func(*internetmonitor.Options)) *internetmonitor.StartQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.StartQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.StartQueryInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopQuery(ctx context.Context, params *internetmonitor.StopQueryInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.StopQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopQuery")
	}

	var r0 *internetmonitor.StopQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.StopQueryInput, ...func(*internetmonitor.Options)) (*internetmonitor.StopQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.StopQueryInput, ...func(*internetmonitor.Options)) *internetmonitor.StopQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.StopQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.StopQueryInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *internetmonitor.TagResourceInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *internetmonitor.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.TagResourceInput, ...func(*internetmonitor.Options)) (*internetmonitor.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.TagResourceInput, ...func(*internetmonitor.Options)) *internetmonitor.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.TagResourceInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *internetmonitor.UntagResourceInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *internetmonitor.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.UntagResourceInput, ...func(*internetmonitor.Options)) (*internetmonitor.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.UntagResourceInput, ...func(*internetmonitor.Options)) *internetmonitor.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.UntagResourceInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMonitor(ctx context.Context, params *internetmonitor.UpdateMonitorInput, optFns ...func(*internetmonitor.Options)) (*internetmonitor.UpdateMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitor")
	}

	var r0 *internetmonitor.UpdateMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.UpdateMonitorInput, ...func(*internetmonitor.Options)) (*internetmonitor.UpdateMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *internetmonitor.UpdateMonitorInput, ...func(*internetmonitor.Options)) *internetmonitor.UpdateMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*internetmonitor.UpdateMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *internetmonitor.UpdateMonitorInput, ...func(*internetmonitor.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
