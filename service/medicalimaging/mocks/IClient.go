// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	medicalimaging "github.com/aws/aws-sdk-go-v2/service/medicalimaging"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CopyImageSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyImageSet(ctx context.Context, params *medicalimaging.CopyImageSetInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.CopyImageSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyImageSet")
	}

	var r0 *medicalimaging.CopyImageSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.CopyImageSetInput, ...func(*medicalimaging.Options)) (*medicalimaging.CopyImageSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.CopyImageSetInput, ...func(*medicalimaging.Options)) *medicalimaging.CopyImageSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.CopyImageSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.CopyImageSetInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDatastore(ctx context.Context, params *medicalimaging.CreateDatastoreInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.CreateDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatastore")
	}

	var r0 *medicalimaging.CreateDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.CreateDatastoreInput, ...func(*medicalimaging.Options)) (*medicalimaging.CreateDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.CreateDatastoreInput, ...func(*medicalimaging.Options)) *medicalimaging.CreateDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.CreateDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.CreateDatastoreInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDatastore(ctx context.Context, params *medicalimaging.DeleteDatastoreInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.DeleteDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatastore")
	}

	var r0 *medicalimaging.DeleteDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.DeleteDatastoreInput, ...func(*medicalimaging.Options)) (*medicalimaging.DeleteDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.DeleteDatastoreInput, ...func(*medicalimaging.Options)) *medicalimaging.DeleteDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.DeleteDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.DeleteDatastoreInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImageSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImageSet(ctx context.Context, params *medicalimaging.DeleteImageSetInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.DeleteImageSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImageSet")
	}

	var r0 *medicalimaging.DeleteImageSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.DeleteImageSetInput, ...func(*medicalimaging.Options)) (*medicalimaging.DeleteImageSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.DeleteImageSetInput, ...func(*medicalimaging.Options)) *medicalimaging.DeleteImageSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.DeleteImageSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.DeleteImageSetInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDICOMImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDICOMImportJob(ctx context.Context, params *medicalimaging.GetDICOMImportJobInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.GetDICOMImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDICOMImportJob")
	}

	var r0 *medicalimaging.GetDICOMImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetDICOMImportJobInput, ...func(*medicalimaging.Options)) (*medicalimaging.GetDICOMImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetDICOMImportJobInput, ...func(*medicalimaging.Options)) *medicalimaging.GetDICOMImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.GetDICOMImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.GetDICOMImportJobInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatastore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDatastore(ctx context.Context, params *medicalimaging.GetDatastoreInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.GetDatastoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDatastore")
	}

	var r0 *medicalimaging.GetDatastoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetDatastoreInput, ...func(*medicalimaging.Options)) (*medicalimaging.GetDatastoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetDatastoreInput, ...func(*medicalimaging.Options)) *medicalimaging.GetDatastoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.GetDatastoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.GetDatastoreInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageFrame provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImageFrame(ctx context.Context, params *medicalimaging.GetImageFrameInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.GetImageFrameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImageFrame")
	}

	var r0 *medicalimaging.GetImageFrameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetImageFrameInput, ...func(*medicalimaging.Options)) (*medicalimaging.GetImageFrameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetImageFrameInput, ...func(*medicalimaging.Options)) *medicalimaging.GetImageFrameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.GetImageFrameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.GetImageFrameInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImageSet(ctx context.Context, params *medicalimaging.GetImageSetInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.GetImageSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImageSet")
	}

	var r0 *medicalimaging.GetImageSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetImageSetInput, ...func(*medicalimaging.Options)) (*medicalimaging.GetImageSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetImageSetInput, ...func(*medicalimaging.Options)) *medicalimaging.GetImageSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.GetImageSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.GetImageSetInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImageSetMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImageSetMetadata(ctx context.Context, params *medicalimaging.GetImageSetMetadataInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.GetImageSetMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImageSetMetadata")
	}

	var r0 *medicalimaging.GetImageSetMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetImageSetMetadataInput, ...func(*medicalimaging.Options)) (*medicalimaging.GetImageSetMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.GetImageSetMetadataInput, ...func(*medicalimaging.Options)) *medicalimaging.GetImageSetMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.GetImageSetMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.GetImageSetMetadataInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDICOMImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDICOMImportJobs(ctx context.Context, params *medicalimaging.ListDICOMImportJobsInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.ListDICOMImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDICOMImportJobs")
	}

	var r0 *medicalimaging.ListDICOMImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.ListDICOMImportJobsInput, ...func(*medicalimaging.Options)) (*medicalimaging.ListDICOMImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.ListDICOMImportJobsInput, ...func(*medicalimaging.Options)) *medicalimaging.ListDICOMImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.ListDICOMImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.ListDICOMImportJobsInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatastores provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatastores(ctx context.Context, params *medicalimaging.ListDatastoresInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.ListDatastoresOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatastores")
	}

	var r0 *medicalimaging.ListDatastoresOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.ListDatastoresInput, ...func(*medicalimaging.Options)) (*medicalimaging.ListDatastoresOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.ListDatastoresInput, ...func(*medicalimaging.Options)) *medicalimaging.ListDatastoresOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.ListDatastoresOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.ListDatastoresInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImageSetVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImageSetVersions(ctx context.Context, params *medicalimaging.ListImageSetVersionsInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.ListImageSetVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImageSetVersions")
	}

	var r0 *medicalimaging.ListImageSetVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.ListImageSetVersionsInput, ...func(*medicalimaging.Options)) (*medicalimaging.ListImageSetVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.ListImageSetVersionsInput, ...func(*medicalimaging.Options)) *medicalimaging.ListImageSetVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.ListImageSetVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.ListImageSetVersionsInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *medicalimaging.ListTagsForResourceInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *medicalimaging.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.ListTagsForResourceInput, ...func(*medicalimaging.Options)) (*medicalimaging.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.ListTagsForResourceInput, ...func(*medicalimaging.Options)) *medicalimaging.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.ListTagsForResourceInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() medicalimaging.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 medicalimaging.Options
	if rf, ok := ret.Get(0).(func() medicalimaging.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(medicalimaging.Options)
	}

	return r0
}

// SearchImageSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchImageSets(ctx context.Context, params *medicalimaging.SearchImageSetsInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.SearchImageSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchImageSets")
	}

	var r0 *medicalimaging.SearchImageSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.SearchImageSetsInput, ...func(*medicalimaging.Options)) (*medicalimaging.SearchImageSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.SearchImageSetsInput, ...func(*medicalimaging.Options)) *medicalimaging.SearchImageSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.SearchImageSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.SearchImageSetsInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDICOMImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDICOMImportJob(ctx context.Context, params *medicalimaging.StartDICOMImportJobInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.StartDICOMImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDICOMImportJob")
	}

	var r0 *medicalimaging.StartDICOMImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.StartDICOMImportJobInput, ...func(*medicalimaging.Options)) (*medicalimaging.StartDICOMImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.StartDICOMImportJobInput, ...func(*medicalimaging.Options)) *medicalimaging.StartDICOMImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.StartDICOMImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.StartDICOMImportJobInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *medicalimaging.TagResourceInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *medicalimaging.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.TagResourceInput, ...func(*medicalimaging.Options)) (*medicalimaging.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.TagResourceInput, ...func(*medicalimaging.Options)) *medicalimaging.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.TagResourceInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *medicalimaging.UntagResourceInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *medicalimaging.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.UntagResourceInput, ...func(*medicalimaging.Options)) (*medicalimaging.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.UntagResourceInput, ...func(*medicalimaging.Options)) *medicalimaging.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.UntagResourceInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImageSetMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateImageSetMetadata(ctx context.Context, params *medicalimaging.UpdateImageSetMetadataInput, optFns ...func(*medicalimaging.Options)) (*medicalimaging.UpdateImageSetMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageSetMetadata")
	}

	var r0 *medicalimaging.UpdateImageSetMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.UpdateImageSetMetadataInput, ...func(*medicalimaging.Options)) (*medicalimaging.UpdateImageSetMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *medicalimaging.UpdateImageSetMetadataInput, ...func(*medicalimaging.Options)) *medicalimaging.UpdateImageSetMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*medicalimaging.UpdateImageSetMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *medicalimaging.UpdateImageSetMetadataInput, ...func(*medicalimaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
