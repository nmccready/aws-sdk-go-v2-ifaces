// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	redshiftserverless "github.com/aws/aws-sdk-go-v2/service/redshiftserverless"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ConvertRecoveryPointToSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConvertRecoveryPointToSnapshot(ctx context.Context, params *redshiftserverless.ConvertRecoveryPointToSnapshotInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ConvertRecoveryPointToSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConvertRecoveryPointToSnapshot")
	}

	var r0 *redshiftserverless.ConvertRecoveryPointToSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ConvertRecoveryPointToSnapshotInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ConvertRecoveryPointToSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ConvertRecoveryPointToSnapshotInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ConvertRecoveryPointToSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ConvertRecoveryPointToSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ConvertRecoveryPointToSnapshotInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomDomainAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomDomainAssociation(ctx context.Context, params *redshiftserverless.CreateCustomDomainAssociationInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateCustomDomainAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomDomainAssociation")
	}

	var r0 *redshiftserverless.CreateCustomDomainAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateCustomDomainAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) *redshiftserverless.CreateCustomDomainAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.CreateCustomDomainAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.CreateCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEndpointAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEndpointAccess(ctx context.Context, params *redshiftserverless.CreateEndpointAccessInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateEndpointAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEndpointAccess")
	}

	var r0 *redshiftserverless.CreateEndpointAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateEndpointAccessInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateEndpointAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateEndpointAccessInput, ...func(*redshiftserverless.Options)) *redshiftserverless.CreateEndpointAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.CreateEndpointAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.CreateEndpointAccessInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNamespace(ctx context.Context, params *redshiftserverless.CreateNamespaceInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 *redshiftserverless.CreateNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateNamespaceInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateNamespaceInput, ...func(*redshiftserverless.Options)) *redshiftserverless.CreateNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.CreateNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.CreateNamespaceInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateScheduledAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateScheduledAction(ctx context.Context, params *redshiftserverless.CreateScheduledActionInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateScheduledActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateScheduledAction")
	}

	var r0 *redshiftserverless.CreateScheduledActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateScheduledActionInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateScheduledActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateScheduledActionInput, ...func(*redshiftserverless.Options)) *redshiftserverless.CreateScheduledActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.CreateScheduledActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.CreateScheduledActionInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSnapshot(ctx context.Context, params *redshiftserverless.CreateSnapshotInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 *redshiftserverless.CreateSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateSnapshotInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateSnapshotInput, ...func(*redshiftserverless.Options)) *redshiftserverless.CreateSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.CreateSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.CreateSnapshotInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshotCopyConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSnapshotCopyConfiguration(ctx context.Context, params *redshiftserverless.CreateSnapshotCopyConfigurationInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateSnapshotCopyConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshotCopyConfiguration")
	}

	var r0 *redshiftserverless.CreateSnapshotCopyConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateSnapshotCopyConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) *redshiftserverless.CreateSnapshotCopyConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.CreateSnapshotCopyConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.CreateSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUsageLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUsageLimit(ctx context.Context, params *redshiftserverless.CreateUsageLimitInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateUsageLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUsageLimit")
	}

	var r0 *redshiftserverless.CreateUsageLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateUsageLimitInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateUsageLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateUsageLimitInput, ...func(*redshiftserverless.Options)) *redshiftserverless.CreateUsageLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.CreateUsageLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.CreateUsageLimitInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkgroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkgroup(ctx context.Context, params *redshiftserverless.CreateWorkgroupInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateWorkgroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkgroup")
	}

	var r0 *redshiftserverless.CreateWorkgroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateWorkgroupInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.CreateWorkgroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.CreateWorkgroupInput, ...func(*redshiftserverless.Options)) *redshiftserverless.CreateWorkgroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.CreateWorkgroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.CreateWorkgroupInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomDomainAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomDomainAssociation(ctx context.Context, params *redshiftserverless.DeleteCustomDomainAssociationInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteCustomDomainAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomDomainAssociation")
	}

	var r0 *redshiftserverless.DeleteCustomDomainAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteCustomDomainAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteCustomDomainAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteCustomDomainAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpointAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEndpointAccess(ctx context.Context, params *redshiftserverless.DeleteEndpointAccessInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteEndpointAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpointAccess")
	}

	var r0 *redshiftserverless.DeleteEndpointAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteEndpointAccessInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteEndpointAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteEndpointAccessInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteEndpointAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteEndpointAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteEndpointAccessInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNamespace(ctx context.Context, params *redshiftserverless.DeleteNamespaceInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 *redshiftserverless.DeleteNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteNamespaceInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteNamespaceInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteNamespaceInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcePolicy(ctx context.Context, params *redshiftserverless.DeleteResourcePolicyInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcePolicy")
	}

	var r0 *redshiftserverless.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteResourcePolicyInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteResourcePolicyInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteResourcePolicyInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteScheduledAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteScheduledAction(ctx context.Context, params *redshiftserverless.DeleteScheduledActionInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteScheduledActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteScheduledAction")
	}

	var r0 *redshiftserverless.DeleteScheduledActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteScheduledActionInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteScheduledActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteScheduledActionInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteScheduledActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteScheduledActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteScheduledActionInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSnapshot(ctx context.Context, params *redshiftserverless.DeleteSnapshotInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 *redshiftserverless.DeleteSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteSnapshotInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteSnapshotInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteSnapshotInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshotCopyConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSnapshotCopyConfiguration(ctx context.Context, params *redshiftserverless.DeleteSnapshotCopyConfigurationInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteSnapshotCopyConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshotCopyConfiguration")
	}

	var r0 *redshiftserverless.DeleteSnapshotCopyConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteSnapshotCopyConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteSnapshotCopyConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteSnapshotCopyConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUsageLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUsageLimit(ctx context.Context, params *redshiftserverless.DeleteUsageLimitInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteUsageLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUsageLimit")
	}

	var r0 *redshiftserverless.DeleteUsageLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteUsageLimitInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteUsageLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteUsageLimitInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteUsageLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteUsageLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteUsageLimitInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkgroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkgroup(ctx context.Context, params *redshiftserverless.DeleteWorkgroupInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteWorkgroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkgroup")
	}

	var r0 *redshiftserverless.DeleteWorkgroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteWorkgroupInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.DeleteWorkgroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.DeleteWorkgroupInput, ...func(*redshiftserverless.Options)) *redshiftserverless.DeleteWorkgroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.DeleteWorkgroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.DeleteWorkgroupInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCredentials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCredentials(ctx context.Context, params *redshiftserverless.GetCredentialsInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetCredentialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCredentials")
	}

	var r0 *redshiftserverless.GetCredentialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetCredentialsInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetCredentialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetCredentialsInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetCredentialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetCredentialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetCredentialsInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCustomDomainAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCustomDomainAssociation(ctx context.Context, params *redshiftserverless.GetCustomDomainAssociationInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetCustomDomainAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomDomainAssociation")
	}

	var r0 *redshiftserverless.GetCustomDomainAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetCustomDomainAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetCustomDomainAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetCustomDomainAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEndpointAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEndpointAccess(ctx context.Context, params *redshiftserverless.GetEndpointAccessInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetEndpointAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEndpointAccess")
	}

	var r0 *redshiftserverless.GetEndpointAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetEndpointAccessInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetEndpointAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetEndpointAccessInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetEndpointAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetEndpointAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetEndpointAccessInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNamespace(ctx context.Context, params *redshiftserverless.GetNamespaceInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNamespace")
	}

	var r0 *redshiftserverless.GetNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetNamespaceInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetNamespaceInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetNamespaceInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecoveryPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecoveryPoint(ctx context.Context, params *redshiftserverless.GetRecoveryPointInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetRecoveryPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecoveryPoint")
	}

	var r0 *redshiftserverless.GetRecoveryPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetRecoveryPointInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetRecoveryPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetRecoveryPointInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetRecoveryPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetRecoveryPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetRecoveryPointInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *redshiftserverless.GetResourcePolicyInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *redshiftserverless.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetResourcePolicyInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetResourcePolicyInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetResourcePolicyInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScheduledAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetScheduledAction(ctx context.Context, params *redshiftserverless.GetScheduledActionInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetScheduledActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetScheduledAction")
	}

	var r0 *redshiftserverless.GetScheduledActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetScheduledActionInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetScheduledActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetScheduledActionInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetScheduledActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetScheduledActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetScheduledActionInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSnapshot(ctx context.Context, params *redshiftserverless.GetSnapshotInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshot")
	}

	var r0 *redshiftserverless.GetSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetSnapshotInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetSnapshotInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetSnapshotInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableRestoreStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTableRestoreStatus(ctx context.Context, params *redshiftserverless.GetTableRestoreStatusInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetTableRestoreStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTableRestoreStatus")
	}

	var r0 *redshiftserverless.GetTableRestoreStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetTableRestoreStatusInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetTableRestoreStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetTableRestoreStatusInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetTableRestoreStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetTableRestoreStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetTableRestoreStatusInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsageLimit(ctx context.Context, params *redshiftserverless.GetUsageLimitInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetUsageLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsageLimit")
	}

	var r0 *redshiftserverless.GetUsageLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetUsageLimitInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetUsageLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetUsageLimitInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetUsageLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetUsageLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetUsageLimitInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkgroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkgroup(ctx context.Context, params *redshiftserverless.GetWorkgroupInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.GetWorkgroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkgroup")
	}

	var r0 *redshiftserverless.GetWorkgroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetWorkgroupInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.GetWorkgroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.GetWorkgroupInput, ...func(*redshiftserverless.Options)) *redshiftserverless.GetWorkgroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.GetWorkgroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.GetWorkgroupInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomDomainAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomDomainAssociations(ctx context.Context, params *redshiftserverless.ListCustomDomainAssociationsInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListCustomDomainAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomDomainAssociations")
	}

	var r0 *redshiftserverless.ListCustomDomainAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListCustomDomainAssociationsInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListCustomDomainAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListCustomDomainAssociationsInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListCustomDomainAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListCustomDomainAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListCustomDomainAssociationsInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpointAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEndpointAccess(ctx context.Context, params *redshiftserverless.ListEndpointAccessInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListEndpointAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEndpointAccess")
	}

	var r0 *redshiftserverless.ListEndpointAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListEndpointAccessInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListEndpointAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListEndpointAccessInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListEndpointAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListEndpointAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListEndpointAccessInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNamespaces(ctx context.Context, params *redshiftserverless.ListNamespacesInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListNamespacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *redshiftserverless.ListNamespacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListNamespacesInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListNamespacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListNamespacesInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListNamespacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListNamespacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListNamespacesInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecoveryPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecoveryPoints(ctx context.Context, params *redshiftserverless.ListRecoveryPointsInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListRecoveryPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecoveryPoints")
	}

	var r0 *redshiftserverless.ListRecoveryPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListRecoveryPointsInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListRecoveryPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListRecoveryPointsInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListRecoveryPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListRecoveryPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListRecoveryPointsInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListScheduledActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListScheduledActions(ctx context.Context, params *redshiftserverless.ListScheduledActionsInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListScheduledActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListScheduledActions")
	}

	var r0 *redshiftserverless.ListScheduledActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListScheduledActionsInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListScheduledActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListScheduledActionsInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListScheduledActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListScheduledActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListScheduledActionsInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshotCopyConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSnapshotCopyConfigurations(ctx context.Context, params *redshiftserverless.ListSnapshotCopyConfigurationsInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListSnapshotCopyConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshotCopyConfigurations")
	}

	var r0 *redshiftserverless.ListSnapshotCopyConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListSnapshotCopyConfigurationsInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListSnapshotCopyConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListSnapshotCopyConfigurationsInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListSnapshotCopyConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListSnapshotCopyConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListSnapshotCopyConfigurationsInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSnapshots(ctx context.Context, params *redshiftserverless.ListSnapshotsInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshots")
	}

	var r0 *redshiftserverless.ListSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListSnapshotsInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListSnapshotsInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListSnapshotsInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTableRestoreStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTableRestoreStatus(ctx context.Context, params *redshiftserverless.ListTableRestoreStatusInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListTableRestoreStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTableRestoreStatus")
	}

	var r0 *redshiftserverless.ListTableRestoreStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListTableRestoreStatusInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListTableRestoreStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListTableRestoreStatusInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListTableRestoreStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListTableRestoreStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListTableRestoreStatusInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *redshiftserverless.ListTagsForResourceInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *redshiftserverless.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListTagsForResourceInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListTagsForResourceInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListTagsForResourceInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsageLimits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsageLimits(ctx context.Context, params *redshiftserverless.ListUsageLimitsInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListUsageLimitsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsageLimits")
	}

	var r0 *redshiftserverless.ListUsageLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListUsageLimitsInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListUsageLimitsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListUsageLimitsInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListUsageLimitsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListUsageLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListUsageLimitsInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkgroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkgroups(ctx context.Context, params *redshiftserverless.ListWorkgroupsInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.ListWorkgroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkgroups")
	}

	var r0 *redshiftserverless.ListWorkgroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListWorkgroupsInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.ListWorkgroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.ListWorkgroupsInput, ...func(*redshiftserverless.Options)) *redshiftserverless.ListWorkgroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.ListWorkgroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.ListWorkgroupsInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() redshiftserverless.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 redshiftserverless.Options
	if rf, ok := ret.Get(0).(func() redshiftserverless.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(redshiftserverless.Options)
	}

	return r0
}

// PutResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourcePolicy(ctx context.Context, params *redshiftserverless.PutResourcePolicyInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourcePolicy")
	}

	var r0 *redshiftserverless.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.PutResourcePolicyInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.PutResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.PutResourcePolicyInput, ...func(*redshiftserverless.Options)) *redshiftserverless.PutResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.PutResourcePolicyInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreFromRecoveryPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreFromRecoveryPoint(ctx context.Context, params *redshiftserverless.RestoreFromRecoveryPointInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.RestoreFromRecoveryPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreFromRecoveryPoint")
	}

	var r0 *redshiftserverless.RestoreFromRecoveryPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.RestoreFromRecoveryPointInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.RestoreFromRecoveryPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.RestoreFromRecoveryPointInput, ...func(*redshiftserverless.Options)) *redshiftserverless.RestoreFromRecoveryPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.RestoreFromRecoveryPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.RestoreFromRecoveryPointInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreFromSnapshot(ctx context.Context, params *redshiftserverless.RestoreFromSnapshotInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.RestoreFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreFromSnapshot")
	}

	var r0 *redshiftserverless.RestoreFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.RestoreFromSnapshotInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.RestoreFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.RestoreFromSnapshotInput, ...func(*redshiftserverless.Options)) *redshiftserverless.RestoreFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.RestoreFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.RestoreFromSnapshotInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreTableFromRecoveryPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreTableFromRecoveryPoint(ctx context.Context, params *redshiftserverless.RestoreTableFromRecoveryPointInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.RestoreTableFromRecoveryPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreTableFromRecoveryPoint")
	}

	var r0 *redshiftserverless.RestoreTableFromRecoveryPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.RestoreTableFromRecoveryPointInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.RestoreTableFromRecoveryPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.RestoreTableFromRecoveryPointInput, ...func(*redshiftserverless.Options)) *redshiftserverless.RestoreTableFromRecoveryPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.RestoreTableFromRecoveryPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.RestoreTableFromRecoveryPointInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreTableFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreTableFromSnapshot(ctx context.Context, params *redshiftserverless.RestoreTableFromSnapshotInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.RestoreTableFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreTableFromSnapshot")
	}

	var r0 *redshiftserverless.RestoreTableFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.RestoreTableFromSnapshotInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.RestoreTableFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.RestoreTableFromSnapshotInput, ...func(*redshiftserverless.Options)) *redshiftserverless.RestoreTableFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.RestoreTableFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.RestoreTableFromSnapshotInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *redshiftserverless.TagResourceInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *redshiftserverless.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.TagResourceInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.TagResourceInput, ...func(*redshiftserverless.Options)) *redshiftserverless.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.TagResourceInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *redshiftserverless.UntagResourceInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *redshiftserverless.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UntagResourceInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UntagResourceInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UntagResourceInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomDomainAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCustomDomainAssociation(ctx context.Context, params *redshiftserverless.UpdateCustomDomainAssociationInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateCustomDomainAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomDomainAssociation")
	}

	var r0 *redshiftserverless.UpdateCustomDomainAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateCustomDomainAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UpdateCustomDomainAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UpdateCustomDomainAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UpdateCustomDomainAssociationInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEndpointAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEndpointAccess(ctx context.Context, params *redshiftserverless.UpdateEndpointAccessInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateEndpointAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEndpointAccess")
	}

	var r0 *redshiftserverless.UpdateEndpointAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateEndpointAccessInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateEndpointAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateEndpointAccessInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UpdateEndpointAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UpdateEndpointAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UpdateEndpointAccessInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNamespace(ctx context.Context, params *redshiftserverless.UpdateNamespaceInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNamespace")
	}

	var r0 *redshiftserverless.UpdateNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateNamespaceInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateNamespaceInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UpdateNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UpdateNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UpdateNamespaceInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateScheduledAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateScheduledAction(ctx context.Context, params *redshiftserverless.UpdateScheduledActionInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateScheduledActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateScheduledAction")
	}

	var r0 *redshiftserverless.UpdateScheduledActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateScheduledActionInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateScheduledActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateScheduledActionInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UpdateScheduledActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UpdateScheduledActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UpdateScheduledActionInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSnapshot(ctx context.Context, params *redshiftserverless.UpdateSnapshotInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnapshot")
	}

	var r0 *redshiftserverless.UpdateSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateSnapshotInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateSnapshotInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UpdateSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UpdateSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UpdateSnapshotInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSnapshotCopyConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSnapshotCopyConfiguration(ctx context.Context, params *redshiftserverless.UpdateSnapshotCopyConfigurationInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateSnapshotCopyConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSnapshotCopyConfiguration")
	}

	var r0 *redshiftserverless.UpdateSnapshotCopyConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateSnapshotCopyConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UpdateSnapshotCopyConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UpdateSnapshotCopyConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UpdateSnapshotCopyConfigurationInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUsageLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUsageLimit(ctx context.Context, params *redshiftserverless.UpdateUsageLimitInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateUsageLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUsageLimit")
	}

	var r0 *redshiftserverless.UpdateUsageLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateUsageLimitInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateUsageLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateUsageLimitInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UpdateUsageLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UpdateUsageLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UpdateUsageLimitInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkgroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkgroup(ctx context.Context, params *redshiftserverless.UpdateWorkgroupInput, optFns ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateWorkgroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkgroup")
	}

	var r0 *redshiftserverless.UpdateWorkgroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateWorkgroupInput, ...func(*redshiftserverless.Options)) (*redshiftserverless.UpdateWorkgroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *redshiftserverless.UpdateWorkgroupInput, ...func(*redshiftserverless.Options)) *redshiftserverless.UpdateWorkgroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redshiftserverless.UpdateWorkgroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *redshiftserverless.UpdateWorkgroupInput, ...func(*redshiftserverless.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
