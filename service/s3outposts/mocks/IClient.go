// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	s3outposts "github.com/aws/aws-sdk-go-v2/service/s3outposts"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEndpoint(ctx context.Context, params *s3outposts.CreateEndpointInput, optFns ...func(*s3outposts.Options)) (*s3outposts.CreateEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEndpoint")
	}

	var r0 *s3outposts.CreateEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.CreateEndpointInput, ...func(*s3outposts.Options)) (*s3outposts.CreateEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.CreateEndpointInput, ...func(*s3outposts.Options)) *s3outposts.CreateEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3outposts.CreateEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3outposts.CreateEndpointInput, ...func(*s3outposts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEndpoint(ctx context.Context, params *s3outposts.DeleteEndpointInput, optFns ...func(*s3outposts.Options)) (*s3outposts.DeleteEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpoint")
	}

	var r0 *s3outposts.DeleteEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.DeleteEndpointInput, ...func(*s3outposts.Options)) (*s3outposts.DeleteEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.DeleteEndpointInput, ...func(*s3outposts.Options)) *s3outposts.DeleteEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3outposts.DeleteEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3outposts.DeleteEndpointInput, ...func(*s3outposts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEndpoints(ctx context.Context, params *s3outposts.ListEndpointsInput, optFns ...func(*s3outposts.Options)) (*s3outposts.ListEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEndpoints")
	}

	var r0 *s3outposts.ListEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.ListEndpointsInput, ...func(*s3outposts.Options)) (*s3outposts.ListEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.ListEndpointsInput, ...func(*s3outposts.Options)) *s3outposts.ListEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3outposts.ListEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3outposts.ListEndpointsInput, ...func(*s3outposts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOutpostsWithS3 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOutpostsWithS3(ctx context.Context, params *s3outposts.ListOutpostsWithS3Input, optFns ...func(*s3outposts.Options)) (*s3outposts.ListOutpostsWithS3Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOutpostsWithS3")
	}

	var r0 *s3outposts.ListOutpostsWithS3Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.ListOutpostsWithS3Input, ...func(*s3outposts.Options)) (*s3outposts.ListOutpostsWithS3Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.ListOutpostsWithS3Input, ...func(*s3outposts.Options)) *s3outposts.ListOutpostsWithS3Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3outposts.ListOutpostsWithS3Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3outposts.ListOutpostsWithS3Input, ...func(*s3outposts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSharedEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSharedEndpoints(ctx context.Context, params *s3outposts.ListSharedEndpointsInput, optFns ...func(*s3outposts.Options)) (*s3outposts.ListSharedEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSharedEndpoints")
	}

	var r0 *s3outposts.ListSharedEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.ListSharedEndpointsInput, ...func(*s3outposts.Options)) (*s3outposts.ListSharedEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3outposts.ListSharedEndpointsInput, ...func(*s3outposts.Options)) *s3outposts.ListSharedEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3outposts.ListSharedEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3outposts.ListSharedEndpointsInput, ...func(*s3outposts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() s3outposts.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 s3outposts.Options
	if rf, ok := ret.Get(0).(func() s3outposts.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(s3outposts.Options)
	}

	return r0
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
