// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	ram "github.com/aws/aws-sdk-go-v2/service/ram"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptResourceShareInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptResourceShareInvitation(ctx context.Context, params *ram.AcceptResourceShareInvitationInput, optFns ...func(*ram.Options)) (*ram.AcceptResourceShareInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptResourceShareInvitation")
	}

	var r0 *ram.AcceptResourceShareInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.AcceptResourceShareInvitationInput, ...func(*ram.Options)) (*ram.AcceptResourceShareInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.AcceptResourceShareInvitationInput, ...func(*ram.Options)) *ram.AcceptResourceShareInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.AcceptResourceShareInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.AcceptResourceShareInvitationInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateResourceShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateResourceShare(ctx context.Context, params *ram.AssociateResourceShareInput, optFns ...func(*ram.Options)) (*ram.AssociateResourceShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateResourceShare")
	}

	var r0 *ram.AssociateResourceShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.AssociateResourceShareInput, ...func(*ram.Options)) (*ram.AssociateResourceShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.AssociateResourceShareInput, ...func(*ram.Options)) *ram.AssociateResourceShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.AssociateResourceShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.AssociateResourceShareInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateResourceSharePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateResourceSharePermission(ctx context.Context, params *ram.AssociateResourceSharePermissionInput, optFns ...func(*ram.Options)) (*ram.AssociateResourceSharePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateResourceSharePermission")
	}

	var r0 *ram.AssociateResourceSharePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.AssociateResourceSharePermissionInput, ...func(*ram.Options)) (*ram.AssociateResourceSharePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.AssociateResourceSharePermissionInput, ...func(*ram.Options)) *ram.AssociateResourceSharePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.AssociateResourceSharePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.AssociateResourceSharePermissionInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePermission(ctx context.Context, params *ram.CreatePermissionInput, optFns ...func(*ram.Options)) (*ram.CreatePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermission")
	}

	var r0 *ram.CreatePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.CreatePermissionInput, ...func(*ram.Options)) (*ram.CreatePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.CreatePermissionInput, ...func(*ram.Options)) *ram.CreatePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.CreatePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.CreatePermissionInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePermissionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePermissionVersion(ctx context.Context, params *ram.CreatePermissionVersionInput, optFns ...func(*ram.Options)) (*ram.CreatePermissionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermissionVersion")
	}

	var r0 *ram.CreatePermissionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.CreatePermissionVersionInput, ...func(*ram.Options)) (*ram.CreatePermissionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.CreatePermissionVersionInput, ...func(*ram.Options)) *ram.CreatePermissionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.CreatePermissionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.CreatePermissionVersionInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceShare(ctx context.Context, params *ram.CreateResourceShareInput, optFns ...func(*ram.Options)) (*ram.CreateResourceShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceShare")
	}

	var r0 *ram.CreateResourceShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.CreateResourceShareInput, ...func(*ram.Options)) (*ram.CreateResourceShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.CreateResourceShareInput, ...func(*ram.Options)) *ram.CreateResourceShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.CreateResourceShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.CreateResourceShareInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePermission(ctx context.Context, params *ram.DeletePermissionInput, optFns ...func(*ram.Options)) (*ram.DeletePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermission")
	}

	var r0 *ram.DeletePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DeletePermissionInput, ...func(*ram.Options)) (*ram.DeletePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DeletePermissionInput, ...func(*ram.Options)) *ram.DeletePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.DeletePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.DeletePermissionInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePermissionVersion(ctx context.Context, params *ram.DeletePermissionVersionInput, optFns ...func(*ram.Options)) (*ram.DeletePermissionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermissionVersion")
	}

	var r0 *ram.DeletePermissionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DeletePermissionVersionInput, ...func(*ram.Options)) (*ram.DeletePermissionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DeletePermissionVersionInput, ...func(*ram.Options)) *ram.DeletePermissionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.DeletePermissionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.DeletePermissionVersionInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceShare(ctx context.Context, params *ram.DeleteResourceShareInput, optFns ...func(*ram.Options)) (*ram.DeleteResourceShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceShare")
	}

	var r0 *ram.DeleteResourceShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DeleteResourceShareInput, ...func(*ram.Options)) (*ram.DeleteResourceShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DeleteResourceShareInput, ...func(*ram.Options)) *ram.DeleteResourceShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.DeleteResourceShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.DeleteResourceShareInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateResourceShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateResourceShare(ctx context.Context, params *ram.DisassociateResourceShareInput, optFns ...func(*ram.Options)) (*ram.DisassociateResourceShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateResourceShare")
	}

	var r0 *ram.DisassociateResourceShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DisassociateResourceShareInput, ...func(*ram.Options)) (*ram.DisassociateResourceShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DisassociateResourceShareInput, ...func(*ram.Options)) *ram.DisassociateResourceShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.DisassociateResourceShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.DisassociateResourceShareInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateResourceSharePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateResourceSharePermission(ctx context.Context, params *ram.DisassociateResourceSharePermissionInput, optFns ...func(*ram.Options)) (*ram.DisassociateResourceSharePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateResourceSharePermission")
	}

	var r0 *ram.DisassociateResourceSharePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DisassociateResourceSharePermissionInput, ...func(*ram.Options)) (*ram.DisassociateResourceSharePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.DisassociateResourceSharePermissionInput, ...func(*ram.Options)) *ram.DisassociateResourceSharePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.DisassociateResourceSharePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.DisassociateResourceSharePermissionInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableSharingWithAwsOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableSharingWithAwsOrganization(ctx context.Context, params *ram.EnableSharingWithAwsOrganizationInput, optFns ...func(*ram.Options)) (*ram.EnableSharingWithAwsOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableSharingWithAwsOrganization")
	}

	var r0 *ram.EnableSharingWithAwsOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.EnableSharingWithAwsOrganizationInput, ...func(*ram.Options)) (*ram.EnableSharingWithAwsOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.EnableSharingWithAwsOrganizationInput, ...func(*ram.Options)) *ram.EnableSharingWithAwsOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.EnableSharingWithAwsOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.EnableSharingWithAwsOrganizationInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPermission(ctx context.Context, params *ram.GetPermissionInput, optFns ...func(*ram.Options)) (*ram.GetPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPermission")
	}

	var r0 *ram.GetPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetPermissionInput, ...func(*ram.Options)) (*ram.GetPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetPermissionInput, ...func(*ram.Options)) *ram.GetPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.GetPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.GetPermissionInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicies(ctx context.Context, params *ram.GetResourcePoliciesInput, optFns ...func(*ram.Options)) (*ram.GetResourcePoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicies")
	}

	var r0 *ram.GetResourcePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetResourcePoliciesInput, ...func(*ram.Options)) (*ram.GetResourcePoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetResourcePoliciesInput, ...func(*ram.Options)) *ram.GetResourcePoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.GetResourcePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.GetResourcePoliciesInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceShareAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceShareAssociations(ctx context.Context, params *ram.GetResourceShareAssociationsInput, optFns ...func(*ram.Options)) (*ram.GetResourceShareAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceShareAssociations")
	}

	var r0 *ram.GetResourceShareAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetResourceShareAssociationsInput, ...func(*ram.Options)) (*ram.GetResourceShareAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetResourceShareAssociationsInput, ...func(*ram.Options)) *ram.GetResourceShareAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.GetResourceShareAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.GetResourceShareAssociationsInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceShareInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceShareInvitations(ctx context.Context, params *ram.GetResourceShareInvitationsInput, optFns ...func(*ram.Options)) (*ram.GetResourceShareInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceShareInvitations")
	}

	var r0 *ram.GetResourceShareInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetResourceShareInvitationsInput, ...func(*ram.Options)) (*ram.GetResourceShareInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetResourceShareInvitationsInput, ...func(*ram.Options)) *ram.GetResourceShareInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.GetResourceShareInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.GetResourceShareInvitationsInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceShares(ctx context.Context, params *ram.GetResourceSharesInput, optFns ...func(*ram.Options)) (*ram.GetResourceSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceShares")
	}

	var r0 *ram.GetResourceSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetResourceSharesInput, ...func(*ram.Options)) (*ram.GetResourceSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.GetResourceSharesInput, ...func(*ram.Options)) *ram.GetResourceSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.GetResourceSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.GetResourceSharesInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPendingInvitationResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPendingInvitationResources(ctx context.Context, params *ram.ListPendingInvitationResourcesInput, optFns ...func(*ram.Options)) (*ram.ListPendingInvitationResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPendingInvitationResources")
	}

	var r0 *ram.ListPendingInvitationResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPendingInvitationResourcesInput, ...func(*ram.Options)) (*ram.ListPendingInvitationResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPendingInvitationResourcesInput, ...func(*ram.Options)) *ram.ListPendingInvitationResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListPendingInvitationResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListPendingInvitationResourcesInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissionAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissionAssociations(ctx context.Context, params *ram.ListPermissionAssociationsInput, optFns ...func(*ram.Options)) (*ram.ListPermissionAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionAssociations")
	}

	var r0 *ram.ListPermissionAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPermissionAssociationsInput, ...func(*ram.Options)) (*ram.ListPermissionAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPermissionAssociationsInput, ...func(*ram.Options)) *ram.ListPermissionAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListPermissionAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListPermissionAssociationsInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissionVersions(ctx context.Context, params *ram.ListPermissionVersionsInput, optFns ...func(*ram.Options)) (*ram.ListPermissionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionVersions")
	}

	var r0 *ram.ListPermissionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPermissionVersionsInput, ...func(*ram.Options)) (*ram.ListPermissionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPermissionVersionsInput, ...func(*ram.Options)) *ram.ListPermissionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListPermissionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListPermissionVersionsInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissions(ctx context.Context, params *ram.ListPermissionsInput, optFns ...func(*ram.Options)) (*ram.ListPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissions")
	}

	var r0 *ram.ListPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPermissionsInput, ...func(*ram.Options)) (*ram.ListPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPermissionsInput, ...func(*ram.Options)) *ram.ListPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListPermissionsInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrincipals provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrincipals(ctx context.Context, params *ram.ListPrincipalsInput, optFns ...func(*ram.Options)) (*ram.ListPrincipalsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrincipals")
	}

	var r0 *ram.ListPrincipalsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPrincipalsInput, ...func(*ram.Options)) (*ram.ListPrincipalsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListPrincipalsInput, ...func(*ram.Options)) *ram.ListPrincipalsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListPrincipalsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListPrincipalsInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplacePermissionAssociationsWork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReplacePermissionAssociationsWork(ctx context.Context, params *ram.ListReplacePermissionAssociationsWorkInput, optFns ...func(*ram.Options)) (*ram.ListReplacePermissionAssociationsWorkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReplacePermissionAssociationsWork")
	}

	var r0 *ram.ListReplacePermissionAssociationsWorkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListReplacePermissionAssociationsWorkInput, ...func(*ram.Options)) (*ram.ListReplacePermissionAssociationsWorkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListReplacePermissionAssociationsWorkInput, ...func(*ram.Options)) *ram.ListReplacePermissionAssociationsWorkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListReplacePermissionAssociationsWorkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListReplacePermissionAssociationsWorkInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceSharePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceSharePermissions(ctx context.Context, params *ram.ListResourceSharePermissionsInput, optFns ...func(*ram.Options)) (*ram.ListResourceSharePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceSharePermissions")
	}

	var r0 *ram.ListResourceSharePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListResourceSharePermissionsInput, ...func(*ram.Options)) (*ram.ListResourceSharePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListResourceSharePermissionsInput, ...func(*ram.Options)) *ram.ListResourceSharePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListResourceSharePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListResourceSharePermissionsInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceTypes(ctx context.Context, params *ram.ListResourceTypesInput, optFns ...func(*ram.Options)) (*ram.ListResourceTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceTypes")
	}

	var r0 *ram.ListResourceTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListResourceTypesInput, ...func(*ram.Options)) (*ram.ListResourceTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListResourceTypesInput, ...func(*ram.Options)) *ram.ListResourceTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListResourceTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListResourceTypesInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResources(ctx context.Context, params *ram.ListResourcesInput, optFns ...func(*ram.Options)) (*ram.ListResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResources")
	}

	var r0 *ram.ListResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListResourcesInput, ...func(*ram.Options)) (*ram.ListResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ListResourcesInput, ...func(*ram.Options)) *ram.ListResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ListResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ListResourcesInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() ram.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 ram.Options
	if rf, ok := ret.Get(0).(func() ram.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ram.Options)
	}

	return r0
}

// PromotePermissionCreatedFromPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PromotePermissionCreatedFromPolicy(ctx context.Context, params *ram.PromotePermissionCreatedFromPolicyInput, optFns ...func(*ram.Options)) (*ram.PromotePermissionCreatedFromPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PromotePermissionCreatedFromPolicy")
	}

	var r0 *ram.PromotePermissionCreatedFromPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.PromotePermissionCreatedFromPolicyInput, ...func(*ram.Options)) (*ram.PromotePermissionCreatedFromPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.PromotePermissionCreatedFromPolicyInput, ...func(*ram.Options)) *ram.PromotePermissionCreatedFromPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.PromotePermissionCreatedFromPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.PromotePermissionCreatedFromPolicyInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PromoteResourceShareCreatedFromPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PromoteResourceShareCreatedFromPolicy(ctx context.Context, params *ram.PromoteResourceShareCreatedFromPolicyInput, optFns ...func(*ram.Options)) (*ram.PromoteResourceShareCreatedFromPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PromoteResourceShareCreatedFromPolicy")
	}

	var r0 *ram.PromoteResourceShareCreatedFromPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.PromoteResourceShareCreatedFromPolicyInput, ...func(*ram.Options)) (*ram.PromoteResourceShareCreatedFromPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.PromoteResourceShareCreatedFromPolicyInput, ...func(*ram.Options)) *ram.PromoteResourceShareCreatedFromPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.PromoteResourceShareCreatedFromPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.PromoteResourceShareCreatedFromPolicyInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectResourceShareInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectResourceShareInvitation(ctx context.Context, params *ram.RejectResourceShareInvitationInput, optFns ...func(*ram.Options)) (*ram.RejectResourceShareInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectResourceShareInvitation")
	}

	var r0 *ram.RejectResourceShareInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.RejectResourceShareInvitationInput, ...func(*ram.Options)) (*ram.RejectResourceShareInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.RejectResourceShareInvitationInput, ...func(*ram.Options)) *ram.RejectResourceShareInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.RejectResourceShareInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.RejectResourceShareInvitationInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReplacePermissionAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReplacePermissionAssociations(ctx context.Context, params *ram.ReplacePermissionAssociationsInput, optFns ...func(*ram.Options)) (*ram.ReplacePermissionAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReplacePermissionAssociations")
	}

	var r0 *ram.ReplacePermissionAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ReplacePermissionAssociationsInput, ...func(*ram.Options)) (*ram.ReplacePermissionAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.ReplacePermissionAssociationsInput, ...func(*ram.Options)) *ram.ReplacePermissionAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.ReplacePermissionAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.ReplacePermissionAssociationsInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetDefaultPermissionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetDefaultPermissionVersion(ctx context.Context, params *ram.SetDefaultPermissionVersionInput, optFns ...func(*ram.Options)) (*ram.SetDefaultPermissionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetDefaultPermissionVersion")
	}

	var r0 *ram.SetDefaultPermissionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.SetDefaultPermissionVersionInput, ...func(*ram.Options)) (*ram.SetDefaultPermissionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.SetDefaultPermissionVersionInput, ...func(*ram.Options)) *ram.SetDefaultPermissionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.SetDefaultPermissionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.SetDefaultPermissionVersionInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *ram.TagResourceInput, optFns ...func(*ram.Options)) (*ram.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *ram.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.TagResourceInput, ...func(*ram.Options)) (*ram.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.TagResourceInput, ...func(*ram.Options)) *ram.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.TagResourceInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *ram.UntagResourceInput, optFns ...func(*ram.Options)) (*ram.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *ram.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.UntagResourceInput, ...func(*ram.Options)) (*ram.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.UntagResourceInput, ...func(*ram.Options)) *ram.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.UntagResourceInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceShare(ctx context.Context, params *ram.UpdateResourceShareInput, optFns ...func(*ram.Options)) (*ram.UpdateResourceShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceShare")
	}

	var r0 *ram.UpdateResourceShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ram.UpdateResourceShareInput, ...func(*ram.Options)) (*ram.UpdateResourceShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ram.UpdateResourceShareInput, ...func(*ram.Options)) *ram.UpdateResourceShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ram.UpdateResourceShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ram.UpdateResourceShareInput, ...func(*ram.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
