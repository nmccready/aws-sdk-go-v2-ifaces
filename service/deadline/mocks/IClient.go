// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	deadline "github.com/aws/aws-sdk-go-v2/service/deadline"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateMemberToFarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateMemberToFarm(ctx context.Context, params *deadline.AssociateMemberToFarmInput, optFns ...func(*deadline.Options)) (*deadline.AssociateMemberToFarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateMemberToFarm")
	}

	var r0 *deadline.AssociateMemberToFarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssociateMemberToFarmInput, ...func(*deadline.Options)) (*deadline.AssociateMemberToFarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssociateMemberToFarmInput, ...func(*deadline.Options)) *deadline.AssociateMemberToFarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssociateMemberToFarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssociateMemberToFarmInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateMemberToFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateMemberToFleet(ctx context.Context, params *deadline.AssociateMemberToFleetInput, optFns ...func(*deadline.Options)) (*deadline.AssociateMemberToFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateMemberToFleet")
	}

	var r0 *deadline.AssociateMemberToFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssociateMemberToFleetInput, ...func(*deadline.Options)) (*deadline.AssociateMemberToFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssociateMemberToFleetInput, ...func(*deadline.Options)) *deadline.AssociateMemberToFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssociateMemberToFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssociateMemberToFleetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateMemberToJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateMemberToJob(ctx context.Context, params *deadline.AssociateMemberToJobInput, optFns ...func(*deadline.Options)) (*deadline.AssociateMemberToJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateMemberToJob")
	}

	var r0 *deadline.AssociateMemberToJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssociateMemberToJobInput, ...func(*deadline.Options)) (*deadline.AssociateMemberToJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssociateMemberToJobInput, ...func(*deadline.Options)) *deadline.AssociateMemberToJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssociateMemberToJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssociateMemberToJobInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateMemberToQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateMemberToQueue(ctx context.Context, params *deadline.AssociateMemberToQueueInput, optFns ...func(*deadline.Options)) (*deadline.AssociateMemberToQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateMemberToQueue")
	}

	var r0 *deadline.AssociateMemberToQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssociateMemberToQueueInput, ...func(*deadline.Options)) (*deadline.AssociateMemberToQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssociateMemberToQueueInput, ...func(*deadline.Options)) *deadline.AssociateMemberToQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssociateMemberToQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssociateMemberToQueueInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssumeFleetRoleForRead provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssumeFleetRoleForRead(ctx context.Context, params *deadline.AssumeFleetRoleForReadInput, optFns ...func(*deadline.Options)) (*deadline.AssumeFleetRoleForReadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssumeFleetRoleForRead")
	}

	var r0 *deadline.AssumeFleetRoleForReadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeFleetRoleForReadInput, ...func(*deadline.Options)) (*deadline.AssumeFleetRoleForReadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeFleetRoleForReadInput, ...func(*deadline.Options)) *deadline.AssumeFleetRoleForReadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssumeFleetRoleForReadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssumeFleetRoleForReadInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssumeFleetRoleForWorker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssumeFleetRoleForWorker(ctx context.Context, params *deadline.AssumeFleetRoleForWorkerInput, optFns ...func(*deadline.Options)) (*deadline.AssumeFleetRoleForWorkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssumeFleetRoleForWorker")
	}

	var r0 *deadline.AssumeFleetRoleForWorkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeFleetRoleForWorkerInput, ...func(*deadline.Options)) (*deadline.AssumeFleetRoleForWorkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeFleetRoleForWorkerInput, ...func(*deadline.Options)) *deadline.AssumeFleetRoleForWorkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssumeFleetRoleForWorkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssumeFleetRoleForWorkerInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssumeQueueRoleForRead provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssumeQueueRoleForRead(ctx context.Context, params *deadline.AssumeQueueRoleForReadInput, optFns ...func(*deadline.Options)) (*deadline.AssumeQueueRoleForReadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssumeQueueRoleForRead")
	}

	var r0 *deadline.AssumeQueueRoleForReadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeQueueRoleForReadInput, ...func(*deadline.Options)) (*deadline.AssumeQueueRoleForReadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeQueueRoleForReadInput, ...func(*deadline.Options)) *deadline.AssumeQueueRoleForReadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssumeQueueRoleForReadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssumeQueueRoleForReadInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssumeQueueRoleForUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssumeQueueRoleForUser(ctx context.Context, params *deadline.AssumeQueueRoleForUserInput, optFns ...func(*deadline.Options)) (*deadline.AssumeQueueRoleForUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssumeQueueRoleForUser")
	}

	var r0 *deadline.AssumeQueueRoleForUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeQueueRoleForUserInput, ...func(*deadline.Options)) (*deadline.AssumeQueueRoleForUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeQueueRoleForUserInput, ...func(*deadline.Options)) *deadline.AssumeQueueRoleForUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssumeQueueRoleForUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssumeQueueRoleForUserInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssumeQueueRoleForWorker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssumeQueueRoleForWorker(ctx context.Context, params *deadline.AssumeQueueRoleForWorkerInput, optFns ...func(*deadline.Options)) (*deadline.AssumeQueueRoleForWorkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssumeQueueRoleForWorker")
	}

	var r0 *deadline.AssumeQueueRoleForWorkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeQueueRoleForWorkerInput, ...func(*deadline.Options)) (*deadline.AssumeQueueRoleForWorkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.AssumeQueueRoleForWorkerInput, ...func(*deadline.Options)) *deadline.AssumeQueueRoleForWorkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.AssumeQueueRoleForWorkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.AssumeQueueRoleForWorkerInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetJobEntity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetJobEntity(ctx context.Context, params *deadline.BatchGetJobEntityInput, optFns ...func(*deadline.Options)) (*deadline.BatchGetJobEntityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetJobEntity")
	}

	var r0 *deadline.BatchGetJobEntityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.BatchGetJobEntityInput, ...func(*deadline.Options)) (*deadline.BatchGetJobEntityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.BatchGetJobEntityInput, ...func(*deadline.Options)) *deadline.BatchGetJobEntityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.BatchGetJobEntityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.BatchGetJobEntityInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyJobTemplate(ctx context.Context, params *deadline.CopyJobTemplateInput, optFns ...func(*deadline.Options)) (*deadline.CopyJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyJobTemplate")
	}

	var r0 *deadline.CopyJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CopyJobTemplateInput, ...func(*deadline.Options)) (*deadline.CopyJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CopyJobTemplateInput, ...func(*deadline.Options)) *deadline.CopyJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CopyJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CopyJobTemplateInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBudget(ctx context.Context, params *deadline.CreateBudgetInput, optFns ...func(*deadline.Options)) (*deadline.CreateBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBudget")
	}

	var r0 *deadline.CreateBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateBudgetInput, ...func(*deadline.Options)) (*deadline.CreateBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateBudgetInput, ...func(*deadline.Options)) *deadline.CreateBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateBudgetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFarm(ctx context.Context, params *deadline.CreateFarmInput, optFns ...func(*deadline.Options)) (*deadline.CreateFarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFarm")
	}

	var r0 *deadline.CreateFarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateFarmInput, ...func(*deadline.Options)) (*deadline.CreateFarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateFarmInput, ...func(*deadline.Options)) *deadline.CreateFarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateFarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateFarmInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFleet(ctx context.Context, params *deadline.CreateFleetInput, optFns ...func(*deadline.Options)) (*deadline.CreateFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFleet")
	}

	var r0 *deadline.CreateFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateFleetInput, ...func(*deadline.Options)) (*deadline.CreateFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateFleetInput, ...func(*deadline.Options)) *deadline.CreateFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateFleetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJob(ctx context.Context, params *deadline.CreateJobInput, optFns ...func(*deadline.Options)) (*deadline.CreateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *deadline.CreateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateJobInput, ...func(*deadline.Options)) (*deadline.CreateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateJobInput, ...func(*deadline.Options)) *deadline.CreateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateJobInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLicenseEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLicenseEndpoint(ctx context.Context, params *deadline.CreateLicenseEndpointInput, optFns ...func(*deadline.Options)) (*deadline.CreateLicenseEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLicenseEndpoint")
	}

	var r0 *deadline.CreateLicenseEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateLicenseEndpointInput, ...func(*deadline.Options)) (*deadline.CreateLicenseEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateLicenseEndpointInput, ...func(*deadline.Options)) *deadline.CreateLicenseEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateLicenseEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateLicenseEndpointInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMonitor(ctx context.Context, params *deadline.CreateMonitorInput, optFns ...func(*deadline.Options)) (*deadline.CreateMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMonitor")
	}

	var r0 *deadline.CreateMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateMonitorInput, ...func(*deadline.Options)) (*deadline.CreateMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateMonitorInput, ...func(*deadline.Options)) *deadline.CreateMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateMonitorInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQueue(ctx context.Context, params *deadline.CreateQueueInput, optFns ...func(*deadline.Options)) (*deadline.CreateQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *deadline.CreateQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateQueueInput, ...func(*deadline.Options)) (*deadline.CreateQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateQueueInput, ...func(*deadline.Options)) *deadline.CreateQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateQueueInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueueEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQueueEnvironment(ctx context.Context, params *deadline.CreateQueueEnvironmentInput, optFns ...func(*deadline.Options)) (*deadline.CreateQueueEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueueEnvironment")
	}

	var r0 *deadline.CreateQueueEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateQueueEnvironmentInput, ...func(*deadline.Options)) (*deadline.CreateQueueEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateQueueEnvironmentInput, ...func(*deadline.Options)) *deadline.CreateQueueEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateQueueEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateQueueEnvironmentInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueueFleetAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQueueFleetAssociation(ctx context.Context, params *deadline.CreateQueueFleetAssociationInput, optFns ...func(*deadline.Options)) (*deadline.CreateQueueFleetAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueueFleetAssociation")
	}

	var r0 *deadline.CreateQueueFleetAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateQueueFleetAssociationInput, ...func(*deadline.Options)) (*deadline.CreateQueueFleetAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateQueueFleetAssociationInput, ...func(*deadline.Options)) *deadline.CreateQueueFleetAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateQueueFleetAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateQueueFleetAssociationInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStorageProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStorageProfile(ctx context.Context, params *deadline.CreateStorageProfileInput, optFns ...func(*deadline.Options)) (*deadline.CreateStorageProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorageProfile")
	}

	var r0 *deadline.CreateStorageProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateStorageProfileInput, ...func(*deadline.Options)) (*deadline.CreateStorageProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateStorageProfileInput, ...func(*deadline.Options)) *deadline.CreateStorageProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateStorageProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateStorageProfileInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorker(ctx context.Context, params *deadline.CreateWorkerInput, optFns ...func(*deadline.Options)) (*deadline.CreateWorkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorker")
	}

	var r0 *deadline.CreateWorkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateWorkerInput, ...func(*deadline.Options)) (*deadline.CreateWorkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.CreateWorkerInput, ...func(*deadline.Options)) *deadline.CreateWorkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.CreateWorkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.CreateWorkerInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBudget(ctx context.Context, params *deadline.DeleteBudgetInput, optFns ...func(*deadline.Options)) (*deadline.DeleteBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBudget")
	}

	var r0 *deadline.DeleteBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteBudgetInput, ...func(*deadline.Options)) (*deadline.DeleteBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteBudgetInput, ...func(*deadline.Options)) *deadline.DeleteBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteBudgetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFarm(ctx context.Context, params *deadline.DeleteFarmInput, optFns ...func(*deadline.Options)) (*deadline.DeleteFarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFarm")
	}

	var r0 *deadline.DeleteFarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteFarmInput, ...func(*deadline.Options)) (*deadline.DeleteFarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteFarmInput, ...func(*deadline.Options)) *deadline.DeleteFarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteFarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteFarmInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFleet(ctx context.Context, params *deadline.DeleteFleetInput, optFns ...func(*deadline.Options)) (*deadline.DeleteFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFleet")
	}

	var r0 *deadline.DeleteFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteFleetInput, ...func(*deadline.Options)) (*deadline.DeleteFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteFleetInput, ...func(*deadline.Options)) *deadline.DeleteFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteFleetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLicenseEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLicenseEndpoint(ctx context.Context, params *deadline.DeleteLicenseEndpointInput, optFns ...func(*deadline.Options)) (*deadline.DeleteLicenseEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLicenseEndpoint")
	}

	var r0 *deadline.DeleteLicenseEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteLicenseEndpointInput, ...func(*deadline.Options)) (*deadline.DeleteLicenseEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteLicenseEndpointInput, ...func(*deadline.Options)) *deadline.DeleteLicenseEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteLicenseEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteLicenseEndpointInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMeteredProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMeteredProduct(ctx context.Context, params *deadline.DeleteMeteredProductInput, optFns ...func(*deadline.Options)) (*deadline.DeleteMeteredProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMeteredProduct")
	}

	var r0 *deadline.DeleteMeteredProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteMeteredProductInput, ...func(*deadline.Options)) (*deadline.DeleteMeteredProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteMeteredProductInput, ...func(*deadline.Options)) *deadline.DeleteMeteredProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteMeteredProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteMeteredProductInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMonitor(ctx context.Context, params *deadline.DeleteMonitorInput, optFns ...func(*deadline.Options)) (*deadline.DeleteMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitor")
	}

	var r0 *deadline.DeleteMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteMonitorInput, ...func(*deadline.Options)) (*deadline.DeleteMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteMonitorInput, ...func(*deadline.Options)) *deadline.DeleteMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteMonitorInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQueue(ctx context.Context, params *deadline.DeleteQueueInput, optFns ...func(*deadline.Options)) (*deadline.DeleteQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueue")
	}

	var r0 *deadline.DeleteQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteQueueInput, ...func(*deadline.Options)) (*deadline.DeleteQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteQueueInput, ...func(*deadline.Options)) *deadline.DeleteQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteQueueInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueueEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQueueEnvironment(ctx context.Context, params *deadline.DeleteQueueEnvironmentInput, optFns ...func(*deadline.Options)) (*deadline.DeleteQueueEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueueEnvironment")
	}

	var r0 *deadline.DeleteQueueEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteQueueEnvironmentInput, ...func(*deadline.Options)) (*deadline.DeleteQueueEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteQueueEnvironmentInput, ...func(*deadline.Options)) *deadline.DeleteQueueEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteQueueEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteQueueEnvironmentInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueueFleetAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQueueFleetAssociation(ctx context.Context, params *deadline.DeleteQueueFleetAssociationInput, optFns ...func(*deadline.Options)) (*deadline.DeleteQueueFleetAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueueFleetAssociation")
	}

	var r0 *deadline.DeleteQueueFleetAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteQueueFleetAssociationInput, ...func(*deadline.Options)) (*deadline.DeleteQueueFleetAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteQueueFleetAssociationInput, ...func(*deadline.Options)) *deadline.DeleteQueueFleetAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteQueueFleetAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteQueueFleetAssociationInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStorageProfile(ctx context.Context, params *deadline.DeleteStorageProfileInput, optFns ...func(*deadline.Options)) (*deadline.DeleteStorageProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStorageProfile")
	}

	var r0 *deadline.DeleteStorageProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteStorageProfileInput, ...func(*deadline.Options)) (*deadline.DeleteStorageProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteStorageProfileInput, ...func(*deadline.Options)) *deadline.DeleteStorageProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteStorageProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteStorageProfileInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorker(ctx context.Context, params *deadline.DeleteWorkerInput, optFns ...func(*deadline.Options)) (*deadline.DeleteWorkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorker")
	}

	var r0 *deadline.DeleteWorkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteWorkerInput, ...func(*deadline.Options)) (*deadline.DeleteWorkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DeleteWorkerInput, ...func(*deadline.Options)) *deadline.DeleteWorkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DeleteWorkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DeleteWorkerInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMemberFromFarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMemberFromFarm(ctx context.Context, params *deadline.DisassociateMemberFromFarmInput, optFns ...func(*deadline.Options)) (*deadline.DisassociateMemberFromFarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMemberFromFarm")
	}

	var r0 *deadline.DisassociateMemberFromFarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DisassociateMemberFromFarmInput, ...func(*deadline.Options)) (*deadline.DisassociateMemberFromFarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DisassociateMemberFromFarmInput, ...func(*deadline.Options)) *deadline.DisassociateMemberFromFarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DisassociateMemberFromFarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DisassociateMemberFromFarmInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMemberFromFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMemberFromFleet(ctx context.Context, params *deadline.DisassociateMemberFromFleetInput, optFns ...func(*deadline.Options)) (*deadline.DisassociateMemberFromFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMemberFromFleet")
	}

	var r0 *deadline.DisassociateMemberFromFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DisassociateMemberFromFleetInput, ...func(*deadline.Options)) (*deadline.DisassociateMemberFromFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DisassociateMemberFromFleetInput, ...func(*deadline.Options)) *deadline.DisassociateMemberFromFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DisassociateMemberFromFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DisassociateMemberFromFleetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMemberFromJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMemberFromJob(ctx context.Context, params *deadline.DisassociateMemberFromJobInput, optFns ...func(*deadline.Options)) (*deadline.DisassociateMemberFromJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMemberFromJob")
	}

	var r0 *deadline.DisassociateMemberFromJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DisassociateMemberFromJobInput, ...func(*deadline.Options)) (*deadline.DisassociateMemberFromJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DisassociateMemberFromJobInput, ...func(*deadline.Options)) *deadline.DisassociateMemberFromJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DisassociateMemberFromJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DisassociateMemberFromJobInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMemberFromQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMemberFromQueue(ctx context.Context, params *deadline.DisassociateMemberFromQueueInput, optFns ...func(*deadline.Options)) (*deadline.DisassociateMemberFromQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMemberFromQueue")
	}

	var r0 *deadline.DisassociateMemberFromQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DisassociateMemberFromQueueInput, ...func(*deadline.Options)) (*deadline.DisassociateMemberFromQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.DisassociateMemberFromQueueInput, ...func(*deadline.Options)) *deadline.DisassociateMemberFromQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.DisassociateMemberFromQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.DisassociateMemberFromQueueInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBudget(ctx context.Context, params *deadline.GetBudgetInput, optFns ...func(*deadline.Options)) (*deadline.GetBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBudget")
	}

	var r0 *deadline.GetBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetBudgetInput, ...func(*deadline.Options)) (*deadline.GetBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetBudgetInput, ...func(*deadline.Options)) *deadline.GetBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetBudgetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFarm(ctx context.Context, params *deadline.GetFarmInput, optFns ...func(*deadline.Options)) (*deadline.GetFarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFarm")
	}

	var r0 *deadline.GetFarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetFarmInput, ...func(*deadline.Options)) (*deadline.GetFarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetFarmInput, ...func(*deadline.Options)) *deadline.GetFarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetFarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetFarmInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFleet(ctx context.Context, params *deadline.GetFleetInput, optFns ...func(*deadline.Options)) (*deadline.GetFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFleet")
	}

	var r0 *deadline.GetFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetFleetInput, ...func(*deadline.Options)) (*deadline.GetFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetFleetInput, ...func(*deadline.Options)) *deadline.GetFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetFleetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJob(ctx context.Context, params *deadline.GetJobInput, optFns ...func(*deadline.Options)) (*deadline.GetJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *deadline.GetJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetJobInput, ...func(*deadline.Options)) (*deadline.GetJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetJobInput, ...func(*deadline.Options)) *deadline.GetJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetJobInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLicenseEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLicenseEndpoint(ctx context.Context, params *deadline.GetLicenseEndpointInput, optFns ...func(*deadline.Options)) (*deadline.GetLicenseEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLicenseEndpoint")
	}

	var r0 *deadline.GetLicenseEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetLicenseEndpointInput, ...func(*deadline.Options)) (*deadline.GetLicenseEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetLicenseEndpointInput, ...func(*deadline.Options)) *deadline.GetLicenseEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetLicenseEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetLicenseEndpointInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMonitor(ctx context.Context, params *deadline.GetMonitorInput, optFns ...func(*deadline.Options)) (*deadline.GetMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMonitor")
	}

	var r0 *deadline.GetMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetMonitorInput, ...func(*deadline.Options)) (*deadline.GetMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetMonitorInput, ...func(*deadline.Options)) *deadline.GetMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetMonitorInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueue(ctx context.Context, params *deadline.GetQueueInput, optFns ...func(*deadline.Options)) (*deadline.GetQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueue")
	}

	var r0 *deadline.GetQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetQueueInput, ...func(*deadline.Options)) (*deadline.GetQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetQueueInput, ...func(*deadline.Options)) *deadline.GetQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetQueueInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueueEnvironment(ctx context.Context, params *deadline.GetQueueEnvironmentInput, optFns ...func(*deadline.Options)) (*deadline.GetQueueEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueEnvironment")
	}

	var r0 *deadline.GetQueueEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetQueueEnvironmentInput, ...func(*deadline.Options)) (*deadline.GetQueueEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetQueueEnvironmentInput, ...func(*deadline.Options)) *deadline.GetQueueEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetQueueEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetQueueEnvironmentInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueueFleetAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueueFleetAssociation(ctx context.Context, params *deadline.GetQueueFleetAssociationInput, optFns ...func(*deadline.Options)) (*deadline.GetQueueFleetAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueueFleetAssociation")
	}

	var r0 *deadline.GetQueueFleetAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetQueueFleetAssociationInput, ...func(*deadline.Options)) (*deadline.GetQueueFleetAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetQueueFleetAssociationInput, ...func(*deadline.Options)) *deadline.GetQueueFleetAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetQueueFleetAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetQueueFleetAssociationInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSession(ctx context.Context, params *deadline.GetSessionInput, optFns ...func(*deadline.Options)) (*deadline.GetSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *deadline.GetSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetSessionInput, ...func(*deadline.Options)) (*deadline.GetSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetSessionInput, ...func(*deadline.Options)) *deadline.GetSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetSessionInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSessionAction(ctx context.Context, params *deadline.GetSessionActionInput, optFns ...func(*deadline.Options)) (*deadline.GetSessionActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionAction")
	}

	var r0 *deadline.GetSessionActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetSessionActionInput, ...func(*deadline.Options)) (*deadline.GetSessionActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetSessionActionInput, ...func(*deadline.Options)) *deadline.GetSessionActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetSessionActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetSessionActionInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionsStatisticsAggregation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSessionsStatisticsAggregation(ctx context.Context, params *deadline.GetSessionsStatisticsAggregationInput, optFns ...func(*deadline.Options)) (*deadline.GetSessionsStatisticsAggregationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionsStatisticsAggregation")
	}

	var r0 *deadline.GetSessionsStatisticsAggregationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetSessionsStatisticsAggregationInput, ...func(*deadline.Options)) (*deadline.GetSessionsStatisticsAggregationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetSessionsStatisticsAggregationInput, ...func(*deadline.Options)) *deadline.GetSessionsStatisticsAggregationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetSessionsStatisticsAggregationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetSessionsStatisticsAggregationInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStep provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStep(ctx context.Context, params *deadline.GetStepInput, optFns ...func(*deadline.Options)) (*deadline.GetStepOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStep")
	}

	var r0 *deadline.GetStepOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetStepInput, ...func(*deadline.Options)) (*deadline.GetStepOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetStepInput, ...func(*deadline.Options)) *deadline.GetStepOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetStepOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetStepInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStorageProfile(ctx context.Context, params *deadline.GetStorageProfileInput, optFns ...func(*deadline.Options)) (*deadline.GetStorageProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageProfile")
	}

	var r0 *deadline.GetStorageProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetStorageProfileInput, ...func(*deadline.Options)) (*deadline.GetStorageProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetStorageProfileInput, ...func(*deadline.Options)) *deadline.GetStorageProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetStorageProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetStorageProfileInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageProfileForQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStorageProfileForQueue(ctx context.Context, params *deadline.GetStorageProfileForQueueInput, optFns ...func(*deadline.Options)) (*deadline.GetStorageProfileForQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageProfileForQueue")
	}

	var r0 *deadline.GetStorageProfileForQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetStorageProfileForQueueInput, ...func(*deadline.Options)) (*deadline.GetStorageProfileForQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetStorageProfileForQueueInput, ...func(*deadline.Options)) *deadline.GetStorageProfileForQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetStorageProfileForQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetStorageProfileForQueueInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTask(ctx context.Context, params *deadline.GetTaskInput, optFns ...func(*deadline.Options)) (*deadline.GetTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 *deadline.GetTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetTaskInput, ...func(*deadline.Options)) (*deadline.GetTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetTaskInput, ...func(*deadline.Options)) *deadline.GetTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetTaskInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorker(ctx context.Context, params *deadline.GetWorkerInput, optFns ...func(*deadline.Options)) (*deadline.GetWorkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorker")
	}

	var r0 *deadline.GetWorkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetWorkerInput, ...func(*deadline.Options)) (*deadline.GetWorkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.GetWorkerInput, ...func(*deadline.Options)) *deadline.GetWorkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.GetWorkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.GetWorkerInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailableMeteredProducts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAvailableMeteredProducts(ctx context.Context, params *deadline.ListAvailableMeteredProductsInput, optFns ...func(*deadline.Options)) (*deadline.ListAvailableMeteredProductsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailableMeteredProducts")
	}

	var r0 *deadline.ListAvailableMeteredProductsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListAvailableMeteredProductsInput, ...func(*deadline.Options)) (*deadline.ListAvailableMeteredProductsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListAvailableMeteredProductsInput, ...func(*deadline.Options)) *deadline.ListAvailableMeteredProductsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListAvailableMeteredProductsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListAvailableMeteredProductsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBudgets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBudgets(ctx context.Context, params *deadline.ListBudgetsInput, optFns ...func(*deadline.Options)) (*deadline.ListBudgetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBudgets")
	}

	var r0 *deadline.ListBudgetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListBudgetsInput, ...func(*deadline.Options)) (*deadline.ListBudgetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListBudgetsInput, ...func(*deadline.Options)) *deadline.ListBudgetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListBudgetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListBudgetsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFarmMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFarmMembers(ctx context.Context, params *deadline.ListFarmMembersInput, optFns ...func(*deadline.Options)) (*deadline.ListFarmMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFarmMembers")
	}

	var r0 *deadline.ListFarmMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListFarmMembersInput, ...func(*deadline.Options)) (*deadline.ListFarmMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListFarmMembersInput, ...func(*deadline.Options)) *deadline.ListFarmMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListFarmMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListFarmMembersInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFarms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFarms(ctx context.Context, params *deadline.ListFarmsInput, optFns ...func(*deadline.Options)) (*deadline.ListFarmsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFarms")
	}

	var r0 *deadline.ListFarmsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListFarmsInput, ...func(*deadline.Options)) (*deadline.ListFarmsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListFarmsInput, ...func(*deadline.Options)) *deadline.ListFarmsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListFarmsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListFarmsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFleetMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFleetMembers(ctx context.Context, params *deadline.ListFleetMembersInput, optFns ...func(*deadline.Options)) (*deadline.ListFleetMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFleetMembers")
	}

	var r0 *deadline.ListFleetMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListFleetMembersInput, ...func(*deadline.Options)) (*deadline.ListFleetMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListFleetMembersInput, ...func(*deadline.Options)) *deadline.ListFleetMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListFleetMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListFleetMembersInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFleets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFleets(ctx context.Context, params *deadline.ListFleetsInput, optFns ...func(*deadline.Options)) (*deadline.ListFleetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFleets")
	}

	var r0 *deadline.ListFleetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListFleetsInput, ...func(*deadline.Options)) (*deadline.ListFleetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListFleetsInput, ...func(*deadline.Options)) *deadline.ListFleetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListFleetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListFleetsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobMembers(ctx context.Context, params *deadline.ListJobMembersInput, optFns ...func(*deadline.Options)) (*deadline.ListJobMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobMembers")
	}

	var r0 *deadline.ListJobMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListJobMembersInput, ...func(*deadline.Options)) (*deadline.ListJobMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListJobMembersInput, ...func(*deadline.Options)) *deadline.ListJobMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListJobMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListJobMembersInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobParameterDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobParameterDefinitions(ctx context.Context, params *deadline.ListJobParameterDefinitionsInput, optFns ...func(*deadline.Options)) (*deadline.ListJobParameterDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobParameterDefinitions")
	}

	var r0 *deadline.ListJobParameterDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListJobParameterDefinitionsInput, ...func(*deadline.Options)) (*deadline.ListJobParameterDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListJobParameterDefinitionsInput, ...func(*deadline.Options)) *deadline.ListJobParameterDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListJobParameterDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListJobParameterDefinitionsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobs(ctx context.Context, params *deadline.ListJobsInput, optFns ...func(*deadline.Options)) (*deadline.ListJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *deadline.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListJobsInput, ...func(*deadline.Options)) (*deadline.ListJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListJobsInput, ...func(*deadline.Options)) *deadline.ListJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListJobsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLicenseEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLicenseEndpoints(ctx context.Context, params *deadline.ListLicenseEndpointsInput, optFns ...func(*deadline.Options)) (*deadline.ListLicenseEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLicenseEndpoints")
	}

	var r0 *deadline.ListLicenseEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListLicenseEndpointsInput, ...func(*deadline.Options)) (*deadline.ListLicenseEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListLicenseEndpointsInput, ...func(*deadline.Options)) *deadline.ListLicenseEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListLicenseEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListLicenseEndpointsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMeteredProducts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMeteredProducts(ctx context.Context, params *deadline.ListMeteredProductsInput, optFns ...func(*deadline.Options)) (*deadline.ListMeteredProductsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMeteredProducts")
	}

	var r0 *deadline.ListMeteredProductsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListMeteredProductsInput, ...func(*deadline.Options)) (*deadline.ListMeteredProductsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListMeteredProductsInput, ...func(*deadline.Options)) *deadline.ListMeteredProductsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListMeteredProductsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListMeteredProductsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMonitors(ctx context.Context, params *deadline.ListMonitorsInput, optFns ...func(*deadline.Options)) (*deadline.ListMonitorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitors")
	}

	var r0 *deadline.ListMonitorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListMonitorsInput, ...func(*deadline.Options)) (*deadline.ListMonitorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListMonitorsInput, ...func(*deadline.Options)) *deadline.ListMonitorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListMonitorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListMonitorsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueueEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueueEnvironments(ctx context.Context, params *deadline.ListQueueEnvironmentsInput, optFns ...func(*deadline.Options)) (*deadline.ListQueueEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueueEnvironments")
	}

	var r0 *deadline.ListQueueEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListQueueEnvironmentsInput, ...func(*deadline.Options)) (*deadline.ListQueueEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListQueueEnvironmentsInput, ...func(*deadline.Options)) *deadline.ListQueueEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListQueueEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListQueueEnvironmentsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueueFleetAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueueFleetAssociations(ctx context.Context, params *deadline.ListQueueFleetAssociationsInput, optFns ...func(*deadline.Options)) (*deadline.ListQueueFleetAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueueFleetAssociations")
	}

	var r0 *deadline.ListQueueFleetAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListQueueFleetAssociationsInput, ...func(*deadline.Options)) (*deadline.ListQueueFleetAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListQueueFleetAssociationsInput, ...func(*deadline.Options)) *deadline.ListQueueFleetAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListQueueFleetAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListQueueFleetAssociationsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueueMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueueMembers(ctx context.Context, params *deadline.ListQueueMembersInput, optFns ...func(*deadline.Options)) (*deadline.ListQueueMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueueMembers")
	}

	var r0 *deadline.ListQueueMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListQueueMembersInput, ...func(*deadline.Options)) (*deadline.ListQueueMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListQueueMembersInput, ...func(*deadline.Options)) *deadline.ListQueueMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListQueueMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListQueueMembersInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueues(ctx context.Context, params *deadline.ListQueuesInput, optFns ...func(*deadline.Options)) (*deadline.ListQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueues")
	}

	var r0 *deadline.ListQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListQueuesInput, ...func(*deadline.Options)) (*deadline.ListQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListQueuesInput, ...func(*deadline.Options)) *deadline.ListQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListQueuesInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessionActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSessionActions(ctx context.Context, params *deadline.ListSessionActionsInput, optFns ...func(*deadline.Options)) (*deadline.ListSessionActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSessionActions")
	}

	var r0 *deadline.ListSessionActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListSessionActionsInput, ...func(*deadline.Options)) (*deadline.ListSessionActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListSessionActionsInput, ...func(*deadline.Options)) *deadline.ListSessionActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListSessionActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListSessionActionsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSessions(ctx context.Context, params *deadline.ListSessionsInput, optFns ...func(*deadline.Options)) (*deadline.ListSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 *deadline.ListSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListSessionsInput, ...func(*deadline.Options)) (*deadline.ListSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListSessionsInput, ...func(*deadline.Options)) *deadline.ListSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListSessionsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessionsForWorker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSessionsForWorker(ctx context.Context, params *deadline.ListSessionsForWorkerInput, optFns ...func(*deadline.Options)) (*deadline.ListSessionsForWorkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSessionsForWorker")
	}

	var r0 *deadline.ListSessionsForWorkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListSessionsForWorkerInput, ...func(*deadline.Options)) (*deadline.ListSessionsForWorkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListSessionsForWorkerInput, ...func(*deadline.Options)) *deadline.ListSessionsForWorkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListSessionsForWorkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListSessionsForWorkerInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStepConsumers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStepConsumers(ctx context.Context, params *deadline.ListStepConsumersInput, optFns ...func(*deadline.Options)) (*deadline.ListStepConsumersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStepConsumers")
	}

	var r0 *deadline.ListStepConsumersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStepConsumersInput, ...func(*deadline.Options)) (*deadline.ListStepConsumersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStepConsumersInput, ...func(*deadline.Options)) *deadline.ListStepConsumersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListStepConsumersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListStepConsumersInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStepDependencies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStepDependencies(ctx context.Context, params *deadline.ListStepDependenciesInput, optFns ...func(*deadline.Options)) (*deadline.ListStepDependenciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStepDependencies")
	}

	var r0 *deadline.ListStepDependenciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStepDependenciesInput, ...func(*deadline.Options)) (*deadline.ListStepDependenciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStepDependenciesInput, ...func(*deadline.Options)) *deadline.ListStepDependenciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListStepDependenciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListStepDependenciesInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSteps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSteps(ctx context.Context, params *deadline.ListStepsInput, optFns ...func(*deadline.Options)) (*deadline.ListStepsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSteps")
	}

	var r0 *deadline.ListStepsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStepsInput, ...func(*deadline.Options)) (*deadline.ListStepsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStepsInput, ...func(*deadline.Options)) *deadline.ListStepsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListStepsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListStepsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorageProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStorageProfiles(ctx context.Context, params *deadline.ListStorageProfilesInput, optFns ...func(*deadline.Options)) (*deadline.ListStorageProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageProfiles")
	}

	var r0 *deadline.ListStorageProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStorageProfilesInput, ...func(*deadline.Options)) (*deadline.ListStorageProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStorageProfilesInput, ...func(*deadline.Options)) *deadline.ListStorageProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListStorageProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListStorageProfilesInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorageProfilesForQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStorageProfilesForQueue(ctx context.Context, params *deadline.ListStorageProfilesForQueueInput, optFns ...func(*deadline.Options)) (*deadline.ListStorageProfilesForQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageProfilesForQueue")
	}

	var r0 *deadline.ListStorageProfilesForQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStorageProfilesForQueueInput, ...func(*deadline.Options)) (*deadline.ListStorageProfilesForQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListStorageProfilesForQueueInput, ...func(*deadline.Options)) *deadline.ListStorageProfilesForQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListStorageProfilesForQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListStorageProfilesForQueueInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *deadline.ListTagsForResourceInput, optFns ...func(*deadline.Options)) (*deadline.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *deadline.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListTagsForResourceInput, ...func(*deadline.Options)) (*deadline.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListTagsForResourceInput, ...func(*deadline.Options)) *deadline.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListTagsForResourceInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTasks(ctx context.Context, params *deadline.ListTasksInput, optFns ...func(*deadline.Options)) (*deadline.ListTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *deadline.ListTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListTasksInput, ...func(*deadline.Options)) (*deadline.ListTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListTasksInput, ...func(*deadline.Options)) *deadline.ListTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListTasksInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkers(ctx context.Context, params *deadline.ListWorkersInput, optFns ...func(*deadline.Options)) (*deadline.ListWorkersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkers")
	}

	var r0 *deadline.ListWorkersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListWorkersInput, ...func(*deadline.Options)) (*deadline.ListWorkersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.ListWorkersInput, ...func(*deadline.Options)) *deadline.ListWorkersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.ListWorkersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.ListWorkersInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() deadline.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 deadline.Options
	if rf, ok := ret.Get(0).(func() deadline.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(deadline.Options)
	}

	return r0
}

// PutMeteredProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMeteredProduct(ctx context.Context, params *deadline.PutMeteredProductInput, optFns ...func(*deadline.Options)) (*deadline.PutMeteredProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMeteredProduct")
	}

	var r0 *deadline.PutMeteredProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.PutMeteredProductInput, ...func(*deadline.Options)) (*deadline.PutMeteredProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.PutMeteredProductInput, ...func(*deadline.Options)) *deadline.PutMeteredProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.PutMeteredProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.PutMeteredProductInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchJobs(ctx context.Context, params *deadline.SearchJobsInput, optFns ...func(*deadline.Options)) (*deadline.SearchJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchJobs")
	}

	var r0 *deadline.SearchJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.SearchJobsInput, ...func(*deadline.Options)) (*deadline.SearchJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.SearchJobsInput, ...func(*deadline.Options)) *deadline.SearchJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.SearchJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.SearchJobsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchSteps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchSteps(ctx context.Context, params *deadline.SearchStepsInput, optFns ...func(*deadline.Options)) (*deadline.SearchStepsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchSteps")
	}

	var r0 *deadline.SearchStepsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.SearchStepsInput, ...func(*deadline.Options)) (*deadline.SearchStepsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.SearchStepsInput, ...func(*deadline.Options)) *deadline.SearchStepsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.SearchStepsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.SearchStepsInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchTasks(ctx context.Context, params *deadline.SearchTasksInput, optFns ...func(*deadline.Options)) (*deadline.SearchTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchTasks")
	}

	var r0 *deadline.SearchTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.SearchTasksInput, ...func(*deadline.Options)) (*deadline.SearchTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.SearchTasksInput, ...func(*deadline.Options)) *deadline.SearchTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.SearchTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.SearchTasksInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchWorkers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchWorkers(ctx context.Context, params *deadline.SearchWorkersInput, optFns ...func(*deadline.Options)) (*deadline.SearchWorkersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchWorkers")
	}

	var r0 *deadline.SearchWorkersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.SearchWorkersInput, ...func(*deadline.Options)) (*deadline.SearchWorkersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.SearchWorkersInput, ...func(*deadline.Options)) *deadline.SearchWorkersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.SearchWorkersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.SearchWorkersInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSessionsStatisticsAggregation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSessionsStatisticsAggregation(ctx context.Context, params *deadline.StartSessionsStatisticsAggregationInput, optFns ...func(*deadline.Options)) (*deadline.StartSessionsStatisticsAggregationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSessionsStatisticsAggregation")
	}

	var r0 *deadline.StartSessionsStatisticsAggregationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.StartSessionsStatisticsAggregationInput, ...func(*deadline.Options)) (*deadline.StartSessionsStatisticsAggregationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.StartSessionsStatisticsAggregationInput, ...func(*deadline.Options)) *deadline.StartSessionsStatisticsAggregationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.StartSessionsStatisticsAggregationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.StartSessionsStatisticsAggregationInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *deadline.TagResourceInput, optFns ...func(*deadline.Options)) (*deadline.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *deadline.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.TagResourceInput, ...func(*deadline.Options)) (*deadline.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.TagResourceInput, ...func(*deadline.Options)) *deadline.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.TagResourceInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *deadline.UntagResourceInput, optFns ...func(*deadline.Options)) (*deadline.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *deadline.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UntagResourceInput, ...func(*deadline.Options)) (*deadline.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UntagResourceInput, ...func(*deadline.Options)) *deadline.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UntagResourceInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBudget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBudget(ctx context.Context, params *deadline.UpdateBudgetInput, optFns ...func(*deadline.Options)) (*deadline.UpdateBudgetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBudget")
	}

	var r0 *deadline.UpdateBudgetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateBudgetInput, ...func(*deadline.Options)) (*deadline.UpdateBudgetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateBudgetInput, ...func(*deadline.Options)) *deadline.UpdateBudgetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateBudgetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateBudgetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFarm(ctx context.Context, params *deadline.UpdateFarmInput, optFns ...func(*deadline.Options)) (*deadline.UpdateFarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFarm")
	}

	var r0 *deadline.UpdateFarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateFarmInput, ...func(*deadline.Options)) (*deadline.UpdateFarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateFarmInput, ...func(*deadline.Options)) *deadline.UpdateFarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateFarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateFarmInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFleet(ctx context.Context, params *deadline.UpdateFleetInput, optFns ...func(*deadline.Options)) (*deadline.UpdateFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFleet")
	}

	var r0 *deadline.UpdateFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateFleetInput, ...func(*deadline.Options)) (*deadline.UpdateFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateFleetInput, ...func(*deadline.Options)) *deadline.UpdateFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateFleetInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateJob(ctx context.Context, params *deadline.UpdateJobInput, optFns ...func(*deadline.Options)) (*deadline.UpdateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJob")
	}

	var r0 *deadline.UpdateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateJobInput, ...func(*deadline.Options)) (*deadline.UpdateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateJobInput, ...func(*deadline.Options)) *deadline.UpdateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateJobInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMonitor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMonitor(ctx context.Context, params *deadline.UpdateMonitorInput, optFns ...func(*deadline.Options)) (*deadline.UpdateMonitorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitor")
	}

	var r0 *deadline.UpdateMonitorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateMonitorInput, ...func(*deadline.Options)) (*deadline.UpdateMonitorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateMonitorInput, ...func(*deadline.Options)) *deadline.UpdateMonitorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateMonitorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateMonitorInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueue(ctx context.Context, params *deadline.UpdateQueueInput, optFns ...func(*deadline.Options)) (*deadline.UpdateQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueue")
	}

	var r0 *deadline.UpdateQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateQueueInput, ...func(*deadline.Options)) (*deadline.UpdateQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateQueueInput, ...func(*deadline.Options)) *deadline.UpdateQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateQueueInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueueEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueueEnvironment(ctx context.Context, params *deadline.UpdateQueueEnvironmentInput, optFns ...func(*deadline.Options)) (*deadline.UpdateQueueEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueueEnvironment")
	}

	var r0 *deadline.UpdateQueueEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateQueueEnvironmentInput, ...func(*deadline.Options)) (*deadline.UpdateQueueEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateQueueEnvironmentInput, ...func(*deadline.Options)) *deadline.UpdateQueueEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateQueueEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateQueueEnvironmentInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueueFleetAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueueFleetAssociation(ctx context.Context, params *deadline.UpdateQueueFleetAssociationInput, optFns ...func(*deadline.Options)) (*deadline.UpdateQueueFleetAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueueFleetAssociation")
	}

	var r0 *deadline.UpdateQueueFleetAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateQueueFleetAssociationInput, ...func(*deadline.Options)) (*deadline.UpdateQueueFleetAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateQueueFleetAssociationInput, ...func(*deadline.Options)) *deadline.UpdateQueueFleetAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateQueueFleetAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateQueueFleetAssociationInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSession(ctx context.Context, params *deadline.UpdateSessionInput, optFns ...func(*deadline.Options)) (*deadline.UpdateSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSession")
	}

	var r0 *deadline.UpdateSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateSessionInput, ...func(*deadline.Options)) (*deadline.UpdateSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateSessionInput, ...func(*deadline.Options)) *deadline.UpdateSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateSessionInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStep provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStep(ctx context.Context, params *deadline.UpdateStepInput, optFns ...func(*deadline.Options)) (*deadline.UpdateStepOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStep")
	}

	var r0 *deadline.UpdateStepOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateStepInput, ...func(*deadline.Options)) (*deadline.UpdateStepOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateStepInput, ...func(*deadline.Options)) *deadline.UpdateStepOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateStepOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateStepInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStorageProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStorageProfile(ctx context.Context, params *deadline.UpdateStorageProfileInput, optFns ...func(*deadline.Options)) (*deadline.UpdateStorageProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStorageProfile")
	}

	var r0 *deadline.UpdateStorageProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateStorageProfileInput, ...func(*deadline.Options)) (*deadline.UpdateStorageProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateStorageProfileInput, ...func(*deadline.Options)) *deadline.UpdateStorageProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateStorageProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateStorageProfileInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTask(ctx context.Context, params *deadline.UpdateTaskInput, optFns ...func(*deadline.Options)) (*deadline.UpdateTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *deadline.UpdateTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateTaskInput, ...func(*deadline.Options)) (*deadline.UpdateTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateTaskInput, ...func(*deadline.Options)) *deadline.UpdateTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateTaskInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorker(ctx context.Context, params *deadline.UpdateWorkerInput, optFns ...func(*deadline.Options)) (*deadline.UpdateWorkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorker")
	}

	var r0 *deadline.UpdateWorkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateWorkerInput, ...func(*deadline.Options)) (*deadline.UpdateWorkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateWorkerInput, ...func(*deadline.Options)) *deadline.UpdateWorkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateWorkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateWorkerInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkerSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkerSchedule(ctx context.Context, params *deadline.UpdateWorkerScheduleInput, optFns ...func(*deadline.Options)) (*deadline.UpdateWorkerScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkerSchedule")
	}

	var r0 *deadline.UpdateWorkerScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateWorkerScheduleInput, ...func(*deadline.Options)) (*deadline.UpdateWorkerScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *deadline.UpdateWorkerScheduleInput, ...func(*deadline.Options)) *deadline.UpdateWorkerScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*deadline.UpdateWorkerScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *deadline.UpdateWorkerScheduleInput, ...func(*deadline.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
