// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	applicationdiscoveryservice "github.com/aws/aws-sdk-go-v2/service/applicationdiscoveryservice"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateConfigurationItemsToApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateConfigurationItemsToApplication(ctx context.Context, params *applicationdiscoveryservice.AssociateConfigurationItemsToApplicationInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateConfigurationItemsToApplication")
	}

	var r0 *applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.AssociateConfigurationItemsToApplicationInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.AssociateConfigurationItemsToApplicationInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.AssociateConfigurationItemsToApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.AssociateConfigurationItemsToApplicationInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteAgents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteAgents(ctx context.Context, params *applicationdiscoveryservice.BatchDeleteAgentsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.BatchDeleteAgentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteAgents")
	}

	var r0 *applicationdiscoveryservice.BatchDeleteAgentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.BatchDeleteAgentsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.BatchDeleteAgentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.BatchDeleteAgentsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.BatchDeleteAgentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.BatchDeleteAgentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.BatchDeleteAgentsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteImportData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteImportData(ctx context.Context, params *applicationdiscoveryservice.BatchDeleteImportDataInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.BatchDeleteImportDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteImportData")
	}

	var r0 *applicationdiscoveryservice.BatchDeleteImportDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.BatchDeleteImportDataInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.BatchDeleteImportDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.BatchDeleteImportDataInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.BatchDeleteImportDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.BatchDeleteImportDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.BatchDeleteImportDataInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *applicationdiscoveryservice.CreateApplicationInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *applicationdiscoveryservice.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.CreateApplicationInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.CreateApplicationInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.CreateApplicationInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTags(ctx context.Context, params *applicationdiscoveryservice.CreateTagsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.CreateTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTags")
	}

	var r0 *applicationdiscoveryservice.CreateTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.CreateTagsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.CreateTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.CreateTagsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.CreateTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.CreateTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.CreateTagsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplications(ctx context.Context, params *applicationdiscoveryservice.DeleteApplicationsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DeleteApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplications")
	}

	var r0 *applicationdiscoveryservice.DeleteApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DeleteApplicationsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DeleteApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DeleteApplicationsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DeleteApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DeleteApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DeleteApplicationsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTags(ctx context.Context, params *applicationdiscoveryservice.DeleteTagsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DeleteTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTags")
	}

	var r0 *applicationdiscoveryservice.DeleteTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DeleteTagsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DeleteTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DeleteTagsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DeleteTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DeleteTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DeleteTagsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAgents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAgents(ctx context.Context, params *applicationdiscoveryservice.DescribeAgentsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeAgentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAgents")
	}

	var r0 *applicationdiscoveryservice.DescribeAgentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeAgentsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeAgentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeAgentsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DescribeAgentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DescribeAgentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DescribeAgentsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBatchDeleteConfigurationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBatchDeleteConfigurationTask(ctx context.Context, params *applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBatchDeleteConfigurationTask")
	}

	var r0 *applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DescribeBatchDeleteConfigurationTaskInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConfigurations(ctx context.Context, params *applicationdiscoveryservice.DescribeConfigurationsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConfigurations")
	}

	var r0 *applicationdiscoveryservice.DescribeConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DescribeConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DescribeConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DescribeConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContinuousExports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeContinuousExports(ctx context.Context, params *applicationdiscoveryservice.DescribeContinuousExportsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeContinuousExportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeContinuousExports")
	}

	var r0 *applicationdiscoveryservice.DescribeContinuousExportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeContinuousExportsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeContinuousExportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeContinuousExportsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DescribeContinuousExportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DescribeContinuousExportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DescribeContinuousExportsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeExportConfigurations(ctx context.Context, params *applicationdiscoveryservice.DescribeExportConfigurationsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeExportConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeExportConfigurations")
	}

	var r0 *applicationdiscoveryservice.DescribeExportConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeExportConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeExportConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeExportConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DescribeExportConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DescribeExportConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DescribeExportConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExportTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeExportTasks(ctx context.Context, params *applicationdiscoveryservice.DescribeExportTasksInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeExportTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeExportTasks")
	}

	var r0 *applicationdiscoveryservice.DescribeExportTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeExportTasksInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeExportTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeExportTasksInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DescribeExportTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DescribeExportTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DescribeExportTasksInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImportTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeImportTasks(ctx context.Context, params *applicationdiscoveryservice.DescribeImportTasksInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeImportTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeImportTasks")
	}

	var r0 *applicationdiscoveryservice.DescribeImportTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeImportTasksInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeImportTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeImportTasksInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DescribeImportTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DescribeImportTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DescribeImportTasksInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTags(ctx context.Context, params *applicationdiscoveryservice.DescribeTagsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTags")
	}

	var r0 *applicationdiscoveryservice.DescribeTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeTagsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DescribeTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DescribeTagsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DescribeTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DescribeTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DescribeTagsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateConfigurationItemsFromApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateConfigurationItemsFromApplication(ctx context.Context, params *applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateConfigurationItemsFromApplication")
	}

	var r0 *applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.DisassociateConfigurationItemsFromApplicationInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportConfigurations(ctx context.Context, params *applicationdiscoveryservice.ExportConfigurationsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.ExportConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportConfigurations")
	}

	var r0 *applicationdiscoveryservice.ExportConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.ExportConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.ExportConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.ExportConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.ExportConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.ExportConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.ExportConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiscoverySummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDiscoverySummary(ctx context.Context, params *applicationdiscoveryservice.GetDiscoverySummaryInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.GetDiscoverySummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDiscoverySummary")
	}

	var r0 *applicationdiscoveryservice.GetDiscoverySummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.GetDiscoverySummaryInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.GetDiscoverySummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.GetDiscoverySummaryInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.GetDiscoverySummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.GetDiscoverySummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.GetDiscoverySummaryInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurations(ctx context.Context, params *applicationdiscoveryservice.ListConfigurationsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.ListConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurations")
	}

	var r0 *applicationdiscoveryservice.ListConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.ListConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.ListConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.ListConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.ListConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.ListConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.ListConfigurationsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServerNeighbors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServerNeighbors(ctx context.Context, params *applicationdiscoveryservice.ListServerNeighborsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.ListServerNeighborsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServerNeighbors")
	}

	var r0 *applicationdiscoveryservice.ListServerNeighborsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.ListServerNeighborsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.ListServerNeighborsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.ListServerNeighborsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.ListServerNeighborsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.ListServerNeighborsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.ListServerNeighborsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() applicationdiscoveryservice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 applicationdiscoveryservice.Options
	if rf, ok := ret.Get(0).(func() applicationdiscoveryservice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(applicationdiscoveryservice.Options)
	}

	return r0
}

// StartBatchDeleteConfigurationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartBatchDeleteConfigurationTask(ctx context.Context, params *applicationdiscoveryservice.StartBatchDeleteConfigurationTaskInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartBatchDeleteConfigurationTask")
	}

	var r0 *applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartBatchDeleteConfigurationTaskInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartBatchDeleteConfigurationTaskInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.StartBatchDeleteConfigurationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.StartBatchDeleteConfigurationTaskInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartContinuousExport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartContinuousExport(ctx context.Context, params *applicationdiscoveryservice.StartContinuousExportInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartContinuousExportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartContinuousExport")
	}

	var r0 *applicationdiscoveryservice.StartContinuousExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartContinuousExportInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartContinuousExportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartContinuousExportInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.StartContinuousExportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.StartContinuousExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.StartContinuousExportInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDataCollectionByAgentIds provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDataCollectionByAgentIds(ctx context.Context, params *applicationdiscoveryservice.StartDataCollectionByAgentIdsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDataCollectionByAgentIds")
	}

	var r0 *applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartDataCollectionByAgentIdsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartDataCollectionByAgentIdsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.StartDataCollectionByAgentIdsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.StartDataCollectionByAgentIdsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartExportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartExportTask(ctx context.Context, params *applicationdiscoveryservice.StartExportTaskInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartExportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartExportTask")
	}

	var r0 *applicationdiscoveryservice.StartExportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartExportTaskInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartExportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartExportTaskInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.StartExportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.StartExportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.StartExportTaskInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartImportTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartImportTask(ctx context.Context, params *applicationdiscoveryservice.StartImportTaskInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartImportTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartImportTask")
	}

	var r0 *applicationdiscoveryservice.StartImportTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartImportTaskInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StartImportTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StartImportTaskInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.StartImportTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.StartImportTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.StartImportTaskInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopContinuousExport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopContinuousExport(ctx context.Context, params *applicationdiscoveryservice.StopContinuousExportInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StopContinuousExportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopContinuousExport")
	}

	var r0 *applicationdiscoveryservice.StopContinuousExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StopContinuousExportInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StopContinuousExportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StopContinuousExportInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.StopContinuousExportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.StopContinuousExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.StopContinuousExportInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDataCollectionByAgentIds provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDataCollectionByAgentIds(ctx context.Context, params *applicationdiscoveryservice.StopDataCollectionByAgentIdsInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDataCollectionByAgentIds")
	}

	var r0 *applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StopDataCollectionByAgentIdsInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.StopDataCollectionByAgentIdsInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.StopDataCollectionByAgentIdsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.StopDataCollectionByAgentIdsInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *applicationdiscoveryservice.UpdateApplicationInput, optFns ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *applicationdiscoveryservice.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.UpdateApplicationInput, ...func(*applicationdiscoveryservice.Options)) (*applicationdiscoveryservice.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationdiscoveryservice.UpdateApplicationInput, ...func(*applicationdiscoveryservice.Options)) *applicationdiscoveryservice.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationdiscoveryservice.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationdiscoveryservice.UpdateApplicationInput, ...func(*applicationdiscoveryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
