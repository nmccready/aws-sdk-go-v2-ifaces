// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	sagemakerfeaturestoreruntime "github.com/aws/aws-sdk-go-v2/service/sagemakerfeaturestoreruntime"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetRecord(ctx context.Context, params *sagemakerfeaturestoreruntime.BatchGetRecordInput, optFns ...func(*sagemakerfeaturestoreruntime.Options)) (*sagemakerfeaturestoreruntime.BatchGetRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetRecord")
	}

	var r0 *sagemakerfeaturestoreruntime.BatchGetRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakerfeaturestoreruntime.BatchGetRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) (*sagemakerfeaturestoreruntime.BatchGetRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakerfeaturestoreruntime.BatchGetRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) *sagemakerfeaturestoreruntime.BatchGetRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakerfeaturestoreruntime.BatchGetRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakerfeaturestoreruntime.BatchGetRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRecord(ctx context.Context, params *sagemakerfeaturestoreruntime.DeleteRecordInput, optFns ...func(*sagemakerfeaturestoreruntime.Options)) (*sagemakerfeaturestoreruntime.DeleteRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecord")
	}

	var r0 *sagemakerfeaturestoreruntime.DeleteRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakerfeaturestoreruntime.DeleteRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) (*sagemakerfeaturestoreruntime.DeleteRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakerfeaturestoreruntime.DeleteRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) *sagemakerfeaturestoreruntime.DeleteRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakerfeaturestoreruntime.DeleteRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakerfeaturestoreruntime.DeleteRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecord(ctx context.Context, params *sagemakerfeaturestoreruntime.GetRecordInput, optFns ...func(*sagemakerfeaturestoreruntime.Options)) (*sagemakerfeaturestoreruntime.GetRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecord")
	}

	var r0 *sagemakerfeaturestoreruntime.GetRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakerfeaturestoreruntime.GetRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) (*sagemakerfeaturestoreruntime.GetRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakerfeaturestoreruntime.GetRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) *sagemakerfeaturestoreruntime.GetRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakerfeaturestoreruntime.GetRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakerfeaturestoreruntime.GetRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() sagemakerfeaturestoreruntime.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 sagemakerfeaturestoreruntime.Options
	if rf, ok := ret.Get(0).(func() sagemakerfeaturestoreruntime.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sagemakerfeaturestoreruntime.Options)
	}

	return r0
}

// PutRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRecord(ctx context.Context, params *sagemakerfeaturestoreruntime.PutRecordInput, optFns ...func(*sagemakerfeaturestoreruntime.Options)) (*sagemakerfeaturestoreruntime.PutRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRecord")
	}

	var r0 *sagemakerfeaturestoreruntime.PutRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakerfeaturestoreruntime.PutRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) (*sagemakerfeaturestoreruntime.PutRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakerfeaturestoreruntime.PutRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) *sagemakerfeaturestoreruntime.PutRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakerfeaturestoreruntime.PutRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakerfeaturestoreruntime.PutRecordInput, ...func(*sagemakerfeaturestoreruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
