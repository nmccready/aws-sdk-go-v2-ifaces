// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	ecs "github.com/aws/aws-sdk-go-v2/service/ecs"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateCapacityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCapacityProvider(ctx context.Context, params *ecs.CreateCapacityProviderInput, optFns ...func(*ecs.Options)) (*ecs.CreateCapacityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCapacityProvider")
	}

	var r0 *ecs.CreateCapacityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.CreateCapacityProviderInput, ...func(*ecs.Options)) (*ecs.CreateCapacityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.CreateCapacityProviderInput, ...func(*ecs.Options)) *ecs.CreateCapacityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.CreateCapacityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.CreateCapacityProviderInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCluster(ctx context.Context, params *ecs.CreateClusterInput, optFns ...func(*ecs.Options)) (*ecs.CreateClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *ecs.CreateClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.CreateClusterInput, ...func(*ecs.Options)) (*ecs.CreateClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.CreateClusterInput, ...func(*ecs.Options)) *ecs.CreateClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.CreateClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.CreateClusterInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateService(ctx context.Context, params *ecs.CreateServiceInput, optFns ...func(*ecs.Options)) (*ecs.CreateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *ecs.CreateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.CreateServiceInput, ...func(*ecs.Options)) (*ecs.CreateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.CreateServiceInput, ...func(*ecs.Options)) *ecs.CreateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.CreateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.CreateServiceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTaskSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTaskSet(ctx context.Context, params *ecs.CreateTaskSetInput, optFns ...func(*ecs.Options)) (*ecs.CreateTaskSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTaskSet")
	}

	var r0 *ecs.CreateTaskSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.CreateTaskSetInput, ...func(*ecs.Options)) (*ecs.CreateTaskSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.CreateTaskSetInput, ...func(*ecs.Options)) *ecs.CreateTaskSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.CreateTaskSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.CreateTaskSetInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountSetting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccountSetting(ctx context.Context, params *ecs.DeleteAccountSettingInput, optFns ...func(*ecs.Options)) (*ecs.DeleteAccountSettingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountSetting")
	}

	var r0 *ecs.DeleteAccountSettingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteAccountSettingInput, ...func(*ecs.Options)) (*ecs.DeleteAccountSettingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteAccountSettingInput, ...func(*ecs.Options)) *ecs.DeleteAccountSettingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteAccountSettingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeleteAccountSettingInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAttributes(ctx context.Context, params *ecs.DeleteAttributesInput, optFns ...func(*ecs.Options)) (*ecs.DeleteAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttributes")
	}

	var r0 *ecs.DeleteAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteAttributesInput, ...func(*ecs.Options)) (*ecs.DeleteAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteAttributesInput, ...func(*ecs.Options)) *ecs.DeleteAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeleteAttributesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCapacityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCapacityProvider(ctx context.Context, params *ecs.DeleteCapacityProviderInput, optFns ...func(*ecs.Options)) (*ecs.DeleteCapacityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCapacityProvider")
	}

	var r0 *ecs.DeleteCapacityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteCapacityProviderInput, ...func(*ecs.Options)) (*ecs.DeleteCapacityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteCapacityProviderInput, ...func(*ecs.Options)) *ecs.DeleteCapacityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteCapacityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeleteCapacityProviderInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCluster(ctx context.Context, params *ecs.DeleteClusterInput, optFns ...func(*ecs.Options)) (*ecs.DeleteClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *ecs.DeleteClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteClusterInput, ...func(*ecs.Options)) (*ecs.DeleteClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteClusterInput, ...func(*ecs.Options)) *ecs.DeleteClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeleteClusterInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteService(ctx context.Context, params *ecs.DeleteServiceInput, optFns ...func(*ecs.Options)) (*ecs.DeleteServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 *ecs.DeleteServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteServiceInput, ...func(*ecs.Options)) (*ecs.DeleteServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteServiceInput, ...func(*ecs.Options)) *ecs.DeleteServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeleteServiceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTaskDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTaskDefinitions(ctx context.Context, params *ecs.DeleteTaskDefinitionsInput, optFns ...func(*ecs.Options)) (*ecs.DeleteTaskDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskDefinitions")
	}

	var r0 *ecs.DeleteTaskDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteTaskDefinitionsInput, ...func(*ecs.Options)) (*ecs.DeleteTaskDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteTaskDefinitionsInput, ...func(*ecs.Options)) *ecs.DeleteTaskDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteTaskDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeleteTaskDefinitionsInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTaskSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTaskSet(ctx context.Context, params *ecs.DeleteTaskSetInput, optFns ...func(*ecs.Options)) (*ecs.DeleteTaskSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskSet")
	}

	var r0 *ecs.DeleteTaskSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteTaskSetInput, ...func(*ecs.Options)) (*ecs.DeleteTaskSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeleteTaskSetInput, ...func(*ecs.Options)) *ecs.DeleteTaskSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeleteTaskSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeleteTaskSetInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterContainerInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterContainerInstance(ctx context.Context, params *ecs.DeregisterContainerInstanceInput, optFns ...func(*ecs.Options)) (*ecs.DeregisterContainerInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterContainerInstance")
	}

	var r0 *ecs.DeregisterContainerInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeregisterContainerInstanceInput, ...func(*ecs.Options)) (*ecs.DeregisterContainerInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeregisterContainerInstanceInput, ...func(*ecs.Options)) *ecs.DeregisterContainerInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeregisterContainerInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeregisterContainerInstanceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTaskDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterTaskDefinition(ctx context.Context, params *ecs.DeregisterTaskDefinitionInput, optFns ...func(*ecs.Options)) (*ecs.DeregisterTaskDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterTaskDefinition")
	}

	var r0 *ecs.DeregisterTaskDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeregisterTaskDefinitionInput, ...func(*ecs.Options)) (*ecs.DeregisterTaskDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DeregisterTaskDefinitionInput, ...func(*ecs.Options)) *ecs.DeregisterTaskDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DeregisterTaskDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DeregisterTaskDefinitionInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCapacityProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCapacityProviders(ctx context.Context, params *ecs.DescribeCapacityProvidersInput, optFns ...func(*ecs.Options)) (*ecs.DescribeCapacityProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCapacityProviders")
	}

	var r0 *ecs.DescribeCapacityProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeCapacityProvidersInput, ...func(*ecs.Options)) (*ecs.DescribeCapacityProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeCapacityProvidersInput, ...func(*ecs.Options)) *ecs.DescribeCapacityProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeCapacityProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeCapacityProvidersInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeClusters(ctx context.Context, params *ecs.DescribeClustersInput, optFns ...func(*ecs.Options)) (*ecs.DescribeClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClusters")
	}

	var r0 *ecs.DescribeClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeClustersInput, ...func(*ecs.Options)) (*ecs.DescribeClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeClustersInput, ...func(*ecs.Options)) *ecs.DescribeClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeClustersInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContainerInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeContainerInstances(ctx context.Context, params *ecs.DescribeContainerInstancesInput, optFns ...func(*ecs.Options)) (*ecs.DescribeContainerInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeContainerInstances")
	}

	var r0 *ecs.DescribeContainerInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeContainerInstancesInput, ...func(*ecs.Options)) (*ecs.DescribeContainerInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeContainerInstancesInput, ...func(*ecs.Options)) *ecs.DescribeContainerInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeContainerInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeContainerInstancesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServiceDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServiceDeployments(ctx context.Context, params *ecs.DescribeServiceDeploymentsInput, optFns ...func(*ecs.Options)) (*ecs.DescribeServiceDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServiceDeployments")
	}

	var r0 *ecs.DescribeServiceDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeServiceDeploymentsInput, ...func(*ecs.Options)) (*ecs.DescribeServiceDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeServiceDeploymentsInput, ...func(*ecs.Options)) *ecs.DescribeServiceDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeServiceDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeServiceDeploymentsInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServiceRevisions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServiceRevisions(ctx context.Context, params *ecs.DescribeServiceRevisionsInput, optFns ...func(*ecs.Options)) (*ecs.DescribeServiceRevisionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServiceRevisions")
	}

	var r0 *ecs.DescribeServiceRevisionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeServiceRevisionsInput, ...func(*ecs.Options)) (*ecs.DescribeServiceRevisionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeServiceRevisionsInput, ...func(*ecs.Options)) *ecs.DescribeServiceRevisionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeServiceRevisionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeServiceRevisionsInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServices(ctx context.Context, params *ecs.DescribeServicesInput, optFns ...func(*ecs.Options)) (*ecs.DescribeServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServices")
	}

	var r0 *ecs.DescribeServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeServicesInput, ...func(*ecs.Options)) (*ecs.DescribeServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeServicesInput, ...func(*ecs.Options)) *ecs.DescribeServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeServicesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTaskDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTaskDefinition(ctx context.Context, params *ecs.DescribeTaskDefinitionInput, optFns ...func(*ecs.Options)) (*ecs.DescribeTaskDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTaskDefinition")
	}

	var r0 *ecs.DescribeTaskDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeTaskDefinitionInput, ...func(*ecs.Options)) (*ecs.DescribeTaskDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeTaskDefinitionInput, ...func(*ecs.Options)) *ecs.DescribeTaskDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeTaskDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeTaskDefinitionInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTaskSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTaskSets(ctx context.Context, params *ecs.DescribeTaskSetsInput, optFns ...func(*ecs.Options)) (*ecs.DescribeTaskSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTaskSets")
	}

	var r0 *ecs.DescribeTaskSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeTaskSetsInput, ...func(*ecs.Options)) (*ecs.DescribeTaskSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeTaskSetsInput, ...func(*ecs.Options)) *ecs.DescribeTaskSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeTaskSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeTaskSetsInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTasks(ctx context.Context, params *ecs.DescribeTasksInput, optFns ...func(*ecs.Options)) (*ecs.DescribeTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTasks")
	}

	var r0 *ecs.DescribeTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeTasksInput, ...func(*ecs.Options)) (*ecs.DescribeTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DescribeTasksInput, ...func(*ecs.Options)) *ecs.DescribeTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DescribeTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DescribeTasksInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverPollEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DiscoverPollEndpoint(ctx context.Context, params *ecs.DiscoverPollEndpointInput, optFns ...func(*ecs.Options)) (*ecs.DiscoverPollEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverPollEndpoint")
	}

	var r0 *ecs.DiscoverPollEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DiscoverPollEndpointInput, ...func(*ecs.Options)) (*ecs.DiscoverPollEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.DiscoverPollEndpointInput, ...func(*ecs.Options)) *ecs.DiscoverPollEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.DiscoverPollEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.DiscoverPollEndpointInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteCommand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteCommand(ctx context.Context, params *ecs.ExecuteCommandInput, optFns ...func(*ecs.Options)) (*ecs.ExecuteCommandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteCommand")
	}

	var r0 *ecs.ExecuteCommandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ExecuteCommandInput, ...func(*ecs.Options)) (*ecs.ExecuteCommandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ExecuteCommandInput, ...func(*ecs.Options)) *ecs.ExecuteCommandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ExecuteCommandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ExecuteCommandInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskProtection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTaskProtection(ctx context.Context, params *ecs.GetTaskProtectionInput, optFns ...func(*ecs.Options)) (*ecs.GetTaskProtectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskProtection")
	}

	var r0 *ecs.GetTaskProtectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.GetTaskProtectionInput, ...func(*ecs.Options)) (*ecs.GetTaskProtectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.GetTaskProtectionInput, ...func(*ecs.Options)) *ecs.GetTaskProtectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.GetTaskProtectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.GetTaskProtectionInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountSettings(ctx context.Context, params *ecs.ListAccountSettingsInput, optFns ...func(*ecs.Options)) (*ecs.ListAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountSettings")
	}

	var r0 *ecs.ListAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListAccountSettingsInput, ...func(*ecs.Options)) (*ecs.ListAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListAccountSettingsInput, ...func(*ecs.Options)) *ecs.ListAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListAccountSettingsInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttributes(ctx context.Context, params *ecs.ListAttributesInput, optFns ...func(*ecs.Options)) (*ecs.ListAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttributes")
	}

	var r0 *ecs.ListAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListAttributesInput, ...func(*ecs.Options)) (*ecs.ListAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListAttributesInput, ...func(*ecs.Options)) *ecs.ListAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListAttributesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClusters(ctx context.Context, params *ecs.ListClustersInput, optFns ...func(*ecs.Options)) (*ecs.ListClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *ecs.ListClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListClustersInput, ...func(*ecs.Options)) (*ecs.ListClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListClustersInput, ...func(*ecs.Options)) *ecs.ListClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListClustersInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContainerInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContainerInstances(ctx context.Context, params *ecs.ListContainerInstancesInput, optFns ...func(*ecs.Options)) (*ecs.ListContainerInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContainerInstances")
	}

	var r0 *ecs.ListContainerInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListContainerInstancesInput, ...func(*ecs.Options)) (*ecs.ListContainerInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListContainerInstancesInput, ...func(*ecs.Options)) *ecs.ListContainerInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListContainerInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListContainerInstancesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceDeployments(ctx context.Context, params *ecs.ListServiceDeploymentsInput, optFns ...func(*ecs.Options)) (*ecs.ListServiceDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceDeployments")
	}

	var r0 *ecs.ListServiceDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListServiceDeploymentsInput, ...func(*ecs.Options)) (*ecs.ListServiceDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListServiceDeploymentsInput, ...func(*ecs.Options)) *ecs.ListServiceDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListServiceDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListServiceDeploymentsInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServices(ctx context.Context, params *ecs.ListServicesInput, optFns ...func(*ecs.Options)) (*ecs.ListServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *ecs.ListServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListServicesInput, ...func(*ecs.Options)) (*ecs.ListServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListServicesInput, ...func(*ecs.Options)) *ecs.ListServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListServicesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServicesByNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServicesByNamespace(ctx context.Context, params *ecs.ListServicesByNamespaceInput, optFns ...func(*ecs.Options)) (*ecs.ListServicesByNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServicesByNamespace")
	}

	var r0 *ecs.ListServicesByNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListServicesByNamespaceInput, ...func(*ecs.Options)) (*ecs.ListServicesByNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListServicesByNamespaceInput, ...func(*ecs.Options)) *ecs.ListServicesByNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListServicesByNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListServicesByNamespaceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *ecs.ListTagsForResourceInput, optFns ...func(*ecs.Options)) (*ecs.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *ecs.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListTagsForResourceInput, ...func(*ecs.Options)) (*ecs.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListTagsForResourceInput, ...func(*ecs.Options)) *ecs.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListTagsForResourceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTaskDefinitionFamilies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTaskDefinitionFamilies(ctx context.Context, params *ecs.ListTaskDefinitionFamiliesInput, optFns ...func(*ecs.Options)) (*ecs.ListTaskDefinitionFamiliesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskDefinitionFamilies")
	}

	var r0 *ecs.ListTaskDefinitionFamiliesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListTaskDefinitionFamiliesInput, ...func(*ecs.Options)) (*ecs.ListTaskDefinitionFamiliesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListTaskDefinitionFamiliesInput, ...func(*ecs.Options)) *ecs.ListTaskDefinitionFamiliesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListTaskDefinitionFamiliesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListTaskDefinitionFamiliesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTaskDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTaskDefinitions(ctx context.Context, params *ecs.ListTaskDefinitionsInput, optFns ...func(*ecs.Options)) (*ecs.ListTaskDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTaskDefinitions")
	}

	var r0 *ecs.ListTaskDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListTaskDefinitionsInput, ...func(*ecs.Options)) (*ecs.ListTaskDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListTaskDefinitionsInput, ...func(*ecs.Options)) *ecs.ListTaskDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListTaskDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListTaskDefinitionsInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTasks(ctx context.Context, params *ecs.ListTasksInput, optFns ...func(*ecs.Options)) (*ecs.ListTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *ecs.ListTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListTasksInput, ...func(*ecs.Options)) (*ecs.ListTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.ListTasksInput, ...func(*ecs.Options)) *ecs.ListTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.ListTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.ListTasksInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() ecs.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 ecs.Options
	if rf, ok := ret.Get(0).(func() ecs.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ecs.Options)
	}

	return r0
}

// PutAccountSetting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountSetting(ctx context.Context, params *ecs.PutAccountSettingInput, optFns ...func(*ecs.Options)) (*ecs.PutAccountSettingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountSetting")
	}

	var r0 *ecs.PutAccountSettingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.PutAccountSettingInput, ...func(*ecs.Options)) (*ecs.PutAccountSettingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.PutAccountSettingInput, ...func(*ecs.Options)) *ecs.PutAccountSettingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.PutAccountSettingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.PutAccountSettingInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccountSettingDefault provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountSettingDefault(ctx context.Context, params *ecs.PutAccountSettingDefaultInput, optFns ...func(*ecs.Options)) (*ecs.PutAccountSettingDefaultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountSettingDefault")
	}

	var r0 *ecs.PutAccountSettingDefaultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.PutAccountSettingDefaultInput, ...func(*ecs.Options)) (*ecs.PutAccountSettingDefaultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.PutAccountSettingDefaultInput, ...func(*ecs.Options)) *ecs.PutAccountSettingDefaultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.PutAccountSettingDefaultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.PutAccountSettingDefaultInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAttributes(ctx context.Context, params *ecs.PutAttributesInput, optFns ...func(*ecs.Options)) (*ecs.PutAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAttributes")
	}

	var r0 *ecs.PutAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.PutAttributesInput, ...func(*ecs.Options)) (*ecs.PutAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.PutAttributesInput, ...func(*ecs.Options)) *ecs.PutAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.PutAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.PutAttributesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutClusterCapacityProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutClusterCapacityProviders(ctx context.Context, params *ecs.PutClusterCapacityProvidersInput, optFns ...func(*ecs.Options)) (*ecs.PutClusterCapacityProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutClusterCapacityProviders")
	}

	var r0 *ecs.PutClusterCapacityProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.PutClusterCapacityProvidersInput, ...func(*ecs.Options)) (*ecs.PutClusterCapacityProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.PutClusterCapacityProvidersInput, ...func(*ecs.Options)) *ecs.PutClusterCapacityProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.PutClusterCapacityProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.PutClusterCapacityProvidersInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterContainerInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterContainerInstance(ctx context.Context, params *ecs.RegisterContainerInstanceInput, optFns ...func(*ecs.Options)) (*ecs.RegisterContainerInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterContainerInstance")
	}

	var r0 *ecs.RegisterContainerInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.RegisterContainerInstanceInput, ...func(*ecs.Options)) (*ecs.RegisterContainerInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.RegisterContainerInstanceInput, ...func(*ecs.Options)) *ecs.RegisterContainerInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.RegisterContainerInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.RegisterContainerInstanceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTaskDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterTaskDefinition(ctx context.Context, params *ecs.RegisterTaskDefinitionInput, optFns ...func(*ecs.Options)) (*ecs.RegisterTaskDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTaskDefinition")
	}

	var r0 *ecs.RegisterTaskDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.RegisterTaskDefinitionInput, ...func(*ecs.Options)) (*ecs.RegisterTaskDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.RegisterTaskDefinitionInput, ...func(*ecs.Options)) *ecs.RegisterTaskDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.RegisterTaskDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.RegisterTaskDefinitionInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RunTask(ctx context.Context, params *ecs.RunTaskInput, optFns ...func(*ecs.Options)) (*ecs.RunTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunTask")
	}

	var r0 *ecs.RunTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.RunTaskInput, ...func(*ecs.Options)) (*ecs.RunTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.RunTaskInput, ...func(*ecs.Options)) *ecs.RunTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.RunTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.RunTaskInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTask(ctx context.Context, params *ecs.StartTaskInput, optFns ...func(*ecs.Options)) (*ecs.StartTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTask")
	}

	var r0 *ecs.StartTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.StartTaskInput, ...func(*ecs.Options)) (*ecs.StartTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.StartTaskInput, ...func(*ecs.Options)) *ecs.StartTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.StartTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.StartTaskInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopTask(ctx context.Context, params *ecs.StopTaskInput, optFns ...func(*ecs.Options)) (*ecs.StopTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopTask")
	}

	var r0 *ecs.StopTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.StopTaskInput, ...func(*ecs.Options)) (*ecs.StopTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.StopTaskInput, ...func(*ecs.Options)) *ecs.StopTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.StopTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.StopTaskInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitAttachmentStateChanges provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SubmitAttachmentStateChanges(ctx context.Context, params *ecs.SubmitAttachmentStateChangesInput, optFns ...func(*ecs.Options)) (*ecs.SubmitAttachmentStateChangesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitAttachmentStateChanges")
	}

	var r0 *ecs.SubmitAttachmentStateChangesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.SubmitAttachmentStateChangesInput, ...func(*ecs.Options)) (*ecs.SubmitAttachmentStateChangesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.SubmitAttachmentStateChangesInput, ...func(*ecs.Options)) *ecs.SubmitAttachmentStateChangesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.SubmitAttachmentStateChangesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.SubmitAttachmentStateChangesInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitContainerStateChange provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SubmitContainerStateChange(ctx context.Context, params *ecs.SubmitContainerStateChangeInput, optFns ...func(*ecs.Options)) (*ecs.SubmitContainerStateChangeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitContainerStateChange")
	}

	var r0 *ecs.SubmitContainerStateChangeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.SubmitContainerStateChangeInput, ...func(*ecs.Options)) (*ecs.SubmitContainerStateChangeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.SubmitContainerStateChangeInput, ...func(*ecs.Options)) *ecs.SubmitContainerStateChangeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.SubmitContainerStateChangeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.SubmitContainerStateChangeInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitTaskStateChange provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SubmitTaskStateChange(ctx context.Context, params *ecs.SubmitTaskStateChangeInput, optFns ...func(*ecs.Options)) (*ecs.SubmitTaskStateChangeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitTaskStateChange")
	}

	var r0 *ecs.SubmitTaskStateChangeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.SubmitTaskStateChangeInput, ...func(*ecs.Options)) (*ecs.SubmitTaskStateChangeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.SubmitTaskStateChangeInput, ...func(*ecs.Options)) *ecs.SubmitTaskStateChangeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.SubmitTaskStateChangeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.SubmitTaskStateChangeInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *ecs.TagResourceInput, optFns ...func(*ecs.Options)) (*ecs.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *ecs.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.TagResourceInput, ...func(*ecs.Options)) (*ecs.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.TagResourceInput, ...func(*ecs.Options)) *ecs.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.TagResourceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *ecs.UntagResourceInput, optFns ...func(*ecs.Options)) (*ecs.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *ecs.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UntagResourceInput, ...func(*ecs.Options)) (*ecs.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UntagResourceInput, ...func(*ecs.Options)) *ecs.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UntagResourceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCapacityProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCapacityProvider(ctx context.Context, params *ecs.UpdateCapacityProviderInput, optFns ...func(*ecs.Options)) (*ecs.UpdateCapacityProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCapacityProvider")
	}

	var r0 *ecs.UpdateCapacityProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateCapacityProviderInput, ...func(*ecs.Options)) (*ecs.UpdateCapacityProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateCapacityProviderInput, ...func(*ecs.Options)) *ecs.UpdateCapacityProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateCapacityProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateCapacityProviderInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCluster(ctx context.Context, params *ecs.UpdateClusterInput, optFns ...func(*ecs.Options)) (*ecs.UpdateClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 *ecs.UpdateClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateClusterInput, ...func(*ecs.Options)) (*ecs.UpdateClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateClusterInput, ...func(*ecs.Options)) *ecs.UpdateClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateClusterInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateClusterSettings(ctx context.Context, params *ecs.UpdateClusterSettingsInput, optFns ...func(*ecs.Options)) (*ecs.UpdateClusterSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSettings")
	}

	var r0 *ecs.UpdateClusterSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateClusterSettingsInput, ...func(*ecs.Options)) (*ecs.UpdateClusterSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateClusterSettingsInput, ...func(*ecs.Options)) *ecs.UpdateClusterSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateClusterSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateClusterSettingsInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainerAgent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContainerAgent(ctx context.Context, params *ecs.UpdateContainerAgentInput, optFns ...func(*ecs.Options)) (*ecs.UpdateContainerAgentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainerAgent")
	}

	var r0 *ecs.UpdateContainerAgentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateContainerAgentInput, ...func(*ecs.Options)) (*ecs.UpdateContainerAgentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateContainerAgentInput, ...func(*ecs.Options)) *ecs.UpdateContainerAgentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateContainerAgentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateContainerAgentInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainerInstancesState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContainerInstancesState(ctx context.Context, params *ecs.UpdateContainerInstancesStateInput, optFns ...func(*ecs.Options)) (*ecs.UpdateContainerInstancesStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainerInstancesState")
	}

	var r0 *ecs.UpdateContainerInstancesStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateContainerInstancesStateInput, ...func(*ecs.Options)) (*ecs.UpdateContainerInstancesStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateContainerInstancesStateInput, ...func(*ecs.Options)) *ecs.UpdateContainerInstancesStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateContainerInstancesStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateContainerInstancesStateInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateService(ctx context.Context, params *ecs.UpdateServiceInput, optFns ...func(*ecs.Options)) (*ecs.UpdateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *ecs.UpdateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateServiceInput, ...func(*ecs.Options)) (*ecs.UpdateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateServiceInput, ...func(*ecs.Options)) *ecs.UpdateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateServiceInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServicePrimaryTaskSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServicePrimaryTaskSet(ctx context.Context, params *ecs.UpdateServicePrimaryTaskSetInput, optFns ...func(*ecs.Options)) (*ecs.UpdateServicePrimaryTaskSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServicePrimaryTaskSet")
	}

	var r0 *ecs.UpdateServicePrimaryTaskSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateServicePrimaryTaskSetInput, ...func(*ecs.Options)) (*ecs.UpdateServicePrimaryTaskSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateServicePrimaryTaskSetInput, ...func(*ecs.Options)) *ecs.UpdateServicePrimaryTaskSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateServicePrimaryTaskSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateServicePrimaryTaskSetInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskProtection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTaskProtection(ctx context.Context, params *ecs.UpdateTaskProtectionInput, optFns ...func(*ecs.Options)) (*ecs.UpdateTaskProtectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskProtection")
	}

	var r0 *ecs.UpdateTaskProtectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateTaskProtectionInput, ...func(*ecs.Options)) (*ecs.UpdateTaskProtectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateTaskProtectionInput, ...func(*ecs.Options)) *ecs.UpdateTaskProtectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateTaskProtectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateTaskProtectionInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTaskSet(ctx context.Context, params *ecs.UpdateTaskSetInput, optFns ...func(*ecs.Options)) (*ecs.UpdateTaskSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskSet")
	}

	var r0 *ecs.UpdateTaskSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateTaskSetInput, ...func(*ecs.Options)) (*ecs.UpdateTaskSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ecs.UpdateTaskSetInput, ...func(*ecs.Options)) *ecs.UpdateTaskSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecs.UpdateTaskSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ecs.UpdateTaskSetInput, ...func(*ecs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
