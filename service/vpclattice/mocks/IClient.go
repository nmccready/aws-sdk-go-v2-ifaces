// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	vpclattice "github.com/aws/aws-sdk-go-v2/service/vpclattice"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchUpdateRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateRule(ctx context.Context, params *vpclattice.BatchUpdateRuleInput, optFns ...func(*vpclattice.Options)) (*vpclattice.BatchUpdateRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateRule")
	}

	var r0 *vpclattice.BatchUpdateRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.BatchUpdateRuleInput, ...func(*vpclattice.Options)) (*vpclattice.BatchUpdateRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.BatchUpdateRuleInput, ...func(*vpclattice.Options)) *vpclattice.BatchUpdateRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.BatchUpdateRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.BatchUpdateRuleInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessLogSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccessLogSubscription(ctx context.Context, params *vpclattice.CreateAccessLogSubscriptionInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateAccessLogSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessLogSubscription")
	}

	var r0 *vpclattice.CreateAccessLogSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateAccessLogSubscriptionInput, ...func(*vpclattice.Options)) (*vpclattice.CreateAccessLogSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateAccessLogSubscriptionInput, ...func(*vpclattice.Options)) *vpclattice.CreateAccessLogSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateAccessLogSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateAccessLogSubscriptionInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateListener provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateListener(ctx context.Context, params *vpclattice.CreateListenerInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateListenerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateListener")
	}

	var r0 *vpclattice.CreateListenerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateListenerInput, ...func(*vpclattice.Options)) (*vpclattice.CreateListenerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateListenerInput, ...func(*vpclattice.Options)) *vpclattice.CreateListenerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateListenerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateListenerInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceConfiguration(ctx context.Context, params *vpclattice.CreateResourceConfigurationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateResourceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceConfiguration")
	}

	var r0 *vpclattice.CreateResourceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateResourceConfigurationInput, ...func(*vpclattice.Options)) (*vpclattice.CreateResourceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateResourceConfigurationInput, ...func(*vpclattice.Options)) *vpclattice.CreateResourceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateResourceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateResourceConfigurationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceGateway(ctx context.Context, params *vpclattice.CreateResourceGatewayInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateResourceGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceGateway")
	}

	var r0 *vpclattice.CreateResourceGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateResourceGatewayInput, ...func(*vpclattice.Options)) (*vpclattice.CreateResourceGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateResourceGatewayInput, ...func(*vpclattice.Options)) *vpclattice.CreateResourceGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateResourceGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateResourceGatewayInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRule(ctx context.Context, params *vpclattice.CreateRuleInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRule")
	}

	var r0 *vpclattice.CreateRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateRuleInput, ...func(*vpclattice.Options)) (*vpclattice.CreateRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateRuleInput, ...func(*vpclattice.Options)) *vpclattice.CreateRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateRuleInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateService(ctx context.Context, params *vpclattice.CreateServiceInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateService")
	}

	var r0 *vpclattice.CreateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceInput, ...func(*vpclattice.Options)) (*vpclattice.CreateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceInput, ...func(*vpclattice.Options)) *vpclattice.CreateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateServiceInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceNetwork(ctx context.Context, params *vpclattice.CreateServiceNetworkInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateServiceNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceNetwork")
	}

	var r0 *vpclattice.CreateServiceNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceNetworkInput, ...func(*vpclattice.Options)) (*vpclattice.CreateServiceNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceNetworkInput, ...func(*vpclattice.Options)) *vpclattice.CreateServiceNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateServiceNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateServiceNetworkInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceNetworkResourceAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceNetworkResourceAssociation(ctx context.Context, params *vpclattice.CreateServiceNetworkResourceAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateServiceNetworkResourceAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceNetworkResourceAssociation")
	}

	var r0 *vpclattice.CreateServiceNetworkResourceAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.CreateServiceNetworkResourceAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) *vpclattice.CreateServiceNetworkResourceAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateServiceNetworkResourceAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceNetworkServiceAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceNetworkServiceAssociation(ctx context.Context, params *vpclattice.CreateServiceNetworkServiceAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateServiceNetworkServiceAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceNetworkServiceAssociation")
	}

	var r0 *vpclattice.CreateServiceNetworkServiceAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.CreateServiceNetworkServiceAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) *vpclattice.CreateServiceNetworkServiceAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateServiceNetworkServiceAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceNetworkVpcAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceNetworkVpcAssociation(ctx context.Context, params *vpclattice.CreateServiceNetworkVpcAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateServiceNetworkVpcAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceNetworkVpcAssociation")
	}

	var r0 *vpclattice.CreateServiceNetworkVpcAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.CreateServiceNetworkVpcAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) *vpclattice.CreateServiceNetworkVpcAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateServiceNetworkVpcAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTargetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTargetGroup(ctx context.Context, params *vpclattice.CreateTargetGroupInput, optFns ...func(*vpclattice.Options)) (*vpclattice.CreateTargetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTargetGroup")
	}

	var r0 *vpclattice.CreateTargetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateTargetGroupInput, ...func(*vpclattice.Options)) (*vpclattice.CreateTargetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.CreateTargetGroupInput, ...func(*vpclattice.Options)) *vpclattice.CreateTargetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.CreateTargetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.CreateTargetGroupInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessLogSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessLogSubscription(ctx context.Context, params *vpclattice.DeleteAccessLogSubscriptionInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteAccessLogSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessLogSubscription")
	}

	var r0 *vpclattice.DeleteAccessLogSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteAccessLogSubscriptionInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteAccessLogSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteAccessLogSubscriptionInput, ...func(*vpclattice.Options)) *vpclattice.DeleteAccessLogSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteAccessLogSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteAccessLogSubscriptionInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAuthPolicy(ctx context.Context, params *vpclattice.DeleteAuthPolicyInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteAuthPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthPolicy")
	}

	var r0 *vpclattice.DeleteAuthPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteAuthPolicyInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteAuthPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteAuthPolicyInput, ...func(*vpclattice.Options)) *vpclattice.DeleteAuthPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteAuthPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteAuthPolicyInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteListener provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteListener(ctx context.Context, params *vpclattice.DeleteListenerInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteListenerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteListener")
	}

	var r0 *vpclattice.DeleteListenerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteListenerInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteListenerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteListenerInput, ...func(*vpclattice.Options)) *vpclattice.DeleteListenerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteListenerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteListenerInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceConfiguration(ctx context.Context, params *vpclattice.DeleteResourceConfigurationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteResourceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceConfiguration")
	}

	var r0 *vpclattice.DeleteResourceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteResourceConfigurationInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteResourceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteResourceConfigurationInput, ...func(*vpclattice.Options)) *vpclattice.DeleteResourceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteResourceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteResourceConfigurationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceEndpointAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceEndpointAssociation(ctx context.Context, params *vpclattice.DeleteResourceEndpointAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteResourceEndpointAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceEndpointAssociation")
	}

	var r0 *vpclattice.DeleteResourceEndpointAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteResourceEndpointAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteResourceEndpointAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteResourceEndpointAssociationInput, ...func(*vpclattice.Options)) *vpclattice.DeleteResourceEndpointAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteResourceEndpointAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteResourceEndpointAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceGateway(ctx context.Context, params *vpclattice.DeleteResourceGatewayInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteResourceGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceGateway")
	}

	var r0 *vpclattice.DeleteResourceGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteResourceGatewayInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteResourceGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteResourceGatewayInput, ...func(*vpclattice.Options)) *vpclattice.DeleteResourceGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteResourceGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteResourceGatewayInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourcePolicy(ctx context.Context, params *vpclattice.DeleteResourcePolicyInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourcePolicy")
	}

	var r0 *vpclattice.DeleteResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteResourcePolicyInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteResourcePolicyInput, ...func(*vpclattice.Options)) *vpclattice.DeleteResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteResourcePolicyInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRule(ctx context.Context, params *vpclattice.DeleteRuleInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRule")
	}

	var r0 *vpclattice.DeleteRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteRuleInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteRuleInput, ...func(*vpclattice.Options)) *vpclattice.DeleteRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteRuleInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteService(ctx context.Context, params *vpclattice.DeleteServiceInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteService")
	}

	var r0 *vpclattice.DeleteServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceInput, ...func(*vpclattice.Options)) *vpclattice.DeleteServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteServiceInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceNetwork(ctx context.Context, params *vpclattice.DeleteServiceNetworkInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceNetwork")
	}

	var r0 *vpclattice.DeleteServiceNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceNetworkInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceNetworkInput, ...func(*vpclattice.Options)) *vpclattice.DeleteServiceNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteServiceNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteServiceNetworkInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceNetworkResourceAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceNetworkResourceAssociation(ctx context.Context, params *vpclattice.DeleteServiceNetworkResourceAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceNetworkResourceAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceNetworkResourceAssociation")
	}

	var r0 *vpclattice.DeleteServiceNetworkResourceAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceNetworkResourceAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) *vpclattice.DeleteServiceNetworkResourceAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteServiceNetworkResourceAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceNetworkServiceAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceNetworkServiceAssociation(ctx context.Context, params *vpclattice.DeleteServiceNetworkServiceAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceNetworkServiceAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceNetworkServiceAssociation")
	}

	var r0 *vpclattice.DeleteServiceNetworkServiceAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceNetworkServiceAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) *vpclattice.DeleteServiceNetworkServiceAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteServiceNetworkServiceAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceNetworkVpcAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceNetworkVpcAssociation(ctx context.Context, params *vpclattice.DeleteServiceNetworkVpcAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceNetworkVpcAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceNetworkVpcAssociation")
	}

	var r0 *vpclattice.DeleteServiceNetworkVpcAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteServiceNetworkVpcAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) *vpclattice.DeleteServiceNetworkVpcAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteServiceNetworkVpcAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTargetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTargetGroup(ctx context.Context, params *vpclattice.DeleteTargetGroupInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeleteTargetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTargetGroup")
	}

	var r0 *vpclattice.DeleteTargetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteTargetGroupInput, ...func(*vpclattice.Options)) (*vpclattice.DeleteTargetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeleteTargetGroupInput, ...func(*vpclattice.Options)) *vpclattice.DeleteTargetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeleteTargetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeleteTargetGroupInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterTargets(ctx context.Context, params *vpclattice.DeregisterTargetsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.DeregisterTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterTargets")
	}

	var r0 *vpclattice.DeregisterTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeregisterTargetsInput, ...func(*vpclattice.Options)) (*vpclattice.DeregisterTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.DeregisterTargetsInput, ...func(*vpclattice.Options)) *vpclattice.DeregisterTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.DeregisterTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.DeregisterTargetsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessLogSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessLogSubscription(ctx context.Context, params *vpclattice.GetAccessLogSubscriptionInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetAccessLogSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessLogSubscription")
	}

	var r0 *vpclattice.GetAccessLogSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetAccessLogSubscriptionInput, ...func(*vpclattice.Options)) (*vpclattice.GetAccessLogSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetAccessLogSubscriptionInput, ...func(*vpclattice.Options)) *vpclattice.GetAccessLogSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetAccessLogSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetAccessLogSubscriptionInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAuthPolicy(ctx context.Context, params *vpclattice.GetAuthPolicyInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetAuthPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthPolicy")
	}

	var r0 *vpclattice.GetAuthPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetAuthPolicyInput, ...func(*vpclattice.Options)) (*vpclattice.GetAuthPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetAuthPolicyInput, ...func(*vpclattice.Options)) *vpclattice.GetAuthPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetAuthPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetAuthPolicyInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetListener provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetListener(ctx context.Context, params *vpclattice.GetListenerInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetListenerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetListener")
	}

	var r0 *vpclattice.GetListenerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetListenerInput, ...func(*vpclattice.Options)) (*vpclattice.GetListenerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetListenerInput, ...func(*vpclattice.Options)) *vpclattice.GetListenerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetListenerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetListenerInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceConfiguration(ctx context.Context, params *vpclattice.GetResourceConfigurationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetResourceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceConfiguration")
	}

	var r0 *vpclattice.GetResourceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetResourceConfigurationInput, ...func(*vpclattice.Options)) (*vpclattice.GetResourceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetResourceConfigurationInput, ...func(*vpclattice.Options)) *vpclattice.GetResourceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetResourceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetResourceConfigurationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceGateway(ctx context.Context, params *vpclattice.GetResourceGatewayInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetResourceGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceGateway")
	}

	var r0 *vpclattice.GetResourceGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetResourceGatewayInput, ...func(*vpclattice.Options)) (*vpclattice.GetResourceGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetResourceGatewayInput, ...func(*vpclattice.Options)) *vpclattice.GetResourceGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetResourceGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetResourceGatewayInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *vpclattice.GetResourcePolicyInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *vpclattice.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetResourcePolicyInput, ...func(*vpclattice.Options)) (*vpclattice.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetResourcePolicyInput, ...func(*vpclattice.Options)) *vpclattice.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetResourcePolicyInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRule(ctx context.Context, params *vpclattice.GetRuleInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRule")
	}

	var r0 *vpclattice.GetRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetRuleInput, ...func(*vpclattice.Options)) (*vpclattice.GetRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetRuleInput, ...func(*vpclattice.Options)) *vpclattice.GetRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetRuleInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetService(ctx context.Context, params *vpclattice.GetServiceInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetService")
	}

	var r0 *vpclattice.GetServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceInput, ...func(*vpclattice.Options)) (*vpclattice.GetServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceInput, ...func(*vpclattice.Options)) *vpclattice.GetServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetServiceInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceNetwork(ctx context.Context, params *vpclattice.GetServiceNetworkInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetServiceNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceNetwork")
	}

	var r0 *vpclattice.GetServiceNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceNetworkInput, ...func(*vpclattice.Options)) (*vpclattice.GetServiceNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceNetworkInput, ...func(*vpclattice.Options)) *vpclattice.GetServiceNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetServiceNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetServiceNetworkInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceNetworkResourceAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceNetworkResourceAssociation(ctx context.Context, params *vpclattice.GetServiceNetworkResourceAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetServiceNetworkResourceAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceNetworkResourceAssociation")
	}

	var r0 *vpclattice.GetServiceNetworkResourceAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.GetServiceNetworkResourceAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) *vpclattice.GetServiceNetworkResourceAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetServiceNetworkResourceAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetServiceNetworkResourceAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceNetworkServiceAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceNetworkServiceAssociation(ctx context.Context, params *vpclattice.GetServiceNetworkServiceAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetServiceNetworkServiceAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceNetworkServiceAssociation")
	}

	var r0 *vpclattice.GetServiceNetworkServiceAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.GetServiceNetworkServiceAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) *vpclattice.GetServiceNetworkServiceAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetServiceNetworkServiceAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetServiceNetworkServiceAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceNetworkVpcAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceNetworkVpcAssociation(ctx context.Context, params *vpclattice.GetServiceNetworkVpcAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetServiceNetworkVpcAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceNetworkVpcAssociation")
	}

	var r0 *vpclattice.GetServiceNetworkVpcAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.GetServiceNetworkVpcAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) *vpclattice.GetServiceNetworkVpcAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetServiceNetworkVpcAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTargetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTargetGroup(ctx context.Context, params *vpclattice.GetTargetGroupInput, optFns ...func(*vpclattice.Options)) (*vpclattice.GetTargetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTargetGroup")
	}

	var r0 *vpclattice.GetTargetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetTargetGroupInput, ...func(*vpclattice.Options)) (*vpclattice.GetTargetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.GetTargetGroupInput, ...func(*vpclattice.Options)) *vpclattice.GetTargetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.GetTargetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.GetTargetGroupInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessLogSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccessLogSubscriptions(ctx context.Context, params *vpclattice.ListAccessLogSubscriptionsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListAccessLogSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessLogSubscriptions")
	}

	var r0 *vpclattice.ListAccessLogSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListAccessLogSubscriptionsInput, ...func(*vpclattice.Options)) (*vpclattice.ListAccessLogSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListAccessLogSubscriptionsInput, ...func(*vpclattice.Options)) *vpclattice.ListAccessLogSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListAccessLogSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListAccessLogSubscriptionsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListListeners provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListListeners(ctx context.Context, params *vpclattice.ListListenersInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListListenersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListListeners")
	}

	var r0 *vpclattice.ListListenersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListListenersInput, ...func(*vpclattice.Options)) (*vpclattice.ListListenersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListListenersInput, ...func(*vpclattice.Options)) *vpclattice.ListListenersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListListenersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListListenersInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceConfigurations(ctx context.Context, params *vpclattice.ListResourceConfigurationsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListResourceConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceConfigurations")
	}

	var r0 *vpclattice.ListResourceConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListResourceConfigurationsInput, ...func(*vpclattice.Options)) (*vpclattice.ListResourceConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListResourceConfigurationsInput, ...func(*vpclattice.Options)) *vpclattice.ListResourceConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListResourceConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListResourceConfigurationsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceEndpointAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceEndpointAssociations(ctx context.Context, params *vpclattice.ListResourceEndpointAssociationsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListResourceEndpointAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceEndpointAssociations")
	}

	var r0 *vpclattice.ListResourceEndpointAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListResourceEndpointAssociationsInput, ...func(*vpclattice.Options)) (*vpclattice.ListResourceEndpointAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListResourceEndpointAssociationsInput, ...func(*vpclattice.Options)) *vpclattice.ListResourceEndpointAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListResourceEndpointAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListResourceEndpointAssociationsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceGateways provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceGateways(ctx context.Context, params *vpclattice.ListResourceGatewaysInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListResourceGatewaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceGateways")
	}

	var r0 *vpclattice.ListResourceGatewaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListResourceGatewaysInput, ...func(*vpclattice.Options)) (*vpclattice.ListResourceGatewaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListResourceGatewaysInput, ...func(*vpclattice.Options)) *vpclattice.ListResourceGatewaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListResourceGatewaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListResourceGatewaysInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRules(ctx context.Context, params *vpclattice.ListRulesInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRules")
	}

	var r0 *vpclattice.ListRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListRulesInput, ...func(*vpclattice.Options)) (*vpclattice.ListRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListRulesInput, ...func(*vpclattice.Options)) *vpclattice.ListRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListRulesInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceNetworkResourceAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceNetworkResourceAssociations(ctx context.Context, params *vpclattice.ListServiceNetworkResourceAssociationsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworkResourceAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceNetworkResourceAssociations")
	}

	var r0 *vpclattice.ListServiceNetworkResourceAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworkResourceAssociationsInput, ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworkResourceAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworkResourceAssociationsInput, ...func(*vpclattice.Options)) *vpclattice.ListServiceNetworkResourceAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListServiceNetworkResourceAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListServiceNetworkResourceAssociationsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceNetworkServiceAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceNetworkServiceAssociations(ctx context.Context, params *vpclattice.ListServiceNetworkServiceAssociationsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworkServiceAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceNetworkServiceAssociations")
	}

	var r0 *vpclattice.ListServiceNetworkServiceAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworkServiceAssociationsInput, ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworkServiceAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworkServiceAssociationsInput, ...func(*vpclattice.Options)) *vpclattice.ListServiceNetworkServiceAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListServiceNetworkServiceAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListServiceNetworkServiceAssociationsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceNetworkVpcAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceNetworkVpcAssociations(ctx context.Context, params *vpclattice.ListServiceNetworkVpcAssociationsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworkVpcAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceNetworkVpcAssociations")
	}

	var r0 *vpclattice.ListServiceNetworkVpcAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworkVpcAssociationsInput, ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworkVpcAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworkVpcAssociationsInput, ...func(*vpclattice.Options)) *vpclattice.ListServiceNetworkVpcAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListServiceNetworkVpcAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListServiceNetworkVpcAssociationsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceNetworkVpcEndpointAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceNetworkVpcEndpointAssociations(ctx context.Context, params *vpclattice.ListServiceNetworkVpcEndpointAssociationsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworkVpcEndpointAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceNetworkVpcEndpointAssociations")
	}

	var r0 *vpclattice.ListServiceNetworkVpcEndpointAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworkVpcEndpointAssociationsInput, ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworkVpcEndpointAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworkVpcEndpointAssociationsInput, ...func(*vpclattice.Options)) *vpclattice.ListServiceNetworkVpcEndpointAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListServiceNetworkVpcEndpointAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListServiceNetworkVpcEndpointAssociationsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceNetworks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceNetworks(ctx context.Context, params *vpclattice.ListServiceNetworksInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceNetworks")
	}

	var r0 *vpclattice.ListServiceNetworksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworksInput, ...func(*vpclattice.Options)) (*vpclattice.ListServiceNetworksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServiceNetworksInput, ...func(*vpclattice.Options)) *vpclattice.ListServiceNetworksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListServiceNetworksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListServiceNetworksInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServices(ctx context.Context, params *vpclattice.ListServicesInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServices")
	}

	var r0 *vpclattice.ListServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServicesInput, ...func(*vpclattice.Options)) (*vpclattice.ListServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListServicesInput, ...func(*vpclattice.Options)) *vpclattice.ListServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListServicesInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *vpclattice.ListTagsForResourceInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *vpclattice.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListTagsForResourceInput, ...func(*vpclattice.Options)) (*vpclattice.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListTagsForResourceInput, ...func(*vpclattice.Options)) *vpclattice.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListTagsForResourceInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTargetGroups(ctx context.Context, params *vpclattice.ListTargetGroupsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListTargetGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTargetGroups")
	}

	var r0 *vpclattice.ListTargetGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListTargetGroupsInput, ...func(*vpclattice.Options)) (*vpclattice.ListTargetGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListTargetGroupsInput, ...func(*vpclattice.Options)) *vpclattice.ListTargetGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListTargetGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListTargetGroupsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTargets(ctx context.Context, params *vpclattice.ListTargetsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.ListTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTargets")
	}

	var r0 *vpclattice.ListTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListTargetsInput, ...func(*vpclattice.Options)) (*vpclattice.ListTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.ListTargetsInput, ...func(*vpclattice.Options)) *vpclattice.ListTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.ListTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.ListTargetsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() vpclattice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 vpclattice.Options
	if rf, ok := ret.Get(0).(func() vpclattice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(vpclattice.Options)
	}

	return r0
}

// PutAuthPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAuthPolicy(ctx context.Context, params *vpclattice.PutAuthPolicyInput, optFns ...func(*vpclattice.Options)) (*vpclattice.PutAuthPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAuthPolicy")
	}

	var r0 *vpclattice.PutAuthPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.PutAuthPolicyInput, ...func(*vpclattice.Options)) (*vpclattice.PutAuthPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.PutAuthPolicyInput, ...func(*vpclattice.Options)) *vpclattice.PutAuthPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.PutAuthPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.PutAuthPolicyInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourcePolicy(ctx context.Context, params *vpclattice.PutResourcePolicyInput, optFns ...func(*vpclattice.Options)) (*vpclattice.PutResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourcePolicy")
	}

	var r0 *vpclattice.PutResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.PutResourcePolicyInput, ...func(*vpclattice.Options)) (*vpclattice.PutResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.PutResourcePolicyInput, ...func(*vpclattice.Options)) *vpclattice.PutResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.PutResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.PutResourcePolicyInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterTargets(ctx context.Context, params *vpclattice.RegisterTargetsInput, optFns ...func(*vpclattice.Options)) (*vpclattice.RegisterTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterTargets")
	}

	var r0 *vpclattice.RegisterTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.RegisterTargetsInput, ...func(*vpclattice.Options)) (*vpclattice.RegisterTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.RegisterTargetsInput, ...func(*vpclattice.Options)) *vpclattice.RegisterTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.RegisterTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.RegisterTargetsInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *vpclattice.TagResourceInput, optFns ...func(*vpclattice.Options)) (*vpclattice.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *vpclattice.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.TagResourceInput, ...func(*vpclattice.Options)) (*vpclattice.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.TagResourceInput, ...func(*vpclattice.Options)) *vpclattice.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.TagResourceInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *vpclattice.UntagResourceInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *vpclattice.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UntagResourceInput, ...func(*vpclattice.Options)) (*vpclattice.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UntagResourceInput, ...func(*vpclattice.Options)) *vpclattice.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UntagResourceInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccessLogSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccessLogSubscription(ctx context.Context, params *vpclattice.UpdateAccessLogSubscriptionInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateAccessLogSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessLogSubscription")
	}

	var r0 *vpclattice.UpdateAccessLogSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateAccessLogSubscriptionInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateAccessLogSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateAccessLogSubscriptionInput, ...func(*vpclattice.Options)) *vpclattice.UpdateAccessLogSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateAccessLogSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateAccessLogSubscriptionInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateListener provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateListener(ctx context.Context, params *vpclattice.UpdateListenerInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateListenerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateListener")
	}

	var r0 *vpclattice.UpdateListenerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateListenerInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateListenerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateListenerInput, ...func(*vpclattice.Options)) *vpclattice.UpdateListenerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateListenerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateListenerInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceConfiguration(ctx context.Context, params *vpclattice.UpdateResourceConfigurationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateResourceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceConfiguration")
	}

	var r0 *vpclattice.UpdateResourceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateResourceConfigurationInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateResourceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateResourceConfigurationInput, ...func(*vpclattice.Options)) *vpclattice.UpdateResourceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateResourceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateResourceConfigurationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceGateway(ctx context.Context, params *vpclattice.UpdateResourceGatewayInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateResourceGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceGateway")
	}

	var r0 *vpclattice.UpdateResourceGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateResourceGatewayInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateResourceGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateResourceGatewayInput, ...func(*vpclattice.Options)) *vpclattice.UpdateResourceGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateResourceGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateResourceGatewayInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRule(ctx context.Context, params *vpclattice.UpdateRuleInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRule")
	}

	var r0 *vpclattice.UpdateRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateRuleInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateRuleInput, ...func(*vpclattice.Options)) *vpclattice.UpdateRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateRuleInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateService(ctx context.Context, params *vpclattice.UpdateServiceInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateService")
	}

	var r0 *vpclattice.UpdateServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateServiceInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateServiceInput, ...func(*vpclattice.Options)) *vpclattice.UpdateServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateServiceInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceNetwork(ctx context.Context, params *vpclattice.UpdateServiceNetworkInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateServiceNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceNetwork")
	}

	var r0 *vpclattice.UpdateServiceNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateServiceNetworkInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateServiceNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateServiceNetworkInput, ...func(*vpclattice.Options)) *vpclattice.UpdateServiceNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateServiceNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateServiceNetworkInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceNetworkVpcAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceNetworkVpcAssociation(ctx context.Context, params *vpclattice.UpdateServiceNetworkVpcAssociationInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateServiceNetworkVpcAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceNetworkVpcAssociation")
	}

	var r0 *vpclattice.UpdateServiceNetworkVpcAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateServiceNetworkVpcAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) *vpclattice.UpdateServiceNetworkVpcAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateServiceNetworkVpcAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateServiceNetworkVpcAssociationInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTargetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTargetGroup(ctx context.Context, params *vpclattice.UpdateTargetGroupInput, optFns ...func(*vpclattice.Options)) (*vpclattice.UpdateTargetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTargetGroup")
	}

	var r0 *vpclattice.UpdateTargetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateTargetGroupInput, ...func(*vpclattice.Options)) (*vpclattice.UpdateTargetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *vpclattice.UpdateTargetGroupInput, ...func(*vpclattice.Options)) *vpclattice.UpdateTargetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*vpclattice.UpdateTargetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *vpclattice.UpdateTargetGroupInput, ...func(*vpclattice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
