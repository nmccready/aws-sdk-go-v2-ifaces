// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	apigatewayv2 "github.com/aws/aws-sdk-go-v2/service/apigatewayv2"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApi(ctx context.Context, params *apigatewayv2.CreateApiInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApi")
	}

	var r0 *apigatewayv2.CreateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateApiInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateApiInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateApiInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApiMapping(ctx context.Context, params *apigatewayv2.CreateApiMappingInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateApiMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiMapping")
	}

	var r0 *apigatewayv2.CreateApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateApiMappingInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateApiMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateApiMappingInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateApiMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateApiMappingInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAuthorizer(ctx context.Context, params *apigatewayv2.CreateAuthorizerInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthorizer")
	}

	var r0 *apigatewayv2.CreateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateAuthorizerInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateAuthorizerInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateAuthorizerInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeployment(ctx context.Context, params *apigatewayv2.CreateDeploymentInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *apigatewayv2.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateDeploymentInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateDeploymentInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateDeploymentInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomainName(ctx context.Context, params *apigatewayv2.CreateDomainNameInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainName")
	}

	var r0 *apigatewayv2.CreateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateDomainNameInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateDomainNameInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateDomainNameInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIntegration(ctx context.Context, params *apigatewayv2.CreateIntegrationInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegration")
	}

	var r0 *apigatewayv2.CreateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateIntegrationInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateIntegrationInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateIntegrationInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegrationResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIntegrationResponse(ctx context.Context, params *apigatewayv2.CreateIntegrationResponseInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegrationResponse")
	}

	var r0 *apigatewayv2.CreateIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateIntegrationResponseInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateIntegrationResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateIntegrationResponseInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateIntegrationResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateIntegrationResponseInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModel(ctx context.Context, params *apigatewayv2.CreateModelInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModel")
	}

	var r0 *apigatewayv2.CreateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateModelInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateModelInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateModelInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoute(ctx context.Context, params *apigatewayv2.CreateRouteInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoute")
	}

	var r0 *apigatewayv2.CreateRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateRouteInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateRouteInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateRouteInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRouteResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRouteResponse(ctx context.Context, params *apigatewayv2.CreateRouteResponseInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateRouteResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRouteResponse")
	}

	var r0 *apigatewayv2.CreateRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateRouteResponseInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateRouteResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateRouteResponseInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateRouteResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateRouteResponseInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStage(ctx context.Context, params *apigatewayv2.CreateStageInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStage")
	}

	var r0 *apigatewayv2.CreateStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateStageInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateStageInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateStageInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVpcLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVpcLink(ctx context.Context, params *apigatewayv2.CreateVpcLinkInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateVpcLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVpcLink")
	}

	var r0 *apigatewayv2.CreateVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateVpcLinkInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.CreateVpcLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.CreateVpcLinkInput, ...func(*apigatewayv2.Options)) *apigatewayv2.CreateVpcLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.CreateVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.CreateVpcLinkInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessLogSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessLogSettings(ctx context.Context, params *apigatewayv2.DeleteAccessLogSettingsInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteAccessLogSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessLogSettings")
	}

	var r0 *apigatewayv2.DeleteAccessLogSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteAccessLogSettingsInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteAccessLogSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteAccessLogSettingsInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteAccessLogSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteAccessLogSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteAccessLogSettingsInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApi(ctx context.Context, params *apigatewayv2.DeleteApiInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApi")
	}

	var r0 *apigatewayv2.DeleteApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteApiInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteApiInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteApiInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApiMapping(ctx context.Context, params *apigatewayv2.DeleteApiMappingInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteApiMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiMapping")
	}

	var r0 *apigatewayv2.DeleteApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteApiMappingInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteApiMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteApiMappingInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteApiMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteApiMappingInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAuthorizer(ctx context.Context, params *apigatewayv2.DeleteAuthorizerInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAuthorizer")
	}

	var r0 *apigatewayv2.DeleteAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteAuthorizerInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteAuthorizerInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteAuthorizerInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCorsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCorsConfiguration(ctx context.Context, params *apigatewayv2.DeleteCorsConfigurationInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteCorsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCorsConfiguration")
	}

	var r0 *apigatewayv2.DeleteCorsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteCorsConfigurationInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteCorsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteCorsConfigurationInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteCorsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteCorsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteCorsConfigurationInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeployment(ctx context.Context, params *apigatewayv2.DeleteDeploymentInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 *apigatewayv2.DeleteDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteDeploymentInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteDeploymentInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteDeploymentInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomainName(ctx context.Context, params *apigatewayv2.DeleteDomainNameInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainName")
	}

	var r0 *apigatewayv2.DeleteDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteDomainNameInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteDomainNameInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteDomainNameInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntegration(ctx context.Context, params *apigatewayv2.DeleteIntegrationInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegration")
	}

	var r0 *apigatewayv2.DeleteIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteIntegrationInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteIntegrationInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteIntegrationInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegrationResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntegrationResponse(ctx context.Context, params *apigatewayv2.DeleteIntegrationResponseInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegrationResponse")
	}

	var r0 *apigatewayv2.DeleteIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteIntegrationResponseInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteIntegrationResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteIntegrationResponseInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteIntegrationResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteIntegrationResponseInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModel(ctx context.Context, params *apigatewayv2.DeleteModelInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModel")
	}

	var r0 *apigatewayv2.DeleteModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteModelInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteModelInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteModelInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoute(ctx context.Context, params *apigatewayv2.DeleteRouteInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoute")
	}

	var r0 *apigatewayv2.DeleteRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteRouteInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteRequestParameter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRouteRequestParameter(ctx context.Context, params *apigatewayv2.DeleteRouteRequestParameterInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteRouteRequestParameterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRouteRequestParameter")
	}

	var r0 *apigatewayv2.DeleteRouteRequestParameterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteRequestParameterInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteRouteRequestParameterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteRequestParameterInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteRouteRequestParameterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteRequestParameterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteRouteRequestParameterInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRouteResponse(ctx context.Context, params *apigatewayv2.DeleteRouteResponseInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteRouteResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRouteResponse")
	}

	var r0 *apigatewayv2.DeleteRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteResponseInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteRouteResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteResponseInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteRouteResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteRouteResponseInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRouteSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRouteSettings(ctx context.Context, params *apigatewayv2.DeleteRouteSettingsInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteRouteSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRouteSettings")
	}

	var r0 *apigatewayv2.DeleteRouteSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteSettingsInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteRouteSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteRouteSettingsInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteRouteSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteRouteSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteRouteSettingsInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStage(ctx context.Context, params *apigatewayv2.DeleteStageInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStage")
	}

	var r0 *apigatewayv2.DeleteStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteStageInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteStageInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteStageInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVpcLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVpcLink(ctx context.Context, params *apigatewayv2.DeleteVpcLinkInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteVpcLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVpcLink")
	}

	var r0 *apigatewayv2.DeleteVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteVpcLinkInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.DeleteVpcLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.DeleteVpcLinkInput, ...func(*apigatewayv2.Options)) *apigatewayv2.DeleteVpcLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.DeleteVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.DeleteVpcLinkInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportApi(ctx context.Context, params *apigatewayv2.ExportApiInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.ExportApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportApi")
	}

	var r0 *apigatewayv2.ExportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ExportApiInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.ExportApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ExportApiInput, ...func(*apigatewayv2.Options)) *apigatewayv2.ExportApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ExportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.ExportApiInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApi(ctx context.Context, params *apigatewayv2.GetApiInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApi")
	}

	var r0 *apigatewayv2.GetApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetApiInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApiMapping(ctx context.Context, params *apigatewayv2.GetApiMappingInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiMapping")
	}

	var r0 *apigatewayv2.GetApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiMappingInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiMappingInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetApiMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetApiMappingInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiMappings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApiMappings(ctx context.Context, params *apigatewayv2.GetApiMappingsInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiMappingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiMappings")
	}

	var r0 *apigatewayv2.GetApiMappingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiMappingsInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApiMappingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApiMappingsInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetApiMappingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApiMappingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetApiMappingsInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApis(ctx context.Context, params *apigatewayv2.GetApisInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApis")
	}

	var r0 *apigatewayv2.GetApisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApisInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetApisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetApisInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetApisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetApisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetApisInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAuthorizer(ctx context.Context, params *apigatewayv2.GetAuthorizerInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizer")
	}

	var r0 *apigatewayv2.GetAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetAuthorizerInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetAuthorizerInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetAuthorizerInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAuthorizers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAuthorizers(ctx context.Context, params *apigatewayv2.GetAuthorizersInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetAuthorizersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAuthorizers")
	}

	var r0 *apigatewayv2.GetAuthorizersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetAuthorizersInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetAuthorizersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetAuthorizersInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetAuthorizersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetAuthorizersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetAuthorizersInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployment(ctx context.Context, params *apigatewayv2.GetDeploymentInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *apigatewayv2.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDeploymentInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDeploymentInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetDeploymentInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployments(ctx context.Context, params *apigatewayv2.GetDeploymentsInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployments")
	}

	var r0 *apigatewayv2.GetDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDeploymentsInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDeploymentsInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetDeploymentsInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainName(ctx context.Context, params *apigatewayv2.GetDomainNameInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainName")
	}

	var r0 *apigatewayv2.GetDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDomainNameInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDomainNameInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetDomainNameInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainNames provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainNames(ctx context.Context, params *apigatewayv2.GetDomainNamesInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDomainNamesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainNames")
	}

	var r0 *apigatewayv2.GetDomainNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDomainNamesInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetDomainNamesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetDomainNamesInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetDomainNamesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetDomainNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetDomainNamesInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntegration(ctx context.Context, params *apigatewayv2.GetIntegrationInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegration")
	}

	var r0 *apigatewayv2.GetIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetIntegrationInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntegrationResponse(ctx context.Context, params *apigatewayv2.GetIntegrationResponseInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationResponse")
	}

	var r0 *apigatewayv2.GetIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationResponseInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationResponseInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetIntegrationResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetIntegrationResponseInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrationResponses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntegrationResponses(ctx context.Context, params *apigatewayv2.GetIntegrationResponsesInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationResponsesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrationResponses")
	}

	var r0 *apigatewayv2.GetIntegrationResponsesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationResponsesInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationResponsesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationResponsesInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetIntegrationResponsesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationResponsesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetIntegrationResponsesInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegrations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntegrations(ctx context.Context, params *apigatewayv2.GetIntegrationsInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegrations")
	}

	var r0 *apigatewayv2.GetIntegrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationsInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetIntegrationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetIntegrationsInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetIntegrationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetIntegrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetIntegrationsInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetModel(ctx context.Context, params *apigatewayv2.GetModelInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModel")
	}

	var r0 *apigatewayv2.GetModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetModelInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetModelTemplate(ctx context.Context, params *apigatewayv2.GetModelTemplateInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModelTemplate")
	}

	var r0 *apigatewayv2.GetModelTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelTemplateInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelTemplateInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetModelTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetModelTemplateInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetModels(ctx context.Context, params *apigatewayv2.GetModelsInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModels")
	}

	var r0 *apigatewayv2.GetModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelsInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetModelsInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetModelsInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRoute(ctx context.Context, params *apigatewayv2.GetRouteInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoute")
	}

	var r0 *apigatewayv2.GetRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetRouteInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRouteResponse(ctx context.Context, params *apigatewayv2.GetRouteResponseInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRouteResponse")
	}

	var r0 *apigatewayv2.GetRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteResponseInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteResponseInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetRouteResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetRouteResponseInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRouteResponses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRouteResponses(ctx context.Context, params *apigatewayv2.GetRouteResponsesInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteResponsesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRouteResponses")
	}

	var r0 *apigatewayv2.GetRouteResponsesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteResponsesInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRouteResponsesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRouteResponsesInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetRouteResponsesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRouteResponsesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetRouteResponsesInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRoutes(ctx context.Context, params *apigatewayv2.GetRoutesInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRoutes")
	}

	var r0 *apigatewayv2.GetRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRoutesInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetRoutesInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetRoutesInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStage(ctx context.Context, params *apigatewayv2.GetStageInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStage")
	}

	var r0 *apigatewayv2.GetStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetStageInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetStageInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetStageInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStages(ctx context.Context, params *apigatewayv2.GetStagesInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetStagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStages")
	}

	var r0 *apigatewayv2.GetStagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetStagesInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetStagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetStagesInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetStagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetStagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetStagesInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTags(ctx context.Context, params *apigatewayv2.GetTagsInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTags")
	}

	var r0 *apigatewayv2.GetTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetTagsInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetTagsInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetTagsInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVpcLink(ctx context.Context, params *apigatewayv2.GetVpcLinkInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetVpcLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVpcLink")
	}

	var r0 *apigatewayv2.GetVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetVpcLinkInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetVpcLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetVpcLinkInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetVpcLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetVpcLinkInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVpcLinks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVpcLinks(ctx context.Context, params *apigatewayv2.GetVpcLinksInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.GetVpcLinksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVpcLinks")
	}

	var r0 *apigatewayv2.GetVpcLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetVpcLinksInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.GetVpcLinksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.GetVpcLinksInput, ...func(*apigatewayv2.Options)) *apigatewayv2.GetVpcLinksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.GetVpcLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.GetVpcLinksInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportApi(ctx context.Context, params *apigatewayv2.ImportApiInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.ImportApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportApi")
	}

	var r0 *apigatewayv2.ImportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ImportApiInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.ImportApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ImportApiInput, ...func(*apigatewayv2.Options)) *apigatewayv2.ImportApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ImportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.ImportApiInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() apigatewayv2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 apigatewayv2.Options
	if rf, ok := ret.Get(0).(func() apigatewayv2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(apigatewayv2.Options)
	}

	return r0
}

// ReimportApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReimportApi(ctx context.Context, params *apigatewayv2.ReimportApiInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.ReimportApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReimportApi")
	}

	var r0 *apigatewayv2.ReimportApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ReimportApiInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.ReimportApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ReimportApiInput, ...func(*apigatewayv2.Options)) *apigatewayv2.ReimportApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ReimportApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.ReimportApiInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetAuthorizersCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetAuthorizersCache(ctx context.Context, params *apigatewayv2.ResetAuthorizersCacheInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.ResetAuthorizersCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetAuthorizersCache")
	}

	var r0 *apigatewayv2.ResetAuthorizersCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ResetAuthorizersCacheInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.ResetAuthorizersCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.ResetAuthorizersCacheInput, ...func(*apigatewayv2.Options)) *apigatewayv2.ResetAuthorizersCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.ResetAuthorizersCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.ResetAuthorizersCacheInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *apigatewayv2.TagResourceInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *apigatewayv2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.TagResourceInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.TagResourceInput, ...func(*apigatewayv2.Options)) *apigatewayv2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.TagResourceInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *apigatewayv2.UntagResourceInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *apigatewayv2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UntagResourceInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UntagResourceInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UntagResourceInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApi(ctx context.Context, params *apigatewayv2.UpdateApiInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApi")
	}

	var r0 *apigatewayv2.UpdateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateApiInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateApiInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateApiInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiMapping provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApiMapping(ctx context.Context, params *apigatewayv2.UpdateApiMappingInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateApiMappingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiMapping")
	}

	var r0 *apigatewayv2.UpdateApiMappingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateApiMappingInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateApiMappingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateApiMappingInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateApiMappingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateApiMappingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateApiMappingInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAuthorizer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAuthorizer(ctx context.Context, params *apigatewayv2.UpdateAuthorizerInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateAuthorizerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAuthorizer")
	}

	var r0 *apigatewayv2.UpdateAuthorizerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateAuthorizerInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateAuthorizerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateAuthorizerInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateAuthorizerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateAuthorizerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateAuthorizerInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeployment(ctx context.Context, params *apigatewayv2.UpdateDeploymentInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeployment")
	}

	var r0 *apigatewayv2.UpdateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateDeploymentInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateDeploymentInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateDeploymentInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainName(ctx context.Context, params *apigatewayv2.UpdateDomainNameInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainName")
	}

	var r0 *apigatewayv2.UpdateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateDomainNameInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateDomainNameInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateDomainNameInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIntegration(ctx context.Context, params *apigatewayv2.UpdateIntegrationInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegration")
	}

	var r0 *apigatewayv2.UpdateIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateIntegrationInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateIntegrationInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateIntegrationInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIntegrationResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIntegrationResponse(ctx context.Context, params *apigatewayv2.UpdateIntegrationResponseInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateIntegrationResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIntegrationResponse")
	}

	var r0 *apigatewayv2.UpdateIntegrationResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateIntegrationResponseInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateIntegrationResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateIntegrationResponseInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateIntegrationResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateIntegrationResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateIntegrationResponseInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateModel(ctx context.Context, params *apigatewayv2.UpdateModelInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModel")
	}

	var r0 *apigatewayv2.UpdateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateModelInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateModelInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateModelInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoute(ctx context.Context, params *apigatewayv2.UpdateRouteInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoute")
	}

	var r0 *apigatewayv2.UpdateRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateRouteInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateRouteInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateRouteInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRouteResponse provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRouteResponse(ctx context.Context, params *apigatewayv2.UpdateRouteResponseInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateRouteResponseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRouteResponse")
	}

	var r0 *apigatewayv2.UpdateRouteResponseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateRouteResponseInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateRouteResponseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateRouteResponseInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateRouteResponseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateRouteResponseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateRouteResponseInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStage(ctx context.Context, params *apigatewayv2.UpdateStageInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStage")
	}

	var r0 *apigatewayv2.UpdateStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateStageInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateStageInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateStageInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVpcLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVpcLink(ctx context.Context, params *apigatewayv2.UpdateVpcLinkInput, optFns ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateVpcLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVpcLink")
	}

	var r0 *apigatewayv2.UpdateVpcLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateVpcLinkInput, ...func(*apigatewayv2.Options)) (*apigatewayv2.UpdateVpcLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apigatewayv2.UpdateVpcLinkInput, ...func(*apigatewayv2.Options)) *apigatewayv2.UpdateVpcLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apigatewayv2.UpdateVpcLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apigatewayv2.UpdateVpcLinkInput, ...func(*apigatewayv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
