// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	lexmodelbuildingservice "github.com/aws/aws-sdk-go-v2/service/lexmodelbuildingservice"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateBotVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBotVersion(ctx context.Context, params *lexmodelbuildingservice.CreateBotVersionInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.CreateBotVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBotVersion")
	}

	var r0 *lexmodelbuildingservice.CreateBotVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.CreateBotVersionInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.CreateBotVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.CreateBotVersionInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.CreateBotVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.CreateBotVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.CreateBotVersionInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntentVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIntentVersion(ctx context.Context, params *lexmodelbuildingservice.CreateIntentVersionInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.CreateIntentVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntentVersion")
	}

	var r0 *lexmodelbuildingservice.CreateIntentVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.CreateIntentVersionInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.CreateIntentVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.CreateIntentVersionInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.CreateIntentVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.CreateIntentVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.CreateIntentVersionInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSlotTypeVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSlotTypeVersion(ctx context.Context, params *lexmodelbuildingservice.CreateSlotTypeVersionInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSlotTypeVersion")
	}

	var r0 *lexmodelbuildingservice.CreateSlotTypeVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.CreateSlotTypeVersionInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.CreateSlotTypeVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.CreateSlotTypeVersionInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.CreateSlotTypeVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.CreateSlotTypeVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.CreateSlotTypeVersionInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBot(ctx context.Context, params *lexmodelbuildingservice.DeleteBotInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBot")
	}

	var r0 *lexmodelbuildingservice.DeleteBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteBotInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteBotInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteBotInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBotAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBotAlias(ctx context.Context, params *lexmodelbuildingservice.DeleteBotAliasInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteBotAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBotAlias")
	}

	var r0 *lexmodelbuildingservice.DeleteBotAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteBotAliasInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteBotAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteBotAliasInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteBotAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteBotAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteBotAliasInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBotChannelAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBotChannelAssociation(ctx context.Context, params *lexmodelbuildingservice.DeleteBotChannelAssociationInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBotChannelAssociation")
	}

	var r0 *lexmodelbuildingservice.DeleteBotChannelAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteBotChannelAssociationInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteBotChannelAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteBotChannelAssociationInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteBotChannelAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteBotChannelAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteBotChannelAssociationInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBotVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBotVersion(ctx context.Context, params *lexmodelbuildingservice.DeleteBotVersionInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteBotVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBotVersion")
	}

	var r0 *lexmodelbuildingservice.DeleteBotVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteBotVersionInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteBotVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteBotVersionInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteBotVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteBotVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteBotVersionInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntent(ctx context.Context, params *lexmodelbuildingservice.DeleteIntentInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteIntentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntent")
	}

	var r0 *lexmodelbuildingservice.DeleteIntentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteIntentInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteIntentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteIntentInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteIntentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteIntentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteIntentInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntentVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntentVersion(ctx context.Context, params *lexmodelbuildingservice.DeleteIntentVersionInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntentVersion")
	}

	var r0 *lexmodelbuildingservice.DeleteIntentVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteIntentVersionInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteIntentVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteIntentVersionInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteIntentVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteIntentVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteIntentVersionInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSlotType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSlotType(ctx context.Context, params *lexmodelbuildingservice.DeleteSlotTypeInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSlotType")
	}

	var r0 *lexmodelbuildingservice.DeleteSlotTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteSlotTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteSlotTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteSlotTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSlotTypeVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSlotTypeVersion(ctx context.Context, params *lexmodelbuildingservice.DeleteSlotTypeVersionInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSlotTypeVersion")
	}

	var r0 *lexmodelbuildingservice.DeleteSlotTypeVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteSlotTypeVersionInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteSlotTypeVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteSlotTypeVersionInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteSlotTypeVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteSlotTypeVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteSlotTypeVersionInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUtterances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUtterances(ctx context.Context, params *lexmodelbuildingservice.DeleteUtterancesInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteUtterancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUtterances")
	}

	var r0 *lexmodelbuildingservice.DeleteUtterancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteUtterancesInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.DeleteUtterancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.DeleteUtterancesInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.DeleteUtterancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.DeleteUtterancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.DeleteUtterancesInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBot(ctx context.Context, params *lexmodelbuildingservice.GetBotInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBot")
	}

	var r0 *lexmodelbuildingservice.GetBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBotInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBotAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBotAlias(ctx context.Context, params *lexmodelbuildingservice.GetBotAliasInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBotAlias")
	}

	var r0 *lexmodelbuildingservice.GetBotAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotAliasInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotAliasInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBotAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBotAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBotAliasInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBotAliases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBotAliases(ctx context.Context, params *lexmodelbuildingservice.GetBotAliasesInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotAliasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBotAliases")
	}

	var r0 *lexmodelbuildingservice.GetBotAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotAliasesInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotAliasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotAliasesInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBotAliasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBotAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBotAliasesInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBotChannelAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBotChannelAssociation(ctx context.Context, params *lexmodelbuildingservice.GetBotChannelAssociationInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBotChannelAssociation")
	}

	var r0 *lexmodelbuildingservice.GetBotChannelAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotChannelAssociationInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotChannelAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotChannelAssociationInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBotChannelAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBotChannelAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBotChannelAssociationInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBotChannelAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBotChannelAssociations(ctx context.Context, params *lexmodelbuildingservice.GetBotChannelAssociationsInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBotChannelAssociations")
	}

	var r0 *lexmodelbuildingservice.GetBotChannelAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotChannelAssociationsInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotChannelAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotChannelAssociationsInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBotChannelAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBotChannelAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBotChannelAssociationsInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBotVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBotVersions(ctx context.Context, params *lexmodelbuildingservice.GetBotVersionsInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBotVersions")
	}

	var r0 *lexmodelbuildingservice.GetBotVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotVersionsInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotVersionsInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBotVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBotVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBotVersionsInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBots(ctx context.Context, params *lexmodelbuildingservice.GetBotsInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBots")
	}

	var r0 *lexmodelbuildingservice.GetBotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotsInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBotsInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBotsInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuiltinIntent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBuiltinIntent(ctx context.Context, params *lexmodelbuildingservice.GetBuiltinIntentInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBuiltinIntent")
	}

	var r0 *lexmodelbuildingservice.GetBuiltinIntentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBuiltinIntentInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBuiltinIntentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBuiltinIntentInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBuiltinIntentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBuiltinIntentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBuiltinIntentInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuiltinIntents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBuiltinIntents(ctx context.Context, params *lexmodelbuildingservice.GetBuiltinIntentsInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBuiltinIntents")
	}

	var r0 *lexmodelbuildingservice.GetBuiltinIntentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBuiltinIntentsInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBuiltinIntentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBuiltinIntentsInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBuiltinIntentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBuiltinIntentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBuiltinIntentsInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuiltinSlotTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBuiltinSlotTypes(ctx context.Context, params *lexmodelbuildingservice.GetBuiltinSlotTypesInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBuiltinSlotTypes")
	}

	var r0 *lexmodelbuildingservice.GetBuiltinSlotTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBuiltinSlotTypesInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetBuiltinSlotTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetBuiltinSlotTypesInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetBuiltinSlotTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetBuiltinSlotTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetBuiltinSlotTypesInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExport(ctx context.Context, params *lexmodelbuildingservice.GetExportInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetExportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExport")
	}

	var r0 *lexmodelbuildingservice.GetExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetExportInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetExportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetExportInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetExportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetExportInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImport(ctx context.Context, params *lexmodelbuildingservice.GetImportInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetImportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImport")
	}

	var r0 *lexmodelbuildingservice.GetImportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetImportInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetImportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetImportInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetImportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetImportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetImportInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntent(ctx context.Context, params *lexmodelbuildingservice.GetIntentInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetIntentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntent")
	}

	var r0 *lexmodelbuildingservice.GetIntentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetIntentInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetIntentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetIntentInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetIntentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetIntentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetIntentInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntentVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntentVersions(ctx context.Context, params *lexmodelbuildingservice.GetIntentVersionsInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetIntentVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntentVersions")
	}

	var r0 *lexmodelbuildingservice.GetIntentVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetIntentVersionsInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetIntentVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetIntentVersionsInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetIntentVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetIntentVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetIntentVersionsInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntents(ctx context.Context, params *lexmodelbuildingservice.GetIntentsInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetIntentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntents")
	}

	var r0 *lexmodelbuildingservice.GetIntentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetIntentsInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetIntentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetIntentsInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetIntentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetIntentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetIntentsInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMigration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMigration(ctx context.Context, params *lexmodelbuildingservice.GetMigrationInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetMigrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMigration")
	}

	var r0 *lexmodelbuildingservice.GetMigrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetMigrationInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetMigrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetMigrationInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetMigrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetMigrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetMigrationInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMigrations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMigrations(ctx context.Context, params *lexmodelbuildingservice.GetMigrationsInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetMigrationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMigrations")
	}

	var r0 *lexmodelbuildingservice.GetMigrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetMigrationsInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetMigrationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetMigrationsInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetMigrationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetMigrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetMigrationsInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSlotType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSlotType(ctx context.Context, params *lexmodelbuildingservice.GetSlotTypeInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetSlotTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSlotType")
	}

	var r0 *lexmodelbuildingservice.GetSlotTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetSlotTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetSlotTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetSlotTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSlotTypeVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSlotTypeVersions(ctx context.Context, params *lexmodelbuildingservice.GetSlotTypeVersionsInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSlotTypeVersions")
	}

	var r0 *lexmodelbuildingservice.GetSlotTypeVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetSlotTypeVersionsInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetSlotTypeVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetSlotTypeVersionsInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetSlotTypeVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetSlotTypeVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetSlotTypeVersionsInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSlotTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSlotTypes(ctx context.Context, params *lexmodelbuildingservice.GetSlotTypesInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetSlotTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSlotTypes")
	}

	var r0 *lexmodelbuildingservice.GetSlotTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetSlotTypesInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetSlotTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetSlotTypesInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetSlotTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetSlotTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetSlotTypesInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUtterancesView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUtterancesView(ctx context.Context, params *lexmodelbuildingservice.GetUtterancesViewInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetUtterancesViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUtterancesView")
	}

	var r0 *lexmodelbuildingservice.GetUtterancesViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetUtterancesViewInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.GetUtterancesViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.GetUtterancesViewInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.GetUtterancesViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.GetUtterancesViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.GetUtterancesViewInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *lexmodelbuildingservice.ListTagsForResourceInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *lexmodelbuildingservice.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.ListTagsForResourceInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.ListTagsForResourceInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.ListTagsForResourceInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() lexmodelbuildingservice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 lexmodelbuildingservice.Options
	if rf, ok := ret.Get(0).(func() lexmodelbuildingservice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(lexmodelbuildingservice.Options)
	}

	return r0
}

// PutBot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBot(ctx context.Context, params *lexmodelbuildingservice.PutBotInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.PutBotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBot")
	}

	var r0 *lexmodelbuildingservice.PutBotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.PutBotInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.PutBotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.PutBotInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.PutBotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.PutBotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.PutBotInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBotAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBotAlias(ctx context.Context, params *lexmodelbuildingservice.PutBotAliasInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.PutBotAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBotAlias")
	}

	var r0 *lexmodelbuildingservice.PutBotAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.PutBotAliasInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.PutBotAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.PutBotAliasInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.PutBotAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.PutBotAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.PutBotAliasInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutIntent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutIntent(ctx context.Context, params *lexmodelbuildingservice.PutIntentInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.PutIntentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutIntent")
	}

	var r0 *lexmodelbuildingservice.PutIntentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.PutIntentInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.PutIntentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.PutIntentInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.PutIntentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.PutIntentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.PutIntentInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSlotType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSlotType(ctx context.Context, params *lexmodelbuildingservice.PutSlotTypeInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.PutSlotTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSlotType")
	}

	var r0 *lexmodelbuildingservice.PutSlotTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.PutSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.PutSlotTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.PutSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.PutSlotTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.PutSlotTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.PutSlotTypeInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartImport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartImport(ctx context.Context, params *lexmodelbuildingservice.StartImportInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.StartImportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartImport")
	}

	var r0 *lexmodelbuildingservice.StartImportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.StartImportInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.StartImportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.StartImportInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.StartImportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.StartImportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.StartImportInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMigration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMigration(ctx context.Context, params *lexmodelbuildingservice.StartMigrationInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.StartMigrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMigration")
	}

	var r0 *lexmodelbuildingservice.StartMigrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.StartMigrationInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.StartMigrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.StartMigrationInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.StartMigrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.StartMigrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.StartMigrationInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *lexmodelbuildingservice.TagResourceInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *lexmodelbuildingservice.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.TagResourceInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.TagResourceInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.TagResourceInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *lexmodelbuildingservice.UntagResourceInput, optFns ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *lexmodelbuildingservice.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.UntagResourceInput, ...func(*lexmodelbuildingservice.Options)) (*lexmodelbuildingservice.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexmodelbuildingservice.UntagResourceInput, ...func(*lexmodelbuildingservice.Options)) *lexmodelbuildingservice.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexmodelbuildingservice.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexmodelbuildingservice.UntagResourceInput, ...func(*lexmodelbuildingservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
