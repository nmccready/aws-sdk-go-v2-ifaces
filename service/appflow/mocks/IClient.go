// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	appflow "github.com/aws/aws-sdk-go-v2/service/appflow"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelFlowExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelFlowExecutions(ctx context.Context, params *appflow.CancelFlowExecutionsInput, optFns ...func(*appflow.Options)) (*appflow.CancelFlowExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelFlowExecutions")
	}

	var r0 *appflow.CancelFlowExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.CancelFlowExecutionsInput, ...func(*appflow.Options)) (*appflow.CancelFlowExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.CancelFlowExecutionsInput, ...func(*appflow.Options)) *appflow.CancelFlowExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.CancelFlowExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.CancelFlowExecutionsInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectorProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnectorProfile(ctx context.Context, params *appflow.CreateConnectorProfileInput, optFns ...func(*appflow.Options)) (*appflow.CreateConnectorProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectorProfile")
	}

	var r0 *appflow.CreateConnectorProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.CreateConnectorProfileInput, ...func(*appflow.Options)) (*appflow.CreateConnectorProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.CreateConnectorProfileInput, ...func(*appflow.Options)) *appflow.CreateConnectorProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.CreateConnectorProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.CreateConnectorProfileInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFlow(ctx context.Context, params *appflow.CreateFlowInput, optFns ...func(*appflow.Options)) (*appflow.CreateFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlow")
	}

	var r0 *appflow.CreateFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.CreateFlowInput, ...func(*appflow.Options)) (*appflow.CreateFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.CreateFlowInput, ...func(*appflow.Options)) *appflow.CreateFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.CreateFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.CreateFlowInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectorProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnectorProfile(ctx context.Context, params *appflow.DeleteConnectorProfileInput, optFns ...func(*appflow.Options)) (*appflow.DeleteConnectorProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectorProfile")
	}

	var r0 *appflow.DeleteConnectorProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DeleteConnectorProfileInput, ...func(*appflow.Options)) (*appflow.DeleteConnectorProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DeleteConnectorProfileInput, ...func(*appflow.Options)) *appflow.DeleteConnectorProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.DeleteConnectorProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.DeleteConnectorProfileInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFlow(ctx context.Context, params *appflow.DeleteFlowInput, optFns ...func(*appflow.Options)) (*appflow.DeleteFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlow")
	}

	var r0 *appflow.DeleteFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DeleteFlowInput, ...func(*appflow.Options)) (*appflow.DeleteFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DeleteFlowInput, ...func(*appflow.Options)) *appflow.DeleteFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.DeleteFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.DeleteFlowInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnector(ctx context.Context, params *appflow.DescribeConnectorInput, optFns ...func(*appflow.Options)) (*appflow.DescribeConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnector")
	}

	var r0 *appflow.DescribeConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeConnectorInput, ...func(*appflow.Options)) (*appflow.DescribeConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeConnectorInput, ...func(*appflow.Options)) *appflow.DescribeConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.DescribeConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.DescribeConnectorInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectorEntity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnectorEntity(ctx context.Context, params *appflow.DescribeConnectorEntityInput, optFns ...func(*appflow.Options)) (*appflow.DescribeConnectorEntityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnectorEntity")
	}

	var r0 *appflow.DescribeConnectorEntityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeConnectorEntityInput, ...func(*appflow.Options)) (*appflow.DescribeConnectorEntityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeConnectorEntityInput, ...func(*appflow.Options)) *appflow.DescribeConnectorEntityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.DescribeConnectorEntityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.DescribeConnectorEntityInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectorProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnectorProfiles(ctx context.Context, params *appflow.DescribeConnectorProfilesInput, optFns ...func(*appflow.Options)) (*appflow.DescribeConnectorProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnectorProfiles")
	}

	var r0 *appflow.DescribeConnectorProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeConnectorProfilesInput, ...func(*appflow.Options)) (*appflow.DescribeConnectorProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeConnectorProfilesInput, ...func(*appflow.Options)) *appflow.DescribeConnectorProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.DescribeConnectorProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.DescribeConnectorProfilesInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnectors(ctx context.Context, params *appflow.DescribeConnectorsInput, optFns ...func(*appflow.Options)) (*appflow.DescribeConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnectors")
	}

	var r0 *appflow.DescribeConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeConnectorsInput, ...func(*appflow.Options)) (*appflow.DescribeConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeConnectorsInput, ...func(*appflow.Options)) *appflow.DescribeConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.DescribeConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.DescribeConnectorsInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFlow(ctx context.Context, params *appflow.DescribeFlowInput, optFns ...func(*appflow.Options)) (*appflow.DescribeFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFlow")
	}

	var r0 *appflow.DescribeFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeFlowInput, ...func(*appflow.Options)) (*appflow.DescribeFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeFlowInput, ...func(*appflow.Options)) *appflow.DescribeFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.DescribeFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.DescribeFlowInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFlowExecutionRecords provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFlowExecutionRecords(ctx context.Context, params *appflow.DescribeFlowExecutionRecordsInput, optFns ...func(*appflow.Options)) (*appflow.DescribeFlowExecutionRecordsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFlowExecutionRecords")
	}

	var r0 *appflow.DescribeFlowExecutionRecordsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeFlowExecutionRecordsInput, ...func(*appflow.Options)) (*appflow.DescribeFlowExecutionRecordsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.DescribeFlowExecutionRecordsInput, ...func(*appflow.Options)) *appflow.DescribeFlowExecutionRecordsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.DescribeFlowExecutionRecordsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.DescribeFlowExecutionRecordsInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectorEntities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectorEntities(ctx context.Context, params *appflow.ListConnectorEntitiesInput, optFns ...func(*appflow.Options)) (*appflow.ListConnectorEntitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectorEntities")
	}

	var r0 *appflow.ListConnectorEntitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ListConnectorEntitiesInput, ...func(*appflow.Options)) (*appflow.ListConnectorEntitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ListConnectorEntitiesInput, ...func(*appflow.Options)) *appflow.ListConnectorEntitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.ListConnectorEntitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.ListConnectorEntitiesInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectors(ctx context.Context, params *appflow.ListConnectorsInput, optFns ...func(*appflow.Options)) (*appflow.ListConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 *appflow.ListConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ListConnectorsInput, ...func(*appflow.Options)) (*appflow.ListConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ListConnectorsInput, ...func(*appflow.Options)) *appflow.ListConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.ListConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.ListConnectorsInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFlows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFlows(ctx context.Context, params *appflow.ListFlowsInput, optFns ...func(*appflow.Options)) (*appflow.ListFlowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFlows")
	}

	var r0 *appflow.ListFlowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ListFlowsInput, ...func(*appflow.Options)) (*appflow.ListFlowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ListFlowsInput, ...func(*appflow.Options)) *appflow.ListFlowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.ListFlowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.ListFlowsInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *appflow.ListTagsForResourceInput, optFns ...func(*appflow.Options)) (*appflow.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *appflow.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ListTagsForResourceInput, ...func(*appflow.Options)) (*appflow.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ListTagsForResourceInput, ...func(*appflow.Options)) *appflow.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.ListTagsForResourceInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() appflow.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 appflow.Options
	if rf, ok := ret.Get(0).(func() appflow.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(appflow.Options)
	}

	return r0
}

// RegisterConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterConnector(ctx context.Context, params *appflow.RegisterConnectorInput, optFns ...func(*appflow.Options)) (*appflow.RegisterConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterConnector")
	}

	var r0 *appflow.RegisterConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.RegisterConnectorInput, ...func(*appflow.Options)) (*appflow.RegisterConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.RegisterConnectorInput, ...func(*appflow.Options)) *appflow.RegisterConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.RegisterConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.RegisterConnectorInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetConnectorMetadataCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetConnectorMetadataCache(ctx context.Context, params *appflow.ResetConnectorMetadataCacheInput, optFns ...func(*appflow.Options)) (*appflow.ResetConnectorMetadataCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetConnectorMetadataCache")
	}

	var r0 *appflow.ResetConnectorMetadataCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ResetConnectorMetadataCacheInput, ...func(*appflow.Options)) (*appflow.ResetConnectorMetadataCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.ResetConnectorMetadataCacheInput, ...func(*appflow.Options)) *appflow.ResetConnectorMetadataCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.ResetConnectorMetadataCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.ResetConnectorMetadataCacheInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartFlow(ctx context.Context, params *appflow.StartFlowInput, optFns ...func(*appflow.Options)) (*appflow.StartFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartFlow")
	}

	var r0 *appflow.StartFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.StartFlowInput, ...func(*appflow.Options)) (*appflow.StartFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.StartFlowInput, ...func(*appflow.Options)) *appflow.StartFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.StartFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.StartFlowInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopFlow(ctx context.Context, params *appflow.StopFlowInput, optFns ...func(*appflow.Options)) (*appflow.StopFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopFlow")
	}

	var r0 *appflow.StopFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.StopFlowInput, ...func(*appflow.Options)) (*appflow.StopFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.StopFlowInput, ...func(*appflow.Options)) *appflow.StopFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.StopFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.StopFlowInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *appflow.TagResourceInput, optFns ...func(*appflow.Options)) (*appflow.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *appflow.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.TagResourceInput, ...func(*appflow.Options)) (*appflow.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.TagResourceInput, ...func(*appflow.Options)) *appflow.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.TagResourceInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnregisterConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnregisterConnector(ctx context.Context, params *appflow.UnregisterConnectorInput, optFns ...func(*appflow.Options)) (*appflow.UnregisterConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnregisterConnector")
	}

	var r0 *appflow.UnregisterConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UnregisterConnectorInput, ...func(*appflow.Options)) (*appflow.UnregisterConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UnregisterConnectorInput, ...func(*appflow.Options)) *appflow.UnregisterConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.UnregisterConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.UnregisterConnectorInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *appflow.UntagResourceInput, optFns ...func(*appflow.Options)) (*appflow.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *appflow.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UntagResourceInput, ...func(*appflow.Options)) (*appflow.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UntagResourceInput, ...func(*appflow.Options)) *appflow.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.UntagResourceInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectorProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnectorProfile(ctx context.Context, params *appflow.UpdateConnectorProfileInput, optFns ...func(*appflow.Options)) (*appflow.UpdateConnectorProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectorProfile")
	}

	var r0 *appflow.UpdateConnectorProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UpdateConnectorProfileInput, ...func(*appflow.Options)) (*appflow.UpdateConnectorProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UpdateConnectorProfileInput, ...func(*appflow.Options)) *appflow.UpdateConnectorProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.UpdateConnectorProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.UpdateConnectorProfileInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectorRegistration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnectorRegistration(ctx context.Context, params *appflow.UpdateConnectorRegistrationInput, optFns ...func(*appflow.Options)) (*appflow.UpdateConnectorRegistrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectorRegistration")
	}

	var r0 *appflow.UpdateConnectorRegistrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UpdateConnectorRegistrationInput, ...func(*appflow.Options)) (*appflow.UpdateConnectorRegistrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UpdateConnectorRegistrationInput, ...func(*appflow.Options)) *appflow.UpdateConnectorRegistrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.UpdateConnectorRegistrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.UpdateConnectorRegistrationInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFlow(ctx context.Context, params *appflow.UpdateFlowInput, optFns ...func(*appflow.Options)) (*appflow.UpdateFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFlow")
	}

	var r0 *appflow.UpdateFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UpdateFlowInput, ...func(*appflow.Options)) (*appflow.UpdateFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appflow.UpdateFlowInput, ...func(*appflow.Options)) *appflow.UpdateFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appflow.UpdateFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appflow.UpdateFlowInput, ...func(*appflow.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
