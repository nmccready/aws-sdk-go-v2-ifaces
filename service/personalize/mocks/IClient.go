// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	personalize "github.com/aws/aws-sdk-go-v2/service/personalize"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateBatchInferenceJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBatchInferenceJob(ctx context.Context, params *personalize.CreateBatchInferenceJobInput, optFns ...func(*personalize.Options)) (*personalize.CreateBatchInferenceJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatchInferenceJob")
	}

	var r0 *personalize.CreateBatchInferenceJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateBatchInferenceJobInput, ...func(*personalize.Options)) (*personalize.CreateBatchInferenceJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateBatchInferenceJobInput, ...func(*personalize.Options)) *personalize.CreateBatchInferenceJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateBatchInferenceJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateBatchInferenceJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBatchSegmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBatchSegmentJob(ctx context.Context, params *personalize.CreateBatchSegmentJobInput, optFns ...func(*personalize.Options)) (*personalize.CreateBatchSegmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatchSegmentJob")
	}

	var r0 *personalize.CreateBatchSegmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateBatchSegmentJobInput, ...func(*personalize.Options)) (*personalize.CreateBatchSegmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateBatchSegmentJobInput, ...func(*personalize.Options)) *personalize.CreateBatchSegmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateBatchSegmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateBatchSegmentJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCampaign(ctx context.Context, params *personalize.CreateCampaignInput, optFns ...func(*personalize.Options)) (*personalize.CreateCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCampaign")
	}

	var r0 *personalize.CreateCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateCampaignInput, ...func(*personalize.Options)) (*personalize.CreateCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateCampaignInput, ...func(*personalize.Options)) *personalize.CreateCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateCampaignInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataDeletionJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataDeletionJob(ctx context.Context, params *personalize.CreateDataDeletionJobInput, optFns ...func(*personalize.Options)) (*personalize.CreateDataDeletionJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataDeletionJob")
	}

	var r0 *personalize.CreateDataDeletionJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDataDeletionJobInput, ...func(*personalize.Options)) (*personalize.CreateDataDeletionJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDataDeletionJobInput, ...func(*personalize.Options)) *personalize.CreateDataDeletionJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateDataDeletionJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateDataDeletionJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataset(ctx context.Context, params *personalize.CreateDatasetInput, optFns ...func(*personalize.Options)) (*personalize.CreateDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 *personalize.CreateDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDatasetInput, ...func(*personalize.Options)) (*personalize.CreateDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDatasetInput, ...func(*personalize.Options)) *personalize.CreateDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateDatasetInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatasetExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDatasetExportJob(ctx context.Context, params *personalize.CreateDatasetExportJobInput, optFns ...func(*personalize.Options)) (*personalize.CreateDatasetExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetExportJob")
	}

	var r0 *personalize.CreateDatasetExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDatasetExportJobInput, ...func(*personalize.Options)) (*personalize.CreateDatasetExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDatasetExportJobInput, ...func(*personalize.Options)) *personalize.CreateDatasetExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateDatasetExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateDatasetExportJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatasetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDatasetGroup(ctx context.Context, params *personalize.CreateDatasetGroupInput, optFns ...func(*personalize.Options)) (*personalize.CreateDatasetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetGroup")
	}

	var r0 *personalize.CreateDatasetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDatasetGroupInput, ...func(*personalize.Options)) (*personalize.CreateDatasetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDatasetGroupInput, ...func(*personalize.Options)) *personalize.CreateDatasetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateDatasetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateDatasetGroupInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatasetImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDatasetImportJob(ctx context.Context, params *personalize.CreateDatasetImportJobInput, optFns ...func(*personalize.Options)) (*personalize.CreateDatasetImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatasetImportJob")
	}

	var r0 *personalize.CreateDatasetImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDatasetImportJobInput, ...func(*personalize.Options)) (*personalize.CreateDatasetImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateDatasetImportJobInput, ...func(*personalize.Options)) *personalize.CreateDatasetImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateDatasetImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateDatasetImportJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventTracker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventTracker(ctx context.Context, params *personalize.CreateEventTrackerInput, optFns ...func(*personalize.Options)) (*personalize.CreateEventTrackerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventTracker")
	}

	var r0 *personalize.CreateEventTrackerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateEventTrackerInput, ...func(*personalize.Options)) (*personalize.CreateEventTrackerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateEventTrackerInput, ...func(*personalize.Options)) *personalize.CreateEventTrackerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateEventTrackerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateEventTrackerInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFilter(ctx context.Context, params *personalize.CreateFilterInput, optFns ...func(*personalize.Options)) (*personalize.CreateFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFilter")
	}

	var r0 *personalize.CreateFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateFilterInput, ...func(*personalize.Options)) (*personalize.CreateFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateFilterInput, ...func(*personalize.Options)) *personalize.CreateFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateFilterInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMetricAttribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMetricAttribution(ctx context.Context, params *personalize.CreateMetricAttributionInput, optFns ...func(*personalize.Options)) (*personalize.CreateMetricAttributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMetricAttribution")
	}

	var r0 *personalize.CreateMetricAttributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateMetricAttributionInput, ...func(*personalize.Options)) (*personalize.CreateMetricAttributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateMetricAttributionInput, ...func(*personalize.Options)) *personalize.CreateMetricAttributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateMetricAttributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateMetricAttributionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRecommender provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRecommender(ctx context.Context, params *personalize.CreateRecommenderInput, optFns ...func(*personalize.Options)) (*personalize.CreateRecommenderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecommender")
	}

	var r0 *personalize.CreateRecommenderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateRecommenderInput, ...func(*personalize.Options)) (*personalize.CreateRecommenderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateRecommenderInput, ...func(*personalize.Options)) *personalize.CreateRecommenderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateRecommenderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateRecommenderInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSchema(ctx context.Context, params *personalize.CreateSchemaInput, optFns ...func(*personalize.Options)) (*personalize.CreateSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchema")
	}

	var r0 *personalize.CreateSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateSchemaInput, ...func(*personalize.Options)) (*personalize.CreateSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateSchemaInput, ...func(*personalize.Options)) *personalize.CreateSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateSchemaInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSolution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSolution(ctx context.Context, params *personalize.CreateSolutionInput, optFns ...func(*personalize.Options)) (*personalize.CreateSolutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSolution")
	}

	var r0 *personalize.CreateSolutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateSolutionInput, ...func(*personalize.Options)) (*personalize.CreateSolutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateSolutionInput, ...func(*personalize.Options)) *personalize.CreateSolutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateSolutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateSolutionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSolutionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSolutionVersion(ctx context.Context, params *personalize.CreateSolutionVersionInput, optFns ...func(*personalize.Options)) (*personalize.CreateSolutionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSolutionVersion")
	}

	var r0 *personalize.CreateSolutionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateSolutionVersionInput, ...func(*personalize.Options)) (*personalize.CreateSolutionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.CreateSolutionVersionInput, ...func(*personalize.Options)) *personalize.CreateSolutionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.CreateSolutionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.CreateSolutionVersionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCampaign(ctx context.Context, params *personalize.DeleteCampaignInput, optFns ...func(*personalize.Options)) (*personalize.DeleteCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCampaign")
	}

	var r0 *personalize.DeleteCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteCampaignInput, ...func(*personalize.Options)) (*personalize.DeleteCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteCampaignInput, ...func(*personalize.Options)) *personalize.DeleteCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteCampaignInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataset(ctx context.Context, params *personalize.DeleteDatasetInput, optFns ...func(*personalize.Options)) (*personalize.DeleteDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 *personalize.DeleteDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteDatasetInput, ...func(*personalize.Options)) (*personalize.DeleteDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteDatasetInput, ...func(*personalize.Options)) *personalize.DeleteDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteDatasetInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDatasetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDatasetGroup(ctx context.Context, params *personalize.DeleteDatasetGroupInput, optFns ...func(*personalize.Options)) (*personalize.DeleteDatasetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatasetGroup")
	}

	var r0 *personalize.DeleteDatasetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteDatasetGroupInput, ...func(*personalize.Options)) (*personalize.DeleteDatasetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteDatasetGroupInput, ...func(*personalize.Options)) *personalize.DeleteDatasetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteDatasetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteDatasetGroupInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventTracker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventTracker(ctx context.Context, params *personalize.DeleteEventTrackerInput, optFns ...func(*personalize.Options)) (*personalize.DeleteEventTrackerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventTracker")
	}

	var r0 *personalize.DeleteEventTrackerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteEventTrackerInput, ...func(*personalize.Options)) (*personalize.DeleteEventTrackerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteEventTrackerInput, ...func(*personalize.Options)) *personalize.DeleteEventTrackerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteEventTrackerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteEventTrackerInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFilter(ctx context.Context, params *personalize.DeleteFilterInput, optFns ...func(*personalize.Options)) (*personalize.DeleteFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilter")
	}

	var r0 *personalize.DeleteFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteFilterInput, ...func(*personalize.Options)) (*personalize.DeleteFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteFilterInput, ...func(*personalize.Options)) *personalize.DeleteFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteFilterInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMetricAttribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMetricAttribution(ctx context.Context, params *personalize.DeleteMetricAttributionInput, optFns ...func(*personalize.Options)) (*personalize.DeleteMetricAttributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMetricAttribution")
	}

	var r0 *personalize.DeleteMetricAttributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteMetricAttributionInput, ...func(*personalize.Options)) (*personalize.DeleteMetricAttributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteMetricAttributionInput, ...func(*personalize.Options)) *personalize.DeleteMetricAttributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteMetricAttributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteMetricAttributionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecommender provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRecommender(ctx context.Context, params *personalize.DeleteRecommenderInput, optFns ...func(*personalize.Options)) (*personalize.DeleteRecommenderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecommender")
	}

	var r0 *personalize.DeleteRecommenderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteRecommenderInput, ...func(*personalize.Options)) (*personalize.DeleteRecommenderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteRecommenderInput, ...func(*personalize.Options)) *personalize.DeleteRecommenderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteRecommenderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteRecommenderInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSchema(ctx context.Context, params *personalize.DeleteSchemaInput, optFns ...func(*personalize.Options)) (*personalize.DeleteSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchema")
	}

	var r0 *personalize.DeleteSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteSchemaInput, ...func(*personalize.Options)) (*personalize.DeleteSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteSchemaInput, ...func(*personalize.Options)) *personalize.DeleteSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteSchemaInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSolution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSolution(ctx context.Context, params *personalize.DeleteSolutionInput, optFns ...func(*personalize.Options)) (*personalize.DeleteSolutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSolution")
	}

	var r0 *personalize.DeleteSolutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteSolutionInput, ...func(*personalize.Options)) (*personalize.DeleteSolutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DeleteSolutionInput, ...func(*personalize.Options)) *personalize.DeleteSolutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DeleteSolutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DeleteSolutionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAlgorithm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAlgorithm(ctx context.Context, params *personalize.DescribeAlgorithmInput, optFns ...func(*personalize.Options)) (*personalize.DescribeAlgorithmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAlgorithm")
	}

	var r0 *personalize.DescribeAlgorithmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeAlgorithmInput, ...func(*personalize.Options)) (*personalize.DescribeAlgorithmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeAlgorithmInput, ...func(*personalize.Options)) *personalize.DescribeAlgorithmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeAlgorithmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeAlgorithmInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBatchInferenceJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBatchInferenceJob(ctx context.Context, params *personalize.DescribeBatchInferenceJobInput, optFns ...func(*personalize.Options)) (*personalize.DescribeBatchInferenceJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBatchInferenceJob")
	}

	var r0 *personalize.DescribeBatchInferenceJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeBatchInferenceJobInput, ...func(*personalize.Options)) (*personalize.DescribeBatchInferenceJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeBatchInferenceJobInput, ...func(*personalize.Options)) *personalize.DescribeBatchInferenceJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeBatchInferenceJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeBatchInferenceJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBatchSegmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBatchSegmentJob(ctx context.Context, params *personalize.DescribeBatchSegmentJobInput, optFns ...func(*personalize.Options)) (*personalize.DescribeBatchSegmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBatchSegmentJob")
	}

	var r0 *personalize.DescribeBatchSegmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeBatchSegmentJobInput, ...func(*personalize.Options)) (*personalize.DescribeBatchSegmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeBatchSegmentJobInput, ...func(*personalize.Options)) *personalize.DescribeBatchSegmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeBatchSegmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeBatchSegmentJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCampaign(ctx context.Context, params *personalize.DescribeCampaignInput, optFns ...func(*personalize.Options)) (*personalize.DescribeCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCampaign")
	}

	var r0 *personalize.DescribeCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeCampaignInput, ...func(*personalize.Options)) (*personalize.DescribeCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeCampaignInput, ...func(*personalize.Options)) *personalize.DescribeCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeCampaignInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataDeletionJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataDeletionJob(ctx context.Context, params *personalize.DescribeDataDeletionJobInput, optFns ...func(*personalize.Options)) (*personalize.DescribeDataDeletionJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataDeletionJob")
	}

	var r0 *personalize.DescribeDataDeletionJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDataDeletionJobInput, ...func(*personalize.Options)) (*personalize.DescribeDataDeletionJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDataDeletionJobInput, ...func(*personalize.Options)) *personalize.DescribeDataDeletionJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeDataDeletionJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeDataDeletionJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataset(ctx context.Context, params *personalize.DescribeDatasetInput, optFns ...func(*personalize.Options)) (*personalize.DescribeDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataset")
	}

	var r0 *personalize.DescribeDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDatasetInput, ...func(*personalize.Options)) (*personalize.DescribeDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDatasetInput, ...func(*personalize.Options)) *personalize.DescribeDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeDatasetInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDatasetExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDatasetExportJob(ctx context.Context, params *personalize.DescribeDatasetExportJobInput, optFns ...func(*personalize.Options)) (*personalize.DescribeDatasetExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDatasetExportJob")
	}

	var r0 *personalize.DescribeDatasetExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDatasetExportJobInput, ...func(*personalize.Options)) (*personalize.DescribeDatasetExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDatasetExportJobInput, ...func(*personalize.Options)) *personalize.DescribeDatasetExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeDatasetExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeDatasetExportJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDatasetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDatasetGroup(ctx context.Context, params *personalize.DescribeDatasetGroupInput, optFns ...func(*personalize.Options)) (*personalize.DescribeDatasetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDatasetGroup")
	}

	var r0 *personalize.DescribeDatasetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDatasetGroupInput, ...func(*personalize.Options)) (*personalize.DescribeDatasetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDatasetGroupInput, ...func(*personalize.Options)) *personalize.DescribeDatasetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeDatasetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeDatasetGroupInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDatasetImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDatasetImportJob(ctx context.Context, params *personalize.DescribeDatasetImportJobInput, optFns ...func(*personalize.Options)) (*personalize.DescribeDatasetImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDatasetImportJob")
	}

	var r0 *personalize.DescribeDatasetImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDatasetImportJobInput, ...func(*personalize.Options)) (*personalize.DescribeDatasetImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeDatasetImportJobInput, ...func(*personalize.Options)) *personalize.DescribeDatasetImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeDatasetImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeDatasetImportJobInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventTracker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventTracker(ctx context.Context, params *personalize.DescribeEventTrackerInput, optFns ...func(*personalize.Options)) (*personalize.DescribeEventTrackerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventTracker")
	}

	var r0 *personalize.DescribeEventTrackerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeEventTrackerInput, ...func(*personalize.Options)) (*personalize.DescribeEventTrackerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeEventTrackerInput, ...func(*personalize.Options)) *personalize.DescribeEventTrackerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeEventTrackerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeEventTrackerInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFeatureTransformation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFeatureTransformation(ctx context.Context, params *personalize.DescribeFeatureTransformationInput, optFns ...func(*personalize.Options)) (*personalize.DescribeFeatureTransformationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFeatureTransformation")
	}

	var r0 *personalize.DescribeFeatureTransformationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeFeatureTransformationInput, ...func(*personalize.Options)) (*personalize.DescribeFeatureTransformationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeFeatureTransformationInput, ...func(*personalize.Options)) *personalize.DescribeFeatureTransformationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeFeatureTransformationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeFeatureTransformationInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFilter(ctx context.Context, params *personalize.DescribeFilterInput, optFns ...func(*personalize.Options)) (*personalize.DescribeFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFilter")
	}

	var r0 *personalize.DescribeFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeFilterInput, ...func(*personalize.Options)) (*personalize.DescribeFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeFilterInput, ...func(*personalize.Options)) *personalize.DescribeFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeFilterInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetricAttribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMetricAttribution(ctx context.Context, params *personalize.DescribeMetricAttributionInput, optFns ...func(*personalize.Options)) (*personalize.DescribeMetricAttributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMetricAttribution")
	}

	var r0 *personalize.DescribeMetricAttributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeMetricAttributionInput, ...func(*personalize.Options)) (*personalize.DescribeMetricAttributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeMetricAttributionInput, ...func(*personalize.Options)) *personalize.DescribeMetricAttributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeMetricAttributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeMetricAttributionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRecipe provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRecipe(ctx context.Context, params *personalize.DescribeRecipeInput, optFns ...func(*personalize.Options)) (*personalize.DescribeRecipeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRecipe")
	}

	var r0 *personalize.DescribeRecipeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeRecipeInput, ...func(*personalize.Options)) (*personalize.DescribeRecipeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeRecipeInput, ...func(*personalize.Options)) *personalize.DescribeRecipeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeRecipeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeRecipeInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRecommender provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRecommender(ctx context.Context, params *personalize.DescribeRecommenderInput, optFns ...func(*personalize.Options)) (*personalize.DescribeRecommenderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRecommender")
	}

	var r0 *personalize.DescribeRecommenderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeRecommenderInput, ...func(*personalize.Options)) (*personalize.DescribeRecommenderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeRecommenderInput, ...func(*personalize.Options)) *personalize.DescribeRecommenderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeRecommenderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeRecommenderInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSchema(ctx context.Context, params *personalize.DescribeSchemaInput, optFns ...func(*personalize.Options)) (*personalize.DescribeSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSchema")
	}

	var r0 *personalize.DescribeSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeSchemaInput, ...func(*personalize.Options)) (*personalize.DescribeSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeSchemaInput, ...func(*personalize.Options)) *personalize.DescribeSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeSchemaInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSolution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSolution(ctx context.Context, params *personalize.DescribeSolutionInput, optFns ...func(*personalize.Options)) (*personalize.DescribeSolutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSolution")
	}

	var r0 *personalize.DescribeSolutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeSolutionInput, ...func(*personalize.Options)) (*personalize.DescribeSolutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeSolutionInput, ...func(*personalize.Options)) *personalize.DescribeSolutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeSolutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeSolutionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSolutionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSolutionVersion(ctx context.Context, params *personalize.DescribeSolutionVersionInput, optFns ...func(*personalize.Options)) (*personalize.DescribeSolutionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSolutionVersion")
	}

	var r0 *personalize.DescribeSolutionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeSolutionVersionInput, ...func(*personalize.Options)) (*personalize.DescribeSolutionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.DescribeSolutionVersionInput, ...func(*personalize.Options)) *personalize.DescribeSolutionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.DescribeSolutionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.DescribeSolutionVersionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolutionMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolutionMetrics(ctx context.Context, params *personalize.GetSolutionMetricsInput, optFns ...func(*personalize.Options)) (*personalize.GetSolutionMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolutionMetrics")
	}

	var r0 *personalize.GetSolutionMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.GetSolutionMetricsInput, ...func(*personalize.Options)) (*personalize.GetSolutionMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.GetSolutionMetricsInput, ...func(*personalize.Options)) *personalize.GetSolutionMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.GetSolutionMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.GetSolutionMetricsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBatchInferenceJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBatchInferenceJobs(ctx context.Context, params *personalize.ListBatchInferenceJobsInput, optFns ...func(*personalize.Options)) (*personalize.ListBatchInferenceJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBatchInferenceJobs")
	}

	var r0 *personalize.ListBatchInferenceJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListBatchInferenceJobsInput, ...func(*personalize.Options)) (*personalize.ListBatchInferenceJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListBatchInferenceJobsInput, ...func(*personalize.Options)) *personalize.ListBatchInferenceJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListBatchInferenceJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListBatchInferenceJobsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBatchSegmentJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBatchSegmentJobs(ctx context.Context, params *personalize.ListBatchSegmentJobsInput, optFns ...func(*personalize.Options)) (*personalize.ListBatchSegmentJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBatchSegmentJobs")
	}

	var r0 *personalize.ListBatchSegmentJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListBatchSegmentJobsInput, ...func(*personalize.Options)) (*personalize.ListBatchSegmentJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListBatchSegmentJobsInput, ...func(*personalize.Options)) *personalize.ListBatchSegmentJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListBatchSegmentJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListBatchSegmentJobsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCampaigns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCampaigns(ctx context.Context, params *personalize.ListCampaignsInput, optFns ...func(*personalize.Options)) (*personalize.ListCampaignsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCampaigns")
	}

	var r0 *personalize.ListCampaignsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListCampaignsInput, ...func(*personalize.Options)) (*personalize.ListCampaignsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListCampaignsInput, ...func(*personalize.Options)) *personalize.ListCampaignsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListCampaignsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListCampaignsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataDeletionJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataDeletionJobs(ctx context.Context, params *personalize.ListDataDeletionJobsInput, optFns ...func(*personalize.Options)) (*personalize.ListDataDeletionJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataDeletionJobs")
	}

	var r0 *personalize.ListDataDeletionJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDataDeletionJobsInput, ...func(*personalize.Options)) (*personalize.ListDataDeletionJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDataDeletionJobsInput, ...func(*personalize.Options)) *personalize.ListDataDeletionJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListDataDeletionJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListDataDeletionJobsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasetExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasetExportJobs(ctx context.Context, params *personalize.ListDatasetExportJobsInput, optFns ...func(*personalize.Options)) (*personalize.ListDatasetExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasetExportJobs")
	}

	var r0 *personalize.ListDatasetExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDatasetExportJobsInput, ...func(*personalize.Options)) (*personalize.ListDatasetExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDatasetExportJobsInput, ...func(*personalize.Options)) *personalize.ListDatasetExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListDatasetExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListDatasetExportJobsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasetGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasetGroups(ctx context.Context, params *personalize.ListDatasetGroupsInput, optFns ...func(*personalize.Options)) (*personalize.ListDatasetGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasetGroups")
	}

	var r0 *personalize.ListDatasetGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDatasetGroupsInput, ...func(*personalize.Options)) (*personalize.ListDatasetGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDatasetGroupsInput, ...func(*personalize.Options)) *personalize.ListDatasetGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListDatasetGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListDatasetGroupsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasetImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasetImportJobs(ctx context.Context, params *personalize.ListDatasetImportJobsInput, optFns ...func(*personalize.Options)) (*personalize.ListDatasetImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasetImportJobs")
	}

	var r0 *personalize.ListDatasetImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDatasetImportJobsInput, ...func(*personalize.Options)) (*personalize.ListDatasetImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDatasetImportJobsInput, ...func(*personalize.Options)) *personalize.ListDatasetImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListDatasetImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListDatasetImportJobsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasets(ctx context.Context, params *personalize.ListDatasetsInput, optFns ...func(*personalize.Options)) (*personalize.ListDatasetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasets")
	}

	var r0 *personalize.ListDatasetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDatasetsInput, ...func(*personalize.Options)) (*personalize.ListDatasetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListDatasetsInput, ...func(*personalize.Options)) *personalize.ListDatasetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListDatasetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListDatasetsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventTrackers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEventTrackers(ctx context.Context, params *personalize.ListEventTrackersInput, optFns ...func(*personalize.Options)) (*personalize.ListEventTrackersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEventTrackers")
	}

	var r0 *personalize.ListEventTrackersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListEventTrackersInput, ...func(*personalize.Options)) (*personalize.ListEventTrackersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListEventTrackersInput, ...func(*personalize.Options)) *personalize.ListEventTrackersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListEventTrackersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListEventTrackersInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFilters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFilters(ctx context.Context, params *personalize.ListFiltersInput, optFns ...func(*personalize.Options)) (*personalize.ListFiltersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFilters")
	}

	var r0 *personalize.ListFiltersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListFiltersInput, ...func(*personalize.Options)) (*personalize.ListFiltersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListFiltersInput, ...func(*personalize.Options)) *personalize.ListFiltersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListFiltersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListFiltersInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetricAttributionMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMetricAttributionMetrics(ctx context.Context, params *personalize.ListMetricAttributionMetricsInput, optFns ...func(*personalize.Options)) (*personalize.ListMetricAttributionMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricAttributionMetrics")
	}

	var r0 *personalize.ListMetricAttributionMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListMetricAttributionMetricsInput, ...func(*personalize.Options)) (*personalize.ListMetricAttributionMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListMetricAttributionMetricsInput, ...func(*personalize.Options)) *personalize.ListMetricAttributionMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListMetricAttributionMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListMetricAttributionMetricsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetricAttributions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMetricAttributions(ctx context.Context, params *personalize.ListMetricAttributionsInput, optFns ...func(*personalize.Options)) (*personalize.ListMetricAttributionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricAttributions")
	}

	var r0 *personalize.ListMetricAttributionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListMetricAttributionsInput, ...func(*personalize.Options)) (*personalize.ListMetricAttributionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListMetricAttributionsInput, ...func(*personalize.Options)) *personalize.ListMetricAttributionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListMetricAttributionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListMetricAttributionsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecipes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecipes(ctx context.Context, params *personalize.ListRecipesInput, optFns ...func(*personalize.Options)) (*personalize.ListRecipesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecipes")
	}

	var r0 *personalize.ListRecipesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListRecipesInput, ...func(*personalize.Options)) (*personalize.ListRecipesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListRecipesInput, ...func(*personalize.Options)) *personalize.ListRecipesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListRecipesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListRecipesInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecommenders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecommenders(ctx context.Context, params *personalize.ListRecommendersInput, optFns ...func(*personalize.Options)) (*personalize.ListRecommendersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecommenders")
	}

	var r0 *personalize.ListRecommendersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListRecommendersInput, ...func(*personalize.Options)) (*personalize.ListRecommendersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListRecommendersInput, ...func(*personalize.Options)) *personalize.ListRecommendersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListRecommendersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListRecommendersInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchemas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSchemas(ctx context.Context, params *personalize.ListSchemasInput, optFns ...func(*personalize.Options)) (*personalize.ListSchemasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemas")
	}

	var r0 *personalize.ListSchemasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListSchemasInput, ...func(*personalize.Options)) (*personalize.ListSchemasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListSchemasInput, ...func(*personalize.Options)) *personalize.ListSchemasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListSchemasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListSchemasInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSolutionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSolutionVersions(ctx context.Context, params *personalize.ListSolutionVersionsInput, optFns ...func(*personalize.Options)) (*personalize.ListSolutionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSolutionVersions")
	}

	var r0 *personalize.ListSolutionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListSolutionVersionsInput, ...func(*personalize.Options)) (*personalize.ListSolutionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListSolutionVersionsInput, ...func(*personalize.Options)) *personalize.ListSolutionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListSolutionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListSolutionVersionsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSolutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSolutions(ctx context.Context, params *personalize.ListSolutionsInput, optFns ...func(*personalize.Options)) (*personalize.ListSolutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSolutions")
	}

	var r0 *personalize.ListSolutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListSolutionsInput, ...func(*personalize.Options)) (*personalize.ListSolutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListSolutionsInput, ...func(*personalize.Options)) *personalize.ListSolutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListSolutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListSolutionsInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *personalize.ListTagsForResourceInput, optFns ...func(*personalize.Options)) (*personalize.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *personalize.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListTagsForResourceInput, ...func(*personalize.Options)) (*personalize.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.ListTagsForResourceInput, ...func(*personalize.Options)) *personalize.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.ListTagsForResourceInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() personalize.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 personalize.Options
	if rf, ok := ret.Get(0).(func() personalize.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(personalize.Options)
	}

	return r0
}

// StartRecommender provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRecommender(ctx context.Context, params *personalize.StartRecommenderInput, optFns ...func(*personalize.Options)) (*personalize.StartRecommenderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRecommender")
	}

	var r0 *personalize.StartRecommenderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.StartRecommenderInput, ...func(*personalize.Options)) (*personalize.StartRecommenderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.StartRecommenderInput, ...func(*personalize.Options)) *personalize.StartRecommenderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.StartRecommenderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.StartRecommenderInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopRecommender provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopRecommender(ctx context.Context, params *personalize.StopRecommenderInput, optFns ...func(*personalize.Options)) (*personalize.StopRecommenderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopRecommender")
	}

	var r0 *personalize.StopRecommenderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.StopRecommenderInput, ...func(*personalize.Options)) (*personalize.StopRecommenderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.StopRecommenderInput, ...func(*personalize.Options)) *personalize.StopRecommenderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.StopRecommenderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.StopRecommenderInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopSolutionVersionCreation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopSolutionVersionCreation(ctx context.Context, params *personalize.StopSolutionVersionCreationInput, optFns ...func(*personalize.Options)) (*personalize.StopSolutionVersionCreationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopSolutionVersionCreation")
	}

	var r0 *personalize.StopSolutionVersionCreationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.StopSolutionVersionCreationInput, ...func(*personalize.Options)) (*personalize.StopSolutionVersionCreationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.StopSolutionVersionCreationInput, ...func(*personalize.Options)) *personalize.StopSolutionVersionCreationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.StopSolutionVersionCreationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.StopSolutionVersionCreationInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *personalize.TagResourceInput, optFns ...func(*personalize.Options)) (*personalize.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *personalize.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.TagResourceInput, ...func(*personalize.Options)) (*personalize.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.TagResourceInput, ...func(*personalize.Options)) *personalize.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.TagResourceInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *personalize.UntagResourceInput, optFns ...func(*personalize.Options)) (*personalize.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *personalize.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UntagResourceInput, ...func(*personalize.Options)) (*personalize.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UntagResourceInput, ...func(*personalize.Options)) *personalize.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.UntagResourceInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCampaign provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCampaign(ctx context.Context, params *personalize.UpdateCampaignInput, optFns ...func(*personalize.Options)) (*personalize.UpdateCampaignOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCampaign")
	}

	var r0 *personalize.UpdateCampaignOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateCampaignInput, ...func(*personalize.Options)) (*personalize.UpdateCampaignOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateCampaignInput, ...func(*personalize.Options)) *personalize.UpdateCampaignOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.UpdateCampaignOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.UpdateCampaignInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataset(ctx context.Context, params *personalize.UpdateDatasetInput, optFns ...func(*personalize.Options)) (*personalize.UpdateDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataset")
	}

	var r0 *personalize.UpdateDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateDatasetInput, ...func(*personalize.Options)) (*personalize.UpdateDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateDatasetInput, ...func(*personalize.Options)) *personalize.UpdateDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.UpdateDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.UpdateDatasetInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetricAttribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMetricAttribution(ctx context.Context, params *personalize.UpdateMetricAttributionInput, optFns ...func(*personalize.Options)) (*personalize.UpdateMetricAttributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetricAttribution")
	}

	var r0 *personalize.UpdateMetricAttributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateMetricAttributionInput, ...func(*personalize.Options)) (*personalize.UpdateMetricAttributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateMetricAttributionInput, ...func(*personalize.Options)) *personalize.UpdateMetricAttributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.UpdateMetricAttributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.UpdateMetricAttributionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecommender provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRecommender(ctx context.Context, params *personalize.UpdateRecommenderInput, optFns ...func(*personalize.Options)) (*personalize.UpdateRecommenderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecommender")
	}

	var r0 *personalize.UpdateRecommenderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateRecommenderInput, ...func(*personalize.Options)) (*personalize.UpdateRecommenderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateRecommenderInput, ...func(*personalize.Options)) *personalize.UpdateRecommenderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.UpdateRecommenderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.UpdateRecommenderInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSolution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSolution(ctx context.Context, params *personalize.UpdateSolutionInput, optFns ...func(*personalize.Options)) (*personalize.UpdateSolutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSolution")
	}

	var r0 *personalize.UpdateSolutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateSolutionInput, ...func(*personalize.Options)) (*personalize.UpdateSolutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalize.UpdateSolutionInput, ...func(*personalize.Options)) *personalize.UpdateSolutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalize.UpdateSolutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalize.UpdateSolutionInput, ...func(*personalize.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
