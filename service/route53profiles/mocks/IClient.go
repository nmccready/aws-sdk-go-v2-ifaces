// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	route53profiles "github.com/aws/aws-sdk-go-v2/service/route53profiles"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateProfile(ctx context.Context, params *route53profiles.AssociateProfileInput, optFns ...func(*route53profiles.Options)) (*route53profiles.AssociateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateProfile")
	}

	var r0 *route53profiles.AssociateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.AssociateProfileInput, ...func(*route53profiles.Options)) (*route53profiles.AssociateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.AssociateProfileInput, ...func(*route53profiles.Options)) *route53profiles.AssociateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.AssociateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.AssociateProfileInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateResourceToProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateResourceToProfile(ctx context.Context, params *route53profiles.AssociateResourceToProfileInput, optFns ...func(*route53profiles.Options)) (*route53profiles.AssociateResourceToProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateResourceToProfile")
	}

	var r0 *route53profiles.AssociateResourceToProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.AssociateResourceToProfileInput, ...func(*route53profiles.Options)) (*route53profiles.AssociateResourceToProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.AssociateResourceToProfileInput, ...func(*route53profiles.Options)) *route53profiles.AssociateResourceToProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.AssociateResourceToProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.AssociateResourceToProfileInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProfile(ctx context.Context, params *route53profiles.CreateProfileInput, optFns ...func(*route53profiles.Options)) (*route53profiles.CreateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 *route53profiles.CreateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.CreateProfileInput, ...func(*route53profiles.Options)) (*route53profiles.CreateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.CreateProfileInput, ...func(*route53profiles.Options)) *route53profiles.CreateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.CreateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.CreateProfileInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfile(ctx context.Context, params *route53profiles.DeleteProfileInput, optFns ...func(*route53profiles.Options)) (*route53profiles.DeleteProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 *route53profiles.DeleteProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.DeleteProfileInput, ...func(*route53profiles.Options)) (*route53profiles.DeleteProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.DeleteProfileInput, ...func(*route53profiles.Options)) *route53profiles.DeleteProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.DeleteProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.DeleteProfileInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateProfile(ctx context.Context, params *route53profiles.DisassociateProfileInput, optFns ...func(*route53profiles.Options)) (*route53profiles.DisassociateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateProfile")
	}

	var r0 *route53profiles.DisassociateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.DisassociateProfileInput, ...func(*route53profiles.Options)) (*route53profiles.DisassociateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.DisassociateProfileInput, ...func(*route53profiles.Options)) *route53profiles.DisassociateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.DisassociateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.DisassociateProfileInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateResourceFromProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateResourceFromProfile(ctx context.Context, params *route53profiles.DisassociateResourceFromProfileInput, optFns ...func(*route53profiles.Options)) (*route53profiles.DisassociateResourceFromProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateResourceFromProfile")
	}

	var r0 *route53profiles.DisassociateResourceFromProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.DisassociateResourceFromProfileInput, ...func(*route53profiles.Options)) (*route53profiles.DisassociateResourceFromProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.DisassociateResourceFromProfileInput, ...func(*route53profiles.Options)) *route53profiles.DisassociateResourceFromProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.DisassociateResourceFromProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.DisassociateResourceFromProfileInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfile(ctx context.Context, params *route53profiles.GetProfileInput, optFns ...func(*route53profiles.Options)) (*route53profiles.GetProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfile")
	}

	var r0 *route53profiles.GetProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.GetProfileInput, ...func(*route53profiles.Options)) (*route53profiles.GetProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.GetProfileInput, ...func(*route53profiles.Options)) *route53profiles.GetProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.GetProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.GetProfileInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfileAssociation(ctx context.Context, params *route53profiles.GetProfileAssociationInput, optFns ...func(*route53profiles.Options)) (*route53profiles.GetProfileAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileAssociation")
	}

	var r0 *route53profiles.GetProfileAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.GetProfileAssociationInput, ...func(*route53profiles.Options)) (*route53profiles.GetProfileAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.GetProfileAssociationInput, ...func(*route53profiles.Options)) *route53profiles.GetProfileAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.GetProfileAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.GetProfileAssociationInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileResourceAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfileResourceAssociation(ctx context.Context, params *route53profiles.GetProfileResourceAssociationInput, optFns ...func(*route53profiles.Options)) (*route53profiles.GetProfileResourceAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileResourceAssociation")
	}

	var r0 *route53profiles.GetProfileResourceAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.GetProfileResourceAssociationInput, ...func(*route53profiles.Options)) (*route53profiles.GetProfileResourceAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.GetProfileResourceAssociationInput, ...func(*route53profiles.Options)) *route53profiles.GetProfileResourceAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.GetProfileResourceAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.GetProfileResourceAssociationInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfileAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfileAssociations(ctx context.Context, params *route53profiles.ListProfileAssociationsInput, optFns ...func(*route53profiles.Options)) (*route53profiles.ListProfileAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfileAssociations")
	}

	var r0 *route53profiles.ListProfileAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.ListProfileAssociationsInput, ...func(*route53profiles.Options)) (*route53profiles.ListProfileAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.ListProfileAssociationsInput, ...func(*route53profiles.Options)) *route53profiles.ListProfileAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.ListProfileAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.ListProfileAssociationsInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfileResourceAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfileResourceAssociations(ctx context.Context, params *route53profiles.ListProfileResourceAssociationsInput, optFns ...func(*route53profiles.Options)) (*route53profiles.ListProfileResourceAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfileResourceAssociations")
	}

	var r0 *route53profiles.ListProfileResourceAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.ListProfileResourceAssociationsInput, ...func(*route53profiles.Options)) (*route53profiles.ListProfileResourceAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.ListProfileResourceAssociationsInput, ...func(*route53profiles.Options)) *route53profiles.ListProfileResourceAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.ListProfileResourceAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.ListProfileResourceAssociationsInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfiles(ctx context.Context, params *route53profiles.ListProfilesInput, optFns ...func(*route53profiles.Options)) (*route53profiles.ListProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfiles")
	}

	var r0 *route53profiles.ListProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.ListProfilesInput, ...func(*route53profiles.Options)) (*route53profiles.ListProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.ListProfilesInput, ...func(*route53profiles.Options)) *route53profiles.ListProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.ListProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.ListProfilesInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *route53profiles.ListTagsForResourceInput, optFns ...func(*route53profiles.Options)) (*route53profiles.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *route53profiles.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.ListTagsForResourceInput, ...func(*route53profiles.Options)) (*route53profiles.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.ListTagsForResourceInput, ...func(*route53profiles.Options)) *route53profiles.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.ListTagsForResourceInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() route53profiles.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 route53profiles.Options
	if rf, ok := ret.Get(0).(func() route53profiles.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(route53profiles.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *route53profiles.TagResourceInput, optFns ...func(*route53profiles.Options)) (*route53profiles.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *route53profiles.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.TagResourceInput, ...func(*route53profiles.Options)) (*route53profiles.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.TagResourceInput, ...func(*route53profiles.Options)) *route53profiles.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.TagResourceInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *route53profiles.UntagResourceInput, optFns ...func(*route53profiles.Options)) (*route53profiles.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *route53profiles.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.UntagResourceInput, ...func(*route53profiles.Options)) (*route53profiles.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.UntagResourceInput, ...func(*route53profiles.Options)) *route53profiles.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.UntagResourceInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfileResourceAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProfileResourceAssociation(ctx context.Context, params *route53profiles.UpdateProfileResourceAssociationInput, optFns ...func(*route53profiles.Options)) (*route53profiles.UpdateProfileResourceAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfileResourceAssociation")
	}

	var r0 *route53profiles.UpdateProfileResourceAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.UpdateProfileResourceAssociationInput, ...func(*route53profiles.Options)) (*route53profiles.UpdateProfileResourceAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53profiles.UpdateProfileResourceAssociationInput, ...func(*route53profiles.Options)) *route53profiles.UpdateProfileResourceAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53profiles.UpdateProfileResourceAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53profiles.UpdateProfileResourceAssociationInput, ...func(*route53profiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
