// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	voiceid "github.com/aws/aws-sdk-go-v2/service/voiceid"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateFraudster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateFraudster(ctx context.Context, params *voiceid.AssociateFraudsterInput, optFns ...func(*voiceid.Options)) (*voiceid.AssociateFraudsterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateFraudster")
	}

	var r0 *voiceid.AssociateFraudsterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.AssociateFraudsterInput, ...func(*voiceid.Options)) (*voiceid.AssociateFraudsterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.AssociateFraudsterInput, ...func(*voiceid.Options)) *voiceid.AssociateFraudsterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.AssociateFraudsterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.AssociateFraudsterInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomain(ctx context.Context, params *voiceid.CreateDomainInput, optFns ...func(*voiceid.Options)) (*voiceid.CreateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 *voiceid.CreateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.CreateDomainInput, ...func(*voiceid.Options)) (*voiceid.CreateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.CreateDomainInput, ...func(*voiceid.Options)) *voiceid.CreateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.CreateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.CreateDomainInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWatchlist provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWatchlist(ctx context.Context, params *voiceid.CreateWatchlistInput, optFns ...func(*voiceid.Options)) (*voiceid.CreateWatchlistOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWatchlist")
	}

	var r0 *voiceid.CreateWatchlistOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.CreateWatchlistInput, ...func(*voiceid.Options)) (*voiceid.CreateWatchlistOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.CreateWatchlistInput, ...func(*voiceid.Options)) *voiceid.CreateWatchlistOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.CreateWatchlistOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.CreateWatchlistInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomain(ctx context.Context, params *voiceid.DeleteDomainInput, optFns ...func(*voiceid.Options)) (*voiceid.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomain")
	}

	var r0 *voiceid.DeleteDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DeleteDomainInput, ...func(*voiceid.Options)) (*voiceid.DeleteDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DeleteDomainInput, ...func(*voiceid.Options)) *voiceid.DeleteDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DeleteDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DeleteDomainInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFraudster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFraudster(ctx context.Context, params *voiceid.DeleteFraudsterInput, optFns ...func(*voiceid.Options)) (*voiceid.DeleteFraudsterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFraudster")
	}

	var r0 *voiceid.DeleteFraudsterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DeleteFraudsterInput, ...func(*voiceid.Options)) (*voiceid.DeleteFraudsterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DeleteFraudsterInput, ...func(*voiceid.Options)) *voiceid.DeleteFraudsterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DeleteFraudsterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DeleteFraudsterInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSpeaker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSpeaker(ctx context.Context, params *voiceid.DeleteSpeakerInput, optFns ...func(*voiceid.Options)) (*voiceid.DeleteSpeakerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSpeaker")
	}

	var r0 *voiceid.DeleteSpeakerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DeleteSpeakerInput, ...func(*voiceid.Options)) (*voiceid.DeleteSpeakerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DeleteSpeakerInput, ...func(*voiceid.Options)) *voiceid.DeleteSpeakerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DeleteSpeakerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DeleteSpeakerInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWatchlist provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWatchlist(ctx context.Context, params *voiceid.DeleteWatchlistInput, optFns ...func(*voiceid.Options)) (*voiceid.DeleteWatchlistOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWatchlist")
	}

	var r0 *voiceid.DeleteWatchlistOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DeleteWatchlistInput, ...func(*voiceid.Options)) (*voiceid.DeleteWatchlistOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DeleteWatchlistInput, ...func(*voiceid.Options)) *voiceid.DeleteWatchlistOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DeleteWatchlistOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DeleteWatchlistInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDomain(ctx context.Context, params *voiceid.DescribeDomainInput, optFns ...func(*voiceid.Options)) (*voiceid.DescribeDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDomain")
	}

	var r0 *voiceid.DescribeDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeDomainInput, ...func(*voiceid.Options)) (*voiceid.DescribeDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeDomainInput, ...func(*voiceid.Options)) *voiceid.DescribeDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DescribeDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DescribeDomainInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFraudster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFraudster(ctx context.Context, params *voiceid.DescribeFraudsterInput, optFns ...func(*voiceid.Options)) (*voiceid.DescribeFraudsterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFraudster")
	}

	var r0 *voiceid.DescribeFraudsterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeFraudsterInput, ...func(*voiceid.Options)) (*voiceid.DescribeFraudsterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeFraudsterInput, ...func(*voiceid.Options)) *voiceid.DescribeFraudsterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DescribeFraudsterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DescribeFraudsterInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFraudsterRegistrationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFraudsterRegistrationJob(ctx context.Context, params *voiceid.DescribeFraudsterRegistrationJobInput, optFns ...func(*voiceid.Options)) (*voiceid.DescribeFraudsterRegistrationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFraudsterRegistrationJob")
	}

	var r0 *voiceid.DescribeFraudsterRegistrationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeFraudsterRegistrationJobInput, ...func(*voiceid.Options)) (*voiceid.DescribeFraudsterRegistrationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeFraudsterRegistrationJobInput, ...func(*voiceid.Options)) *voiceid.DescribeFraudsterRegistrationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DescribeFraudsterRegistrationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DescribeFraudsterRegistrationJobInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpeaker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSpeaker(ctx context.Context, params *voiceid.DescribeSpeakerInput, optFns ...func(*voiceid.Options)) (*voiceid.DescribeSpeakerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSpeaker")
	}

	var r0 *voiceid.DescribeSpeakerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeSpeakerInput, ...func(*voiceid.Options)) (*voiceid.DescribeSpeakerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeSpeakerInput, ...func(*voiceid.Options)) *voiceid.DescribeSpeakerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DescribeSpeakerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DescribeSpeakerInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpeakerEnrollmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSpeakerEnrollmentJob(ctx context.Context, params *voiceid.DescribeSpeakerEnrollmentJobInput, optFns ...func(*voiceid.Options)) (*voiceid.DescribeSpeakerEnrollmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSpeakerEnrollmentJob")
	}

	var r0 *voiceid.DescribeSpeakerEnrollmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeSpeakerEnrollmentJobInput, ...func(*voiceid.Options)) (*voiceid.DescribeSpeakerEnrollmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeSpeakerEnrollmentJobInput, ...func(*voiceid.Options)) *voiceid.DescribeSpeakerEnrollmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DescribeSpeakerEnrollmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DescribeSpeakerEnrollmentJobInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWatchlist provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWatchlist(ctx context.Context, params *voiceid.DescribeWatchlistInput, optFns ...func(*voiceid.Options)) (*voiceid.DescribeWatchlistOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWatchlist")
	}

	var r0 *voiceid.DescribeWatchlistOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeWatchlistInput, ...func(*voiceid.Options)) (*voiceid.DescribeWatchlistOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DescribeWatchlistInput, ...func(*voiceid.Options)) *voiceid.DescribeWatchlistOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DescribeWatchlistOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DescribeWatchlistInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFraudster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFraudster(ctx context.Context, params *voiceid.DisassociateFraudsterInput, optFns ...func(*voiceid.Options)) (*voiceid.DisassociateFraudsterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFraudster")
	}

	var r0 *voiceid.DisassociateFraudsterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DisassociateFraudsterInput, ...func(*voiceid.Options)) (*voiceid.DisassociateFraudsterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.DisassociateFraudsterInput, ...func(*voiceid.Options)) *voiceid.DisassociateFraudsterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.DisassociateFraudsterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.DisassociateFraudsterInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EvaluateSession(ctx context.Context, params *voiceid.EvaluateSessionInput, optFns ...func(*voiceid.Options)) (*voiceid.EvaluateSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateSession")
	}

	var r0 *voiceid.EvaluateSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.EvaluateSessionInput, ...func(*voiceid.Options)) (*voiceid.EvaluateSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.EvaluateSessionInput, ...func(*voiceid.Options)) *voiceid.EvaluateSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.EvaluateSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.EvaluateSessionInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomains(ctx context.Context, params *voiceid.ListDomainsInput, optFns ...func(*voiceid.Options)) (*voiceid.ListDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 *voiceid.ListDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListDomainsInput, ...func(*voiceid.Options)) (*voiceid.ListDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListDomainsInput, ...func(*voiceid.Options)) *voiceid.ListDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.ListDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.ListDomainsInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFraudsterRegistrationJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFraudsterRegistrationJobs(ctx context.Context, params *voiceid.ListFraudsterRegistrationJobsInput, optFns ...func(*voiceid.Options)) (*voiceid.ListFraudsterRegistrationJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFraudsterRegistrationJobs")
	}

	var r0 *voiceid.ListFraudsterRegistrationJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListFraudsterRegistrationJobsInput, ...func(*voiceid.Options)) (*voiceid.ListFraudsterRegistrationJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListFraudsterRegistrationJobsInput, ...func(*voiceid.Options)) *voiceid.ListFraudsterRegistrationJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.ListFraudsterRegistrationJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.ListFraudsterRegistrationJobsInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFraudsters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFraudsters(ctx context.Context, params *voiceid.ListFraudstersInput, optFns ...func(*voiceid.Options)) (*voiceid.ListFraudstersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFraudsters")
	}

	var r0 *voiceid.ListFraudstersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListFraudstersInput, ...func(*voiceid.Options)) (*voiceid.ListFraudstersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListFraudstersInput, ...func(*voiceid.Options)) *voiceid.ListFraudstersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.ListFraudstersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.ListFraudstersInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSpeakerEnrollmentJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSpeakerEnrollmentJobs(ctx context.Context, params *voiceid.ListSpeakerEnrollmentJobsInput, optFns ...func(*voiceid.Options)) (*voiceid.ListSpeakerEnrollmentJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSpeakerEnrollmentJobs")
	}

	var r0 *voiceid.ListSpeakerEnrollmentJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListSpeakerEnrollmentJobsInput, ...func(*voiceid.Options)) (*voiceid.ListSpeakerEnrollmentJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListSpeakerEnrollmentJobsInput, ...func(*voiceid.Options)) *voiceid.ListSpeakerEnrollmentJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.ListSpeakerEnrollmentJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.ListSpeakerEnrollmentJobsInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSpeakers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSpeakers(ctx context.Context, params *voiceid.ListSpeakersInput, optFns ...func(*voiceid.Options)) (*voiceid.ListSpeakersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSpeakers")
	}

	var r0 *voiceid.ListSpeakersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListSpeakersInput, ...func(*voiceid.Options)) (*voiceid.ListSpeakersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListSpeakersInput, ...func(*voiceid.Options)) *voiceid.ListSpeakersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.ListSpeakersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.ListSpeakersInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *voiceid.ListTagsForResourceInput, optFns ...func(*voiceid.Options)) (*voiceid.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *voiceid.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListTagsForResourceInput, ...func(*voiceid.Options)) (*voiceid.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListTagsForResourceInput, ...func(*voiceid.Options)) *voiceid.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.ListTagsForResourceInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWatchlists provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWatchlists(ctx context.Context, params *voiceid.ListWatchlistsInput, optFns ...func(*voiceid.Options)) (*voiceid.ListWatchlistsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWatchlists")
	}

	var r0 *voiceid.ListWatchlistsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListWatchlistsInput, ...func(*voiceid.Options)) (*voiceid.ListWatchlistsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.ListWatchlistsInput, ...func(*voiceid.Options)) *voiceid.ListWatchlistsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.ListWatchlistsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.ListWatchlistsInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OptOutSpeaker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) OptOutSpeaker(ctx context.Context, params *voiceid.OptOutSpeakerInput, optFns ...func(*voiceid.Options)) (*voiceid.OptOutSpeakerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OptOutSpeaker")
	}

	var r0 *voiceid.OptOutSpeakerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.OptOutSpeakerInput, ...func(*voiceid.Options)) (*voiceid.OptOutSpeakerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.OptOutSpeakerInput, ...func(*voiceid.Options)) *voiceid.OptOutSpeakerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.OptOutSpeakerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.OptOutSpeakerInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() voiceid.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 voiceid.Options
	if rf, ok := ret.Get(0).(func() voiceid.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(voiceid.Options)
	}

	return r0
}

// StartFraudsterRegistrationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartFraudsterRegistrationJob(ctx context.Context, params *voiceid.StartFraudsterRegistrationJobInput, optFns ...func(*voiceid.Options)) (*voiceid.StartFraudsterRegistrationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartFraudsterRegistrationJob")
	}

	var r0 *voiceid.StartFraudsterRegistrationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.StartFraudsterRegistrationJobInput, ...func(*voiceid.Options)) (*voiceid.StartFraudsterRegistrationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.StartFraudsterRegistrationJobInput, ...func(*voiceid.Options)) *voiceid.StartFraudsterRegistrationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.StartFraudsterRegistrationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.StartFraudsterRegistrationJobInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSpeakerEnrollmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSpeakerEnrollmentJob(ctx context.Context, params *voiceid.StartSpeakerEnrollmentJobInput, optFns ...func(*voiceid.Options)) (*voiceid.StartSpeakerEnrollmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSpeakerEnrollmentJob")
	}

	var r0 *voiceid.StartSpeakerEnrollmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.StartSpeakerEnrollmentJobInput, ...func(*voiceid.Options)) (*voiceid.StartSpeakerEnrollmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.StartSpeakerEnrollmentJobInput, ...func(*voiceid.Options)) *voiceid.StartSpeakerEnrollmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.StartSpeakerEnrollmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.StartSpeakerEnrollmentJobInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *voiceid.TagResourceInput, optFns ...func(*voiceid.Options)) (*voiceid.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *voiceid.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.TagResourceInput, ...func(*voiceid.Options)) (*voiceid.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.TagResourceInput, ...func(*voiceid.Options)) *voiceid.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.TagResourceInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *voiceid.UntagResourceInput, optFns ...func(*voiceid.Options)) (*voiceid.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *voiceid.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.UntagResourceInput, ...func(*voiceid.Options)) (*voiceid.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.UntagResourceInput, ...func(*voiceid.Options)) *voiceid.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.UntagResourceInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomain(ctx context.Context, params *voiceid.UpdateDomainInput, optFns ...func(*voiceid.Options)) (*voiceid.UpdateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 *voiceid.UpdateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.UpdateDomainInput, ...func(*voiceid.Options)) (*voiceid.UpdateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.UpdateDomainInput, ...func(*voiceid.Options)) *voiceid.UpdateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.UpdateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.UpdateDomainInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWatchlist provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWatchlist(ctx context.Context, params *voiceid.UpdateWatchlistInput, optFns ...func(*voiceid.Options)) (*voiceid.UpdateWatchlistOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWatchlist")
	}

	var r0 *voiceid.UpdateWatchlistOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.UpdateWatchlistInput, ...func(*voiceid.Options)) (*voiceid.UpdateWatchlistOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *voiceid.UpdateWatchlistInput, ...func(*voiceid.Options)) *voiceid.UpdateWatchlistOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*voiceid.UpdateWatchlistOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *voiceid.UpdateWatchlistInput, ...func(*voiceid.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
