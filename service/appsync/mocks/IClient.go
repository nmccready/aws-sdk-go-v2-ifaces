// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	appsync "github.com/aws/aws-sdk-go-v2/service/appsync"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateApi(ctx context.Context, params *appsync.AssociateApiInput, optFns ...func(*appsync.Options)) (*appsync.AssociateApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateApi")
	}

	var r0 *appsync.AssociateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.AssociateApiInput, ...func(*appsync.Options)) (*appsync.AssociateApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.AssociateApiInput, ...func(*appsync.Options)) *appsync.AssociateApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.AssociateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.AssociateApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateMergedGraphqlApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateMergedGraphqlApi(ctx context.Context, params *appsync.AssociateMergedGraphqlApiInput, optFns ...func(*appsync.Options)) (*appsync.AssociateMergedGraphqlApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateMergedGraphqlApi")
	}

	var r0 *appsync.AssociateMergedGraphqlApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.AssociateMergedGraphqlApiInput, ...func(*appsync.Options)) (*appsync.AssociateMergedGraphqlApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.AssociateMergedGraphqlApiInput, ...func(*appsync.Options)) *appsync.AssociateMergedGraphqlApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.AssociateMergedGraphqlApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.AssociateMergedGraphqlApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSourceGraphqlApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateSourceGraphqlApi(ctx context.Context, params *appsync.AssociateSourceGraphqlApiInput, optFns ...func(*appsync.Options)) (*appsync.AssociateSourceGraphqlApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSourceGraphqlApi")
	}

	var r0 *appsync.AssociateSourceGraphqlApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.AssociateSourceGraphqlApiInput, ...func(*appsync.Options)) (*appsync.AssociateSourceGraphqlApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.AssociateSourceGraphqlApiInput, ...func(*appsync.Options)) *appsync.AssociateSourceGraphqlApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.AssociateSourceGraphqlApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.AssociateSourceGraphqlApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApi(ctx context.Context, params *appsync.CreateApiInput, optFns ...func(*appsync.Options)) (*appsync.CreateApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApi")
	}

	var r0 *appsync.CreateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateApiInput, ...func(*appsync.Options)) (*appsync.CreateApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateApiInput, ...func(*appsync.Options)) *appsync.CreateApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApiCache(ctx context.Context, params *appsync.CreateApiCacheInput, optFns ...func(*appsync.Options)) (*appsync.CreateApiCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiCache")
	}

	var r0 *appsync.CreateApiCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateApiCacheInput, ...func(*appsync.Options)) (*appsync.CreateApiCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateApiCacheInput, ...func(*appsync.Options)) *appsync.CreateApiCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateApiCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateApiCacheInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApiKey(ctx context.Context, params *appsync.CreateApiKeyInput, optFns ...func(*appsync.Options)) (*appsync.CreateApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiKey")
	}

	var r0 *appsync.CreateApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateApiKeyInput, ...func(*appsync.Options)) (*appsync.CreateApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateApiKeyInput, ...func(*appsync.Options)) *appsync.CreateApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateApiKeyInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannelNamespace(ctx context.Context, params *appsync.CreateChannelNamespaceInput, optFns ...func(*appsync.Options)) (*appsync.CreateChannelNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelNamespace")
	}

	var r0 *appsync.CreateChannelNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateChannelNamespaceInput, ...func(*appsync.Options)) (*appsync.CreateChannelNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateChannelNamespaceInput, ...func(*appsync.Options)) *appsync.CreateChannelNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateChannelNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateChannelNamespaceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataSource(ctx context.Context, params *appsync.CreateDataSourceInput, optFns ...func(*appsync.Options)) (*appsync.CreateDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataSource")
	}

	var r0 *appsync.CreateDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateDataSourceInput, ...func(*appsync.Options)) (*appsync.CreateDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateDataSourceInput, ...func(*appsync.Options)) *appsync.CreateDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateDataSourceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomainName(ctx context.Context, params *appsync.CreateDomainNameInput, optFns ...func(*appsync.Options)) (*appsync.CreateDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainName")
	}

	var r0 *appsync.CreateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateDomainNameInput, ...func(*appsync.Options)) (*appsync.CreateDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateDomainNameInput, ...func(*appsync.Options)) *appsync.CreateDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateDomainNameInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFunction(ctx context.Context, params *appsync.CreateFunctionInput, optFns ...func(*appsync.Options)) (*appsync.CreateFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunction")
	}

	var r0 *appsync.CreateFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateFunctionInput, ...func(*appsync.Options)) (*appsync.CreateFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateFunctionInput, ...func(*appsync.Options)) *appsync.CreateFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateFunctionInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGraphqlApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGraphqlApi(ctx context.Context, params *appsync.CreateGraphqlApiInput, optFns ...func(*appsync.Options)) (*appsync.CreateGraphqlApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGraphqlApi")
	}

	var r0 *appsync.CreateGraphqlApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateGraphqlApiInput, ...func(*appsync.Options)) (*appsync.CreateGraphqlApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateGraphqlApiInput, ...func(*appsync.Options)) *appsync.CreateGraphqlApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateGraphqlApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateGraphqlApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResolver provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResolver(ctx context.Context, params *appsync.CreateResolverInput, optFns ...func(*appsync.Options)) (*appsync.CreateResolverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResolver")
	}

	var r0 *appsync.CreateResolverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateResolverInput, ...func(*appsync.Options)) (*appsync.CreateResolverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateResolverInput, ...func(*appsync.Options)) *appsync.CreateResolverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateResolverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateResolverInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateType(ctx context.Context, params *appsync.CreateTypeInput, optFns ...func(*appsync.Options)) (*appsync.CreateTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateType")
	}

	var r0 *appsync.CreateTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateTypeInput, ...func(*appsync.Options)) (*appsync.CreateTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.CreateTypeInput, ...func(*appsync.Options)) *appsync.CreateTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.CreateTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.CreateTypeInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApi(ctx context.Context, params *appsync.DeleteApiInput, optFns ...func(*appsync.Options)) (*appsync.DeleteApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApi")
	}

	var r0 *appsync.DeleteApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteApiInput, ...func(*appsync.Options)) (*appsync.DeleteApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteApiInput, ...func(*appsync.Options)) *appsync.DeleteApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApiCache(ctx context.Context, params *appsync.DeleteApiCacheInput, optFns ...func(*appsync.Options)) (*appsync.DeleteApiCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiCache")
	}

	var r0 *appsync.DeleteApiCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteApiCacheInput, ...func(*appsync.Options)) (*appsync.DeleteApiCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteApiCacheInput, ...func(*appsync.Options)) *appsync.DeleteApiCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteApiCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteApiCacheInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApiKey(ctx context.Context, params *appsync.DeleteApiKeyInput, optFns ...func(*appsync.Options)) (*appsync.DeleteApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiKey")
	}

	var r0 *appsync.DeleteApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteApiKeyInput, ...func(*appsync.Options)) (*appsync.DeleteApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteApiKeyInput, ...func(*appsync.Options)) *appsync.DeleteApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteApiKeyInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelNamespace(ctx context.Context, params *appsync.DeleteChannelNamespaceInput, optFns ...func(*appsync.Options)) (*appsync.DeleteChannelNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelNamespace")
	}

	var r0 *appsync.DeleteChannelNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteChannelNamespaceInput, ...func(*appsync.Options)) (*appsync.DeleteChannelNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteChannelNamespaceInput, ...func(*appsync.Options)) *appsync.DeleteChannelNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteChannelNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteChannelNamespaceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataSource(ctx context.Context, params *appsync.DeleteDataSourceInput, optFns ...func(*appsync.Options)) (*appsync.DeleteDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataSource")
	}

	var r0 *appsync.DeleteDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteDataSourceInput, ...func(*appsync.Options)) (*appsync.DeleteDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteDataSourceInput, ...func(*appsync.Options)) *appsync.DeleteDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteDataSourceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomainName(ctx context.Context, params *appsync.DeleteDomainNameInput, optFns ...func(*appsync.Options)) (*appsync.DeleteDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainName")
	}

	var r0 *appsync.DeleteDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteDomainNameInput, ...func(*appsync.Options)) (*appsync.DeleteDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteDomainNameInput, ...func(*appsync.Options)) *appsync.DeleteDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteDomainNameInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFunction(ctx context.Context, params *appsync.DeleteFunctionInput, optFns ...func(*appsync.Options)) (*appsync.DeleteFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunction")
	}

	var r0 *appsync.DeleteFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteFunctionInput, ...func(*appsync.Options)) (*appsync.DeleteFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteFunctionInput, ...func(*appsync.Options)) *appsync.DeleteFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteFunctionInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGraphqlApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGraphqlApi(ctx context.Context, params *appsync.DeleteGraphqlApiInput, optFns ...func(*appsync.Options)) (*appsync.DeleteGraphqlApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGraphqlApi")
	}

	var r0 *appsync.DeleteGraphqlApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteGraphqlApiInput, ...func(*appsync.Options)) (*appsync.DeleteGraphqlApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteGraphqlApiInput, ...func(*appsync.Options)) *appsync.DeleteGraphqlApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteGraphqlApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteGraphqlApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResolver provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResolver(ctx context.Context, params *appsync.DeleteResolverInput, optFns ...func(*appsync.Options)) (*appsync.DeleteResolverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResolver")
	}

	var r0 *appsync.DeleteResolverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteResolverInput, ...func(*appsync.Options)) (*appsync.DeleteResolverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteResolverInput, ...func(*appsync.Options)) *appsync.DeleteResolverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteResolverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteResolverInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteType(ctx context.Context, params *appsync.DeleteTypeInput, optFns ...func(*appsync.Options)) (*appsync.DeleteTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteType")
	}

	var r0 *appsync.DeleteTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteTypeInput, ...func(*appsync.Options)) (*appsync.DeleteTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DeleteTypeInput, ...func(*appsync.Options)) *appsync.DeleteTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DeleteTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DeleteTypeInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateApi(ctx context.Context, params *appsync.DisassociateApiInput, optFns ...func(*appsync.Options)) (*appsync.DisassociateApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateApi")
	}

	var r0 *appsync.DisassociateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DisassociateApiInput, ...func(*appsync.Options)) (*appsync.DisassociateApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DisassociateApiInput, ...func(*appsync.Options)) *appsync.DisassociateApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DisassociateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DisassociateApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMergedGraphqlApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMergedGraphqlApi(ctx context.Context, params *appsync.DisassociateMergedGraphqlApiInput, optFns ...func(*appsync.Options)) (*appsync.DisassociateMergedGraphqlApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMergedGraphqlApi")
	}

	var r0 *appsync.DisassociateMergedGraphqlApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DisassociateMergedGraphqlApiInput, ...func(*appsync.Options)) (*appsync.DisassociateMergedGraphqlApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DisassociateMergedGraphqlApiInput, ...func(*appsync.Options)) *appsync.DisassociateMergedGraphqlApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DisassociateMergedGraphqlApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DisassociateMergedGraphqlApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSourceGraphqlApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateSourceGraphqlApi(ctx context.Context, params *appsync.DisassociateSourceGraphqlApiInput, optFns ...func(*appsync.Options)) (*appsync.DisassociateSourceGraphqlApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSourceGraphqlApi")
	}

	var r0 *appsync.DisassociateSourceGraphqlApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DisassociateSourceGraphqlApiInput, ...func(*appsync.Options)) (*appsync.DisassociateSourceGraphqlApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.DisassociateSourceGraphqlApiInput, ...func(*appsync.Options)) *appsync.DisassociateSourceGraphqlApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.DisassociateSourceGraphqlApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.DisassociateSourceGraphqlApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EvaluateCode(ctx context.Context, params *appsync.EvaluateCodeInput, optFns ...func(*appsync.Options)) (*appsync.EvaluateCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateCode")
	}

	var r0 *appsync.EvaluateCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.EvaluateCodeInput, ...func(*appsync.Options)) (*appsync.EvaluateCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.EvaluateCodeInput, ...func(*appsync.Options)) *appsync.EvaluateCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.EvaluateCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.EvaluateCodeInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateMappingTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EvaluateMappingTemplate(ctx context.Context, params *appsync.EvaluateMappingTemplateInput, optFns ...func(*appsync.Options)) (*appsync.EvaluateMappingTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateMappingTemplate")
	}

	var r0 *appsync.EvaluateMappingTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.EvaluateMappingTemplateInput, ...func(*appsync.Options)) (*appsync.EvaluateMappingTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.EvaluateMappingTemplateInput, ...func(*appsync.Options)) *appsync.EvaluateMappingTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.EvaluateMappingTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.EvaluateMappingTemplateInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FlushApiCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FlushApiCache(ctx context.Context, params *appsync.FlushApiCacheInput, optFns ...func(*appsync.Options)) (*appsync.FlushApiCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FlushApiCache")
	}

	var r0 *appsync.FlushApiCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.FlushApiCacheInput, ...func(*appsync.Options)) (*appsync.FlushApiCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.FlushApiCacheInput, ...func(*appsync.Options)) *appsync.FlushApiCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.FlushApiCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.FlushApiCacheInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApi(ctx context.Context, params *appsync.GetApiInput, optFns ...func(*appsync.Options)) (*appsync.GetApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApi")
	}

	var r0 *appsync.GetApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetApiInput, ...func(*appsync.Options)) (*appsync.GetApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetApiInput, ...func(*appsync.Options)) *appsync.GetApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApiAssociation(ctx context.Context, params *appsync.GetApiAssociationInput, optFns ...func(*appsync.Options)) (*appsync.GetApiAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiAssociation")
	}

	var r0 *appsync.GetApiAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetApiAssociationInput, ...func(*appsync.Options)) (*appsync.GetApiAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetApiAssociationInput, ...func(*appsync.Options)) *appsync.GetApiAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetApiAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetApiAssociationInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApiCache(ctx context.Context, params *appsync.GetApiCacheInput, optFns ...func(*appsync.Options)) (*appsync.GetApiCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiCache")
	}

	var r0 *appsync.GetApiCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetApiCacheInput, ...func(*appsync.Options)) (*appsync.GetApiCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetApiCacheInput, ...func(*appsync.Options)) *appsync.GetApiCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetApiCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetApiCacheInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChannelNamespace(ctx context.Context, params *appsync.GetChannelNamespaceInput, optFns ...func(*appsync.Options)) (*appsync.GetChannelNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelNamespace")
	}

	var r0 *appsync.GetChannelNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetChannelNamespaceInput, ...func(*appsync.Options)) (*appsync.GetChannelNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetChannelNamespaceInput, ...func(*appsync.Options)) *appsync.GetChannelNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetChannelNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetChannelNamespaceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataSource(ctx context.Context, params *appsync.GetDataSourceInput, optFns ...func(*appsync.Options)) (*appsync.GetDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataSource")
	}

	var r0 *appsync.GetDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetDataSourceInput, ...func(*appsync.Options)) (*appsync.GetDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetDataSourceInput, ...func(*appsync.Options)) *appsync.GetDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetDataSourceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataSourceIntrospection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataSourceIntrospection(ctx context.Context, params *appsync.GetDataSourceIntrospectionInput, optFns ...func(*appsync.Options)) (*appsync.GetDataSourceIntrospectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataSourceIntrospection")
	}

	var r0 *appsync.GetDataSourceIntrospectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetDataSourceIntrospectionInput, ...func(*appsync.Options)) (*appsync.GetDataSourceIntrospectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetDataSourceIntrospectionInput, ...func(*appsync.Options)) *appsync.GetDataSourceIntrospectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetDataSourceIntrospectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetDataSourceIntrospectionInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainName(ctx context.Context, params *appsync.GetDomainNameInput, optFns ...func(*appsync.Options)) (*appsync.GetDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainName")
	}

	var r0 *appsync.GetDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetDomainNameInput, ...func(*appsync.Options)) (*appsync.GetDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetDomainNameInput, ...func(*appsync.Options)) *appsync.GetDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetDomainNameInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFunction(ctx context.Context, params *appsync.GetFunctionInput, optFns ...func(*appsync.Options)) (*appsync.GetFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunction")
	}

	var r0 *appsync.GetFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetFunctionInput, ...func(*appsync.Options)) (*appsync.GetFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetFunctionInput, ...func(*appsync.Options)) *appsync.GetFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetFunctionInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGraphqlApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGraphqlApi(ctx context.Context, params *appsync.GetGraphqlApiInput, optFns ...func(*appsync.Options)) (*appsync.GetGraphqlApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGraphqlApi")
	}

	var r0 *appsync.GetGraphqlApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetGraphqlApiInput, ...func(*appsync.Options)) (*appsync.GetGraphqlApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetGraphqlApiInput, ...func(*appsync.Options)) *appsync.GetGraphqlApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetGraphqlApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetGraphqlApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGraphqlApiEnvironmentVariables provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGraphqlApiEnvironmentVariables(ctx context.Context, params *appsync.GetGraphqlApiEnvironmentVariablesInput, optFns ...func(*appsync.Options)) (*appsync.GetGraphqlApiEnvironmentVariablesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGraphqlApiEnvironmentVariables")
	}

	var r0 *appsync.GetGraphqlApiEnvironmentVariablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetGraphqlApiEnvironmentVariablesInput, ...func(*appsync.Options)) (*appsync.GetGraphqlApiEnvironmentVariablesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetGraphqlApiEnvironmentVariablesInput, ...func(*appsync.Options)) *appsync.GetGraphqlApiEnvironmentVariablesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetGraphqlApiEnvironmentVariablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetGraphqlApiEnvironmentVariablesInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntrospectionSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntrospectionSchema(ctx context.Context, params *appsync.GetIntrospectionSchemaInput, optFns ...func(*appsync.Options)) (*appsync.GetIntrospectionSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntrospectionSchema")
	}

	var r0 *appsync.GetIntrospectionSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetIntrospectionSchemaInput, ...func(*appsync.Options)) (*appsync.GetIntrospectionSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetIntrospectionSchemaInput, ...func(*appsync.Options)) *appsync.GetIntrospectionSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetIntrospectionSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetIntrospectionSchemaInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResolver provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResolver(ctx context.Context, params *appsync.GetResolverInput, optFns ...func(*appsync.Options)) (*appsync.GetResolverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResolver")
	}

	var r0 *appsync.GetResolverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetResolverInput, ...func(*appsync.Options)) (*appsync.GetResolverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetResolverInput, ...func(*appsync.Options)) *appsync.GetResolverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetResolverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetResolverInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemaCreationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSchemaCreationStatus(ctx context.Context, params *appsync.GetSchemaCreationStatusInput, optFns ...func(*appsync.Options)) (*appsync.GetSchemaCreationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSchemaCreationStatus")
	}

	var r0 *appsync.GetSchemaCreationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetSchemaCreationStatusInput, ...func(*appsync.Options)) (*appsync.GetSchemaCreationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetSchemaCreationStatusInput, ...func(*appsync.Options)) *appsync.GetSchemaCreationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetSchemaCreationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetSchemaCreationStatusInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSourceApiAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSourceApiAssociation(ctx context.Context, params *appsync.GetSourceApiAssociationInput, optFns ...func(*appsync.Options)) (*appsync.GetSourceApiAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSourceApiAssociation")
	}

	var r0 *appsync.GetSourceApiAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetSourceApiAssociationInput, ...func(*appsync.Options)) (*appsync.GetSourceApiAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetSourceApiAssociationInput, ...func(*appsync.Options)) *appsync.GetSourceApiAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetSourceApiAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetSourceApiAssociationInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetType(ctx context.Context, params *appsync.GetTypeInput, optFns ...func(*appsync.Options)) (*appsync.GetTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetType")
	}

	var r0 *appsync.GetTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetTypeInput, ...func(*appsync.Options)) (*appsync.GetTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.GetTypeInput, ...func(*appsync.Options)) *appsync.GetTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.GetTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.GetTypeInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApiKeys(ctx context.Context, params *appsync.ListApiKeysInput, optFns ...func(*appsync.Options)) (*appsync.ListApiKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApiKeys")
	}

	var r0 *appsync.ListApiKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListApiKeysInput, ...func(*appsync.Options)) (*appsync.ListApiKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListApiKeysInput, ...func(*appsync.Options)) *appsync.ListApiKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListApiKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListApiKeysInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApis(ctx context.Context, params *appsync.ListApisInput, optFns ...func(*appsync.Options)) (*appsync.ListApisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApis")
	}

	var r0 *appsync.ListApisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListApisInput, ...func(*appsync.Options)) (*appsync.ListApisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListApisInput, ...func(*appsync.Options)) *appsync.ListApisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListApisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListApisInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelNamespaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelNamespaces(ctx context.Context, params *appsync.ListChannelNamespacesInput, optFns ...func(*appsync.Options)) (*appsync.ListChannelNamespacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelNamespaces")
	}

	var r0 *appsync.ListChannelNamespacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListChannelNamespacesInput, ...func(*appsync.Options)) (*appsync.ListChannelNamespacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListChannelNamespacesInput, ...func(*appsync.Options)) *appsync.ListChannelNamespacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListChannelNamespacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListChannelNamespacesInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSources(ctx context.Context, params *appsync.ListDataSourcesInput, optFns ...func(*appsync.Options)) (*appsync.ListDataSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSources")
	}

	var r0 *appsync.ListDataSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListDataSourcesInput, ...func(*appsync.Options)) (*appsync.ListDataSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListDataSourcesInput, ...func(*appsync.Options)) *appsync.ListDataSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListDataSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListDataSourcesInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomainNames provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomainNames(ctx context.Context, params *appsync.ListDomainNamesInput, optFns ...func(*appsync.Options)) (*appsync.ListDomainNamesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomainNames")
	}

	var r0 *appsync.ListDomainNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListDomainNamesInput, ...func(*appsync.Options)) (*appsync.ListDomainNamesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListDomainNamesInput, ...func(*appsync.Options)) *appsync.ListDomainNamesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListDomainNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListDomainNamesInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunctions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFunctions(ctx context.Context, params *appsync.ListFunctionsInput, optFns ...func(*appsync.Options)) (*appsync.ListFunctionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctions")
	}

	var r0 *appsync.ListFunctionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListFunctionsInput, ...func(*appsync.Options)) (*appsync.ListFunctionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListFunctionsInput, ...func(*appsync.Options)) *appsync.ListFunctionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListFunctionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListFunctionsInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGraphqlApis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGraphqlApis(ctx context.Context, params *appsync.ListGraphqlApisInput, optFns ...func(*appsync.Options)) (*appsync.ListGraphqlApisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGraphqlApis")
	}

	var r0 *appsync.ListGraphqlApisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListGraphqlApisInput, ...func(*appsync.Options)) (*appsync.ListGraphqlApisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListGraphqlApisInput, ...func(*appsync.Options)) *appsync.ListGraphqlApisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListGraphqlApisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListGraphqlApisInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResolvers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResolvers(ctx context.Context, params *appsync.ListResolversInput, optFns ...func(*appsync.Options)) (*appsync.ListResolversOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResolvers")
	}

	var r0 *appsync.ListResolversOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListResolversInput, ...func(*appsync.Options)) (*appsync.ListResolversOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListResolversInput, ...func(*appsync.Options)) *appsync.ListResolversOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListResolversOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListResolversInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResolversByFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResolversByFunction(ctx context.Context, params *appsync.ListResolversByFunctionInput, optFns ...func(*appsync.Options)) (*appsync.ListResolversByFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResolversByFunction")
	}

	var r0 *appsync.ListResolversByFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListResolversByFunctionInput, ...func(*appsync.Options)) (*appsync.ListResolversByFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListResolversByFunctionInput, ...func(*appsync.Options)) *appsync.ListResolversByFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListResolversByFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListResolversByFunctionInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceApiAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSourceApiAssociations(ctx context.Context, params *appsync.ListSourceApiAssociationsInput, optFns ...func(*appsync.Options)) (*appsync.ListSourceApiAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSourceApiAssociations")
	}

	var r0 *appsync.ListSourceApiAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListSourceApiAssociationsInput, ...func(*appsync.Options)) (*appsync.ListSourceApiAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListSourceApiAssociationsInput, ...func(*appsync.Options)) *appsync.ListSourceApiAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListSourceApiAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListSourceApiAssociationsInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *appsync.ListTagsForResourceInput, optFns ...func(*appsync.Options)) (*appsync.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *appsync.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListTagsForResourceInput, ...func(*appsync.Options)) (*appsync.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListTagsForResourceInput, ...func(*appsync.Options)) *appsync.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListTagsForResourceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTypes(ctx context.Context, params *appsync.ListTypesInput, optFns ...func(*appsync.Options)) (*appsync.ListTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTypes")
	}

	var r0 *appsync.ListTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListTypesInput, ...func(*appsync.Options)) (*appsync.ListTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListTypesInput, ...func(*appsync.Options)) *appsync.ListTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListTypesInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTypesByAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTypesByAssociation(ctx context.Context, params *appsync.ListTypesByAssociationInput, optFns ...func(*appsync.Options)) (*appsync.ListTypesByAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTypesByAssociation")
	}

	var r0 *appsync.ListTypesByAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListTypesByAssociationInput, ...func(*appsync.Options)) (*appsync.ListTypesByAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.ListTypesByAssociationInput, ...func(*appsync.Options)) *appsync.ListTypesByAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.ListTypesByAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.ListTypesByAssociationInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() appsync.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 appsync.Options
	if rf, ok := ret.Get(0).(func() appsync.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(appsync.Options)
	}

	return r0
}

// PutGraphqlApiEnvironmentVariables provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutGraphqlApiEnvironmentVariables(ctx context.Context, params *appsync.PutGraphqlApiEnvironmentVariablesInput, optFns ...func(*appsync.Options)) (*appsync.PutGraphqlApiEnvironmentVariablesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutGraphqlApiEnvironmentVariables")
	}

	var r0 *appsync.PutGraphqlApiEnvironmentVariablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.PutGraphqlApiEnvironmentVariablesInput, ...func(*appsync.Options)) (*appsync.PutGraphqlApiEnvironmentVariablesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.PutGraphqlApiEnvironmentVariablesInput, ...func(*appsync.Options)) *appsync.PutGraphqlApiEnvironmentVariablesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.PutGraphqlApiEnvironmentVariablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.PutGraphqlApiEnvironmentVariablesInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDataSourceIntrospection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDataSourceIntrospection(ctx context.Context, params *appsync.StartDataSourceIntrospectionInput, optFns ...func(*appsync.Options)) (*appsync.StartDataSourceIntrospectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDataSourceIntrospection")
	}

	var r0 *appsync.StartDataSourceIntrospectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.StartDataSourceIntrospectionInput, ...func(*appsync.Options)) (*appsync.StartDataSourceIntrospectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.StartDataSourceIntrospectionInput, ...func(*appsync.Options)) *appsync.StartDataSourceIntrospectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.StartDataSourceIntrospectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.StartDataSourceIntrospectionInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSchemaCreation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSchemaCreation(ctx context.Context, params *appsync.StartSchemaCreationInput, optFns ...func(*appsync.Options)) (*appsync.StartSchemaCreationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSchemaCreation")
	}

	var r0 *appsync.StartSchemaCreationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.StartSchemaCreationInput, ...func(*appsync.Options)) (*appsync.StartSchemaCreationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.StartSchemaCreationInput, ...func(*appsync.Options)) *appsync.StartSchemaCreationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.StartSchemaCreationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.StartSchemaCreationInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSchemaMerge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSchemaMerge(ctx context.Context, params *appsync.StartSchemaMergeInput, optFns ...func(*appsync.Options)) (*appsync.StartSchemaMergeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSchemaMerge")
	}

	var r0 *appsync.StartSchemaMergeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.StartSchemaMergeInput, ...func(*appsync.Options)) (*appsync.StartSchemaMergeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.StartSchemaMergeInput, ...func(*appsync.Options)) *appsync.StartSchemaMergeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.StartSchemaMergeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.StartSchemaMergeInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *appsync.TagResourceInput, optFns ...func(*appsync.Options)) (*appsync.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *appsync.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.TagResourceInput, ...func(*appsync.Options)) (*appsync.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.TagResourceInput, ...func(*appsync.Options)) *appsync.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.TagResourceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *appsync.UntagResourceInput, optFns ...func(*appsync.Options)) (*appsync.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *appsync.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UntagResourceInput, ...func(*appsync.Options)) (*appsync.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UntagResourceInput, ...func(*appsync.Options)) *appsync.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UntagResourceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApi(ctx context.Context, params *appsync.UpdateApiInput, optFns ...func(*appsync.Options)) (*appsync.UpdateApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApi")
	}

	var r0 *appsync.UpdateApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateApiInput, ...func(*appsync.Options)) (*appsync.UpdateApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateApiInput, ...func(*appsync.Options)) *appsync.UpdateApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApiCache(ctx context.Context, params *appsync.UpdateApiCacheInput, optFns ...func(*appsync.Options)) (*appsync.UpdateApiCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiCache")
	}

	var r0 *appsync.UpdateApiCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateApiCacheInput, ...func(*appsync.Options)) (*appsync.UpdateApiCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateApiCacheInput, ...func(*appsync.Options)) *appsync.UpdateApiCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateApiCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateApiCacheInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApiKey(ctx context.Context, params *appsync.UpdateApiKeyInput, optFns ...func(*appsync.Options)) (*appsync.UpdateApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKey")
	}

	var r0 *appsync.UpdateApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateApiKeyInput, ...func(*appsync.Options)) (*appsync.UpdateApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateApiKeyInput, ...func(*appsync.Options)) *appsync.UpdateApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateApiKeyInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannelNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannelNamespace(ctx context.Context, params *appsync.UpdateChannelNamespaceInput, optFns ...func(*appsync.Options)) (*appsync.UpdateChannelNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelNamespace")
	}

	var r0 *appsync.UpdateChannelNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateChannelNamespaceInput, ...func(*appsync.Options)) (*appsync.UpdateChannelNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateChannelNamespaceInput, ...func(*appsync.Options)) *appsync.UpdateChannelNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateChannelNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateChannelNamespaceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataSource(ctx context.Context, params *appsync.UpdateDataSourceInput, optFns ...func(*appsync.Options)) (*appsync.UpdateDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataSource")
	}

	var r0 *appsync.UpdateDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateDataSourceInput, ...func(*appsync.Options)) (*appsync.UpdateDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateDataSourceInput, ...func(*appsync.Options)) *appsync.UpdateDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateDataSourceInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainName(ctx context.Context, params *appsync.UpdateDomainNameInput, optFns ...func(*appsync.Options)) (*appsync.UpdateDomainNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainName")
	}

	var r0 *appsync.UpdateDomainNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateDomainNameInput, ...func(*appsync.Options)) (*appsync.UpdateDomainNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateDomainNameInput, ...func(*appsync.Options)) *appsync.UpdateDomainNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateDomainNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateDomainNameInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFunction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFunction(ctx context.Context, params *appsync.UpdateFunctionInput, optFns ...func(*appsync.Options)) (*appsync.UpdateFunctionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunction")
	}

	var r0 *appsync.UpdateFunctionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateFunctionInput, ...func(*appsync.Options)) (*appsync.UpdateFunctionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateFunctionInput, ...func(*appsync.Options)) *appsync.UpdateFunctionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateFunctionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateFunctionInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGraphqlApi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGraphqlApi(ctx context.Context, params *appsync.UpdateGraphqlApiInput, optFns ...func(*appsync.Options)) (*appsync.UpdateGraphqlApiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGraphqlApi")
	}

	var r0 *appsync.UpdateGraphqlApiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateGraphqlApiInput, ...func(*appsync.Options)) (*appsync.UpdateGraphqlApiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateGraphqlApiInput, ...func(*appsync.Options)) *appsync.UpdateGraphqlApiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateGraphqlApiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateGraphqlApiInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResolver provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResolver(ctx context.Context, params *appsync.UpdateResolverInput, optFns ...func(*appsync.Options)) (*appsync.UpdateResolverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResolver")
	}

	var r0 *appsync.UpdateResolverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateResolverInput, ...func(*appsync.Options)) (*appsync.UpdateResolverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateResolverInput, ...func(*appsync.Options)) *appsync.UpdateResolverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateResolverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateResolverInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSourceApiAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSourceApiAssociation(ctx context.Context, params *appsync.UpdateSourceApiAssociationInput, optFns ...func(*appsync.Options)) (*appsync.UpdateSourceApiAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSourceApiAssociation")
	}

	var r0 *appsync.UpdateSourceApiAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateSourceApiAssociationInput, ...func(*appsync.Options)) (*appsync.UpdateSourceApiAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateSourceApiAssociationInput, ...func(*appsync.Options)) *appsync.UpdateSourceApiAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateSourceApiAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateSourceApiAssociationInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateType(ctx context.Context, params *appsync.UpdateTypeInput, optFns ...func(*appsync.Options)) (*appsync.UpdateTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateType")
	}

	var r0 *appsync.UpdateTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateTypeInput, ...func(*appsync.Options)) (*appsync.UpdateTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appsync.UpdateTypeInput, ...func(*appsync.Options)) *appsync.UpdateTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appsync.UpdateTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appsync.UpdateTypeInput, ...func(*appsync.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
