// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	lookoutmetrics "github.com/aws/aws-sdk-go-v2/service/lookoutmetrics"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ActivateAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateAnomalyDetector(ctx context.Context, params *lookoutmetrics.ActivateAnomalyDetectorInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ActivateAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateAnomalyDetector")
	}

	var r0 *lookoutmetrics.ActivateAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ActivateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ActivateAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ActivateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.ActivateAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.ActivateAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.ActivateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BackTestAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BackTestAnomalyDetector(ctx context.Context, params *lookoutmetrics.BackTestAnomalyDetectorInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.BackTestAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BackTestAnomalyDetector")
	}

	var r0 *lookoutmetrics.BackTestAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.BackTestAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.BackTestAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.BackTestAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.BackTestAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.BackTestAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.BackTestAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAlert provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAlert(ctx context.Context, params *lookoutmetrics.CreateAlertInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.CreateAlertOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlert")
	}

	var r0 *lookoutmetrics.CreateAlertOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.CreateAlertInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.CreateAlertOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.CreateAlertInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.CreateAlertOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.CreateAlertOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.CreateAlertInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAnomalyDetector(ctx context.Context, params *lookoutmetrics.CreateAnomalyDetectorInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.CreateAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnomalyDetector")
	}

	var r0 *lookoutmetrics.CreateAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.CreateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.CreateAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.CreateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.CreateAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.CreateAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.CreateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMetricSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMetricSet(ctx context.Context, params *lookoutmetrics.CreateMetricSetInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.CreateMetricSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMetricSet")
	}

	var r0 *lookoutmetrics.CreateMetricSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.CreateMetricSetInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.CreateMetricSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.CreateMetricSetInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.CreateMetricSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.CreateMetricSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.CreateMetricSetInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeactivateAnomalyDetector(ctx context.Context, params *lookoutmetrics.DeactivateAnomalyDetectorInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DeactivateAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateAnomalyDetector")
	}

	var r0 *lookoutmetrics.DeactivateAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DeactivateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DeactivateAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DeactivateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.DeactivateAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.DeactivateAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.DeactivateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlert provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAlert(ctx context.Context, params *lookoutmetrics.DeleteAlertInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DeleteAlertOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlert")
	}

	var r0 *lookoutmetrics.DeleteAlertOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DeleteAlertInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DeleteAlertOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DeleteAlertInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.DeleteAlertOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.DeleteAlertOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.DeleteAlertInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAnomalyDetector(ctx context.Context, params *lookoutmetrics.DeleteAnomalyDetectorInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DeleteAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnomalyDetector")
	}

	var r0 *lookoutmetrics.DeleteAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DeleteAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DeleteAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DeleteAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.DeleteAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.DeleteAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.DeleteAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAlert provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAlert(ctx context.Context, params *lookoutmetrics.DescribeAlertInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DescribeAlertOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAlert")
	}

	var r0 *lookoutmetrics.DescribeAlertOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DescribeAlertInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DescribeAlertOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DescribeAlertInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.DescribeAlertOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.DescribeAlertOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.DescribeAlertInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAnomalyDetectionExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAnomalyDetectionExecutions(ctx context.Context, params *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAnomalyDetectionExecutions")
	}

	var r0 *lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.DescribeAnomalyDetectionExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.DescribeAnomalyDetectionExecutionsInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAnomalyDetector(ctx context.Context, params *lookoutmetrics.DescribeAnomalyDetectorInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DescribeAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAnomalyDetector")
	}

	var r0 *lookoutmetrics.DescribeAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DescribeAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DescribeAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DescribeAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.DescribeAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.DescribeAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.DescribeAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetricSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMetricSet(ctx context.Context, params *lookoutmetrics.DescribeMetricSetInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DescribeMetricSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMetricSet")
	}

	var r0 *lookoutmetrics.DescribeMetricSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DescribeMetricSetInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DescribeMetricSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DescribeMetricSetInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.DescribeMetricSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.DescribeMetricSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.DescribeMetricSetInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetectMetricSetConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetectMetricSetConfig(ctx context.Context, params *lookoutmetrics.DetectMetricSetConfigInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DetectMetricSetConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetectMetricSetConfig")
	}

	var r0 *lookoutmetrics.DetectMetricSetConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DetectMetricSetConfigInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.DetectMetricSetConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.DetectMetricSetConfigInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.DetectMetricSetConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.DetectMetricSetConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.DetectMetricSetConfigInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAnomalyGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAnomalyGroup(ctx context.Context, params *lookoutmetrics.GetAnomalyGroupInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.GetAnomalyGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAnomalyGroup")
	}

	var r0 *lookoutmetrics.GetAnomalyGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.GetAnomalyGroupInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.GetAnomalyGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.GetAnomalyGroupInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.GetAnomalyGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.GetAnomalyGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.GetAnomalyGroupInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataQualityMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataQualityMetrics(ctx context.Context, params *lookoutmetrics.GetDataQualityMetricsInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.GetDataQualityMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataQualityMetrics")
	}

	var r0 *lookoutmetrics.GetDataQualityMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.GetDataQualityMetricsInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.GetDataQualityMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.GetDataQualityMetricsInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.GetDataQualityMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.GetDataQualityMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.GetDataQualityMetricsInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFeedback(ctx context.Context, params *lookoutmetrics.GetFeedbackInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.GetFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFeedback")
	}

	var r0 *lookoutmetrics.GetFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.GetFeedbackInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.GetFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.GetFeedbackInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.GetFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.GetFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.GetFeedbackInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSampleData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSampleData(ctx context.Context, params *lookoutmetrics.GetSampleDataInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.GetSampleDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSampleData")
	}

	var r0 *lookoutmetrics.GetSampleDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.GetSampleDataInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.GetSampleDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.GetSampleDataInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.GetSampleDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.GetSampleDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.GetSampleDataInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAlerts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAlerts(ctx context.Context, params *lookoutmetrics.ListAlertsInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAlertsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAlerts")
	}

	var r0 *lookoutmetrics.ListAlertsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAlertsInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAlertsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAlertsInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.ListAlertsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.ListAlertsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.ListAlertsInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnomalyDetectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnomalyDetectors(ctx context.Context, params *lookoutmetrics.ListAnomalyDetectorsInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAnomalyDetectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnomalyDetectors")
	}

	var r0 *lookoutmetrics.ListAnomalyDetectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAnomalyDetectorsInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAnomalyDetectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAnomalyDetectorsInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.ListAnomalyDetectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.ListAnomalyDetectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.ListAnomalyDetectorsInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnomalyGroupRelatedMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnomalyGroupRelatedMetrics(ctx context.Context, params *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnomalyGroupRelatedMetrics")
	}

	var r0 *lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.ListAnomalyGroupRelatedMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.ListAnomalyGroupRelatedMetricsInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnomalyGroupSummaries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnomalyGroupSummaries(ctx context.Context, params *lookoutmetrics.ListAnomalyGroupSummariesInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAnomalyGroupSummariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnomalyGroupSummaries")
	}

	var r0 *lookoutmetrics.ListAnomalyGroupSummariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAnomalyGroupSummariesInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAnomalyGroupSummariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAnomalyGroupSummariesInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.ListAnomalyGroupSummariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.ListAnomalyGroupSummariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.ListAnomalyGroupSummariesInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnomalyGroupTimeSeries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnomalyGroupTimeSeries(ctx context.Context, params *lookoutmetrics.ListAnomalyGroupTimeSeriesInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnomalyGroupTimeSeries")
	}

	var r0 *lookoutmetrics.ListAnomalyGroupTimeSeriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAnomalyGroupTimeSeriesInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListAnomalyGroupTimeSeriesInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.ListAnomalyGroupTimeSeriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.ListAnomalyGroupTimeSeriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.ListAnomalyGroupTimeSeriesInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMetricSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMetricSets(ctx context.Context, params *lookoutmetrics.ListMetricSetsInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListMetricSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMetricSets")
	}

	var r0 *lookoutmetrics.ListMetricSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListMetricSetsInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListMetricSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListMetricSetsInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.ListMetricSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.ListMetricSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.ListMetricSetsInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *lookoutmetrics.ListTagsForResourceInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *lookoutmetrics.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListTagsForResourceInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.ListTagsForResourceInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.ListTagsForResourceInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() lookoutmetrics.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 lookoutmetrics.Options
	if rf, ok := ret.Get(0).(func() lookoutmetrics.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(lookoutmetrics.Options)
	}

	return r0
}

// PutFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutFeedback(ctx context.Context, params *lookoutmetrics.PutFeedbackInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.PutFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutFeedback")
	}

	var r0 *lookoutmetrics.PutFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.PutFeedbackInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.PutFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.PutFeedbackInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.PutFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.PutFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.PutFeedbackInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *lookoutmetrics.TagResourceInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *lookoutmetrics.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.TagResourceInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.TagResourceInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.TagResourceInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *lookoutmetrics.UntagResourceInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *lookoutmetrics.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.UntagResourceInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.UntagResourceInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.UntagResourceInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAlert provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAlert(ctx context.Context, params *lookoutmetrics.UpdateAlertInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.UpdateAlertOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAlert")
	}

	var r0 *lookoutmetrics.UpdateAlertOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.UpdateAlertInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.UpdateAlertOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.UpdateAlertInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.UpdateAlertOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.UpdateAlertOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.UpdateAlertInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnomalyDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAnomalyDetector(ctx context.Context, params *lookoutmetrics.UpdateAnomalyDetectorInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.UpdateAnomalyDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnomalyDetector")
	}

	var r0 *lookoutmetrics.UpdateAnomalyDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.UpdateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.UpdateAnomalyDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.UpdateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.UpdateAnomalyDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.UpdateAnomalyDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.UpdateAnomalyDetectorInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMetricSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMetricSet(ctx context.Context, params *lookoutmetrics.UpdateMetricSetInput, optFns ...func(*lookoutmetrics.Options)) (*lookoutmetrics.UpdateMetricSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMetricSet")
	}

	var r0 *lookoutmetrics.UpdateMetricSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.UpdateMetricSetInput, ...func(*lookoutmetrics.Options)) (*lookoutmetrics.UpdateMetricSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutmetrics.UpdateMetricSetInput, ...func(*lookoutmetrics.Options)) *lookoutmetrics.UpdateMetricSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutmetrics.UpdateMetricSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutmetrics.UpdateMetricSetInput, ...func(*lookoutmetrics.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
