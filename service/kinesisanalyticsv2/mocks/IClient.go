// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	kinesisanalyticsv2 "github.com/aws/aws-sdk-go-v2/service/kinesisanalyticsv2"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddApplicationCloudWatchLoggingOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddApplicationCloudWatchLoggingOption(ctx context.Context, params *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddApplicationCloudWatchLoggingOption")
	}

	var r0 *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.AddApplicationCloudWatchLoggingOptionInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddApplicationInput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddApplicationInput(ctx context.Context, params *kinesisanalyticsv2.AddApplicationInputInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationInputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddApplicationInput")
	}

	var r0 *kinesisanalyticsv2.AddApplicationInputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationInputInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationInputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationInputInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.AddApplicationInputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.AddApplicationInputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.AddApplicationInputInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddApplicationInputProcessingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddApplicationInputProcessingConfiguration(ctx context.Context, params *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddApplicationInputProcessingConfiguration")
	}

	var r0 *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.AddApplicationInputProcessingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.AddApplicationInputProcessingConfigurationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddApplicationOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddApplicationOutput(ctx context.Context, params *kinesisanalyticsv2.AddApplicationOutputInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddApplicationOutput")
	}

	var r0 *kinesisanalyticsv2.AddApplicationOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationOutputInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationOutputInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.AddApplicationOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.AddApplicationOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.AddApplicationOutputInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddApplicationReferenceDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddApplicationReferenceDataSource(ctx context.Context, params *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddApplicationReferenceDataSource")
	}

	var r0 *kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.AddApplicationReferenceDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.AddApplicationReferenceDataSourceInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddApplicationVpcConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddApplicationVpcConfiguration(ctx context.Context, params *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddApplicationVpcConfiguration")
	}

	var r0 *kinesisanalyticsv2.AddApplicationVpcConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.AddApplicationVpcConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.AddApplicationVpcConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.AddApplicationVpcConfigurationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *kinesisanalyticsv2.CreateApplicationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *kinesisanalyticsv2.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.CreateApplicationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.CreateApplicationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.CreateApplicationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplicationPresignedUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplicationPresignedUrl(ctx context.Context, params *kinesisanalyticsv2.CreateApplicationPresignedUrlInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.CreateApplicationPresignedUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplicationPresignedUrl")
	}

	var r0 *kinesisanalyticsv2.CreateApplicationPresignedUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.CreateApplicationPresignedUrlInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.CreateApplicationPresignedUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.CreateApplicationPresignedUrlInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.CreateApplicationPresignedUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.CreateApplicationPresignedUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.CreateApplicationPresignedUrlInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplicationSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplicationSnapshot(ctx context.Context, params *kinesisanalyticsv2.CreateApplicationSnapshotInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplicationSnapshot")
	}

	var r0 *kinesisanalyticsv2.CreateApplicationSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.CreateApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.CreateApplicationSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.CreateApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.CreateApplicationSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.CreateApplicationSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.CreateApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *kinesisanalyticsv2.DeleteApplicationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *kinesisanalyticsv2.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationCloudWatchLoggingOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationCloudWatchLoggingOption(ctx context.Context, params *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationCloudWatchLoggingOption")
	}

	var r0 *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationCloudWatchLoggingOptionInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationInputProcessingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationInputProcessingConfiguration(ctx context.Context, params *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationInputProcessingConfiguration")
	}

	var r0 *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationInputProcessingConfigurationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationOutput provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationOutput(ctx context.Context, params *kinesisanalyticsv2.DeleteApplicationOutputInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationOutput")
	}

	var r0 *kinesisanalyticsv2.DeleteApplicationOutputOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationOutputInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationOutputOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationOutputInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DeleteApplicationOutputOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DeleteApplicationOutputOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationOutputInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationReferenceDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationReferenceDataSource(ctx context.Context, params *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationReferenceDataSource")
	}

	var r0 *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DeleteApplicationReferenceDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationReferenceDataSourceInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationSnapshot(ctx context.Context, params *kinesisanalyticsv2.DeleteApplicationSnapshotInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationSnapshot")
	}

	var r0 *kinesisanalyticsv2.DeleteApplicationSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DeleteApplicationSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DeleteApplicationSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationVpcConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationVpcConfiguration(ctx context.Context, params *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationVpcConfiguration")
	}

	var r0 *kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DeleteApplicationVpcConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DeleteApplicationVpcConfigurationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplication(ctx context.Context, params *kinesisanalyticsv2.DescribeApplicationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DescribeApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplication")
	}

	var r0 *kinesisanalyticsv2.DescribeApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DescribeApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DescribeApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DescribeApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationOperation(ctx context.Context, params *kinesisanalyticsv2.DescribeApplicationOperationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DescribeApplicationOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationOperation")
	}

	var r0 *kinesisanalyticsv2.DescribeApplicationOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationOperationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DescribeApplicationOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationOperationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DescribeApplicationOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DescribeApplicationOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationOperationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationSnapshot(ctx context.Context, params *kinesisanalyticsv2.DescribeApplicationSnapshotInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationSnapshot")
	}

	var r0 *kinesisanalyticsv2.DescribeApplicationSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DescribeApplicationSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DescribeApplicationSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DescribeApplicationSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationSnapshotInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationVersion(ctx context.Context, params *kinesisanalyticsv2.DescribeApplicationVersionInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DescribeApplicationVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationVersion")
	}

	var r0 *kinesisanalyticsv2.DescribeApplicationVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationVersionInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DescribeApplicationVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationVersionInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DescribeApplicationVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DescribeApplicationVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DescribeApplicationVersionInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DiscoverInputSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DiscoverInputSchema(ctx context.Context, params *kinesisanalyticsv2.DiscoverInputSchemaInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverInputSchema")
	}

	var r0 *kinesisanalyticsv2.DiscoverInputSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DiscoverInputSchemaInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.DiscoverInputSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.DiscoverInputSchemaInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.DiscoverInputSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.DiscoverInputSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.DiscoverInputSchemaInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationOperations(ctx context.Context, params *kinesisanalyticsv2.ListApplicationOperationsInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListApplicationOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationOperations")
	}

	var r0 *kinesisanalyticsv2.ListApplicationOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListApplicationOperationsInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListApplicationOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListApplicationOperationsInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.ListApplicationOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.ListApplicationOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.ListApplicationOperationsInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationSnapshots(ctx context.Context, params *kinesisanalyticsv2.ListApplicationSnapshotsInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationSnapshots")
	}

	var r0 *kinesisanalyticsv2.ListApplicationSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListApplicationSnapshotsInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListApplicationSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListApplicationSnapshotsInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.ListApplicationSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.ListApplicationSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.ListApplicationSnapshotsInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationVersions(ctx context.Context, params *kinesisanalyticsv2.ListApplicationVersionsInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListApplicationVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationVersions")
	}

	var r0 *kinesisanalyticsv2.ListApplicationVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListApplicationVersionsInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListApplicationVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListApplicationVersionsInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.ListApplicationVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.ListApplicationVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.ListApplicationVersionsInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *kinesisanalyticsv2.ListApplicationsInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *kinesisanalyticsv2.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListApplicationsInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListApplicationsInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.ListApplicationsInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *kinesisanalyticsv2.ListTagsForResourceInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *kinesisanalyticsv2.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListTagsForResourceInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.ListTagsForResourceInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.ListTagsForResourceInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() kinesisanalyticsv2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 kinesisanalyticsv2.Options
	if rf, ok := ret.Get(0).(func() kinesisanalyticsv2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kinesisanalyticsv2.Options)
	}

	return r0
}

// RollbackApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RollbackApplication(ctx context.Context, params *kinesisanalyticsv2.RollbackApplicationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.RollbackApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RollbackApplication")
	}

	var r0 *kinesisanalyticsv2.RollbackApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.RollbackApplicationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.RollbackApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.RollbackApplicationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.RollbackApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.RollbackApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.RollbackApplicationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartApplication(ctx context.Context, params *kinesisanalyticsv2.StartApplicationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.StartApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartApplication")
	}

	var r0 *kinesisanalyticsv2.StartApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.StartApplicationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.StartApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.StartApplicationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.StartApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.StartApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.StartApplicationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopApplication(ctx context.Context, params *kinesisanalyticsv2.StopApplicationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.StopApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopApplication")
	}

	var r0 *kinesisanalyticsv2.StopApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.StopApplicationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.StopApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.StopApplicationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.StopApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.StopApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.StopApplicationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *kinesisanalyticsv2.TagResourceInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *kinesisanalyticsv2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.TagResourceInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.TagResourceInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.TagResourceInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *kinesisanalyticsv2.UntagResourceInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *kinesisanalyticsv2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.UntagResourceInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.UntagResourceInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.UntagResourceInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *kinesisanalyticsv2.UpdateApplicationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *kinesisanalyticsv2.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.UpdateApplicationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.UpdateApplicationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.UpdateApplicationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationMaintenanceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplicationMaintenanceConfiguration(ctx context.Context, params *kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationInput, optFns ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationMaintenanceConfiguration")
	}

	var r0 *kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationInput, ...func(*kinesisanalyticsv2.Options)) (*kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationInput, ...func(*kinesisanalyticsv2.Options)) *kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisanalyticsv2.UpdateApplicationMaintenanceConfigurationInput, ...func(*kinesisanalyticsv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
