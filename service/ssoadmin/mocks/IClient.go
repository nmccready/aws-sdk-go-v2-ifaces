// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	ssoadmin "github.com/aws/aws-sdk-go-v2/service/ssoadmin"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AttachCustomerManagedPolicyReferenceToPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachCustomerManagedPolicyReferenceToPermissionSet(ctx context.Context, params *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachCustomerManagedPolicyReferenceToPermissionSet")
	}

	var r0 *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.AttachCustomerManagedPolicyReferenceToPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachManagedPolicyToPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachManagedPolicyToPermissionSet(ctx context.Context, params *ssoadmin.AttachManagedPolicyToPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachManagedPolicyToPermissionSet")
	}

	var r0 *ssoadmin.AttachManagedPolicyToPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.AttachManagedPolicyToPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.AttachManagedPolicyToPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.AttachManagedPolicyToPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.AttachManagedPolicyToPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.AttachManagedPolicyToPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.AttachManagedPolicyToPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccountAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccountAssignment(ctx context.Context, params *ssoadmin.CreateAccountAssignmentInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.CreateAccountAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountAssignment")
	}

	var r0 *ssoadmin.CreateAccountAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateAccountAssignmentInput, ...func(*ssoadmin.Options)) (*ssoadmin.CreateAccountAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateAccountAssignmentInput, ...func(*ssoadmin.Options)) *ssoadmin.CreateAccountAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.CreateAccountAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.CreateAccountAssignmentInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *ssoadmin.CreateApplicationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *ssoadmin.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateApplicationInput, ...func(*ssoadmin.Options)) (*ssoadmin.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateApplicationInput, ...func(*ssoadmin.Options)) *ssoadmin.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.CreateApplicationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplicationAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplicationAssignment(ctx context.Context, params *ssoadmin.CreateApplicationAssignmentInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.CreateApplicationAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplicationAssignment")
	}

	var r0 *ssoadmin.CreateApplicationAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateApplicationAssignmentInput, ...func(*ssoadmin.Options)) (*ssoadmin.CreateApplicationAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateApplicationAssignmentInput, ...func(*ssoadmin.Options)) *ssoadmin.CreateApplicationAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.CreateApplicationAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.CreateApplicationAssignmentInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstance(ctx context.Context, params *ssoadmin.CreateInstanceInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.CreateInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstance")
	}

	var r0 *ssoadmin.CreateInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateInstanceInput, ...func(*ssoadmin.Options)) (*ssoadmin.CreateInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateInstanceInput, ...func(*ssoadmin.Options)) *ssoadmin.CreateInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.CreateInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.CreateInstanceInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceAccessControlAttributeConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstanceAccessControlAttributeConfiguration(ctx context.Context, params *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceAccessControlAttributeConfiguration")
	}

	var r0 *ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) (*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) *ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.CreateInstanceAccessControlAttributeConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.CreateInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePermissionSet(ctx context.Context, params *ssoadmin.CreatePermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.CreatePermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermissionSet")
	}

	var r0 *ssoadmin.CreatePermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreatePermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.CreatePermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreatePermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.CreatePermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.CreatePermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.CreatePermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrustedTokenIssuer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrustedTokenIssuer(ctx context.Context, params *ssoadmin.CreateTrustedTokenIssuerInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.CreateTrustedTokenIssuerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrustedTokenIssuer")
	}

	var r0 *ssoadmin.CreateTrustedTokenIssuerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) (*ssoadmin.CreateTrustedTokenIssuerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.CreateTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) *ssoadmin.CreateTrustedTokenIssuerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.CreateTrustedTokenIssuerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.CreateTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccountAssignment(ctx context.Context, params *ssoadmin.DeleteAccountAssignmentInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteAccountAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountAssignment")
	}

	var r0 *ssoadmin.DeleteAccountAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteAccountAssignmentInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteAccountAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteAccountAssignmentInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteAccountAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteAccountAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteAccountAssignmentInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *ssoadmin.DeleteApplicationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *ssoadmin.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteApplicationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationAccessScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationAccessScope(ctx context.Context, params *ssoadmin.DeleteApplicationAccessScopeInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationAccessScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationAccessScope")
	}

	var r0 *ssoadmin.DeleteApplicationAccessScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationAccessScopeInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationAccessScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationAccessScopeInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteApplicationAccessScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteApplicationAccessScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteApplicationAccessScopeInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationAssignment(ctx context.Context, params *ssoadmin.DeleteApplicationAssignmentInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationAssignment")
	}

	var r0 *ssoadmin.DeleteApplicationAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationAssignmentInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationAssignmentInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteApplicationAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteApplicationAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteApplicationAssignmentInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationAuthenticationMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationAuthenticationMethod(ctx context.Context, params *ssoadmin.DeleteApplicationAuthenticationMethodInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationAuthenticationMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationAuthenticationMethod")
	}

	var r0 *ssoadmin.DeleteApplicationAuthenticationMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationAuthenticationMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteApplicationAuthenticationMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteApplicationAuthenticationMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplicationGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplicationGrant(ctx context.Context, params *ssoadmin.DeleteApplicationGrantInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplicationGrant")
	}

	var r0 *ssoadmin.DeleteApplicationGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationGrantInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteApplicationGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteApplicationGrantInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteApplicationGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteApplicationGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteApplicationGrantInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInlinePolicyFromPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInlinePolicyFromPermissionSet(ctx context.Context, params *ssoadmin.DeleteInlinePolicyFromPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInlinePolicyFromPermissionSet")
	}

	var r0 *ssoadmin.DeleteInlinePolicyFromPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteInlinePolicyFromPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteInlinePolicyFromPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteInlinePolicyFromPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteInlinePolicyFromPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteInlinePolicyFromPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstance(ctx context.Context, params *ssoadmin.DeleteInstanceInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstance")
	}

	var r0 *ssoadmin.DeleteInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteInstanceInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteInstanceInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteInstanceInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceAccessControlAttributeConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstanceAccessControlAttributeConfiguration(ctx context.Context, params *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceAccessControlAttributeConfiguration")
	}

	var r0 *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteInstanceAccessControlAttributeConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePermissionSet(ctx context.Context, params *ssoadmin.DeletePermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeletePermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermissionSet")
	}

	var r0 *ssoadmin.DeletePermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeletePermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeletePermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeletePermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.DeletePermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeletePermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeletePermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePermissionsBoundaryFromPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePermissionsBoundaryFromPermissionSet(ctx context.Context, params *ssoadmin.DeletePermissionsBoundaryFromPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermissionsBoundaryFromPermissionSet")
	}

	var r0 *ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeletePermissionsBoundaryFromPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeletePermissionsBoundaryFromPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeletePermissionsBoundaryFromPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeletePermissionsBoundaryFromPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrustedTokenIssuer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrustedTokenIssuer(ctx context.Context, params *ssoadmin.DeleteTrustedTokenIssuerInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DeleteTrustedTokenIssuerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustedTokenIssuer")
	}

	var r0 *ssoadmin.DeleteTrustedTokenIssuerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) (*ssoadmin.DeleteTrustedTokenIssuerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DeleteTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) *ssoadmin.DeleteTrustedTokenIssuerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DeleteTrustedTokenIssuerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DeleteTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAssignmentCreationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountAssignmentCreationStatus(ctx context.Context, params *ssoadmin.DescribeAccountAssignmentCreationStatusInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountAssignmentCreationStatus")
	}

	var r0 *ssoadmin.DescribeAccountAssignmentCreationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeAccountAssignmentCreationStatusInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribeAccountAssignmentCreationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeAccountAssignmentCreationStatusInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribeAccountAssignmentCreationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribeAccountAssignmentCreationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribeAccountAssignmentCreationStatusInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAssignmentDeletionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountAssignmentDeletionStatus(ctx context.Context, params *ssoadmin.DescribeAccountAssignmentDeletionStatusInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountAssignmentDeletionStatus")
	}

	var r0 *ssoadmin.DescribeAccountAssignmentDeletionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeAccountAssignmentDeletionStatusInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeAccountAssignmentDeletionStatusInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribeAccountAssignmentDeletionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribeAccountAssignmentDeletionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribeAccountAssignmentDeletionStatusInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplication(ctx context.Context, params *ssoadmin.DescribeApplicationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplication")
	}

	var r0 *ssoadmin.DescribeApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeApplicationInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeApplicationInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribeApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribeApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribeApplicationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationAssignment(ctx context.Context, params *ssoadmin.DescribeApplicationAssignmentInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationAssignment")
	}

	var r0 *ssoadmin.DescribeApplicationAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeApplicationAssignmentInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeApplicationAssignmentInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribeApplicationAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribeApplicationAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribeApplicationAssignmentInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicationProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicationProvider(ctx context.Context, params *ssoadmin.DescribeApplicationProviderInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicationProvider")
	}

	var r0 *ssoadmin.DescribeApplicationProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeApplicationProviderInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribeApplicationProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeApplicationProviderInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribeApplicationProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribeApplicationProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribeApplicationProviderInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInstance(ctx context.Context, params *ssoadmin.DescribeInstanceInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribeInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstance")
	}

	var r0 *ssoadmin.DescribeInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeInstanceInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribeInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeInstanceInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribeInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribeInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribeInstanceInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceAccessControlAttributeConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInstanceAccessControlAttributeConfiguration(ctx context.Context, params *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstanceAccessControlAttributeConfiguration")
	}

	var r0 *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribeInstanceAccessControlAttributeConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribeInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePermissionSet(ctx context.Context, params *ssoadmin.DescribePermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePermissionSet")
	}

	var r0 *ssoadmin.DescribePermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribePermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribePermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribePermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribePermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribePermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePermissionSetProvisioningStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePermissionSetProvisioningStatus(ctx context.Context, params *ssoadmin.DescribePermissionSetProvisioningStatusInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePermissionSetProvisioningStatus")
	}

	var r0 *ssoadmin.DescribePermissionSetProvisioningStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribePermissionSetProvisioningStatusInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribePermissionSetProvisioningStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribePermissionSetProvisioningStatusInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribePermissionSetProvisioningStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribePermissionSetProvisioningStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribePermissionSetProvisioningStatusInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrustedTokenIssuer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTrustedTokenIssuer(ctx context.Context, params *ssoadmin.DescribeTrustedTokenIssuerInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DescribeTrustedTokenIssuerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTrustedTokenIssuer")
	}

	var r0 *ssoadmin.DescribeTrustedTokenIssuerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) (*ssoadmin.DescribeTrustedTokenIssuerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DescribeTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) *ssoadmin.DescribeTrustedTokenIssuerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DescribeTrustedTokenIssuerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DescribeTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachCustomerManagedPolicyReferenceFromPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachCustomerManagedPolicyReferenceFromPermissionSet(ctx context.Context, params *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachCustomerManagedPolicyReferenceFromPermissionSet")
	}

	var r0 *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DetachCustomerManagedPolicyReferenceFromPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachManagedPolicyFromPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachManagedPolicyFromPermissionSet(ctx context.Context, params *ssoadmin.DetachManagedPolicyFromPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachManagedPolicyFromPermissionSet")
	}

	var r0 *ssoadmin.DetachManagedPolicyFromPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DetachManagedPolicyFromPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.DetachManagedPolicyFromPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.DetachManagedPolicyFromPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.DetachManagedPolicyFromPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.DetachManagedPolicyFromPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.DetachManagedPolicyFromPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationAccessScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplicationAccessScope(ctx context.Context, params *ssoadmin.GetApplicationAccessScopeInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAccessScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationAccessScope")
	}

	var r0 *ssoadmin.GetApplicationAccessScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetApplicationAccessScopeInput, ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAccessScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetApplicationAccessScopeInput, ...func(*ssoadmin.Options)) *ssoadmin.GetApplicationAccessScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.GetApplicationAccessScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.GetApplicationAccessScopeInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationAssignmentConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplicationAssignmentConfiguration(ctx context.Context, params *ssoadmin.GetApplicationAssignmentConfigurationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAssignmentConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationAssignmentConfiguration")
	}

	var r0 *ssoadmin.GetApplicationAssignmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetApplicationAssignmentConfigurationInput, ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAssignmentConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetApplicationAssignmentConfigurationInput, ...func(*ssoadmin.Options)) *ssoadmin.GetApplicationAssignmentConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.GetApplicationAssignmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.GetApplicationAssignmentConfigurationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationAuthenticationMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplicationAuthenticationMethod(ctx context.Context, params *ssoadmin.GetApplicationAuthenticationMethodInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAuthenticationMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationAuthenticationMethod")
	}

	var r0 *ssoadmin.GetApplicationAuthenticationMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationAuthenticationMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) *ssoadmin.GetApplicationAuthenticationMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.GetApplicationAuthenticationMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.GetApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplicationGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplicationGrant(ctx context.Context, params *ssoadmin.GetApplicationGrantInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplicationGrant")
	}

	var r0 *ssoadmin.GetApplicationGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetApplicationGrantInput, ...func(*ssoadmin.Options)) (*ssoadmin.GetApplicationGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetApplicationGrantInput, ...func(*ssoadmin.Options)) *ssoadmin.GetApplicationGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.GetApplicationGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.GetApplicationGrantInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInlinePolicyForPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInlinePolicyForPermissionSet(ctx context.Context, params *ssoadmin.GetInlinePolicyForPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInlinePolicyForPermissionSet")
	}

	var r0 *ssoadmin.GetInlinePolicyForPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetInlinePolicyForPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.GetInlinePolicyForPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetInlinePolicyForPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.GetInlinePolicyForPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.GetInlinePolicyForPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.GetInlinePolicyForPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionsBoundaryForPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPermissionsBoundaryForPermissionSet(ctx context.Context, params *ssoadmin.GetPermissionsBoundaryForPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsBoundaryForPermissionSet")
	}

	var r0 *ssoadmin.GetPermissionsBoundaryForPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetPermissionsBoundaryForPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.GetPermissionsBoundaryForPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.GetPermissionsBoundaryForPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.GetPermissionsBoundaryForPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.GetPermissionsBoundaryForPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountAssignmentCreationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountAssignmentCreationStatus(ctx context.Context, params *ssoadmin.ListAccountAssignmentCreationStatusInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountAssignmentCreationStatus")
	}

	var r0 *ssoadmin.ListAccountAssignmentCreationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountAssignmentCreationStatusInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentCreationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountAssignmentCreationStatusInput, ...func(*ssoadmin.Options)) *ssoadmin.ListAccountAssignmentCreationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListAccountAssignmentCreationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListAccountAssignmentCreationStatusInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountAssignmentDeletionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountAssignmentDeletionStatus(ctx context.Context, params *ssoadmin.ListAccountAssignmentDeletionStatusInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountAssignmentDeletionStatus")
	}

	var r0 *ssoadmin.ListAccountAssignmentDeletionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountAssignmentDeletionStatusInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentDeletionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountAssignmentDeletionStatusInput, ...func(*ssoadmin.Options)) *ssoadmin.ListAccountAssignmentDeletionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListAccountAssignmentDeletionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListAccountAssignmentDeletionStatusInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountAssignments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountAssignments(ctx context.Context, params *ssoadmin.ListAccountAssignmentsInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountAssignments")
	}

	var r0 *ssoadmin.ListAccountAssignmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountAssignmentsInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountAssignmentsInput, ...func(*ssoadmin.Options)) *ssoadmin.ListAccountAssignmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListAccountAssignmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListAccountAssignmentsInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountAssignmentsForPrincipal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountAssignmentsForPrincipal(ctx context.Context, params *ssoadmin.ListAccountAssignmentsForPrincipalInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentsForPrincipalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountAssignmentsForPrincipal")
	}

	var r0 *ssoadmin.ListAccountAssignmentsForPrincipalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountAssignmentsForPrincipalInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountAssignmentsForPrincipalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountAssignmentsForPrincipalInput, ...func(*ssoadmin.Options)) *ssoadmin.ListAccountAssignmentsForPrincipalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListAccountAssignmentsForPrincipalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListAccountAssignmentsForPrincipalInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountsForProvisionedPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountsForProvisionedPermissionSet(ctx context.Context, params *ssoadmin.ListAccountsForProvisionedPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountsForProvisionedPermissionSet")
	}

	var r0 *ssoadmin.ListAccountsForProvisionedPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountsForProvisionedPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListAccountsForProvisionedPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListAccountsForProvisionedPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.ListAccountsForProvisionedPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListAccountsForProvisionedPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListAccountsForProvisionedPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationAccessScopes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationAccessScopes(ctx context.Context, params *ssoadmin.ListApplicationAccessScopesInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAccessScopesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationAccessScopes")
	}

	var r0 *ssoadmin.ListApplicationAccessScopesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationAccessScopesInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAccessScopesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationAccessScopesInput, ...func(*ssoadmin.Options)) *ssoadmin.ListApplicationAccessScopesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListApplicationAccessScopesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListApplicationAccessScopesInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationAssignments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationAssignments(ctx context.Context, params *ssoadmin.ListApplicationAssignmentsInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAssignmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationAssignments")
	}

	var r0 *ssoadmin.ListApplicationAssignmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationAssignmentsInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAssignmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationAssignmentsInput, ...func(*ssoadmin.Options)) *ssoadmin.ListApplicationAssignmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListApplicationAssignmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListApplicationAssignmentsInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationAssignmentsForPrincipal provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationAssignmentsForPrincipal(ctx context.Context, params *ssoadmin.ListApplicationAssignmentsForPrincipalInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAssignmentsForPrincipalOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationAssignmentsForPrincipal")
	}

	var r0 *ssoadmin.ListApplicationAssignmentsForPrincipalOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationAssignmentsForPrincipalInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAssignmentsForPrincipalOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationAssignmentsForPrincipalInput, ...func(*ssoadmin.Options)) *ssoadmin.ListApplicationAssignmentsForPrincipalOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListApplicationAssignmentsForPrincipalOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListApplicationAssignmentsForPrincipalInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationAuthenticationMethods provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationAuthenticationMethods(ctx context.Context, params *ssoadmin.ListApplicationAuthenticationMethodsInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAuthenticationMethodsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationAuthenticationMethods")
	}

	var r0 *ssoadmin.ListApplicationAuthenticationMethodsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationAuthenticationMethodsInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationAuthenticationMethodsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationAuthenticationMethodsInput, ...func(*ssoadmin.Options)) *ssoadmin.ListApplicationAuthenticationMethodsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListApplicationAuthenticationMethodsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListApplicationAuthenticationMethodsInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationGrants provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationGrants(ctx context.Context, params *ssoadmin.ListApplicationGrantsInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationGrantsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationGrants")
	}

	var r0 *ssoadmin.ListApplicationGrantsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationGrantsInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationGrantsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationGrantsInput, ...func(*ssoadmin.Options)) *ssoadmin.ListApplicationGrantsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListApplicationGrantsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListApplicationGrantsInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationProviders(ctx context.Context, params *ssoadmin.ListApplicationProvidersInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationProviders")
	}

	var r0 *ssoadmin.ListApplicationProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationProvidersInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationProvidersInput, ...func(*ssoadmin.Options)) *ssoadmin.ListApplicationProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListApplicationProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListApplicationProvidersInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *ssoadmin.ListApplicationsInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *ssoadmin.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationsInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListApplicationsInput, ...func(*ssoadmin.Options)) *ssoadmin.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListApplicationsInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomerManagedPolicyReferencesInPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomerManagedPolicyReferencesInPermissionSet(ctx context.Context, params *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomerManagedPolicyReferencesInPermissionSet")
	}

	var r0 *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListCustomerManagedPolicyReferencesInPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInstances(ctx context.Context, params *ssoadmin.ListInstancesInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstances")
	}

	var r0 *ssoadmin.ListInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListInstancesInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListInstancesInput, ...func(*ssoadmin.Options)) *ssoadmin.ListInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListInstancesInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedPoliciesInPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListManagedPoliciesInPermissionSet(ctx context.Context, params *ssoadmin.ListManagedPoliciesInPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListManagedPoliciesInPermissionSet")
	}

	var r0 *ssoadmin.ListManagedPoliciesInPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListManagedPoliciesInPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListManagedPoliciesInPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListManagedPoliciesInPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.ListManagedPoliciesInPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListManagedPoliciesInPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListManagedPoliciesInPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissionSetProvisioningStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissionSetProvisioningStatus(ctx context.Context, params *ssoadmin.ListPermissionSetProvisioningStatusInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionSetProvisioningStatus")
	}

	var r0 *ssoadmin.ListPermissionSetProvisioningStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListPermissionSetProvisioningStatusInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetProvisioningStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListPermissionSetProvisioningStatusInput, ...func(*ssoadmin.Options)) *ssoadmin.ListPermissionSetProvisioningStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListPermissionSetProvisioningStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListPermissionSetProvisioningStatusInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissionSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissionSets(ctx context.Context, params *ssoadmin.ListPermissionSetsInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionSets")
	}

	var r0 *ssoadmin.ListPermissionSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListPermissionSetsInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListPermissionSetsInput, ...func(*ssoadmin.Options)) *ssoadmin.ListPermissionSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListPermissionSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListPermissionSetsInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissionSetsProvisionedToAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissionSetsProvisionedToAccount(ctx context.Context, params *ssoadmin.ListPermissionSetsProvisionedToAccountInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissionSetsProvisionedToAccount")
	}

	var r0 *ssoadmin.ListPermissionSetsProvisionedToAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListPermissionSetsProvisionedToAccountInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListPermissionSetsProvisionedToAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListPermissionSetsProvisionedToAccountInput, ...func(*ssoadmin.Options)) *ssoadmin.ListPermissionSetsProvisionedToAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListPermissionSetsProvisionedToAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListPermissionSetsProvisionedToAccountInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *ssoadmin.ListTagsForResourceInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *ssoadmin.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListTagsForResourceInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListTagsForResourceInput, ...func(*ssoadmin.Options)) *ssoadmin.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListTagsForResourceInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrustedTokenIssuers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrustedTokenIssuers(ctx context.Context, params *ssoadmin.ListTrustedTokenIssuersInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ListTrustedTokenIssuersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrustedTokenIssuers")
	}

	var r0 *ssoadmin.ListTrustedTokenIssuersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListTrustedTokenIssuersInput, ...func(*ssoadmin.Options)) (*ssoadmin.ListTrustedTokenIssuersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ListTrustedTokenIssuersInput, ...func(*ssoadmin.Options)) *ssoadmin.ListTrustedTokenIssuersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ListTrustedTokenIssuersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ListTrustedTokenIssuersInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() ssoadmin.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 ssoadmin.Options
	if rf, ok := ret.Get(0).(func() ssoadmin.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ssoadmin.Options)
	}

	return r0
}

// ProvisionPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ProvisionPermissionSet(ctx context.Context, params *ssoadmin.ProvisionPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.ProvisionPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionPermissionSet")
	}

	var r0 *ssoadmin.ProvisionPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ProvisionPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.ProvisionPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.ProvisionPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.ProvisionPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.ProvisionPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.ProvisionPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutApplicationAccessScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutApplicationAccessScope(ctx context.Context, params *ssoadmin.PutApplicationAccessScopeInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.PutApplicationAccessScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutApplicationAccessScope")
	}

	var r0 *ssoadmin.PutApplicationAccessScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutApplicationAccessScopeInput, ...func(*ssoadmin.Options)) (*ssoadmin.PutApplicationAccessScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutApplicationAccessScopeInput, ...func(*ssoadmin.Options)) *ssoadmin.PutApplicationAccessScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.PutApplicationAccessScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.PutApplicationAccessScopeInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutApplicationAssignmentConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutApplicationAssignmentConfiguration(ctx context.Context, params *ssoadmin.PutApplicationAssignmentConfigurationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.PutApplicationAssignmentConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutApplicationAssignmentConfiguration")
	}

	var r0 *ssoadmin.PutApplicationAssignmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutApplicationAssignmentConfigurationInput, ...func(*ssoadmin.Options)) (*ssoadmin.PutApplicationAssignmentConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutApplicationAssignmentConfigurationInput, ...func(*ssoadmin.Options)) *ssoadmin.PutApplicationAssignmentConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.PutApplicationAssignmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.PutApplicationAssignmentConfigurationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutApplicationAuthenticationMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutApplicationAuthenticationMethod(ctx context.Context, params *ssoadmin.PutApplicationAuthenticationMethodInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.PutApplicationAuthenticationMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutApplicationAuthenticationMethod")
	}

	var r0 *ssoadmin.PutApplicationAuthenticationMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) (*ssoadmin.PutApplicationAuthenticationMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) *ssoadmin.PutApplicationAuthenticationMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.PutApplicationAuthenticationMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.PutApplicationAuthenticationMethodInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutApplicationGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutApplicationGrant(ctx context.Context, params *ssoadmin.PutApplicationGrantInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.PutApplicationGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutApplicationGrant")
	}

	var r0 *ssoadmin.PutApplicationGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutApplicationGrantInput, ...func(*ssoadmin.Options)) (*ssoadmin.PutApplicationGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutApplicationGrantInput, ...func(*ssoadmin.Options)) *ssoadmin.PutApplicationGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.PutApplicationGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.PutApplicationGrantInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutInlinePolicyToPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutInlinePolicyToPermissionSet(ctx context.Context, params *ssoadmin.PutInlinePolicyToPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutInlinePolicyToPermissionSet")
	}

	var r0 *ssoadmin.PutInlinePolicyToPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutInlinePolicyToPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.PutInlinePolicyToPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutInlinePolicyToPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.PutInlinePolicyToPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.PutInlinePolicyToPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.PutInlinePolicyToPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermissionsBoundaryToPermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPermissionsBoundaryToPermissionSet(ctx context.Context, params *ssoadmin.PutPermissionsBoundaryToPermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.PutPermissionsBoundaryToPermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPermissionsBoundaryToPermissionSet")
	}

	var r0 *ssoadmin.PutPermissionsBoundaryToPermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutPermissionsBoundaryToPermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.PutPermissionsBoundaryToPermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.PutPermissionsBoundaryToPermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.PutPermissionsBoundaryToPermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.PutPermissionsBoundaryToPermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.PutPermissionsBoundaryToPermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *ssoadmin.TagResourceInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *ssoadmin.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.TagResourceInput, ...func(*ssoadmin.Options)) (*ssoadmin.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.TagResourceInput, ...func(*ssoadmin.Options)) *ssoadmin.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.TagResourceInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *ssoadmin.UntagResourceInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *ssoadmin.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UntagResourceInput, ...func(*ssoadmin.Options)) (*ssoadmin.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UntagResourceInput, ...func(*ssoadmin.Options)) *ssoadmin.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.UntagResourceInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *ssoadmin.UpdateApplicationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *ssoadmin.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdateApplicationInput, ...func(*ssoadmin.Options)) (*ssoadmin.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdateApplicationInput, ...func(*ssoadmin.Options)) *ssoadmin.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.UpdateApplicationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInstance(ctx context.Context, params *ssoadmin.UpdateInstanceInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.UpdateInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstance")
	}

	var r0 *ssoadmin.UpdateInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdateInstanceInput, ...func(*ssoadmin.Options)) (*ssoadmin.UpdateInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdateInstanceInput, ...func(*ssoadmin.Options)) *ssoadmin.UpdateInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.UpdateInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.UpdateInstanceInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceAccessControlAttributeConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInstanceAccessControlAttributeConfiguration(ctx context.Context, params *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceAccessControlAttributeConfiguration")
	}

	var r0 *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) (*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.UpdateInstanceAccessControlAttributeConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.UpdateInstanceAccessControlAttributeConfigurationInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermissionSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePermissionSet(ctx context.Context, params *ssoadmin.UpdatePermissionSetInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.UpdatePermissionSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissionSet")
	}

	var r0 *ssoadmin.UpdatePermissionSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdatePermissionSetInput, ...func(*ssoadmin.Options)) (*ssoadmin.UpdatePermissionSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdatePermissionSetInput, ...func(*ssoadmin.Options)) *ssoadmin.UpdatePermissionSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.UpdatePermissionSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.UpdatePermissionSetInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrustedTokenIssuer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrustedTokenIssuer(ctx context.Context, params *ssoadmin.UpdateTrustedTokenIssuerInput, optFns ...func(*ssoadmin.Options)) (*ssoadmin.UpdateTrustedTokenIssuerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustedTokenIssuer")
	}

	var r0 *ssoadmin.UpdateTrustedTokenIssuerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdateTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) (*ssoadmin.UpdateTrustedTokenIssuerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssoadmin.UpdateTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) *ssoadmin.UpdateTrustedTokenIssuerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssoadmin.UpdateTrustedTokenIssuerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssoadmin.UpdateTrustedTokenIssuerInput, ...func(*ssoadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
