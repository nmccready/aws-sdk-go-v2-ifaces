// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cloud9 "github.com/aws/aws-sdk-go-v2/service/cloud9"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateEnvironmentEC2 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironmentEC2(ctx context.Context, params *cloud9.CreateEnvironmentEC2Input, optFns ...func(*cloud9.Options)) (*cloud9.CreateEnvironmentEC2Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentEC2")
	}

	var r0 *cloud9.CreateEnvironmentEC2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.CreateEnvironmentEC2Input, ...func(*cloud9.Options)) (*cloud9.CreateEnvironmentEC2Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.CreateEnvironmentEC2Input, ...func(*cloud9.Options)) *cloud9.CreateEnvironmentEC2Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.CreateEnvironmentEC2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.CreateEnvironmentEC2Input, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironmentMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironmentMembership(ctx context.Context, params *cloud9.CreateEnvironmentMembershipInput, optFns ...func(*cloud9.Options)) (*cloud9.CreateEnvironmentMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironmentMembership")
	}

	var r0 *cloud9.CreateEnvironmentMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.CreateEnvironmentMembershipInput, ...func(*cloud9.Options)) (*cloud9.CreateEnvironmentMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.CreateEnvironmentMembershipInput, ...func(*cloud9.Options)) *cloud9.CreateEnvironmentMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.CreateEnvironmentMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.CreateEnvironmentMembershipInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironment(ctx context.Context, params *cloud9.DeleteEnvironmentInput, optFns ...func(*cloud9.Options)) (*cloud9.DeleteEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 *cloud9.DeleteEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DeleteEnvironmentInput, ...func(*cloud9.Options)) (*cloud9.DeleteEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DeleteEnvironmentInput, ...func(*cloud9.Options)) *cloud9.DeleteEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.DeleteEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.DeleteEnvironmentInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironmentMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironmentMembership(ctx context.Context, params *cloud9.DeleteEnvironmentMembershipInput, optFns ...func(*cloud9.Options)) (*cloud9.DeleteEnvironmentMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironmentMembership")
	}

	var r0 *cloud9.DeleteEnvironmentMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DeleteEnvironmentMembershipInput, ...func(*cloud9.Options)) (*cloud9.DeleteEnvironmentMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DeleteEnvironmentMembershipInput, ...func(*cloud9.Options)) *cloud9.DeleteEnvironmentMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.DeleteEnvironmentMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.DeleteEnvironmentMembershipInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEnvironmentMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEnvironmentMemberships(ctx context.Context, params *cloud9.DescribeEnvironmentMembershipsInput, optFns ...func(*cloud9.Options)) (*cloud9.DescribeEnvironmentMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEnvironmentMemberships")
	}

	var r0 *cloud9.DescribeEnvironmentMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DescribeEnvironmentMembershipsInput, ...func(*cloud9.Options)) (*cloud9.DescribeEnvironmentMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DescribeEnvironmentMembershipsInput, ...func(*cloud9.Options)) *cloud9.DescribeEnvironmentMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.DescribeEnvironmentMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.DescribeEnvironmentMembershipsInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEnvironmentStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEnvironmentStatus(ctx context.Context, params *cloud9.DescribeEnvironmentStatusInput, optFns ...func(*cloud9.Options)) (*cloud9.DescribeEnvironmentStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEnvironmentStatus")
	}

	var r0 *cloud9.DescribeEnvironmentStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DescribeEnvironmentStatusInput, ...func(*cloud9.Options)) (*cloud9.DescribeEnvironmentStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DescribeEnvironmentStatusInput, ...func(*cloud9.Options)) *cloud9.DescribeEnvironmentStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.DescribeEnvironmentStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.DescribeEnvironmentStatusInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEnvironments(ctx context.Context, params *cloud9.DescribeEnvironmentsInput, optFns ...func(*cloud9.Options)) (*cloud9.DescribeEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEnvironments")
	}

	var r0 *cloud9.DescribeEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DescribeEnvironmentsInput, ...func(*cloud9.Options)) (*cloud9.DescribeEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.DescribeEnvironmentsInput, ...func(*cloud9.Options)) *cloud9.DescribeEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.DescribeEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.DescribeEnvironmentsInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironments(ctx context.Context, params *cloud9.ListEnvironmentsInput, optFns ...func(*cloud9.Options)) (*cloud9.ListEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironments")
	}

	var r0 *cloud9.ListEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.ListEnvironmentsInput, ...func(*cloud9.Options)) (*cloud9.ListEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.ListEnvironmentsInput, ...func(*cloud9.Options)) *cloud9.ListEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.ListEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.ListEnvironmentsInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *cloud9.ListTagsForResourceInput, optFns ...func(*cloud9.Options)) (*cloud9.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *cloud9.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.ListTagsForResourceInput, ...func(*cloud9.Options)) (*cloud9.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.ListTagsForResourceInput, ...func(*cloud9.Options)) *cloud9.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.ListTagsForResourceInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cloud9.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cloud9.Options
	if rf, ok := ret.Get(0).(func() cloud9.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cloud9.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *cloud9.TagResourceInput, optFns ...func(*cloud9.Options)) (*cloud9.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *cloud9.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.TagResourceInput, ...func(*cloud9.Options)) (*cloud9.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.TagResourceInput, ...func(*cloud9.Options)) *cloud9.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.TagResourceInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *cloud9.UntagResourceInput, optFns ...func(*cloud9.Options)) (*cloud9.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *cloud9.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.UntagResourceInput, ...func(*cloud9.Options)) (*cloud9.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.UntagResourceInput, ...func(*cloud9.Options)) *cloud9.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.UntagResourceInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironment(ctx context.Context, params *cloud9.UpdateEnvironmentInput, optFns ...func(*cloud9.Options)) (*cloud9.UpdateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironment")
	}

	var r0 *cloud9.UpdateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.UpdateEnvironmentInput, ...func(*cloud9.Options)) (*cloud9.UpdateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.UpdateEnvironmentInput, ...func(*cloud9.Options)) *cloud9.UpdateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.UpdateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.UpdateEnvironmentInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironmentMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironmentMembership(ctx context.Context, params *cloud9.UpdateEnvironmentMembershipInput, optFns ...func(*cloud9.Options)) (*cloud9.UpdateEnvironmentMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironmentMembership")
	}

	var r0 *cloud9.UpdateEnvironmentMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.UpdateEnvironmentMembershipInput, ...func(*cloud9.Options)) (*cloud9.UpdateEnvironmentMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloud9.UpdateEnvironmentMembershipInput, ...func(*cloud9.Options)) *cloud9.UpdateEnvironmentMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloud9.UpdateEnvironmentMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloud9.UpdateEnvironmentMembershipInput, ...func(*cloud9.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
