// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	quicksight "github.com/aws/aws-sdk-go-v2/service/quicksight"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchCreateTopicReviewedAnswer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateTopicReviewedAnswer(ctx context.Context, params *quicksight.BatchCreateTopicReviewedAnswerInput, optFns ...func(*quicksight.Options)) (*quicksight.BatchCreateTopicReviewedAnswerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateTopicReviewedAnswer")
	}

	var r0 *quicksight.BatchCreateTopicReviewedAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.BatchCreateTopicReviewedAnswerInput, ...func(*quicksight.Options)) (*quicksight.BatchCreateTopicReviewedAnswerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.BatchCreateTopicReviewedAnswerInput, ...func(*quicksight.Options)) *quicksight.BatchCreateTopicReviewedAnswerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.BatchCreateTopicReviewedAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.BatchCreateTopicReviewedAnswerInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteTopicReviewedAnswer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteTopicReviewedAnswer(ctx context.Context, params *quicksight.BatchDeleteTopicReviewedAnswerInput, optFns ...func(*quicksight.Options)) (*quicksight.BatchDeleteTopicReviewedAnswerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteTopicReviewedAnswer")
	}

	var r0 *quicksight.BatchDeleteTopicReviewedAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.BatchDeleteTopicReviewedAnswerInput, ...func(*quicksight.Options)) (*quicksight.BatchDeleteTopicReviewedAnswerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.BatchDeleteTopicReviewedAnswerInput, ...func(*quicksight.Options)) *quicksight.BatchDeleteTopicReviewedAnswerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.BatchDeleteTopicReviewedAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.BatchDeleteTopicReviewedAnswerInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelIngestion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelIngestion(ctx context.Context, params *quicksight.CancelIngestionInput, optFns ...func(*quicksight.Options)) (*quicksight.CancelIngestionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelIngestion")
	}

	var r0 *quicksight.CancelIngestionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CancelIngestionInput, ...func(*quicksight.Options)) (*quicksight.CancelIngestionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CancelIngestionInput, ...func(*quicksight.Options)) *quicksight.CancelIngestionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CancelIngestionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CancelIngestionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccountCustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccountCustomization(ctx context.Context, params *quicksight.CreateAccountCustomizationInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateAccountCustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountCustomization")
	}

	var r0 *quicksight.CreateAccountCustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateAccountCustomizationInput, ...func(*quicksight.Options)) (*quicksight.CreateAccountCustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateAccountCustomizationInput, ...func(*quicksight.Options)) *quicksight.CreateAccountCustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateAccountCustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateAccountCustomizationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccountSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccountSubscription(ctx context.Context, params *quicksight.CreateAccountSubscriptionInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateAccountSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccountSubscription")
	}

	var r0 *quicksight.CreateAccountSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateAccountSubscriptionInput, ...func(*quicksight.Options)) (*quicksight.CreateAccountSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateAccountSubscriptionInput, ...func(*quicksight.Options)) *quicksight.CreateAccountSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateAccountSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateAccountSubscriptionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAnalysis(ctx context.Context, params *quicksight.CreateAnalysisInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAnalysis")
	}

	var r0 *quicksight.CreateAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateAnalysisInput, ...func(*quicksight.Options)) (*quicksight.CreateAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateAnalysisInput, ...func(*quicksight.Options)) *quicksight.CreateAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateAnalysisInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBrand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBrand(ctx context.Context, params *quicksight.CreateBrandInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateBrandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBrand")
	}

	var r0 *quicksight.CreateBrandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateBrandInput, ...func(*quicksight.Options)) (*quicksight.CreateBrandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateBrandInput, ...func(*quicksight.Options)) *quicksight.CreateBrandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateBrandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateBrandInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCustomPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCustomPermissions(ctx context.Context, params *quicksight.CreateCustomPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateCustomPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomPermissions")
	}

	var r0 *quicksight.CreateCustomPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateCustomPermissionsInput, ...func(*quicksight.Options)) (*quicksight.CreateCustomPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateCustomPermissionsInput, ...func(*quicksight.Options)) *quicksight.CreateCustomPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateCustomPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateCustomPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDashboard(ctx context.Context, params *quicksight.CreateDashboardInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDashboard")
	}

	var r0 *quicksight.CreateDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateDashboardInput, ...func(*quicksight.Options)) (*quicksight.CreateDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateDashboardInput, ...func(*quicksight.Options)) *quicksight.CreateDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateDashboardInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataSet(ctx context.Context, params *quicksight.CreateDataSetInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataSet")
	}

	var r0 *quicksight.CreateDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateDataSetInput, ...func(*quicksight.Options)) (*quicksight.CreateDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateDataSetInput, ...func(*quicksight.Options)) *quicksight.CreateDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateDataSetInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataSource(ctx context.Context, params *quicksight.CreateDataSourceInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataSource")
	}

	var r0 *quicksight.CreateDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateDataSourceInput, ...func(*quicksight.Options)) (*quicksight.CreateDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateDataSourceInput, ...func(*quicksight.Options)) *quicksight.CreateDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateDataSourceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFolder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFolder(ctx context.Context, params *quicksight.CreateFolderInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateFolderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFolder")
	}

	var r0 *quicksight.CreateFolderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateFolderInput, ...func(*quicksight.Options)) (*quicksight.CreateFolderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateFolderInput, ...func(*quicksight.Options)) *quicksight.CreateFolderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateFolderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateFolderInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFolderMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFolderMembership(ctx context.Context, params *quicksight.CreateFolderMembershipInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateFolderMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFolderMembership")
	}

	var r0 *quicksight.CreateFolderMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateFolderMembershipInput, ...func(*quicksight.Options)) (*quicksight.CreateFolderMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateFolderMembershipInput, ...func(*quicksight.Options)) *quicksight.CreateFolderMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateFolderMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateFolderMembershipInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroup(ctx context.Context, params *quicksight.CreateGroupInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *quicksight.CreateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateGroupInput, ...func(*quicksight.Options)) (*quicksight.CreateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateGroupInput, ...func(*quicksight.Options)) *quicksight.CreateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateGroupInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroupMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroupMembership(ctx context.Context, params *quicksight.CreateGroupMembershipInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateGroupMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupMembership")
	}

	var r0 *quicksight.CreateGroupMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateGroupMembershipInput, ...func(*quicksight.Options)) (*quicksight.CreateGroupMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateGroupMembershipInput, ...func(*quicksight.Options)) *quicksight.CreateGroupMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateGroupMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateGroupMembershipInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIAMPolicyAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIAMPolicyAssignment(ctx context.Context, params *quicksight.CreateIAMPolicyAssignmentInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateIAMPolicyAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIAMPolicyAssignment")
	}

	var r0 *quicksight.CreateIAMPolicyAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateIAMPolicyAssignmentInput, ...func(*quicksight.Options)) (*quicksight.CreateIAMPolicyAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateIAMPolicyAssignmentInput, ...func(*quicksight.Options)) *quicksight.CreateIAMPolicyAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateIAMPolicyAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateIAMPolicyAssignmentInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIngestion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIngestion(ctx context.Context, params *quicksight.CreateIngestionInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateIngestionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIngestion")
	}

	var r0 *quicksight.CreateIngestionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateIngestionInput, ...func(*quicksight.Options)) (*quicksight.CreateIngestionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateIngestionInput, ...func(*quicksight.Options)) *quicksight.CreateIngestionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateIngestionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateIngestionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNamespace(ctx context.Context, params *quicksight.CreateNamespaceInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNamespace")
	}

	var r0 *quicksight.CreateNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateNamespaceInput, ...func(*quicksight.Options)) (*quicksight.CreateNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateNamespaceInput, ...func(*quicksight.Options)) *quicksight.CreateNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateNamespaceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRefreshSchedule(ctx context.Context, params *quicksight.CreateRefreshScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateRefreshScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshSchedule")
	}

	var r0 *quicksight.CreateRefreshScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateRefreshScheduleInput, ...func(*quicksight.Options)) (*quicksight.CreateRefreshScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateRefreshScheduleInput, ...func(*quicksight.Options)) *quicksight.CreateRefreshScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateRefreshScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateRefreshScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoleMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoleMembership(ctx context.Context, params *quicksight.CreateRoleMembershipInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateRoleMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoleMembership")
	}

	var r0 *quicksight.CreateRoleMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateRoleMembershipInput, ...func(*quicksight.Options)) (*quicksight.CreateRoleMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateRoleMembershipInput, ...func(*quicksight.Options)) *quicksight.CreateRoleMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateRoleMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateRoleMembershipInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTemplate(ctx context.Context, params *quicksight.CreateTemplateInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 *quicksight.CreateTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateTemplateInput, ...func(*quicksight.Options)) (*quicksight.CreateTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateTemplateInput, ...func(*quicksight.Options)) *quicksight.CreateTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateTemplateInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTemplateAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTemplateAlias(ctx context.Context, params *quicksight.CreateTemplateAliasInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateTemplateAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplateAlias")
	}

	var r0 *quicksight.CreateTemplateAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateTemplateAliasInput, ...func(*quicksight.Options)) (*quicksight.CreateTemplateAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateTemplateAliasInput, ...func(*quicksight.Options)) *quicksight.CreateTemplateAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateTemplateAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateTemplateAliasInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTheme provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTheme(ctx context.Context, params *quicksight.CreateThemeInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateThemeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTheme")
	}

	var r0 *quicksight.CreateThemeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateThemeInput, ...func(*quicksight.Options)) (*quicksight.CreateThemeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateThemeInput, ...func(*quicksight.Options)) *quicksight.CreateThemeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateThemeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateThemeInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThemeAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateThemeAlias(ctx context.Context, params *quicksight.CreateThemeAliasInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateThemeAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateThemeAlias")
	}

	var r0 *quicksight.CreateThemeAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateThemeAliasInput, ...func(*quicksight.Options)) (*quicksight.CreateThemeAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateThemeAliasInput, ...func(*quicksight.Options)) *quicksight.CreateThemeAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateThemeAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateThemeAliasInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTopic(ctx context.Context, params *quicksight.CreateTopicInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopic")
	}

	var r0 *quicksight.CreateTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateTopicInput, ...func(*quicksight.Options)) (*quicksight.CreateTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateTopicInput, ...func(*quicksight.Options)) *quicksight.CreateTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateTopicInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTopicRefreshSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTopicRefreshSchedule(ctx context.Context, params *quicksight.CreateTopicRefreshScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateTopicRefreshScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTopicRefreshSchedule")
	}

	var r0 *quicksight.CreateTopicRefreshScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateTopicRefreshScheduleInput, ...func(*quicksight.Options)) (*quicksight.CreateTopicRefreshScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateTopicRefreshScheduleInput, ...func(*quicksight.Options)) *quicksight.CreateTopicRefreshScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateTopicRefreshScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateTopicRefreshScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVPCConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVPCConnection(ctx context.Context, params *quicksight.CreateVPCConnectionInput, optFns ...func(*quicksight.Options)) (*quicksight.CreateVPCConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVPCConnection")
	}

	var r0 *quicksight.CreateVPCConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateVPCConnectionInput, ...func(*quicksight.Options)) (*quicksight.CreateVPCConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.CreateVPCConnectionInput, ...func(*quicksight.Options)) *quicksight.CreateVPCConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.CreateVPCConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.CreateVPCConnectionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountCustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccountCustomization(ctx context.Context, params *quicksight.DeleteAccountCustomizationInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteAccountCustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountCustomization")
	}

	var r0 *quicksight.DeleteAccountCustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteAccountCustomizationInput, ...func(*quicksight.Options)) (*quicksight.DeleteAccountCustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteAccountCustomizationInput, ...func(*quicksight.Options)) *quicksight.DeleteAccountCustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteAccountCustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteAccountCustomizationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccountSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccountSubscription(ctx context.Context, params *quicksight.DeleteAccountSubscriptionInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteAccountSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccountSubscription")
	}

	var r0 *quicksight.DeleteAccountSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteAccountSubscriptionInput, ...func(*quicksight.Options)) (*quicksight.DeleteAccountSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteAccountSubscriptionInput, ...func(*quicksight.Options)) *quicksight.DeleteAccountSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteAccountSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteAccountSubscriptionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAnalysis(ctx context.Context, params *quicksight.DeleteAnalysisInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAnalysis")
	}

	var r0 *quicksight.DeleteAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteAnalysisInput, ...func(*quicksight.Options)) (*quicksight.DeleteAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteAnalysisInput, ...func(*quicksight.Options)) *quicksight.DeleteAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteAnalysisInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBrand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBrand(ctx context.Context, params *quicksight.DeleteBrandInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteBrandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBrand")
	}

	var r0 *quicksight.DeleteBrandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteBrandInput, ...func(*quicksight.Options)) (*quicksight.DeleteBrandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteBrandInput, ...func(*quicksight.Options)) *quicksight.DeleteBrandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteBrandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteBrandInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBrandAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBrandAssignment(ctx context.Context, params *quicksight.DeleteBrandAssignmentInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteBrandAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBrandAssignment")
	}

	var r0 *quicksight.DeleteBrandAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteBrandAssignmentInput, ...func(*quicksight.Options)) (*quicksight.DeleteBrandAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteBrandAssignmentInput, ...func(*quicksight.Options)) *quicksight.DeleteBrandAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteBrandAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteBrandAssignmentInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCustomPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCustomPermissions(ctx context.Context, params *quicksight.DeleteCustomPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteCustomPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCustomPermissions")
	}

	var r0 *quicksight.DeleteCustomPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteCustomPermissionsInput, ...func(*quicksight.Options)) (*quicksight.DeleteCustomPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteCustomPermissionsInput, ...func(*quicksight.Options)) *quicksight.DeleteCustomPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteCustomPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteCustomPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDashboard(ctx context.Context, params *quicksight.DeleteDashboardInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDashboard")
	}

	var r0 *quicksight.DeleteDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDashboardInput, ...func(*quicksight.Options)) (*quicksight.DeleteDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDashboardInput, ...func(*quicksight.Options)) *quicksight.DeleteDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteDashboardInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataSet(ctx context.Context, params *quicksight.DeleteDataSetInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataSet")
	}

	var r0 *quicksight.DeleteDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDataSetInput, ...func(*quicksight.Options)) (*quicksight.DeleteDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDataSetInput, ...func(*quicksight.Options)) *quicksight.DeleteDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteDataSetInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataSetRefreshProperties provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataSetRefreshProperties(ctx context.Context, params *quicksight.DeleteDataSetRefreshPropertiesInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteDataSetRefreshPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataSetRefreshProperties")
	}

	var r0 *quicksight.DeleteDataSetRefreshPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) (*quicksight.DeleteDataSetRefreshPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) *quicksight.DeleteDataSetRefreshPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteDataSetRefreshPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataSource(ctx context.Context, params *quicksight.DeleteDataSourceInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataSource")
	}

	var r0 *quicksight.DeleteDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDataSourceInput, ...func(*quicksight.Options)) (*quicksight.DeleteDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDataSourceInput, ...func(*quicksight.Options)) *quicksight.DeleteDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteDataSourceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDefaultQBusinessApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDefaultQBusinessApplication(ctx context.Context, params *quicksight.DeleteDefaultQBusinessApplicationInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteDefaultQBusinessApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDefaultQBusinessApplication")
	}

	var r0 *quicksight.DeleteDefaultQBusinessApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) (*quicksight.DeleteDefaultQBusinessApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) *quicksight.DeleteDefaultQBusinessApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteDefaultQBusinessApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFolder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFolder(ctx context.Context, params *quicksight.DeleteFolderInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteFolderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFolder")
	}

	var r0 *quicksight.DeleteFolderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteFolderInput, ...func(*quicksight.Options)) (*quicksight.DeleteFolderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteFolderInput, ...func(*quicksight.Options)) *quicksight.DeleteFolderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteFolderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteFolderInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFolderMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFolderMembership(ctx context.Context, params *quicksight.DeleteFolderMembershipInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteFolderMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFolderMembership")
	}

	var r0 *quicksight.DeleteFolderMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteFolderMembershipInput, ...func(*quicksight.Options)) (*quicksight.DeleteFolderMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteFolderMembershipInput, ...func(*quicksight.Options)) *quicksight.DeleteFolderMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteFolderMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteFolderMembershipInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGroup(ctx context.Context, params *quicksight.DeleteGroupInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *quicksight.DeleteGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteGroupInput, ...func(*quicksight.Options)) (*quicksight.DeleteGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteGroupInput, ...func(*quicksight.Options)) *quicksight.DeleteGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteGroupInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroupMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGroupMembership(ctx context.Context, params *quicksight.DeleteGroupMembershipInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteGroupMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupMembership")
	}

	var r0 *quicksight.DeleteGroupMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteGroupMembershipInput, ...func(*quicksight.Options)) (*quicksight.DeleteGroupMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteGroupMembershipInput, ...func(*quicksight.Options)) *quicksight.DeleteGroupMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteGroupMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteGroupMembershipInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIAMPolicyAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIAMPolicyAssignment(ctx context.Context, params *quicksight.DeleteIAMPolicyAssignmentInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteIAMPolicyAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIAMPolicyAssignment")
	}

	var r0 *quicksight.DeleteIAMPolicyAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteIAMPolicyAssignmentInput, ...func(*quicksight.Options)) (*quicksight.DeleteIAMPolicyAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteIAMPolicyAssignmentInput, ...func(*quicksight.Options)) *quicksight.DeleteIAMPolicyAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteIAMPolicyAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteIAMPolicyAssignmentInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentityPropagationConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIdentityPropagationConfig(ctx context.Context, params *quicksight.DeleteIdentityPropagationConfigInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteIdentityPropagationConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityPropagationConfig")
	}

	var r0 *quicksight.DeleteIdentityPropagationConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteIdentityPropagationConfigInput, ...func(*quicksight.Options)) (*quicksight.DeleteIdentityPropagationConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteIdentityPropagationConfigInput, ...func(*quicksight.Options)) *quicksight.DeleteIdentityPropagationConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteIdentityPropagationConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteIdentityPropagationConfigInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNamespace(ctx context.Context, params *quicksight.DeleteNamespaceInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamespace")
	}

	var r0 *quicksight.DeleteNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteNamespaceInput, ...func(*quicksight.Options)) (*quicksight.DeleteNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteNamespaceInput, ...func(*quicksight.Options)) *quicksight.DeleteNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteNamespaceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRefreshSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRefreshSchedule(ctx context.Context, params *quicksight.DeleteRefreshScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteRefreshScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshSchedule")
	}

	var r0 *quicksight.DeleteRefreshScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteRefreshScheduleInput, ...func(*quicksight.Options)) (*quicksight.DeleteRefreshScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteRefreshScheduleInput, ...func(*quicksight.Options)) *quicksight.DeleteRefreshScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteRefreshScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteRefreshScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoleCustomPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoleCustomPermission(ctx context.Context, params *quicksight.DeleteRoleCustomPermissionInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteRoleCustomPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleCustomPermission")
	}

	var r0 *quicksight.DeleteRoleCustomPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteRoleCustomPermissionInput, ...func(*quicksight.Options)) (*quicksight.DeleteRoleCustomPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteRoleCustomPermissionInput, ...func(*quicksight.Options)) *quicksight.DeleteRoleCustomPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteRoleCustomPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteRoleCustomPermissionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoleMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoleMembership(ctx context.Context, params *quicksight.DeleteRoleMembershipInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteRoleMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoleMembership")
	}

	var r0 *quicksight.DeleteRoleMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteRoleMembershipInput, ...func(*quicksight.Options)) (*quicksight.DeleteRoleMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteRoleMembershipInput, ...func(*quicksight.Options)) *quicksight.DeleteRoleMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteRoleMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteRoleMembershipInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTemplate(ctx context.Context, params *quicksight.DeleteTemplateInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 *quicksight.DeleteTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteTemplateInput, ...func(*quicksight.Options)) (*quicksight.DeleteTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteTemplateInput, ...func(*quicksight.Options)) *quicksight.DeleteTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteTemplateInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplateAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTemplateAlias(ctx context.Context, params *quicksight.DeleteTemplateAliasInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteTemplateAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplateAlias")
	}

	var r0 *quicksight.DeleteTemplateAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteTemplateAliasInput, ...func(*quicksight.Options)) (*quicksight.DeleteTemplateAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteTemplateAliasInput, ...func(*quicksight.Options)) *quicksight.DeleteTemplateAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteTemplateAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteTemplateAliasInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTheme provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTheme(ctx context.Context, params *quicksight.DeleteThemeInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteThemeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTheme")
	}

	var r0 *quicksight.DeleteThemeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteThemeInput, ...func(*quicksight.Options)) (*quicksight.DeleteThemeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteThemeInput, ...func(*quicksight.Options)) *quicksight.DeleteThemeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteThemeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteThemeInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThemeAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteThemeAlias(ctx context.Context, params *quicksight.DeleteThemeAliasInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteThemeAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteThemeAlias")
	}

	var r0 *quicksight.DeleteThemeAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteThemeAliasInput, ...func(*quicksight.Options)) (*quicksight.DeleteThemeAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteThemeAliasInput, ...func(*quicksight.Options)) *quicksight.DeleteThemeAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteThemeAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteThemeAliasInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTopic(ctx context.Context, params *quicksight.DeleteTopicInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopic")
	}

	var r0 *quicksight.DeleteTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteTopicInput, ...func(*quicksight.Options)) (*quicksight.DeleteTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteTopicInput, ...func(*quicksight.Options)) *quicksight.DeleteTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteTopicInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTopicRefreshSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTopicRefreshSchedule(ctx context.Context, params *quicksight.DeleteTopicRefreshScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteTopicRefreshScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTopicRefreshSchedule")
	}

	var r0 *quicksight.DeleteTopicRefreshScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteTopicRefreshScheduleInput, ...func(*quicksight.Options)) (*quicksight.DeleteTopicRefreshScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteTopicRefreshScheduleInput, ...func(*quicksight.Options)) *quicksight.DeleteTopicRefreshScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteTopicRefreshScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteTopicRefreshScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *quicksight.DeleteUserInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *quicksight.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteUserInput, ...func(*quicksight.Options)) (*quicksight.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteUserInput, ...func(*quicksight.Options)) *quicksight.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteUserInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserByPrincipalId provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserByPrincipalId(ctx context.Context, params *quicksight.DeleteUserByPrincipalIdInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteUserByPrincipalIdOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserByPrincipalId")
	}

	var r0 *quicksight.DeleteUserByPrincipalIdOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteUserByPrincipalIdInput, ...func(*quicksight.Options)) (*quicksight.DeleteUserByPrincipalIdOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteUserByPrincipalIdInput, ...func(*quicksight.Options)) *quicksight.DeleteUserByPrincipalIdOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteUserByPrincipalIdOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteUserByPrincipalIdInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserCustomPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserCustomPermission(ctx context.Context, params *quicksight.DeleteUserCustomPermissionInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteUserCustomPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserCustomPermission")
	}

	var r0 *quicksight.DeleteUserCustomPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteUserCustomPermissionInput, ...func(*quicksight.Options)) (*quicksight.DeleteUserCustomPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteUserCustomPermissionInput, ...func(*quicksight.Options)) *quicksight.DeleteUserCustomPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteUserCustomPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteUserCustomPermissionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVPCConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVPCConnection(ctx context.Context, params *quicksight.DeleteVPCConnectionInput, optFns ...func(*quicksight.Options)) (*quicksight.DeleteVPCConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVPCConnection")
	}

	var r0 *quicksight.DeleteVPCConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteVPCConnectionInput, ...func(*quicksight.Options)) (*quicksight.DeleteVPCConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DeleteVPCConnectionInput, ...func(*quicksight.Options)) *quicksight.DeleteVPCConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DeleteVPCConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DeleteVPCConnectionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountCustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountCustomization(ctx context.Context, params *quicksight.DescribeAccountCustomizationInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeAccountCustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountCustomization")
	}

	var r0 *quicksight.DescribeAccountCustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAccountCustomizationInput, ...func(*quicksight.Options)) (*quicksight.DescribeAccountCustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAccountCustomizationInput, ...func(*quicksight.Options)) *quicksight.DescribeAccountCustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeAccountCustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeAccountCustomizationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountSettings(ctx context.Context, params *quicksight.DescribeAccountSettingsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountSettings")
	}

	var r0 *quicksight.DescribeAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAccountSettingsInput, ...func(*quicksight.Options)) (*quicksight.DescribeAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAccountSettingsInput, ...func(*quicksight.Options)) *quicksight.DescribeAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeAccountSettingsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountSubscription(ctx context.Context, params *quicksight.DescribeAccountSubscriptionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeAccountSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountSubscription")
	}

	var r0 *quicksight.DescribeAccountSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAccountSubscriptionInput, ...func(*quicksight.Options)) (*quicksight.DescribeAccountSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAccountSubscriptionInput, ...func(*quicksight.Options)) *quicksight.DescribeAccountSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeAccountSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeAccountSubscriptionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAnalysis(ctx context.Context, params *quicksight.DescribeAnalysisInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAnalysis")
	}

	var r0 *quicksight.DescribeAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAnalysisInput, ...func(*quicksight.Options)) (*quicksight.DescribeAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAnalysisInput, ...func(*quicksight.Options)) *quicksight.DescribeAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeAnalysisInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAnalysisDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAnalysisDefinition(ctx context.Context, params *quicksight.DescribeAnalysisDefinitionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeAnalysisDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAnalysisDefinition")
	}

	var r0 *quicksight.DescribeAnalysisDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAnalysisDefinitionInput, ...func(*quicksight.Options)) (*quicksight.DescribeAnalysisDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAnalysisDefinitionInput, ...func(*quicksight.Options)) *quicksight.DescribeAnalysisDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeAnalysisDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeAnalysisDefinitionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAnalysisPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAnalysisPermissions(ctx context.Context, params *quicksight.DescribeAnalysisPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeAnalysisPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAnalysisPermissions")
	}

	var r0 *quicksight.DescribeAnalysisPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAnalysisPermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeAnalysisPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAnalysisPermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeAnalysisPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeAnalysisPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeAnalysisPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAssetBundleExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAssetBundleExportJob(ctx context.Context, params *quicksight.DescribeAssetBundleExportJobInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeAssetBundleExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAssetBundleExportJob")
	}

	var r0 *quicksight.DescribeAssetBundleExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAssetBundleExportJobInput, ...func(*quicksight.Options)) (*quicksight.DescribeAssetBundleExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAssetBundleExportJobInput, ...func(*quicksight.Options)) *quicksight.DescribeAssetBundleExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeAssetBundleExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeAssetBundleExportJobInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAssetBundleImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAssetBundleImportJob(ctx context.Context, params *quicksight.DescribeAssetBundleImportJobInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeAssetBundleImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAssetBundleImportJob")
	}

	var r0 *quicksight.DescribeAssetBundleImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAssetBundleImportJobInput, ...func(*quicksight.Options)) (*quicksight.DescribeAssetBundleImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeAssetBundleImportJobInput, ...func(*quicksight.Options)) *quicksight.DescribeAssetBundleImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeAssetBundleImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeAssetBundleImportJobInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBrand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBrand(ctx context.Context, params *quicksight.DescribeBrandInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeBrandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBrand")
	}

	var r0 *quicksight.DescribeBrandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeBrandInput, ...func(*quicksight.Options)) (*quicksight.DescribeBrandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeBrandInput, ...func(*quicksight.Options)) *quicksight.DescribeBrandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeBrandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeBrandInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBrandAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBrandAssignment(ctx context.Context, params *quicksight.DescribeBrandAssignmentInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeBrandAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBrandAssignment")
	}

	var r0 *quicksight.DescribeBrandAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeBrandAssignmentInput, ...func(*quicksight.Options)) (*quicksight.DescribeBrandAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeBrandAssignmentInput, ...func(*quicksight.Options)) *quicksight.DescribeBrandAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeBrandAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeBrandAssignmentInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBrandPublishedVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBrandPublishedVersion(ctx context.Context, params *quicksight.DescribeBrandPublishedVersionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeBrandPublishedVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBrandPublishedVersion")
	}

	var r0 *quicksight.DescribeBrandPublishedVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeBrandPublishedVersionInput, ...func(*quicksight.Options)) (*quicksight.DescribeBrandPublishedVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeBrandPublishedVersionInput, ...func(*quicksight.Options)) *quicksight.DescribeBrandPublishedVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeBrandPublishedVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeBrandPublishedVersionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCustomPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCustomPermissions(ctx context.Context, params *quicksight.DescribeCustomPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeCustomPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCustomPermissions")
	}

	var r0 *quicksight.DescribeCustomPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeCustomPermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeCustomPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeCustomPermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeCustomPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeCustomPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeCustomPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDashboard(ctx context.Context, params *quicksight.DescribeDashboardInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDashboard")
	}

	var r0 *quicksight.DescribeDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardInput, ...func(*quicksight.Options)) (*quicksight.DescribeDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardInput, ...func(*quicksight.Options)) *quicksight.DescribeDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDashboardInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDashboardDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDashboardDefinition(ctx context.Context, params *quicksight.DescribeDashboardDefinitionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDashboardDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDashboardDefinition")
	}

	var r0 *quicksight.DescribeDashboardDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardDefinitionInput, ...func(*quicksight.Options)) (*quicksight.DescribeDashboardDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardDefinitionInput, ...func(*quicksight.Options)) *quicksight.DescribeDashboardDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDashboardDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDashboardDefinitionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDashboardPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDashboardPermissions(ctx context.Context, params *quicksight.DescribeDashboardPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDashboardPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDashboardPermissions")
	}

	var r0 *quicksight.DescribeDashboardPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardPermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeDashboardPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardPermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeDashboardPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDashboardPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDashboardPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDashboardSnapshotJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDashboardSnapshotJob(ctx context.Context, params *quicksight.DescribeDashboardSnapshotJobInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDashboardSnapshotJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDashboardSnapshotJob")
	}

	var r0 *quicksight.DescribeDashboardSnapshotJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardSnapshotJobInput, ...func(*quicksight.Options)) (*quicksight.DescribeDashboardSnapshotJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardSnapshotJobInput, ...func(*quicksight.Options)) *quicksight.DescribeDashboardSnapshotJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDashboardSnapshotJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDashboardSnapshotJobInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDashboardSnapshotJobResult provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDashboardSnapshotJobResult(ctx context.Context, params *quicksight.DescribeDashboardSnapshotJobResultInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDashboardSnapshotJobResultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDashboardSnapshotJobResult")
	}

	var r0 *quicksight.DescribeDashboardSnapshotJobResultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardSnapshotJobResultInput, ...func(*quicksight.Options)) (*quicksight.DescribeDashboardSnapshotJobResultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardSnapshotJobResultInput, ...func(*quicksight.Options)) *quicksight.DescribeDashboardSnapshotJobResultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDashboardSnapshotJobResultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDashboardSnapshotJobResultInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDashboardsQAConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDashboardsQAConfiguration(ctx context.Context, params *quicksight.DescribeDashboardsQAConfigurationInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDashboardsQAConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDashboardsQAConfiguration")
	}

	var r0 *quicksight.DescribeDashboardsQAConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardsQAConfigurationInput, ...func(*quicksight.Options)) (*quicksight.DescribeDashboardsQAConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDashboardsQAConfigurationInput, ...func(*quicksight.Options)) *quicksight.DescribeDashboardsQAConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDashboardsQAConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDashboardsQAConfigurationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataSet(ctx context.Context, params *quicksight.DescribeDataSetInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataSet")
	}

	var r0 *quicksight.DescribeDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSetInput, ...func(*quicksight.Options)) (*quicksight.DescribeDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSetInput, ...func(*quicksight.Options)) *quicksight.DescribeDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDataSetInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataSetPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataSetPermissions(ctx context.Context, params *quicksight.DescribeDataSetPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDataSetPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataSetPermissions")
	}

	var r0 *quicksight.DescribeDataSetPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSetPermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeDataSetPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSetPermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeDataSetPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDataSetPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDataSetPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataSetRefreshProperties provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataSetRefreshProperties(ctx context.Context, params *quicksight.DescribeDataSetRefreshPropertiesInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDataSetRefreshPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataSetRefreshProperties")
	}

	var r0 *quicksight.DescribeDataSetRefreshPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) (*quicksight.DescribeDataSetRefreshPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) *quicksight.DescribeDataSetRefreshPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDataSetRefreshPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataSource(ctx context.Context, params *quicksight.DescribeDataSourceInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataSource")
	}

	var r0 *quicksight.DescribeDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSourceInput, ...func(*quicksight.Options)) (*quicksight.DescribeDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSourceInput, ...func(*quicksight.Options)) *quicksight.DescribeDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDataSourceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataSourcePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataSourcePermissions(ctx context.Context, params *quicksight.DescribeDataSourcePermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDataSourcePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataSourcePermissions")
	}

	var r0 *quicksight.DescribeDataSourcePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSourcePermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeDataSourcePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDataSourcePermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeDataSourcePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDataSourcePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDataSourcePermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDefaultQBusinessApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDefaultQBusinessApplication(ctx context.Context, params *quicksight.DescribeDefaultQBusinessApplicationInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeDefaultQBusinessApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDefaultQBusinessApplication")
	}

	var r0 *quicksight.DescribeDefaultQBusinessApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) (*quicksight.DescribeDefaultQBusinessApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) *quicksight.DescribeDefaultQBusinessApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeDefaultQBusinessApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFolder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFolder(ctx context.Context, params *quicksight.DescribeFolderInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeFolderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFolder")
	}

	var r0 *quicksight.DescribeFolderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeFolderInput, ...func(*quicksight.Options)) (*quicksight.DescribeFolderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeFolderInput, ...func(*quicksight.Options)) *quicksight.DescribeFolderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeFolderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeFolderInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFolderPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFolderPermissions(ctx context.Context, params *quicksight.DescribeFolderPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeFolderPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFolderPermissions")
	}

	var r0 *quicksight.DescribeFolderPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeFolderPermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeFolderPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeFolderPermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeFolderPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeFolderPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeFolderPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFolderResolvedPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFolderResolvedPermissions(ctx context.Context, params *quicksight.DescribeFolderResolvedPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeFolderResolvedPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFolderResolvedPermissions")
	}

	var r0 *quicksight.DescribeFolderResolvedPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeFolderResolvedPermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeFolderResolvedPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeFolderResolvedPermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeFolderResolvedPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeFolderResolvedPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeFolderResolvedPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGroup(ctx context.Context, params *quicksight.DescribeGroupInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGroup")
	}

	var r0 *quicksight.DescribeGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeGroupInput, ...func(*quicksight.Options)) (*quicksight.DescribeGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeGroupInput, ...func(*quicksight.Options)) *quicksight.DescribeGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeGroupInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGroupMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGroupMembership(ctx context.Context, params *quicksight.DescribeGroupMembershipInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeGroupMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGroupMembership")
	}

	var r0 *quicksight.DescribeGroupMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeGroupMembershipInput, ...func(*quicksight.Options)) (*quicksight.DescribeGroupMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeGroupMembershipInput, ...func(*quicksight.Options)) *quicksight.DescribeGroupMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeGroupMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeGroupMembershipInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIAMPolicyAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIAMPolicyAssignment(ctx context.Context, params *quicksight.DescribeIAMPolicyAssignmentInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeIAMPolicyAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIAMPolicyAssignment")
	}

	var r0 *quicksight.DescribeIAMPolicyAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeIAMPolicyAssignmentInput, ...func(*quicksight.Options)) (*quicksight.DescribeIAMPolicyAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeIAMPolicyAssignmentInput, ...func(*quicksight.Options)) *quicksight.DescribeIAMPolicyAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeIAMPolicyAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeIAMPolicyAssignmentInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIngestion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIngestion(ctx context.Context, params *quicksight.DescribeIngestionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeIngestionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIngestion")
	}

	var r0 *quicksight.DescribeIngestionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeIngestionInput, ...func(*quicksight.Options)) (*quicksight.DescribeIngestionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeIngestionInput, ...func(*quicksight.Options)) *quicksight.DescribeIngestionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeIngestionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeIngestionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIpRestriction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIpRestriction(ctx context.Context, params *quicksight.DescribeIpRestrictionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeIpRestrictionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIpRestriction")
	}

	var r0 *quicksight.DescribeIpRestrictionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeIpRestrictionInput, ...func(*quicksight.Options)) (*quicksight.DescribeIpRestrictionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeIpRestrictionInput, ...func(*quicksight.Options)) *quicksight.DescribeIpRestrictionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeIpRestrictionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeIpRestrictionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeKeyRegistration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeKeyRegistration(ctx context.Context, params *quicksight.DescribeKeyRegistrationInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeKeyRegistrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeKeyRegistration")
	}

	var r0 *quicksight.DescribeKeyRegistrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeKeyRegistrationInput, ...func(*quicksight.Options)) (*quicksight.DescribeKeyRegistrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeKeyRegistrationInput, ...func(*quicksight.Options)) *quicksight.DescribeKeyRegistrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeKeyRegistrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeKeyRegistrationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNamespace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNamespace(ctx context.Context, params *quicksight.DescribeNamespaceInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeNamespaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNamespace")
	}

	var r0 *quicksight.DescribeNamespaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeNamespaceInput, ...func(*quicksight.Options)) (*quicksight.DescribeNamespaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeNamespaceInput, ...func(*quicksight.Options)) *quicksight.DescribeNamespaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeNamespaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeNamespaceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQPersonalizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeQPersonalizationConfiguration(ctx context.Context, params *quicksight.DescribeQPersonalizationConfigurationInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeQPersonalizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeQPersonalizationConfiguration")
	}

	var r0 *quicksight.DescribeQPersonalizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeQPersonalizationConfigurationInput, ...func(*quicksight.Options)) (*quicksight.DescribeQPersonalizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeQPersonalizationConfigurationInput, ...func(*quicksight.Options)) *quicksight.DescribeQPersonalizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeQPersonalizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeQPersonalizationConfigurationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeQuickSightQSearchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeQuickSightQSearchConfiguration(ctx context.Context, params *quicksight.DescribeQuickSightQSearchConfigurationInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeQuickSightQSearchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeQuickSightQSearchConfiguration")
	}

	var r0 *quicksight.DescribeQuickSightQSearchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeQuickSightQSearchConfigurationInput, ...func(*quicksight.Options)) (*quicksight.DescribeQuickSightQSearchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeQuickSightQSearchConfigurationInput, ...func(*quicksight.Options)) *quicksight.DescribeQuickSightQSearchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeQuickSightQSearchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeQuickSightQSearchConfigurationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRefreshSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRefreshSchedule(ctx context.Context, params *quicksight.DescribeRefreshScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeRefreshScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRefreshSchedule")
	}

	var r0 *quicksight.DescribeRefreshScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeRefreshScheduleInput, ...func(*quicksight.Options)) (*quicksight.DescribeRefreshScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeRefreshScheduleInput, ...func(*quicksight.Options)) *quicksight.DescribeRefreshScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeRefreshScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeRefreshScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRoleCustomPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRoleCustomPermission(ctx context.Context, params *quicksight.DescribeRoleCustomPermissionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeRoleCustomPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRoleCustomPermission")
	}

	var r0 *quicksight.DescribeRoleCustomPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeRoleCustomPermissionInput, ...func(*quicksight.Options)) (*quicksight.DescribeRoleCustomPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeRoleCustomPermissionInput, ...func(*quicksight.Options)) *quicksight.DescribeRoleCustomPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeRoleCustomPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeRoleCustomPermissionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTemplate(ctx context.Context, params *quicksight.DescribeTemplateInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTemplate")
	}

	var r0 *quicksight.DescribeTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTemplateInput, ...func(*quicksight.Options)) (*quicksight.DescribeTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTemplateInput, ...func(*quicksight.Options)) *quicksight.DescribeTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeTemplateInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTemplateAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTemplateAlias(ctx context.Context, params *quicksight.DescribeTemplateAliasInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeTemplateAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTemplateAlias")
	}

	var r0 *quicksight.DescribeTemplateAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTemplateAliasInput, ...func(*quicksight.Options)) (*quicksight.DescribeTemplateAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTemplateAliasInput, ...func(*quicksight.Options)) *quicksight.DescribeTemplateAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeTemplateAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeTemplateAliasInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTemplateDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTemplateDefinition(ctx context.Context, params *quicksight.DescribeTemplateDefinitionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeTemplateDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTemplateDefinition")
	}

	var r0 *quicksight.DescribeTemplateDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTemplateDefinitionInput, ...func(*quicksight.Options)) (*quicksight.DescribeTemplateDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTemplateDefinitionInput, ...func(*quicksight.Options)) *quicksight.DescribeTemplateDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeTemplateDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeTemplateDefinitionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTemplatePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTemplatePermissions(ctx context.Context, params *quicksight.DescribeTemplatePermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeTemplatePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTemplatePermissions")
	}

	var r0 *quicksight.DescribeTemplatePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTemplatePermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeTemplatePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTemplatePermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeTemplatePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeTemplatePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeTemplatePermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTheme provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTheme(ctx context.Context, params *quicksight.DescribeThemeInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeThemeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTheme")
	}

	var r0 *quicksight.DescribeThemeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeThemeInput, ...func(*quicksight.Options)) (*quicksight.DescribeThemeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeThemeInput, ...func(*quicksight.Options)) *quicksight.DescribeThemeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeThemeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeThemeInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeThemeAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeThemeAlias(ctx context.Context, params *quicksight.DescribeThemeAliasInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeThemeAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeThemeAlias")
	}

	var r0 *quicksight.DescribeThemeAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeThemeAliasInput, ...func(*quicksight.Options)) (*quicksight.DescribeThemeAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeThemeAliasInput, ...func(*quicksight.Options)) *quicksight.DescribeThemeAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeThemeAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeThemeAliasInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeThemePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeThemePermissions(ctx context.Context, params *quicksight.DescribeThemePermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeThemePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeThemePermissions")
	}

	var r0 *quicksight.DescribeThemePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeThemePermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeThemePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeThemePermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeThemePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeThemePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeThemePermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTopic(ctx context.Context, params *quicksight.DescribeTopicInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTopic")
	}

	var r0 *quicksight.DescribeTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTopicInput, ...func(*quicksight.Options)) (*quicksight.DescribeTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTopicInput, ...func(*quicksight.Options)) *quicksight.DescribeTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeTopicInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTopicPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTopicPermissions(ctx context.Context, params *quicksight.DescribeTopicPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeTopicPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTopicPermissions")
	}

	var r0 *quicksight.DescribeTopicPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTopicPermissionsInput, ...func(*quicksight.Options)) (*quicksight.DescribeTopicPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTopicPermissionsInput, ...func(*quicksight.Options)) *quicksight.DescribeTopicPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeTopicPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeTopicPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTopicRefresh provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTopicRefresh(ctx context.Context, params *quicksight.DescribeTopicRefreshInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeTopicRefreshOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTopicRefresh")
	}

	var r0 *quicksight.DescribeTopicRefreshOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTopicRefreshInput, ...func(*quicksight.Options)) (*quicksight.DescribeTopicRefreshOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTopicRefreshInput, ...func(*quicksight.Options)) *quicksight.DescribeTopicRefreshOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeTopicRefreshOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeTopicRefreshInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTopicRefreshSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTopicRefreshSchedule(ctx context.Context, params *quicksight.DescribeTopicRefreshScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeTopicRefreshScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTopicRefreshSchedule")
	}

	var r0 *quicksight.DescribeTopicRefreshScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTopicRefreshScheduleInput, ...func(*quicksight.Options)) (*quicksight.DescribeTopicRefreshScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeTopicRefreshScheduleInput, ...func(*quicksight.Options)) *quicksight.DescribeTopicRefreshScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeTopicRefreshScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeTopicRefreshScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUser(ctx context.Context, params *quicksight.DescribeUserInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUser")
	}

	var r0 *quicksight.DescribeUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeUserInput, ...func(*quicksight.Options)) (*quicksight.DescribeUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeUserInput, ...func(*quicksight.Options)) *quicksight.DescribeUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeUserInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVPCConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVPCConnection(ctx context.Context, params *quicksight.DescribeVPCConnectionInput, optFns ...func(*quicksight.Options)) (*quicksight.DescribeVPCConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVPCConnection")
	}

	var r0 *quicksight.DescribeVPCConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeVPCConnectionInput, ...func(*quicksight.Options)) (*quicksight.DescribeVPCConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.DescribeVPCConnectionInput, ...func(*quicksight.Options)) *quicksight.DescribeVPCConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.DescribeVPCConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.DescribeVPCConnectionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateEmbedUrlForAnonymousUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateEmbedUrlForAnonymousUser(ctx context.Context, params *quicksight.GenerateEmbedUrlForAnonymousUserInput, optFns ...func(*quicksight.Options)) (*quicksight.GenerateEmbedUrlForAnonymousUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateEmbedUrlForAnonymousUser")
	}

	var r0 *quicksight.GenerateEmbedUrlForAnonymousUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GenerateEmbedUrlForAnonymousUserInput, ...func(*quicksight.Options)) (*quicksight.GenerateEmbedUrlForAnonymousUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GenerateEmbedUrlForAnonymousUserInput, ...func(*quicksight.Options)) *quicksight.GenerateEmbedUrlForAnonymousUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.GenerateEmbedUrlForAnonymousUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.GenerateEmbedUrlForAnonymousUserInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateEmbedUrlForRegisteredUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateEmbedUrlForRegisteredUser(ctx context.Context, params *quicksight.GenerateEmbedUrlForRegisteredUserInput, optFns ...func(*quicksight.Options)) (*quicksight.GenerateEmbedUrlForRegisteredUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateEmbedUrlForRegisteredUser")
	}

	var r0 *quicksight.GenerateEmbedUrlForRegisteredUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GenerateEmbedUrlForRegisteredUserInput, ...func(*quicksight.Options)) (*quicksight.GenerateEmbedUrlForRegisteredUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GenerateEmbedUrlForRegisteredUserInput, ...func(*quicksight.Options)) *quicksight.GenerateEmbedUrlForRegisteredUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.GenerateEmbedUrlForRegisteredUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.GenerateEmbedUrlForRegisteredUserInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateEmbedUrlForRegisteredUserWithIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateEmbedUrlForRegisteredUserWithIdentity(ctx context.Context, params *quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityInput, optFns ...func(*quicksight.Options)) (*quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateEmbedUrlForRegisteredUserWithIdentity")
	}

	var r0 *quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityInput, ...func(*quicksight.Options)) (*quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityInput, ...func(*quicksight.Options)) *quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.GenerateEmbedUrlForRegisteredUserWithIdentityInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDashboardEmbedUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDashboardEmbedUrl(ctx context.Context, params *quicksight.GetDashboardEmbedUrlInput, optFns ...func(*quicksight.Options)) (*quicksight.GetDashboardEmbedUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDashboardEmbedUrl")
	}

	var r0 *quicksight.GetDashboardEmbedUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GetDashboardEmbedUrlInput, ...func(*quicksight.Options)) (*quicksight.GetDashboardEmbedUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GetDashboardEmbedUrlInput, ...func(*quicksight.Options)) *quicksight.GetDashboardEmbedUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.GetDashboardEmbedUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.GetDashboardEmbedUrlInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionEmbedUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSessionEmbedUrl(ctx context.Context, params *quicksight.GetSessionEmbedUrlInput, optFns ...func(*quicksight.Options)) (*quicksight.GetSessionEmbedUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionEmbedUrl")
	}

	var r0 *quicksight.GetSessionEmbedUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GetSessionEmbedUrlInput, ...func(*quicksight.Options)) (*quicksight.GetSessionEmbedUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.GetSessionEmbedUrlInput, ...func(*quicksight.Options)) *quicksight.GetSessionEmbedUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.GetSessionEmbedUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.GetSessionEmbedUrlInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAnalyses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAnalyses(ctx context.Context, params *quicksight.ListAnalysesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListAnalysesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAnalyses")
	}

	var r0 *quicksight.ListAnalysesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListAnalysesInput, ...func(*quicksight.Options)) (*quicksight.ListAnalysesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListAnalysesInput, ...func(*quicksight.Options)) *quicksight.ListAnalysesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListAnalysesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListAnalysesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssetBundleExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssetBundleExportJobs(ctx context.Context, params *quicksight.ListAssetBundleExportJobsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListAssetBundleExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssetBundleExportJobs")
	}

	var r0 *quicksight.ListAssetBundleExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListAssetBundleExportJobsInput, ...func(*quicksight.Options)) (*quicksight.ListAssetBundleExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListAssetBundleExportJobsInput, ...func(*quicksight.Options)) *quicksight.ListAssetBundleExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListAssetBundleExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListAssetBundleExportJobsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssetBundleImportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssetBundleImportJobs(ctx context.Context, params *quicksight.ListAssetBundleImportJobsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListAssetBundleImportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssetBundleImportJobs")
	}

	var r0 *quicksight.ListAssetBundleImportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListAssetBundleImportJobsInput, ...func(*quicksight.Options)) (*quicksight.ListAssetBundleImportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListAssetBundleImportJobsInput, ...func(*quicksight.Options)) *quicksight.ListAssetBundleImportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListAssetBundleImportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListAssetBundleImportJobsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBrands provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBrands(ctx context.Context, params *quicksight.ListBrandsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListBrandsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBrands")
	}

	var r0 *quicksight.ListBrandsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListBrandsInput, ...func(*quicksight.Options)) (*quicksight.ListBrandsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListBrandsInput, ...func(*quicksight.Options)) *quicksight.ListBrandsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListBrandsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListBrandsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCustomPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCustomPermissions(ctx context.Context, params *quicksight.ListCustomPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListCustomPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCustomPermissions")
	}

	var r0 *quicksight.ListCustomPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListCustomPermissionsInput, ...func(*quicksight.Options)) (*quicksight.ListCustomPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListCustomPermissionsInput, ...func(*quicksight.Options)) *quicksight.ListCustomPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListCustomPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListCustomPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDashboardVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDashboardVersions(ctx context.Context, params *quicksight.ListDashboardVersionsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListDashboardVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDashboardVersions")
	}

	var r0 *quicksight.ListDashboardVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListDashboardVersionsInput, ...func(*quicksight.Options)) (*quicksight.ListDashboardVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListDashboardVersionsInput, ...func(*quicksight.Options)) *quicksight.ListDashboardVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListDashboardVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListDashboardVersionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDashboards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDashboards(ctx context.Context, params *quicksight.ListDashboardsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListDashboardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDashboards")
	}

	var r0 *quicksight.ListDashboardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListDashboardsInput, ...func(*quicksight.Options)) (*quicksight.ListDashboardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListDashboardsInput, ...func(*quicksight.Options)) *quicksight.ListDashboardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListDashboardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListDashboardsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSets(ctx context.Context, params *quicksight.ListDataSetsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListDataSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSets")
	}

	var r0 *quicksight.ListDataSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListDataSetsInput, ...func(*quicksight.Options)) (*quicksight.ListDataSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListDataSetsInput, ...func(*quicksight.Options)) *quicksight.ListDataSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListDataSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListDataSetsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSources(ctx context.Context, params *quicksight.ListDataSourcesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListDataSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSources")
	}

	var r0 *quicksight.ListDataSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListDataSourcesInput, ...func(*quicksight.Options)) (*quicksight.ListDataSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListDataSourcesInput, ...func(*quicksight.Options)) *quicksight.ListDataSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListDataSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListDataSourcesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFolderMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFolderMembers(ctx context.Context, params *quicksight.ListFolderMembersInput, optFns ...func(*quicksight.Options)) (*quicksight.ListFolderMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFolderMembers")
	}

	var r0 *quicksight.ListFolderMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListFolderMembersInput, ...func(*quicksight.Options)) (*quicksight.ListFolderMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListFolderMembersInput, ...func(*quicksight.Options)) *quicksight.ListFolderMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListFolderMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListFolderMembersInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFolders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFolders(ctx context.Context, params *quicksight.ListFoldersInput, optFns ...func(*quicksight.Options)) (*quicksight.ListFoldersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFolders")
	}

	var r0 *quicksight.ListFoldersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListFoldersInput, ...func(*quicksight.Options)) (*quicksight.ListFoldersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListFoldersInput, ...func(*quicksight.Options)) *quicksight.ListFoldersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListFoldersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListFoldersInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFoldersForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFoldersForResource(ctx context.Context, params *quicksight.ListFoldersForResourceInput, optFns ...func(*quicksight.Options)) (*quicksight.ListFoldersForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFoldersForResource")
	}

	var r0 *quicksight.ListFoldersForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListFoldersForResourceInput, ...func(*quicksight.Options)) (*quicksight.ListFoldersForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListFoldersForResourceInput, ...func(*quicksight.Options)) *quicksight.ListFoldersForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListFoldersForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListFoldersForResourceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroupMemberships(ctx context.Context, params *quicksight.ListGroupMembershipsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListGroupMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMemberships")
	}

	var r0 *quicksight.ListGroupMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListGroupMembershipsInput, ...func(*quicksight.Options)) (*quicksight.ListGroupMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListGroupMembershipsInput, ...func(*quicksight.Options)) *quicksight.ListGroupMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListGroupMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListGroupMembershipsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroups(ctx context.Context, params *quicksight.ListGroupsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *quicksight.ListGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListGroupsInput, ...func(*quicksight.Options)) (*quicksight.ListGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListGroupsInput, ...func(*quicksight.Options)) *quicksight.ListGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListGroupsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIAMPolicyAssignments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIAMPolicyAssignments(ctx context.Context, params *quicksight.ListIAMPolicyAssignmentsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListIAMPolicyAssignmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIAMPolicyAssignments")
	}

	var r0 *quicksight.ListIAMPolicyAssignmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListIAMPolicyAssignmentsInput, ...func(*quicksight.Options)) (*quicksight.ListIAMPolicyAssignmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListIAMPolicyAssignmentsInput, ...func(*quicksight.Options)) *quicksight.ListIAMPolicyAssignmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListIAMPolicyAssignmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListIAMPolicyAssignmentsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIAMPolicyAssignmentsForUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIAMPolicyAssignmentsForUser(ctx context.Context, params *quicksight.ListIAMPolicyAssignmentsForUserInput, optFns ...func(*quicksight.Options)) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIAMPolicyAssignmentsForUser")
	}

	var r0 *quicksight.ListIAMPolicyAssignmentsForUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListIAMPolicyAssignmentsForUserInput, ...func(*quicksight.Options)) (*quicksight.ListIAMPolicyAssignmentsForUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListIAMPolicyAssignmentsForUserInput, ...func(*quicksight.Options)) *quicksight.ListIAMPolicyAssignmentsForUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListIAMPolicyAssignmentsForUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListIAMPolicyAssignmentsForUserInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentityPropagationConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIdentityPropagationConfigs(ctx context.Context, params *quicksight.ListIdentityPropagationConfigsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListIdentityPropagationConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentityPropagationConfigs")
	}

	var r0 *quicksight.ListIdentityPropagationConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListIdentityPropagationConfigsInput, ...func(*quicksight.Options)) (*quicksight.ListIdentityPropagationConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListIdentityPropagationConfigsInput, ...func(*quicksight.Options)) *quicksight.ListIdentityPropagationConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListIdentityPropagationConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListIdentityPropagationConfigsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIngestions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIngestions(ctx context.Context, params *quicksight.ListIngestionsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListIngestionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIngestions")
	}

	var r0 *quicksight.ListIngestionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListIngestionsInput, ...func(*quicksight.Options)) (*quicksight.ListIngestionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListIngestionsInput, ...func(*quicksight.Options)) *quicksight.ListIngestionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListIngestionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListIngestionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamespaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNamespaces(ctx context.Context, params *quicksight.ListNamespacesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListNamespacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNamespaces")
	}

	var r0 *quicksight.ListNamespacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListNamespacesInput, ...func(*quicksight.Options)) (*quicksight.ListNamespacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListNamespacesInput, ...func(*quicksight.Options)) *quicksight.ListNamespacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListNamespacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListNamespacesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRefreshSchedules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRefreshSchedules(ctx context.Context, params *quicksight.ListRefreshSchedulesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListRefreshSchedulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRefreshSchedules")
	}

	var r0 *quicksight.ListRefreshSchedulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListRefreshSchedulesInput, ...func(*quicksight.Options)) (*quicksight.ListRefreshSchedulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListRefreshSchedulesInput, ...func(*quicksight.Options)) *quicksight.ListRefreshSchedulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListRefreshSchedulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListRefreshSchedulesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoleMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoleMemberships(ctx context.Context, params *quicksight.ListRoleMembershipsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListRoleMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoleMemberships")
	}

	var r0 *quicksight.ListRoleMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListRoleMembershipsInput, ...func(*quicksight.Options)) (*quicksight.ListRoleMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListRoleMembershipsInput, ...func(*quicksight.Options)) *quicksight.ListRoleMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListRoleMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListRoleMembershipsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *quicksight.ListTagsForResourceInput, optFns ...func(*quicksight.Options)) (*quicksight.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *quicksight.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTagsForResourceInput, ...func(*quicksight.Options)) (*quicksight.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTagsForResourceInput, ...func(*quicksight.Options)) *quicksight.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListTagsForResourceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplateAliases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplateAliases(ctx context.Context, params *quicksight.ListTemplateAliasesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListTemplateAliasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateAliases")
	}

	var r0 *quicksight.ListTemplateAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTemplateAliasesInput, ...func(*quicksight.Options)) (*quicksight.ListTemplateAliasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTemplateAliasesInput, ...func(*quicksight.Options)) *quicksight.ListTemplateAliasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListTemplateAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListTemplateAliasesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplateVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplateVersions(ctx context.Context, params *quicksight.ListTemplateVersionsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListTemplateVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateVersions")
	}

	var r0 *quicksight.ListTemplateVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTemplateVersionsInput, ...func(*quicksight.Options)) (*quicksight.ListTemplateVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTemplateVersionsInput, ...func(*quicksight.Options)) *quicksight.ListTemplateVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListTemplateVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListTemplateVersionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplates(ctx context.Context, params *quicksight.ListTemplatesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplates")
	}

	var r0 *quicksight.ListTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTemplatesInput, ...func(*quicksight.Options)) (*quicksight.ListTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTemplatesInput, ...func(*quicksight.Options)) *quicksight.ListTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListTemplatesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThemeAliases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThemeAliases(ctx context.Context, params *quicksight.ListThemeAliasesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListThemeAliasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThemeAliases")
	}

	var r0 *quicksight.ListThemeAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListThemeAliasesInput, ...func(*quicksight.Options)) (*quicksight.ListThemeAliasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListThemeAliasesInput, ...func(*quicksight.Options)) *quicksight.ListThemeAliasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListThemeAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListThemeAliasesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThemeVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThemeVersions(ctx context.Context, params *quicksight.ListThemeVersionsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListThemeVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThemeVersions")
	}

	var r0 *quicksight.ListThemeVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListThemeVersionsInput, ...func(*quicksight.Options)) (*quicksight.ListThemeVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListThemeVersionsInput, ...func(*quicksight.Options)) *quicksight.ListThemeVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListThemeVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListThemeVersionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThemes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThemes(ctx context.Context, params *quicksight.ListThemesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListThemesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThemes")
	}

	var r0 *quicksight.ListThemesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListThemesInput, ...func(*quicksight.Options)) (*quicksight.ListThemesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListThemesInput, ...func(*quicksight.Options)) *quicksight.ListThemesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListThemesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListThemesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopicRefreshSchedules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTopicRefreshSchedules(ctx context.Context, params *quicksight.ListTopicRefreshSchedulesInput, optFns ...func(*quicksight.Options)) (*quicksight.ListTopicRefreshSchedulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopicRefreshSchedules")
	}

	var r0 *quicksight.ListTopicRefreshSchedulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTopicRefreshSchedulesInput, ...func(*quicksight.Options)) (*quicksight.ListTopicRefreshSchedulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTopicRefreshSchedulesInput, ...func(*quicksight.Options)) *quicksight.ListTopicRefreshSchedulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListTopicRefreshSchedulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListTopicRefreshSchedulesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopicReviewedAnswers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTopicReviewedAnswers(ctx context.Context, params *quicksight.ListTopicReviewedAnswersInput, optFns ...func(*quicksight.Options)) (*quicksight.ListTopicReviewedAnswersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopicReviewedAnswers")
	}

	var r0 *quicksight.ListTopicReviewedAnswersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTopicReviewedAnswersInput, ...func(*quicksight.Options)) (*quicksight.ListTopicReviewedAnswersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTopicReviewedAnswersInput, ...func(*quicksight.Options)) *quicksight.ListTopicReviewedAnswersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListTopicReviewedAnswersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListTopicReviewedAnswersInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTopics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTopics(ctx context.Context, params *quicksight.ListTopicsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListTopicsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTopics")
	}

	var r0 *quicksight.ListTopicsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTopicsInput, ...func(*quicksight.Options)) (*quicksight.ListTopicsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListTopicsInput, ...func(*quicksight.Options)) *quicksight.ListTopicsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListTopicsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListTopicsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserGroups(ctx context.Context, params *quicksight.ListUserGroupsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListUserGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserGroups")
	}

	var r0 *quicksight.ListUserGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListUserGroupsInput, ...func(*quicksight.Options)) (*quicksight.ListUserGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListUserGroupsInput, ...func(*quicksight.Options)) *quicksight.ListUserGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListUserGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListUserGroupsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *quicksight.ListUsersInput, optFns ...func(*quicksight.Options)) (*quicksight.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *quicksight.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListUsersInput, ...func(*quicksight.Options)) (*quicksight.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListUsersInput, ...func(*quicksight.Options)) *quicksight.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListUsersInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVPCConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVPCConnections(ctx context.Context, params *quicksight.ListVPCConnectionsInput, optFns ...func(*quicksight.Options)) (*quicksight.ListVPCConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVPCConnections")
	}

	var r0 *quicksight.ListVPCConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListVPCConnectionsInput, ...func(*quicksight.Options)) (*quicksight.ListVPCConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.ListVPCConnectionsInput, ...func(*quicksight.Options)) *quicksight.ListVPCConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.ListVPCConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.ListVPCConnectionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() quicksight.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 quicksight.Options
	if rf, ok := ret.Get(0).(func() quicksight.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(quicksight.Options)
	}

	return r0
}

// PredictQAResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PredictQAResults(ctx context.Context, params *quicksight.PredictQAResultsInput, optFns ...func(*quicksight.Options)) (*quicksight.PredictQAResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PredictQAResults")
	}

	var r0 *quicksight.PredictQAResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.PredictQAResultsInput, ...func(*quicksight.Options)) (*quicksight.PredictQAResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.PredictQAResultsInput, ...func(*quicksight.Options)) *quicksight.PredictQAResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.PredictQAResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.PredictQAResultsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutDataSetRefreshProperties provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutDataSetRefreshProperties(ctx context.Context, params *quicksight.PutDataSetRefreshPropertiesInput, optFns ...func(*quicksight.Options)) (*quicksight.PutDataSetRefreshPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutDataSetRefreshProperties")
	}

	var r0 *quicksight.PutDataSetRefreshPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.PutDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) (*quicksight.PutDataSetRefreshPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.PutDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) *quicksight.PutDataSetRefreshPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.PutDataSetRefreshPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.PutDataSetRefreshPropertiesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterUser(ctx context.Context, params *quicksight.RegisterUserInput, optFns ...func(*quicksight.Options)) (*quicksight.RegisterUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *quicksight.RegisterUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.RegisterUserInput, ...func(*quicksight.Options)) (*quicksight.RegisterUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.RegisterUserInput, ...func(*quicksight.Options)) *quicksight.RegisterUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.RegisterUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.RegisterUserInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreAnalysis(ctx context.Context, params *quicksight.RestoreAnalysisInput, optFns ...func(*quicksight.Options)) (*quicksight.RestoreAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreAnalysis")
	}

	var r0 *quicksight.RestoreAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.RestoreAnalysisInput, ...func(*quicksight.Options)) (*quicksight.RestoreAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.RestoreAnalysisInput, ...func(*quicksight.Options)) *quicksight.RestoreAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.RestoreAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.RestoreAnalysisInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchAnalyses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchAnalyses(ctx context.Context, params *quicksight.SearchAnalysesInput, optFns ...func(*quicksight.Options)) (*quicksight.SearchAnalysesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchAnalyses")
	}

	var r0 *quicksight.SearchAnalysesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchAnalysesInput, ...func(*quicksight.Options)) (*quicksight.SearchAnalysesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchAnalysesInput, ...func(*quicksight.Options)) *quicksight.SearchAnalysesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.SearchAnalysesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.SearchAnalysesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchDashboards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchDashboards(ctx context.Context, params *quicksight.SearchDashboardsInput, optFns ...func(*quicksight.Options)) (*quicksight.SearchDashboardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchDashboards")
	}

	var r0 *quicksight.SearchDashboardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchDashboardsInput, ...func(*quicksight.Options)) (*quicksight.SearchDashboardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchDashboardsInput, ...func(*quicksight.Options)) *quicksight.SearchDashboardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.SearchDashboardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.SearchDashboardsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchDataSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchDataSets(ctx context.Context, params *quicksight.SearchDataSetsInput, optFns ...func(*quicksight.Options)) (*quicksight.SearchDataSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchDataSets")
	}

	var r0 *quicksight.SearchDataSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchDataSetsInput, ...func(*quicksight.Options)) (*quicksight.SearchDataSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchDataSetsInput, ...func(*quicksight.Options)) *quicksight.SearchDataSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.SearchDataSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.SearchDataSetsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchDataSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchDataSources(ctx context.Context, params *quicksight.SearchDataSourcesInput, optFns ...func(*quicksight.Options)) (*quicksight.SearchDataSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchDataSources")
	}

	var r0 *quicksight.SearchDataSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchDataSourcesInput, ...func(*quicksight.Options)) (*quicksight.SearchDataSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchDataSourcesInput, ...func(*quicksight.Options)) *quicksight.SearchDataSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.SearchDataSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.SearchDataSourcesInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchFolders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchFolders(ctx context.Context, params *quicksight.SearchFoldersInput, optFns ...func(*quicksight.Options)) (*quicksight.SearchFoldersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchFolders")
	}

	var r0 *quicksight.SearchFoldersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchFoldersInput, ...func(*quicksight.Options)) (*quicksight.SearchFoldersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchFoldersInput, ...func(*quicksight.Options)) *quicksight.SearchFoldersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.SearchFoldersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.SearchFoldersInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchGroups(ctx context.Context, params *quicksight.SearchGroupsInput, optFns ...func(*quicksight.Options)) (*quicksight.SearchGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchGroups")
	}

	var r0 *quicksight.SearchGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchGroupsInput, ...func(*quicksight.Options)) (*quicksight.SearchGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchGroupsInput, ...func(*quicksight.Options)) *quicksight.SearchGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.SearchGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.SearchGroupsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTopics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchTopics(ctx context.Context, params *quicksight.SearchTopicsInput, optFns ...func(*quicksight.Options)) (*quicksight.SearchTopicsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchTopics")
	}

	var r0 *quicksight.SearchTopicsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchTopicsInput, ...func(*quicksight.Options)) (*quicksight.SearchTopicsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.SearchTopicsInput, ...func(*quicksight.Options)) *quicksight.SearchTopicsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.SearchTopicsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.SearchTopicsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAssetBundleExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAssetBundleExportJob(ctx context.Context, params *quicksight.StartAssetBundleExportJobInput, optFns ...func(*quicksight.Options)) (*quicksight.StartAssetBundleExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAssetBundleExportJob")
	}

	var r0 *quicksight.StartAssetBundleExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.StartAssetBundleExportJobInput, ...func(*quicksight.Options)) (*quicksight.StartAssetBundleExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.StartAssetBundleExportJobInput, ...func(*quicksight.Options)) *quicksight.StartAssetBundleExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.StartAssetBundleExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.StartAssetBundleExportJobInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartAssetBundleImportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartAssetBundleImportJob(ctx context.Context, params *quicksight.StartAssetBundleImportJobInput, optFns ...func(*quicksight.Options)) (*quicksight.StartAssetBundleImportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartAssetBundleImportJob")
	}

	var r0 *quicksight.StartAssetBundleImportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.StartAssetBundleImportJobInput, ...func(*quicksight.Options)) (*quicksight.StartAssetBundleImportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.StartAssetBundleImportJobInput, ...func(*quicksight.Options)) *quicksight.StartAssetBundleImportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.StartAssetBundleImportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.StartAssetBundleImportJobInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDashboardSnapshotJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDashboardSnapshotJob(ctx context.Context, params *quicksight.StartDashboardSnapshotJobInput, optFns ...func(*quicksight.Options)) (*quicksight.StartDashboardSnapshotJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDashboardSnapshotJob")
	}

	var r0 *quicksight.StartDashboardSnapshotJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.StartDashboardSnapshotJobInput, ...func(*quicksight.Options)) (*quicksight.StartDashboardSnapshotJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.StartDashboardSnapshotJobInput, ...func(*quicksight.Options)) *quicksight.StartDashboardSnapshotJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.StartDashboardSnapshotJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.StartDashboardSnapshotJobInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDashboardSnapshotJobSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDashboardSnapshotJobSchedule(ctx context.Context, params *quicksight.StartDashboardSnapshotJobScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.StartDashboardSnapshotJobScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDashboardSnapshotJobSchedule")
	}

	var r0 *quicksight.StartDashboardSnapshotJobScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.StartDashboardSnapshotJobScheduleInput, ...func(*quicksight.Options)) (*quicksight.StartDashboardSnapshotJobScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.StartDashboardSnapshotJobScheduleInput, ...func(*quicksight.Options)) *quicksight.StartDashboardSnapshotJobScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.StartDashboardSnapshotJobScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.StartDashboardSnapshotJobScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *quicksight.TagResourceInput, optFns ...func(*quicksight.Options)) (*quicksight.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *quicksight.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.TagResourceInput, ...func(*quicksight.Options)) (*quicksight.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.TagResourceInput, ...func(*quicksight.Options)) *quicksight.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.TagResourceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *quicksight.UntagResourceInput, optFns ...func(*quicksight.Options)) (*quicksight.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *quicksight.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UntagResourceInput, ...func(*quicksight.Options)) (*quicksight.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UntagResourceInput, ...func(*quicksight.Options)) *quicksight.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UntagResourceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountCustomization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccountCustomization(ctx context.Context, params *quicksight.UpdateAccountCustomizationInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateAccountCustomizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountCustomization")
	}

	var r0 *quicksight.UpdateAccountCustomizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateAccountCustomizationInput, ...func(*quicksight.Options)) (*quicksight.UpdateAccountCustomizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateAccountCustomizationInput, ...func(*quicksight.Options)) *quicksight.UpdateAccountCustomizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateAccountCustomizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateAccountCustomizationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccountSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccountSettings(ctx context.Context, params *quicksight.UpdateAccountSettingsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateAccountSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccountSettings")
	}

	var r0 *quicksight.UpdateAccountSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateAccountSettingsInput, ...func(*quicksight.Options)) (*quicksight.UpdateAccountSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateAccountSettingsInput, ...func(*quicksight.Options)) *quicksight.UpdateAccountSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateAccountSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateAccountSettingsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAnalysis(ctx context.Context, params *quicksight.UpdateAnalysisInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysis")
	}

	var r0 *quicksight.UpdateAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateAnalysisInput, ...func(*quicksight.Options)) (*quicksight.UpdateAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateAnalysisInput, ...func(*quicksight.Options)) *quicksight.UpdateAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateAnalysisInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAnalysisPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAnalysisPermissions(ctx context.Context, params *quicksight.UpdateAnalysisPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateAnalysisPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAnalysisPermissions")
	}

	var r0 *quicksight.UpdateAnalysisPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateAnalysisPermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateAnalysisPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateAnalysisPermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateAnalysisPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateAnalysisPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateAnalysisPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplicationWithTokenExchangeGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplicationWithTokenExchangeGrant(ctx context.Context, params *quicksight.UpdateApplicationWithTokenExchangeGrantInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateApplicationWithTokenExchangeGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplicationWithTokenExchangeGrant")
	}

	var r0 *quicksight.UpdateApplicationWithTokenExchangeGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateApplicationWithTokenExchangeGrantInput, ...func(*quicksight.Options)) (*quicksight.UpdateApplicationWithTokenExchangeGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateApplicationWithTokenExchangeGrantInput, ...func(*quicksight.Options)) *quicksight.UpdateApplicationWithTokenExchangeGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateApplicationWithTokenExchangeGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateApplicationWithTokenExchangeGrantInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBrand provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBrand(ctx context.Context, params *quicksight.UpdateBrandInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateBrandOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrand")
	}

	var r0 *quicksight.UpdateBrandOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateBrandInput, ...func(*quicksight.Options)) (*quicksight.UpdateBrandOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateBrandInput, ...func(*quicksight.Options)) *quicksight.UpdateBrandOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateBrandOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateBrandInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBrandAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBrandAssignment(ctx context.Context, params *quicksight.UpdateBrandAssignmentInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateBrandAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrandAssignment")
	}

	var r0 *quicksight.UpdateBrandAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateBrandAssignmentInput, ...func(*quicksight.Options)) (*quicksight.UpdateBrandAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateBrandAssignmentInput, ...func(*quicksight.Options)) *quicksight.UpdateBrandAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateBrandAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateBrandAssignmentInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBrandPublishedVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBrandPublishedVersion(ctx context.Context, params *quicksight.UpdateBrandPublishedVersionInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateBrandPublishedVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBrandPublishedVersion")
	}

	var r0 *quicksight.UpdateBrandPublishedVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateBrandPublishedVersionInput, ...func(*quicksight.Options)) (*quicksight.UpdateBrandPublishedVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateBrandPublishedVersionInput, ...func(*quicksight.Options)) *quicksight.UpdateBrandPublishedVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateBrandPublishedVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateBrandPublishedVersionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCustomPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCustomPermissions(ctx context.Context, params *quicksight.UpdateCustomPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateCustomPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCustomPermissions")
	}

	var r0 *quicksight.UpdateCustomPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateCustomPermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateCustomPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateCustomPermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateCustomPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateCustomPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateCustomPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDashboard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDashboard(ctx context.Context, params *quicksight.UpdateDashboardInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDashboardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDashboard")
	}

	var r0 *quicksight.UpdateDashboardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardInput, ...func(*quicksight.Options)) (*quicksight.UpdateDashboardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardInput, ...func(*quicksight.Options)) *quicksight.UpdateDashboardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDashboardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDashboardInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDashboardLinks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDashboardLinks(ctx context.Context, params *quicksight.UpdateDashboardLinksInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDashboardLinksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDashboardLinks")
	}

	var r0 *quicksight.UpdateDashboardLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardLinksInput, ...func(*quicksight.Options)) (*quicksight.UpdateDashboardLinksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardLinksInput, ...func(*quicksight.Options)) *quicksight.UpdateDashboardLinksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDashboardLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDashboardLinksInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDashboardPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDashboardPermissions(ctx context.Context, params *quicksight.UpdateDashboardPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDashboardPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDashboardPermissions")
	}

	var r0 *quicksight.UpdateDashboardPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardPermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateDashboardPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardPermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateDashboardPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDashboardPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDashboardPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDashboardPublishedVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDashboardPublishedVersion(ctx context.Context, params *quicksight.UpdateDashboardPublishedVersionInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDashboardPublishedVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDashboardPublishedVersion")
	}

	var r0 *quicksight.UpdateDashboardPublishedVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardPublishedVersionInput, ...func(*quicksight.Options)) (*quicksight.UpdateDashboardPublishedVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardPublishedVersionInput, ...func(*quicksight.Options)) *quicksight.UpdateDashboardPublishedVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDashboardPublishedVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDashboardPublishedVersionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDashboardsQAConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDashboardsQAConfiguration(ctx context.Context, params *quicksight.UpdateDashboardsQAConfigurationInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDashboardsQAConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDashboardsQAConfiguration")
	}

	var r0 *quicksight.UpdateDashboardsQAConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardsQAConfigurationInput, ...func(*quicksight.Options)) (*quicksight.UpdateDashboardsQAConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDashboardsQAConfigurationInput, ...func(*quicksight.Options)) *quicksight.UpdateDashboardsQAConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDashboardsQAConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDashboardsQAConfigurationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataSet(ctx context.Context, params *quicksight.UpdateDataSetInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDataSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataSet")
	}

	var r0 *quicksight.UpdateDataSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDataSetInput, ...func(*quicksight.Options)) (*quicksight.UpdateDataSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDataSetInput, ...func(*quicksight.Options)) *quicksight.UpdateDataSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDataSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDataSetInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataSetPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataSetPermissions(ctx context.Context, params *quicksight.UpdateDataSetPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDataSetPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataSetPermissions")
	}

	var r0 *quicksight.UpdateDataSetPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDataSetPermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateDataSetPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDataSetPermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateDataSetPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDataSetPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDataSetPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataSource(ctx context.Context, params *quicksight.UpdateDataSourceInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataSource")
	}

	var r0 *quicksight.UpdateDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDataSourceInput, ...func(*quicksight.Options)) (*quicksight.UpdateDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDataSourceInput, ...func(*quicksight.Options)) *quicksight.UpdateDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDataSourceInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataSourcePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataSourcePermissions(ctx context.Context, params *quicksight.UpdateDataSourcePermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDataSourcePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataSourcePermissions")
	}

	var r0 *quicksight.UpdateDataSourcePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDataSourcePermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateDataSourcePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDataSourcePermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateDataSourcePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDataSourcePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDataSourcePermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefaultQBusinessApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDefaultQBusinessApplication(ctx context.Context, params *quicksight.UpdateDefaultQBusinessApplicationInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateDefaultQBusinessApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDefaultQBusinessApplication")
	}

	var r0 *quicksight.UpdateDefaultQBusinessApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) (*quicksight.UpdateDefaultQBusinessApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) *quicksight.UpdateDefaultQBusinessApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateDefaultQBusinessApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateDefaultQBusinessApplicationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFolder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFolder(ctx context.Context, params *quicksight.UpdateFolderInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateFolderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFolder")
	}

	var r0 *quicksight.UpdateFolderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateFolderInput, ...func(*quicksight.Options)) (*quicksight.UpdateFolderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateFolderInput, ...func(*quicksight.Options)) *quicksight.UpdateFolderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateFolderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateFolderInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFolderPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFolderPermissions(ctx context.Context, params *quicksight.UpdateFolderPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateFolderPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFolderPermissions")
	}

	var r0 *quicksight.UpdateFolderPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateFolderPermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateFolderPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateFolderPermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateFolderPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateFolderPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateFolderPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGroup(ctx context.Context, params *quicksight.UpdateGroupInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *quicksight.UpdateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateGroupInput, ...func(*quicksight.Options)) (*quicksight.UpdateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateGroupInput, ...func(*quicksight.Options)) *quicksight.UpdateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateGroupInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIAMPolicyAssignment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIAMPolicyAssignment(ctx context.Context, params *quicksight.UpdateIAMPolicyAssignmentInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateIAMPolicyAssignmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIAMPolicyAssignment")
	}

	var r0 *quicksight.UpdateIAMPolicyAssignmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateIAMPolicyAssignmentInput, ...func(*quicksight.Options)) (*quicksight.UpdateIAMPolicyAssignmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateIAMPolicyAssignmentInput, ...func(*quicksight.Options)) *quicksight.UpdateIAMPolicyAssignmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateIAMPolicyAssignmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateIAMPolicyAssignmentInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIdentityPropagationConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIdentityPropagationConfig(ctx context.Context, params *quicksight.UpdateIdentityPropagationConfigInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateIdentityPropagationConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIdentityPropagationConfig")
	}

	var r0 *quicksight.UpdateIdentityPropagationConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateIdentityPropagationConfigInput, ...func(*quicksight.Options)) (*quicksight.UpdateIdentityPropagationConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateIdentityPropagationConfigInput, ...func(*quicksight.Options)) *quicksight.UpdateIdentityPropagationConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateIdentityPropagationConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateIdentityPropagationConfigInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIpRestriction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIpRestriction(ctx context.Context, params *quicksight.UpdateIpRestrictionInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateIpRestrictionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIpRestriction")
	}

	var r0 *quicksight.UpdateIpRestrictionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateIpRestrictionInput, ...func(*quicksight.Options)) (*quicksight.UpdateIpRestrictionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateIpRestrictionInput, ...func(*quicksight.Options)) *quicksight.UpdateIpRestrictionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateIpRestrictionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateIpRestrictionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKeyRegistration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateKeyRegistration(ctx context.Context, params *quicksight.UpdateKeyRegistrationInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateKeyRegistrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeyRegistration")
	}

	var r0 *quicksight.UpdateKeyRegistrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateKeyRegistrationInput, ...func(*quicksight.Options)) (*quicksight.UpdateKeyRegistrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateKeyRegistrationInput, ...func(*quicksight.Options)) *quicksight.UpdateKeyRegistrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateKeyRegistrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateKeyRegistrationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePublicSharingSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePublicSharingSettings(ctx context.Context, params *quicksight.UpdatePublicSharingSettingsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdatePublicSharingSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublicSharingSettings")
	}

	var r0 *quicksight.UpdatePublicSharingSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdatePublicSharingSettingsInput, ...func(*quicksight.Options)) (*quicksight.UpdatePublicSharingSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdatePublicSharingSettingsInput, ...func(*quicksight.Options)) *quicksight.UpdatePublicSharingSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdatePublicSharingSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdatePublicSharingSettingsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQPersonalizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQPersonalizationConfiguration(ctx context.Context, params *quicksight.UpdateQPersonalizationConfigurationInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateQPersonalizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQPersonalizationConfiguration")
	}

	var r0 *quicksight.UpdateQPersonalizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateQPersonalizationConfigurationInput, ...func(*quicksight.Options)) (*quicksight.UpdateQPersonalizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateQPersonalizationConfigurationInput, ...func(*quicksight.Options)) *quicksight.UpdateQPersonalizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateQPersonalizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateQPersonalizationConfigurationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQuickSightQSearchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQuickSightQSearchConfiguration(ctx context.Context, params *quicksight.UpdateQuickSightQSearchConfigurationInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateQuickSightQSearchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQuickSightQSearchConfiguration")
	}

	var r0 *quicksight.UpdateQuickSightQSearchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateQuickSightQSearchConfigurationInput, ...func(*quicksight.Options)) (*quicksight.UpdateQuickSightQSearchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateQuickSightQSearchConfigurationInput, ...func(*quicksight.Options)) *quicksight.UpdateQuickSightQSearchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateQuickSightQSearchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateQuickSightQSearchConfigurationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRefreshSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRefreshSchedule(ctx context.Context, params *quicksight.UpdateRefreshScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateRefreshScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefreshSchedule")
	}

	var r0 *quicksight.UpdateRefreshScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateRefreshScheduleInput, ...func(*quicksight.Options)) (*quicksight.UpdateRefreshScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateRefreshScheduleInput, ...func(*quicksight.Options)) *quicksight.UpdateRefreshScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateRefreshScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateRefreshScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoleCustomPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoleCustomPermission(ctx context.Context, params *quicksight.UpdateRoleCustomPermissionInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateRoleCustomPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoleCustomPermission")
	}

	var r0 *quicksight.UpdateRoleCustomPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateRoleCustomPermissionInput, ...func(*quicksight.Options)) (*quicksight.UpdateRoleCustomPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateRoleCustomPermissionInput, ...func(*quicksight.Options)) *quicksight.UpdateRoleCustomPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateRoleCustomPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateRoleCustomPermissionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSPICECapacityConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSPICECapacityConfiguration(ctx context.Context, params *quicksight.UpdateSPICECapacityConfigurationInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateSPICECapacityConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSPICECapacityConfiguration")
	}

	var r0 *quicksight.UpdateSPICECapacityConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateSPICECapacityConfigurationInput, ...func(*quicksight.Options)) (*quicksight.UpdateSPICECapacityConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateSPICECapacityConfigurationInput, ...func(*quicksight.Options)) *quicksight.UpdateSPICECapacityConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateSPICECapacityConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateSPICECapacityConfigurationInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTemplate(ctx context.Context, params *quicksight.UpdateTemplateInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplate")
	}

	var r0 *quicksight.UpdateTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTemplateInput, ...func(*quicksight.Options)) (*quicksight.UpdateTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTemplateInput, ...func(*quicksight.Options)) *quicksight.UpdateTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateTemplateInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplateAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTemplateAlias(ctx context.Context, params *quicksight.UpdateTemplateAliasInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateTemplateAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplateAlias")
	}

	var r0 *quicksight.UpdateTemplateAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTemplateAliasInput, ...func(*quicksight.Options)) (*quicksight.UpdateTemplateAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTemplateAliasInput, ...func(*quicksight.Options)) *quicksight.UpdateTemplateAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateTemplateAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateTemplateAliasInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplatePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTemplatePermissions(ctx context.Context, params *quicksight.UpdateTemplatePermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateTemplatePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplatePermissions")
	}

	var r0 *quicksight.UpdateTemplatePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTemplatePermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateTemplatePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTemplatePermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateTemplatePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateTemplatePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateTemplatePermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTheme provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTheme(ctx context.Context, params *quicksight.UpdateThemeInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateThemeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTheme")
	}

	var r0 *quicksight.UpdateThemeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateThemeInput, ...func(*quicksight.Options)) (*quicksight.UpdateThemeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateThemeInput, ...func(*quicksight.Options)) *quicksight.UpdateThemeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateThemeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateThemeInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThemeAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThemeAlias(ctx context.Context, params *quicksight.UpdateThemeAliasInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateThemeAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThemeAlias")
	}

	var r0 *quicksight.UpdateThemeAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateThemeAliasInput, ...func(*quicksight.Options)) (*quicksight.UpdateThemeAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateThemeAliasInput, ...func(*quicksight.Options)) *quicksight.UpdateThemeAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateThemeAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateThemeAliasInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThemePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThemePermissions(ctx context.Context, params *quicksight.UpdateThemePermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateThemePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThemePermissions")
	}

	var r0 *quicksight.UpdateThemePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateThemePermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateThemePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateThemePermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateThemePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateThemePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateThemePermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTopic(ctx context.Context, params *quicksight.UpdateTopicInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTopic")
	}

	var r0 *quicksight.UpdateTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTopicInput, ...func(*quicksight.Options)) (*quicksight.UpdateTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTopicInput, ...func(*quicksight.Options)) *quicksight.UpdateTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateTopicInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopicPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTopicPermissions(ctx context.Context, params *quicksight.UpdateTopicPermissionsInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateTopicPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTopicPermissions")
	}

	var r0 *quicksight.UpdateTopicPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTopicPermissionsInput, ...func(*quicksight.Options)) (*quicksight.UpdateTopicPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTopicPermissionsInput, ...func(*quicksight.Options)) *quicksight.UpdateTopicPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateTopicPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateTopicPermissionsInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTopicRefreshSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTopicRefreshSchedule(ctx context.Context, params *quicksight.UpdateTopicRefreshScheduleInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateTopicRefreshScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTopicRefreshSchedule")
	}

	var r0 *quicksight.UpdateTopicRefreshScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTopicRefreshScheduleInput, ...func(*quicksight.Options)) (*quicksight.UpdateTopicRefreshScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateTopicRefreshScheduleInput, ...func(*quicksight.Options)) *quicksight.UpdateTopicRefreshScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateTopicRefreshScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateTopicRefreshScheduleInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *quicksight.UpdateUserInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *quicksight.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateUserInput, ...func(*quicksight.Options)) (*quicksight.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateUserInput, ...func(*quicksight.Options)) *quicksight.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateUserInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserCustomPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserCustomPermission(ctx context.Context, params *quicksight.UpdateUserCustomPermissionInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateUserCustomPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserCustomPermission")
	}

	var r0 *quicksight.UpdateUserCustomPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateUserCustomPermissionInput, ...func(*quicksight.Options)) (*quicksight.UpdateUserCustomPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateUserCustomPermissionInput, ...func(*quicksight.Options)) *quicksight.UpdateUserCustomPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateUserCustomPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateUserCustomPermissionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVPCConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVPCConnection(ctx context.Context, params *quicksight.UpdateVPCConnectionInput, optFns ...func(*quicksight.Options)) (*quicksight.UpdateVPCConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVPCConnection")
	}

	var r0 *quicksight.UpdateVPCConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateVPCConnectionInput, ...func(*quicksight.Options)) (*quicksight.UpdateVPCConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *quicksight.UpdateVPCConnectionInput, ...func(*quicksight.Options)) *quicksight.UpdateVPCConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*quicksight.UpdateVPCConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *quicksight.UpdateVPCConnectionInput, ...func(*quicksight.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
