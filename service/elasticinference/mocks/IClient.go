// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	elasticinference "github.com/aws/aws-sdk-go-v2/service/elasticinference"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DescribeAcceleratorOfferings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAcceleratorOfferings(ctx context.Context, params *elasticinference.DescribeAcceleratorOfferingsInput, optFns ...func(*elasticinference.Options)) (*elasticinference.DescribeAcceleratorOfferingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAcceleratorOfferings")
	}

	var r0 *elasticinference.DescribeAcceleratorOfferingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.DescribeAcceleratorOfferingsInput, ...func(*elasticinference.Options)) (*elasticinference.DescribeAcceleratorOfferingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.DescribeAcceleratorOfferingsInput, ...func(*elasticinference.Options)) *elasticinference.DescribeAcceleratorOfferingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticinference.DescribeAcceleratorOfferingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticinference.DescribeAcceleratorOfferingsInput, ...func(*elasticinference.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAcceleratorTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAcceleratorTypes(ctx context.Context, params *elasticinference.DescribeAcceleratorTypesInput, optFns ...func(*elasticinference.Options)) (*elasticinference.DescribeAcceleratorTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAcceleratorTypes")
	}

	var r0 *elasticinference.DescribeAcceleratorTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.DescribeAcceleratorTypesInput, ...func(*elasticinference.Options)) (*elasticinference.DescribeAcceleratorTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.DescribeAcceleratorTypesInput, ...func(*elasticinference.Options)) *elasticinference.DescribeAcceleratorTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticinference.DescribeAcceleratorTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticinference.DescribeAcceleratorTypesInput, ...func(*elasticinference.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccelerators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccelerators(ctx context.Context, params *elasticinference.DescribeAcceleratorsInput, optFns ...func(*elasticinference.Options)) (*elasticinference.DescribeAcceleratorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccelerators")
	}

	var r0 *elasticinference.DescribeAcceleratorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.DescribeAcceleratorsInput, ...func(*elasticinference.Options)) (*elasticinference.DescribeAcceleratorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.DescribeAcceleratorsInput, ...func(*elasticinference.Options)) *elasticinference.DescribeAcceleratorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticinference.DescribeAcceleratorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticinference.DescribeAcceleratorsInput, ...func(*elasticinference.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *elasticinference.ListTagsForResourceInput, optFns ...func(*elasticinference.Options)) (*elasticinference.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *elasticinference.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.ListTagsForResourceInput, ...func(*elasticinference.Options)) (*elasticinference.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.ListTagsForResourceInput, ...func(*elasticinference.Options)) *elasticinference.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticinference.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticinference.ListTagsForResourceInput, ...func(*elasticinference.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() elasticinference.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 elasticinference.Options
	if rf, ok := ret.Get(0).(func() elasticinference.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(elasticinference.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *elasticinference.TagResourceInput, optFns ...func(*elasticinference.Options)) (*elasticinference.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *elasticinference.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.TagResourceInput, ...func(*elasticinference.Options)) (*elasticinference.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.TagResourceInput, ...func(*elasticinference.Options)) *elasticinference.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticinference.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticinference.TagResourceInput, ...func(*elasticinference.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *elasticinference.UntagResourceInput, optFns ...func(*elasticinference.Options)) (*elasticinference.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *elasticinference.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.UntagResourceInput, ...func(*elasticinference.Options)) (*elasticinference.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *elasticinference.UntagResourceInput, ...func(*elasticinference.Options)) *elasticinference.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*elasticinference.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *elasticinference.UntagResourceInput, ...func(*elasticinference.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
