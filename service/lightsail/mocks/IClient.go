// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	lightsail "github.com/aws/aws-sdk-go-v2/service/lightsail"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AllocateStaticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AllocateStaticIp(ctx context.Context, params *lightsail.AllocateStaticIpInput, optFns ...func(*lightsail.Options)) (*lightsail.AllocateStaticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AllocateStaticIp")
	}

	var r0 *lightsail.AllocateStaticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AllocateStaticIpInput, ...func(*lightsail.Options)) (*lightsail.AllocateStaticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AllocateStaticIpInput, ...func(*lightsail.Options)) *lightsail.AllocateStaticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AllocateStaticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AllocateStaticIpInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachCertificateToDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachCertificateToDistribution(ctx context.Context, params *lightsail.AttachCertificateToDistributionInput, optFns ...func(*lightsail.Options)) (*lightsail.AttachCertificateToDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachCertificateToDistribution")
	}

	var r0 *lightsail.AttachCertificateToDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachCertificateToDistributionInput, ...func(*lightsail.Options)) (*lightsail.AttachCertificateToDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachCertificateToDistributionInput, ...func(*lightsail.Options)) *lightsail.AttachCertificateToDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachCertificateToDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachCertificateToDistributionInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachDisk provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachDisk(ctx context.Context, params *lightsail.AttachDiskInput, optFns ...func(*lightsail.Options)) (*lightsail.AttachDiskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachDisk")
	}

	var r0 *lightsail.AttachDiskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachDiskInput, ...func(*lightsail.Options)) (*lightsail.AttachDiskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachDiskInput, ...func(*lightsail.Options)) *lightsail.AttachDiskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachDiskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachDiskInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachInstancesToLoadBalancer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachInstancesToLoadBalancer(ctx context.Context, params *lightsail.AttachInstancesToLoadBalancerInput, optFns ...func(*lightsail.Options)) (*lightsail.AttachInstancesToLoadBalancerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachInstancesToLoadBalancer")
	}

	var r0 *lightsail.AttachInstancesToLoadBalancerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachInstancesToLoadBalancerInput, ...func(*lightsail.Options)) (*lightsail.AttachInstancesToLoadBalancerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachInstancesToLoadBalancerInput, ...func(*lightsail.Options)) *lightsail.AttachInstancesToLoadBalancerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachInstancesToLoadBalancerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachInstancesToLoadBalancerInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachLoadBalancerTlsCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachLoadBalancerTlsCertificate(ctx context.Context, params *lightsail.AttachLoadBalancerTlsCertificateInput, optFns ...func(*lightsail.Options)) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachLoadBalancerTlsCertificate")
	}

	var r0 *lightsail.AttachLoadBalancerTlsCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) (*lightsail.AttachLoadBalancerTlsCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) *lightsail.AttachLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachLoadBalancerTlsCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachStaticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachStaticIp(ctx context.Context, params *lightsail.AttachStaticIpInput, optFns ...func(*lightsail.Options)) (*lightsail.AttachStaticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachStaticIp")
	}

	var r0 *lightsail.AttachStaticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachStaticIpInput, ...func(*lightsail.Options)) (*lightsail.AttachStaticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.AttachStaticIpInput, ...func(*lightsail.Options)) *lightsail.AttachStaticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.AttachStaticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.AttachStaticIpInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloseInstancePublicPorts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CloseInstancePublicPorts(ctx context.Context, params *lightsail.CloseInstancePublicPortsInput, optFns ...func(*lightsail.Options)) (*lightsail.CloseInstancePublicPortsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloseInstancePublicPorts")
	}

	var r0 *lightsail.CloseInstancePublicPortsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CloseInstancePublicPortsInput, ...func(*lightsail.Options)) (*lightsail.CloseInstancePublicPortsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CloseInstancePublicPortsInput, ...func(*lightsail.Options)) *lightsail.CloseInstancePublicPortsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CloseInstancePublicPortsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CloseInstancePublicPortsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopySnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopySnapshot(ctx context.Context, params *lightsail.CopySnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.CopySnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopySnapshot")
	}

	var r0 *lightsail.CopySnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CopySnapshotInput, ...func(*lightsail.Options)) (*lightsail.CopySnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CopySnapshotInput, ...func(*lightsail.Options)) *lightsail.CopySnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CopySnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CopySnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBucket(ctx context.Context, params *lightsail.CreateBucketInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBucket")
	}

	var r0 *lightsail.CreateBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateBucketInput, ...func(*lightsail.Options)) (*lightsail.CreateBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateBucketInput, ...func(*lightsail.Options)) *lightsail.CreateBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateBucketInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucketAccessKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBucketAccessKey(ctx context.Context, params *lightsail.CreateBucketAccessKeyInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateBucketAccessKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBucketAccessKey")
	}

	var r0 *lightsail.CreateBucketAccessKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateBucketAccessKeyInput, ...func(*lightsail.Options)) (*lightsail.CreateBucketAccessKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateBucketAccessKeyInput, ...func(*lightsail.Options)) *lightsail.CreateBucketAccessKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateBucketAccessKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateBucketAccessKeyInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCertificate(ctx context.Context, params *lightsail.CreateCertificateInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCertificate")
	}

	var r0 *lightsail.CreateCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateCertificateInput, ...func(*lightsail.Options)) (*lightsail.CreateCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateCertificateInput, ...func(*lightsail.Options)) *lightsail.CreateCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateCertificateInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudFormationStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCloudFormationStack(ctx context.Context, params *lightsail.CreateCloudFormationStackInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateCloudFormationStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudFormationStack")
	}

	var r0 *lightsail.CreateCloudFormationStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateCloudFormationStackInput, ...func(*lightsail.Options)) (*lightsail.CreateCloudFormationStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateCloudFormationStackInput, ...func(*lightsail.Options)) *lightsail.CreateCloudFormationStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateCloudFormationStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateCloudFormationStackInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContactMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContactMethod(ctx context.Context, params *lightsail.CreateContactMethodInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateContactMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContactMethod")
	}

	var r0 *lightsail.CreateContactMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateContactMethodInput, ...func(*lightsail.Options)) (*lightsail.CreateContactMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateContactMethodInput, ...func(*lightsail.Options)) *lightsail.CreateContactMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateContactMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateContactMethodInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContainerService(ctx context.Context, params *lightsail.CreateContainerServiceInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateContainerServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerService")
	}

	var r0 *lightsail.CreateContainerServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateContainerServiceInput, ...func(*lightsail.Options)) (*lightsail.CreateContainerServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateContainerServiceInput, ...func(*lightsail.Options)) *lightsail.CreateContainerServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateContainerServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateContainerServiceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerServiceDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContainerServiceDeployment(ctx context.Context, params *lightsail.CreateContainerServiceDeploymentInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateContainerServiceDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerServiceDeployment")
	}

	var r0 *lightsail.CreateContainerServiceDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateContainerServiceDeploymentInput, ...func(*lightsail.Options)) (*lightsail.CreateContainerServiceDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateContainerServiceDeploymentInput, ...func(*lightsail.Options)) *lightsail.CreateContainerServiceDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateContainerServiceDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateContainerServiceDeploymentInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContainerServiceRegistryLogin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContainerServiceRegistryLogin(ctx context.Context, params *lightsail.CreateContainerServiceRegistryLoginInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateContainerServiceRegistryLoginOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContainerServiceRegistryLogin")
	}

	var r0 *lightsail.CreateContainerServiceRegistryLoginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateContainerServiceRegistryLoginInput, ...func(*lightsail.Options)) (*lightsail.CreateContainerServiceRegistryLoginOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateContainerServiceRegistryLoginInput, ...func(*lightsail.Options)) *lightsail.CreateContainerServiceRegistryLoginOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateContainerServiceRegistryLoginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateContainerServiceRegistryLoginInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDisk provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDisk(ctx context.Context, params *lightsail.CreateDiskInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateDiskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDisk")
	}

	var r0 *lightsail.CreateDiskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskInput, ...func(*lightsail.Options)) (*lightsail.CreateDiskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskInput, ...func(*lightsail.Options)) *lightsail.CreateDiskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDiskInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDiskFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDiskFromSnapshot(ctx context.Context, params *lightsail.CreateDiskFromSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateDiskFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDiskFromSnapshot")
	}

	var r0 *lightsail.CreateDiskFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskFromSnapshotInput, ...func(*lightsail.Options)) (*lightsail.CreateDiskFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskFromSnapshotInput, ...func(*lightsail.Options)) *lightsail.CreateDiskFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDiskFromSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDiskSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDiskSnapshot(ctx context.Context, params *lightsail.CreateDiskSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateDiskSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDiskSnapshot")
	}

	var r0 *lightsail.CreateDiskSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskSnapshotInput, ...func(*lightsail.Options)) (*lightsail.CreateDiskSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDiskSnapshotInput, ...func(*lightsail.Options)) *lightsail.CreateDiskSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDiskSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDiskSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDistribution(ctx context.Context, params *lightsail.CreateDistributionInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDistribution")
	}

	var r0 *lightsail.CreateDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDistributionInput, ...func(*lightsail.Options)) (*lightsail.CreateDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDistributionInput, ...func(*lightsail.Options)) *lightsail.CreateDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDistributionInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomain(ctx context.Context, params *lightsail.CreateDomainInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 *lightsail.CreateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDomainInput, ...func(*lightsail.Options)) (*lightsail.CreateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDomainInput, ...func(*lightsail.Options)) *lightsail.CreateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDomainInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomainEntry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomainEntry(ctx context.Context, params *lightsail.CreateDomainEntryInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateDomainEntryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomainEntry")
	}

	var r0 *lightsail.CreateDomainEntryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDomainEntryInput, ...func(*lightsail.Options)) (*lightsail.CreateDomainEntryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateDomainEntryInput, ...func(*lightsail.Options)) *lightsail.CreateDomainEntryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateDomainEntryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateDomainEntryInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGUISessionAccessDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGUISessionAccessDetails(ctx context.Context, params *lightsail.CreateGUISessionAccessDetailsInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateGUISessionAccessDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGUISessionAccessDetails")
	}

	var r0 *lightsail.CreateGUISessionAccessDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateGUISessionAccessDetailsInput, ...func(*lightsail.Options)) (*lightsail.CreateGUISessionAccessDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateGUISessionAccessDetailsInput, ...func(*lightsail.Options)) *lightsail.CreateGUISessionAccessDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateGUISessionAccessDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateGUISessionAccessDetailsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstanceSnapshot(ctx context.Context, params *lightsail.CreateInstanceSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateInstanceSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceSnapshot")
	}

	var r0 *lightsail.CreateInstanceSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstanceSnapshotInput, ...func(*lightsail.Options)) (*lightsail.CreateInstanceSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstanceSnapshotInput, ...func(*lightsail.Options)) *lightsail.CreateInstanceSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstanceSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateInstanceSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstances(ctx context.Context, params *lightsail.CreateInstancesInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstances")
	}

	var r0 *lightsail.CreateInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstancesInput, ...func(*lightsail.Options)) (*lightsail.CreateInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstancesInput, ...func(*lightsail.Options)) *lightsail.CreateInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateInstancesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstancesFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstancesFromSnapshot(ctx context.Context, params *lightsail.CreateInstancesFromSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateInstancesFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstancesFromSnapshot")
	}

	var r0 *lightsail.CreateInstancesFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstancesFromSnapshotInput, ...func(*lightsail.Options)) (*lightsail.CreateInstancesFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateInstancesFromSnapshotInput, ...func(*lightsail.Options)) *lightsail.CreateInstancesFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateInstancesFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateInstancesFromSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeyPair provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateKeyPair(ctx context.Context, params *lightsail.CreateKeyPairInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateKeyPairOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyPair")
	}

	var r0 *lightsail.CreateKeyPairOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateKeyPairInput, ...func(*lightsail.Options)) (*lightsail.CreateKeyPairOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateKeyPairInput, ...func(*lightsail.Options)) *lightsail.CreateKeyPairOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateKeyPairOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateKeyPairInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLoadBalancer(ctx context.Context, params *lightsail.CreateLoadBalancerInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateLoadBalancerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoadBalancer")
	}

	var r0 *lightsail.CreateLoadBalancerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateLoadBalancerInput, ...func(*lightsail.Options)) (*lightsail.CreateLoadBalancerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateLoadBalancerInput, ...func(*lightsail.Options)) *lightsail.CreateLoadBalancerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateLoadBalancerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateLoadBalancerInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoadBalancerTlsCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLoadBalancerTlsCertificate(ctx context.Context, params *lightsail.CreateLoadBalancerTlsCertificateInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoadBalancerTlsCertificate")
	}

	var r0 *lightsail.CreateLoadBalancerTlsCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) (*lightsail.CreateLoadBalancerTlsCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) *lightsail.CreateLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateLoadBalancerTlsCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRelationalDatabase(ctx context.Context, params *lightsail.CreateRelationalDatabaseInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelationalDatabase")
	}

	var r0 *lightsail.CreateRelationalDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseInput, ...func(*lightsail.Options)) (*lightsail.CreateRelationalDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseInput, ...func(*lightsail.Options)) *lightsail.CreateRelationalDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateRelationalDatabaseInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabaseFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRelationalDatabaseFromSnapshot(ctx context.Context, params *lightsail.CreateRelationalDatabaseFromSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelationalDatabaseFromSnapshot")
	}

	var r0 *lightsail.CreateRelationalDatabaseFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseFromSnapshotInput, ...func(*lightsail.Options)) (*lightsail.CreateRelationalDatabaseFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseFromSnapshotInput, ...func(*lightsail.Options)) *lightsail.CreateRelationalDatabaseFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateRelationalDatabaseFromSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelationalDatabaseSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRelationalDatabaseSnapshot(ctx context.Context, params *lightsail.CreateRelationalDatabaseSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelationalDatabaseSnapshot")
	}

	var r0 *lightsail.CreateRelationalDatabaseSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) (*lightsail.CreateRelationalDatabaseSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.CreateRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) *lightsail.CreateRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.CreateRelationalDatabaseSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.CreateRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAlarm(ctx context.Context, params *lightsail.DeleteAlarmInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteAlarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlarm")
	}

	var r0 *lightsail.DeleteAlarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteAlarmInput, ...func(*lightsail.Options)) (*lightsail.DeleteAlarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteAlarmInput, ...func(*lightsail.Options)) *lightsail.DeleteAlarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteAlarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteAlarmInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAutoSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAutoSnapshot(ctx context.Context, params *lightsail.DeleteAutoSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteAutoSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAutoSnapshot")
	}

	var r0 *lightsail.DeleteAutoSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteAutoSnapshotInput, ...func(*lightsail.Options)) (*lightsail.DeleteAutoSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteAutoSnapshotInput, ...func(*lightsail.Options)) *lightsail.DeleteAutoSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteAutoSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteAutoSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBucket(ctx context.Context, params *lightsail.DeleteBucketInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucket")
	}

	var r0 *lightsail.DeleteBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteBucketInput, ...func(*lightsail.Options)) (*lightsail.DeleteBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteBucketInput, ...func(*lightsail.Options)) *lightsail.DeleteBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteBucketInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketAccessKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBucketAccessKey(ctx context.Context, params *lightsail.DeleteBucketAccessKeyInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteBucketAccessKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucketAccessKey")
	}

	var r0 *lightsail.DeleteBucketAccessKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteBucketAccessKeyInput, ...func(*lightsail.Options)) (*lightsail.DeleteBucketAccessKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteBucketAccessKeyInput, ...func(*lightsail.Options)) *lightsail.DeleteBucketAccessKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteBucketAccessKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteBucketAccessKeyInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCertificate(ctx context.Context, params *lightsail.DeleteCertificateInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 *lightsail.DeleteCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteCertificateInput, ...func(*lightsail.Options)) (*lightsail.DeleteCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteCertificateInput, ...func(*lightsail.Options)) *lightsail.DeleteCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteCertificateInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactMethod provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContactMethod(ctx context.Context, params *lightsail.DeleteContactMethodInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteContactMethodOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContactMethod")
	}

	var r0 *lightsail.DeleteContactMethodOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteContactMethodInput, ...func(*lightsail.Options)) (*lightsail.DeleteContactMethodOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteContactMethodInput, ...func(*lightsail.Options)) *lightsail.DeleteContactMethodOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteContactMethodOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteContactMethodInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContainerImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContainerImage(ctx context.Context, params *lightsail.DeleteContainerImageInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteContainerImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerImage")
	}

	var r0 *lightsail.DeleteContainerImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteContainerImageInput, ...func(*lightsail.Options)) (*lightsail.DeleteContainerImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteContainerImageInput, ...func(*lightsail.Options)) *lightsail.DeleteContainerImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteContainerImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteContainerImageInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContainerService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContainerService(ctx context.Context, params *lightsail.DeleteContainerServiceInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteContainerServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContainerService")
	}

	var r0 *lightsail.DeleteContainerServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteContainerServiceInput, ...func(*lightsail.Options)) (*lightsail.DeleteContainerServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteContainerServiceInput, ...func(*lightsail.Options)) *lightsail.DeleteContainerServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteContainerServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteContainerServiceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDisk provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDisk(ctx context.Context, params *lightsail.DeleteDiskInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteDiskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDisk")
	}

	var r0 *lightsail.DeleteDiskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDiskInput, ...func(*lightsail.Options)) (*lightsail.DeleteDiskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDiskInput, ...func(*lightsail.Options)) *lightsail.DeleteDiskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDiskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDiskInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDiskSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDiskSnapshot(ctx context.Context, params *lightsail.DeleteDiskSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteDiskSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDiskSnapshot")
	}

	var r0 *lightsail.DeleteDiskSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDiskSnapshotInput, ...func(*lightsail.Options)) (*lightsail.DeleteDiskSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDiskSnapshotInput, ...func(*lightsail.Options)) *lightsail.DeleteDiskSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDiskSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDiskSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDistribution(ctx context.Context, params *lightsail.DeleteDistributionInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDistribution")
	}

	var r0 *lightsail.DeleteDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDistributionInput, ...func(*lightsail.Options)) (*lightsail.DeleteDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDistributionInput, ...func(*lightsail.Options)) *lightsail.DeleteDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDistributionInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomain(ctx context.Context, params *lightsail.DeleteDomainInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomain")
	}

	var r0 *lightsail.DeleteDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDomainInput, ...func(*lightsail.Options)) (*lightsail.DeleteDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDomainInput, ...func(*lightsail.Options)) *lightsail.DeleteDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDomainInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomainEntry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomainEntry(ctx context.Context, params *lightsail.DeleteDomainEntryInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteDomainEntryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomainEntry")
	}

	var r0 *lightsail.DeleteDomainEntryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDomainEntryInput, ...func(*lightsail.Options)) (*lightsail.DeleteDomainEntryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteDomainEntryInput, ...func(*lightsail.Options)) *lightsail.DeleteDomainEntryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteDomainEntryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteDomainEntryInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstance(ctx context.Context, params *lightsail.DeleteInstanceInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstance")
	}

	var r0 *lightsail.DeleteInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteInstanceInput, ...func(*lightsail.Options)) (*lightsail.DeleteInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteInstanceInput, ...func(*lightsail.Options)) *lightsail.DeleteInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteInstanceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstanceSnapshot(ctx context.Context, params *lightsail.DeleteInstanceSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteInstanceSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceSnapshot")
	}

	var r0 *lightsail.DeleteInstanceSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteInstanceSnapshotInput, ...func(*lightsail.Options)) (*lightsail.DeleteInstanceSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteInstanceSnapshotInput, ...func(*lightsail.Options)) *lightsail.DeleteInstanceSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteInstanceSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteInstanceSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeyPair provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteKeyPair(ctx context.Context, params *lightsail.DeleteKeyPairInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteKeyPairOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeyPair")
	}

	var r0 *lightsail.DeleteKeyPairOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteKeyPairInput, ...func(*lightsail.Options)) (*lightsail.DeleteKeyPairOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteKeyPairInput, ...func(*lightsail.Options)) *lightsail.DeleteKeyPairOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteKeyPairOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteKeyPairInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKnownHostKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteKnownHostKeys(ctx context.Context, params *lightsail.DeleteKnownHostKeysInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteKnownHostKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKnownHostKeys")
	}

	var r0 *lightsail.DeleteKnownHostKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteKnownHostKeysInput, ...func(*lightsail.Options)) (*lightsail.DeleteKnownHostKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteKnownHostKeysInput, ...func(*lightsail.Options)) *lightsail.DeleteKnownHostKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteKnownHostKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteKnownHostKeysInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLoadBalancer(ctx context.Context, params *lightsail.DeleteLoadBalancerInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteLoadBalancerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLoadBalancer")
	}

	var r0 *lightsail.DeleteLoadBalancerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteLoadBalancerInput, ...func(*lightsail.Options)) (*lightsail.DeleteLoadBalancerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteLoadBalancerInput, ...func(*lightsail.Options)) *lightsail.DeleteLoadBalancerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteLoadBalancerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteLoadBalancerInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoadBalancerTlsCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLoadBalancerTlsCertificate(ctx context.Context, params *lightsail.DeleteLoadBalancerTlsCertificateInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLoadBalancerTlsCertificate")
	}

	var r0 *lightsail.DeleteLoadBalancerTlsCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) (*lightsail.DeleteLoadBalancerTlsCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) *lightsail.DeleteLoadBalancerTlsCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteLoadBalancerTlsCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteLoadBalancerTlsCertificateInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelationalDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRelationalDatabase(ctx context.Context, params *lightsail.DeleteRelationalDatabaseInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRelationalDatabase")
	}

	var r0 *lightsail.DeleteRelationalDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteRelationalDatabaseInput, ...func(*lightsail.Options)) (*lightsail.DeleteRelationalDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteRelationalDatabaseInput, ...func(*lightsail.Options)) *lightsail.DeleteRelationalDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteRelationalDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteRelationalDatabaseInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelationalDatabaseSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRelationalDatabaseSnapshot(ctx context.Context, params *lightsail.DeleteRelationalDatabaseSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRelationalDatabaseSnapshot")
	}

	var r0 *lightsail.DeleteRelationalDatabaseSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) (*lightsail.DeleteRelationalDatabaseSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DeleteRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) *lightsail.DeleteRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DeleteRelationalDatabaseSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DeleteRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachCertificateFromDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachCertificateFromDistribution(ctx context.Context, params *lightsail.DetachCertificateFromDistributionInput, optFns ...func(*lightsail.Options)) (*lightsail.DetachCertificateFromDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachCertificateFromDistribution")
	}

	var r0 *lightsail.DetachCertificateFromDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachCertificateFromDistributionInput, ...func(*lightsail.Options)) (*lightsail.DetachCertificateFromDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachCertificateFromDistributionInput, ...func(*lightsail.Options)) *lightsail.DetachCertificateFromDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachCertificateFromDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DetachCertificateFromDistributionInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachDisk provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachDisk(ctx context.Context, params *lightsail.DetachDiskInput, optFns ...func(*lightsail.Options)) (*lightsail.DetachDiskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachDisk")
	}

	var r0 *lightsail.DetachDiskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachDiskInput, ...func(*lightsail.Options)) (*lightsail.DetachDiskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachDiskInput, ...func(*lightsail.Options)) *lightsail.DetachDiskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachDiskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DetachDiskInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachInstancesFromLoadBalancer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachInstancesFromLoadBalancer(ctx context.Context, params *lightsail.DetachInstancesFromLoadBalancerInput, optFns ...func(*lightsail.Options)) (*lightsail.DetachInstancesFromLoadBalancerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachInstancesFromLoadBalancer")
	}

	var r0 *lightsail.DetachInstancesFromLoadBalancerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachInstancesFromLoadBalancerInput, ...func(*lightsail.Options)) (*lightsail.DetachInstancesFromLoadBalancerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachInstancesFromLoadBalancerInput, ...func(*lightsail.Options)) *lightsail.DetachInstancesFromLoadBalancerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachInstancesFromLoadBalancerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DetachInstancesFromLoadBalancerInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachStaticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachStaticIp(ctx context.Context, params *lightsail.DetachStaticIpInput, optFns ...func(*lightsail.Options)) (*lightsail.DetachStaticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachStaticIp")
	}

	var r0 *lightsail.DetachStaticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachStaticIpInput, ...func(*lightsail.Options)) (*lightsail.DetachStaticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DetachStaticIpInput, ...func(*lightsail.Options)) *lightsail.DetachStaticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DetachStaticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DetachStaticIpInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableAddOn provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableAddOn(ctx context.Context, params *lightsail.DisableAddOnInput, optFns ...func(*lightsail.Options)) (*lightsail.DisableAddOnOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableAddOn")
	}

	var r0 *lightsail.DisableAddOnOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DisableAddOnInput, ...func(*lightsail.Options)) (*lightsail.DisableAddOnOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DisableAddOnInput, ...func(*lightsail.Options)) *lightsail.DisableAddOnOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DisableAddOnOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DisableAddOnInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DownloadDefaultKeyPair provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DownloadDefaultKeyPair(ctx context.Context, params *lightsail.DownloadDefaultKeyPairInput, optFns ...func(*lightsail.Options)) (*lightsail.DownloadDefaultKeyPairOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DownloadDefaultKeyPair")
	}

	var r0 *lightsail.DownloadDefaultKeyPairOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DownloadDefaultKeyPairInput, ...func(*lightsail.Options)) (*lightsail.DownloadDefaultKeyPairOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.DownloadDefaultKeyPairInput, ...func(*lightsail.Options)) *lightsail.DownloadDefaultKeyPairOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.DownloadDefaultKeyPairOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.DownloadDefaultKeyPairInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableAddOn provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableAddOn(ctx context.Context, params *lightsail.EnableAddOnInput, optFns ...func(*lightsail.Options)) (*lightsail.EnableAddOnOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableAddOn")
	}

	var r0 *lightsail.EnableAddOnOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.EnableAddOnInput, ...func(*lightsail.Options)) (*lightsail.EnableAddOnOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.EnableAddOnInput, ...func(*lightsail.Options)) *lightsail.EnableAddOnOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.EnableAddOnOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.EnableAddOnInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportSnapshot(ctx context.Context, params *lightsail.ExportSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.ExportSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportSnapshot")
	}

	var r0 *lightsail.ExportSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ExportSnapshotInput, ...func(*lightsail.Options)) (*lightsail.ExportSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ExportSnapshotInput, ...func(*lightsail.Options)) *lightsail.ExportSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ExportSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.ExportSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActiveNames provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetActiveNames(ctx context.Context, params *lightsail.GetActiveNamesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetActiveNamesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveNames")
	}

	var r0 *lightsail.GetActiveNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetActiveNamesInput, ...func(*lightsail.Options)) (*lightsail.GetActiveNamesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetActiveNamesInput, ...func(*lightsail.Options)) *lightsail.GetActiveNamesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetActiveNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetActiveNamesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAlarms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAlarms(ctx context.Context, params *lightsail.GetAlarmsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetAlarmsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAlarms")
	}

	var r0 *lightsail.GetAlarmsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetAlarmsInput, ...func(*lightsail.Options)) (*lightsail.GetAlarmsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetAlarmsInput, ...func(*lightsail.Options)) *lightsail.GetAlarmsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetAlarmsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetAlarmsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAutoSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAutoSnapshots(ctx context.Context, params *lightsail.GetAutoSnapshotsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetAutoSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAutoSnapshots")
	}

	var r0 *lightsail.GetAutoSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetAutoSnapshotsInput, ...func(*lightsail.Options)) (*lightsail.GetAutoSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetAutoSnapshotsInput, ...func(*lightsail.Options)) *lightsail.GetAutoSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetAutoSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetAutoSnapshotsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlueprints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBlueprints(ctx context.Context, params *lightsail.GetBlueprintsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetBlueprintsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBlueprints")
	}

	var r0 *lightsail.GetBlueprintsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBlueprintsInput, ...func(*lightsail.Options)) (*lightsail.GetBlueprintsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBlueprintsInput, ...func(*lightsail.Options)) *lightsail.GetBlueprintsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBlueprintsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetBlueprintsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketAccessKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketAccessKeys(ctx context.Context, params *lightsail.GetBucketAccessKeysInput, optFns ...func(*lightsail.Options)) (*lightsail.GetBucketAccessKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketAccessKeys")
	}

	var r0 *lightsail.GetBucketAccessKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBucketAccessKeysInput, ...func(*lightsail.Options)) (*lightsail.GetBucketAccessKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBucketAccessKeysInput, ...func(*lightsail.Options)) *lightsail.GetBucketAccessKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBucketAccessKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetBucketAccessKeysInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketBundles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketBundles(ctx context.Context, params *lightsail.GetBucketBundlesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetBucketBundlesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketBundles")
	}

	var r0 *lightsail.GetBucketBundlesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBucketBundlesInput, ...func(*lightsail.Options)) (*lightsail.GetBucketBundlesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBucketBundlesInput, ...func(*lightsail.Options)) *lightsail.GetBucketBundlesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBucketBundlesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetBucketBundlesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketMetricData(ctx context.Context, params *lightsail.GetBucketMetricDataInput, optFns ...func(*lightsail.Options)) (*lightsail.GetBucketMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketMetricData")
	}

	var r0 *lightsail.GetBucketMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBucketMetricDataInput, ...func(*lightsail.Options)) (*lightsail.GetBucketMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBucketMetricDataInput, ...func(*lightsail.Options)) *lightsail.GetBucketMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBucketMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetBucketMetricDataInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBuckets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBuckets(ctx context.Context, params *lightsail.GetBucketsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetBucketsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBuckets")
	}

	var r0 *lightsail.GetBucketsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBucketsInput, ...func(*lightsail.Options)) (*lightsail.GetBucketsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBucketsInput, ...func(*lightsail.Options)) *lightsail.GetBucketsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBucketsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetBucketsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBundles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBundles(ctx context.Context, params *lightsail.GetBundlesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetBundlesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBundles")
	}

	var r0 *lightsail.GetBundlesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBundlesInput, ...func(*lightsail.Options)) (*lightsail.GetBundlesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetBundlesInput, ...func(*lightsail.Options)) *lightsail.GetBundlesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetBundlesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetBundlesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCertificates(ctx context.Context, params *lightsail.GetCertificatesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificates")
	}

	var r0 *lightsail.GetCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetCertificatesInput, ...func(*lightsail.Options)) (*lightsail.GetCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetCertificatesInput, ...func(*lightsail.Options)) *lightsail.GetCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetCertificatesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudFormationStackRecords provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCloudFormationStackRecords(ctx context.Context, params *lightsail.GetCloudFormationStackRecordsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetCloudFormationStackRecordsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudFormationStackRecords")
	}

	var r0 *lightsail.GetCloudFormationStackRecordsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetCloudFormationStackRecordsInput, ...func(*lightsail.Options)) (*lightsail.GetCloudFormationStackRecordsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetCloudFormationStackRecordsInput, ...func(*lightsail.Options)) *lightsail.GetCloudFormationStackRecordsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetCloudFormationStackRecordsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetCloudFormationStackRecordsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactMethods provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContactMethods(ctx context.Context, params *lightsail.GetContactMethodsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetContactMethodsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactMethods")
	}

	var r0 *lightsail.GetContactMethodsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContactMethodsInput, ...func(*lightsail.Options)) (*lightsail.GetContactMethodsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContactMethodsInput, ...func(*lightsail.Options)) *lightsail.GetContactMethodsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetContactMethodsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetContactMethodsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerAPIMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerAPIMetadata(ctx context.Context, params *lightsail.GetContainerAPIMetadataInput, optFns ...func(*lightsail.Options)) (*lightsail.GetContainerAPIMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerAPIMetadata")
	}

	var r0 *lightsail.GetContainerAPIMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerAPIMetadataInput, ...func(*lightsail.Options)) (*lightsail.GetContainerAPIMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerAPIMetadataInput, ...func(*lightsail.Options)) *lightsail.GetContainerAPIMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetContainerAPIMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetContainerAPIMetadataInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerImages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerImages(ctx context.Context, params *lightsail.GetContainerImagesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetContainerImagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerImages")
	}

	var r0 *lightsail.GetContainerImagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerImagesInput, ...func(*lightsail.Options)) (*lightsail.GetContainerImagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerImagesInput, ...func(*lightsail.Options)) *lightsail.GetContainerImagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetContainerImagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetContainerImagesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerLog provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerLog(ctx context.Context, params *lightsail.GetContainerLogInput, optFns ...func(*lightsail.Options)) (*lightsail.GetContainerLogOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerLog")
	}

	var r0 *lightsail.GetContainerLogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerLogInput, ...func(*lightsail.Options)) (*lightsail.GetContainerLogOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerLogInput, ...func(*lightsail.Options)) *lightsail.GetContainerLogOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetContainerLogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetContainerLogInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerServiceDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerServiceDeployments(ctx context.Context, params *lightsail.GetContainerServiceDeploymentsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetContainerServiceDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerServiceDeployments")
	}

	var r0 *lightsail.GetContainerServiceDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerServiceDeploymentsInput, ...func(*lightsail.Options)) (*lightsail.GetContainerServiceDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerServiceDeploymentsInput, ...func(*lightsail.Options)) *lightsail.GetContainerServiceDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetContainerServiceDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetContainerServiceDeploymentsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerServiceMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerServiceMetricData(ctx context.Context, params *lightsail.GetContainerServiceMetricDataInput, optFns ...func(*lightsail.Options)) (*lightsail.GetContainerServiceMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerServiceMetricData")
	}

	var r0 *lightsail.GetContainerServiceMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerServiceMetricDataInput, ...func(*lightsail.Options)) (*lightsail.GetContainerServiceMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerServiceMetricDataInput, ...func(*lightsail.Options)) *lightsail.GetContainerServiceMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetContainerServiceMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetContainerServiceMetricDataInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerServicePowers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerServicePowers(ctx context.Context, params *lightsail.GetContainerServicePowersInput, optFns ...func(*lightsail.Options)) (*lightsail.GetContainerServicePowersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerServicePowers")
	}

	var r0 *lightsail.GetContainerServicePowersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerServicePowersInput, ...func(*lightsail.Options)) (*lightsail.GetContainerServicePowersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerServicePowersInput, ...func(*lightsail.Options)) *lightsail.GetContainerServicePowersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetContainerServicePowersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetContainerServicePowersInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContainerServices(ctx context.Context, params *lightsail.GetContainerServicesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetContainerServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContainerServices")
	}

	var r0 *lightsail.GetContainerServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerServicesInput, ...func(*lightsail.Options)) (*lightsail.GetContainerServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetContainerServicesInput, ...func(*lightsail.Options)) *lightsail.GetContainerServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetContainerServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetContainerServicesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCostEstimate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCostEstimate(ctx context.Context, params *lightsail.GetCostEstimateInput, optFns ...func(*lightsail.Options)) (*lightsail.GetCostEstimateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCostEstimate")
	}

	var r0 *lightsail.GetCostEstimateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetCostEstimateInput, ...func(*lightsail.Options)) (*lightsail.GetCostEstimateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetCostEstimateInput, ...func(*lightsail.Options)) *lightsail.GetCostEstimateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetCostEstimateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetCostEstimateInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisk provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDisk(ctx context.Context, params *lightsail.GetDiskInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDiskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDisk")
	}

	var r0 *lightsail.GetDiskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskInput, ...func(*lightsail.Options)) (*lightsail.GetDiskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskInput, ...func(*lightsail.Options)) *lightsail.GetDiskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDiskInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiskSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDiskSnapshot(ctx context.Context, params *lightsail.GetDiskSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDiskSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDiskSnapshot")
	}

	var r0 *lightsail.GetDiskSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskSnapshotInput, ...func(*lightsail.Options)) (*lightsail.GetDiskSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskSnapshotInput, ...func(*lightsail.Options)) *lightsail.GetDiskSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDiskSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDiskSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDiskSnapshots(ctx context.Context, params *lightsail.GetDiskSnapshotsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDiskSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDiskSnapshots")
	}

	var r0 *lightsail.GetDiskSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskSnapshotsInput, ...func(*lightsail.Options)) (*lightsail.GetDiskSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDiskSnapshotsInput, ...func(*lightsail.Options)) *lightsail.GetDiskSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDiskSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDiskSnapshotsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDisks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDisks(ctx context.Context, params *lightsail.GetDisksInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDisksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDisks")
	}

	var r0 *lightsail.GetDisksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDisksInput, ...func(*lightsail.Options)) (*lightsail.GetDisksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDisksInput, ...func(*lightsail.Options)) *lightsail.GetDisksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDisksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDisksInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributionBundles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDistributionBundles(ctx context.Context, params *lightsail.GetDistributionBundlesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDistributionBundlesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributionBundles")
	}

	var r0 *lightsail.GetDistributionBundlesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDistributionBundlesInput, ...func(*lightsail.Options)) (*lightsail.GetDistributionBundlesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDistributionBundlesInput, ...func(*lightsail.Options)) *lightsail.GetDistributionBundlesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDistributionBundlesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDistributionBundlesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributionLatestCacheReset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDistributionLatestCacheReset(ctx context.Context, params *lightsail.GetDistributionLatestCacheResetInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDistributionLatestCacheResetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributionLatestCacheReset")
	}

	var r0 *lightsail.GetDistributionLatestCacheResetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDistributionLatestCacheResetInput, ...func(*lightsail.Options)) (*lightsail.GetDistributionLatestCacheResetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDistributionLatestCacheResetInput, ...func(*lightsail.Options)) *lightsail.GetDistributionLatestCacheResetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDistributionLatestCacheResetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDistributionLatestCacheResetInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributionMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDistributionMetricData(ctx context.Context, params *lightsail.GetDistributionMetricDataInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDistributionMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributionMetricData")
	}

	var r0 *lightsail.GetDistributionMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDistributionMetricDataInput, ...func(*lightsail.Options)) (*lightsail.GetDistributionMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDistributionMetricDataInput, ...func(*lightsail.Options)) *lightsail.GetDistributionMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDistributionMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDistributionMetricDataInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDistributions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDistributions(ctx context.Context, params *lightsail.GetDistributionsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDistributionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDistributions")
	}

	var r0 *lightsail.GetDistributionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDistributionsInput, ...func(*lightsail.Options)) (*lightsail.GetDistributionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDistributionsInput, ...func(*lightsail.Options)) *lightsail.GetDistributionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDistributionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDistributionsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomain(ctx context.Context, params *lightsail.GetDomainInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomain")
	}

	var r0 *lightsail.GetDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDomainInput, ...func(*lightsail.Options)) (*lightsail.GetDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDomainInput, ...func(*lightsail.Options)) *lightsail.GetDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDomainInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomains(ctx context.Context, params *lightsail.GetDomainsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomains")
	}

	var r0 *lightsail.GetDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDomainsInput, ...func(*lightsail.Options)) (*lightsail.GetDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetDomainsInput, ...func(*lightsail.Options)) *lightsail.GetDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetDomainsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExportSnapshotRecords provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExportSnapshotRecords(ctx context.Context, params *lightsail.GetExportSnapshotRecordsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetExportSnapshotRecordsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExportSnapshotRecords")
	}

	var r0 *lightsail.GetExportSnapshotRecordsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetExportSnapshotRecordsInput, ...func(*lightsail.Options)) (*lightsail.GetExportSnapshotRecordsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetExportSnapshotRecordsInput, ...func(*lightsail.Options)) *lightsail.GetExportSnapshotRecordsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetExportSnapshotRecordsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetExportSnapshotRecordsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstance(ctx context.Context, params *lightsail.GetInstanceInput, optFns ...func(*lightsail.Options)) (*lightsail.GetInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstance")
	}

	var r0 *lightsail.GetInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceInput, ...func(*lightsail.Options)) (*lightsail.GetInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceInput, ...func(*lightsail.Options)) *lightsail.GetInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceAccessDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstanceAccessDetails(ctx context.Context, params *lightsail.GetInstanceAccessDetailsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetInstanceAccessDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceAccessDetails")
	}

	var r0 *lightsail.GetInstanceAccessDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceAccessDetailsInput, ...func(*lightsail.Options)) (*lightsail.GetInstanceAccessDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceAccessDetailsInput, ...func(*lightsail.Options)) *lightsail.GetInstanceAccessDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceAccessDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceAccessDetailsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstanceMetricData(ctx context.Context, params *lightsail.GetInstanceMetricDataInput, optFns ...func(*lightsail.Options)) (*lightsail.GetInstanceMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceMetricData")
	}

	var r0 *lightsail.GetInstanceMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceMetricDataInput, ...func(*lightsail.Options)) (*lightsail.GetInstanceMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceMetricDataInput, ...func(*lightsail.Options)) *lightsail.GetInstanceMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceMetricDataInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstancePortStates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstancePortStates(ctx context.Context, params *lightsail.GetInstancePortStatesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetInstancePortStatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstancePortStates")
	}

	var r0 *lightsail.GetInstancePortStatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstancePortStatesInput, ...func(*lightsail.Options)) (*lightsail.GetInstancePortStatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstancePortStatesInput, ...func(*lightsail.Options)) *lightsail.GetInstancePortStatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstancePortStatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstancePortStatesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstanceSnapshot(ctx context.Context, params *lightsail.GetInstanceSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.GetInstanceSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceSnapshot")
	}

	var r0 *lightsail.GetInstanceSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceSnapshotInput, ...func(*lightsail.Options)) (*lightsail.GetInstanceSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceSnapshotInput, ...func(*lightsail.Options)) *lightsail.GetInstanceSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstanceSnapshots(ctx context.Context, params *lightsail.GetInstanceSnapshotsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetInstanceSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceSnapshots")
	}

	var r0 *lightsail.GetInstanceSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceSnapshotsInput, ...func(*lightsail.Options)) (*lightsail.GetInstanceSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceSnapshotsInput, ...func(*lightsail.Options)) *lightsail.GetInstanceSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceSnapshotsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstanceState(ctx context.Context, params *lightsail.GetInstanceStateInput, optFns ...func(*lightsail.Options)) (*lightsail.GetInstanceStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstanceState")
	}

	var r0 *lightsail.GetInstanceStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceStateInput, ...func(*lightsail.Options)) (*lightsail.GetInstanceStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstanceStateInput, ...func(*lightsail.Options)) *lightsail.GetInstanceStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstanceStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstanceStateInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInstances(ctx context.Context, params *lightsail.GetInstancesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInstances")
	}

	var r0 *lightsail.GetInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstancesInput, ...func(*lightsail.Options)) (*lightsail.GetInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetInstancesInput, ...func(*lightsail.Options)) *lightsail.GetInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetInstancesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPair provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetKeyPair(ctx context.Context, params *lightsail.GetKeyPairInput, optFns ...func(*lightsail.Options)) (*lightsail.GetKeyPairOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyPair")
	}

	var r0 *lightsail.GetKeyPairOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetKeyPairInput, ...func(*lightsail.Options)) (*lightsail.GetKeyPairOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetKeyPairInput, ...func(*lightsail.Options)) *lightsail.GetKeyPairOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetKeyPairOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetKeyPairInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPairs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetKeyPairs(ctx context.Context, params *lightsail.GetKeyPairsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetKeyPairsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyPairs")
	}

	var r0 *lightsail.GetKeyPairsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetKeyPairsInput, ...func(*lightsail.Options)) (*lightsail.GetKeyPairsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetKeyPairsInput, ...func(*lightsail.Options)) *lightsail.GetKeyPairsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetKeyPairsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetKeyPairsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoadBalancer(ctx context.Context, params *lightsail.GetLoadBalancerInput, optFns ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoadBalancer")
	}

	var r0 *lightsail.GetLoadBalancerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerInput, ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerInput, ...func(*lightsail.Options)) *lightsail.GetLoadBalancerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancerInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoadBalancerMetricData(ctx context.Context, params *lightsail.GetLoadBalancerMetricDataInput, optFns ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoadBalancerMetricData")
	}

	var r0 *lightsail.GetLoadBalancerMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerMetricDataInput, ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerMetricDataInput, ...func(*lightsail.Options)) *lightsail.GetLoadBalancerMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancerMetricDataInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerTlsCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoadBalancerTlsCertificates(ctx context.Context, params *lightsail.GetLoadBalancerTlsCertificatesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoadBalancerTlsCertificates")
	}

	var r0 *lightsail.GetLoadBalancerTlsCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerTlsCertificatesInput, ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerTlsCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerTlsCertificatesInput, ...func(*lightsail.Options)) *lightsail.GetLoadBalancerTlsCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerTlsCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancerTlsCertificatesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancerTlsPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoadBalancerTlsPolicies(ctx context.Context, params *lightsail.GetLoadBalancerTlsPoliciesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerTlsPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoadBalancerTlsPolicies")
	}

	var r0 *lightsail.GetLoadBalancerTlsPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerTlsPoliciesInput, ...func(*lightsail.Options)) (*lightsail.GetLoadBalancerTlsPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancerTlsPoliciesInput, ...func(*lightsail.Options)) *lightsail.GetLoadBalancerTlsPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancerTlsPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancerTlsPoliciesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoadBalancers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoadBalancers(ctx context.Context, params *lightsail.GetLoadBalancersInput, optFns ...func(*lightsail.Options)) (*lightsail.GetLoadBalancersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoadBalancers")
	}

	var r0 *lightsail.GetLoadBalancersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancersInput, ...func(*lightsail.Options)) (*lightsail.GetLoadBalancersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetLoadBalancersInput, ...func(*lightsail.Options)) *lightsail.GetLoadBalancersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetLoadBalancersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetLoadBalancersInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOperation(ctx context.Context, params *lightsail.GetOperationInput, optFns ...func(*lightsail.Options)) (*lightsail.GetOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOperation")
	}

	var r0 *lightsail.GetOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationInput, ...func(*lightsail.Options)) (*lightsail.GetOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationInput, ...func(*lightsail.Options)) *lightsail.GetOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetOperationInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOperations(ctx context.Context, params *lightsail.GetOperationsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOperations")
	}

	var r0 *lightsail.GetOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationsInput, ...func(*lightsail.Options)) (*lightsail.GetOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationsInput, ...func(*lightsail.Options)) *lightsail.GetOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetOperationsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOperationsForResource(ctx context.Context, params *lightsail.GetOperationsForResourceInput, optFns ...func(*lightsail.Options)) (*lightsail.GetOperationsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOperationsForResource")
	}

	var r0 *lightsail.GetOperationsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationsForResourceInput, ...func(*lightsail.Options)) (*lightsail.GetOperationsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetOperationsForResourceInput, ...func(*lightsail.Options)) *lightsail.GetOperationsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetOperationsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetOperationsForResourceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRegions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRegions(ctx context.Context, params *lightsail.GetRegionsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRegionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRegions")
	}

	var r0 *lightsail.GetRegionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRegionsInput, ...func(*lightsail.Options)) (*lightsail.GetRegionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRegionsInput, ...func(*lightsail.Options)) *lightsail.GetRegionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRegionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRegionsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabase(ctx context.Context, params *lightsail.GetRelationalDatabaseInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabase")
	}

	var r0 *lightsail.GetRelationalDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseBlueprints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseBlueprints(ctx context.Context, params *lightsail.GetRelationalDatabaseBlueprintsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseBlueprints")
	}

	var r0 *lightsail.GetRelationalDatabaseBlueprintsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseBlueprintsInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseBlueprintsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseBlueprintsInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseBlueprintsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseBlueprintsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseBlueprintsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseBundles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseBundles(ctx context.Context, params *lightsail.GetRelationalDatabaseBundlesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseBundlesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseBundles")
	}

	var r0 *lightsail.GetRelationalDatabaseBundlesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseBundlesInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseBundlesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseBundlesInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseBundlesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseBundlesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseBundlesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseEvents(ctx context.Context, params *lightsail.GetRelationalDatabaseEventsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseEvents")
	}

	var r0 *lightsail.GetRelationalDatabaseEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseEventsInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseEventsInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseEventsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseLogEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseLogEvents(ctx context.Context, params *lightsail.GetRelationalDatabaseLogEventsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseLogEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseLogEvents")
	}

	var r0 *lightsail.GetRelationalDatabaseLogEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseLogEventsInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseLogEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseLogEventsInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseLogEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseLogEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseLogEventsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseLogStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseLogStreams(ctx context.Context, params *lightsail.GetRelationalDatabaseLogStreamsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseLogStreams")
	}

	var r0 *lightsail.GetRelationalDatabaseLogStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseLogStreamsInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseLogStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseLogStreamsInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseLogStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseLogStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseLogStreamsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseMasterUserPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseMasterUserPassword(ctx context.Context, params *lightsail.GetRelationalDatabaseMasterUserPasswordInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseMasterUserPassword")
	}

	var r0 *lightsail.GetRelationalDatabaseMasterUserPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseMasterUserPasswordInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseMasterUserPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseMasterUserPasswordInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseMasterUserPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseMasterUserPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseMasterUserPasswordInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseMetricData provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseMetricData(ctx context.Context, params *lightsail.GetRelationalDatabaseMetricDataInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseMetricDataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseMetricData")
	}

	var r0 *lightsail.GetRelationalDatabaseMetricDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseMetricDataInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseMetricDataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseMetricDataInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseMetricDataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseMetricDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseMetricDataInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseParameters(ctx context.Context, params *lightsail.GetRelationalDatabaseParametersInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseParameters")
	}

	var r0 *lightsail.GetRelationalDatabaseParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseParametersInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseParametersInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseParametersInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseSnapshot(ctx context.Context, params *lightsail.GetRelationalDatabaseSnapshotInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseSnapshot")
	}

	var r0 *lightsail.GetRelationalDatabaseSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabaseSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabaseSnapshots(ctx context.Context, params *lightsail.GetRelationalDatabaseSnapshotsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabaseSnapshots")
	}

	var r0 *lightsail.GetRelationalDatabaseSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotsInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabaseSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotsInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabaseSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabaseSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabaseSnapshotsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelationalDatabases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelationalDatabases(ctx context.Context, params *lightsail.GetRelationalDatabasesInput, optFns ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelationalDatabases")
	}

	var r0 *lightsail.GetRelationalDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabasesInput, ...func(*lightsail.Options)) (*lightsail.GetRelationalDatabasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetRelationalDatabasesInput, ...func(*lightsail.Options)) *lightsail.GetRelationalDatabasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetRelationalDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetRelationalDatabasesInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSetupHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSetupHistory(ctx context.Context, params *lightsail.GetSetupHistoryInput, optFns ...func(*lightsail.Options)) (*lightsail.GetSetupHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSetupHistory")
	}

	var r0 *lightsail.GetSetupHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetSetupHistoryInput, ...func(*lightsail.Options)) (*lightsail.GetSetupHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetSetupHistoryInput, ...func(*lightsail.Options)) *lightsail.GetSetupHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetSetupHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetSetupHistoryInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStaticIp(ctx context.Context, params *lightsail.GetStaticIpInput, optFns ...func(*lightsail.Options)) (*lightsail.GetStaticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStaticIp")
	}

	var r0 *lightsail.GetStaticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetStaticIpInput, ...func(*lightsail.Options)) (*lightsail.GetStaticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetStaticIpInput, ...func(*lightsail.Options)) *lightsail.GetStaticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetStaticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetStaticIpInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStaticIps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStaticIps(ctx context.Context, params *lightsail.GetStaticIpsInput, optFns ...func(*lightsail.Options)) (*lightsail.GetStaticIpsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStaticIps")
	}

	var r0 *lightsail.GetStaticIpsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetStaticIpsInput, ...func(*lightsail.Options)) (*lightsail.GetStaticIpsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.GetStaticIpsInput, ...func(*lightsail.Options)) *lightsail.GetStaticIpsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.GetStaticIpsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.GetStaticIpsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportKeyPair provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportKeyPair(ctx context.Context, params *lightsail.ImportKeyPairInput, optFns ...func(*lightsail.Options)) (*lightsail.ImportKeyPairOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportKeyPair")
	}

	var r0 *lightsail.ImportKeyPairOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ImportKeyPairInput, ...func(*lightsail.Options)) (*lightsail.ImportKeyPairOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ImportKeyPairInput, ...func(*lightsail.Options)) *lightsail.ImportKeyPairOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ImportKeyPairOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.ImportKeyPairInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsVpcPeered provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) IsVpcPeered(ctx context.Context, params *lightsail.IsVpcPeeredInput, optFns ...func(*lightsail.Options)) (*lightsail.IsVpcPeeredOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for IsVpcPeered")
	}

	var r0 *lightsail.IsVpcPeeredOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.IsVpcPeeredInput, ...func(*lightsail.Options)) (*lightsail.IsVpcPeeredOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.IsVpcPeeredInput, ...func(*lightsail.Options)) *lightsail.IsVpcPeeredOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.IsVpcPeeredOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.IsVpcPeeredInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpenInstancePublicPorts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) OpenInstancePublicPorts(ctx context.Context, params *lightsail.OpenInstancePublicPortsInput, optFns ...func(*lightsail.Options)) (*lightsail.OpenInstancePublicPortsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for OpenInstancePublicPorts")
	}

	var r0 *lightsail.OpenInstancePublicPortsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.OpenInstancePublicPortsInput, ...func(*lightsail.Options)) (*lightsail.OpenInstancePublicPortsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.OpenInstancePublicPortsInput, ...func(*lightsail.Options)) *lightsail.OpenInstancePublicPortsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.OpenInstancePublicPortsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.OpenInstancePublicPortsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() lightsail.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 lightsail.Options
	if rf, ok := ret.Get(0).(func() lightsail.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(lightsail.Options)
	}

	return r0
}

// PeerVpc provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PeerVpc(ctx context.Context, params *lightsail.PeerVpcInput, optFns ...func(*lightsail.Options)) (*lightsail.PeerVpcOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PeerVpc")
	}

	var r0 *lightsail.PeerVpcOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.PeerVpcInput, ...func(*lightsail.Options)) (*lightsail.PeerVpcOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.PeerVpcInput, ...func(*lightsail.Options)) *lightsail.PeerVpcOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.PeerVpcOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.PeerVpcInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAlarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAlarm(ctx context.Context, params *lightsail.PutAlarmInput, optFns ...func(*lightsail.Options)) (*lightsail.PutAlarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAlarm")
	}

	var r0 *lightsail.PutAlarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.PutAlarmInput, ...func(*lightsail.Options)) (*lightsail.PutAlarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.PutAlarmInput, ...func(*lightsail.Options)) *lightsail.PutAlarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.PutAlarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.PutAlarmInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutInstancePublicPorts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutInstancePublicPorts(ctx context.Context, params *lightsail.PutInstancePublicPortsInput, optFns ...func(*lightsail.Options)) (*lightsail.PutInstancePublicPortsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutInstancePublicPorts")
	}

	var r0 *lightsail.PutInstancePublicPortsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.PutInstancePublicPortsInput, ...func(*lightsail.Options)) (*lightsail.PutInstancePublicPortsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.PutInstancePublicPortsInput, ...func(*lightsail.Options)) *lightsail.PutInstancePublicPortsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.PutInstancePublicPortsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.PutInstancePublicPortsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootInstance(ctx context.Context, params *lightsail.RebootInstanceInput, optFns ...func(*lightsail.Options)) (*lightsail.RebootInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootInstance")
	}

	var r0 *lightsail.RebootInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.RebootInstanceInput, ...func(*lightsail.Options)) (*lightsail.RebootInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.RebootInstanceInput, ...func(*lightsail.Options)) *lightsail.RebootInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.RebootInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.RebootInstanceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootRelationalDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootRelationalDatabase(ctx context.Context, params *lightsail.RebootRelationalDatabaseInput, optFns ...func(*lightsail.Options)) (*lightsail.RebootRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootRelationalDatabase")
	}

	var r0 *lightsail.RebootRelationalDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.RebootRelationalDatabaseInput, ...func(*lightsail.Options)) (*lightsail.RebootRelationalDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.RebootRelationalDatabaseInput, ...func(*lightsail.Options)) *lightsail.RebootRelationalDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.RebootRelationalDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.RebootRelationalDatabaseInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterContainerImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterContainerImage(ctx context.Context, params *lightsail.RegisterContainerImageInput, optFns ...func(*lightsail.Options)) (*lightsail.RegisterContainerImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterContainerImage")
	}

	var r0 *lightsail.RegisterContainerImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.RegisterContainerImageInput, ...func(*lightsail.Options)) (*lightsail.RegisterContainerImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.RegisterContainerImageInput, ...func(*lightsail.Options)) *lightsail.RegisterContainerImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.RegisterContainerImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.RegisterContainerImageInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReleaseStaticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReleaseStaticIp(ctx context.Context, params *lightsail.ReleaseStaticIpInput, optFns ...func(*lightsail.Options)) (*lightsail.ReleaseStaticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReleaseStaticIp")
	}

	var r0 *lightsail.ReleaseStaticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ReleaseStaticIpInput, ...func(*lightsail.Options)) (*lightsail.ReleaseStaticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ReleaseStaticIpInput, ...func(*lightsail.Options)) *lightsail.ReleaseStaticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ReleaseStaticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.ReleaseStaticIpInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDistributionCache provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetDistributionCache(ctx context.Context, params *lightsail.ResetDistributionCacheInput, optFns ...func(*lightsail.Options)) (*lightsail.ResetDistributionCacheOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetDistributionCache")
	}

	var r0 *lightsail.ResetDistributionCacheOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ResetDistributionCacheInput, ...func(*lightsail.Options)) (*lightsail.ResetDistributionCacheOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.ResetDistributionCacheInput, ...func(*lightsail.Options)) *lightsail.ResetDistributionCacheOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.ResetDistributionCacheOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.ResetDistributionCacheInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendContactMethodVerification provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendContactMethodVerification(ctx context.Context, params *lightsail.SendContactMethodVerificationInput, optFns ...func(*lightsail.Options)) (*lightsail.SendContactMethodVerificationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendContactMethodVerification")
	}

	var r0 *lightsail.SendContactMethodVerificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.SendContactMethodVerificationInput, ...func(*lightsail.Options)) (*lightsail.SendContactMethodVerificationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.SendContactMethodVerificationInput, ...func(*lightsail.Options)) *lightsail.SendContactMethodVerificationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.SendContactMethodVerificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.SendContactMethodVerificationInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetIpAddressType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetIpAddressType(ctx context.Context, params *lightsail.SetIpAddressTypeInput, optFns ...func(*lightsail.Options)) (*lightsail.SetIpAddressTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetIpAddressType")
	}

	var r0 *lightsail.SetIpAddressTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.SetIpAddressTypeInput, ...func(*lightsail.Options)) (*lightsail.SetIpAddressTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.SetIpAddressTypeInput, ...func(*lightsail.Options)) *lightsail.SetIpAddressTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.SetIpAddressTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.SetIpAddressTypeInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetResourceAccessForBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetResourceAccessForBucket(ctx context.Context, params *lightsail.SetResourceAccessForBucketInput, optFns ...func(*lightsail.Options)) (*lightsail.SetResourceAccessForBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetResourceAccessForBucket")
	}

	var r0 *lightsail.SetResourceAccessForBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.SetResourceAccessForBucketInput, ...func(*lightsail.Options)) (*lightsail.SetResourceAccessForBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.SetResourceAccessForBucketInput, ...func(*lightsail.Options)) *lightsail.SetResourceAccessForBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.SetResourceAccessForBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.SetResourceAccessForBucketInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetupInstanceHttps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetupInstanceHttps(ctx context.Context, params *lightsail.SetupInstanceHttpsInput, optFns ...func(*lightsail.Options)) (*lightsail.SetupInstanceHttpsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetupInstanceHttps")
	}

	var r0 *lightsail.SetupInstanceHttpsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.SetupInstanceHttpsInput, ...func(*lightsail.Options)) (*lightsail.SetupInstanceHttpsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.SetupInstanceHttpsInput, ...func(*lightsail.Options)) *lightsail.SetupInstanceHttpsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.SetupInstanceHttpsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.SetupInstanceHttpsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartGUISession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartGUISession(ctx context.Context, params *lightsail.StartGUISessionInput, optFns ...func(*lightsail.Options)) (*lightsail.StartGUISessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartGUISession")
	}

	var r0 *lightsail.StartGUISessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StartGUISessionInput, ...func(*lightsail.Options)) (*lightsail.StartGUISessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StartGUISessionInput, ...func(*lightsail.Options)) *lightsail.StartGUISessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StartGUISessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StartGUISessionInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartInstance(ctx context.Context, params *lightsail.StartInstanceInput, optFns ...func(*lightsail.Options)) (*lightsail.StartInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInstance")
	}

	var r0 *lightsail.StartInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StartInstanceInput, ...func(*lightsail.Options)) (*lightsail.StartInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StartInstanceInput, ...func(*lightsail.Options)) *lightsail.StartInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StartInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StartInstanceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRelationalDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRelationalDatabase(ctx context.Context, params *lightsail.StartRelationalDatabaseInput, optFns ...func(*lightsail.Options)) (*lightsail.StartRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRelationalDatabase")
	}

	var r0 *lightsail.StartRelationalDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StartRelationalDatabaseInput, ...func(*lightsail.Options)) (*lightsail.StartRelationalDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StartRelationalDatabaseInput, ...func(*lightsail.Options)) *lightsail.StartRelationalDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StartRelationalDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StartRelationalDatabaseInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopGUISession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopGUISession(ctx context.Context, params *lightsail.StopGUISessionInput, optFns ...func(*lightsail.Options)) (*lightsail.StopGUISessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopGUISession")
	}

	var r0 *lightsail.StopGUISessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StopGUISessionInput, ...func(*lightsail.Options)) (*lightsail.StopGUISessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StopGUISessionInput, ...func(*lightsail.Options)) *lightsail.StopGUISessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StopGUISessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StopGUISessionInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopInstance(ctx context.Context, params *lightsail.StopInstanceInput, optFns ...func(*lightsail.Options)) (*lightsail.StopInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopInstance")
	}

	var r0 *lightsail.StopInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StopInstanceInput, ...func(*lightsail.Options)) (*lightsail.StopInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StopInstanceInput, ...func(*lightsail.Options)) *lightsail.StopInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StopInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StopInstanceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopRelationalDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopRelationalDatabase(ctx context.Context, params *lightsail.StopRelationalDatabaseInput, optFns ...func(*lightsail.Options)) (*lightsail.StopRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopRelationalDatabase")
	}

	var r0 *lightsail.StopRelationalDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StopRelationalDatabaseInput, ...func(*lightsail.Options)) (*lightsail.StopRelationalDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.StopRelationalDatabaseInput, ...func(*lightsail.Options)) *lightsail.StopRelationalDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.StopRelationalDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.StopRelationalDatabaseInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *lightsail.TagResourceInput, optFns ...func(*lightsail.Options)) (*lightsail.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *lightsail.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.TagResourceInput, ...func(*lightsail.Options)) (*lightsail.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.TagResourceInput, ...func(*lightsail.Options)) *lightsail.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.TagResourceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestAlarm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestAlarm(ctx context.Context, params *lightsail.TestAlarmInput, optFns ...func(*lightsail.Options)) (*lightsail.TestAlarmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestAlarm")
	}

	var r0 *lightsail.TestAlarmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.TestAlarmInput, ...func(*lightsail.Options)) (*lightsail.TestAlarmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.TestAlarmInput, ...func(*lightsail.Options)) *lightsail.TestAlarmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.TestAlarmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.TestAlarmInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpeerVpc provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnpeerVpc(ctx context.Context, params *lightsail.UnpeerVpcInput, optFns ...func(*lightsail.Options)) (*lightsail.UnpeerVpcOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnpeerVpc")
	}

	var r0 *lightsail.UnpeerVpcOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UnpeerVpcInput, ...func(*lightsail.Options)) (*lightsail.UnpeerVpcOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UnpeerVpcInput, ...func(*lightsail.Options)) *lightsail.UnpeerVpcOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UnpeerVpcOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UnpeerVpcInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *lightsail.UntagResourceInput, optFns ...func(*lightsail.Options)) (*lightsail.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *lightsail.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UntagResourceInput, ...func(*lightsail.Options)) (*lightsail.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UntagResourceInput, ...func(*lightsail.Options)) *lightsail.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UntagResourceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBucket(ctx context.Context, params *lightsail.UpdateBucketInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBucket")
	}

	var r0 *lightsail.UpdateBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateBucketInput, ...func(*lightsail.Options)) (*lightsail.UpdateBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateBucketInput, ...func(*lightsail.Options)) *lightsail.UpdateBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateBucketInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBucketBundle provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBucketBundle(ctx context.Context, params *lightsail.UpdateBucketBundleInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateBucketBundleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBucketBundle")
	}

	var r0 *lightsail.UpdateBucketBundleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateBucketBundleInput, ...func(*lightsail.Options)) (*lightsail.UpdateBucketBundleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateBucketBundleInput, ...func(*lightsail.Options)) *lightsail.UpdateBucketBundleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateBucketBundleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateBucketBundleInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContainerService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContainerService(ctx context.Context, params *lightsail.UpdateContainerServiceInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateContainerServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContainerService")
	}

	var r0 *lightsail.UpdateContainerServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateContainerServiceInput, ...func(*lightsail.Options)) (*lightsail.UpdateContainerServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateContainerServiceInput, ...func(*lightsail.Options)) *lightsail.UpdateContainerServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateContainerServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateContainerServiceInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDistribution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDistribution(ctx context.Context, params *lightsail.UpdateDistributionInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateDistributionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistribution")
	}

	var r0 *lightsail.UpdateDistributionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateDistributionInput, ...func(*lightsail.Options)) (*lightsail.UpdateDistributionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateDistributionInput, ...func(*lightsail.Options)) *lightsail.UpdateDistributionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateDistributionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateDistributionInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDistributionBundle provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDistributionBundle(ctx context.Context, params *lightsail.UpdateDistributionBundleInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateDistributionBundleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDistributionBundle")
	}

	var r0 *lightsail.UpdateDistributionBundleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateDistributionBundleInput, ...func(*lightsail.Options)) (*lightsail.UpdateDistributionBundleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateDistributionBundleInput, ...func(*lightsail.Options)) *lightsail.UpdateDistributionBundleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateDistributionBundleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateDistributionBundleInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainEntry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainEntry(ctx context.Context, params *lightsail.UpdateDomainEntryInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateDomainEntryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainEntry")
	}

	var r0 *lightsail.UpdateDomainEntryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateDomainEntryInput, ...func(*lightsail.Options)) (*lightsail.UpdateDomainEntryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateDomainEntryInput, ...func(*lightsail.Options)) *lightsail.UpdateDomainEntryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateDomainEntryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateDomainEntryInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstanceMetadataOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInstanceMetadataOptions(ctx context.Context, params *lightsail.UpdateInstanceMetadataOptionsInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateInstanceMetadataOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstanceMetadataOptions")
	}

	var r0 *lightsail.UpdateInstanceMetadataOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateInstanceMetadataOptionsInput, ...func(*lightsail.Options)) (*lightsail.UpdateInstanceMetadataOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateInstanceMetadataOptionsInput, ...func(*lightsail.Options)) *lightsail.UpdateInstanceMetadataOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateInstanceMetadataOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateInstanceMetadataOptionsInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoadBalancerAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLoadBalancerAttribute(ctx context.Context, params *lightsail.UpdateLoadBalancerAttributeInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateLoadBalancerAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoadBalancerAttribute")
	}

	var r0 *lightsail.UpdateLoadBalancerAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateLoadBalancerAttributeInput, ...func(*lightsail.Options)) (*lightsail.UpdateLoadBalancerAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateLoadBalancerAttributeInput, ...func(*lightsail.Options)) *lightsail.UpdateLoadBalancerAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateLoadBalancerAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateLoadBalancerAttributeInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelationalDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRelationalDatabase(ctx context.Context, params *lightsail.UpdateRelationalDatabaseInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateRelationalDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRelationalDatabase")
	}

	var r0 *lightsail.UpdateRelationalDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateRelationalDatabaseInput, ...func(*lightsail.Options)) (*lightsail.UpdateRelationalDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateRelationalDatabaseInput, ...func(*lightsail.Options)) *lightsail.UpdateRelationalDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateRelationalDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateRelationalDatabaseInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelationalDatabaseParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRelationalDatabaseParameters(ctx context.Context, params *lightsail.UpdateRelationalDatabaseParametersInput, optFns ...func(*lightsail.Options)) (*lightsail.UpdateRelationalDatabaseParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRelationalDatabaseParameters")
	}

	var r0 *lightsail.UpdateRelationalDatabaseParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateRelationalDatabaseParametersInput, ...func(*lightsail.Options)) (*lightsail.UpdateRelationalDatabaseParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lightsail.UpdateRelationalDatabaseParametersInput, ...func(*lightsail.Options)) *lightsail.UpdateRelationalDatabaseParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lightsail.UpdateRelationalDatabaseParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lightsail.UpdateRelationalDatabaseParametersInput, ...func(*lightsail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
