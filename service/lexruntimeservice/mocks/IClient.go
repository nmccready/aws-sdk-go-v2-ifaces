// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	lexruntimeservice "github.com/aws/aws-sdk-go-v2/service/lexruntimeservice"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DeleteSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSession(ctx context.Context, params *lexruntimeservice.DeleteSessionInput, optFns ...func(*lexruntimeservice.Options)) (*lexruntimeservice.DeleteSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSession")
	}

	var r0 *lexruntimeservice.DeleteSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.DeleteSessionInput, ...func(*lexruntimeservice.Options)) (*lexruntimeservice.DeleteSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.DeleteSessionInput, ...func(*lexruntimeservice.Options)) *lexruntimeservice.DeleteSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimeservice.DeleteSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimeservice.DeleteSessionInput, ...func(*lexruntimeservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSession(ctx context.Context, params *lexruntimeservice.GetSessionInput, optFns ...func(*lexruntimeservice.Options)) (*lexruntimeservice.GetSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *lexruntimeservice.GetSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.GetSessionInput, ...func(*lexruntimeservice.Options)) (*lexruntimeservice.GetSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.GetSessionInput, ...func(*lexruntimeservice.Options)) *lexruntimeservice.GetSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimeservice.GetSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimeservice.GetSessionInput, ...func(*lexruntimeservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() lexruntimeservice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 lexruntimeservice.Options
	if rf, ok := ret.Get(0).(func() lexruntimeservice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(lexruntimeservice.Options)
	}

	return r0
}

// PostContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PostContent(ctx context.Context, params *lexruntimeservice.PostContentInput, optFns ...func(*lexruntimeservice.Options)) (*lexruntimeservice.PostContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostContent")
	}

	var r0 *lexruntimeservice.PostContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.PostContentInput, ...func(*lexruntimeservice.Options)) (*lexruntimeservice.PostContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.PostContentInput, ...func(*lexruntimeservice.Options)) *lexruntimeservice.PostContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimeservice.PostContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimeservice.PostContentInput, ...func(*lexruntimeservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PostText provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PostText(ctx context.Context, params *lexruntimeservice.PostTextInput, optFns ...func(*lexruntimeservice.Options)) (*lexruntimeservice.PostTextOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PostText")
	}

	var r0 *lexruntimeservice.PostTextOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.PostTextInput, ...func(*lexruntimeservice.Options)) (*lexruntimeservice.PostTextOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.PostTextInput, ...func(*lexruntimeservice.Options)) *lexruntimeservice.PostTextOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimeservice.PostTextOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimeservice.PostTextInput, ...func(*lexruntimeservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSession(ctx context.Context, params *lexruntimeservice.PutSessionInput, optFns ...func(*lexruntimeservice.Options)) (*lexruntimeservice.PutSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSession")
	}

	var r0 *lexruntimeservice.PutSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.PutSessionInput, ...func(*lexruntimeservice.Options)) (*lexruntimeservice.PutSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lexruntimeservice.PutSessionInput, ...func(*lexruntimeservice.Options)) *lexruntimeservice.PutSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lexruntimeservice.PutSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lexruntimeservice.PutSessionInput, ...func(*lexruntimeservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
