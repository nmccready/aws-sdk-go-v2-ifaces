// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	detective "github.com/aws/aws-sdk-go-v2/service/detective"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptInvitation(ctx context.Context, params *detective.AcceptInvitationInput, optFns ...func(*detective.Options)) (*detective.AcceptInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 *detective.AcceptInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.AcceptInvitationInput, ...func(*detective.Options)) (*detective.AcceptInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.AcceptInvitationInput, ...func(*detective.Options)) *detective.AcceptInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.AcceptInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.AcceptInvitationInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetGraphMemberDatasources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetGraphMemberDatasources(ctx context.Context, params *detective.BatchGetGraphMemberDatasourcesInput, optFns ...func(*detective.Options)) (*detective.BatchGetGraphMemberDatasourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetGraphMemberDatasources")
	}

	var r0 *detective.BatchGetGraphMemberDatasourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.BatchGetGraphMemberDatasourcesInput, ...func(*detective.Options)) (*detective.BatchGetGraphMemberDatasourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.BatchGetGraphMemberDatasourcesInput, ...func(*detective.Options)) *detective.BatchGetGraphMemberDatasourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.BatchGetGraphMemberDatasourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.BatchGetGraphMemberDatasourcesInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetMembershipDatasources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetMembershipDatasources(ctx context.Context, params *detective.BatchGetMembershipDatasourcesInput, optFns ...func(*detective.Options)) (*detective.BatchGetMembershipDatasourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetMembershipDatasources")
	}

	var r0 *detective.BatchGetMembershipDatasourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.BatchGetMembershipDatasourcesInput, ...func(*detective.Options)) (*detective.BatchGetMembershipDatasourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.BatchGetMembershipDatasourcesInput, ...func(*detective.Options)) *detective.BatchGetMembershipDatasourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.BatchGetMembershipDatasourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.BatchGetMembershipDatasourcesInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGraph(ctx context.Context, params *detective.CreateGraphInput, optFns ...func(*detective.Options)) (*detective.CreateGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGraph")
	}

	var r0 *detective.CreateGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.CreateGraphInput, ...func(*detective.Options)) (*detective.CreateGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.CreateGraphInput, ...func(*detective.Options)) *detective.CreateGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.CreateGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.CreateGraphInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMembers(ctx context.Context, params *detective.CreateMembersInput, optFns ...func(*detective.Options)) (*detective.CreateMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMembers")
	}

	var r0 *detective.CreateMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.CreateMembersInput, ...func(*detective.Options)) (*detective.CreateMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.CreateMembersInput, ...func(*detective.Options)) *detective.CreateMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.CreateMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.CreateMembersInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGraph provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGraph(ctx context.Context, params *detective.DeleteGraphInput, optFns ...func(*detective.Options)) (*detective.DeleteGraphOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGraph")
	}

	var r0 *detective.DeleteGraphOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DeleteGraphInput, ...func(*detective.Options)) (*detective.DeleteGraphOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DeleteGraphInput, ...func(*detective.Options)) *detective.DeleteGraphOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.DeleteGraphOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.DeleteGraphInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMembers(ctx context.Context, params *detective.DeleteMembersInput, optFns ...func(*detective.Options)) (*detective.DeleteMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMembers")
	}

	var r0 *detective.DeleteMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DeleteMembersInput, ...func(*detective.Options)) (*detective.DeleteMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DeleteMembersInput, ...func(*detective.Options)) *detective.DeleteMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.DeleteMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.DeleteMembersInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationConfiguration(ctx context.Context, params *detective.DescribeOrganizationConfigurationInput, optFns ...func(*detective.Options)) (*detective.DescribeOrganizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationConfiguration")
	}

	var r0 *detective.DescribeOrganizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DescribeOrganizationConfigurationInput, ...func(*detective.Options)) (*detective.DescribeOrganizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DescribeOrganizationConfigurationInput, ...func(*detective.Options)) *detective.DescribeOrganizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.DescribeOrganizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.DescribeOrganizationConfigurationInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableOrganizationAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableOrganizationAdminAccount(ctx context.Context, params *detective.DisableOrganizationAdminAccountInput, optFns ...func(*detective.Options)) (*detective.DisableOrganizationAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableOrganizationAdminAccount")
	}

	var r0 *detective.DisableOrganizationAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DisableOrganizationAdminAccountInput, ...func(*detective.Options)) (*detective.DisableOrganizationAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DisableOrganizationAdminAccountInput, ...func(*detective.Options)) *detective.DisableOrganizationAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.DisableOrganizationAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.DisableOrganizationAdminAccountInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMembership(ctx context.Context, params *detective.DisassociateMembershipInput, optFns ...func(*detective.Options)) (*detective.DisassociateMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMembership")
	}

	var r0 *detective.DisassociateMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DisassociateMembershipInput, ...func(*detective.Options)) (*detective.DisassociateMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.DisassociateMembershipInput, ...func(*detective.Options)) *detective.DisassociateMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.DisassociateMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.DisassociateMembershipInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableOrganizationAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableOrganizationAdminAccount(ctx context.Context, params *detective.EnableOrganizationAdminAccountInput, optFns ...func(*detective.Options)) (*detective.EnableOrganizationAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableOrganizationAdminAccount")
	}

	var r0 *detective.EnableOrganizationAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.EnableOrganizationAdminAccountInput, ...func(*detective.Options)) (*detective.EnableOrganizationAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.EnableOrganizationAdminAccountInput, ...func(*detective.Options)) *detective.EnableOrganizationAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.EnableOrganizationAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.EnableOrganizationAdminAccountInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvestigation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInvestigation(ctx context.Context, params *detective.GetInvestigationInput, optFns ...func(*detective.Options)) (*detective.GetInvestigationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvestigation")
	}

	var r0 *detective.GetInvestigationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.GetInvestigationInput, ...func(*detective.Options)) (*detective.GetInvestigationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.GetInvestigationInput, ...func(*detective.Options)) *detective.GetInvestigationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.GetInvestigationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.GetInvestigationInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMembers(ctx context.Context, params *detective.GetMembersInput, optFns ...func(*detective.Options)) (*detective.GetMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMembers")
	}

	var r0 *detective.GetMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.GetMembersInput, ...func(*detective.Options)) (*detective.GetMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.GetMembersInput, ...func(*detective.Options)) *detective.GetMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.GetMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.GetMembersInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasourcePackages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasourcePackages(ctx context.Context, params *detective.ListDatasourcePackagesInput, optFns ...func(*detective.Options)) (*detective.ListDatasourcePackagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasourcePackages")
	}

	var r0 *detective.ListDatasourcePackagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListDatasourcePackagesInput, ...func(*detective.Options)) (*detective.ListDatasourcePackagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListDatasourcePackagesInput, ...func(*detective.Options)) *detective.ListDatasourcePackagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.ListDatasourcePackagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.ListDatasourcePackagesInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGraphs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGraphs(ctx context.Context, params *detective.ListGraphsInput, optFns ...func(*detective.Options)) (*detective.ListGraphsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGraphs")
	}

	var r0 *detective.ListGraphsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListGraphsInput, ...func(*detective.Options)) (*detective.ListGraphsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListGraphsInput, ...func(*detective.Options)) *detective.ListGraphsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.ListGraphsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.ListGraphsInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIndicators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIndicators(ctx context.Context, params *detective.ListIndicatorsInput, optFns ...func(*detective.Options)) (*detective.ListIndicatorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndicators")
	}

	var r0 *detective.ListIndicatorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListIndicatorsInput, ...func(*detective.Options)) (*detective.ListIndicatorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListIndicatorsInput, ...func(*detective.Options)) *detective.ListIndicatorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.ListIndicatorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.ListIndicatorsInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvestigations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvestigations(ctx context.Context, params *detective.ListInvestigationsInput, optFns ...func(*detective.Options)) (*detective.ListInvestigationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvestigations")
	}

	var r0 *detective.ListInvestigationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListInvestigationsInput, ...func(*detective.Options)) (*detective.ListInvestigationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListInvestigationsInput, ...func(*detective.Options)) *detective.ListInvestigationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.ListInvestigationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.ListInvestigationsInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvitations(ctx context.Context, params *detective.ListInvitationsInput, optFns ...func(*detective.Options)) (*detective.ListInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvitations")
	}

	var r0 *detective.ListInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListInvitationsInput, ...func(*detective.Options)) (*detective.ListInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListInvitationsInput, ...func(*detective.Options)) *detective.ListInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.ListInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.ListInvitationsInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMembers(ctx context.Context, params *detective.ListMembersInput, optFns ...func(*detective.Options)) (*detective.ListMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 *detective.ListMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListMembersInput, ...func(*detective.Options)) (*detective.ListMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListMembersInput, ...func(*detective.Options)) *detective.ListMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.ListMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.ListMembersInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationAdminAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizationAdminAccounts(ctx context.Context, params *detective.ListOrganizationAdminAccountsInput, optFns ...func(*detective.Options)) (*detective.ListOrganizationAdminAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationAdminAccounts")
	}

	var r0 *detective.ListOrganizationAdminAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListOrganizationAdminAccountsInput, ...func(*detective.Options)) (*detective.ListOrganizationAdminAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListOrganizationAdminAccountsInput, ...func(*detective.Options)) *detective.ListOrganizationAdminAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.ListOrganizationAdminAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.ListOrganizationAdminAccountsInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *detective.ListTagsForResourceInput, optFns ...func(*detective.Options)) (*detective.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *detective.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListTagsForResourceInput, ...func(*detective.Options)) (*detective.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.ListTagsForResourceInput, ...func(*detective.Options)) *detective.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.ListTagsForResourceInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() detective.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 detective.Options
	if rf, ok := ret.Get(0).(func() detective.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(detective.Options)
	}

	return r0
}

// RejectInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectInvitation(ctx context.Context, params *detective.RejectInvitationInput, optFns ...func(*detective.Options)) (*detective.RejectInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectInvitation")
	}

	var r0 *detective.RejectInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.RejectInvitationInput, ...func(*detective.Options)) (*detective.RejectInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.RejectInvitationInput, ...func(*detective.Options)) *detective.RejectInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.RejectInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.RejectInvitationInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInvestigation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartInvestigation(ctx context.Context, params *detective.StartInvestigationInput, optFns ...func(*detective.Options)) (*detective.StartInvestigationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInvestigation")
	}

	var r0 *detective.StartInvestigationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.StartInvestigationInput, ...func(*detective.Options)) (*detective.StartInvestigationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.StartInvestigationInput, ...func(*detective.Options)) *detective.StartInvestigationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.StartInvestigationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.StartInvestigationInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMonitoringMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMonitoringMember(ctx context.Context, params *detective.StartMonitoringMemberInput, optFns ...func(*detective.Options)) (*detective.StartMonitoringMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMonitoringMember")
	}

	var r0 *detective.StartMonitoringMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.StartMonitoringMemberInput, ...func(*detective.Options)) (*detective.StartMonitoringMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.StartMonitoringMemberInput, ...func(*detective.Options)) *detective.StartMonitoringMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.StartMonitoringMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.StartMonitoringMemberInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *detective.TagResourceInput, optFns ...func(*detective.Options)) (*detective.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *detective.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.TagResourceInput, ...func(*detective.Options)) (*detective.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.TagResourceInput, ...func(*detective.Options)) *detective.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.TagResourceInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *detective.UntagResourceInput, optFns ...func(*detective.Options)) (*detective.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *detective.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.UntagResourceInput, ...func(*detective.Options)) (*detective.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.UntagResourceInput, ...func(*detective.Options)) *detective.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.UntagResourceInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDatasourcePackages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDatasourcePackages(ctx context.Context, params *detective.UpdateDatasourcePackagesInput, optFns ...func(*detective.Options)) (*detective.UpdateDatasourcePackagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasourcePackages")
	}

	var r0 *detective.UpdateDatasourcePackagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.UpdateDatasourcePackagesInput, ...func(*detective.Options)) (*detective.UpdateDatasourcePackagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.UpdateDatasourcePackagesInput, ...func(*detective.Options)) *detective.UpdateDatasourcePackagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.UpdateDatasourcePackagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.UpdateDatasourcePackagesInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvestigationState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInvestigationState(ctx context.Context, params *detective.UpdateInvestigationStateInput, optFns ...func(*detective.Options)) (*detective.UpdateInvestigationStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvestigationState")
	}

	var r0 *detective.UpdateInvestigationStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.UpdateInvestigationStateInput, ...func(*detective.Options)) (*detective.UpdateInvestigationStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.UpdateInvestigationStateInput, ...func(*detective.Options)) *detective.UpdateInvestigationStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.UpdateInvestigationStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.UpdateInvestigationStateInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOrganizationConfiguration(ctx context.Context, params *detective.UpdateOrganizationConfigurationInput, optFns ...func(*detective.Options)) (*detective.UpdateOrganizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationConfiguration")
	}

	var r0 *detective.UpdateOrganizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *detective.UpdateOrganizationConfigurationInput, ...func(*detective.Options)) (*detective.UpdateOrganizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *detective.UpdateOrganizationConfigurationInput, ...func(*detective.Options)) *detective.UpdateOrganizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detective.UpdateOrganizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *detective.UpdateOrganizationConfigurationInput, ...func(*detective.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
