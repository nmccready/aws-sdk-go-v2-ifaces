// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	fms "github.com/aws/aws-sdk-go-v2/service/fms"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateAdminAccount(ctx context.Context, params *fms.AssociateAdminAccountInput, optFns ...func(*fms.Options)) (*fms.AssociateAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateAdminAccount")
	}

	var r0 *fms.AssociateAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.AssociateAdminAccountInput, ...func(*fms.Options)) (*fms.AssociateAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.AssociateAdminAccountInput, ...func(*fms.Options)) *fms.AssociateAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.AssociateAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.AssociateAdminAccountInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateThirdPartyFirewall provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateThirdPartyFirewall(ctx context.Context, params *fms.AssociateThirdPartyFirewallInput, optFns ...func(*fms.Options)) (*fms.AssociateThirdPartyFirewallOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateThirdPartyFirewall")
	}

	var r0 *fms.AssociateThirdPartyFirewallOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.AssociateThirdPartyFirewallInput, ...func(*fms.Options)) (*fms.AssociateThirdPartyFirewallOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.AssociateThirdPartyFirewallInput, ...func(*fms.Options)) *fms.AssociateThirdPartyFirewallOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.AssociateThirdPartyFirewallOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.AssociateThirdPartyFirewallInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchAssociateResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchAssociateResource(ctx context.Context, params *fms.BatchAssociateResourceInput, optFns ...func(*fms.Options)) (*fms.BatchAssociateResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchAssociateResource")
	}

	var r0 *fms.BatchAssociateResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.BatchAssociateResourceInput, ...func(*fms.Options)) (*fms.BatchAssociateResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.BatchAssociateResourceInput, ...func(*fms.Options)) *fms.BatchAssociateResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.BatchAssociateResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.BatchAssociateResourceInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDisassociateResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDisassociateResource(ctx context.Context, params *fms.BatchDisassociateResourceInput, optFns ...func(*fms.Options)) (*fms.BatchDisassociateResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDisassociateResource")
	}

	var r0 *fms.BatchDisassociateResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.BatchDisassociateResourceInput, ...func(*fms.Options)) (*fms.BatchDisassociateResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.BatchDisassociateResourceInput, ...func(*fms.Options)) *fms.BatchDisassociateResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.BatchDisassociateResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.BatchDisassociateResourceInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppsList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppsList(ctx context.Context, params *fms.DeleteAppsListInput, optFns ...func(*fms.Options)) (*fms.DeleteAppsListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppsList")
	}

	var r0 *fms.DeleteAppsListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeleteAppsListInput, ...func(*fms.Options)) (*fms.DeleteAppsListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeleteAppsListInput, ...func(*fms.Options)) *fms.DeleteAppsListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.DeleteAppsListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.DeleteAppsListInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotificationChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNotificationChannel(ctx context.Context, params *fms.DeleteNotificationChannelInput, optFns ...func(*fms.Options)) (*fms.DeleteNotificationChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotificationChannel")
	}

	var r0 *fms.DeleteNotificationChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeleteNotificationChannelInput, ...func(*fms.Options)) (*fms.DeleteNotificationChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeleteNotificationChannelInput, ...func(*fms.Options)) *fms.DeleteNotificationChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.DeleteNotificationChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.DeleteNotificationChannelInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePolicy(ctx context.Context, params *fms.DeletePolicyInput, optFns ...func(*fms.Options)) (*fms.DeletePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 *fms.DeletePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeletePolicyInput, ...func(*fms.Options)) (*fms.DeletePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeletePolicyInput, ...func(*fms.Options)) *fms.DeletePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.DeletePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.DeletePolicyInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProtocolsList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProtocolsList(ctx context.Context, params *fms.DeleteProtocolsListInput, optFns ...func(*fms.Options)) (*fms.DeleteProtocolsListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProtocolsList")
	}

	var r0 *fms.DeleteProtocolsListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeleteProtocolsListInput, ...func(*fms.Options)) (*fms.DeleteProtocolsListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeleteProtocolsListInput, ...func(*fms.Options)) *fms.DeleteProtocolsListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.DeleteProtocolsListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.DeleteProtocolsListInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceSet(ctx context.Context, params *fms.DeleteResourceSetInput, optFns ...func(*fms.Options)) (*fms.DeleteResourceSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceSet")
	}

	var r0 *fms.DeleteResourceSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeleteResourceSetInput, ...func(*fms.Options)) (*fms.DeleteResourceSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DeleteResourceSetInput, ...func(*fms.Options)) *fms.DeleteResourceSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.DeleteResourceSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.DeleteResourceSetInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateAdminAccount(ctx context.Context, params *fms.DisassociateAdminAccountInput, optFns ...func(*fms.Options)) (*fms.DisassociateAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateAdminAccount")
	}

	var r0 *fms.DisassociateAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DisassociateAdminAccountInput, ...func(*fms.Options)) (*fms.DisassociateAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DisassociateAdminAccountInput, ...func(*fms.Options)) *fms.DisassociateAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.DisassociateAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.DisassociateAdminAccountInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateThirdPartyFirewall provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateThirdPartyFirewall(ctx context.Context, params *fms.DisassociateThirdPartyFirewallInput, optFns ...func(*fms.Options)) (*fms.DisassociateThirdPartyFirewallOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateThirdPartyFirewall")
	}

	var r0 *fms.DisassociateThirdPartyFirewallOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DisassociateThirdPartyFirewallInput, ...func(*fms.Options)) (*fms.DisassociateThirdPartyFirewallOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.DisassociateThirdPartyFirewallInput, ...func(*fms.Options)) *fms.DisassociateThirdPartyFirewallOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.DisassociateThirdPartyFirewallOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.DisassociateThirdPartyFirewallInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAdminAccount(ctx context.Context, params *fms.GetAdminAccountInput, optFns ...func(*fms.Options)) (*fms.GetAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminAccount")
	}

	var r0 *fms.GetAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetAdminAccountInput, ...func(*fms.Options)) (*fms.GetAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetAdminAccountInput, ...func(*fms.Options)) *fms.GetAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetAdminAccountInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdminScope provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAdminScope(ctx context.Context, params *fms.GetAdminScopeInput, optFns ...func(*fms.Options)) (*fms.GetAdminScopeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAdminScope")
	}

	var r0 *fms.GetAdminScopeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetAdminScopeInput, ...func(*fms.Options)) (*fms.GetAdminScopeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetAdminScopeInput, ...func(*fms.Options)) *fms.GetAdminScopeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetAdminScopeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetAdminScopeInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppsList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppsList(ctx context.Context, params *fms.GetAppsListInput, optFns ...func(*fms.Options)) (*fms.GetAppsListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppsList")
	}

	var r0 *fms.GetAppsListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetAppsListInput, ...func(*fms.Options)) (*fms.GetAppsListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetAppsListInput, ...func(*fms.Options)) *fms.GetAppsListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetAppsListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetAppsListInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComplianceDetail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComplianceDetail(ctx context.Context, params *fms.GetComplianceDetailInput, optFns ...func(*fms.Options)) (*fms.GetComplianceDetailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComplianceDetail")
	}

	var r0 *fms.GetComplianceDetailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetComplianceDetailInput, ...func(*fms.Options)) (*fms.GetComplianceDetailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetComplianceDetailInput, ...func(*fms.Options)) *fms.GetComplianceDetailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetComplianceDetailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetComplianceDetailInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotificationChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNotificationChannel(ctx context.Context, params *fms.GetNotificationChannelInput, optFns ...func(*fms.Options)) (*fms.GetNotificationChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNotificationChannel")
	}

	var r0 *fms.GetNotificationChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetNotificationChannelInput, ...func(*fms.Options)) (*fms.GetNotificationChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetNotificationChannelInput, ...func(*fms.Options)) *fms.GetNotificationChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetNotificationChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetNotificationChannelInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPolicy(ctx context.Context, params *fms.GetPolicyInput, optFns ...func(*fms.Options)) (*fms.GetPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *fms.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetPolicyInput, ...func(*fms.Options)) (*fms.GetPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetPolicyInput, ...func(*fms.Options)) *fms.GetPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetPolicyInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtectionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProtectionStatus(ctx context.Context, params *fms.GetProtectionStatusInput, optFns ...func(*fms.Options)) (*fms.GetProtectionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProtectionStatus")
	}

	var r0 *fms.GetProtectionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetProtectionStatusInput, ...func(*fms.Options)) (*fms.GetProtectionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetProtectionStatusInput, ...func(*fms.Options)) *fms.GetProtectionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetProtectionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetProtectionStatusInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProtocolsList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProtocolsList(ctx context.Context, params *fms.GetProtocolsListInput, optFns ...func(*fms.Options)) (*fms.GetProtocolsListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProtocolsList")
	}

	var r0 *fms.GetProtocolsListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetProtocolsListInput, ...func(*fms.Options)) (*fms.GetProtocolsListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetProtocolsListInput, ...func(*fms.Options)) *fms.GetProtocolsListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetProtocolsListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetProtocolsListInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceSet(ctx context.Context, params *fms.GetResourceSetInput, optFns ...func(*fms.Options)) (*fms.GetResourceSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceSet")
	}

	var r0 *fms.GetResourceSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetResourceSetInput, ...func(*fms.Options)) (*fms.GetResourceSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetResourceSetInput, ...func(*fms.Options)) *fms.GetResourceSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetResourceSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetResourceSetInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThirdPartyFirewallAssociationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetThirdPartyFirewallAssociationStatus(ctx context.Context, params *fms.GetThirdPartyFirewallAssociationStatusInput, optFns ...func(*fms.Options)) (*fms.GetThirdPartyFirewallAssociationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetThirdPartyFirewallAssociationStatus")
	}

	var r0 *fms.GetThirdPartyFirewallAssociationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetThirdPartyFirewallAssociationStatusInput, ...func(*fms.Options)) (*fms.GetThirdPartyFirewallAssociationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetThirdPartyFirewallAssociationStatusInput, ...func(*fms.Options)) *fms.GetThirdPartyFirewallAssociationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetThirdPartyFirewallAssociationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetThirdPartyFirewallAssociationStatusInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetViolationDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetViolationDetails(ctx context.Context, params *fms.GetViolationDetailsInput, optFns ...func(*fms.Options)) (*fms.GetViolationDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetViolationDetails")
	}

	var r0 *fms.GetViolationDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetViolationDetailsInput, ...func(*fms.Options)) (*fms.GetViolationDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.GetViolationDetailsInput, ...func(*fms.Options)) *fms.GetViolationDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.GetViolationDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.GetViolationDetailsInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAdminAccountsForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAdminAccountsForOrganization(ctx context.Context, params *fms.ListAdminAccountsForOrganizationInput, optFns ...func(*fms.Options)) (*fms.ListAdminAccountsForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAdminAccountsForOrganization")
	}

	var r0 *fms.ListAdminAccountsForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListAdminAccountsForOrganizationInput, ...func(*fms.Options)) (*fms.ListAdminAccountsForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListAdminAccountsForOrganizationInput, ...func(*fms.Options)) *fms.ListAdminAccountsForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListAdminAccountsForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListAdminAccountsForOrganizationInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAdminsManagingAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAdminsManagingAccount(ctx context.Context, params *fms.ListAdminsManagingAccountInput, optFns ...func(*fms.Options)) (*fms.ListAdminsManagingAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAdminsManagingAccount")
	}

	var r0 *fms.ListAdminsManagingAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListAdminsManagingAccountInput, ...func(*fms.Options)) (*fms.ListAdminsManagingAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListAdminsManagingAccountInput, ...func(*fms.Options)) *fms.ListAdminsManagingAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListAdminsManagingAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListAdminsManagingAccountInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppsLists provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppsLists(ctx context.Context, params *fms.ListAppsListsInput, optFns ...func(*fms.Options)) (*fms.ListAppsListsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppsLists")
	}

	var r0 *fms.ListAppsListsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListAppsListsInput, ...func(*fms.Options)) (*fms.ListAppsListsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListAppsListsInput, ...func(*fms.Options)) *fms.ListAppsListsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListAppsListsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListAppsListsInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComplianceStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComplianceStatus(ctx context.Context, params *fms.ListComplianceStatusInput, optFns ...func(*fms.Options)) (*fms.ListComplianceStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComplianceStatus")
	}

	var r0 *fms.ListComplianceStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListComplianceStatusInput, ...func(*fms.Options)) (*fms.ListComplianceStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListComplianceStatusInput, ...func(*fms.Options)) *fms.ListComplianceStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListComplianceStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListComplianceStatusInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDiscoveredResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDiscoveredResources(ctx context.Context, params *fms.ListDiscoveredResourcesInput, optFns ...func(*fms.Options)) (*fms.ListDiscoveredResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDiscoveredResources")
	}

	var r0 *fms.ListDiscoveredResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListDiscoveredResourcesInput, ...func(*fms.Options)) (*fms.ListDiscoveredResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListDiscoveredResourcesInput, ...func(*fms.Options)) *fms.ListDiscoveredResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListDiscoveredResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListDiscoveredResourcesInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMemberAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMemberAccounts(ctx context.Context, params *fms.ListMemberAccountsInput, optFns ...func(*fms.Options)) (*fms.ListMemberAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMemberAccounts")
	}

	var r0 *fms.ListMemberAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListMemberAccountsInput, ...func(*fms.Options)) (*fms.ListMemberAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListMemberAccountsInput, ...func(*fms.Options)) *fms.ListMemberAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListMemberAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListMemberAccountsInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPolicies(ctx context.Context, params *fms.ListPoliciesInput, optFns ...func(*fms.Options)) (*fms.ListPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicies")
	}

	var r0 *fms.ListPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListPoliciesInput, ...func(*fms.Options)) (*fms.ListPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListPoliciesInput, ...func(*fms.Options)) *fms.ListPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListPoliciesInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProtocolsLists provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProtocolsLists(ctx context.Context, params *fms.ListProtocolsListsInput, optFns ...func(*fms.Options)) (*fms.ListProtocolsListsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtocolsLists")
	}

	var r0 *fms.ListProtocolsListsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListProtocolsListsInput, ...func(*fms.Options)) (*fms.ListProtocolsListsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListProtocolsListsInput, ...func(*fms.Options)) *fms.ListProtocolsListsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListProtocolsListsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListProtocolsListsInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceSetResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceSetResources(ctx context.Context, params *fms.ListResourceSetResourcesInput, optFns ...func(*fms.Options)) (*fms.ListResourceSetResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceSetResources")
	}

	var r0 *fms.ListResourceSetResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListResourceSetResourcesInput, ...func(*fms.Options)) (*fms.ListResourceSetResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListResourceSetResourcesInput, ...func(*fms.Options)) *fms.ListResourceSetResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListResourceSetResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListResourceSetResourcesInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceSets(ctx context.Context, params *fms.ListResourceSetsInput, optFns ...func(*fms.Options)) (*fms.ListResourceSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceSets")
	}

	var r0 *fms.ListResourceSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListResourceSetsInput, ...func(*fms.Options)) (*fms.ListResourceSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListResourceSetsInput, ...func(*fms.Options)) *fms.ListResourceSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListResourceSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListResourceSetsInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *fms.ListTagsForResourceInput, optFns ...func(*fms.Options)) (*fms.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *fms.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListTagsForResourceInput, ...func(*fms.Options)) (*fms.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListTagsForResourceInput, ...func(*fms.Options)) *fms.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListTagsForResourceInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThirdPartyFirewallFirewallPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThirdPartyFirewallFirewallPolicies(ctx context.Context, params *fms.ListThirdPartyFirewallFirewallPoliciesInput, optFns ...func(*fms.Options)) (*fms.ListThirdPartyFirewallFirewallPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThirdPartyFirewallFirewallPolicies")
	}

	var r0 *fms.ListThirdPartyFirewallFirewallPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListThirdPartyFirewallFirewallPoliciesInput, ...func(*fms.Options)) (*fms.ListThirdPartyFirewallFirewallPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.ListThirdPartyFirewallFirewallPoliciesInput, ...func(*fms.Options)) *fms.ListThirdPartyFirewallFirewallPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.ListThirdPartyFirewallFirewallPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.ListThirdPartyFirewallFirewallPoliciesInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() fms.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 fms.Options
	if rf, ok := ret.Get(0).(func() fms.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(fms.Options)
	}

	return r0
}

// PutAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAdminAccount(ctx context.Context, params *fms.PutAdminAccountInput, optFns ...func(*fms.Options)) (*fms.PutAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAdminAccount")
	}

	var r0 *fms.PutAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutAdminAccountInput, ...func(*fms.Options)) (*fms.PutAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutAdminAccountInput, ...func(*fms.Options)) *fms.PutAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.PutAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.PutAdminAccountInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAppsList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAppsList(ctx context.Context, params *fms.PutAppsListInput, optFns ...func(*fms.Options)) (*fms.PutAppsListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAppsList")
	}

	var r0 *fms.PutAppsListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutAppsListInput, ...func(*fms.Options)) (*fms.PutAppsListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutAppsListInput, ...func(*fms.Options)) *fms.PutAppsListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.PutAppsListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.PutAppsListInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutNotificationChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutNotificationChannel(ctx context.Context, params *fms.PutNotificationChannelInput, optFns ...func(*fms.Options)) (*fms.PutNotificationChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutNotificationChannel")
	}

	var r0 *fms.PutNotificationChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutNotificationChannelInput, ...func(*fms.Options)) (*fms.PutNotificationChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutNotificationChannelInput, ...func(*fms.Options)) *fms.PutNotificationChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.PutNotificationChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.PutNotificationChannelInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPolicy(ctx context.Context, params *fms.PutPolicyInput, optFns ...func(*fms.Options)) (*fms.PutPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPolicy")
	}

	var r0 *fms.PutPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutPolicyInput, ...func(*fms.Options)) (*fms.PutPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutPolicyInput, ...func(*fms.Options)) *fms.PutPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.PutPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.PutPolicyInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProtocolsList provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutProtocolsList(ctx context.Context, params *fms.PutProtocolsListInput, optFns ...func(*fms.Options)) (*fms.PutProtocolsListOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutProtocolsList")
	}

	var r0 *fms.PutProtocolsListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutProtocolsListInput, ...func(*fms.Options)) (*fms.PutProtocolsListOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutProtocolsListInput, ...func(*fms.Options)) *fms.PutProtocolsListOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.PutProtocolsListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.PutProtocolsListInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutResourceSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutResourceSet(ctx context.Context, params *fms.PutResourceSetInput, optFns ...func(*fms.Options)) (*fms.PutResourceSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutResourceSet")
	}

	var r0 *fms.PutResourceSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutResourceSetInput, ...func(*fms.Options)) (*fms.PutResourceSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.PutResourceSetInput, ...func(*fms.Options)) *fms.PutResourceSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.PutResourceSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.PutResourceSetInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *fms.TagResourceInput, optFns ...func(*fms.Options)) (*fms.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *fms.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.TagResourceInput, ...func(*fms.Options)) (*fms.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.TagResourceInput, ...func(*fms.Options)) *fms.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.TagResourceInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *fms.UntagResourceInput, optFns ...func(*fms.Options)) (*fms.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *fms.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *fms.UntagResourceInput, ...func(*fms.Options)) (*fms.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *fms.UntagResourceInput, ...func(*fms.Options)) *fms.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fms.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *fms.UntagResourceInput, ...func(*fms.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
