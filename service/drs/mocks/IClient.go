// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	drs "github.com/aws/aws-sdk-go-v2/service/drs"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateSourceNetworkStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateSourceNetworkStack(ctx context.Context, params *drs.AssociateSourceNetworkStackInput, optFns ...func(*drs.Options)) (*drs.AssociateSourceNetworkStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSourceNetworkStack")
	}

	var r0 *drs.AssociateSourceNetworkStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.AssociateSourceNetworkStackInput, ...func(*drs.Options)) (*drs.AssociateSourceNetworkStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.AssociateSourceNetworkStackInput, ...func(*drs.Options)) *drs.AssociateSourceNetworkStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.AssociateSourceNetworkStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.AssociateSourceNetworkStackInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExtendedSourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateExtendedSourceServer(ctx context.Context, params *drs.CreateExtendedSourceServerInput, optFns ...func(*drs.Options)) (*drs.CreateExtendedSourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExtendedSourceServer")
	}

	var r0 *drs.CreateExtendedSourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.CreateExtendedSourceServerInput, ...func(*drs.Options)) (*drs.CreateExtendedSourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.CreateExtendedSourceServerInput, ...func(*drs.Options)) *drs.CreateExtendedSourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.CreateExtendedSourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.CreateExtendedSourceServerInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLaunchConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLaunchConfigurationTemplate(ctx context.Context, params *drs.CreateLaunchConfigurationTemplateInput, optFns ...func(*drs.Options)) (*drs.CreateLaunchConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLaunchConfigurationTemplate")
	}

	var r0 *drs.CreateLaunchConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.CreateLaunchConfigurationTemplateInput, ...func(*drs.Options)) (*drs.CreateLaunchConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.CreateLaunchConfigurationTemplateInput, ...func(*drs.Options)) *drs.CreateLaunchConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.CreateLaunchConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.CreateLaunchConfigurationTemplateInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationConfigurationTemplate(ctx context.Context, params *drs.CreateReplicationConfigurationTemplateInput, optFns ...func(*drs.Options)) (*drs.CreateReplicationConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationConfigurationTemplate")
	}

	var r0 *drs.CreateReplicationConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.CreateReplicationConfigurationTemplateInput, ...func(*drs.Options)) (*drs.CreateReplicationConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.CreateReplicationConfigurationTemplateInput, ...func(*drs.Options)) *drs.CreateReplicationConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.CreateReplicationConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.CreateReplicationConfigurationTemplateInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSourceNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSourceNetwork(ctx context.Context, params *drs.CreateSourceNetworkInput, optFns ...func(*drs.Options)) (*drs.CreateSourceNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSourceNetwork")
	}

	var r0 *drs.CreateSourceNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.CreateSourceNetworkInput, ...func(*drs.Options)) (*drs.CreateSourceNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.CreateSourceNetworkInput, ...func(*drs.Options)) *drs.CreateSourceNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.CreateSourceNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.CreateSourceNetworkInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJob(ctx context.Context, params *drs.DeleteJobInput, optFns ...func(*drs.Options)) (*drs.DeleteJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 *drs.DeleteJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteJobInput, ...func(*drs.Options)) (*drs.DeleteJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteJobInput, ...func(*drs.Options)) *drs.DeleteJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DeleteJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DeleteJobInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLaunchAction(ctx context.Context, params *drs.DeleteLaunchActionInput, optFns ...func(*drs.Options)) (*drs.DeleteLaunchActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLaunchAction")
	}

	var r0 *drs.DeleteLaunchActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteLaunchActionInput, ...func(*drs.Options)) (*drs.DeleteLaunchActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteLaunchActionInput, ...func(*drs.Options)) *drs.DeleteLaunchActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DeleteLaunchActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DeleteLaunchActionInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLaunchConfigurationTemplate(ctx context.Context, params *drs.DeleteLaunchConfigurationTemplateInput, optFns ...func(*drs.Options)) (*drs.DeleteLaunchConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLaunchConfigurationTemplate")
	}

	var r0 *drs.DeleteLaunchConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteLaunchConfigurationTemplateInput, ...func(*drs.Options)) (*drs.DeleteLaunchConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteLaunchConfigurationTemplateInput, ...func(*drs.Options)) *drs.DeleteLaunchConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DeleteLaunchConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DeleteLaunchConfigurationTemplateInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecoveryInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRecoveryInstance(ctx context.Context, params *drs.DeleteRecoveryInstanceInput, optFns ...func(*drs.Options)) (*drs.DeleteRecoveryInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecoveryInstance")
	}

	var r0 *drs.DeleteRecoveryInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteRecoveryInstanceInput, ...func(*drs.Options)) (*drs.DeleteRecoveryInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteRecoveryInstanceInput, ...func(*drs.Options)) *drs.DeleteRecoveryInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DeleteRecoveryInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DeleteRecoveryInstanceInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationConfigurationTemplate(ctx context.Context, params *drs.DeleteReplicationConfigurationTemplateInput, optFns ...func(*drs.Options)) (*drs.DeleteReplicationConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationConfigurationTemplate")
	}

	var r0 *drs.DeleteReplicationConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteReplicationConfigurationTemplateInput, ...func(*drs.Options)) (*drs.DeleteReplicationConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteReplicationConfigurationTemplateInput, ...func(*drs.Options)) *drs.DeleteReplicationConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DeleteReplicationConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DeleteReplicationConfigurationTemplateInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSourceNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSourceNetwork(ctx context.Context, params *drs.DeleteSourceNetworkInput, optFns ...func(*drs.Options)) (*drs.DeleteSourceNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSourceNetwork")
	}

	var r0 *drs.DeleteSourceNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteSourceNetworkInput, ...func(*drs.Options)) (*drs.DeleteSourceNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteSourceNetworkInput, ...func(*drs.Options)) *drs.DeleteSourceNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DeleteSourceNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DeleteSourceNetworkInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSourceServer(ctx context.Context, params *drs.DeleteSourceServerInput, optFns ...func(*drs.Options)) (*drs.DeleteSourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSourceServer")
	}

	var r0 *drs.DeleteSourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteSourceServerInput, ...func(*drs.Options)) (*drs.DeleteSourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DeleteSourceServerInput, ...func(*drs.Options)) *drs.DeleteSourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DeleteSourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DeleteSourceServerInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobLogItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeJobLogItems(ctx context.Context, params *drs.DescribeJobLogItemsInput, optFns ...func(*drs.Options)) (*drs.DescribeJobLogItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJobLogItems")
	}

	var r0 *drs.DescribeJobLogItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeJobLogItemsInput, ...func(*drs.Options)) (*drs.DescribeJobLogItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeJobLogItemsInput, ...func(*drs.Options)) *drs.DescribeJobLogItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DescribeJobLogItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DescribeJobLogItemsInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeJobs(ctx context.Context, params *drs.DescribeJobsInput, optFns ...func(*drs.Options)) (*drs.DescribeJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJobs")
	}

	var r0 *drs.DescribeJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeJobsInput, ...func(*drs.Options)) (*drs.DescribeJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeJobsInput, ...func(*drs.Options)) *drs.DescribeJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DescribeJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DescribeJobsInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLaunchConfigurationTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLaunchConfigurationTemplates(ctx context.Context, params *drs.DescribeLaunchConfigurationTemplatesInput, optFns ...func(*drs.Options)) (*drs.DescribeLaunchConfigurationTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLaunchConfigurationTemplates")
	}

	var r0 *drs.DescribeLaunchConfigurationTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeLaunchConfigurationTemplatesInput, ...func(*drs.Options)) (*drs.DescribeLaunchConfigurationTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeLaunchConfigurationTemplatesInput, ...func(*drs.Options)) *drs.DescribeLaunchConfigurationTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DescribeLaunchConfigurationTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DescribeLaunchConfigurationTemplatesInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRecoveryInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRecoveryInstances(ctx context.Context, params *drs.DescribeRecoveryInstancesInput, optFns ...func(*drs.Options)) (*drs.DescribeRecoveryInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRecoveryInstances")
	}

	var r0 *drs.DescribeRecoveryInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeRecoveryInstancesInput, ...func(*drs.Options)) (*drs.DescribeRecoveryInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeRecoveryInstancesInput, ...func(*drs.Options)) *drs.DescribeRecoveryInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DescribeRecoveryInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DescribeRecoveryInstancesInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRecoverySnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRecoverySnapshots(ctx context.Context, params *drs.DescribeRecoverySnapshotsInput, optFns ...func(*drs.Options)) (*drs.DescribeRecoverySnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRecoverySnapshots")
	}

	var r0 *drs.DescribeRecoverySnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeRecoverySnapshotsInput, ...func(*drs.Options)) (*drs.DescribeRecoverySnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeRecoverySnapshotsInput, ...func(*drs.Options)) *drs.DescribeRecoverySnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DescribeRecoverySnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DescribeRecoverySnapshotsInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationConfigurationTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationConfigurationTemplates(ctx context.Context, params *drs.DescribeReplicationConfigurationTemplatesInput, optFns ...func(*drs.Options)) (*drs.DescribeReplicationConfigurationTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationConfigurationTemplates")
	}

	var r0 *drs.DescribeReplicationConfigurationTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeReplicationConfigurationTemplatesInput, ...func(*drs.Options)) (*drs.DescribeReplicationConfigurationTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeReplicationConfigurationTemplatesInput, ...func(*drs.Options)) *drs.DescribeReplicationConfigurationTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DescribeReplicationConfigurationTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DescribeReplicationConfigurationTemplatesInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSourceNetworks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSourceNetworks(ctx context.Context, params *drs.DescribeSourceNetworksInput, optFns ...func(*drs.Options)) (*drs.DescribeSourceNetworksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSourceNetworks")
	}

	var r0 *drs.DescribeSourceNetworksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeSourceNetworksInput, ...func(*drs.Options)) (*drs.DescribeSourceNetworksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeSourceNetworksInput, ...func(*drs.Options)) *drs.DescribeSourceNetworksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DescribeSourceNetworksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DescribeSourceNetworksInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSourceServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSourceServers(ctx context.Context, params *drs.DescribeSourceServersInput, optFns ...func(*drs.Options)) (*drs.DescribeSourceServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSourceServers")
	}

	var r0 *drs.DescribeSourceServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeSourceServersInput, ...func(*drs.Options)) (*drs.DescribeSourceServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DescribeSourceServersInput, ...func(*drs.Options)) *drs.DescribeSourceServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DescribeSourceServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DescribeSourceServersInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisconnectRecoveryInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisconnectRecoveryInstance(ctx context.Context, params *drs.DisconnectRecoveryInstanceInput, optFns ...func(*drs.Options)) (*drs.DisconnectRecoveryInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectRecoveryInstance")
	}

	var r0 *drs.DisconnectRecoveryInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DisconnectRecoveryInstanceInput, ...func(*drs.Options)) (*drs.DisconnectRecoveryInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DisconnectRecoveryInstanceInput, ...func(*drs.Options)) *drs.DisconnectRecoveryInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DisconnectRecoveryInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DisconnectRecoveryInstanceInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisconnectSourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisconnectSourceServer(ctx context.Context, params *drs.DisconnectSourceServerInput, optFns ...func(*drs.Options)) (*drs.DisconnectSourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectSourceServer")
	}

	var r0 *drs.DisconnectSourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DisconnectSourceServerInput, ...func(*drs.Options)) (*drs.DisconnectSourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.DisconnectSourceServerInput, ...func(*drs.Options)) *drs.DisconnectSourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.DisconnectSourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.DisconnectSourceServerInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportSourceNetworkCfnTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportSourceNetworkCfnTemplate(ctx context.Context, params *drs.ExportSourceNetworkCfnTemplateInput, optFns ...func(*drs.Options)) (*drs.ExportSourceNetworkCfnTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportSourceNetworkCfnTemplate")
	}

	var r0 *drs.ExportSourceNetworkCfnTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ExportSourceNetworkCfnTemplateInput, ...func(*drs.Options)) (*drs.ExportSourceNetworkCfnTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ExportSourceNetworkCfnTemplateInput, ...func(*drs.Options)) *drs.ExportSourceNetworkCfnTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.ExportSourceNetworkCfnTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.ExportSourceNetworkCfnTemplateInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFailbackReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFailbackReplicationConfiguration(ctx context.Context, params *drs.GetFailbackReplicationConfigurationInput, optFns ...func(*drs.Options)) (*drs.GetFailbackReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFailbackReplicationConfiguration")
	}

	var r0 *drs.GetFailbackReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.GetFailbackReplicationConfigurationInput, ...func(*drs.Options)) (*drs.GetFailbackReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.GetFailbackReplicationConfigurationInput, ...func(*drs.Options)) *drs.GetFailbackReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.GetFailbackReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.GetFailbackReplicationConfigurationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLaunchConfiguration(ctx context.Context, params *drs.GetLaunchConfigurationInput, optFns ...func(*drs.Options)) (*drs.GetLaunchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchConfiguration")
	}

	var r0 *drs.GetLaunchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.GetLaunchConfigurationInput, ...func(*drs.Options)) (*drs.GetLaunchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.GetLaunchConfigurationInput, ...func(*drs.Options)) *drs.GetLaunchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.GetLaunchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.GetLaunchConfigurationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReplicationConfiguration(ctx context.Context, params *drs.GetReplicationConfigurationInput, optFns ...func(*drs.Options)) (*drs.GetReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationConfiguration")
	}

	var r0 *drs.GetReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.GetReplicationConfigurationInput, ...func(*drs.Options)) (*drs.GetReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.GetReplicationConfigurationInput, ...func(*drs.Options)) *drs.GetReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.GetReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.GetReplicationConfigurationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InitializeService(ctx context.Context, params *drs.InitializeServiceInput, optFns ...func(*drs.Options)) (*drs.InitializeServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitializeService")
	}

	var r0 *drs.InitializeServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.InitializeServiceInput, ...func(*drs.Options)) (*drs.InitializeServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.InitializeServiceInput, ...func(*drs.Options)) *drs.InitializeServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.InitializeServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.InitializeServiceInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExtensibleSourceServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExtensibleSourceServers(ctx context.Context, params *drs.ListExtensibleSourceServersInput, optFns ...func(*drs.Options)) (*drs.ListExtensibleSourceServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExtensibleSourceServers")
	}

	var r0 *drs.ListExtensibleSourceServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ListExtensibleSourceServersInput, ...func(*drs.Options)) (*drs.ListExtensibleSourceServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ListExtensibleSourceServersInput, ...func(*drs.Options)) *drs.ListExtensibleSourceServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.ListExtensibleSourceServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.ListExtensibleSourceServersInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLaunchActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLaunchActions(ctx context.Context, params *drs.ListLaunchActionsInput, optFns ...func(*drs.Options)) (*drs.ListLaunchActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchActions")
	}

	var r0 *drs.ListLaunchActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ListLaunchActionsInput, ...func(*drs.Options)) (*drs.ListLaunchActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ListLaunchActionsInput, ...func(*drs.Options)) *drs.ListLaunchActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.ListLaunchActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.ListLaunchActionsInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStagingAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStagingAccounts(ctx context.Context, params *drs.ListStagingAccountsInput, optFns ...func(*drs.Options)) (*drs.ListStagingAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStagingAccounts")
	}

	var r0 *drs.ListStagingAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ListStagingAccountsInput, ...func(*drs.Options)) (*drs.ListStagingAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ListStagingAccountsInput, ...func(*drs.Options)) *drs.ListStagingAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.ListStagingAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.ListStagingAccountsInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *drs.ListTagsForResourceInput, optFns ...func(*drs.Options)) (*drs.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *drs.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ListTagsForResourceInput, ...func(*drs.Options)) (*drs.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ListTagsForResourceInput, ...func(*drs.Options)) *drs.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.ListTagsForResourceInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() drs.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 drs.Options
	if rf, ok := ret.Get(0).(func() drs.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(drs.Options)
	}

	return r0
}

// PutLaunchAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutLaunchAction(ctx context.Context, params *drs.PutLaunchActionInput, optFns ...func(*drs.Options)) (*drs.PutLaunchActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutLaunchAction")
	}

	var r0 *drs.PutLaunchActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.PutLaunchActionInput, ...func(*drs.Options)) (*drs.PutLaunchActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.PutLaunchActionInput, ...func(*drs.Options)) *drs.PutLaunchActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.PutLaunchActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.PutLaunchActionInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryDataReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RetryDataReplication(ctx context.Context, params *drs.RetryDataReplicationInput, optFns ...func(*drs.Options)) (*drs.RetryDataReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetryDataReplication")
	}

	var r0 *drs.RetryDataReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.RetryDataReplicationInput, ...func(*drs.Options)) (*drs.RetryDataReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.RetryDataReplicationInput, ...func(*drs.Options)) *drs.RetryDataReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.RetryDataReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.RetryDataReplicationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReverseReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReverseReplication(ctx context.Context, params *drs.ReverseReplicationInput, optFns ...func(*drs.Options)) (*drs.ReverseReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReverseReplication")
	}

	var r0 *drs.ReverseReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ReverseReplicationInput, ...func(*drs.Options)) (*drs.ReverseReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.ReverseReplicationInput, ...func(*drs.Options)) *drs.ReverseReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.ReverseReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.ReverseReplicationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartFailbackLaunch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartFailbackLaunch(ctx context.Context, params *drs.StartFailbackLaunchInput, optFns ...func(*drs.Options)) (*drs.StartFailbackLaunchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartFailbackLaunch")
	}

	var r0 *drs.StartFailbackLaunchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartFailbackLaunchInput, ...func(*drs.Options)) (*drs.StartFailbackLaunchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartFailbackLaunchInput, ...func(*drs.Options)) *drs.StartFailbackLaunchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.StartFailbackLaunchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.StartFailbackLaunchInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRecovery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRecovery(ctx context.Context, params *drs.StartRecoveryInput, optFns ...func(*drs.Options)) (*drs.StartRecoveryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRecovery")
	}

	var r0 *drs.StartRecoveryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartRecoveryInput, ...func(*drs.Options)) (*drs.StartRecoveryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartRecoveryInput, ...func(*drs.Options)) *drs.StartRecoveryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.StartRecoveryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.StartRecoveryInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartReplication(ctx context.Context, params *drs.StartReplicationInput, optFns ...func(*drs.Options)) (*drs.StartReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartReplication")
	}

	var r0 *drs.StartReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartReplicationInput, ...func(*drs.Options)) (*drs.StartReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartReplicationInput, ...func(*drs.Options)) *drs.StartReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.StartReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.StartReplicationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSourceNetworkRecovery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSourceNetworkRecovery(ctx context.Context, params *drs.StartSourceNetworkRecoveryInput, optFns ...func(*drs.Options)) (*drs.StartSourceNetworkRecoveryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSourceNetworkRecovery")
	}

	var r0 *drs.StartSourceNetworkRecoveryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartSourceNetworkRecoveryInput, ...func(*drs.Options)) (*drs.StartSourceNetworkRecoveryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartSourceNetworkRecoveryInput, ...func(*drs.Options)) *drs.StartSourceNetworkRecoveryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.StartSourceNetworkRecoveryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.StartSourceNetworkRecoveryInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSourceNetworkReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSourceNetworkReplication(ctx context.Context, params *drs.StartSourceNetworkReplicationInput, optFns ...func(*drs.Options)) (*drs.StartSourceNetworkReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSourceNetworkReplication")
	}

	var r0 *drs.StartSourceNetworkReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartSourceNetworkReplicationInput, ...func(*drs.Options)) (*drs.StartSourceNetworkReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StartSourceNetworkReplicationInput, ...func(*drs.Options)) *drs.StartSourceNetworkReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.StartSourceNetworkReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.StartSourceNetworkReplicationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopFailback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopFailback(ctx context.Context, params *drs.StopFailbackInput, optFns ...func(*drs.Options)) (*drs.StopFailbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopFailback")
	}

	var r0 *drs.StopFailbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StopFailbackInput, ...func(*drs.Options)) (*drs.StopFailbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StopFailbackInput, ...func(*drs.Options)) *drs.StopFailbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.StopFailbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.StopFailbackInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopReplication(ctx context.Context, params *drs.StopReplicationInput, optFns ...func(*drs.Options)) (*drs.StopReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopReplication")
	}

	var r0 *drs.StopReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StopReplicationInput, ...func(*drs.Options)) (*drs.StopReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StopReplicationInput, ...func(*drs.Options)) *drs.StopReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.StopReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.StopReplicationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopSourceNetworkReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopSourceNetworkReplication(ctx context.Context, params *drs.StopSourceNetworkReplicationInput, optFns ...func(*drs.Options)) (*drs.StopSourceNetworkReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopSourceNetworkReplication")
	}

	var r0 *drs.StopSourceNetworkReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StopSourceNetworkReplicationInput, ...func(*drs.Options)) (*drs.StopSourceNetworkReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.StopSourceNetworkReplicationInput, ...func(*drs.Options)) *drs.StopSourceNetworkReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.StopSourceNetworkReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.StopSourceNetworkReplicationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *drs.TagResourceInput, optFns ...func(*drs.Options)) (*drs.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *drs.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.TagResourceInput, ...func(*drs.Options)) (*drs.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.TagResourceInput, ...func(*drs.Options)) *drs.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.TagResourceInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateRecoveryInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TerminateRecoveryInstances(ctx context.Context, params *drs.TerminateRecoveryInstancesInput, optFns ...func(*drs.Options)) (*drs.TerminateRecoveryInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateRecoveryInstances")
	}

	var r0 *drs.TerminateRecoveryInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.TerminateRecoveryInstancesInput, ...func(*drs.Options)) (*drs.TerminateRecoveryInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.TerminateRecoveryInstancesInput, ...func(*drs.Options)) *drs.TerminateRecoveryInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.TerminateRecoveryInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.TerminateRecoveryInstancesInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *drs.UntagResourceInput, optFns ...func(*drs.Options)) (*drs.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *drs.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UntagResourceInput, ...func(*drs.Options)) (*drs.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UntagResourceInput, ...func(*drs.Options)) *drs.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.UntagResourceInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFailbackReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFailbackReplicationConfiguration(ctx context.Context, params *drs.UpdateFailbackReplicationConfigurationInput, optFns ...func(*drs.Options)) (*drs.UpdateFailbackReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFailbackReplicationConfiguration")
	}

	var r0 *drs.UpdateFailbackReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateFailbackReplicationConfigurationInput, ...func(*drs.Options)) (*drs.UpdateFailbackReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateFailbackReplicationConfigurationInput, ...func(*drs.Options)) *drs.UpdateFailbackReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.UpdateFailbackReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.UpdateFailbackReplicationConfigurationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLaunchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLaunchConfiguration(ctx context.Context, params *drs.UpdateLaunchConfigurationInput, optFns ...func(*drs.Options)) (*drs.UpdateLaunchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchConfiguration")
	}

	var r0 *drs.UpdateLaunchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateLaunchConfigurationInput, ...func(*drs.Options)) (*drs.UpdateLaunchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateLaunchConfigurationInput, ...func(*drs.Options)) *drs.UpdateLaunchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.UpdateLaunchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.UpdateLaunchConfigurationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLaunchConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLaunchConfigurationTemplate(ctx context.Context, params *drs.UpdateLaunchConfigurationTemplateInput, optFns ...func(*drs.Options)) (*drs.UpdateLaunchConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchConfigurationTemplate")
	}

	var r0 *drs.UpdateLaunchConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateLaunchConfigurationTemplateInput, ...func(*drs.Options)) (*drs.UpdateLaunchConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateLaunchConfigurationTemplateInput, ...func(*drs.Options)) *drs.UpdateLaunchConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.UpdateLaunchConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.UpdateLaunchConfigurationTemplateInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReplicationConfiguration(ctx context.Context, params *drs.UpdateReplicationConfigurationInput, optFns ...func(*drs.Options)) (*drs.UpdateReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReplicationConfiguration")
	}

	var r0 *drs.UpdateReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateReplicationConfigurationInput, ...func(*drs.Options)) (*drs.UpdateReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateReplicationConfigurationInput, ...func(*drs.Options)) *drs.UpdateReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.UpdateReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.UpdateReplicationConfigurationInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReplicationConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReplicationConfigurationTemplate(ctx context.Context, params *drs.UpdateReplicationConfigurationTemplateInput, optFns ...func(*drs.Options)) (*drs.UpdateReplicationConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReplicationConfigurationTemplate")
	}

	var r0 *drs.UpdateReplicationConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateReplicationConfigurationTemplateInput, ...func(*drs.Options)) (*drs.UpdateReplicationConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *drs.UpdateReplicationConfigurationTemplateInput, ...func(*drs.Options)) *drs.UpdateReplicationConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*drs.UpdateReplicationConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *drs.UpdateReplicationConfigurationTemplateInput, ...func(*drs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
