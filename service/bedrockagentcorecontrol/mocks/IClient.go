// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	bedrockagentcorecontrol "github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateAgentRuntime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAgentRuntime(ctx context.Context, params *bedrockagentcorecontrol.CreateAgentRuntimeInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateAgentRuntimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAgentRuntime")
	}

	var r0 *bedrockagentcorecontrol.CreateAgentRuntimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateAgentRuntimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateAgentRuntimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateAgentRuntimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAgentRuntimeEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAgentRuntimeEndpoint(ctx context.Context, params *bedrockagentcorecontrol.CreateAgentRuntimeEndpointInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateAgentRuntimeEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAgentRuntimeEndpoint")
	}

	var r0 *bedrockagentcorecontrol.CreateAgentRuntimeEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateAgentRuntimeEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateAgentRuntimeEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateAgentRuntimeEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiKeyCredentialProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApiKeyCredentialProvider(ctx context.Context, params *bedrockagentcorecontrol.CreateApiKeyCredentialProviderInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateApiKeyCredentialProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiKeyCredentialProvider")
	}

	var r0 *bedrockagentcorecontrol.CreateApiKeyCredentialProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateApiKeyCredentialProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateApiKeyCredentialProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateApiKeyCredentialProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBrowser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBrowser(ctx context.Context, params *bedrockagentcorecontrol.CreateBrowserInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateBrowserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBrowser")
	}

	var r0 *bedrockagentcorecontrol.CreateBrowserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateBrowserInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateBrowserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateBrowserInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateBrowserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateBrowserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateBrowserInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCodeInterpreter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCodeInterpreter(ctx context.Context, params *bedrockagentcorecontrol.CreateCodeInterpreterInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateCodeInterpreterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCodeInterpreter")
	}

	var r0 *bedrockagentcorecontrol.CreateCodeInterpreterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateCodeInterpreterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateCodeInterpreterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateCodeInterpreterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGateway(ctx context.Context, params *bedrockagentcorecontrol.CreateGatewayInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGateway")
	}

	var r0 *bedrockagentcorecontrol.CreateGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateGatewayInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateGatewayInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateGatewayInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGatewayTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGatewayTarget(ctx context.Context, params *bedrockagentcorecontrol.CreateGatewayTargetInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateGatewayTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGatewayTarget")
	}

	var r0 *bedrockagentcorecontrol.CreateGatewayTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateGatewayTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateGatewayTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateGatewayTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMemory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMemory(ctx context.Context, params *bedrockagentcorecontrol.CreateMemoryInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateMemoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMemory")
	}

	var r0 *bedrockagentcorecontrol.CreateMemoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateMemoryInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateMemoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateMemoryInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateMemoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateMemoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateMemoryInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOauth2CredentialProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOauth2CredentialProvider(ctx context.Context, params *bedrockagentcorecontrol.CreateOauth2CredentialProviderInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateOauth2CredentialProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOauth2CredentialProvider")
	}

	var r0 *bedrockagentcorecontrol.CreateOauth2CredentialProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateOauth2CredentialProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateOauth2CredentialProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateOauth2CredentialProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkloadIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkloadIdentity(ctx context.Context, params *bedrockagentcorecontrol.CreateWorkloadIdentityInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateWorkloadIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkloadIdentity")
	}

	var r0 *bedrockagentcorecontrol.CreateWorkloadIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateWorkloadIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.CreateWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.CreateWorkloadIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.CreateWorkloadIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.CreateWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAgentRuntime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAgentRuntime(ctx context.Context, params *bedrockagentcorecontrol.DeleteAgentRuntimeInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteAgentRuntimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAgentRuntime")
	}

	var r0 *bedrockagentcorecontrol.DeleteAgentRuntimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteAgentRuntimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteAgentRuntimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteAgentRuntimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAgentRuntimeEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAgentRuntimeEndpoint(ctx context.Context, params *bedrockagentcorecontrol.DeleteAgentRuntimeEndpointInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteAgentRuntimeEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAgentRuntimeEndpoint")
	}

	var r0 *bedrockagentcorecontrol.DeleteAgentRuntimeEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteAgentRuntimeEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteAgentRuntimeEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteAgentRuntimeEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiKeyCredentialProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApiKeyCredentialProvider(ctx context.Context, params *bedrockagentcorecontrol.DeleteApiKeyCredentialProviderInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteApiKeyCredentialProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiKeyCredentialProvider")
	}

	var r0 *bedrockagentcorecontrol.DeleteApiKeyCredentialProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteApiKeyCredentialProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteApiKeyCredentialProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteApiKeyCredentialProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBrowser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBrowser(ctx context.Context, params *bedrockagentcorecontrol.DeleteBrowserInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteBrowserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBrowser")
	}

	var r0 *bedrockagentcorecontrol.DeleteBrowserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteBrowserInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteBrowserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteBrowserInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteBrowserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteBrowserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteBrowserInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCodeInterpreter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCodeInterpreter(ctx context.Context, params *bedrockagentcorecontrol.DeleteCodeInterpreterInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteCodeInterpreterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCodeInterpreter")
	}

	var r0 *bedrockagentcorecontrol.DeleteCodeInterpreterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteCodeInterpreterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteCodeInterpreterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteCodeInterpreterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGateway(ctx context.Context, params *bedrockagentcorecontrol.DeleteGatewayInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGateway")
	}

	var r0 *bedrockagentcorecontrol.DeleteGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteGatewayInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteGatewayInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteGatewayInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGatewayTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGatewayTarget(ctx context.Context, params *bedrockagentcorecontrol.DeleteGatewayTargetInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteGatewayTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGatewayTarget")
	}

	var r0 *bedrockagentcorecontrol.DeleteGatewayTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteGatewayTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteGatewayTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteGatewayTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMemory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMemory(ctx context.Context, params *bedrockagentcorecontrol.DeleteMemoryInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteMemoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMemory")
	}

	var r0 *bedrockagentcorecontrol.DeleteMemoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteMemoryInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteMemoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteMemoryInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteMemoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteMemoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteMemoryInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOauth2CredentialProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOauth2CredentialProvider(ctx context.Context, params *bedrockagentcorecontrol.DeleteOauth2CredentialProviderInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteOauth2CredentialProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOauth2CredentialProvider")
	}

	var r0 *bedrockagentcorecontrol.DeleteOauth2CredentialProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteOauth2CredentialProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteOauth2CredentialProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteOauth2CredentialProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkloadIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkloadIdentity(ctx context.Context, params *bedrockagentcorecontrol.DeleteWorkloadIdentityInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteWorkloadIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkloadIdentity")
	}

	var r0 *bedrockagentcorecontrol.DeleteWorkloadIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteWorkloadIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.DeleteWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.DeleteWorkloadIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.DeleteWorkloadIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.DeleteWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgentRuntime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAgentRuntime(ctx context.Context, params *bedrockagentcorecontrol.GetAgentRuntimeInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetAgentRuntimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentRuntime")
	}

	var r0 *bedrockagentcorecontrol.GetAgentRuntimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetAgentRuntimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetAgentRuntimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetAgentRuntimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgentRuntimeEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAgentRuntimeEndpoint(ctx context.Context, params *bedrockagentcorecontrol.GetAgentRuntimeEndpointInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetAgentRuntimeEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentRuntimeEndpoint")
	}

	var r0 *bedrockagentcorecontrol.GetAgentRuntimeEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetAgentRuntimeEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetAgentRuntimeEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetAgentRuntimeEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApiKeyCredentialProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApiKeyCredentialProvider(ctx context.Context, params *bedrockagentcorecontrol.GetApiKeyCredentialProviderInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetApiKeyCredentialProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApiKeyCredentialProvider")
	}

	var r0 *bedrockagentcorecontrol.GetApiKeyCredentialProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetApiKeyCredentialProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetApiKeyCredentialProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetApiKeyCredentialProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBrowser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBrowser(ctx context.Context, params *bedrockagentcorecontrol.GetBrowserInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetBrowserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBrowser")
	}

	var r0 *bedrockagentcorecontrol.GetBrowserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetBrowserInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetBrowserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetBrowserInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetBrowserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetBrowserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetBrowserInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCodeInterpreter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCodeInterpreter(ctx context.Context, params *bedrockagentcorecontrol.GetCodeInterpreterInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetCodeInterpreterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeInterpreter")
	}

	var r0 *bedrockagentcorecontrol.GetCodeInterpreterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetCodeInterpreterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetCodeInterpreterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetCodeInterpreterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetCodeInterpreterInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGateway(ctx context.Context, params *bedrockagentcorecontrol.GetGatewayInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGateway")
	}

	var r0 *bedrockagentcorecontrol.GetGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetGatewayInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetGatewayInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetGatewayInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGatewayTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGatewayTarget(ctx context.Context, params *bedrockagentcorecontrol.GetGatewayTargetInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetGatewayTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGatewayTarget")
	}

	var r0 *bedrockagentcorecontrol.GetGatewayTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetGatewayTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetGatewayTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetGatewayTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMemory(ctx context.Context, params *bedrockagentcorecontrol.GetMemoryInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetMemoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMemory")
	}

	var r0 *bedrockagentcorecontrol.GetMemoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetMemoryInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetMemoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetMemoryInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetMemoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetMemoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetMemoryInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOauth2CredentialProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOauth2CredentialProvider(ctx context.Context, params *bedrockagentcorecontrol.GetOauth2CredentialProviderInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetOauth2CredentialProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOauth2CredentialProvider")
	}

	var r0 *bedrockagentcorecontrol.GetOauth2CredentialProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetOauth2CredentialProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetOauth2CredentialProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetOauth2CredentialProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTokenVault provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTokenVault(ctx context.Context, params *bedrockagentcorecontrol.GetTokenVaultInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetTokenVaultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTokenVault")
	}

	var r0 *bedrockagentcorecontrol.GetTokenVaultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetTokenVaultInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetTokenVaultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetTokenVaultInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetTokenVaultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetTokenVaultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetTokenVaultInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkloadIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkloadIdentity(ctx context.Context, params *bedrockagentcorecontrol.GetWorkloadIdentityInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetWorkloadIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkloadIdentity")
	}

	var r0 *bedrockagentcorecontrol.GetWorkloadIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetWorkloadIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.GetWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.GetWorkloadIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.GetWorkloadIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.GetWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgentRuntimeEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAgentRuntimeEndpoints(ctx context.Context, params *bedrockagentcorecontrol.ListAgentRuntimeEndpointsInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimeEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAgentRuntimeEndpoints")
	}

	var r0 *bedrockagentcorecontrol.ListAgentRuntimeEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimeEndpointsInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimeEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimeEndpointsInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListAgentRuntimeEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListAgentRuntimeEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimeEndpointsInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgentRuntimeVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAgentRuntimeVersions(ctx context.Context, params *bedrockagentcorecontrol.ListAgentRuntimeVersionsInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimeVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAgentRuntimeVersions")
	}

	var r0 *bedrockagentcorecontrol.ListAgentRuntimeVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimeVersionsInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimeVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimeVersionsInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListAgentRuntimeVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListAgentRuntimeVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimeVersionsInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAgentRuntimes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAgentRuntimes(ctx context.Context, params *bedrockagentcorecontrol.ListAgentRuntimesInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAgentRuntimes")
	}

	var r0 *bedrockagentcorecontrol.ListAgentRuntimesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimesInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimesInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListAgentRuntimesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListAgentRuntimesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListAgentRuntimesInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiKeyCredentialProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApiKeyCredentialProviders(ctx context.Context, params *bedrockagentcorecontrol.ListApiKeyCredentialProvidersInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListApiKeyCredentialProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApiKeyCredentialProviders")
	}

	var r0 *bedrockagentcorecontrol.ListApiKeyCredentialProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListApiKeyCredentialProvidersInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListApiKeyCredentialProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListApiKeyCredentialProvidersInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListApiKeyCredentialProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListApiKeyCredentialProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListApiKeyCredentialProvidersInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBrowsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBrowsers(ctx context.Context, params *bedrockagentcorecontrol.ListBrowsersInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListBrowsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBrowsers")
	}

	var r0 *bedrockagentcorecontrol.ListBrowsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListBrowsersInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListBrowsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListBrowsersInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListBrowsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListBrowsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListBrowsersInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCodeInterpreters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCodeInterpreters(ctx context.Context, params *bedrockagentcorecontrol.ListCodeInterpretersInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListCodeInterpretersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCodeInterpreters")
	}

	var r0 *bedrockagentcorecontrol.ListCodeInterpretersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListCodeInterpretersInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListCodeInterpretersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListCodeInterpretersInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListCodeInterpretersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListCodeInterpretersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListCodeInterpretersInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGatewayTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGatewayTargets(ctx context.Context, params *bedrockagentcorecontrol.ListGatewayTargetsInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListGatewayTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGatewayTargets")
	}

	var r0 *bedrockagentcorecontrol.ListGatewayTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListGatewayTargetsInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListGatewayTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListGatewayTargetsInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListGatewayTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListGatewayTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListGatewayTargetsInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGateways provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGateways(ctx context.Context, params *bedrockagentcorecontrol.ListGatewaysInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListGatewaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGateways")
	}

	var r0 *bedrockagentcorecontrol.ListGatewaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListGatewaysInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListGatewaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListGatewaysInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListGatewaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListGatewaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListGatewaysInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMemories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMemories(ctx context.Context, params *bedrockagentcorecontrol.ListMemoriesInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListMemoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMemories")
	}

	var r0 *bedrockagentcorecontrol.ListMemoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListMemoriesInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListMemoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListMemoriesInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListMemoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListMemoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListMemoriesInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOauth2CredentialProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOauth2CredentialProviders(ctx context.Context, params *bedrockagentcorecontrol.ListOauth2CredentialProvidersInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListOauth2CredentialProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOauth2CredentialProviders")
	}

	var r0 *bedrockagentcorecontrol.ListOauth2CredentialProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListOauth2CredentialProvidersInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListOauth2CredentialProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListOauth2CredentialProvidersInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListOauth2CredentialProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListOauth2CredentialProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListOauth2CredentialProvidersInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkloadIdentities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkloadIdentities(ctx context.Context, params *bedrockagentcorecontrol.ListWorkloadIdentitiesInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListWorkloadIdentitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadIdentities")
	}

	var r0 *bedrockagentcorecontrol.ListWorkloadIdentitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListWorkloadIdentitiesInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListWorkloadIdentitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.ListWorkloadIdentitiesInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.ListWorkloadIdentitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.ListWorkloadIdentitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.ListWorkloadIdentitiesInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() bedrockagentcorecontrol.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 bedrockagentcorecontrol.Options
	if rf, ok := ret.Get(0).(func() bedrockagentcorecontrol.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bedrockagentcorecontrol.Options)
	}

	return r0
}

// SetTokenVaultCMK provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetTokenVaultCMK(ctx context.Context, params *bedrockagentcorecontrol.SetTokenVaultCMKInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.SetTokenVaultCMKOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTokenVaultCMK")
	}

	var r0 *bedrockagentcorecontrol.SetTokenVaultCMKOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.SetTokenVaultCMKInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.SetTokenVaultCMKOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.SetTokenVaultCMKInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.SetTokenVaultCMKOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.SetTokenVaultCMKOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.SetTokenVaultCMKInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAgentRuntime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAgentRuntime(ctx context.Context, params *bedrockagentcorecontrol.UpdateAgentRuntimeInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateAgentRuntimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentRuntime")
	}

	var r0 *bedrockagentcorecontrol.UpdateAgentRuntimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateAgentRuntimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.UpdateAgentRuntimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.UpdateAgentRuntimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.UpdateAgentRuntimeInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAgentRuntimeEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAgentRuntimeEndpoint(ctx context.Context, params *bedrockagentcorecontrol.UpdateAgentRuntimeEndpointInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateAgentRuntimeEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentRuntimeEndpoint")
	}

	var r0 *bedrockagentcorecontrol.UpdateAgentRuntimeEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateAgentRuntimeEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.UpdateAgentRuntimeEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.UpdateAgentRuntimeEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.UpdateAgentRuntimeEndpointInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiKeyCredentialProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApiKeyCredentialProvider(ctx context.Context, params *bedrockagentcorecontrol.UpdateApiKeyCredentialProviderInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateApiKeyCredentialProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiKeyCredentialProvider")
	}

	var r0 *bedrockagentcorecontrol.UpdateApiKeyCredentialProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateApiKeyCredentialProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.UpdateApiKeyCredentialProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.UpdateApiKeyCredentialProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.UpdateApiKeyCredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGateway(ctx context.Context, params *bedrockagentcorecontrol.UpdateGatewayInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGateway")
	}

	var r0 *bedrockagentcorecontrol.UpdateGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateGatewayInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateGatewayInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.UpdateGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.UpdateGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.UpdateGatewayInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGatewayTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGatewayTarget(ctx context.Context, params *bedrockagentcorecontrol.UpdateGatewayTargetInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateGatewayTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewayTarget")
	}

	var r0 *bedrockagentcorecontrol.UpdateGatewayTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateGatewayTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.UpdateGatewayTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.UpdateGatewayTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.UpdateGatewayTargetInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMemory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMemory(ctx context.Context, params *bedrockagentcorecontrol.UpdateMemoryInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateMemoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemory")
	}

	var r0 *bedrockagentcorecontrol.UpdateMemoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateMemoryInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateMemoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateMemoryInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.UpdateMemoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.UpdateMemoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.UpdateMemoryInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOauth2CredentialProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOauth2CredentialProvider(ctx context.Context, params *bedrockagentcorecontrol.UpdateOauth2CredentialProviderInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateOauth2CredentialProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOauth2CredentialProvider")
	}

	var r0 *bedrockagentcorecontrol.UpdateOauth2CredentialProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateOauth2CredentialProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.UpdateOauth2CredentialProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.UpdateOauth2CredentialProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.UpdateOauth2CredentialProviderInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkloadIdentity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkloadIdentity(ctx context.Context, params *bedrockagentcorecontrol.UpdateWorkloadIdentityInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateWorkloadIdentityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkloadIdentity")
	}

	var r0 *bedrockagentcorecontrol.UpdateWorkloadIdentityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateWorkloadIdentityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockagentcorecontrol.UpdateWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) *bedrockagentcorecontrol.UpdateWorkloadIdentityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockagentcorecontrol.UpdateWorkloadIdentityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockagentcorecontrol.UpdateWorkloadIdentityInput, ...func(*bedrockagentcorecontrol.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
