// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudfrontkeyvaluestore "github.com/aws/aws-sdk-go-v2/service/cloudfrontkeyvaluestore"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DeleteKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteKey(ctx context.Context, params *cloudfrontkeyvaluestore.DeleteKeyInput, optFns ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.DeleteKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKey")
	}

	var r0 *cloudfrontkeyvaluestore.DeleteKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.DeleteKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.DeleteKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.DeleteKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) *cloudfrontkeyvaluestore.DeleteKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfrontkeyvaluestore.DeleteKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfrontkeyvaluestore.DeleteKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeKeyValueStore provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeKeyValueStore(ctx context.Context, params *cloudfrontkeyvaluestore.DescribeKeyValueStoreInput, optFns ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.DescribeKeyValueStoreOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeKeyValueStore")
	}

	var r0 *cloudfrontkeyvaluestore.DescribeKeyValueStoreOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.DescribeKeyValueStoreInput, ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.DescribeKeyValueStoreOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.DescribeKeyValueStoreInput, ...func(*cloudfrontkeyvaluestore.Options)) *cloudfrontkeyvaluestore.DescribeKeyValueStoreOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfrontkeyvaluestore.DescribeKeyValueStoreOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfrontkeyvaluestore.DescribeKeyValueStoreInput, ...func(*cloudfrontkeyvaluestore.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetKey(ctx context.Context, params *cloudfrontkeyvaluestore.GetKeyInput, optFns ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.GetKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetKey")
	}

	var r0 *cloudfrontkeyvaluestore.GetKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.GetKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.GetKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.GetKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) *cloudfrontkeyvaluestore.GetKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfrontkeyvaluestore.GetKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfrontkeyvaluestore.GetKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListKeys(ctx context.Context, params *cloudfrontkeyvaluestore.ListKeysInput, optFns ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.ListKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListKeys")
	}

	var r0 *cloudfrontkeyvaluestore.ListKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.ListKeysInput, ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.ListKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.ListKeysInput, ...func(*cloudfrontkeyvaluestore.Options)) *cloudfrontkeyvaluestore.ListKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfrontkeyvaluestore.ListKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfrontkeyvaluestore.ListKeysInput, ...func(*cloudfrontkeyvaluestore.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cloudfrontkeyvaluestore.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cloudfrontkeyvaluestore.Options
	if rf, ok := ret.Get(0).(func() cloudfrontkeyvaluestore.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cloudfrontkeyvaluestore.Options)
	}

	return r0
}

// PutKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutKey(ctx context.Context, params *cloudfrontkeyvaluestore.PutKeyInput, optFns ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.PutKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutKey")
	}

	var r0 *cloudfrontkeyvaluestore.PutKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.PutKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.PutKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.PutKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) *cloudfrontkeyvaluestore.PutKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfrontkeyvaluestore.PutKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfrontkeyvaluestore.PutKeyInput, ...func(*cloudfrontkeyvaluestore.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateKeys provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateKeys(ctx context.Context, params *cloudfrontkeyvaluestore.UpdateKeysInput, optFns ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.UpdateKeysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeys")
	}

	var r0 *cloudfrontkeyvaluestore.UpdateKeysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.UpdateKeysInput, ...func(*cloudfrontkeyvaluestore.Options)) (*cloudfrontkeyvaluestore.UpdateKeysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudfrontkeyvaluestore.UpdateKeysInput, ...func(*cloudfrontkeyvaluestore.Options)) *cloudfrontkeyvaluestore.UpdateKeysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudfrontkeyvaluestore.UpdateKeysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudfrontkeyvaluestore.UpdateKeysInput, ...func(*cloudfrontkeyvaluestore.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
