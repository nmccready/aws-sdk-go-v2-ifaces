// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	lookoutvision "github.com/aws/aws-sdk-go-v2/service/lookoutvision"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataset(ctx context.Context, params *lookoutvision.CreateDatasetInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.CreateDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataset")
	}

	var r0 *lookoutvision.CreateDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.CreateDatasetInput, ...func(*lookoutvision.Options)) (*lookoutvision.CreateDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.CreateDatasetInput, ...func(*lookoutvision.Options)) *lookoutvision.CreateDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.CreateDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.CreateDatasetInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModel(ctx context.Context, params *lookoutvision.CreateModelInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.CreateModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModel")
	}

	var r0 *lookoutvision.CreateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.CreateModelInput, ...func(*lookoutvision.Options)) (*lookoutvision.CreateModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.CreateModelInput, ...func(*lookoutvision.Options)) *lookoutvision.CreateModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.CreateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.CreateModelInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProject(ctx context.Context, params *lookoutvision.CreateProjectInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.CreateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *lookoutvision.CreateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.CreateProjectInput, ...func(*lookoutvision.Options)) (*lookoutvision.CreateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.CreateProjectInput, ...func(*lookoutvision.Options)) *lookoutvision.CreateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.CreateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.CreateProjectInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataset(ctx context.Context, params *lookoutvision.DeleteDatasetInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.DeleteDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataset")
	}

	var r0 *lookoutvision.DeleteDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DeleteDatasetInput, ...func(*lookoutvision.Options)) (*lookoutvision.DeleteDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DeleteDatasetInput, ...func(*lookoutvision.Options)) *lookoutvision.DeleteDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.DeleteDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.DeleteDatasetInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModel(ctx context.Context, params *lookoutvision.DeleteModelInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.DeleteModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModel")
	}

	var r0 *lookoutvision.DeleteModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DeleteModelInput, ...func(*lookoutvision.Options)) (*lookoutvision.DeleteModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DeleteModelInput, ...func(*lookoutvision.Options)) *lookoutvision.DeleteModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.DeleteModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.DeleteModelInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProject(ctx context.Context, params *lookoutvision.DeleteProjectInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.DeleteProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 *lookoutvision.DeleteProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DeleteProjectInput, ...func(*lookoutvision.Options)) (*lookoutvision.DeleteProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DeleteProjectInput, ...func(*lookoutvision.Options)) *lookoutvision.DeleteProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.DeleteProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.DeleteProjectInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataset(ctx context.Context, params *lookoutvision.DescribeDatasetInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.DescribeDatasetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataset")
	}

	var r0 *lookoutvision.DescribeDatasetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DescribeDatasetInput, ...func(*lookoutvision.Options)) (*lookoutvision.DescribeDatasetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DescribeDatasetInput, ...func(*lookoutvision.Options)) *lookoutvision.DescribeDatasetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.DescribeDatasetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.DescribeDatasetInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModel(ctx context.Context, params *lookoutvision.DescribeModelInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.DescribeModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModel")
	}

	var r0 *lookoutvision.DescribeModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DescribeModelInput, ...func(*lookoutvision.Options)) (*lookoutvision.DescribeModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DescribeModelInput, ...func(*lookoutvision.Options)) *lookoutvision.DescribeModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.DescribeModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.DescribeModelInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModelPackagingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModelPackagingJob(ctx context.Context, params *lookoutvision.DescribeModelPackagingJobInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.DescribeModelPackagingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModelPackagingJob")
	}

	var r0 *lookoutvision.DescribeModelPackagingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DescribeModelPackagingJobInput, ...func(*lookoutvision.Options)) (*lookoutvision.DescribeModelPackagingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DescribeModelPackagingJobInput, ...func(*lookoutvision.Options)) *lookoutvision.DescribeModelPackagingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.DescribeModelPackagingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.DescribeModelPackagingJobInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProject(ctx context.Context, params *lookoutvision.DescribeProjectInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.DescribeProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProject")
	}

	var r0 *lookoutvision.DescribeProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DescribeProjectInput, ...func(*lookoutvision.Options)) (*lookoutvision.DescribeProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DescribeProjectInput, ...func(*lookoutvision.Options)) *lookoutvision.DescribeProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.DescribeProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.DescribeProjectInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetectAnomalies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetectAnomalies(ctx context.Context, params *lookoutvision.DetectAnomaliesInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.DetectAnomaliesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetectAnomalies")
	}

	var r0 *lookoutvision.DetectAnomaliesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DetectAnomaliesInput, ...func(*lookoutvision.Options)) (*lookoutvision.DetectAnomaliesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.DetectAnomaliesInput, ...func(*lookoutvision.Options)) *lookoutvision.DetectAnomaliesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.DetectAnomaliesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.DetectAnomaliesInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatasetEntries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatasetEntries(ctx context.Context, params *lookoutvision.ListDatasetEntriesInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.ListDatasetEntriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatasetEntries")
	}

	var r0 *lookoutvision.ListDatasetEntriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListDatasetEntriesInput, ...func(*lookoutvision.Options)) (*lookoutvision.ListDatasetEntriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListDatasetEntriesInput, ...func(*lookoutvision.Options)) *lookoutvision.ListDatasetEntriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.ListDatasetEntriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.ListDatasetEntriesInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelPackagingJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelPackagingJobs(ctx context.Context, params *lookoutvision.ListModelPackagingJobsInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.ListModelPackagingJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelPackagingJobs")
	}

	var r0 *lookoutvision.ListModelPackagingJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListModelPackagingJobsInput, ...func(*lookoutvision.Options)) (*lookoutvision.ListModelPackagingJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListModelPackagingJobsInput, ...func(*lookoutvision.Options)) *lookoutvision.ListModelPackagingJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.ListModelPackagingJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.ListModelPackagingJobsInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModels(ctx context.Context, params *lookoutvision.ListModelsInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.ListModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModels")
	}

	var r0 *lookoutvision.ListModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListModelsInput, ...func(*lookoutvision.Options)) (*lookoutvision.ListModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListModelsInput, ...func(*lookoutvision.Options)) *lookoutvision.ListModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.ListModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.ListModelsInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProjects(ctx context.Context, params *lookoutvision.ListProjectsInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.ListProjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *lookoutvision.ListProjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListProjectsInput, ...func(*lookoutvision.Options)) (*lookoutvision.ListProjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListProjectsInput, ...func(*lookoutvision.Options)) *lookoutvision.ListProjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.ListProjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.ListProjectsInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *lookoutvision.ListTagsForResourceInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *lookoutvision.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListTagsForResourceInput, ...func(*lookoutvision.Options)) (*lookoutvision.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.ListTagsForResourceInput, ...func(*lookoutvision.Options)) *lookoutvision.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.ListTagsForResourceInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() lookoutvision.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 lookoutvision.Options
	if rf, ok := ret.Get(0).(func() lookoutvision.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(lookoutvision.Options)
	}

	return r0
}

// StartModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartModel(ctx context.Context, params *lookoutvision.StartModelInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.StartModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartModel")
	}

	var r0 *lookoutvision.StartModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.StartModelInput, ...func(*lookoutvision.Options)) (*lookoutvision.StartModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.StartModelInput, ...func(*lookoutvision.Options)) *lookoutvision.StartModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.StartModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.StartModelInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartModelPackagingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartModelPackagingJob(ctx context.Context, params *lookoutvision.StartModelPackagingJobInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.StartModelPackagingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartModelPackagingJob")
	}

	var r0 *lookoutvision.StartModelPackagingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.StartModelPackagingJobInput, ...func(*lookoutvision.Options)) (*lookoutvision.StartModelPackagingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.StartModelPackagingJobInput, ...func(*lookoutvision.Options)) *lookoutvision.StartModelPackagingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.StartModelPackagingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.StartModelPackagingJobInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopModel(ctx context.Context, params *lookoutvision.StopModelInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.StopModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopModel")
	}

	var r0 *lookoutvision.StopModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.StopModelInput, ...func(*lookoutvision.Options)) (*lookoutvision.StopModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.StopModelInput, ...func(*lookoutvision.Options)) *lookoutvision.StopModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.StopModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.StopModelInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *lookoutvision.TagResourceInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *lookoutvision.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.TagResourceInput, ...func(*lookoutvision.Options)) (*lookoutvision.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.TagResourceInput, ...func(*lookoutvision.Options)) *lookoutvision.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.TagResourceInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *lookoutvision.UntagResourceInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *lookoutvision.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.UntagResourceInput, ...func(*lookoutvision.Options)) (*lookoutvision.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.UntagResourceInput, ...func(*lookoutvision.Options)) *lookoutvision.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.UntagResourceInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDatasetEntries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDatasetEntries(ctx context.Context, params *lookoutvision.UpdateDatasetEntriesInput, optFns ...func(*lookoutvision.Options)) (*lookoutvision.UpdateDatasetEntriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatasetEntries")
	}

	var r0 *lookoutvision.UpdateDatasetEntriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.UpdateDatasetEntriesInput, ...func(*lookoutvision.Options)) (*lookoutvision.UpdateDatasetEntriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *lookoutvision.UpdateDatasetEntriesInput, ...func(*lookoutvision.Options)) *lookoutvision.UpdateDatasetEntriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lookoutvision.UpdateDatasetEntriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *lookoutvision.UpdateDatasetEntriesInput, ...func(*lookoutvision.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
