// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	codestarconnections "github.com/aws/aws-sdk-go-v2/service/codestarconnections"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnection(ctx context.Context, params *codestarconnections.CreateConnectionInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.CreateConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 *codestarconnections.CreateConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.CreateConnectionInput, ...func(*codestarconnections.Options)) (*codestarconnections.CreateConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.CreateConnectionInput, ...func(*codestarconnections.Options)) *codestarconnections.CreateConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.CreateConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.CreateConnectionInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHost provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHost(ctx context.Context, params *codestarconnections.CreateHostInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.CreateHostOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHost")
	}

	var r0 *codestarconnections.CreateHostOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.CreateHostInput, ...func(*codestarconnections.Options)) (*codestarconnections.CreateHostOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.CreateHostInput, ...func(*codestarconnections.Options)) *codestarconnections.CreateHostOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.CreateHostOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.CreateHostInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRepositoryLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRepositoryLink(ctx context.Context, params *codestarconnections.CreateRepositoryLinkInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.CreateRepositoryLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRepositoryLink")
	}

	var r0 *codestarconnections.CreateRepositoryLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.CreateRepositoryLinkInput, ...func(*codestarconnections.Options)) (*codestarconnections.CreateRepositoryLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.CreateRepositoryLinkInput, ...func(*codestarconnections.Options)) *codestarconnections.CreateRepositoryLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.CreateRepositoryLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.CreateRepositoryLinkInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSyncConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSyncConfiguration(ctx context.Context, params *codestarconnections.CreateSyncConfigurationInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.CreateSyncConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSyncConfiguration")
	}

	var r0 *codestarconnections.CreateSyncConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.CreateSyncConfigurationInput, ...func(*codestarconnections.Options)) (*codestarconnections.CreateSyncConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.CreateSyncConfigurationInput, ...func(*codestarconnections.Options)) *codestarconnections.CreateSyncConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.CreateSyncConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.CreateSyncConfigurationInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnection(ctx context.Context, params *codestarconnections.DeleteConnectionInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.DeleteConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnection")
	}

	var r0 *codestarconnections.DeleteConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.DeleteConnectionInput, ...func(*codestarconnections.Options)) (*codestarconnections.DeleteConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.DeleteConnectionInput, ...func(*codestarconnections.Options)) *codestarconnections.DeleteConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.DeleteConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.DeleteConnectionInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHost provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHost(ctx context.Context, params *codestarconnections.DeleteHostInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.DeleteHostOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHost")
	}

	var r0 *codestarconnections.DeleteHostOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.DeleteHostInput, ...func(*codestarconnections.Options)) (*codestarconnections.DeleteHostOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.DeleteHostInput, ...func(*codestarconnections.Options)) *codestarconnections.DeleteHostOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.DeleteHostOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.DeleteHostInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRepositoryLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRepositoryLink(ctx context.Context, params *codestarconnections.DeleteRepositoryLinkInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.DeleteRepositoryLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRepositoryLink")
	}

	var r0 *codestarconnections.DeleteRepositoryLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.DeleteRepositoryLinkInput, ...func(*codestarconnections.Options)) (*codestarconnections.DeleteRepositoryLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.DeleteRepositoryLinkInput, ...func(*codestarconnections.Options)) *codestarconnections.DeleteRepositoryLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.DeleteRepositoryLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.DeleteRepositoryLinkInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSyncConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSyncConfiguration(ctx context.Context, params *codestarconnections.DeleteSyncConfigurationInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.DeleteSyncConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSyncConfiguration")
	}

	var r0 *codestarconnections.DeleteSyncConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.DeleteSyncConfigurationInput, ...func(*codestarconnections.Options)) (*codestarconnections.DeleteSyncConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.DeleteSyncConfigurationInput, ...func(*codestarconnections.Options)) *codestarconnections.DeleteSyncConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.DeleteSyncConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.DeleteSyncConfigurationInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnection(ctx context.Context, params *codestarconnections.GetConnectionInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.GetConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnection")
	}

	var r0 *codestarconnections.GetConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetConnectionInput, ...func(*codestarconnections.Options)) (*codestarconnections.GetConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetConnectionInput, ...func(*codestarconnections.Options)) *codestarconnections.GetConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.GetConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.GetConnectionInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHost provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHost(ctx context.Context, params *codestarconnections.GetHostInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.GetHostOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHost")
	}

	var r0 *codestarconnections.GetHostOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetHostInput, ...func(*codestarconnections.Options)) (*codestarconnections.GetHostOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetHostInput, ...func(*codestarconnections.Options)) *codestarconnections.GetHostOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.GetHostOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.GetHostInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepositoryLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRepositoryLink(ctx context.Context, params *codestarconnections.GetRepositoryLinkInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.GetRepositoryLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositoryLink")
	}

	var r0 *codestarconnections.GetRepositoryLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetRepositoryLinkInput, ...func(*codestarconnections.Options)) (*codestarconnections.GetRepositoryLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetRepositoryLinkInput, ...func(*codestarconnections.Options)) *codestarconnections.GetRepositoryLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.GetRepositoryLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.GetRepositoryLinkInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRepositorySyncStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRepositorySyncStatus(ctx context.Context, params *codestarconnections.GetRepositorySyncStatusInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.GetRepositorySyncStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRepositorySyncStatus")
	}

	var r0 *codestarconnections.GetRepositorySyncStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetRepositorySyncStatusInput, ...func(*codestarconnections.Options)) (*codestarconnections.GetRepositorySyncStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetRepositorySyncStatusInput, ...func(*codestarconnections.Options)) *codestarconnections.GetRepositorySyncStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.GetRepositorySyncStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.GetRepositorySyncStatusInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceSyncStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceSyncStatus(ctx context.Context, params *codestarconnections.GetResourceSyncStatusInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.GetResourceSyncStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceSyncStatus")
	}

	var r0 *codestarconnections.GetResourceSyncStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetResourceSyncStatusInput, ...func(*codestarconnections.Options)) (*codestarconnections.GetResourceSyncStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetResourceSyncStatusInput, ...func(*codestarconnections.Options)) *codestarconnections.GetResourceSyncStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.GetResourceSyncStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.GetResourceSyncStatusInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSyncBlockerSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSyncBlockerSummary(ctx context.Context, params *codestarconnections.GetSyncBlockerSummaryInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.GetSyncBlockerSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncBlockerSummary")
	}

	var r0 *codestarconnections.GetSyncBlockerSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetSyncBlockerSummaryInput, ...func(*codestarconnections.Options)) (*codestarconnections.GetSyncBlockerSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetSyncBlockerSummaryInput, ...func(*codestarconnections.Options)) *codestarconnections.GetSyncBlockerSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.GetSyncBlockerSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.GetSyncBlockerSummaryInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSyncConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSyncConfiguration(ctx context.Context, params *codestarconnections.GetSyncConfigurationInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.GetSyncConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSyncConfiguration")
	}

	var r0 *codestarconnections.GetSyncConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetSyncConfigurationInput, ...func(*codestarconnections.Options)) (*codestarconnections.GetSyncConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.GetSyncConfigurationInput, ...func(*codestarconnections.Options)) *codestarconnections.GetSyncConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.GetSyncConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.GetSyncConfigurationInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnections(ctx context.Context, params *codestarconnections.ListConnectionsInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.ListConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnections")
	}

	var r0 *codestarconnections.ListConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListConnectionsInput, ...func(*codestarconnections.Options)) (*codestarconnections.ListConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListConnectionsInput, ...func(*codestarconnections.Options)) *codestarconnections.ListConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.ListConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.ListConnectionsInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHosts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHosts(ctx context.Context, params *codestarconnections.ListHostsInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.ListHostsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHosts")
	}

	var r0 *codestarconnections.ListHostsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListHostsInput, ...func(*codestarconnections.Options)) (*codestarconnections.ListHostsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListHostsInput, ...func(*codestarconnections.Options)) *codestarconnections.ListHostsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.ListHostsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.ListHostsInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositoryLinks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRepositoryLinks(ctx context.Context, params *codestarconnections.ListRepositoryLinksInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.ListRepositoryLinksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositoryLinks")
	}

	var r0 *codestarconnections.ListRepositoryLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListRepositoryLinksInput, ...func(*codestarconnections.Options)) (*codestarconnections.ListRepositoryLinksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListRepositoryLinksInput, ...func(*codestarconnections.Options)) *codestarconnections.ListRepositoryLinksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.ListRepositoryLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.ListRepositoryLinksInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRepositorySyncDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRepositorySyncDefinitions(ctx context.Context, params *codestarconnections.ListRepositorySyncDefinitionsInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.ListRepositorySyncDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRepositorySyncDefinitions")
	}

	var r0 *codestarconnections.ListRepositorySyncDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListRepositorySyncDefinitionsInput, ...func(*codestarconnections.Options)) (*codestarconnections.ListRepositorySyncDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListRepositorySyncDefinitionsInput, ...func(*codestarconnections.Options)) *codestarconnections.ListRepositorySyncDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.ListRepositorySyncDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.ListRepositorySyncDefinitionsInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSyncConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSyncConfigurations(ctx context.Context, params *codestarconnections.ListSyncConfigurationsInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.ListSyncConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSyncConfigurations")
	}

	var r0 *codestarconnections.ListSyncConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListSyncConfigurationsInput, ...func(*codestarconnections.Options)) (*codestarconnections.ListSyncConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListSyncConfigurationsInput, ...func(*codestarconnections.Options)) *codestarconnections.ListSyncConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.ListSyncConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.ListSyncConfigurationsInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *codestarconnections.ListTagsForResourceInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *codestarconnections.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListTagsForResourceInput, ...func(*codestarconnections.Options)) (*codestarconnections.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.ListTagsForResourceInput, ...func(*codestarconnections.Options)) *codestarconnections.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.ListTagsForResourceInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() codestarconnections.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 codestarconnections.Options
	if rf, ok := ret.Get(0).(func() codestarconnections.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(codestarconnections.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *codestarconnections.TagResourceInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *codestarconnections.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.TagResourceInput, ...func(*codestarconnections.Options)) (*codestarconnections.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.TagResourceInput, ...func(*codestarconnections.Options)) *codestarconnections.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.TagResourceInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *codestarconnections.UntagResourceInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *codestarconnections.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UntagResourceInput, ...func(*codestarconnections.Options)) (*codestarconnections.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UntagResourceInput, ...func(*codestarconnections.Options)) *codestarconnections.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.UntagResourceInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHost provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHost(ctx context.Context, params *codestarconnections.UpdateHostInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.UpdateHostOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHost")
	}

	var r0 *codestarconnections.UpdateHostOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UpdateHostInput, ...func(*codestarconnections.Options)) (*codestarconnections.UpdateHostOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UpdateHostInput, ...func(*codestarconnections.Options)) *codestarconnections.UpdateHostOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.UpdateHostOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.UpdateHostInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRepositoryLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRepositoryLink(ctx context.Context, params *codestarconnections.UpdateRepositoryLinkInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.UpdateRepositoryLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRepositoryLink")
	}

	var r0 *codestarconnections.UpdateRepositoryLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UpdateRepositoryLinkInput, ...func(*codestarconnections.Options)) (*codestarconnections.UpdateRepositoryLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UpdateRepositoryLinkInput, ...func(*codestarconnections.Options)) *codestarconnections.UpdateRepositoryLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.UpdateRepositoryLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.UpdateRepositoryLinkInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSyncBlocker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSyncBlocker(ctx context.Context, params *codestarconnections.UpdateSyncBlockerInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.UpdateSyncBlockerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSyncBlocker")
	}

	var r0 *codestarconnections.UpdateSyncBlockerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UpdateSyncBlockerInput, ...func(*codestarconnections.Options)) (*codestarconnections.UpdateSyncBlockerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UpdateSyncBlockerInput, ...func(*codestarconnections.Options)) *codestarconnections.UpdateSyncBlockerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.UpdateSyncBlockerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.UpdateSyncBlockerInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSyncConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSyncConfiguration(ctx context.Context, params *codestarconnections.UpdateSyncConfigurationInput, optFns ...func(*codestarconnections.Options)) (*codestarconnections.UpdateSyncConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSyncConfiguration")
	}

	var r0 *codestarconnections.UpdateSyncConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UpdateSyncConfigurationInput, ...func(*codestarconnections.Options)) (*codestarconnections.UpdateSyncConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *codestarconnections.UpdateSyncConfigurationInput, ...func(*codestarconnections.Options)) *codestarconnections.UpdateSyncConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*codestarconnections.UpdateSyncConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *codestarconnections.UpdateSyncConfigurationInput, ...func(*codestarconnections.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
