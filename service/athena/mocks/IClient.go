// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	athena "github.com/aws/aws-sdk-go-v2/service/athena"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetNamedQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetNamedQuery(ctx context.Context, params *athena.BatchGetNamedQueryInput, optFns ...func(*athena.Options)) (*athena.BatchGetNamedQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetNamedQuery")
	}

	var r0 *athena.BatchGetNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetNamedQueryInput, ...func(*athena.Options)) (*athena.BatchGetNamedQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetNamedQueryInput, ...func(*athena.Options)) *athena.BatchGetNamedQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.BatchGetNamedQueryInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetPreparedStatement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetPreparedStatement(ctx context.Context, params *athena.BatchGetPreparedStatementInput, optFns ...func(*athena.Options)) (*athena.BatchGetPreparedStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetPreparedStatement")
	}

	var r0 *athena.BatchGetPreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetPreparedStatementInput, ...func(*athena.Options)) (*athena.BatchGetPreparedStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetPreparedStatementInput, ...func(*athena.Options)) *athena.BatchGetPreparedStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetPreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.BatchGetPreparedStatementInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetQueryExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetQueryExecution(ctx context.Context, params *athena.BatchGetQueryExecutionInput, optFns ...func(*athena.Options)) (*athena.BatchGetQueryExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetQueryExecution")
	}

	var r0 *athena.BatchGetQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetQueryExecutionInput, ...func(*athena.Options)) (*athena.BatchGetQueryExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.BatchGetQueryExecutionInput, ...func(*athena.Options)) *athena.BatchGetQueryExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.BatchGetQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.BatchGetQueryExecutionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelCapacityReservation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelCapacityReservation(ctx context.Context, params *athena.CancelCapacityReservationInput, optFns ...func(*athena.Options)) (*athena.CancelCapacityReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelCapacityReservation")
	}

	var r0 *athena.CancelCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CancelCapacityReservationInput, ...func(*athena.Options)) (*athena.CancelCapacityReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CancelCapacityReservationInput, ...func(*athena.Options)) *athena.CancelCapacityReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CancelCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CancelCapacityReservationInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCapacityReservation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCapacityReservation(ctx context.Context, params *athena.CreateCapacityReservationInput, optFns ...func(*athena.Options)) (*athena.CreateCapacityReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCapacityReservation")
	}

	var r0 *athena.CreateCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateCapacityReservationInput, ...func(*athena.Options)) (*athena.CreateCapacityReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateCapacityReservationInput, ...func(*athena.Options)) *athena.CreateCapacityReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateCapacityReservationInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataCatalog provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataCatalog(ctx context.Context, params *athena.CreateDataCatalogInput, optFns ...func(*athena.Options)) (*athena.CreateDataCatalogOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataCatalog")
	}

	var r0 *athena.CreateDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateDataCatalogInput, ...func(*athena.Options)) (*athena.CreateDataCatalogOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateDataCatalogInput, ...func(*athena.Options)) *athena.CreateDataCatalogOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateDataCatalogInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNamedQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNamedQuery(ctx context.Context, params *athena.CreateNamedQueryInput, optFns ...func(*athena.Options)) (*athena.CreateNamedQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNamedQuery")
	}

	var r0 *athena.CreateNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateNamedQueryInput, ...func(*athena.Options)) (*athena.CreateNamedQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateNamedQueryInput, ...func(*athena.Options)) *athena.CreateNamedQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateNamedQueryInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotebook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNotebook(ctx context.Context, params *athena.CreateNotebookInput, optFns ...func(*athena.Options)) (*athena.CreateNotebookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotebook")
	}

	var r0 *athena.CreateNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateNotebookInput, ...func(*athena.Options)) (*athena.CreateNotebookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateNotebookInput, ...func(*athena.Options)) *athena.CreateNotebookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateNotebookInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePreparedStatement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePreparedStatement(ctx context.Context, params *athena.CreatePreparedStatementInput, optFns ...func(*athena.Options)) (*athena.CreatePreparedStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePreparedStatement")
	}

	var r0 *athena.CreatePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreatePreparedStatementInput, ...func(*athena.Options)) (*athena.CreatePreparedStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreatePreparedStatementInput, ...func(*athena.Options)) *athena.CreatePreparedStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreatePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreatePreparedStatementInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePresignedNotebookUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePresignedNotebookUrl(ctx context.Context, params *athena.CreatePresignedNotebookUrlInput, optFns ...func(*athena.Options)) (*athena.CreatePresignedNotebookUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePresignedNotebookUrl")
	}

	var r0 *athena.CreatePresignedNotebookUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreatePresignedNotebookUrlInput, ...func(*athena.Options)) (*athena.CreatePresignedNotebookUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreatePresignedNotebookUrlInput, ...func(*athena.Options)) *athena.CreatePresignedNotebookUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreatePresignedNotebookUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreatePresignedNotebookUrlInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkGroup(ctx context.Context, params *athena.CreateWorkGroupInput, optFns ...func(*athena.Options)) (*athena.CreateWorkGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkGroup")
	}

	var r0 *athena.CreateWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateWorkGroupInput, ...func(*athena.Options)) (*athena.CreateWorkGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.CreateWorkGroupInput, ...func(*athena.Options)) *athena.CreateWorkGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.CreateWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.CreateWorkGroupInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCapacityReservation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCapacityReservation(ctx context.Context, params *athena.DeleteCapacityReservationInput, optFns ...func(*athena.Options)) (*athena.DeleteCapacityReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCapacityReservation")
	}

	var r0 *athena.DeleteCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteCapacityReservationInput, ...func(*athena.Options)) (*athena.DeleteCapacityReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteCapacityReservationInput, ...func(*athena.Options)) *athena.DeleteCapacityReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteCapacityReservationInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataCatalog provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataCatalog(ctx context.Context, params *athena.DeleteDataCatalogInput, optFns ...func(*athena.Options)) (*athena.DeleteDataCatalogOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataCatalog")
	}

	var r0 *athena.DeleteDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteDataCatalogInput, ...func(*athena.Options)) (*athena.DeleteDataCatalogOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteDataCatalogInput, ...func(*athena.Options)) *athena.DeleteDataCatalogOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteDataCatalogInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNamedQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNamedQuery(ctx context.Context, params *athena.DeleteNamedQueryInput, optFns ...func(*athena.Options)) (*athena.DeleteNamedQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNamedQuery")
	}

	var r0 *athena.DeleteNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteNamedQueryInput, ...func(*athena.Options)) (*athena.DeleteNamedQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteNamedQueryInput, ...func(*athena.Options)) *athena.DeleteNamedQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteNamedQueryInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotebook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNotebook(ctx context.Context, params *athena.DeleteNotebookInput, optFns ...func(*athena.Options)) (*athena.DeleteNotebookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotebook")
	}

	var r0 *athena.DeleteNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteNotebookInput, ...func(*athena.Options)) (*athena.DeleteNotebookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteNotebookInput, ...func(*athena.Options)) *athena.DeleteNotebookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteNotebookInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePreparedStatement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePreparedStatement(ctx context.Context, params *athena.DeletePreparedStatementInput, optFns ...func(*athena.Options)) (*athena.DeletePreparedStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePreparedStatement")
	}

	var r0 *athena.DeletePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeletePreparedStatementInput, ...func(*athena.Options)) (*athena.DeletePreparedStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeletePreparedStatementInput, ...func(*athena.Options)) *athena.DeletePreparedStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeletePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeletePreparedStatementInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkGroup(ctx context.Context, params *athena.DeleteWorkGroupInput, optFns ...func(*athena.Options)) (*athena.DeleteWorkGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkGroup")
	}

	var r0 *athena.DeleteWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteWorkGroupInput, ...func(*athena.Options)) (*athena.DeleteWorkGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.DeleteWorkGroupInput, ...func(*athena.Options)) *athena.DeleteWorkGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.DeleteWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.DeleteWorkGroupInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportNotebook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportNotebook(ctx context.Context, params *athena.ExportNotebookInput, optFns ...func(*athena.Options)) (*athena.ExportNotebookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportNotebook")
	}

	var r0 *athena.ExportNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ExportNotebookInput, ...func(*athena.Options)) (*athena.ExportNotebookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ExportNotebookInput, ...func(*athena.Options)) *athena.ExportNotebookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ExportNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ExportNotebookInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCalculationExecution(ctx context.Context, params *athena.GetCalculationExecutionInput, optFns ...func(*athena.Options)) (*athena.GetCalculationExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCalculationExecution")
	}

	var r0 *athena.GetCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionInput, ...func(*athena.Options)) (*athena.GetCalculationExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionInput, ...func(*athena.Options)) *athena.GetCalculationExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCalculationExecutionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecutionCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCalculationExecutionCode(ctx context.Context, params *athena.GetCalculationExecutionCodeInput, optFns ...func(*athena.Options)) (*athena.GetCalculationExecutionCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCalculationExecutionCode")
	}

	var r0 *athena.GetCalculationExecutionCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionCodeInput, ...func(*athena.Options)) (*athena.GetCalculationExecutionCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionCodeInput, ...func(*athena.Options)) *athena.GetCalculationExecutionCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCalculationExecutionCodeInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculationExecutionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCalculationExecutionStatus(ctx context.Context, params *athena.GetCalculationExecutionStatusInput, optFns ...func(*athena.Options)) (*athena.GetCalculationExecutionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCalculationExecutionStatus")
	}

	var r0 *athena.GetCalculationExecutionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionStatusInput, ...func(*athena.Options)) (*athena.GetCalculationExecutionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCalculationExecutionStatusInput, ...func(*athena.Options)) *athena.GetCalculationExecutionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCalculationExecutionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCalculationExecutionStatusInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacityAssignmentConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCapacityAssignmentConfiguration(ctx context.Context, params *athena.GetCapacityAssignmentConfigurationInput, optFns ...func(*athena.Options)) (*athena.GetCapacityAssignmentConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCapacityAssignmentConfiguration")
	}

	var r0 *athena.GetCapacityAssignmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCapacityAssignmentConfigurationInput, ...func(*athena.Options)) (*athena.GetCapacityAssignmentConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCapacityAssignmentConfigurationInput, ...func(*athena.Options)) *athena.GetCapacityAssignmentConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCapacityAssignmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCapacityAssignmentConfigurationInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCapacityReservation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCapacityReservation(ctx context.Context, params *athena.GetCapacityReservationInput, optFns ...func(*athena.Options)) (*athena.GetCapacityReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCapacityReservation")
	}

	var r0 *athena.GetCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCapacityReservationInput, ...func(*athena.Options)) (*athena.GetCapacityReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetCapacityReservationInput, ...func(*athena.Options)) *athena.GetCapacityReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetCapacityReservationInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataCatalog provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataCatalog(ctx context.Context, params *athena.GetDataCatalogInput, optFns ...func(*athena.Options)) (*athena.GetDataCatalogOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataCatalog")
	}

	var r0 *athena.GetDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetDataCatalogInput, ...func(*athena.Options)) (*athena.GetDataCatalogOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetDataCatalogInput, ...func(*athena.Options)) *athena.GetDataCatalogOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetDataCatalogInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDatabase(ctx context.Context, params *athena.GetDatabaseInput, optFns ...func(*athena.Options)) (*athena.GetDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDatabase")
	}

	var r0 *athena.GetDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetDatabaseInput, ...func(*athena.Options)) (*athena.GetDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetDatabaseInput, ...func(*athena.Options)) *athena.GetDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetDatabaseInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNamedQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNamedQuery(ctx context.Context, params *athena.GetNamedQueryInput, optFns ...func(*athena.Options)) (*athena.GetNamedQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNamedQuery")
	}

	var r0 *athena.GetNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetNamedQueryInput, ...func(*athena.Options)) (*athena.GetNamedQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetNamedQueryInput, ...func(*athena.Options)) *athena.GetNamedQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetNamedQueryInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNotebookMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetNotebookMetadata(ctx context.Context, params *athena.GetNotebookMetadataInput, optFns ...func(*athena.Options)) (*athena.GetNotebookMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetNotebookMetadata")
	}

	var r0 *athena.GetNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetNotebookMetadataInput, ...func(*athena.Options)) (*athena.GetNotebookMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetNotebookMetadataInput, ...func(*athena.Options)) *athena.GetNotebookMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetNotebookMetadataInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreparedStatement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPreparedStatement(ctx context.Context, params *athena.GetPreparedStatementInput, optFns ...func(*athena.Options)) (*athena.GetPreparedStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPreparedStatement")
	}

	var r0 *athena.GetPreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetPreparedStatementInput, ...func(*athena.Options)) (*athena.GetPreparedStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetPreparedStatementInput, ...func(*athena.Options)) *athena.GetPreparedStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetPreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetPreparedStatementInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryExecution(ctx context.Context, params *athena.GetQueryExecutionInput, optFns ...func(*athena.Options)) (*athena.GetQueryExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryExecution")
	}

	var r0 *athena.GetQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryExecutionInput, ...func(*athena.Options)) (*athena.GetQueryExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryExecutionInput, ...func(*athena.Options)) *athena.GetQueryExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetQueryExecutionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryResults(ctx context.Context, params *athena.GetQueryResultsInput, optFns ...func(*athena.Options)) (*athena.GetQueryResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryResults")
	}

	var r0 *athena.GetQueryResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryResultsInput, ...func(*athena.Options)) (*athena.GetQueryResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryResultsInput, ...func(*athena.Options)) *athena.GetQueryResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetQueryResultsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryRuntimeStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryRuntimeStatistics(ctx context.Context, params *athena.GetQueryRuntimeStatisticsInput, optFns ...func(*athena.Options)) (*athena.GetQueryRuntimeStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryRuntimeStatistics")
	}

	var r0 *athena.GetQueryRuntimeStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryRuntimeStatisticsInput, ...func(*athena.Options)) (*athena.GetQueryRuntimeStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetQueryRuntimeStatisticsInput, ...func(*athena.Options)) *athena.GetQueryRuntimeStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetQueryRuntimeStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetQueryRuntimeStatisticsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSession(ctx context.Context, params *athena.GetSessionInput, optFns ...func(*athena.Options)) (*athena.GetSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *athena.GetSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetSessionInput, ...func(*athena.Options)) (*athena.GetSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetSessionInput, ...func(*athena.Options)) *athena.GetSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetSessionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSessionStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSessionStatus(ctx context.Context, params *athena.GetSessionStatusInput, optFns ...func(*athena.Options)) (*athena.GetSessionStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSessionStatus")
	}

	var r0 *athena.GetSessionStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetSessionStatusInput, ...func(*athena.Options)) (*athena.GetSessionStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetSessionStatusInput, ...func(*athena.Options)) *athena.GetSessionStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetSessionStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetSessionStatusInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTableMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTableMetadata(ctx context.Context, params *athena.GetTableMetadataInput, optFns ...func(*athena.Options)) (*athena.GetTableMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTableMetadata")
	}

	var r0 *athena.GetTableMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetTableMetadataInput, ...func(*athena.Options)) (*athena.GetTableMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetTableMetadataInput, ...func(*athena.Options)) *athena.GetTableMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetTableMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetTableMetadataInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkGroup(ctx context.Context, params *athena.GetWorkGroupInput, optFns ...func(*athena.Options)) (*athena.GetWorkGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkGroup")
	}

	var r0 *athena.GetWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetWorkGroupInput, ...func(*athena.Options)) (*athena.GetWorkGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.GetWorkGroupInput, ...func(*athena.Options)) *athena.GetWorkGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.GetWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.GetWorkGroupInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportNotebook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportNotebook(ctx context.Context, params *athena.ImportNotebookInput, optFns ...func(*athena.Options)) (*athena.ImportNotebookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportNotebook")
	}

	var r0 *athena.ImportNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ImportNotebookInput, ...func(*athena.Options)) (*athena.ImportNotebookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ImportNotebookInput, ...func(*athena.Options)) *athena.ImportNotebookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ImportNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ImportNotebookInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplicationDPUSizes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplicationDPUSizes(ctx context.Context, params *athena.ListApplicationDPUSizesInput, optFns ...func(*athena.Options)) (*athena.ListApplicationDPUSizesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplicationDPUSizes")
	}

	var r0 *athena.ListApplicationDPUSizesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListApplicationDPUSizesInput, ...func(*athena.Options)) (*athena.ListApplicationDPUSizesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListApplicationDPUSizesInput, ...func(*athena.Options)) *athena.ListApplicationDPUSizesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListApplicationDPUSizesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListApplicationDPUSizesInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCalculationExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCalculationExecutions(ctx context.Context, params *athena.ListCalculationExecutionsInput, optFns ...func(*athena.Options)) (*athena.ListCalculationExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCalculationExecutions")
	}

	var r0 *athena.ListCalculationExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCalculationExecutionsInput, ...func(*athena.Options)) (*athena.ListCalculationExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCalculationExecutionsInput, ...func(*athena.Options)) *athena.ListCalculationExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListCalculationExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListCalculationExecutionsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCapacityReservations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCapacityReservations(ctx context.Context, params *athena.ListCapacityReservationsInput, optFns ...func(*athena.Options)) (*athena.ListCapacityReservationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCapacityReservations")
	}

	var r0 *athena.ListCapacityReservationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCapacityReservationsInput, ...func(*athena.Options)) (*athena.ListCapacityReservationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListCapacityReservationsInput, ...func(*athena.Options)) *athena.ListCapacityReservationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListCapacityReservationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListCapacityReservationsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataCatalogs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataCatalogs(ctx context.Context, params *athena.ListDataCatalogsInput, optFns ...func(*athena.Options)) (*athena.ListDataCatalogsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataCatalogs")
	}

	var r0 *athena.ListDataCatalogsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDataCatalogsInput, ...func(*athena.Options)) (*athena.ListDataCatalogsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDataCatalogsInput, ...func(*athena.Options)) *athena.ListDataCatalogsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListDataCatalogsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListDataCatalogsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatabases(ctx context.Context, params *athena.ListDatabasesInput, optFns ...func(*athena.Options)) (*athena.ListDatabasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 *athena.ListDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDatabasesInput, ...func(*athena.Options)) (*athena.ListDatabasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListDatabasesInput, ...func(*athena.Options)) *athena.ListDatabasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListDatabasesInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngineVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEngineVersions(ctx context.Context, params *athena.ListEngineVersionsInput, optFns ...func(*athena.Options)) (*athena.ListEngineVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEngineVersions")
	}

	var r0 *athena.ListEngineVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListEngineVersionsInput, ...func(*athena.Options)) (*athena.ListEngineVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListEngineVersionsInput, ...func(*athena.Options)) *athena.ListEngineVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListEngineVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListEngineVersionsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExecutors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExecutors(ctx context.Context, params *athena.ListExecutorsInput, optFns ...func(*athena.Options)) (*athena.ListExecutorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExecutors")
	}

	var r0 *athena.ListExecutorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListExecutorsInput, ...func(*athena.Options)) (*athena.ListExecutorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListExecutorsInput, ...func(*athena.Options)) *athena.ListExecutorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListExecutorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListExecutorsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNamedQueries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNamedQueries(ctx context.Context, params *athena.ListNamedQueriesInput, optFns ...func(*athena.Options)) (*athena.ListNamedQueriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNamedQueries")
	}

	var r0 *athena.ListNamedQueriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNamedQueriesInput, ...func(*athena.Options)) (*athena.ListNamedQueriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNamedQueriesInput, ...func(*athena.Options)) *athena.ListNamedQueriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNamedQueriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListNamedQueriesInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotebookMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNotebookMetadata(ctx context.Context, params *athena.ListNotebookMetadataInput, optFns ...func(*athena.Options)) (*athena.ListNotebookMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNotebookMetadata")
	}

	var r0 *athena.ListNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNotebookMetadataInput, ...func(*athena.Options)) (*athena.ListNotebookMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNotebookMetadataInput, ...func(*athena.Options)) *athena.ListNotebookMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListNotebookMetadataInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotebookSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNotebookSessions(ctx context.Context, params *athena.ListNotebookSessionsInput, optFns ...func(*athena.Options)) (*athena.ListNotebookSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNotebookSessions")
	}

	var r0 *athena.ListNotebookSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNotebookSessionsInput, ...func(*athena.Options)) (*athena.ListNotebookSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListNotebookSessionsInput, ...func(*athena.Options)) *athena.ListNotebookSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListNotebookSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListNotebookSessionsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPreparedStatements provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPreparedStatements(ctx context.Context, params *athena.ListPreparedStatementsInput, optFns ...func(*athena.Options)) (*athena.ListPreparedStatementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPreparedStatements")
	}

	var r0 *athena.ListPreparedStatementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListPreparedStatementsInput, ...func(*athena.Options)) (*athena.ListPreparedStatementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListPreparedStatementsInput, ...func(*athena.Options)) *athena.ListPreparedStatementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListPreparedStatementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListPreparedStatementsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueryExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueryExecutions(ctx context.Context, params *athena.ListQueryExecutionsInput, optFns ...func(*athena.Options)) (*athena.ListQueryExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueryExecutions")
	}

	var r0 *athena.ListQueryExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListQueryExecutionsInput, ...func(*athena.Options)) (*athena.ListQueryExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListQueryExecutionsInput, ...func(*athena.Options)) *athena.ListQueryExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListQueryExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListQueryExecutionsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSessions(ctx context.Context, params *athena.ListSessionsInput, optFns ...func(*athena.Options)) (*athena.ListSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 *athena.ListSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListSessionsInput, ...func(*athena.Options)) (*athena.ListSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListSessionsInput, ...func(*athena.Options)) *athena.ListSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListSessionsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTableMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTableMetadata(ctx context.Context, params *athena.ListTableMetadataInput, optFns ...func(*athena.Options)) (*athena.ListTableMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTableMetadata")
	}

	var r0 *athena.ListTableMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTableMetadataInput, ...func(*athena.Options)) (*athena.ListTableMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTableMetadataInput, ...func(*athena.Options)) *athena.ListTableMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListTableMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListTableMetadataInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *athena.ListTagsForResourceInput, optFns ...func(*athena.Options)) (*athena.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *athena.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTagsForResourceInput, ...func(*athena.Options)) (*athena.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListTagsForResourceInput, ...func(*athena.Options)) *athena.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListTagsForResourceInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkGroups(ctx context.Context, params *athena.ListWorkGroupsInput, optFns ...func(*athena.Options)) (*athena.ListWorkGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkGroups")
	}

	var r0 *athena.ListWorkGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListWorkGroupsInput, ...func(*athena.Options)) (*athena.ListWorkGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.ListWorkGroupsInput, ...func(*athena.Options)) *athena.ListWorkGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.ListWorkGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.ListWorkGroupsInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() athena.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 athena.Options
	if rf, ok := ret.Get(0).(func() athena.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(athena.Options)
	}

	return r0
}

// PutCapacityAssignmentConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutCapacityAssignmentConfiguration(ctx context.Context, params *athena.PutCapacityAssignmentConfigurationInput, optFns ...func(*athena.Options)) (*athena.PutCapacityAssignmentConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutCapacityAssignmentConfiguration")
	}

	var r0 *athena.PutCapacityAssignmentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.PutCapacityAssignmentConfigurationInput, ...func(*athena.Options)) (*athena.PutCapacityAssignmentConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.PutCapacityAssignmentConfigurationInput, ...func(*athena.Options)) *athena.PutCapacityAssignmentConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.PutCapacityAssignmentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.PutCapacityAssignmentConfigurationInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCalculationExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartCalculationExecution(ctx context.Context, params *athena.StartCalculationExecutionInput, optFns ...func(*athena.Options)) (*athena.StartCalculationExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCalculationExecution")
	}

	var r0 *athena.StartCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartCalculationExecutionInput, ...func(*athena.Options)) (*athena.StartCalculationExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartCalculationExecutionInput, ...func(*athena.Options)) *athena.StartCalculationExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StartCalculationExecutionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartQueryExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartQueryExecution(ctx context.Context, params *athena.StartQueryExecutionInput, optFns ...func(*athena.Options)) (*athena.StartQueryExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartQueryExecution")
	}

	var r0 *athena.StartQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartQueryExecutionInput, ...func(*athena.Options)) (*athena.StartQueryExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartQueryExecutionInput, ...func(*athena.Options)) *athena.StartQueryExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StartQueryExecutionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSession(ctx context.Context, params *athena.StartSessionInput, optFns ...func(*athena.Options)) (*athena.StartSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSession")
	}

	var r0 *athena.StartSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartSessionInput, ...func(*athena.Options)) (*athena.StartSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StartSessionInput, ...func(*athena.Options)) *athena.StartSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StartSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StartSessionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopCalculationExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopCalculationExecution(ctx context.Context, params *athena.StopCalculationExecutionInput, optFns ...func(*athena.Options)) (*athena.StopCalculationExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopCalculationExecution")
	}

	var r0 *athena.StopCalculationExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StopCalculationExecutionInput, ...func(*athena.Options)) (*athena.StopCalculationExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StopCalculationExecutionInput, ...func(*athena.Options)) *athena.StopCalculationExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StopCalculationExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StopCalculationExecutionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopQueryExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopQueryExecution(ctx context.Context, params *athena.StopQueryExecutionInput, optFns ...func(*athena.Options)) (*athena.StopQueryExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopQueryExecution")
	}

	var r0 *athena.StopQueryExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StopQueryExecutionInput, ...func(*athena.Options)) (*athena.StopQueryExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.StopQueryExecutionInput, ...func(*athena.Options)) *athena.StopQueryExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.StopQueryExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.StopQueryExecutionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *athena.TagResourceInput, optFns ...func(*athena.Options)) (*athena.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *athena.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.TagResourceInput, ...func(*athena.Options)) (*athena.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.TagResourceInput, ...func(*athena.Options)) *athena.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.TagResourceInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TerminateSession(ctx context.Context, params *athena.TerminateSessionInput, optFns ...func(*athena.Options)) (*athena.TerminateSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateSession")
	}

	var r0 *athena.TerminateSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.TerminateSessionInput, ...func(*athena.Options)) (*athena.TerminateSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.TerminateSessionInput, ...func(*athena.Options)) *athena.TerminateSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.TerminateSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.TerminateSessionInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *athena.UntagResourceInput, optFns ...func(*athena.Options)) (*athena.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *athena.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UntagResourceInput, ...func(*athena.Options)) (*athena.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UntagResourceInput, ...func(*athena.Options)) *athena.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UntagResourceInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCapacityReservation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCapacityReservation(ctx context.Context, params *athena.UpdateCapacityReservationInput, optFns ...func(*athena.Options)) (*athena.UpdateCapacityReservationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCapacityReservation")
	}

	var r0 *athena.UpdateCapacityReservationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateCapacityReservationInput, ...func(*athena.Options)) (*athena.UpdateCapacityReservationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateCapacityReservationInput, ...func(*athena.Options)) *athena.UpdateCapacityReservationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateCapacityReservationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateCapacityReservationInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataCatalog provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataCatalog(ctx context.Context, params *athena.UpdateDataCatalogInput, optFns ...func(*athena.Options)) (*athena.UpdateDataCatalogOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataCatalog")
	}

	var r0 *athena.UpdateDataCatalogOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateDataCatalogInput, ...func(*athena.Options)) (*athena.UpdateDataCatalogOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateDataCatalogInput, ...func(*athena.Options)) *athena.UpdateDataCatalogOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateDataCatalogOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateDataCatalogInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNamedQuery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNamedQuery(ctx context.Context, params *athena.UpdateNamedQueryInput, optFns ...func(*athena.Options)) (*athena.UpdateNamedQueryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNamedQuery")
	}

	var r0 *athena.UpdateNamedQueryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNamedQueryInput, ...func(*athena.Options)) (*athena.UpdateNamedQueryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNamedQueryInput, ...func(*athena.Options)) *athena.UpdateNamedQueryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNamedQueryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateNamedQueryInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotebook provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNotebook(ctx context.Context, params *athena.UpdateNotebookInput, optFns ...func(*athena.Options)) (*athena.UpdateNotebookOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotebook")
	}

	var r0 *athena.UpdateNotebookOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNotebookInput, ...func(*athena.Options)) (*athena.UpdateNotebookOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNotebookInput, ...func(*athena.Options)) *athena.UpdateNotebookOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNotebookOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateNotebookInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotebookMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNotebookMetadata(ctx context.Context, params *athena.UpdateNotebookMetadataInput, optFns ...func(*athena.Options)) (*athena.UpdateNotebookMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotebookMetadata")
	}

	var r0 *athena.UpdateNotebookMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNotebookMetadataInput, ...func(*athena.Options)) (*athena.UpdateNotebookMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateNotebookMetadataInput, ...func(*athena.Options)) *athena.UpdateNotebookMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateNotebookMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateNotebookMetadataInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePreparedStatement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePreparedStatement(ctx context.Context, params *athena.UpdatePreparedStatementInput, optFns ...func(*athena.Options)) (*athena.UpdatePreparedStatementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePreparedStatement")
	}

	var r0 *athena.UpdatePreparedStatementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdatePreparedStatementInput, ...func(*athena.Options)) (*athena.UpdatePreparedStatementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdatePreparedStatementInput, ...func(*athena.Options)) *athena.UpdatePreparedStatementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdatePreparedStatementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdatePreparedStatementInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkGroup(ctx context.Context, params *athena.UpdateWorkGroupInput, optFns ...func(*athena.Options)) (*athena.UpdateWorkGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkGroup")
	}

	var r0 *athena.UpdateWorkGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateWorkGroupInput, ...func(*athena.Options)) (*athena.UpdateWorkGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *athena.UpdateWorkGroupInput, ...func(*athena.Options)) *athena.UpdateWorkGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*athena.UpdateWorkGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *athena.UpdateWorkGroupInput, ...func(*athena.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
