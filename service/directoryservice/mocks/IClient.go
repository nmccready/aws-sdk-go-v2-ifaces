// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	directoryservice "github.com/aws/aws-sdk-go-v2/service/directoryservice"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptSharedDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptSharedDirectory(ctx context.Context, params *directoryservice.AcceptSharedDirectoryInput, optFns ...func(*directoryservice.Options)) (*directoryservice.AcceptSharedDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptSharedDirectory")
	}

	var r0 *directoryservice.AcceptSharedDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.AcceptSharedDirectoryInput, ...func(*directoryservice.Options)) (*directoryservice.AcceptSharedDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.AcceptSharedDirectoryInput, ...func(*directoryservice.Options)) *directoryservice.AcceptSharedDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.AcceptSharedDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.AcceptSharedDirectoryInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddIpRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddIpRoutes(ctx context.Context, params *directoryservice.AddIpRoutesInput, optFns ...func(*directoryservice.Options)) (*directoryservice.AddIpRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddIpRoutes")
	}

	var r0 *directoryservice.AddIpRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.AddIpRoutesInput, ...func(*directoryservice.Options)) (*directoryservice.AddIpRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.AddIpRoutesInput, ...func(*directoryservice.Options)) *directoryservice.AddIpRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.AddIpRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.AddIpRoutesInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddRegion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddRegion(ctx context.Context, params *directoryservice.AddRegionInput, optFns ...func(*directoryservice.Options)) (*directoryservice.AddRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddRegion")
	}

	var r0 *directoryservice.AddRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.AddRegionInput, ...func(*directoryservice.Options)) (*directoryservice.AddRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.AddRegionInput, ...func(*directoryservice.Options)) *directoryservice.AddRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.AddRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.AddRegionInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagsToResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTagsToResource(ctx context.Context, params *directoryservice.AddTagsToResourceInput, optFns ...func(*directoryservice.Options)) (*directoryservice.AddTagsToResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToResource")
	}

	var r0 *directoryservice.AddTagsToResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.AddTagsToResourceInput, ...func(*directoryservice.Options)) (*directoryservice.AddTagsToResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.AddTagsToResourceInput, ...func(*directoryservice.Options)) *directoryservice.AddTagsToResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.AddTagsToResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.AddTagsToResourceInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelSchemaExtension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelSchemaExtension(ctx context.Context, params *directoryservice.CancelSchemaExtensionInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CancelSchemaExtensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelSchemaExtension")
	}

	var r0 *directoryservice.CancelSchemaExtensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CancelSchemaExtensionInput, ...func(*directoryservice.Options)) (*directoryservice.CancelSchemaExtensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CancelSchemaExtensionInput, ...func(*directoryservice.Options)) *directoryservice.CancelSchemaExtensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CancelSchemaExtensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CancelSchemaExtensionInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ConnectDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConnectDirectory(ctx context.Context, params *directoryservice.ConnectDirectoryInput, optFns ...func(*directoryservice.Options)) (*directoryservice.ConnectDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConnectDirectory")
	}

	var r0 *directoryservice.ConnectDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ConnectDirectoryInput, ...func(*directoryservice.Options)) (*directoryservice.ConnectDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ConnectDirectoryInput, ...func(*directoryservice.Options)) *directoryservice.ConnectDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.ConnectDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.ConnectDirectoryInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAlias(ctx context.Context, params *directoryservice.CreateAliasInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CreateAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlias")
	}

	var r0 *directoryservice.CreateAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateAliasInput, ...func(*directoryservice.Options)) (*directoryservice.CreateAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateAliasInput, ...func(*directoryservice.Options)) *directoryservice.CreateAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CreateAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CreateAliasInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComputer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComputer(ctx context.Context, params *directoryservice.CreateComputerInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CreateComputerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComputer")
	}

	var r0 *directoryservice.CreateComputerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateComputerInput, ...func(*directoryservice.Options)) (*directoryservice.CreateComputerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateComputerInput, ...func(*directoryservice.Options)) *directoryservice.CreateComputerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CreateComputerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CreateComputerInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConditionalForwarder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConditionalForwarder(ctx context.Context, params *directoryservice.CreateConditionalForwarderInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CreateConditionalForwarderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConditionalForwarder")
	}

	var r0 *directoryservice.CreateConditionalForwarderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateConditionalForwarderInput, ...func(*directoryservice.Options)) (*directoryservice.CreateConditionalForwarderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateConditionalForwarderInput, ...func(*directoryservice.Options)) *directoryservice.CreateConditionalForwarderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CreateConditionalForwarderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CreateConditionalForwarderInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDirectory(ctx context.Context, params *directoryservice.CreateDirectoryInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CreateDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectory")
	}

	var r0 *directoryservice.CreateDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateDirectoryInput, ...func(*directoryservice.Options)) (*directoryservice.CreateDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateDirectoryInput, ...func(*directoryservice.Options)) *directoryservice.CreateDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CreateDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CreateDirectoryInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLogSubscription(ctx context.Context, params *directoryservice.CreateLogSubscriptionInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CreateLogSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogSubscription")
	}

	var r0 *directoryservice.CreateLogSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateLogSubscriptionInput, ...func(*directoryservice.Options)) (*directoryservice.CreateLogSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateLogSubscriptionInput, ...func(*directoryservice.Options)) *directoryservice.CreateLogSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CreateLogSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CreateLogSubscriptionInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMicrosoftAD provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMicrosoftAD(ctx context.Context, params *directoryservice.CreateMicrosoftADInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CreateMicrosoftADOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMicrosoftAD")
	}

	var r0 *directoryservice.CreateMicrosoftADOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateMicrosoftADInput, ...func(*directoryservice.Options)) (*directoryservice.CreateMicrosoftADOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateMicrosoftADInput, ...func(*directoryservice.Options)) *directoryservice.CreateMicrosoftADOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CreateMicrosoftADOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CreateMicrosoftADInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSnapshot(ctx context.Context, params *directoryservice.CreateSnapshotInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CreateSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSnapshot")
	}

	var r0 *directoryservice.CreateSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateSnapshotInput, ...func(*directoryservice.Options)) (*directoryservice.CreateSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateSnapshotInput, ...func(*directoryservice.Options)) *directoryservice.CreateSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CreateSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CreateSnapshotInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrust provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrust(ctx context.Context, params *directoryservice.CreateTrustInput, optFns ...func(*directoryservice.Options)) (*directoryservice.CreateTrustOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrust")
	}

	var r0 *directoryservice.CreateTrustOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateTrustInput, ...func(*directoryservice.Options)) (*directoryservice.CreateTrustOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.CreateTrustInput, ...func(*directoryservice.Options)) *directoryservice.CreateTrustOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.CreateTrustOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.CreateTrustInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConditionalForwarder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConditionalForwarder(ctx context.Context, params *directoryservice.DeleteConditionalForwarderInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DeleteConditionalForwarderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConditionalForwarder")
	}

	var r0 *directoryservice.DeleteConditionalForwarderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteConditionalForwarderInput, ...func(*directoryservice.Options)) (*directoryservice.DeleteConditionalForwarderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteConditionalForwarderInput, ...func(*directoryservice.Options)) *directoryservice.DeleteConditionalForwarderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DeleteConditionalForwarderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DeleteConditionalForwarderInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDirectory(ctx context.Context, params *directoryservice.DeleteDirectoryInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DeleteDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDirectory")
	}

	var r0 *directoryservice.DeleteDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteDirectoryInput, ...func(*directoryservice.Options)) (*directoryservice.DeleteDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteDirectoryInput, ...func(*directoryservice.Options)) *directoryservice.DeleteDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DeleteDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DeleteDirectoryInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLogSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLogSubscription(ctx context.Context, params *directoryservice.DeleteLogSubscriptionInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DeleteLogSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLogSubscription")
	}

	var r0 *directoryservice.DeleteLogSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteLogSubscriptionInput, ...func(*directoryservice.Options)) (*directoryservice.DeleteLogSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteLogSubscriptionInput, ...func(*directoryservice.Options)) *directoryservice.DeleteLogSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DeleteLogSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DeleteLogSubscriptionInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSnapshot(ctx context.Context, params *directoryservice.DeleteSnapshotInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DeleteSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSnapshot")
	}

	var r0 *directoryservice.DeleteSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteSnapshotInput, ...func(*directoryservice.Options)) (*directoryservice.DeleteSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteSnapshotInput, ...func(*directoryservice.Options)) *directoryservice.DeleteSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DeleteSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DeleteSnapshotInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrust provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrust(ctx context.Context, params *directoryservice.DeleteTrustInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DeleteTrustOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrust")
	}

	var r0 *directoryservice.DeleteTrustOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteTrustInput, ...func(*directoryservice.Options)) (*directoryservice.DeleteTrustOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeleteTrustInput, ...func(*directoryservice.Options)) *directoryservice.DeleteTrustOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DeleteTrustOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DeleteTrustInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterCertificate(ctx context.Context, params *directoryservice.DeregisterCertificateInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DeregisterCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterCertificate")
	}

	var r0 *directoryservice.DeregisterCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeregisterCertificateInput, ...func(*directoryservice.Options)) (*directoryservice.DeregisterCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeregisterCertificateInput, ...func(*directoryservice.Options)) *directoryservice.DeregisterCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DeregisterCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DeregisterCertificateInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterEventTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterEventTopic(ctx context.Context, params *directoryservice.DeregisterEventTopicInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DeregisterEventTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterEventTopic")
	}

	var r0 *directoryservice.DeregisterEventTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeregisterEventTopicInput, ...func(*directoryservice.Options)) (*directoryservice.DeregisterEventTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DeregisterEventTopicInput, ...func(*directoryservice.Options)) *directoryservice.DeregisterEventTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DeregisterEventTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DeregisterEventTopicInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificate(ctx context.Context, params *directoryservice.DescribeCertificateInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificate")
	}

	var r0 *directoryservice.DescribeCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeCertificateInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeCertificateInput, ...func(*directoryservice.Options)) *directoryservice.DescribeCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeCertificateInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClientAuthenticationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeClientAuthenticationSettings(ctx context.Context, params *directoryservice.DescribeClientAuthenticationSettingsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeClientAuthenticationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClientAuthenticationSettings")
	}

	var r0 *directoryservice.DescribeClientAuthenticationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeClientAuthenticationSettingsInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeClientAuthenticationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeClientAuthenticationSettingsInput, ...func(*directoryservice.Options)) *directoryservice.DescribeClientAuthenticationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeClientAuthenticationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeClientAuthenticationSettingsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConditionalForwarders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConditionalForwarders(ctx context.Context, params *directoryservice.DescribeConditionalForwardersInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeConditionalForwardersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConditionalForwarders")
	}

	var r0 *directoryservice.DescribeConditionalForwardersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeConditionalForwardersInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeConditionalForwardersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeConditionalForwardersInput, ...func(*directoryservice.Options)) *directoryservice.DescribeConditionalForwardersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeConditionalForwardersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeConditionalForwardersInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDirectories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDirectories(ctx context.Context, params *directoryservice.DescribeDirectoriesInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeDirectoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDirectories")
	}

	var r0 *directoryservice.DescribeDirectoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeDirectoriesInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeDirectoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeDirectoriesInput, ...func(*directoryservice.Options)) *directoryservice.DescribeDirectoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeDirectoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeDirectoriesInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDomainControllers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDomainControllers(ctx context.Context, params *directoryservice.DescribeDomainControllersInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeDomainControllersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDomainControllers")
	}

	var r0 *directoryservice.DescribeDomainControllersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeDomainControllersInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeDomainControllersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeDomainControllersInput, ...func(*directoryservice.Options)) *directoryservice.DescribeDomainControllersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeDomainControllersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeDomainControllersInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventTopics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventTopics(ctx context.Context, params *directoryservice.DescribeEventTopicsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeEventTopicsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventTopics")
	}

	var r0 *directoryservice.DescribeEventTopicsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeEventTopicsInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeEventTopicsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeEventTopicsInput, ...func(*directoryservice.Options)) *directoryservice.DescribeEventTopicsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeEventTopicsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeEventTopicsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLDAPSSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLDAPSSettings(ctx context.Context, params *directoryservice.DescribeLDAPSSettingsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeLDAPSSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLDAPSSettings")
	}

	var r0 *directoryservice.DescribeLDAPSSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeLDAPSSettingsInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeLDAPSSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeLDAPSSettingsInput, ...func(*directoryservice.Options)) *directoryservice.DescribeLDAPSSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeLDAPSSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeLDAPSSettingsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegions(ctx context.Context, params *directoryservice.DescribeRegionsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeRegionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegions")
	}

	var r0 *directoryservice.DescribeRegionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeRegionsInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeRegionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeRegionsInput, ...func(*directoryservice.Options)) *directoryservice.DescribeRegionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeRegionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeRegionsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSettings(ctx context.Context, params *directoryservice.DescribeSettingsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSettings")
	}

	var r0 *directoryservice.DescribeSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeSettingsInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeSettingsInput, ...func(*directoryservice.Options)) *directoryservice.DescribeSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeSettingsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSharedDirectories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSharedDirectories(ctx context.Context, params *directoryservice.DescribeSharedDirectoriesInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeSharedDirectoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSharedDirectories")
	}

	var r0 *directoryservice.DescribeSharedDirectoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeSharedDirectoriesInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeSharedDirectoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeSharedDirectoriesInput, ...func(*directoryservice.Options)) *directoryservice.DescribeSharedDirectoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeSharedDirectoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeSharedDirectoriesInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSnapshots(ctx context.Context, params *directoryservice.DescribeSnapshotsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSnapshots")
	}

	var r0 *directoryservice.DescribeSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeSnapshotsInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeSnapshotsInput, ...func(*directoryservice.Options)) *directoryservice.DescribeSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeSnapshotsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrusts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTrusts(ctx context.Context, params *directoryservice.DescribeTrustsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeTrustsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTrusts")
	}

	var r0 *directoryservice.DescribeTrustsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeTrustsInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeTrustsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeTrustsInput, ...func(*directoryservice.Options)) *directoryservice.DescribeTrustsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeTrustsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeTrustsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUpdateDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUpdateDirectory(ctx context.Context, params *directoryservice.DescribeUpdateDirectoryInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DescribeUpdateDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUpdateDirectory")
	}

	var r0 *directoryservice.DescribeUpdateDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeUpdateDirectoryInput, ...func(*directoryservice.Options)) (*directoryservice.DescribeUpdateDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DescribeUpdateDirectoryInput, ...func(*directoryservice.Options)) *directoryservice.DescribeUpdateDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DescribeUpdateDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DescribeUpdateDirectoryInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableClientAuthentication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableClientAuthentication(ctx context.Context, params *directoryservice.DisableClientAuthenticationInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DisableClientAuthenticationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableClientAuthentication")
	}

	var r0 *directoryservice.DisableClientAuthenticationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DisableClientAuthenticationInput, ...func(*directoryservice.Options)) (*directoryservice.DisableClientAuthenticationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DisableClientAuthenticationInput, ...func(*directoryservice.Options)) *directoryservice.DisableClientAuthenticationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DisableClientAuthenticationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DisableClientAuthenticationInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableLDAPS provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableLDAPS(ctx context.Context, params *directoryservice.DisableLDAPSInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DisableLDAPSOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableLDAPS")
	}

	var r0 *directoryservice.DisableLDAPSOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DisableLDAPSInput, ...func(*directoryservice.Options)) (*directoryservice.DisableLDAPSOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DisableLDAPSInput, ...func(*directoryservice.Options)) *directoryservice.DisableLDAPSOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DisableLDAPSOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DisableLDAPSInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRadius provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableRadius(ctx context.Context, params *directoryservice.DisableRadiusInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DisableRadiusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableRadius")
	}

	var r0 *directoryservice.DisableRadiusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DisableRadiusInput, ...func(*directoryservice.Options)) (*directoryservice.DisableRadiusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DisableRadiusInput, ...func(*directoryservice.Options)) *directoryservice.DisableRadiusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DisableRadiusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DisableRadiusInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableSso provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableSso(ctx context.Context, params *directoryservice.DisableSsoInput, optFns ...func(*directoryservice.Options)) (*directoryservice.DisableSsoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableSso")
	}

	var r0 *directoryservice.DisableSsoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DisableSsoInput, ...func(*directoryservice.Options)) (*directoryservice.DisableSsoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.DisableSsoInput, ...func(*directoryservice.Options)) *directoryservice.DisableSsoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.DisableSsoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.DisableSsoInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableClientAuthentication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableClientAuthentication(ctx context.Context, params *directoryservice.EnableClientAuthenticationInput, optFns ...func(*directoryservice.Options)) (*directoryservice.EnableClientAuthenticationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableClientAuthentication")
	}

	var r0 *directoryservice.EnableClientAuthenticationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.EnableClientAuthenticationInput, ...func(*directoryservice.Options)) (*directoryservice.EnableClientAuthenticationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.EnableClientAuthenticationInput, ...func(*directoryservice.Options)) *directoryservice.EnableClientAuthenticationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.EnableClientAuthenticationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.EnableClientAuthenticationInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableLDAPS provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableLDAPS(ctx context.Context, params *directoryservice.EnableLDAPSInput, optFns ...func(*directoryservice.Options)) (*directoryservice.EnableLDAPSOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableLDAPS")
	}

	var r0 *directoryservice.EnableLDAPSOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.EnableLDAPSInput, ...func(*directoryservice.Options)) (*directoryservice.EnableLDAPSOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.EnableLDAPSInput, ...func(*directoryservice.Options)) *directoryservice.EnableLDAPSOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.EnableLDAPSOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.EnableLDAPSInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRadius provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableRadius(ctx context.Context, params *directoryservice.EnableRadiusInput, optFns ...func(*directoryservice.Options)) (*directoryservice.EnableRadiusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableRadius")
	}

	var r0 *directoryservice.EnableRadiusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.EnableRadiusInput, ...func(*directoryservice.Options)) (*directoryservice.EnableRadiusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.EnableRadiusInput, ...func(*directoryservice.Options)) *directoryservice.EnableRadiusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.EnableRadiusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.EnableRadiusInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableSso provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableSso(ctx context.Context, params *directoryservice.EnableSsoInput, optFns ...func(*directoryservice.Options)) (*directoryservice.EnableSsoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableSso")
	}

	var r0 *directoryservice.EnableSsoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.EnableSsoInput, ...func(*directoryservice.Options)) (*directoryservice.EnableSsoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.EnableSsoInput, ...func(*directoryservice.Options)) *directoryservice.EnableSsoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.EnableSsoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.EnableSsoInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDirectoryLimits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDirectoryLimits(ctx context.Context, params *directoryservice.GetDirectoryLimitsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.GetDirectoryLimitsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDirectoryLimits")
	}

	var r0 *directoryservice.GetDirectoryLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.GetDirectoryLimitsInput, ...func(*directoryservice.Options)) (*directoryservice.GetDirectoryLimitsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.GetDirectoryLimitsInput, ...func(*directoryservice.Options)) *directoryservice.GetDirectoryLimitsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.GetDirectoryLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.GetDirectoryLimitsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotLimits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSnapshotLimits(ctx context.Context, params *directoryservice.GetSnapshotLimitsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.GetSnapshotLimitsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotLimits")
	}

	var r0 *directoryservice.GetSnapshotLimitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.GetSnapshotLimitsInput, ...func(*directoryservice.Options)) (*directoryservice.GetSnapshotLimitsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.GetSnapshotLimitsInput, ...func(*directoryservice.Options)) *directoryservice.GetSnapshotLimitsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.GetSnapshotLimitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.GetSnapshotLimitsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCertificates(ctx context.Context, params *directoryservice.ListCertificatesInput, optFns ...func(*directoryservice.Options)) (*directoryservice.ListCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCertificates")
	}

	var r0 *directoryservice.ListCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListCertificatesInput, ...func(*directoryservice.Options)) (*directoryservice.ListCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListCertificatesInput, ...func(*directoryservice.Options)) *directoryservice.ListCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.ListCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.ListCertificatesInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIpRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIpRoutes(ctx context.Context, params *directoryservice.ListIpRoutesInput, optFns ...func(*directoryservice.Options)) (*directoryservice.ListIpRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIpRoutes")
	}

	var r0 *directoryservice.ListIpRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListIpRoutesInput, ...func(*directoryservice.Options)) (*directoryservice.ListIpRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListIpRoutesInput, ...func(*directoryservice.Options)) *directoryservice.ListIpRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.ListIpRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.ListIpRoutesInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLogSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLogSubscriptions(ctx context.Context, params *directoryservice.ListLogSubscriptionsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.ListLogSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLogSubscriptions")
	}

	var r0 *directoryservice.ListLogSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListLogSubscriptionsInput, ...func(*directoryservice.Options)) (*directoryservice.ListLogSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListLogSubscriptionsInput, ...func(*directoryservice.Options)) *directoryservice.ListLogSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.ListLogSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.ListLogSubscriptionsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSchemaExtensions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSchemaExtensions(ctx context.Context, params *directoryservice.ListSchemaExtensionsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.ListSchemaExtensionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSchemaExtensions")
	}

	var r0 *directoryservice.ListSchemaExtensionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListSchemaExtensionsInput, ...func(*directoryservice.Options)) (*directoryservice.ListSchemaExtensionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListSchemaExtensionsInput, ...func(*directoryservice.Options)) *directoryservice.ListSchemaExtensionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.ListSchemaExtensionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.ListSchemaExtensionsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *directoryservice.ListTagsForResourceInput, optFns ...func(*directoryservice.Options)) (*directoryservice.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *directoryservice.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListTagsForResourceInput, ...func(*directoryservice.Options)) (*directoryservice.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ListTagsForResourceInput, ...func(*directoryservice.Options)) *directoryservice.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.ListTagsForResourceInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() directoryservice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 directoryservice.Options
	if rf, ok := ret.Get(0).(func() directoryservice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(directoryservice.Options)
	}

	return r0
}

// RegisterCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterCertificate(ctx context.Context, params *directoryservice.RegisterCertificateInput, optFns ...func(*directoryservice.Options)) (*directoryservice.RegisterCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterCertificate")
	}

	var r0 *directoryservice.RegisterCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RegisterCertificateInput, ...func(*directoryservice.Options)) (*directoryservice.RegisterCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RegisterCertificateInput, ...func(*directoryservice.Options)) *directoryservice.RegisterCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.RegisterCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.RegisterCertificateInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterEventTopic provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterEventTopic(ctx context.Context, params *directoryservice.RegisterEventTopicInput, optFns ...func(*directoryservice.Options)) (*directoryservice.RegisterEventTopicOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEventTopic")
	}

	var r0 *directoryservice.RegisterEventTopicOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RegisterEventTopicInput, ...func(*directoryservice.Options)) (*directoryservice.RegisterEventTopicOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RegisterEventTopicInput, ...func(*directoryservice.Options)) *directoryservice.RegisterEventTopicOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.RegisterEventTopicOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.RegisterEventTopicInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectSharedDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectSharedDirectory(ctx context.Context, params *directoryservice.RejectSharedDirectoryInput, optFns ...func(*directoryservice.Options)) (*directoryservice.RejectSharedDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectSharedDirectory")
	}

	var r0 *directoryservice.RejectSharedDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RejectSharedDirectoryInput, ...func(*directoryservice.Options)) (*directoryservice.RejectSharedDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RejectSharedDirectoryInput, ...func(*directoryservice.Options)) *directoryservice.RejectSharedDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.RejectSharedDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.RejectSharedDirectoryInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveIpRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveIpRoutes(ctx context.Context, params *directoryservice.RemoveIpRoutesInput, optFns ...func(*directoryservice.Options)) (*directoryservice.RemoveIpRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveIpRoutes")
	}

	var r0 *directoryservice.RemoveIpRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RemoveIpRoutesInput, ...func(*directoryservice.Options)) (*directoryservice.RemoveIpRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RemoveIpRoutesInput, ...func(*directoryservice.Options)) *directoryservice.RemoveIpRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.RemoveIpRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.RemoveIpRoutesInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRegion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveRegion(ctx context.Context, params *directoryservice.RemoveRegionInput, optFns ...func(*directoryservice.Options)) (*directoryservice.RemoveRegionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRegion")
	}

	var r0 *directoryservice.RemoveRegionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RemoveRegionInput, ...func(*directoryservice.Options)) (*directoryservice.RemoveRegionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RemoveRegionInput, ...func(*directoryservice.Options)) *directoryservice.RemoveRegionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.RemoveRegionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.RemoveRegionInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTagsFromResource(ctx context.Context, params *directoryservice.RemoveTagsFromResourceInput, optFns ...func(*directoryservice.Options)) (*directoryservice.RemoveTagsFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagsFromResource")
	}

	var r0 *directoryservice.RemoveTagsFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RemoveTagsFromResourceInput, ...func(*directoryservice.Options)) (*directoryservice.RemoveTagsFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RemoveTagsFromResourceInput, ...func(*directoryservice.Options)) *directoryservice.RemoveTagsFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.RemoveTagsFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.RemoveTagsFromResourceInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetUserPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetUserPassword(ctx context.Context, params *directoryservice.ResetUserPasswordInput, optFns ...func(*directoryservice.Options)) (*directoryservice.ResetUserPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetUserPassword")
	}

	var r0 *directoryservice.ResetUserPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ResetUserPasswordInput, ...func(*directoryservice.Options)) (*directoryservice.ResetUserPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ResetUserPasswordInput, ...func(*directoryservice.Options)) *directoryservice.ResetUserPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.ResetUserPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.ResetUserPasswordInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreFromSnapshot(ctx context.Context, params *directoryservice.RestoreFromSnapshotInput, optFns ...func(*directoryservice.Options)) (*directoryservice.RestoreFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreFromSnapshot")
	}

	var r0 *directoryservice.RestoreFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RestoreFromSnapshotInput, ...func(*directoryservice.Options)) (*directoryservice.RestoreFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.RestoreFromSnapshotInput, ...func(*directoryservice.Options)) *directoryservice.RestoreFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.RestoreFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.RestoreFromSnapshotInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ShareDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ShareDirectory(ctx context.Context, params *directoryservice.ShareDirectoryInput, optFns ...func(*directoryservice.Options)) (*directoryservice.ShareDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ShareDirectory")
	}

	var r0 *directoryservice.ShareDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ShareDirectoryInput, ...func(*directoryservice.Options)) (*directoryservice.ShareDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.ShareDirectoryInput, ...func(*directoryservice.Options)) *directoryservice.ShareDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.ShareDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.ShareDirectoryInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSchemaExtension provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSchemaExtension(ctx context.Context, params *directoryservice.StartSchemaExtensionInput, optFns ...func(*directoryservice.Options)) (*directoryservice.StartSchemaExtensionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSchemaExtension")
	}

	var r0 *directoryservice.StartSchemaExtensionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.StartSchemaExtensionInput, ...func(*directoryservice.Options)) (*directoryservice.StartSchemaExtensionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.StartSchemaExtensionInput, ...func(*directoryservice.Options)) *directoryservice.StartSchemaExtensionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.StartSchemaExtensionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.StartSchemaExtensionInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnshareDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnshareDirectory(ctx context.Context, params *directoryservice.UnshareDirectoryInput, optFns ...func(*directoryservice.Options)) (*directoryservice.UnshareDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnshareDirectory")
	}

	var r0 *directoryservice.UnshareDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UnshareDirectoryInput, ...func(*directoryservice.Options)) (*directoryservice.UnshareDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UnshareDirectoryInput, ...func(*directoryservice.Options)) *directoryservice.UnshareDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.UnshareDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.UnshareDirectoryInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConditionalForwarder provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConditionalForwarder(ctx context.Context, params *directoryservice.UpdateConditionalForwarderInput, optFns ...func(*directoryservice.Options)) (*directoryservice.UpdateConditionalForwarderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConditionalForwarder")
	}

	var r0 *directoryservice.UpdateConditionalForwarderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateConditionalForwarderInput, ...func(*directoryservice.Options)) (*directoryservice.UpdateConditionalForwarderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateConditionalForwarderInput, ...func(*directoryservice.Options)) *directoryservice.UpdateConditionalForwarderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.UpdateConditionalForwarderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.UpdateConditionalForwarderInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDirectorySetup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDirectorySetup(ctx context.Context, params *directoryservice.UpdateDirectorySetupInput, optFns ...func(*directoryservice.Options)) (*directoryservice.UpdateDirectorySetupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDirectorySetup")
	}

	var r0 *directoryservice.UpdateDirectorySetupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateDirectorySetupInput, ...func(*directoryservice.Options)) (*directoryservice.UpdateDirectorySetupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateDirectorySetupInput, ...func(*directoryservice.Options)) *directoryservice.UpdateDirectorySetupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.UpdateDirectorySetupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.UpdateDirectorySetupInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNumberOfDomainControllers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNumberOfDomainControllers(ctx context.Context, params *directoryservice.UpdateNumberOfDomainControllersInput, optFns ...func(*directoryservice.Options)) (*directoryservice.UpdateNumberOfDomainControllersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNumberOfDomainControllers")
	}

	var r0 *directoryservice.UpdateNumberOfDomainControllersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateNumberOfDomainControllersInput, ...func(*directoryservice.Options)) (*directoryservice.UpdateNumberOfDomainControllersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateNumberOfDomainControllersInput, ...func(*directoryservice.Options)) *directoryservice.UpdateNumberOfDomainControllersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.UpdateNumberOfDomainControllersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.UpdateNumberOfDomainControllersInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRadius provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRadius(ctx context.Context, params *directoryservice.UpdateRadiusInput, optFns ...func(*directoryservice.Options)) (*directoryservice.UpdateRadiusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRadius")
	}

	var r0 *directoryservice.UpdateRadiusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateRadiusInput, ...func(*directoryservice.Options)) (*directoryservice.UpdateRadiusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateRadiusInput, ...func(*directoryservice.Options)) *directoryservice.UpdateRadiusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.UpdateRadiusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.UpdateRadiusInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSettings(ctx context.Context, params *directoryservice.UpdateSettingsInput, optFns ...func(*directoryservice.Options)) (*directoryservice.UpdateSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 *directoryservice.UpdateSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateSettingsInput, ...func(*directoryservice.Options)) (*directoryservice.UpdateSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateSettingsInput, ...func(*directoryservice.Options)) *directoryservice.UpdateSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.UpdateSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.UpdateSettingsInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrust provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrust(ctx context.Context, params *directoryservice.UpdateTrustInput, optFns ...func(*directoryservice.Options)) (*directoryservice.UpdateTrustOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrust")
	}

	var r0 *directoryservice.UpdateTrustOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateTrustInput, ...func(*directoryservice.Options)) (*directoryservice.UpdateTrustOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.UpdateTrustInput, ...func(*directoryservice.Options)) *directoryservice.UpdateTrustOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.UpdateTrustOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.UpdateTrustInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VerifyTrust provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) VerifyTrust(ctx context.Context, params *directoryservice.VerifyTrustInput, optFns ...func(*directoryservice.Options)) (*directoryservice.VerifyTrustOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for VerifyTrust")
	}

	var r0 *directoryservice.VerifyTrustOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.VerifyTrustInput, ...func(*directoryservice.Options)) (*directoryservice.VerifyTrustOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservice.VerifyTrustInput, ...func(*directoryservice.Options)) *directoryservice.VerifyTrustOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservice.VerifyTrustOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservice.VerifyTrustInput, ...func(*directoryservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
