// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	observabilityadmin "github.com/aws/aws-sdk-go-v2/service/observabilityadmin"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateTelemetryRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTelemetryRule(ctx context.Context, params *observabilityadmin.CreateTelemetryRuleInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.CreateTelemetryRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTelemetryRule")
	}

	var r0 *observabilityadmin.CreateTelemetryRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.CreateTelemetryRuleInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.CreateTelemetryRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.CreateTelemetryRuleInput, ...func(*observabilityadmin.Options)) *observabilityadmin.CreateTelemetryRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.CreateTelemetryRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.CreateTelemetryRuleInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTelemetryRuleForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTelemetryRuleForOrganization(ctx context.Context, params *observabilityadmin.CreateTelemetryRuleForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.CreateTelemetryRuleForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTelemetryRuleForOrganization")
	}

	var r0 *observabilityadmin.CreateTelemetryRuleForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.CreateTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.CreateTelemetryRuleForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.CreateTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.CreateTelemetryRuleForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.CreateTelemetryRuleForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.CreateTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTelemetryRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTelemetryRule(ctx context.Context, params *observabilityadmin.DeleteTelemetryRuleInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.DeleteTelemetryRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTelemetryRule")
	}

	var r0 *observabilityadmin.DeleteTelemetryRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.DeleteTelemetryRuleInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.DeleteTelemetryRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.DeleteTelemetryRuleInput, ...func(*observabilityadmin.Options)) *observabilityadmin.DeleteTelemetryRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.DeleteTelemetryRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.DeleteTelemetryRuleInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTelemetryRuleForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTelemetryRuleForOrganization(ctx context.Context, params *observabilityadmin.DeleteTelemetryRuleForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.DeleteTelemetryRuleForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTelemetryRuleForOrganization")
	}

	var r0 *observabilityadmin.DeleteTelemetryRuleForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.DeleteTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.DeleteTelemetryRuleForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.DeleteTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.DeleteTelemetryRuleForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.DeleteTelemetryRuleForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.DeleteTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTelemetryEvaluationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTelemetryEvaluationStatus(ctx context.Context, params *observabilityadmin.GetTelemetryEvaluationStatusInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.GetTelemetryEvaluationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTelemetryEvaluationStatus")
	}

	var r0 *observabilityadmin.GetTelemetryEvaluationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.GetTelemetryEvaluationStatusInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.GetTelemetryEvaluationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.GetTelemetryEvaluationStatusInput, ...func(*observabilityadmin.Options)) *observabilityadmin.GetTelemetryEvaluationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.GetTelemetryEvaluationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.GetTelemetryEvaluationStatusInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTelemetryEvaluationStatusForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTelemetryEvaluationStatusForOrganization(ctx context.Context, params *observabilityadmin.GetTelemetryEvaluationStatusForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.GetTelemetryEvaluationStatusForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTelemetryEvaluationStatusForOrganization")
	}

	var r0 *observabilityadmin.GetTelemetryEvaluationStatusForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.GetTelemetryEvaluationStatusForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.GetTelemetryEvaluationStatusForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.GetTelemetryEvaluationStatusForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.GetTelemetryEvaluationStatusForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.GetTelemetryEvaluationStatusForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.GetTelemetryEvaluationStatusForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTelemetryRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTelemetryRule(ctx context.Context, params *observabilityadmin.GetTelemetryRuleInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.GetTelemetryRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTelemetryRule")
	}

	var r0 *observabilityadmin.GetTelemetryRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.GetTelemetryRuleInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.GetTelemetryRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.GetTelemetryRuleInput, ...func(*observabilityadmin.Options)) *observabilityadmin.GetTelemetryRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.GetTelemetryRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.GetTelemetryRuleInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTelemetryRuleForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTelemetryRuleForOrganization(ctx context.Context, params *observabilityadmin.GetTelemetryRuleForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.GetTelemetryRuleForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTelemetryRuleForOrganization")
	}

	var r0 *observabilityadmin.GetTelemetryRuleForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.GetTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.GetTelemetryRuleForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.GetTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.GetTelemetryRuleForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.GetTelemetryRuleForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.GetTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceTelemetry provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceTelemetry(ctx context.Context, params *observabilityadmin.ListResourceTelemetryInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.ListResourceTelemetryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceTelemetry")
	}

	var r0 *observabilityadmin.ListResourceTelemetryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListResourceTelemetryInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.ListResourceTelemetryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListResourceTelemetryInput, ...func(*observabilityadmin.Options)) *observabilityadmin.ListResourceTelemetryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.ListResourceTelemetryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.ListResourceTelemetryInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceTelemetryForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceTelemetryForOrganization(ctx context.Context, params *observabilityadmin.ListResourceTelemetryForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.ListResourceTelemetryForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceTelemetryForOrganization")
	}

	var r0 *observabilityadmin.ListResourceTelemetryForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListResourceTelemetryForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.ListResourceTelemetryForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListResourceTelemetryForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.ListResourceTelemetryForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.ListResourceTelemetryForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.ListResourceTelemetryForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *observabilityadmin.ListTagsForResourceInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *observabilityadmin.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListTagsForResourceInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListTagsForResourceInput, ...func(*observabilityadmin.Options)) *observabilityadmin.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.ListTagsForResourceInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTelemetryRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTelemetryRules(ctx context.Context, params *observabilityadmin.ListTelemetryRulesInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.ListTelemetryRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTelemetryRules")
	}

	var r0 *observabilityadmin.ListTelemetryRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListTelemetryRulesInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.ListTelemetryRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListTelemetryRulesInput, ...func(*observabilityadmin.Options)) *observabilityadmin.ListTelemetryRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.ListTelemetryRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.ListTelemetryRulesInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTelemetryRulesForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTelemetryRulesForOrganization(ctx context.Context, params *observabilityadmin.ListTelemetryRulesForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.ListTelemetryRulesForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTelemetryRulesForOrganization")
	}

	var r0 *observabilityadmin.ListTelemetryRulesForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListTelemetryRulesForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.ListTelemetryRulesForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.ListTelemetryRulesForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.ListTelemetryRulesForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.ListTelemetryRulesForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.ListTelemetryRulesForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() observabilityadmin.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 observabilityadmin.Options
	if rf, ok := ret.Get(0).(func() observabilityadmin.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(observabilityadmin.Options)
	}

	return r0
}

// StartTelemetryEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTelemetryEvaluation(ctx context.Context, params *observabilityadmin.StartTelemetryEvaluationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.StartTelemetryEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTelemetryEvaluation")
	}

	var r0 *observabilityadmin.StartTelemetryEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.StartTelemetryEvaluationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.StartTelemetryEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.StartTelemetryEvaluationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.StartTelemetryEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.StartTelemetryEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.StartTelemetryEvaluationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTelemetryEvaluationForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTelemetryEvaluationForOrganization(ctx context.Context, params *observabilityadmin.StartTelemetryEvaluationForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.StartTelemetryEvaluationForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTelemetryEvaluationForOrganization")
	}

	var r0 *observabilityadmin.StartTelemetryEvaluationForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.StartTelemetryEvaluationForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.StartTelemetryEvaluationForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.StartTelemetryEvaluationForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.StartTelemetryEvaluationForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.StartTelemetryEvaluationForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.StartTelemetryEvaluationForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTelemetryEvaluation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopTelemetryEvaluation(ctx context.Context, params *observabilityadmin.StopTelemetryEvaluationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.StopTelemetryEvaluationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopTelemetryEvaluation")
	}

	var r0 *observabilityadmin.StopTelemetryEvaluationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.StopTelemetryEvaluationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.StopTelemetryEvaluationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.StopTelemetryEvaluationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.StopTelemetryEvaluationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.StopTelemetryEvaluationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.StopTelemetryEvaluationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTelemetryEvaluationForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopTelemetryEvaluationForOrganization(ctx context.Context, params *observabilityadmin.StopTelemetryEvaluationForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.StopTelemetryEvaluationForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopTelemetryEvaluationForOrganization")
	}

	var r0 *observabilityadmin.StopTelemetryEvaluationForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.StopTelemetryEvaluationForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.StopTelemetryEvaluationForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.StopTelemetryEvaluationForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.StopTelemetryEvaluationForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.StopTelemetryEvaluationForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.StopTelemetryEvaluationForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *observabilityadmin.TagResourceInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *observabilityadmin.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.TagResourceInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.TagResourceInput, ...func(*observabilityadmin.Options)) *observabilityadmin.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.TagResourceInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *observabilityadmin.UntagResourceInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *observabilityadmin.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.UntagResourceInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.UntagResourceInput, ...func(*observabilityadmin.Options)) *observabilityadmin.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.UntagResourceInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTelemetryRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTelemetryRule(ctx context.Context, params *observabilityadmin.UpdateTelemetryRuleInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.UpdateTelemetryRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTelemetryRule")
	}

	var r0 *observabilityadmin.UpdateTelemetryRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.UpdateTelemetryRuleInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.UpdateTelemetryRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.UpdateTelemetryRuleInput, ...func(*observabilityadmin.Options)) *observabilityadmin.UpdateTelemetryRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.UpdateTelemetryRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.UpdateTelemetryRuleInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTelemetryRuleForOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTelemetryRuleForOrganization(ctx context.Context, params *observabilityadmin.UpdateTelemetryRuleForOrganizationInput, optFns ...func(*observabilityadmin.Options)) (*observabilityadmin.UpdateTelemetryRuleForOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTelemetryRuleForOrganization")
	}

	var r0 *observabilityadmin.UpdateTelemetryRuleForOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.UpdateTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) (*observabilityadmin.UpdateTelemetryRuleForOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *observabilityadmin.UpdateTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) *observabilityadmin.UpdateTelemetryRuleForOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observabilityadmin.UpdateTelemetryRuleForOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *observabilityadmin.UpdateTelemetryRuleForOrganizationInput, ...func(*observabilityadmin.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
