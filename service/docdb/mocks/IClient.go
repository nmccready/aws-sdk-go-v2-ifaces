// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	docdb "github.com/aws/aws-sdk-go-v2/service/docdb"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddSourceIdentifierToSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddSourceIdentifierToSubscription(ctx context.Context, params *docdb.AddSourceIdentifierToSubscriptionInput, optFns ...func(*docdb.Options)) (*docdb.AddSourceIdentifierToSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddSourceIdentifierToSubscription")
	}

	var r0 *docdb.AddSourceIdentifierToSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.AddSourceIdentifierToSubscriptionInput, ...func(*docdb.Options)) (*docdb.AddSourceIdentifierToSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.AddSourceIdentifierToSubscriptionInput, ...func(*docdb.Options)) *docdb.AddSourceIdentifierToSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.AddSourceIdentifierToSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.AddSourceIdentifierToSubscriptionInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagsToResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTagsToResource(ctx context.Context, params *docdb.AddTagsToResourceInput, optFns ...func(*docdb.Options)) (*docdb.AddTagsToResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToResource")
	}

	var r0 *docdb.AddTagsToResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.AddTagsToResourceInput, ...func(*docdb.Options)) (*docdb.AddTagsToResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.AddTagsToResourceInput, ...func(*docdb.Options)) *docdb.AddTagsToResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.AddTagsToResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.AddTagsToResourceInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyPendingMaintenanceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ApplyPendingMaintenanceAction(ctx context.Context, params *docdb.ApplyPendingMaintenanceActionInput, optFns ...func(*docdb.Options)) (*docdb.ApplyPendingMaintenanceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyPendingMaintenanceAction")
	}

	var r0 *docdb.ApplyPendingMaintenanceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ApplyPendingMaintenanceActionInput, ...func(*docdb.Options)) (*docdb.ApplyPendingMaintenanceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ApplyPendingMaintenanceActionInput, ...func(*docdb.Options)) *docdb.ApplyPendingMaintenanceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ApplyPendingMaintenanceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ApplyPendingMaintenanceActionInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBClusterParameterGroup(ctx context.Context, params *docdb.CopyDBClusterParameterGroupInput, optFns ...func(*docdb.Options)) (*docdb.CopyDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBClusterParameterGroup")
	}

	var r0 *docdb.CopyDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CopyDBClusterParameterGroupInput, ...func(*docdb.Options)) (*docdb.CopyDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CopyDBClusterParameterGroupInput, ...func(*docdb.Options)) *docdb.CopyDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CopyDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CopyDBClusterParameterGroupInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBClusterSnapshot(ctx context.Context, params *docdb.CopyDBClusterSnapshotInput, optFns ...func(*docdb.Options)) (*docdb.CopyDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBClusterSnapshot")
	}

	var r0 *docdb.CopyDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CopyDBClusterSnapshotInput, ...func(*docdb.Options)) (*docdb.CopyDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CopyDBClusterSnapshotInput, ...func(*docdb.Options)) *docdb.CopyDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CopyDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CopyDBClusterSnapshotInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBCluster(ctx context.Context, params *docdb.CreateDBClusterInput, optFns ...func(*docdb.Options)) (*docdb.CreateDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBCluster")
	}

	var r0 *docdb.CreateDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBClusterInput, ...func(*docdb.Options)) (*docdb.CreateDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBClusterInput, ...func(*docdb.Options)) *docdb.CreateDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CreateDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CreateDBClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBClusterParameterGroup(ctx context.Context, params *docdb.CreateDBClusterParameterGroupInput, optFns ...func(*docdb.Options)) (*docdb.CreateDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBClusterParameterGroup")
	}

	var r0 *docdb.CreateDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBClusterParameterGroupInput, ...func(*docdb.Options)) (*docdb.CreateDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBClusterParameterGroupInput, ...func(*docdb.Options)) *docdb.CreateDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CreateDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CreateDBClusterParameterGroupInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBClusterSnapshot(ctx context.Context, params *docdb.CreateDBClusterSnapshotInput, optFns ...func(*docdb.Options)) (*docdb.CreateDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBClusterSnapshot")
	}

	var r0 *docdb.CreateDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBClusterSnapshotInput, ...func(*docdb.Options)) (*docdb.CreateDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBClusterSnapshotInput, ...func(*docdb.Options)) *docdb.CreateDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CreateDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CreateDBClusterSnapshotInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBInstance(ctx context.Context, params *docdb.CreateDBInstanceInput, optFns ...func(*docdb.Options)) (*docdb.CreateDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBInstance")
	}

	var r0 *docdb.CreateDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBInstanceInput, ...func(*docdb.Options)) (*docdb.CreateDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBInstanceInput, ...func(*docdb.Options)) *docdb.CreateDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CreateDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CreateDBInstanceInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBSubnetGroup(ctx context.Context, params *docdb.CreateDBSubnetGroupInput, optFns ...func(*docdb.Options)) (*docdb.CreateDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBSubnetGroup")
	}

	var r0 *docdb.CreateDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBSubnetGroupInput, ...func(*docdb.Options)) (*docdb.CreateDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateDBSubnetGroupInput, ...func(*docdb.Options)) *docdb.CreateDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CreateDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CreateDBSubnetGroupInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventSubscription(ctx context.Context, params *docdb.CreateEventSubscriptionInput, optFns ...func(*docdb.Options)) (*docdb.CreateEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventSubscription")
	}

	var r0 *docdb.CreateEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateEventSubscriptionInput, ...func(*docdb.Options)) (*docdb.CreateEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateEventSubscriptionInput, ...func(*docdb.Options)) *docdb.CreateEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CreateEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CreateEventSubscriptionInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGlobalCluster(ctx context.Context, params *docdb.CreateGlobalClusterInput, optFns ...func(*docdb.Options)) (*docdb.CreateGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlobalCluster")
	}

	var r0 *docdb.CreateGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateGlobalClusterInput, ...func(*docdb.Options)) (*docdb.CreateGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.CreateGlobalClusterInput, ...func(*docdb.Options)) *docdb.CreateGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.CreateGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.CreateGlobalClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBCluster(ctx context.Context, params *docdb.DeleteDBClusterInput, optFns ...func(*docdb.Options)) (*docdb.DeleteDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBCluster")
	}

	var r0 *docdb.DeleteDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBClusterInput, ...func(*docdb.Options)) (*docdb.DeleteDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBClusterInput, ...func(*docdb.Options)) *docdb.DeleteDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DeleteDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DeleteDBClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterParameterGroup(ctx context.Context, params *docdb.DeleteDBClusterParameterGroupInput, optFns ...func(*docdb.Options)) (*docdb.DeleteDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterParameterGroup")
	}

	var r0 *docdb.DeleteDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBClusterParameterGroupInput, ...func(*docdb.Options)) (*docdb.DeleteDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBClusterParameterGroupInput, ...func(*docdb.Options)) *docdb.DeleteDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DeleteDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DeleteDBClusterParameterGroupInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterSnapshot(ctx context.Context, params *docdb.DeleteDBClusterSnapshotInput, optFns ...func(*docdb.Options)) (*docdb.DeleteDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterSnapshot")
	}

	var r0 *docdb.DeleteDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBClusterSnapshotInput, ...func(*docdb.Options)) (*docdb.DeleteDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBClusterSnapshotInput, ...func(*docdb.Options)) *docdb.DeleteDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DeleteDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DeleteDBClusterSnapshotInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBInstance(ctx context.Context, params *docdb.DeleteDBInstanceInput, optFns ...func(*docdb.Options)) (*docdb.DeleteDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBInstance")
	}

	var r0 *docdb.DeleteDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBInstanceInput, ...func(*docdb.Options)) (*docdb.DeleteDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBInstanceInput, ...func(*docdb.Options)) *docdb.DeleteDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DeleteDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DeleteDBInstanceInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBSubnetGroup(ctx context.Context, params *docdb.DeleteDBSubnetGroupInput, optFns ...func(*docdb.Options)) (*docdb.DeleteDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBSubnetGroup")
	}

	var r0 *docdb.DeleteDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBSubnetGroupInput, ...func(*docdb.Options)) (*docdb.DeleteDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteDBSubnetGroupInput, ...func(*docdb.Options)) *docdb.DeleteDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DeleteDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DeleteDBSubnetGroupInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventSubscription(ctx context.Context, params *docdb.DeleteEventSubscriptionInput, optFns ...func(*docdb.Options)) (*docdb.DeleteEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventSubscription")
	}

	var r0 *docdb.DeleteEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteEventSubscriptionInput, ...func(*docdb.Options)) (*docdb.DeleteEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteEventSubscriptionInput, ...func(*docdb.Options)) *docdb.DeleteEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DeleteEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DeleteEventSubscriptionInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGlobalCluster(ctx context.Context, params *docdb.DeleteGlobalClusterInput, optFns ...func(*docdb.Options)) (*docdb.DeleteGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlobalCluster")
	}

	var r0 *docdb.DeleteGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteGlobalClusterInput, ...func(*docdb.Options)) (*docdb.DeleteGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DeleteGlobalClusterInput, ...func(*docdb.Options)) *docdb.DeleteGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DeleteGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DeleteGlobalClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificates(ctx context.Context, params *docdb.DescribeCertificatesInput, optFns ...func(*docdb.Options)) (*docdb.DescribeCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificates")
	}

	var r0 *docdb.DescribeCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeCertificatesInput, ...func(*docdb.Options)) (*docdb.DescribeCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeCertificatesInput, ...func(*docdb.Options)) *docdb.DescribeCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeCertificatesInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterParameterGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterParameterGroups(ctx context.Context, params *docdb.DescribeDBClusterParameterGroupsInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBClusterParameterGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterParameterGroups")
	}

	var r0 *docdb.DescribeDBClusterParameterGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClusterParameterGroupsInput, ...func(*docdb.Options)) (*docdb.DescribeDBClusterParameterGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClusterParameterGroupsInput, ...func(*docdb.Options)) *docdb.DescribeDBClusterParameterGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeDBClusterParameterGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeDBClusterParameterGroupsInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterParameters(ctx context.Context, params *docdb.DescribeDBClusterParametersInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBClusterParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterParameters")
	}

	var r0 *docdb.DescribeDBClusterParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClusterParametersInput, ...func(*docdb.Options)) (*docdb.DescribeDBClusterParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClusterParametersInput, ...func(*docdb.Options)) *docdb.DescribeDBClusterParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeDBClusterParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeDBClusterParametersInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterSnapshotAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterSnapshotAttributes(ctx context.Context, params *docdb.DescribeDBClusterSnapshotAttributesInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterSnapshotAttributes")
	}

	var r0 *docdb.DescribeDBClusterSnapshotAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClusterSnapshotAttributesInput, ...func(*docdb.Options)) (*docdb.DescribeDBClusterSnapshotAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClusterSnapshotAttributesInput, ...func(*docdb.Options)) *docdb.DescribeDBClusterSnapshotAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeDBClusterSnapshotAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeDBClusterSnapshotAttributesInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterSnapshots(ctx context.Context, params *docdb.DescribeDBClusterSnapshotsInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBClusterSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterSnapshots")
	}

	var r0 *docdb.DescribeDBClusterSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClusterSnapshotsInput, ...func(*docdb.Options)) (*docdb.DescribeDBClusterSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClusterSnapshotsInput, ...func(*docdb.Options)) *docdb.DescribeDBClusterSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeDBClusterSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeDBClusterSnapshotsInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusters(ctx context.Context, params *docdb.DescribeDBClustersInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusters")
	}

	var r0 *docdb.DescribeDBClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClustersInput, ...func(*docdb.Options)) (*docdb.DescribeDBClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBClustersInput, ...func(*docdb.Options)) *docdb.DescribeDBClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeDBClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeDBClustersInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBEngineVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBEngineVersions(ctx context.Context, params *docdb.DescribeDBEngineVersionsInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBEngineVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBEngineVersions")
	}

	var r0 *docdb.DescribeDBEngineVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBEngineVersionsInput, ...func(*docdb.Options)) (*docdb.DescribeDBEngineVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBEngineVersionsInput, ...func(*docdb.Options)) *docdb.DescribeDBEngineVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeDBEngineVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeDBEngineVersionsInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBInstances(ctx context.Context, params *docdb.DescribeDBInstancesInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBInstances")
	}

	var r0 *docdb.DescribeDBInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBInstancesInput, ...func(*docdb.Options)) (*docdb.DescribeDBInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBInstancesInput, ...func(*docdb.Options)) *docdb.DescribeDBInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeDBInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeDBInstancesInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBSubnetGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBSubnetGroups(ctx context.Context, params *docdb.DescribeDBSubnetGroupsInput, optFns ...func(*docdb.Options)) (*docdb.DescribeDBSubnetGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBSubnetGroups")
	}

	var r0 *docdb.DescribeDBSubnetGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBSubnetGroupsInput, ...func(*docdb.Options)) (*docdb.DescribeDBSubnetGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeDBSubnetGroupsInput, ...func(*docdb.Options)) *docdb.DescribeDBSubnetGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeDBSubnetGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeDBSubnetGroupsInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEngineDefaultClusterParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEngineDefaultClusterParameters(ctx context.Context, params *docdb.DescribeEngineDefaultClusterParametersInput, optFns ...func(*docdb.Options)) (*docdb.DescribeEngineDefaultClusterParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEngineDefaultClusterParameters")
	}

	var r0 *docdb.DescribeEngineDefaultClusterParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeEngineDefaultClusterParametersInput, ...func(*docdb.Options)) (*docdb.DescribeEngineDefaultClusterParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeEngineDefaultClusterParametersInput, ...func(*docdb.Options)) *docdb.DescribeEngineDefaultClusterParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeEngineDefaultClusterParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeEngineDefaultClusterParametersInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventCategories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventCategories(ctx context.Context, params *docdb.DescribeEventCategoriesInput, optFns ...func(*docdb.Options)) (*docdb.DescribeEventCategoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventCategories")
	}

	var r0 *docdb.DescribeEventCategoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeEventCategoriesInput, ...func(*docdb.Options)) (*docdb.DescribeEventCategoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeEventCategoriesInput, ...func(*docdb.Options)) *docdb.DescribeEventCategoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeEventCategoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeEventCategoriesInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventSubscriptions(ctx context.Context, params *docdb.DescribeEventSubscriptionsInput, optFns ...func(*docdb.Options)) (*docdb.DescribeEventSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventSubscriptions")
	}

	var r0 *docdb.DescribeEventSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeEventSubscriptionsInput, ...func(*docdb.Options)) (*docdb.DescribeEventSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeEventSubscriptionsInput, ...func(*docdb.Options)) *docdb.DescribeEventSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeEventSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeEventSubscriptionsInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEvents(ctx context.Context, params *docdb.DescribeEventsInput, optFns ...func(*docdb.Options)) (*docdb.DescribeEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEvents")
	}

	var r0 *docdb.DescribeEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeEventsInput, ...func(*docdb.Options)) (*docdb.DescribeEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeEventsInput, ...func(*docdb.Options)) *docdb.DescribeEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeEventsInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGlobalClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGlobalClusters(ctx context.Context, params *docdb.DescribeGlobalClustersInput, optFns ...func(*docdb.Options)) (*docdb.DescribeGlobalClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGlobalClusters")
	}

	var r0 *docdb.DescribeGlobalClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeGlobalClustersInput, ...func(*docdb.Options)) (*docdb.DescribeGlobalClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeGlobalClustersInput, ...func(*docdb.Options)) *docdb.DescribeGlobalClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeGlobalClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeGlobalClustersInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrderableDBInstanceOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrderableDBInstanceOptions(ctx context.Context, params *docdb.DescribeOrderableDBInstanceOptionsInput, optFns ...func(*docdb.Options)) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrderableDBInstanceOptions")
	}

	var r0 *docdb.DescribeOrderableDBInstanceOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeOrderableDBInstanceOptionsInput, ...func(*docdb.Options)) (*docdb.DescribeOrderableDBInstanceOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribeOrderableDBInstanceOptionsInput, ...func(*docdb.Options)) *docdb.DescribeOrderableDBInstanceOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribeOrderableDBInstanceOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribeOrderableDBInstanceOptionsInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePendingMaintenanceActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePendingMaintenanceActions(ctx context.Context, params *docdb.DescribePendingMaintenanceActionsInput, optFns ...func(*docdb.Options)) (*docdb.DescribePendingMaintenanceActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePendingMaintenanceActions")
	}

	var r0 *docdb.DescribePendingMaintenanceActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribePendingMaintenanceActionsInput, ...func(*docdb.Options)) (*docdb.DescribePendingMaintenanceActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.DescribePendingMaintenanceActionsInput, ...func(*docdb.Options)) *docdb.DescribePendingMaintenanceActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.DescribePendingMaintenanceActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.DescribePendingMaintenanceActionsInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FailoverDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FailoverDBCluster(ctx context.Context, params *docdb.FailoverDBClusterInput, optFns ...func(*docdb.Options)) (*docdb.FailoverDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FailoverDBCluster")
	}

	var r0 *docdb.FailoverDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.FailoverDBClusterInput, ...func(*docdb.Options)) (*docdb.FailoverDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.FailoverDBClusterInput, ...func(*docdb.Options)) *docdb.FailoverDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.FailoverDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.FailoverDBClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *docdb.ListTagsForResourceInput, optFns ...func(*docdb.Options)) (*docdb.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *docdb.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ListTagsForResourceInput, ...func(*docdb.Options)) (*docdb.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ListTagsForResourceInput, ...func(*docdb.Options)) *docdb.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ListTagsForResourceInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBCluster(ctx context.Context, params *docdb.ModifyDBClusterInput, optFns ...func(*docdb.Options)) (*docdb.ModifyDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBCluster")
	}

	var r0 *docdb.ModifyDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBClusterInput, ...func(*docdb.Options)) (*docdb.ModifyDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBClusterInput, ...func(*docdb.Options)) *docdb.ModifyDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ModifyDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ModifyDBClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBClusterParameterGroup(ctx context.Context, params *docdb.ModifyDBClusterParameterGroupInput, optFns ...func(*docdb.Options)) (*docdb.ModifyDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBClusterParameterGroup")
	}

	var r0 *docdb.ModifyDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBClusterParameterGroupInput, ...func(*docdb.Options)) (*docdb.ModifyDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBClusterParameterGroupInput, ...func(*docdb.Options)) *docdb.ModifyDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ModifyDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ModifyDBClusterParameterGroupInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBClusterSnapshotAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBClusterSnapshotAttribute(ctx context.Context, params *docdb.ModifyDBClusterSnapshotAttributeInput, optFns ...func(*docdb.Options)) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBClusterSnapshotAttribute")
	}

	var r0 *docdb.ModifyDBClusterSnapshotAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBClusterSnapshotAttributeInput, ...func(*docdb.Options)) (*docdb.ModifyDBClusterSnapshotAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBClusterSnapshotAttributeInput, ...func(*docdb.Options)) *docdb.ModifyDBClusterSnapshotAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ModifyDBClusterSnapshotAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ModifyDBClusterSnapshotAttributeInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBInstance(ctx context.Context, params *docdb.ModifyDBInstanceInput, optFns ...func(*docdb.Options)) (*docdb.ModifyDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBInstance")
	}

	var r0 *docdb.ModifyDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBInstanceInput, ...func(*docdb.Options)) (*docdb.ModifyDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBInstanceInput, ...func(*docdb.Options)) *docdb.ModifyDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ModifyDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ModifyDBInstanceInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBSubnetGroup(ctx context.Context, params *docdb.ModifyDBSubnetGroupInput, optFns ...func(*docdb.Options)) (*docdb.ModifyDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBSubnetGroup")
	}

	var r0 *docdb.ModifyDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBSubnetGroupInput, ...func(*docdb.Options)) (*docdb.ModifyDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyDBSubnetGroupInput, ...func(*docdb.Options)) *docdb.ModifyDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ModifyDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ModifyDBSubnetGroupInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyEventSubscription(ctx context.Context, params *docdb.ModifyEventSubscriptionInput, optFns ...func(*docdb.Options)) (*docdb.ModifyEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyEventSubscription")
	}

	var r0 *docdb.ModifyEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyEventSubscriptionInput, ...func(*docdb.Options)) (*docdb.ModifyEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyEventSubscriptionInput, ...func(*docdb.Options)) *docdb.ModifyEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ModifyEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ModifyEventSubscriptionInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyGlobalCluster(ctx context.Context, params *docdb.ModifyGlobalClusterInput, optFns ...func(*docdb.Options)) (*docdb.ModifyGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyGlobalCluster")
	}

	var r0 *docdb.ModifyGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyGlobalClusterInput, ...func(*docdb.Options)) (*docdb.ModifyGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ModifyGlobalClusterInput, ...func(*docdb.Options)) *docdb.ModifyGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ModifyGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ModifyGlobalClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() docdb.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 docdb.Options
	if rf, ok := ret.Get(0).(func() docdb.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(docdb.Options)
	}

	return r0
}

// RebootDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootDBInstance(ctx context.Context, params *docdb.RebootDBInstanceInput, optFns ...func(*docdb.Options)) (*docdb.RebootDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootDBInstance")
	}

	var r0 *docdb.RebootDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RebootDBInstanceInput, ...func(*docdb.Options)) (*docdb.RebootDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RebootDBInstanceInput, ...func(*docdb.Options)) *docdb.RebootDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.RebootDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.RebootDBInstanceInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFromGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveFromGlobalCluster(ctx context.Context, params *docdb.RemoveFromGlobalClusterInput, optFns ...func(*docdb.Options)) (*docdb.RemoveFromGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromGlobalCluster")
	}

	var r0 *docdb.RemoveFromGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RemoveFromGlobalClusterInput, ...func(*docdb.Options)) (*docdb.RemoveFromGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RemoveFromGlobalClusterInput, ...func(*docdb.Options)) *docdb.RemoveFromGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.RemoveFromGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.RemoveFromGlobalClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSourceIdentifierFromSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveSourceIdentifierFromSubscription(ctx context.Context, params *docdb.RemoveSourceIdentifierFromSubscriptionInput, optFns ...func(*docdb.Options)) (*docdb.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSourceIdentifierFromSubscription")
	}

	var r0 *docdb.RemoveSourceIdentifierFromSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RemoveSourceIdentifierFromSubscriptionInput, ...func(*docdb.Options)) (*docdb.RemoveSourceIdentifierFromSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RemoveSourceIdentifierFromSubscriptionInput, ...func(*docdb.Options)) *docdb.RemoveSourceIdentifierFromSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.RemoveSourceIdentifierFromSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.RemoveSourceIdentifierFromSubscriptionInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTagsFromResource(ctx context.Context, params *docdb.RemoveTagsFromResourceInput, optFns ...func(*docdb.Options)) (*docdb.RemoveTagsFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagsFromResource")
	}

	var r0 *docdb.RemoveTagsFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RemoveTagsFromResourceInput, ...func(*docdb.Options)) (*docdb.RemoveTagsFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RemoveTagsFromResourceInput, ...func(*docdb.Options)) *docdb.RemoveTagsFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.RemoveTagsFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.RemoveTagsFromResourceInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetDBClusterParameterGroup(ctx context.Context, params *docdb.ResetDBClusterParameterGroupInput, optFns ...func(*docdb.Options)) (*docdb.ResetDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetDBClusterParameterGroup")
	}

	var r0 *docdb.ResetDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ResetDBClusterParameterGroupInput, ...func(*docdb.Options)) (*docdb.ResetDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.ResetDBClusterParameterGroupInput, ...func(*docdb.Options)) *docdb.ResetDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.ResetDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.ResetDBClusterParameterGroupInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBClusterFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBClusterFromSnapshot(ctx context.Context, params *docdb.RestoreDBClusterFromSnapshotInput, optFns ...func(*docdb.Options)) (*docdb.RestoreDBClusterFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBClusterFromSnapshot")
	}

	var r0 *docdb.RestoreDBClusterFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RestoreDBClusterFromSnapshotInput, ...func(*docdb.Options)) (*docdb.RestoreDBClusterFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RestoreDBClusterFromSnapshotInput, ...func(*docdb.Options)) *docdb.RestoreDBClusterFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.RestoreDBClusterFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.RestoreDBClusterFromSnapshotInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBClusterToPointInTime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBClusterToPointInTime(ctx context.Context, params *docdb.RestoreDBClusterToPointInTimeInput, optFns ...func(*docdb.Options)) (*docdb.RestoreDBClusterToPointInTimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBClusterToPointInTime")
	}

	var r0 *docdb.RestoreDBClusterToPointInTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RestoreDBClusterToPointInTimeInput, ...func(*docdb.Options)) (*docdb.RestoreDBClusterToPointInTimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.RestoreDBClusterToPointInTimeInput, ...func(*docdb.Options)) *docdb.RestoreDBClusterToPointInTimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.RestoreDBClusterToPointInTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.RestoreDBClusterToPointInTimeInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDBCluster(ctx context.Context, params *docdb.StartDBClusterInput, optFns ...func(*docdb.Options)) (*docdb.StartDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDBCluster")
	}

	var r0 *docdb.StartDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.StartDBClusterInput, ...func(*docdb.Options)) (*docdb.StartDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.StartDBClusterInput, ...func(*docdb.Options)) *docdb.StartDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.StartDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.StartDBClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDBCluster(ctx context.Context, params *docdb.StopDBClusterInput, optFns ...func(*docdb.Options)) (*docdb.StopDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDBCluster")
	}

	var r0 *docdb.StopDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.StopDBClusterInput, ...func(*docdb.Options)) (*docdb.StopDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.StopDBClusterInput, ...func(*docdb.Options)) *docdb.StopDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.StopDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.StopDBClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SwitchoverGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SwitchoverGlobalCluster(ctx context.Context, params *docdb.SwitchoverGlobalClusterInput, optFns ...func(*docdb.Options)) (*docdb.SwitchoverGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SwitchoverGlobalCluster")
	}

	var r0 *docdb.SwitchoverGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.SwitchoverGlobalClusterInput, ...func(*docdb.Options)) (*docdb.SwitchoverGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *docdb.SwitchoverGlobalClusterInput, ...func(*docdb.Options)) *docdb.SwitchoverGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*docdb.SwitchoverGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *docdb.SwitchoverGlobalClusterInput, ...func(*docdb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
