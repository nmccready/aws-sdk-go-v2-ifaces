// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	firehose "github.com/aws/aws-sdk-go-v2/service/firehose"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateDeliveryStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeliveryStream(ctx context.Context, params *firehose.CreateDeliveryStreamInput, optFns ...func(*firehose.Options)) (*firehose.CreateDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeliveryStream")
	}

	var r0 *firehose.CreateDeliveryStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.CreateDeliveryStreamInput, ...func(*firehose.Options)) (*firehose.CreateDeliveryStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.CreateDeliveryStreamInput, ...func(*firehose.Options)) *firehose.CreateDeliveryStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.CreateDeliveryStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.CreateDeliveryStreamInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeliveryStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeliveryStream(ctx context.Context, params *firehose.DeleteDeliveryStreamInput, optFns ...func(*firehose.Options)) (*firehose.DeleteDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeliveryStream")
	}

	var r0 *firehose.DeleteDeliveryStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.DeleteDeliveryStreamInput, ...func(*firehose.Options)) (*firehose.DeleteDeliveryStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.DeleteDeliveryStreamInput, ...func(*firehose.Options)) *firehose.DeleteDeliveryStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.DeleteDeliveryStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.DeleteDeliveryStreamInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeliveryStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDeliveryStream(ctx context.Context, params *firehose.DescribeDeliveryStreamInput, optFns ...func(*firehose.Options)) (*firehose.DescribeDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDeliveryStream")
	}

	var r0 *firehose.DescribeDeliveryStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.DescribeDeliveryStreamInput, ...func(*firehose.Options)) (*firehose.DescribeDeliveryStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.DescribeDeliveryStreamInput, ...func(*firehose.Options)) *firehose.DescribeDeliveryStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.DescribeDeliveryStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.DescribeDeliveryStreamInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeliveryStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeliveryStreams(ctx context.Context, params *firehose.ListDeliveryStreamsInput, optFns ...func(*firehose.Options)) (*firehose.ListDeliveryStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeliveryStreams")
	}

	var r0 *firehose.ListDeliveryStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.ListDeliveryStreamsInput, ...func(*firehose.Options)) (*firehose.ListDeliveryStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.ListDeliveryStreamsInput, ...func(*firehose.Options)) *firehose.ListDeliveryStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.ListDeliveryStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.ListDeliveryStreamsInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForDeliveryStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForDeliveryStream(ctx context.Context, params *firehose.ListTagsForDeliveryStreamInput, optFns ...func(*firehose.Options)) (*firehose.ListTagsForDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForDeliveryStream")
	}

	var r0 *firehose.ListTagsForDeliveryStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.ListTagsForDeliveryStreamInput, ...func(*firehose.Options)) (*firehose.ListTagsForDeliveryStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.ListTagsForDeliveryStreamInput, ...func(*firehose.Options)) *firehose.ListTagsForDeliveryStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.ListTagsForDeliveryStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.ListTagsForDeliveryStreamInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() firehose.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 firehose.Options
	if rf, ok := ret.Get(0).(func() firehose.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(firehose.Options)
	}

	return r0
}

// PutRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRecord(ctx context.Context, params *firehose.PutRecordInput, optFns ...func(*firehose.Options)) (*firehose.PutRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRecord")
	}

	var r0 *firehose.PutRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.PutRecordInput, ...func(*firehose.Options)) (*firehose.PutRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.PutRecordInput, ...func(*firehose.Options)) *firehose.PutRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.PutRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.PutRecordInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRecordBatch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRecordBatch(ctx context.Context, params *firehose.PutRecordBatchInput, optFns ...func(*firehose.Options)) (*firehose.PutRecordBatchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRecordBatch")
	}

	var r0 *firehose.PutRecordBatchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.PutRecordBatchInput, ...func(*firehose.Options)) (*firehose.PutRecordBatchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.PutRecordBatchInput, ...func(*firehose.Options)) *firehose.PutRecordBatchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.PutRecordBatchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.PutRecordBatchInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDeliveryStreamEncryption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDeliveryStreamEncryption(ctx context.Context, params *firehose.StartDeliveryStreamEncryptionInput, optFns ...func(*firehose.Options)) (*firehose.StartDeliveryStreamEncryptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDeliveryStreamEncryption")
	}

	var r0 *firehose.StartDeliveryStreamEncryptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.StartDeliveryStreamEncryptionInput, ...func(*firehose.Options)) (*firehose.StartDeliveryStreamEncryptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.StartDeliveryStreamEncryptionInput, ...func(*firehose.Options)) *firehose.StartDeliveryStreamEncryptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.StartDeliveryStreamEncryptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.StartDeliveryStreamEncryptionInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDeliveryStreamEncryption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDeliveryStreamEncryption(ctx context.Context, params *firehose.StopDeliveryStreamEncryptionInput, optFns ...func(*firehose.Options)) (*firehose.StopDeliveryStreamEncryptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDeliveryStreamEncryption")
	}

	var r0 *firehose.StopDeliveryStreamEncryptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.StopDeliveryStreamEncryptionInput, ...func(*firehose.Options)) (*firehose.StopDeliveryStreamEncryptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.StopDeliveryStreamEncryptionInput, ...func(*firehose.Options)) *firehose.StopDeliveryStreamEncryptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.StopDeliveryStreamEncryptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.StopDeliveryStreamEncryptionInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagDeliveryStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagDeliveryStream(ctx context.Context, params *firehose.TagDeliveryStreamInput, optFns ...func(*firehose.Options)) (*firehose.TagDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagDeliveryStream")
	}

	var r0 *firehose.TagDeliveryStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.TagDeliveryStreamInput, ...func(*firehose.Options)) (*firehose.TagDeliveryStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.TagDeliveryStreamInput, ...func(*firehose.Options)) *firehose.TagDeliveryStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.TagDeliveryStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.TagDeliveryStreamInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagDeliveryStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagDeliveryStream(ctx context.Context, params *firehose.UntagDeliveryStreamInput, optFns ...func(*firehose.Options)) (*firehose.UntagDeliveryStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagDeliveryStream")
	}

	var r0 *firehose.UntagDeliveryStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.UntagDeliveryStreamInput, ...func(*firehose.Options)) (*firehose.UntagDeliveryStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.UntagDeliveryStreamInput, ...func(*firehose.Options)) *firehose.UntagDeliveryStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.UntagDeliveryStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.UntagDeliveryStreamInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDestination(ctx context.Context, params *firehose.UpdateDestinationInput, optFns ...func(*firehose.Options)) (*firehose.UpdateDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDestination")
	}

	var r0 *firehose.UpdateDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.UpdateDestinationInput, ...func(*firehose.Options)) (*firehose.UpdateDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *firehose.UpdateDestinationInput, ...func(*firehose.Options)) *firehose.UpdateDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*firehose.UpdateDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *firehose.UpdateDestinationInput, ...func(*firehose.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
