// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	directoryservicedata "github.com/aws/aws-sdk-go-v2/service/directoryservicedata"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddGroupMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddGroupMember(ctx context.Context, params *directoryservicedata.AddGroupMemberInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.AddGroupMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddGroupMember")
	}

	var r0 *directoryservicedata.AddGroupMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.AddGroupMemberInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.AddGroupMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.AddGroupMemberInput, ...func(*directoryservicedata.Options)) *directoryservicedata.AddGroupMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.AddGroupMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.AddGroupMemberInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroup(ctx context.Context, params *directoryservicedata.CreateGroupInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.CreateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *directoryservicedata.CreateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.CreateGroupInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.CreateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.CreateGroupInput, ...func(*directoryservicedata.Options)) *directoryservicedata.CreateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.CreateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.CreateGroupInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *directoryservicedata.CreateUserInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *directoryservicedata.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.CreateUserInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.CreateUserInput, ...func(*directoryservicedata.Options)) *directoryservicedata.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.CreateUserInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGroup(ctx context.Context, params *directoryservicedata.DeleteGroupInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.DeleteGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *directoryservicedata.DeleteGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DeleteGroupInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.DeleteGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DeleteGroupInput, ...func(*directoryservicedata.Options)) *directoryservicedata.DeleteGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.DeleteGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.DeleteGroupInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *directoryservicedata.DeleteUserInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *directoryservicedata.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DeleteUserInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DeleteUserInput, ...func(*directoryservicedata.Options)) *directoryservicedata.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.DeleteUserInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGroup(ctx context.Context, params *directoryservicedata.DescribeGroupInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.DescribeGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGroup")
	}

	var r0 *directoryservicedata.DescribeGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DescribeGroupInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.DescribeGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DescribeGroupInput, ...func(*directoryservicedata.Options)) *directoryservicedata.DescribeGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.DescribeGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.DescribeGroupInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUser(ctx context.Context, params *directoryservicedata.DescribeUserInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.DescribeUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUser")
	}

	var r0 *directoryservicedata.DescribeUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DescribeUserInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.DescribeUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DescribeUserInput, ...func(*directoryservicedata.Options)) *directoryservicedata.DescribeUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.DescribeUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.DescribeUserInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableUser(ctx context.Context, params *directoryservicedata.DisableUserInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.DisableUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableUser")
	}

	var r0 *directoryservicedata.DisableUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DisableUserInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.DisableUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.DisableUserInput, ...func(*directoryservicedata.Options)) *directoryservicedata.DisableUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.DisableUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.DisableUserInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroupMembers(ctx context.Context, params *directoryservicedata.ListGroupMembersInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.ListGroupMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMembers")
	}

	var r0 *directoryservicedata.ListGroupMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.ListGroupMembersInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.ListGroupMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.ListGroupMembersInput, ...func(*directoryservicedata.Options)) *directoryservicedata.ListGroupMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.ListGroupMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.ListGroupMembersInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroups(ctx context.Context, params *directoryservicedata.ListGroupsInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.ListGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *directoryservicedata.ListGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.ListGroupsInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.ListGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.ListGroupsInput, ...func(*directoryservicedata.Options)) *directoryservicedata.ListGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.ListGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.ListGroupsInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupsForMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroupsForMember(ctx context.Context, params *directoryservicedata.ListGroupsForMemberInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.ListGroupsForMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsForMember")
	}

	var r0 *directoryservicedata.ListGroupsForMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.ListGroupsForMemberInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.ListGroupsForMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.ListGroupsForMemberInput, ...func(*directoryservicedata.Options)) *directoryservicedata.ListGroupsForMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.ListGroupsForMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.ListGroupsForMemberInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *directoryservicedata.ListUsersInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *directoryservicedata.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.ListUsersInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.ListUsersInput, ...func(*directoryservicedata.Options)) *directoryservicedata.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.ListUsersInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() directoryservicedata.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 directoryservicedata.Options
	if rf, ok := ret.Get(0).(func() directoryservicedata.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(directoryservicedata.Options)
	}

	return r0
}

// RemoveGroupMember provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveGroupMember(ctx context.Context, params *directoryservicedata.RemoveGroupMemberInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.RemoveGroupMemberOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveGroupMember")
	}

	var r0 *directoryservicedata.RemoveGroupMemberOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.RemoveGroupMemberInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.RemoveGroupMemberOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.RemoveGroupMemberInput, ...func(*directoryservicedata.Options)) *directoryservicedata.RemoveGroupMemberOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.RemoveGroupMemberOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.RemoveGroupMemberInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchGroups(ctx context.Context, params *directoryservicedata.SearchGroupsInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.SearchGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchGroups")
	}

	var r0 *directoryservicedata.SearchGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.SearchGroupsInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.SearchGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.SearchGroupsInput, ...func(*directoryservicedata.Options)) *directoryservicedata.SearchGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.SearchGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.SearchGroupsInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchUsers(ctx context.Context, params *directoryservicedata.SearchUsersInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.SearchUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsers")
	}

	var r0 *directoryservicedata.SearchUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.SearchUsersInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.SearchUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.SearchUsersInput, ...func(*directoryservicedata.Options)) *directoryservicedata.SearchUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.SearchUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.SearchUsersInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGroup(ctx context.Context, params *directoryservicedata.UpdateGroupInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.UpdateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *directoryservicedata.UpdateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.UpdateGroupInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.UpdateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.UpdateGroupInput, ...func(*directoryservicedata.Options)) *directoryservicedata.UpdateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.UpdateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.UpdateGroupInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *directoryservicedata.UpdateUserInput, optFns ...func(*directoryservicedata.Options)) (*directoryservicedata.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *directoryservicedata.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.UpdateUserInput, ...func(*directoryservicedata.Options)) (*directoryservicedata.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *directoryservicedata.UpdateUserInput, ...func(*directoryservicedata.Options)) *directoryservicedata.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*directoryservicedata.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *directoryservicedata.UpdateUserInput, ...func(*directoryservicedata.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
