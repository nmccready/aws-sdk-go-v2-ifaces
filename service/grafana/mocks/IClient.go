// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	grafana "github.com/aws/aws-sdk-go-v2/service/grafana"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateLicense provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateLicense(ctx context.Context, params *grafana.AssociateLicenseInput, optFns ...func(*grafana.Options)) (*grafana.AssociateLicenseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateLicense")
	}

	var r0 *grafana.AssociateLicenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.AssociateLicenseInput, ...func(*grafana.Options)) (*grafana.AssociateLicenseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.AssociateLicenseInput, ...func(*grafana.Options)) *grafana.AssociateLicenseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.AssociateLicenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.AssociateLicenseInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkspace(ctx context.Context, params *grafana.CreateWorkspaceInput, optFns ...func(*grafana.Options)) (*grafana.CreateWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspace")
	}

	var r0 *grafana.CreateWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.CreateWorkspaceInput, ...func(*grafana.Options)) (*grafana.CreateWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.CreateWorkspaceInput, ...func(*grafana.Options)) *grafana.CreateWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.CreateWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.CreateWorkspaceInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkspaceApiKey(ctx context.Context, params *grafana.CreateWorkspaceApiKeyInput, optFns ...func(*grafana.Options)) (*grafana.CreateWorkspaceApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceApiKey")
	}

	var r0 *grafana.CreateWorkspaceApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.CreateWorkspaceApiKeyInput, ...func(*grafana.Options)) (*grafana.CreateWorkspaceApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.CreateWorkspaceApiKeyInput, ...func(*grafana.Options)) *grafana.CreateWorkspaceApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.CreateWorkspaceApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.CreateWorkspaceApiKeyInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceServiceAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkspaceServiceAccount(ctx context.Context, params *grafana.CreateWorkspaceServiceAccountInput, optFns ...func(*grafana.Options)) (*grafana.CreateWorkspaceServiceAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceServiceAccount")
	}

	var r0 *grafana.CreateWorkspaceServiceAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.CreateWorkspaceServiceAccountInput, ...func(*grafana.Options)) (*grafana.CreateWorkspaceServiceAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.CreateWorkspaceServiceAccountInput, ...func(*grafana.Options)) *grafana.CreateWorkspaceServiceAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.CreateWorkspaceServiceAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.CreateWorkspaceServiceAccountInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceServiceAccountToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkspaceServiceAccountToken(ctx context.Context, params *grafana.CreateWorkspaceServiceAccountTokenInput, optFns ...func(*grafana.Options)) (*grafana.CreateWorkspaceServiceAccountTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceServiceAccountToken")
	}

	var r0 *grafana.CreateWorkspaceServiceAccountTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.CreateWorkspaceServiceAccountTokenInput, ...func(*grafana.Options)) (*grafana.CreateWorkspaceServiceAccountTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.CreateWorkspaceServiceAccountTokenInput, ...func(*grafana.Options)) *grafana.CreateWorkspaceServiceAccountTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.CreateWorkspaceServiceAccountTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.CreateWorkspaceServiceAccountTokenInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkspace(ctx context.Context, params *grafana.DeleteWorkspaceInput, optFns ...func(*grafana.Options)) (*grafana.DeleteWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspace")
	}

	var r0 *grafana.DeleteWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DeleteWorkspaceInput, ...func(*grafana.Options)) (*grafana.DeleteWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DeleteWorkspaceInput, ...func(*grafana.Options)) *grafana.DeleteWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.DeleteWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.DeleteWorkspaceInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceApiKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkspaceApiKey(ctx context.Context, params *grafana.DeleteWorkspaceApiKeyInput, optFns ...func(*grafana.Options)) (*grafana.DeleteWorkspaceApiKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceApiKey")
	}

	var r0 *grafana.DeleteWorkspaceApiKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DeleteWorkspaceApiKeyInput, ...func(*grafana.Options)) (*grafana.DeleteWorkspaceApiKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DeleteWorkspaceApiKeyInput, ...func(*grafana.Options)) *grafana.DeleteWorkspaceApiKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.DeleteWorkspaceApiKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.DeleteWorkspaceApiKeyInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceServiceAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkspaceServiceAccount(ctx context.Context, params *grafana.DeleteWorkspaceServiceAccountInput, optFns ...func(*grafana.Options)) (*grafana.DeleteWorkspaceServiceAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceServiceAccount")
	}

	var r0 *grafana.DeleteWorkspaceServiceAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DeleteWorkspaceServiceAccountInput, ...func(*grafana.Options)) (*grafana.DeleteWorkspaceServiceAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DeleteWorkspaceServiceAccountInput, ...func(*grafana.Options)) *grafana.DeleteWorkspaceServiceAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.DeleteWorkspaceServiceAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.DeleteWorkspaceServiceAccountInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceServiceAccountToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkspaceServiceAccountToken(ctx context.Context, params *grafana.DeleteWorkspaceServiceAccountTokenInput, optFns ...func(*grafana.Options)) (*grafana.DeleteWorkspaceServiceAccountTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceServiceAccountToken")
	}

	var r0 *grafana.DeleteWorkspaceServiceAccountTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DeleteWorkspaceServiceAccountTokenInput, ...func(*grafana.Options)) (*grafana.DeleteWorkspaceServiceAccountTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DeleteWorkspaceServiceAccountTokenInput, ...func(*grafana.Options)) *grafana.DeleteWorkspaceServiceAccountTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.DeleteWorkspaceServiceAccountTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.DeleteWorkspaceServiceAccountTokenInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWorkspace(ctx context.Context, params *grafana.DescribeWorkspaceInput, optFns ...func(*grafana.Options)) (*grafana.DescribeWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspace")
	}

	var r0 *grafana.DescribeWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DescribeWorkspaceInput, ...func(*grafana.Options)) (*grafana.DescribeWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DescribeWorkspaceInput, ...func(*grafana.Options)) *grafana.DescribeWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.DescribeWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.DescribeWorkspaceInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaceAuthentication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWorkspaceAuthentication(ctx context.Context, params *grafana.DescribeWorkspaceAuthenticationInput, optFns ...func(*grafana.Options)) (*grafana.DescribeWorkspaceAuthenticationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaceAuthentication")
	}

	var r0 *grafana.DescribeWorkspaceAuthenticationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DescribeWorkspaceAuthenticationInput, ...func(*grafana.Options)) (*grafana.DescribeWorkspaceAuthenticationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DescribeWorkspaceAuthenticationInput, ...func(*grafana.Options)) *grafana.DescribeWorkspaceAuthenticationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.DescribeWorkspaceAuthenticationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.DescribeWorkspaceAuthenticationInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkspaceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWorkspaceConfiguration(ctx context.Context, params *grafana.DescribeWorkspaceConfigurationInput, optFns ...func(*grafana.Options)) (*grafana.DescribeWorkspaceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkspaceConfiguration")
	}

	var r0 *grafana.DescribeWorkspaceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DescribeWorkspaceConfigurationInput, ...func(*grafana.Options)) (*grafana.DescribeWorkspaceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DescribeWorkspaceConfigurationInput, ...func(*grafana.Options)) *grafana.DescribeWorkspaceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.DescribeWorkspaceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.DescribeWorkspaceConfigurationInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateLicense provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateLicense(ctx context.Context, params *grafana.DisassociateLicenseInput, optFns ...func(*grafana.Options)) (*grafana.DisassociateLicenseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateLicense")
	}

	var r0 *grafana.DisassociateLicenseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DisassociateLicenseInput, ...func(*grafana.Options)) (*grafana.DisassociateLicenseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.DisassociateLicenseInput, ...func(*grafana.Options)) *grafana.DisassociateLicenseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.DisassociateLicenseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.DisassociateLicenseInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPermissions(ctx context.Context, params *grafana.ListPermissionsInput, optFns ...func(*grafana.Options)) (*grafana.ListPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPermissions")
	}

	var r0 *grafana.ListPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListPermissionsInput, ...func(*grafana.Options)) (*grafana.ListPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListPermissionsInput, ...func(*grafana.Options)) *grafana.ListPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.ListPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.ListPermissionsInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *grafana.ListTagsForResourceInput, optFns ...func(*grafana.Options)) (*grafana.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *grafana.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListTagsForResourceInput, ...func(*grafana.Options)) (*grafana.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListTagsForResourceInput, ...func(*grafana.Options)) *grafana.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.ListTagsForResourceInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVersions(ctx context.Context, params *grafana.ListVersionsInput, optFns ...func(*grafana.Options)) (*grafana.ListVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVersions")
	}

	var r0 *grafana.ListVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListVersionsInput, ...func(*grafana.Options)) (*grafana.ListVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListVersionsInput, ...func(*grafana.Options)) *grafana.ListVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.ListVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.ListVersionsInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceServiceAccountTokens provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkspaceServiceAccountTokens(ctx context.Context, params *grafana.ListWorkspaceServiceAccountTokensInput, optFns ...func(*grafana.Options)) (*grafana.ListWorkspaceServiceAccountTokensOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaceServiceAccountTokens")
	}

	var r0 *grafana.ListWorkspaceServiceAccountTokensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListWorkspaceServiceAccountTokensInput, ...func(*grafana.Options)) (*grafana.ListWorkspaceServiceAccountTokensOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListWorkspaceServiceAccountTokensInput, ...func(*grafana.Options)) *grafana.ListWorkspaceServiceAccountTokensOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.ListWorkspaceServiceAccountTokensOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.ListWorkspaceServiceAccountTokensInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceServiceAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkspaceServiceAccounts(ctx context.Context, params *grafana.ListWorkspaceServiceAccountsInput, optFns ...func(*grafana.Options)) (*grafana.ListWorkspaceServiceAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaceServiceAccounts")
	}

	var r0 *grafana.ListWorkspaceServiceAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListWorkspaceServiceAccountsInput, ...func(*grafana.Options)) (*grafana.ListWorkspaceServiceAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListWorkspaceServiceAccountsInput, ...func(*grafana.Options)) *grafana.ListWorkspaceServiceAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.ListWorkspaceServiceAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.ListWorkspaceServiceAccountsInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkspaces(ctx context.Context, params *grafana.ListWorkspacesInput, optFns ...func(*grafana.Options)) (*grafana.ListWorkspacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaces")
	}

	var r0 *grafana.ListWorkspacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListWorkspacesInput, ...func(*grafana.Options)) (*grafana.ListWorkspacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.ListWorkspacesInput, ...func(*grafana.Options)) *grafana.ListWorkspacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.ListWorkspacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.ListWorkspacesInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() grafana.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 grafana.Options
	if rf, ok := ret.Get(0).(func() grafana.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(grafana.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *grafana.TagResourceInput, optFns ...func(*grafana.Options)) (*grafana.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *grafana.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.TagResourceInput, ...func(*grafana.Options)) (*grafana.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.TagResourceInput, ...func(*grafana.Options)) *grafana.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.TagResourceInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *grafana.UntagResourceInput, optFns ...func(*grafana.Options)) (*grafana.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *grafana.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UntagResourceInput, ...func(*grafana.Options)) (*grafana.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UntagResourceInput, ...func(*grafana.Options)) *grafana.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.UntagResourceInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePermissions(ctx context.Context, params *grafana.UpdatePermissionsInput, optFns ...func(*grafana.Options)) (*grafana.UpdatePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermissions")
	}

	var r0 *grafana.UpdatePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UpdatePermissionsInput, ...func(*grafana.Options)) (*grafana.UpdatePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UpdatePermissionsInput, ...func(*grafana.Options)) *grafana.UpdatePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.UpdatePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.UpdatePermissionsInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkspace(ctx context.Context, params *grafana.UpdateWorkspaceInput, optFns ...func(*grafana.Options)) (*grafana.UpdateWorkspaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspace")
	}

	var r0 *grafana.UpdateWorkspaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UpdateWorkspaceInput, ...func(*grafana.Options)) (*grafana.UpdateWorkspaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UpdateWorkspaceInput, ...func(*grafana.Options)) *grafana.UpdateWorkspaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.UpdateWorkspaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.UpdateWorkspaceInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceAuthentication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkspaceAuthentication(ctx context.Context, params *grafana.UpdateWorkspaceAuthenticationInput, optFns ...func(*grafana.Options)) (*grafana.UpdateWorkspaceAuthenticationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceAuthentication")
	}

	var r0 *grafana.UpdateWorkspaceAuthenticationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UpdateWorkspaceAuthenticationInput, ...func(*grafana.Options)) (*grafana.UpdateWorkspaceAuthenticationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UpdateWorkspaceAuthenticationInput, ...func(*grafana.Options)) *grafana.UpdateWorkspaceAuthenticationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.UpdateWorkspaceAuthenticationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.UpdateWorkspaceAuthenticationInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkspaceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkspaceConfiguration(ctx context.Context, params *grafana.UpdateWorkspaceConfigurationInput, optFns ...func(*grafana.Options)) (*grafana.UpdateWorkspaceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkspaceConfiguration")
	}

	var r0 *grafana.UpdateWorkspaceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UpdateWorkspaceConfigurationInput, ...func(*grafana.Options)) (*grafana.UpdateWorkspaceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *grafana.UpdateWorkspaceConfigurationInput, ...func(*grafana.Options)) *grafana.UpdateWorkspaceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*grafana.UpdateWorkspaceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *grafana.UpdateWorkspaceConfigurationInput, ...func(*grafana.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
