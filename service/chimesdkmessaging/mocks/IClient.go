// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	chimesdkmessaging "github.com/aws/aws-sdk-go-v2/service/chimesdkmessaging"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateChannelFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateChannelFlow(ctx context.Context, params *chimesdkmessaging.AssociateChannelFlowInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.AssociateChannelFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateChannelFlow")
	}

	var r0 *chimesdkmessaging.AssociateChannelFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.AssociateChannelFlowInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.AssociateChannelFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.AssociateChannelFlowInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.AssociateChannelFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.AssociateChannelFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.AssociateChannelFlowInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchCreateChannelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateChannelMembership(ctx context.Context, params *chimesdkmessaging.BatchCreateChannelMembershipInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.BatchCreateChannelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateChannelMembership")
	}

	var r0 *chimesdkmessaging.BatchCreateChannelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.BatchCreateChannelMembershipInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.BatchCreateChannelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.BatchCreateChannelMembershipInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.BatchCreateChannelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.BatchCreateChannelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.BatchCreateChannelMembershipInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChannelFlowCallback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ChannelFlowCallback(ctx context.Context, params *chimesdkmessaging.ChannelFlowCallbackInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ChannelFlowCallbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChannelFlowCallback")
	}

	var r0 *chimesdkmessaging.ChannelFlowCallbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ChannelFlowCallbackInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ChannelFlowCallbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ChannelFlowCallbackInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ChannelFlowCallbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ChannelFlowCallbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ChannelFlowCallbackInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannel(ctx context.Context, params *chimesdkmessaging.CreateChannelInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannel")
	}

	var r0 *chimesdkmessaging.CreateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.CreateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.CreateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.CreateChannelInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelBan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannelBan(ctx context.Context, params *chimesdkmessaging.CreateChannelBanInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelBanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelBan")
	}

	var r0 *chimesdkmessaging.CreateChannelBanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelBanInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelBanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelBanInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.CreateChannelBanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.CreateChannelBanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.CreateChannelBanInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannelFlow(ctx context.Context, params *chimesdkmessaging.CreateChannelFlowInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelFlow")
	}

	var r0 *chimesdkmessaging.CreateChannelFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelFlowInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelFlowInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.CreateChannelFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.CreateChannelFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.CreateChannelFlowInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannelMembership(ctx context.Context, params *chimesdkmessaging.CreateChannelMembershipInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelMembership")
	}

	var r0 *chimesdkmessaging.CreateChannelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelMembershipInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelMembershipInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.CreateChannelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.CreateChannelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.CreateChannelMembershipInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateChannelModerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChannelModerator(ctx context.Context, params *chimesdkmessaging.CreateChannelModeratorInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelModeratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChannelModerator")
	}

	var r0 *chimesdkmessaging.CreateChannelModeratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelModeratorInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.CreateChannelModeratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.CreateChannelModeratorInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.CreateChannelModeratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.CreateChannelModeratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.CreateChannelModeratorInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannel(ctx context.Context, params *chimesdkmessaging.DeleteChannelInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannel")
	}

	var r0 *chimesdkmessaging.DeleteChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DeleteChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DeleteChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DeleteChannelInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelBan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelBan(ctx context.Context, params *chimesdkmessaging.DeleteChannelBanInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelBanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelBan")
	}

	var r0 *chimesdkmessaging.DeleteChannelBanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelBanInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelBanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelBanInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DeleteChannelBanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DeleteChannelBanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DeleteChannelBanInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelFlow(ctx context.Context, params *chimesdkmessaging.DeleteChannelFlowInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelFlow")
	}

	var r0 *chimesdkmessaging.DeleteChannelFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelFlowInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelFlowInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DeleteChannelFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DeleteChannelFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DeleteChannelFlowInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelMembership(ctx context.Context, params *chimesdkmessaging.DeleteChannelMembershipInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelMembership")
	}

	var r0 *chimesdkmessaging.DeleteChannelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelMembershipInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelMembershipInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DeleteChannelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DeleteChannelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DeleteChannelMembershipInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelMessage(ctx context.Context, params *chimesdkmessaging.DeleteChannelMessageInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelMessage")
	}

	var r0 *chimesdkmessaging.DeleteChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelMessageInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelMessageInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DeleteChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DeleteChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DeleteChannelMessageInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChannelModerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChannelModerator(ctx context.Context, params *chimesdkmessaging.DeleteChannelModeratorInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelModeratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChannelModerator")
	}

	var r0 *chimesdkmessaging.DeleteChannelModeratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelModeratorInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteChannelModeratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteChannelModeratorInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DeleteChannelModeratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DeleteChannelModeratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DeleteChannelModeratorInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMessagingStreamingConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMessagingStreamingConfigurations(ctx context.Context, params *chimesdkmessaging.DeleteMessagingStreamingConfigurationsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteMessagingStreamingConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMessagingStreamingConfigurations")
	}

	var r0 *chimesdkmessaging.DeleteMessagingStreamingConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DeleteMessagingStreamingConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DeleteMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DeleteMessagingStreamingConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DeleteMessagingStreamingConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DeleteMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannel(ctx context.Context, params *chimesdkmessaging.DescribeChannelInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannel")
	}

	var r0 *chimesdkmessaging.DescribeChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DescribeChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DescribeChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DescribeChannelInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelBan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelBan(ctx context.Context, params *chimesdkmessaging.DescribeChannelBanInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelBanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelBan")
	}

	var r0 *chimesdkmessaging.DescribeChannelBanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelBanInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelBanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelBanInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DescribeChannelBanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DescribeChannelBanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DescribeChannelBanInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelFlow(ctx context.Context, params *chimesdkmessaging.DescribeChannelFlowInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelFlow")
	}

	var r0 *chimesdkmessaging.DescribeChannelFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelFlowInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelFlowInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DescribeChannelFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DescribeChannelFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DescribeChannelFlowInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelMembership provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelMembership(ctx context.Context, params *chimesdkmessaging.DescribeChannelMembershipInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelMembershipOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelMembership")
	}

	var r0 *chimesdkmessaging.DescribeChannelMembershipOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelMembershipInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelMembershipOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelMembershipInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DescribeChannelMembershipOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DescribeChannelMembershipOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DescribeChannelMembershipInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelMembershipForAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelMembershipForAppInstanceUser(ctx context.Context, params *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelMembershipForAppInstanceUser")
	}

	var r0 *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DescribeChannelMembershipForAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelModeratedByAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelModeratedByAppInstanceUser(ctx context.Context, params *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelModeratedByAppInstanceUser")
	}

	var r0 *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DescribeChannelModeratedByAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeChannelModerator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeChannelModerator(ctx context.Context, params *chimesdkmessaging.DescribeChannelModeratorInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelModeratorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeChannelModerator")
	}

	var r0 *chimesdkmessaging.DescribeChannelModeratorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelModeratorInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DescribeChannelModeratorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DescribeChannelModeratorInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DescribeChannelModeratorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DescribeChannelModeratorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DescribeChannelModeratorInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateChannelFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateChannelFlow(ctx context.Context, params *chimesdkmessaging.DisassociateChannelFlowInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DisassociateChannelFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateChannelFlow")
	}

	var r0 *chimesdkmessaging.DisassociateChannelFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DisassociateChannelFlowInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.DisassociateChannelFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.DisassociateChannelFlowInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.DisassociateChannelFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.DisassociateChannelFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.DisassociateChannelFlowInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelMembershipPreferences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChannelMembershipPreferences(ctx context.Context, params *chimesdkmessaging.GetChannelMembershipPreferencesInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetChannelMembershipPreferencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelMembershipPreferences")
	}

	var r0 *chimesdkmessaging.GetChannelMembershipPreferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetChannelMembershipPreferencesInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetChannelMembershipPreferencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetChannelMembershipPreferencesInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.GetChannelMembershipPreferencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.GetChannelMembershipPreferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.GetChannelMembershipPreferencesInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChannelMessage(ctx context.Context, params *chimesdkmessaging.GetChannelMessageInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelMessage")
	}

	var r0 *chimesdkmessaging.GetChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetChannelMessageInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetChannelMessageInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.GetChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.GetChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.GetChannelMessageInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChannelMessageStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChannelMessageStatus(ctx context.Context, params *chimesdkmessaging.GetChannelMessageStatusInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetChannelMessageStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChannelMessageStatus")
	}

	var r0 *chimesdkmessaging.GetChannelMessageStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetChannelMessageStatusInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetChannelMessageStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetChannelMessageStatusInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.GetChannelMessageStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.GetChannelMessageStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.GetChannelMessageStatusInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagingSessionEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMessagingSessionEndpoint(ctx context.Context, params *chimesdkmessaging.GetMessagingSessionEndpointInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetMessagingSessionEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagingSessionEndpoint")
	}

	var r0 *chimesdkmessaging.GetMessagingSessionEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetMessagingSessionEndpointInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetMessagingSessionEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetMessagingSessionEndpointInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.GetMessagingSessionEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.GetMessagingSessionEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.GetMessagingSessionEndpointInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessagingStreamingConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMessagingStreamingConfigurations(ctx context.Context, params *chimesdkmessaging.GetMessagingStreamingConfigurationsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetMessagingStreamingConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMessagingStreamingConfigurations")
	}

	var r0 *chimesdkmessaging.GetMessagingStreamingConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.GetMessagingStreamingConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.GetMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.GetMessagingStreamingConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.GetMessagingStreamingConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.GetMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelBans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelBans(ctx context.Context, params *chimesdkmessaging.ListChannelBansInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelBansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelBans")
	}

	var r0 *chimesdkmessaging.ListChannelBansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelBansInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelBansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelBansInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelBansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelBansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelBansInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelFlows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelFlows(ctx context.Context, params *chimesdkmessaging.ListChannelFlowsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelFlowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelFlows")
	}

	var r0 *chimesdkmessaging.ListChannelFlowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelFlowsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelFlowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelFlowsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelFlowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelFlowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelFlowsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelMemberships provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelMemberships(ctx context.Context, params *chimesdkmessaging.ListChannelMembershipsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelMembershipsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMemberships")
	}

	var r0 *chimesdkmessaging.ListChannelMembershipsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelMembershipsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelMembershipsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelMembershipsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelMembershipsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelMembershipsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelMembershipsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelMembershipsForAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelMembershipsForAppInstanceUser(ctx context.Context, params *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMembershipsForAppInstanceUser")
	}

	var r0 *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelMembershipsForAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelMembershipsForAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelMessages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelMessages(ctx context.Context, params *chimesdkmessaging.ListChannelMessagesInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelMessagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelMessages")
	}

	var r0 *chimesdkmessaging.ListChannelMessagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelMessagesInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelMessagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelMessagesInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelMessagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelMessagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelMessagesInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelModerators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelModerators(ctx context.Context, params *chimesdkmessaging.ListChannelModeratorsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelModeratorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelModerators")
	}

	var r0 *chimesdkmessaging.ListChannelModeratorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelModeratorsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelModeratorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelModeratorsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelModeratorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelModeratorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelModeratorsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannels(ctx context.Context, params *chimesdkmessaging.ListChannelsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannels")
	}

	var r0 *chimesdkmessaging.ListChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelsAssociatedWithChannelFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelsAssociatedWithChannelFlow(ctx context.Context, params *chimesdkmessaging.ListChannelsAssociatedWithChannelFlowInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelsAssociatedWithChannelFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelsAssociatedWithChannelFlow")
	}

	var r0 *chimesdkmessaging.ListChannelsAssociatedWithChannelFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelsAssociatedWithChannelFlowInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelsAssociatedWithChannelFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelsAssociatedWithChannelFlowInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelsAssociatedWithChannelFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelsAssociatedWithChannelFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelsAssociatedWithChannelFlowInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChannelsModeratedByAppInstanceUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChannelsModeratedByAppInstanceUser(ctx context.Context, params *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChannelsModeratedByAppInstanceUser")
	}

	var r0 *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListChannelsModeratedByAppInstanceUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListChannelsModeratedByAppInstanceUserInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubChannels(ctx context.Context, params *chimesdkmessaging.ListSubChannelsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListSubChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubChannels")
	}

	var r0 *chimesdkmessaging.ListSubChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListSubChannelsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListSubChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListSubChannelsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListSubChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListSubChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListSubChannelsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *chimesdkmessaging.ListTagsForResourceInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *chimesdkmessaging.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListTagsForResourceInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.ListTagsForResourceInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.ListTagsForResourceInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() chimesdkmessaging.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 chimesdkmessaging.Options
	if rf, ok := ret.Get(0).(func() chimesdkmessaging.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chimesdkmessaging.Options)
	}

	return r0
}

// PutChannelExpirationSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutChannelExpirationSettings(ctx context.Context, params *chimesdkmessaging.PutChannelExpirationSettingsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.PutChannelExpirationSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutChannelExpirationSettings")
	}

	var r0 *chimesdkmessaging.PutChannelExpirationSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.PutChannelExpirationSettingsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.PutChannelExpirationSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.PutChannelExpirationSettingsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.PutChannelExpirationSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.PutChannelExpirationSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.PutChannelExpirationSettingsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutChannelMembershipPreferences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutChannelMembershipPreferences(ctx context.Context, params *chimesdkmessaging.PutChannelMembershipPreferencesInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.PutChannelMembershipPreferencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutChannelMembershipPreferences")
	}

	var r0 *chimesdkmessaging.PutChannelMembershipPreferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.PutChannelMembershipPreferencesInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.PutChannelMembershipPreferencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.PutChannelMembershipPreferencesInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.PutChannelMembershipPreferencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.PutChannelMembershipPreferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.PutChannelMembershipPreferencesInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMessagingStreamingConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMessagingStreamingConfigurations(ctx context.Context, params *chimesdkmessaging.PutMessagingStreamingConfigurationsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.PutMessagingStreamingConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMessagingStreamingConfigurations")
	}

	var r0 *chimesdkmessaging.PutMessagingStreamingConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.PutMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.PutMessagingStreamingConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.PutMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.PutMessagingStreamingConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.PutMessagingStreamingConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.PutMessagingStreamingConfigurationsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RedactChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RedactChannelMessage(ctx context.Context, params *chimesdkmessaging.RedactChannelMessageInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.RedactChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RedactChannelMessage")
	}

	var r0 *chimesdkmessaging.RedactChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.RedactChannelMessageInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.RedactChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.RedactChannelMessageInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.RedactChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.RedactChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.RedactChannelMessageInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchChannels(ctx context.Context, params *chimesdkmessaging.SearchChannelsInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.SearchChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchChannels")
	}

	var r0 *chimesdkmessaging.SearchChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.SearchChannelsInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.SearchChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.SearchChannelsInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.SearchChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.SearchChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.SearchChannelsInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendChannelMessage(ctx context.Context, params *chimesdkmessaging.SendChannelMessageInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.SendChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendChannelMessage")
	}

	var r0 *chimesdkmessaging.SendChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.SendChannelMessageInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.SendChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.SendChannelMessageInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.SendChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.SendChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.SendChannelMessageInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *chimesdkmessaging.TagResourceInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *chimesdkmessaging.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.TagResourceInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.TagResourceInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.TagResourceInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *chimesdkmessaging.UntagResourceInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *chimesdkmessaging.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UntagResourceInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UntagResourceInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.UntagResourceInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannel(ctx context.Context, params *chimesdkmessaging.UpdateChannelInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UpdateChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannel")
	}

	var r0 *chimesdkmessaging.UpdateChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UpdateChannelInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UpdateChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UpdateChannelInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.UpdateChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.UpdateChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.UpdateChannelInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannelFlow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannelFlow(ctx context.Context, params *chimesdkmessaging.UpdateChannelFlowInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UpdateChannelFlowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelFlow")
	}

	var r0 *chimesdkmessaging.UpdateChannelFlowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UpdateChannelFlowInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UpdateChannelFlowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UpdateChannelFlowInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.UpdateChannelFlowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.UpdateChannelFlowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.UpdateChannelFlowInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannelMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannelMessage(ctx context.Context, params *chimesdkmessaging.UpdateChannelMessageInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UpdateChannelMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelMessage")
	}

	var r0 *chimesdkmessaging.UpdateChannelMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UpdateChannelMessageInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UpdateChannelMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UpdateChannelMessageInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.UpdateChannelMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.UpdateChannelMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.UpdateChannelMessageInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChannelReadMarker provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChannelReadMarker(ctx context.Context, params *chimesdkmessaging.UpdateChannelReadMarkerInput, optFns ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UpdateChannelReadMarkerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChannelReadMarker")
	}

	var r0 *chimesdkmessaging.UpdateChannelReadMarkerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UpdateChannelReadMarkerInput, ...func(*chimesdkmessaging.Options)) (*chimesdkmessaging.UpdateChannelReadMarkerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmessaging.UpdateChannelReadMarkerInput, ...func(*chimesdkmessaging.Options)) *chimesdkmessaging.UpdateChannelReadMarkerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmessaging.UpdateChannelReadMarkerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmessaging.UpdateChannelReadMarkerInput, ...func(*chimesdkmessaging.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
