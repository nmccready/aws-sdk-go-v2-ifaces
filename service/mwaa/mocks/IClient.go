// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mwaa "github.com/aws/aws-sdk-go-v2/service/mwaa"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateCliToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCliToken(ctx context.Context, params *mwaa.CreateCliTokenInput, optFns ...func(*mwaa.Options)) (*mwaa.CreateCliTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCliToken")
	}

	var r0 *mwaa.CreateCliTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.CreateCliTokenInput, ...func(*mwaa.Options)) (*mwaa.CreateCliTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.CreateCliTokenInput, ...func(*mwaa.Options)) *mwaa.CreateCliTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.CreateCliTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.CreateCliTokenInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEnvironment(ctx context.Context, params *mwaa.CreateEnvironmentInput, optFns ...func(*mwaa.Options)) (*mwaa.CreateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEnvironment")
	}

	var r0 *mwaa.CreateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.CreateEnvironmentInput, ...func(*mwaa.Options)) (*mwaa.CreateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.CreateEnvironmentInput, ...func(*mwaa.Options)) *mwaa.CreateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.CreateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.CreateEnvironmentInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebLoginToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWebLoginToken(ctx context.Context, params *mwaa.CreateWebLoginTokenInput, optFns ...func(*mwaa.Options)) (*mwaa.CreateWebLoginTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebLoginToken")
	}

	var r0 *mwaa.CreateWebLoginTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.CreateWebLoginTokenInput, ...func(*mwaa.Options)) (*mwaa.CreateWebLoginTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.CreateWebLoginTokenInput, ...func(*mwaa.Options)) *mwaa.CreateWebLoginTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.CreateWebLoginTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.CreateWebLoginTokenInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEnvironment(ctx context.Context, params *mwaa.DeleteEnvironmentInput, optFns ...func(*mwaa.Options)) (*mwaa.DeleteEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEnvironment")
	}

	var r0 *mwaa.DeleteEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.DeleteEnvironmentInput, ...func(*mwaa.Options)) (*mwaa.DeleteEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.DeleteEnvironmentInput, ...func(*mwaa.Options)) *mwaa.DeleteEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.DeleteEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.DeleteEnvironmentInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnvironment(ctx context.Context, params *mwaa.GetEnvironmentInput, optFns ...func(*mwaa.Options)) (*mwaa.GetEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnvironment")
	}

	var r0 *mwaa.GetEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.GetEnvironmentInput, ...func(*mwaa.Options)) (*mwaa.GetEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.GetEnvironmentInput, ...func(*mwaa.Options)) *mwaa.GetEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.GetEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.GetEnvironmentInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnvironments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnvironments(ctx context.Context, params *mwaa.ListEnvironmentsInput, optFns ...func(*mwaa.Options)) (*mwaa.ListEnvironmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnvironments")
	}

	var r0 *mwaa.ListEnvironmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.ListEnvironmentsInput, ...func(*mwaa.Options)) (*mwaa.ListEnvironmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.ListEnvironmentsInput, ...func(*mwaa.Options)) *mwaa.ListEnvironmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.ListEnvironmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.ListEnvironmentsInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *mwaa.ListTagsForResourceInput, optFns ...func(*mwaa.Options)) (*mwaa.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *mwaa.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.ListTagsForResourceInput, ...func(*mwaa.Options)) (*mwaa.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.ListTagsForResourceInput, ...func(*mwaa.Options)) *mwaa.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.ListTagsForResourceInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() mwaa.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 mwaa.Options
	if rf, ok := ret.Get(0).(func() mwaa.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mwaa.Options)
	}

	return r0
}

// PublishMetrics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PublishMetrics(ctx context.Context, params *mwaa.PublishMetricsInput, optFns ...func(*mwaa.Options)) (*mwaa.PublishMetricsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishMetrics")
	}

	var r0 *mwaa.PublishMetricsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.PublishMetricsInput, ...func(*mwaa.Options)) (*mwaa.PublishMetricsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.PublishMetricsInput, ...func(*mwaa.Options)) *mwaa.PublishMetricsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.PublishMetricsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.PublishMetricsInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *mwaa.TagResourceInput, optFns ...func(*mwaa.Options)) (*mwaa.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *mwaa.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.TagResourceInput, ...func(*mwaa.Options)) (*mwaa.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.TagResourceInput, ...func(*mwaa.Options)) *mwaa.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.TagResourceInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *mwaa.UntagResourceInput, optFns ...func(*mwaa.Options)) (*mwaa.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *mwaa.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.UntagResourceInput, ...func(*mwaa.Options)) (*mwaa.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.UntagResourceInput, ...func(*mwaa.Options)) *mwaa.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.UntagResourceInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEnvironment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEnvironment(ctx context.Context, params *mwaa.UpdateEnvironmentInput, optFns ...func(*mwaa.Options)) (*mwaa.UpdateEnvironmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEnvironment")
	}

	var r0 *mwaa.UpdateEnvironmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.UpdateEnvironmentInput, ...func(*mwaa.Options)) (*mwaa.UpdateEnvironmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mwaa.UpdateEnvironmentInput, ...func(*mwaa.Options)) *mwaa.UpdateEnvironmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mwaa.UpdateEnvironmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mwaa.UpdateEnvironmentInput, ...func(*mwaa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
