// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	cloudwatchevents "github.com/aws/aws-sdk-go-v2/service/cloudwatchevents"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ActivateEventSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateEventSource(ctx context.Context, params *cloudwatchevents.ActivateEventSourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ActivateEventSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateEventSource")
	}

	var r0 *cloudwatchevents.ActivateEventSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ActivateEventSourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ActivateEventSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ActivateEventSourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ActivateEventSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ActivateEventSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ActivateEventSourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelReplay provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelReplay(ctx context.Context, params *cloudwatchevents.CancelReplayInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CancelReplayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelReplay")
	}

	var r0 *cloudwatchevents.CancelReplayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CancelReplayInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CancelReplayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CancelReplayInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.CancelReplayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CancelReplayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CancelReplayInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApiDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApiDestination(ctx context.Context, params *cloudwatchevents.CreateApiDestinationInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreateApiDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApiDestination")
	}

	var r0 *cloudwatchevents.CreateApiDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateApiDestinationInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreateApiDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateApiDestinationInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.CreateApiDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateApiDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateApiDestinationInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateArchive(ctx context.Context, params *cloudwatchevents.CreateArchiveInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreateArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateArchive")
	}

	var r0 *cloudwatchevents.CreateArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateArchiveInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreateArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateArchiveInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.CreateArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateArchiveInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnection(ctx context.Context, params *cloudwatchevents.CreateConnectionInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreateConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnection")
	}

	var r0 *cloudwatchevents.CreateConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateConnectionInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreateConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateConnectionInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.CreateConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateConnectionInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventBus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventBus(ctx context.Context, params *cloudwatchevents.CreateEventBusInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreateEventBusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventBus")
	}

	var r0 *cloudwatchevents.CreateEventBusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateEventBusInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreateEventBusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreateEventBusInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.CreateEventBusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreateEventBusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreateEventBusInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerEventSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePartnerEventSource(ctx context.Context, params *cloudwatchevents.CreatePartnerEventSourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreatePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePartnerEventSource")
	}

	var r0 *cloudwatchevents.CreatePartnerEventSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreatePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.CreatePartnerEventSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.CreatePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.CreatePartnerEventSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.CreatePartnerEventSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.CreatePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateEventSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeactivateEventSource(ctx context.Context, params *cloudwatchevents.DeactivateEventSourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeactivateEventSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateEventSource")
	}

	var r0 *cloudwatchevents.DeactivateEventSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeactivateEventSourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeactivateEventSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeactivateEventSourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DeactivateEventSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeactivateEventSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeactivateEventSourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeauthorizeConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeauthorizeConnection(ctx context.Context, params *cloudwatchevents.DeauthorizeConnectionInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeauthorizeConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeauthorizeConnection")
	}

	var r0 *cloudwatchevents.DeauthorizeConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeauthorizeConnectionInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeauthorizeConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeauthorizeConnectionInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DeauthorizeConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeauthorizeConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeauthorizeConnectionInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApiDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApiDestination(ctx context.Context, params *cloudwatchevents.DeleteApiDestinationInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteApiDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApiDestination")
	}

	var r0 *cloudwatchevents.DeleteApiDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteApiDestinationInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteApiDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteApiDestinationInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DeleteApiDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteApiDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteApiDestinationInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteArchive(ctx context.Context, params *cloudwatchevents.DeleteArchiveInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArchive")
	}

	var r0 *cloudwatchevents.DeleteArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteArchiveInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteArchiveInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DeleteArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteArchiveInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnection(ctx context.Context, params *cloudwatchevents.DeleteConnectionInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnection")
	}

	var r0 *cloudwatchevents.DeleteConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteConnectionInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteConnectionInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DeleteConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteConnectionInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventBus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventBus(ctx context.Context, params *cloudwatchevents.DeleteEventBusInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteEventBusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventBus")
	}

	var r0 *cloudwatchevents.DeleteEventBusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteEventBusInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteEventBusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteEventBusInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DeleteEventBusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteEventBusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteEventBusInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerEventSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePartnerEventSource(ctx context.Context, params *cloudwatchevents.DeletePartnerEventSourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeletePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePartnerEventSource")
	}

	var r0 *cloudwatchevents.DeletePartnerEventSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeletePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeletePartnerEventSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeletePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DeletePartnerEventSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeletePartnerEventSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeletePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRule(ctx context.Context, params *cloudwatchevents.DeleteRuleInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRule")
	}

	var r0 *cloudwatchevents.DeleteRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DeleteRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DeleteRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DeleteRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DeleteRuleInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApiDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApiDestination(ctx context.Context, params *cloudwatchevents.DescribeApiDestinationInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeApiDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApiDestination")
	}

	var r0 *cloudwatchevents.DescribeApiDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeApiDestinationInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeApiDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeApiDestinationInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DescribeApiDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeApiDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeApiDestinationInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeArchive(ctx context.Context, params *cloudwatchevents.DescribeArchiveInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeArchive")
	}

	var r0 *cloudwatchevents.DescribeArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeArchiveInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeArchiveInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DescribeArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeArchiveInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnection(ctx context.Context, params *cloudwatchevents.DescribeConnectionInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnection")
	}

	var r0 *cloudwatchevents.DescribeConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeConnectionInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeConnectionInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DescribeConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeConnectionInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventBus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventBus(ctx context.Context, params *cloudwatchevents.DescribeEventBusInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeEventBusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventBus")
	}

	var r0 *cloudwatchevents.DescribeEventBusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeEventBusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DescribeEventBusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventBusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeEventBusInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventSource(ctx context.Context, params *cloudwatchevents.DescribeEventSourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeEventSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventSource")
	}

	var r0 *cloudwatchevents.DescribeEventSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventSourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeEventSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeEventSourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DescribeEventSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeEventSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeEventSourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePartnerEventSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePartnerEventSource(ctx context.Context, params *cloudwatchevents.DescribePartnerEventSourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribePartnerEventSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePartnerEventSource")
	}

	var r0 *cloudwatchevents.DescribePartnerEventSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribePartnerEventSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DescribePartnerEventSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribePartnerEventSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribePartnerEventSourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplay provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplay(ctx context.Context, params *cloudwatchevents.DescribeReplayInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeReplayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplay")
	}

	var r0 *cloudwatchevents.DescribeReplayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeReplayInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeReplayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeReplayInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DescribeReplayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeReplayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeReplayInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRule(ctx context.Context, params *cloudwatchevents.DescribeRuleInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRule")
	}

	var r0 *cloudwatchevents.DescribeRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DescribeRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DescribeRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DescribeRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DescribeRuleInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableRule(ctx context.Context, params *cloudwatchevents.DisableRuleInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DisableRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableRule")
	}

	var r0 *cloudwatchevents.DisableRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.DisableRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.DisableRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.DisableRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.DisableRuleInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableRule(ctx context.Context, params *cloudwatchevents.EnableRuleInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.EnableRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableRule")
	}

	var r0 *cloudwatchevents.EnableRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.EnableRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.EnableRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.EnableRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.EnableRuleInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApiDestinations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApiDestinations(ctx context.Context, params *cloudwatchevents.ListApiDestinationsInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListApiDestinationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApiDestinations")
	}

	var r0 *cloudwatchevents.ListApiDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListApiDestinationsInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListApiDestinationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListApiDestinationsInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListApiDestinationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListApiDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListApiDestinationsInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchives provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListArchives(ctx context.Context, params *cloudwatchevents.ListArchivesInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListArchivesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArchives")
	}

	var r0 *cloudwatchevents.ListArchivesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListArchivesInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListArchivesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListArchivesInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListArchivesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListArchivesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListArchivesInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnections(ctx context.Context, params *cloudwatchevents.ListConnectionsInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnections")
	}

	var r0 *cloudwatchevents.ListConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListConnectionsInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListConnectionsInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListConnectionsInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventBuses provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEventBuses(ctx context.Context, params *cloudwatchevents.ListEventBusesInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListEventBusesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEventBuses")
	}

	var r0 *cloudwatchevents.ListEventBusesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListEventBusesInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListEventBusesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListEventBusesInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListEventBusesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventBusesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListEventBusesInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEventSources(ctx context.Context, params *cloudwatchevents.ListEventSourcesInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListEventSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEventSources")
	}

	var r0 *cloudwatchevents.ListEventSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListEventSourcesInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListEventSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListEventSourcesInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListEventSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListEventSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListEventSourcesInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSourceAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPartnerEventSourceAccounts(ctx context.Context, params *cloudwatchevents.ListPartnerEventSourceAccountsInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPartnerEventSourceAccounts")
	}

	var r0 *cloudwatchevents.ListPartnerEventSourceAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListPartnerEventSourceAccountsInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListPartnerEventSourceAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListPartnerEventSourceAccountsInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListPartnerEventSourceAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourceAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListPartnerEventSourceAccountsInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerEventSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPartnerEventSources(ctx context.Context, params *cloudwatchevents.ListPartnerEventSourcesInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListPartnerEventSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPartnerEventSources")
	}

	var r0 *cloudwatchevents.ListPartnerEventSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListPartnerEventSourcesInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListPartnerEventSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListPartnerEventSourcesInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListPartnerEventSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListPartnerEventSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListPartnerEventSourcesInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplays provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReplays(ctx context.Context, params *cloudwatchevents.ListReplaysInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListReplaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReplays")
	}

	var r0 *cloudwatchevents.ListReplaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListReplaysInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListReplaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListReplaysInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListReplaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListReplaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListReplaysInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleNamesByTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRuleNamesByTarget(ctx context.Context, params *cloudwatchevents.ListRuleNamesByTargetInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListRuleNamesByTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRuleNamesByTarget")
	}

	var r0 *cloudwatchevents.ListRuleNamesByTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListRuleNamesByTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListRuleNamesByTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRuleNamesByTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListRuleNamesByTargetInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRules(ctx context.Context, params *cloudwatchevents.ListRulesInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRules")
	}

	var r0 *cloudwatchevents.ListRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRulesInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListRulesInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListRulesInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *cloudwatchevents.ListTagsForResourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *cloudwatchevents.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTagsForResourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTagsForResourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListTagsForResourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTargetsByRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTargetsByRule(ctx context.Context, params *cloudwatchevents.ListTargetsByRuleInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListTargetsByRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTargetsByRule")
	}

	var r0 *cloudwatchevents.ListTargetsByRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.ListTargetsByRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.ListTargetsByRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.ListTargetsByRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.ListTargetsByRuleInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() cloudwatchevents.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 cloudwatchevents.Options
	if rf, ok := ret.Get(0).(func() cloudwatchevents.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(cloudwatchevents.Options)
	}

	return r0
}

// PutEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEvents(ctx context.Context, params *cloudwatchevents.PutEventsInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEvents")
	}

	var r0 *cloudwatchevents.PutEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutEventsInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutEventsInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.PutEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutEventsInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPartnerEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPartnerEvents(ctx context.Context, params *cloudwatchevents.PutPartnerEventsInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutPartnerEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPartnerEvents")
	}

	var r0 *cloudwatchevents.PutPartnerEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPartnerEventsInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutPartnerEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPartnerEventsInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.PutPartnerEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPartnerEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutPartnerEventsInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPermission(ctx context.Context, params *cloudwatchevents.PutPermissionInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPermission")
	}

	var r0 *cloudwatchevents.PutPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.PutPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutPermissionInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRule(ctx context.Context, params *cloudwatchevents.PutRuleInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRule")
	}

	var r0 *cloudwatchevents.PutRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutRuleInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutRuleInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.PutRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutRuleInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutTargets(ctx context.Context, params *cloudwatchevents.PutTargetsInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutTargets")
	}

	var r0 *cloudwatchevents.PutTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.PutTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.PutTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.PutTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.PutTargetsInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemovePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemovePermission(ctx context.Context, params *cloudwatchevents.RemovePermissionInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.RemovePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemovePermission")
	}

	var r0 *cloudwatchevents.RemovePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.RemovePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.RemovePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemovePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.RemovePermissionInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTargets(ctx context.Context, params *cloudwatchevents.RemoveTargetsInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.RemoveTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTargets")
	}

	var r0 *cloudwatchevents.RemoveTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.RemoveTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.RemoveTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.RemoveTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.RemoveTargetsInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplay provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartReplay(ctx context.Context, params *cloudwatchevents.StartReplayInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.StartReplayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartReplay")
	}

	var r0 *cloudwatchevents.StartReplayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.StartReplayInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.StartReplayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.StartReplayInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.StartReplayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.StartReplayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.StartReplayInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *cloudwatchevents.TagResourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *cloudwatchevents.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TagResourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TagResourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.TagResourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestEventPattern provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestEventPattern(ctx context.Context, params *cloudwatchevents.TestEventPatternInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.TestEventPatternOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestEventPattern")
	}

	var r0 *cloudwatchevents.TestEventPatternOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.TestEventPatternOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.TestEventPatternOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.TestEventPatternOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.TestEventPatternInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *cloudwatchevents.UntagResourceInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *cloudwatchevents.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UntagResourceInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UntagResourceInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UntagResourceInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApiDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApiDestination(ctx context.Context, params *cloudwatchevents.UpdateApiDestinationInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.UpdateApiDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApiDestination")
	}

	var r0 *cloudwatchevents.UpdateApiDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateApiDestinationInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.UpdateApiDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateApiDestinationInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.UpdateApiDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateApiDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UpdateApiDestinationInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateArchive(ctx context.Context, params *cloudwatchevents.UpdateArchiveInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.UpdateArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArchive")
	}

	var r0 *cloudwatchevents.UpdateArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateArchiveInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.UpdateArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateArchiveInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.UpdateArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UpdateArchiveInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnection(ctx context.Context, params *cloudwatchevents.UpdateConnectionInput, optFns ...func(*cloudwatchevents.Options)) (*cloudwatchevents.UpdateConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnection")
	}

	var r0 *cloudwatchevents.UpdateConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateConnectionInput, ...func(*cloudwatchevents.Options)) (*cloudwatchevents.UpdateConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *cloudwatchevents.UpdateConnectionInput, ...func(*cloudwatchevents.Options)) *cloudwatchevents.UpdateConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cloudwatchevents.UpdateConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *cloudwatchevents.UpdateConnectionInput, ...func(*cloudwatchevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
