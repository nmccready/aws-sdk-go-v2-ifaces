// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mgn "github.com/aws/aws-sdk-go-v2/service/mgn"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ArchiveApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ArchiveApplication(ctx context.Context, params *mgn.ArchiveApplicationInput, optFns ...func(*mgn.Options)) (*mgn.ArchiveApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveApplication")
	}

	var r0 *mgn.ArchiveApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ArchiveApplicationInput, ...func(*mgn.Options)) (*mgn.ArchiveApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ArchiveApplicationInput, ...func(*mgn.Options)) *mgn.ArchiveApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ArchiveApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ArchiveApplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArchiveWave provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ArchiveWave(ctx context.Context, params *mgn.ArchiveWaveInput, optFns ...func(*mgn.Options)) (*mgn.ArchiveWaveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveWave")
	}

	var r0 *mgn.ArchiveWaveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ArchiveWaveInput, ...func(*mgn.Options)) (*mgn.ArchiveWaveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ArchiveWaveInput, ...func(*mgn.Options)) *mgn.ArchiveWaveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ArchiveWaveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ArchiveWaveInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateApplications(ctx context.Context, params *mgn.AssociateApplicationsInput, optFns ...func(*mgn.Options)) (*mgn.AssociateApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateApplications")
	}

	var r0 *mgn.AssociateApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.AssociateApplicationsInput, ...func(*mgn.Options)) (*mgn.AssociateApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.AssociateApplicationsInput, ...func(*mgn.Options)) *mgn.AssociateApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.AssociateApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.AssociateApplicationsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateSourceServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateSourceServers(ctx context.Context, params *mgn.AssociateSourceServersInput, optFns ...func(*mgn.Options)) (*mgn.AssociateSourceServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateSourceServers")
	}

	var r0 *mgn.AssociateSourceServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.AssociateSourceServersInput, ...func(*mgn.Options)) (*mgn.AssociateSourceServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.AssociateSourceServersInput, ...func(*mgn.Options)) *mgn.AssociateSourceServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.AssociateSourceServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.AssociateSourceServersInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeServerLifeCycleState provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ChangeServerLifeCycleState(ctx context.Context, params *mgn.ChangeServerLifeCycleStateInput, optFns ...func(*mgn.Options)) (*mgn.ChangeServerLifeCycleStateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeServerLifeCycleState")
	}

	var r0 *mgn.ChangeServerLifeCycleStateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ChangeServerLifeCycleStateInput, ...func(*mgn.Options)) (*mgn.ChangeServerLifeCycleStateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ChangeServerLifeCycleStateInput, ...func(*mgn.Options)) *mgn.ChangeServerLifeCycleStateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ChangeServerLifeCycleStateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ChangeServerLifeCycleStateInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *mgn.CreateApplicationInput, optFns ...func(*mgn.Options)) (*mgn.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *mgn.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateApplicationInput, ...func(*mgn.Options)) (*mgn.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateApplicationInput, ...func(*mgn.Options)) *mgn.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.CreateApplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnector(ctx context.Context, params *mgn.CreateConnectorInput, optFns ...func(*mgn.Options)) (*mgn.CreateConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnector")
	}

	var r0 *mgn.CreateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateConnectorInput, ...func(*mgn.Options)) (*mgn.CreateConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateConnectorInput, ...func(*mgn.Options)) *mgn.CreateConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.CreateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.CreateConnectorInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLaunchConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLaunchConfigurationTemplate(ctx context.Context, params *mgn.CreateLaunchConfigurationTemplateInput, optFns ...func(*mgn.Options)) (*mgn.CreateLaunchConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLaunchConfigurationTemplate")
	}

	var r0 *mgn.CreateLaunchConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateLaunchConfigurationTemplateInput, ...func(*mgn.Options)) (*mgn.CreateLaunchConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateLaunchConfigurationTemplateInput, ...func(*mgn.Options)) *mgn.CreateLaunchConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.CreateLaunchConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.CreateLaunchConfigurationTemplateInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationConfigurationTemplate(ctx context.Context, params *mgn.CreateReplicationConfigurationTemplateInput, optFns ...func(*mgn.Options)) (*mgn.CreateReplicationConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationConfigurationTemplate")
	}

	var r0 *mgn.CreateReplicationConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateReplicationConfigurationTemplateInput, ...func(*mgn.Options)) (*mgn.CreateReplicationConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateReplicationConfigurationTemplateInput, ...func(*mgn.Options)) *mgn.CreateReplicationConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.CreateReplicationConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.CreateReplicationConfigurationTemplateInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWave provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWave(ctx context.Context, params *mgn.CreateWaveInput, optFns ...func(*mgn.Options)) (*mgn.CreateWaveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWave")
	}

	var r0 *mgn.CreateWaveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateWaveInput, ...func(*mgn.Options)) (*mgn.CreateWaveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.CreateWaveInput, ...func(*mgn.Options)) *mgn.CreateWaveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.CreateWaveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.CreateWaveInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *mgn.DeleteApplicationInput, optFns ...func(*mgn.Options)) (*mgn.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *mgn.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteApplicationInput, ...func(*mgn.Options)) (*mgn.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteApplicationInput, ...func(*mgn.Options)) *mgn.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DeleteApplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnector(ctx context.Context, params *mgn.DeleteConnectorInput, optFns ...func(*mgn.Options)) (*mgn.DeleteConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnector")
	}

	var r0 *mgn.DeleteConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteConnectorInput, ...func(*mgn.Options)) (*mgn.DeleteConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteConnectorInput, ...func(*mgn.Options)) *mgn.DeleteConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DeleteConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DeleteConnectorInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJob(ctx context.Context, params *mgn.DeleteJobInput, optFns ...func(*mgn.Options)) (*mgn.DeleteJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJob")
	}

	var r0 *mgn.DeleteJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteJobInput, ...func(*mgn.Options)) (*mgn.DeleteJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteJobInput, ...func(*mgn.Options)) *mgn.DeleteJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DeleteJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DeleteJobInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunchConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLaunchConfigurationTemplate(ctx context.Context, params *mgn.DeleteLaunchConfigurationTemplateInput, optFns ...func(*mgn.Options)) (*mgn.DeleteLaunchConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLaunchConfigurationTemplate")
	}

	var r0 *mgn.DeleteLaunchConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteLaunchConfigurationTemplateInput, ...func(*mgn.Options)) (*mgn.DeleteLaunchConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteLaunchConfigurationTemplateInput, ...func(*mgn.Options)) *mgn.DeleteLaunchConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DeleteLaunchConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DeleteLaunchConfigurationTemplateInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationConfigurationTemplate(ctx context.Context, params *mgn.DeleteReplicationConfigurationTemplateInput, optFns ...func(*mgn.Options)) (*mgn.DeleteReplicationConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationConfigurationTemplate")
	}

	var r0 *mgn.DeleteReplicationConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteReplicationConfigurationTemplateInput, ...func(*mgn.Options)) (*mgn.DeleteReplicationConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteReplicationConfigurationTemplateInput, ...func(*mgn.Options)) *mgn.DeleteReplicationConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DeleteReplicationConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DeleteReplicationConfigurationTemplateInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSourceServer(ctx context.Context, params *mgn.DeleteSourceServerInput, optFns ...func(*mgn.Options)) (*mgn.DeleteSourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSourceServer")
	}

	var r0 *mgn.DeleteSourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteSourceServerInput, ...func(*mgn.Options)) (*mgn.DeleteSourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteSourceServerInput, ...func(*mgn.Options)) *mgn.DeleteSourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DeleteSourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DeleteSourceServerInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVcenterClient provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVcenterClient(ctx context.Context, params *mgn.DeleteVcenterClientInput, optFns ...func(*mgn.Options)) (*mgn.DeleteVcenterClientOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVcenterClient")
	}

	var r0 *mgn.DeleteVcenterClientOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteVcenterClientInput, ...func(*mgn.Options)) (*mgn.DeleteVcenterClientOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteVcenterClientInput, ...func(*mgn.Options)) *mgn.DeleteVcenterClientOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DeleteVcenterClientOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DeleteVcenterClientInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWave provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWave(ctx context.Context, params *mgn.DeleteWaveInput, optFns ...func(*mgn.Options)) (*mgn.DeleteWaveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWave")
	}

	var r0 *mgn.DeleteWaveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteWaveInput, ...func(*mgn.Options)) (*mgn.DeleteWaveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DeleteWaveInput, ...func(*mgn.Options)) *mgn.DeleteWaveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DeleteWaveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DeleteWaveInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobLogItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeJobLogItems(ctx context.Context, params *mgn.DescribeJobLogItemsInput, optFns ...func(*mgn.Options)) (*mgn.DescribeJobLogItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJobLogItems")
	}

	var r0 *mgn.DescribeJobLogItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeJobLogItemsInput, ...func(*mgn.Options)) (*mgn.DescribeJobLogItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeJobLogItemsInput, ...func(*mgn.Options)) *mgn.DescribeJobLogItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DescribeJobLogItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DescribeJobLogItemsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeJobs(ctx context.Context, params *mgn.DescribeJobsInput, optFns ...func(*mgn.Options)) (*mgn.DescribeJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJobs")
	}

	var r0 *mgn.DescribeJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeJobsInput, ...func(*mgn.Options)) (*mgn.DescribeJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeJobsInput, ...func(*mgn.Options)) *mgn.DescribeJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DescribeJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DescribeJobsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLaunchConfigurationTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLaunchConfigurationTemplates(ctx context.Context, params *mgn.DescribeLaunchConfigurationTemplatesInput, optFns ...func(*mgn.Options)) (*mgn.DescribeLaunchConfigurationTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLaunchConfigurationTemplates")
	}

	var r0 *mgn.DescribeLaunchConfigurationTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeLaunchConfigurationTemplatesInput, ...func(*mgn.Options)) (*mgn.DescribeLaunchConfigurationTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeLaunchConfigurationTemplatesInput, ...func(*mgn.Options)) *mgn.DescribeLaunchConfigurationTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DescribeLaunchConfigurationTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DescribeLaunchConfigurationTemplatesInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationConfigurationTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationConfigurationTemplates(ctx context.Context, params *mgn.DescribeReplicationConfigurationTemplatesInput, optFns ...func(*mgn.Options)) (*mgn.DescribeReplicationConfigurationTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationConfigurationTemplates")
	}

	var r0 *mgn.DescribeReplicationConfigurationTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeReplicationConfigurationTemplatesInput, ...func(*mgn.Options)) (*mgn.DescribeReplicationConfigurationTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeReplicationConfigurationTemplatesInput, ...func(*mgn.Options)) *mgn.DescribeReplicationConfigurationTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DescribeReplicationConfigurationTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DescribeReplicationConfigurationTemplatesInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSourceServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSourceServers(ctx context.Context, params *mgn.DescribeSourceServersInput, optFns ...func(*mgn.Options)) (*mgn.DescribeSourceServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSourceServers")
	}

	var r0 *mgn.DescribeSourceServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeSourceServersInput, ...func(*mgn.Options)) (*mgn.DescribeSourceServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeSourceServersInput, ...func(*mgn.Options)) *mgn.DescribeSourceServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DescribeSourceServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DescribeSourceServersInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVcenterClients provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVcenterClients(ctx context.Context, params *mgn.DescribeVcenterClientsInput, optFns ...func(*mgn.Options)) (*mgn.DescribeVcenterClientsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVcenterClients")
	}

	var r0 *mgn.DescribeVcenterClientsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeVcenterClientsInput, ...func(*mgn.Options)) (*mgn.DescribeVcenterClientsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DescribeVcenterClientsInput, ...func(*mgn.Options)) *mgn.DescribeVcenterClientsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DescribeVcenterClientsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DescribeVcenterClientsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateApplications(ctx context.Context, params *mgn.DisassociateApplicationsInput, optFns ...func(*mgn.Options)) (*mgn.DisassociateApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateApplications")
	}

	var r0 *mgn.DisassociateApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DisassociateApplicationsInput, ...func(*mgn.Options)) (*mgn.DisassociateApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DisassociateApplicationsInput, ...func(*mgn.Options)) *mgn.DisassociateApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DisassociateApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DisassociateApplicationsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateSourceServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateSourceServers(ctx context.Context, params *mgn.DisassociateSourceServersInput, optFns ...func(*mgn.Options)) (*mgn.DisassociateSourceServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateSourceServers")
	}

	var r0 *mgn.DisassociateSourceServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DisassociateSourceServersInput, ...func(*mgn.Options)) (*mgn.DisassociateSourceServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DisassociateSourceServersInput, ...func(*mgn.Options)) *mgn.DisassociateSourceServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DisassociateSourceServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DisassociateSourceServersInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisconnectFromService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisconnectFromService(ctx context.Context, params *mgn.DisconnectFromServiceInput, optFns ...func(*mgn.Options)) (*mgn.DisconnectFromServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisconnectFromService")
	}

	var r0 *mgn.DisconnectFromServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DisconnectFromServiceInput, ...func(*mgn.Options)) (*mgn.DisconnectFromServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.DisconnectFromServiceInput, ...func(*mgn.Options)) *mgn.DisconnectFromServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.DisconnectFromServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.DisconnectFromServiceInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FinalizeCutover provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FinalizeCutover(ctx context.Context, params *mgn.FinalizeCutoverInput, optFns ...func(*mgn.Options)) (*mgn.FinalizeCutoverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FinalizeCutover")
	}

	var r0 *mgn.FinalizeCutoverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.FinalizeCutoverInput, ...func(*mgn.Options)) (*mgn.FinalizeCutoverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.FinalizeCutoverInput, ...func(*mgn.Options)) *mgn.FinalizeCutoverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.FinalizeCutoverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.FinalizeCutoverInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLaunchConfiguration(ctx context.Context, params *mgn.GetLaunchConfigurationInput, optFns ...func(*mgn.Options)) (*mgn.GetLaunchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunchConfiguration")
	}

	var r0 *mgn.GetLaunchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.GetLaunchConfigurationInput, ...func(*mgn.Options)) (*mgn.GetLaunchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.GetLaunchConfigurationInput, ...func(*mgn.Options)) *mgn.GetLaunchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.GetLaunchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.GetLaunchConfigurationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReplicationConfiguration(ctx context.Context, params *mgn.GetReplicationConfigurationInput, optFns ...func(*mgn.Options)) (*mgn.GetReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationConfiguration")
	}

	var r0 *mgn.GetReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.GetReplicationConfigurationInput, ...func(*mgn.Options)) (*mgn.GetReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.GetReplicationConfigurationInput, ...func(*mgn.Options)) *mgn.GetReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.GetReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.GetReplicationConfigurationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InitializeService(ctx context.Context, params *mgn.InitializeServiceInput, optFns ...func(*mgn.Options)) (*mgn.InitializeServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitializeService")
	}

	var r0 *mgn.InitializeServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.InitializeServiceInput, ...func(*mgn.Options)) (*mgn.InitializeServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.InitializeServiceInput, ...func(*mgn.Options)) *mgn.InitializeServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.InitializeServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.InitializeServiceInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *mgn.ListApplicationsInput, optFns ...func(*mgn.Options)) (*mgn.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *mgn.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListApplicationsInput, ...func(*mgn.Options)) (*mgn.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListApplicationsInput, ...func(*mgn.Options)) *mgn.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListApplicationsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectors(ctx context.Context, params *mgn.ListConnectorsInput, optFns ...func(*mgn.Options)) (*mgn.ListConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 *mgn.ListConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListConnectorsInput, ...func(*mgn.Options)) (*mgn.ListConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListConnectorsInput, ...func(*mgn.Options)) *mgn.ListConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListConnectorsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExportErrors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExportErrors(ctx context.Context, params *mgn.ListExportErrorsInput, optFns ...func(*mgn.Options)) (*mgn.ListExportErrorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExportErrors")
	}

	var r0 *mgn.ListExportErrorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListExportErrorsInput, ...func(*mgn.Options)) (*mgn.ListExportErrorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListExportErrorsInput, ...func(*mgn.Options)) *mgn.ListExportErrorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListExportErrorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListExportErrorsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExports(ctx context.Context, params *mgn.ListExportsInput, optFns ...func(*mgn.Options)) (*mgn.ListExportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExports")
	}

	var r0 *mgn.ListExportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListExportsInput, ...func(*mgn.Options)) (*mgn.ListExportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListExportsInput, ...func(*mgn.Options)) *mgn.ListExportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListExportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListExportsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImportErrors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImportErrors(ctx context.Context, params *mgn.ListImportErrorsInput, optFns ...func(*mgn.Options)) (*mgn.ListImportErrorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImportErrors")
	}

	var r0 *mgn.ListImportErrorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListImportErrorsInput, ...func(*mgn.Options)) (*mgn.ListImportErrorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListImportErrorsInput, ...func(*mgn.Options)) *mgn.ListImportErrorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListImportErrorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListImportErrorsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImports(ctx context.Context, params *mgn.ListImportsInput, optFns ...func(*mgn.Options)) (*mgn.ListImportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImports")
	}

	var r0 *mgn.ListImportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListImportsInput, ...func(*mgn.Options)) (*mgn.ListImportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListImportsInput, ...func(*mgn.Options)) *mgn.ListImportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListImportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListImportsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListManagedAccounts(ctx context.Context, params *mgn.ListManagedAccountsInput, optFns ...func(*mgn.Options)) (*mgn.ListManagedAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListManagedAccounts")
	}

	var r0 *mgn.ListManagedAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListManagedAccountsInput, ...func(*mgn.Options)) (*mgn.ListManagedAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListManagedAccountsInput, ...func(*mgn.Options)) *mgn.ListManagedAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListManagedAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListManagedAccountsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceServerActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSourceServerActions(ctx context.Context, params *mgn.ListSourceServerActionsInput, optFns ...func(*mgn.Options)) (*mgn.ListSourceServerActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSourceServerActions")
	}

	var r0 *mgn.ListSourceServerActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListSourceServerActionsInput, ...func(*mgn.Options)) (*mgn.ListSourceServerActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListSourceServerActionsInput, ...func(*mgn.Options)) *mgn.ListSourceServerActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListSourceServerActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListSourceServerActionsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *mgn.ListTagsForResourceInput, optFns ...func(*mgn.Options)) (*mgn.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *mgn.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListTagsForResourceInput, ...func(*mgn.Options)) (*mgn.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListTagsForResourceInput, ...func(*mgn.Options)) *mgn.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListTagsForResourceInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplateActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplateActions(ctx context.Context, params *mgn.ListTemplateActionsInput, optFns ...func(*mgn.Options)) (*mgn.ListTemplateActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplateActions")
	}

	var r0 *mgn.ListTemplateActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListTemplateActionsInput, ...func(*mgn.Options)) (*mgn.ListTemplateActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListTemplateActionsInput, ...func(*mgn.Options)) *mgn.ListTemplateActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListTemplateActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListTemplateActionsInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWaves provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWaves(ctx context.Context, params *mgn.ListWavesInput, optFns ...func(*mgn.Options)) (*mgn.ListWavesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWaves")
	}

	var r0 *mgn.ListWavesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListWavesInput, ...func(*mgn.Options)) (*mgn.ListWavesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ListWavesInput, ...func(*mgn.Options)) *mgn.ListWavesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ListWavesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ListWavesInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAsArchived provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) MarkAsArchived(ctx context.Context, params *mgn.MarkAsArchivedInput, optFns ...func(*mgn.Options)) (*mgn.MarkAsArchivedOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MarkAsArchived")
	}

	var r0 *mgn.MarkAsArchivedOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.MarkAsArchivedInput, ...func(*mgn.Options)) (*mgn.MarkAsArchivedOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.MarkAsArchivedInput, ...func(*mgn.Options)) *mgn.MarkAsArchivedOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.MarkAsArchivedOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.MarkAsArchivedInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() mgn.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 mgn.Options
	if rf, ok := ret.Get(0).(func() mgn.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mgn.Options)
	}

	return r0
}

// PauseReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PauseReplication(ctx context.Context, params *mgn.PauseReplicationInput, optFns ...func(*mgn.Options)) (*mgn.PauseReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PauseReplication")
	}

	var r0 *mgn.PauseReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.PauseReplicationInput, ...func(*mgn.Options)) (*mgn.PauseReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.PauseReplicationInput, ...func(*mgn.Options)) *mgn.PauseReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.PauseReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.PauseReplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSourceServerAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSourceServerAction(ctx context.Context, params *mgn.PutSourceServerActionInput, optFns ...func(*mgn.Options)) (*mgn.PutSourceServerActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSourceServerAction")
	}

	var r0 *mgn.PutSourceServerActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.PutSourceServerActionInput, ...func(*mgn.Options)) (*mgn.PutSourceServerActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.PutSourceServerActionInput, ...func(*mgn.Options)) *mgn.PutSourceServerActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.PutSourceServerActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.PutSourceServerActionInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutTemplateAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutTemplateAction(ctx context.Context, params *mgn.PutTemplateActionInput, optFns ...func(*mgn.Options)) (*mgn.PutTemplateActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutTemplateAction")
	}

	var r0 *mgn.PutTemplateActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.PutTemplateActionInput, ...func(*mgn.Options)) (*mgn.PutTemplateActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.PutTemplateActionInput, ...func(*mgn.Options)) *mgn.PutTemplateActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.PutTemplateActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.PutTemplateActionInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSourceServerAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveSourceServerAction(ctx context.Context, params *mgn.RemoveSourceServerActionInput, optFns ...func(*mgn.Options)) (*mgn.RemoveSourceServerActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSourceServerAction")
	}

	var r0 *mgn.RemoveSourceServerActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.RemoveSourceServerActionInput, ...func(*mgn.Options)) (*mgn.RemoveSourceServerActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.RemoveSourceServerActionInput, ...func(*mgn.Options)) *mgn.RemoveSourceServerActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.RemoveSourceServerActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.RemoveSourceServerActionInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTemplateAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTemplateAction(ctx context.Context, params *mgn.RemoveTemplateActionInput, optFns ...func(*mgn.Options)) (*mgn.RemoveTemplateActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTemplateAction")
	}

	var r0 *mgn.RemoveTemplateActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.RemoveTemplateActionInput, ...func(*mgn.Options)) (*mgn.RemoveTemplateActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.RemoveTemplateActionInput, ...func(*mgn.Options)) *mgn.RemoveTemplateActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.RemoveTemplateActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.RemoveTemplateActionInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResumeReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResumeReplication(ctx context.Context, params *mgn.ResumeReplicationInput, optFns ...func(*mgn.Options)) (*mgn.ResumeReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResumeReplication")
	}

	var r0 *mgn.ResumeReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ResumeReplicationInput, ...func(*mgn.Options)) (*mgn.ResumeReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.ResumeReplicationInput, ...func(*mgn.Options)) *mgn.ResumeReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.ResumeReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.ResumeReplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryDataReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RetryDataReplication(ctx context.Context, params *mgn.RetryDataReplicationInput, optFns ...func(*mgn.Options)) (*mgn.RetryDataReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetryDataReplication")
	}

	var r0 *mgn.RetryDataReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.RetryDataReplicationInput, ...func(*mgn.Options)) (*mgn.RetryDataReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.RetryDataReplicationInput, ...func(*mgn.Options)) *mgn.RetryDataReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.RetryDataReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.RetryDataReplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCutover provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartCutover(ctx context.Context, params *mgn.StartCutoverInput, optFns ...func(*mgn.Options)) (*mgn.StartCutoverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCutover")
	}

	var r0 *mgn.StartCutoverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartCutoverInput, ...func(*mgn.Options)) (*mgn.StartCutoverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartCutoverInput, ...func(*mgn.Options)) *mgn.StartCutoverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.StartCutoverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.StartCutoverInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartExport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartExport(ctx context.Context, params *mgn.StartExportInput, optFns ...func(*mgn.Options)) (*mgn.StartExportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartExport")
	}

	var r0 *mgn.StartExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartExportInput, ...func(*mgn.Options)) (*mgn.StartExportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartExportInput, ...func(*mgn.Options)) *mgn.StartExportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.StartExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.StartExportInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartImport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartImport(ctx context.Context, params *mgn.StartImportInput, optFns ...func(*mgn.Options)) (*mgn.StartImportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartImport")
	}

	var r0 *mgn.StartImportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartImportInput, ...func(*mgn.Options)) (*mgn.StartImportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartImportInput, ...func(*mgn.Options)) *mgn.StartImportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.StartImportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.StartImportInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartReplication(ctx context.Context, params *mgn.StartReplicationInput, optFns ...func(*mgn.Options)) (*mgn.StartReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartReplication")
	}

	var r0 *mgn.StartReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartReplicationInput, ...func(*mgn.Options)) (*mgn.StartReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartReplicationInput, ...func(*mgn.Options)) *mgn.StartReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.StartReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.StartReplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartTest provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTest(ctx context.Context, params *mgn.StartTestInput, optFns ...func(*mgn.Options)) (*mgn.StartTestOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTest")
	}

	var r0 *mgn.StartTestOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartTestInput, ...func(*mgn.Options)) (*mgn.StartTestOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StartTestInput, ...func(*mgn.Options)) *mgn.StartTestOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.StartTestOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.StartTestInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopReplication(ctx context.Context, params *mgn.StopReplicationInput, optFns ...func(*mgn.Options)) (*mgn.StopReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopReplication")
	}

	var r0 *mgn.StopReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StopReplicationInput, ...func(*mgn.Options)) (*mgn.StopReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.StopReplicationInput, ...func(*mgn.Options)) *mgn.StopReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.StopReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.StopReplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *mgn.TagResourceInput, optFns ...func(*mgn.Options)) (*mgn.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *mgn.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.TagResourceInput, ...func(*mgn.Options)) (*mgn.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.TagResourceInput, ...func(*mgn.Options)) *mgn.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.TagResourceInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateTargetInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TerminateTargetInstances(ctx context.Context, params *mgn.TerminateTargetInstancesInput, optFns ...func(*mgn.Options)) (*mgn.TerminateTargetInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateTargetInstances")
	}

	var r0 *mgn.TerminateTargetInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.TerminateTargetInstancesInput, ...func(*mgn.Options)) (*mgn.TerminateTargetInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.TerminateTargetInstancesInput, ...func(*mgn.Options)) *mgn.TerminateTargetInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.TerminateTargetInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.TerminateTargetInstancesInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnarchiveApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnarchiveApplication(ctx context.Context, params *mgn.UnarchiveApplicationInput, optFns ...func(*mgn.Options)) (*mgn.UnarchiveApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnarchiveApplication")
	}

	var r0 *mgn.UnarchiveApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UnarchiveApplicationInput, ...func(*mgn.Options)) (*mgn.UnarchiveApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UnarchiveApplicationInput, ...func(*mgn.Options)) *mgn.UnarchiveApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UnarchiveApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UnarchiveApplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnarchiveWave provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnarchiveWave(ctx context.Context, params *mgn.UnarchiveWaveInput, optFns ...func(*mgn.Options)) (*mgn.UnarchiveWaveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnarchiveWave")
	}

	var r0 *mgn.UnarchiveWaveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UnarchiveWaveInput, ...func(*mgn.Options)) (*mgn.UnarchiveWaveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UnarchiveWaveInput, ...func(*mgn.Options)) *mgn.UnarchiveWaveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UnarchiveWaveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UnarchiveWaveInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *mgn.UntagResourceInput, optFns ...func(*mgn.Options)) (*mgn.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *mgn.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UntagResourceInput, ...func(*mgn.Options)) (*mgn.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UntagResourceInput, ...func(*mgn.Options)) *mgn.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UntagResourceInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *mgn.UpdateApplicationInput, optFns ...func(*mgn.Options)) (*mgn.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *mgn.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateApplicationInput, ...func(*mgn.Options)) (*mgn.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateApplicationInput, ...func(*mgn.Options)) *mgn.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateApplicationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnector(ctx context.Context, params *mgn.UpdateConnectorInput, optFns ...func(*mgn.Options)) (*mgn.UpdateConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnector")
	}

	var r0 *mgn.UpdateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateConnectorInput, ...func(*mgn.Options)) (*mgn.UpdateConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateConnectorInput, ...func(*mgn.Options)) *mgn.UpdateConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateConnectorInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLaunchConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLaunchConfiguration(ctx context.Context, params *mgn.UpdateLaunchConfigurationInput, optFns ...func(*mgn.Options)) (*mgn.UpdateLaunchConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchConfiguration")
	}

	var r0 *mgn.UpdateLaunchConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateLaunchConfigurationInput, ...func(*mgn.Options)) (*mgn.UpdateLaunchConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateLaunchConfigurationInput, ...func(*mgn.Options)) *mgn.UpdateLaunchConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateLaunchConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateLaunchConfigurationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLaunchConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLaunchConfigurationTemplate(ctx context.Context, params *mgn.UpdateLaunchConfigurationTemplateInput, optFns ...func(*mgn.Options)) (*mgn.UpdateLaunchConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunchConfigurationTemplate")
	}

	var r0 *mgn.UpdateLaunchConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateLaunchConfigurationTemplateInput, ...func(*mgn.Options)) (*mgn.UpdateLaunchConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateLaunchConfigurationTemplateInput, ...func(*mgn.Options)) *mgn.UpdateLaunchConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateLaunchConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateLaunchConfigurationTemplateInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReplicationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReplicationConfiguration(ctx context.Context, params *mgn.UpdateReplicationConfigurationInput, optFns ...func(*mgn.Options)) (*mgn.UpdateReplicationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReplicationConfiguration")
	}

	var r0 *mgn.UpdateReplicationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateReplicationConfigurationInput, ...func(*mgn.Options)) (*mgn.UpdateReplicationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateReplicationConfigurationInput, ...func(*mgn.Options)) *mgn.UpdateReplicationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateReplicationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateReplicationConfigurationInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReplicationConfigurationTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReplicationConfigurationTemplate(ctx context.Context, params *mgn.UpdateReplicationConfigurationTemplateInput, optFns ...func(*mgn.Options)) (*mgn.UpdateReplicationConfigurationTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReplicationConfigurationTemplate")
	}

	var r0 *mgn.UpdateReplicationConfigurationTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateReplicationConfigurationTemplateInput, ...func(*mgn.Options)) (*mgn.UpdateReplicationConfigurationTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateReplicationConfigurationTemplateInput, ...func(*mgn.Options)) *mgn.UpdateReplicationConfigurationTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateReplicationConfigurationTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateReplicationConfigurationTemplateInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSourceServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSourceServer(ctx context.Context, params *mgn.UpdateSourceServerInput, optFns ...func(*mgn.Options)) (*mgn.UpdateSourceServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSourceServer")
	}

	var r0 *mgn.UpdateSourceServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateSourceServerInput, ...func(*mgn.Options)) (*mgn.UpdateSourceServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateSourceServerInput, ...func(*mgn.Options)) *mgn.UpdateSourceServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateSourceServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateSourceServerInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSourceServerReplicationType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSourceServerReplicationType(ctx context.Context, params *mgn.UpdateSourceServerReplicationTypeInput, optFns ...func(*mgn.Options)) (*mgn.UpdateSourceServerReplicationTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSourceServerReplicationType")
	}

	var r0 *mgn.UpdateSourceServerReplicationTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateSourceServerReplicationTypeInput, ...func(*mgn.Options)) (*mgn.UpdateSourceServerReplicationTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateSourceServerReplicationTypeInput, ...func(*mgn.Options)) *mgn.UpdateSourceServerReplicationTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateSourceServerReplicationTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateSourceServerReplicationTypeInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWave provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWave(ctx context.Context, params *mgn.UpdateWaveInput, optFns ...func(*mgn.Options)) (*mgn.UpdateWaveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWave")
	}

	var r0 *mgn.UpdateWaveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateWaveInput, ...func(*mgn.Options)) (*mgn.UpdateWaveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mgn.UpdateWaveInput, ...func(*mgn.Options)) *mgn.UpdateWaveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mgn.UpdateWaveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mgn.UpdateWaveInput, ...func(*mgn.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
