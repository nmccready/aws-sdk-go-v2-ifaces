// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	ssmcontacts "github.com/aws/aws-sdk-go-v2/service/ssmcontacts"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptPage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptPage(ctx context.Context, params *ssmcontacts.AcceptPageInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.AcceptPageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptPage")
	}

	var r0 *ssmcontacts.AcceptPageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.AcceptPageInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.AcceptPageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.AcceptPageInput, ...func(*ssmcontacts.Options)) *ssmcontacts.AcceptPageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.AcceptPageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.AcceptPageInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ActivateContactChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateContactChannel(ctx context.Context, params *ssmcontacts.ActivateContactChannelInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ActivateContactChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateContactChannel")
	}

	var r0 *ssmcontacts.ActivateContactChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ActivateContactChannelInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ActivateContactChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ActivateContactChannelInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ActivateContactChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ActivateContactChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ActivateContactChannelInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContact(ctx context.Context, params *ssmcontacts.CreateContactInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.CreateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContact")
	}

	var r0 *ssmcontacts.CreateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.CreateContactInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.CreateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.CreateContactInput, ...func(*ssmcontacts.Options)) *ssmcontacts.CreateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.CreateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.CreateContactInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContactChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContactChannel(ctx context.Context, params *ssmcontacts.CreateContactChannelInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.CreateContactChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContactChannel")
	}

	var r0 *ssmcontacts.CreateContactChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.CreateContactChannelInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.CreateContactChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.CreateContactChannelInput, ...func(*ssmcontacts.Options)) *ssmcontacts.CreateContactChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.CreateContactChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.CreateContactChannelInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRotation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRotation(ctx context.Context, params *ssmcontacts.CreateRotationInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.CreateRotationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRotation")
	}

	var r0 *ssmcontacts.CreateRotationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.CreateRotationInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.CreateRotationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.CreateRotationInput, ...func(*ssmcontacts.Options)) *ssmcontacts.CreateRotationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.CreateRotationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.CreateRotationInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRotationOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRotationOverride(ctx context.Context, params *ssmcontacts.CreateRotationOverrideInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.CreateRotationOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRotationOverride")
	}

	var r0 *ssmcontacts.CreateRotationOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.CreateRotationOverrideInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.CreateRotationOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.CreateRotationOverrideInput, ...func(*ssmcontacts.Options)) *ssmcontacts.CreateRotationOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.CreateRotationOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.CreateRotationOverrideInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateContactChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeactivateContactChannel(ctx context.Context, params *ssmcontacts.DeactivateContactChannelInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.DeactivateContactChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateContactChannel")
	}

	var r0 *ssmcontacts.DeactivateContactChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeactivateContactChannelInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.DeactivateContactChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeactivateContactChannelInput, ...func(*ssmcontacts.Options)) *ssmcontacts.DeactivateContactChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.DeactivateContactChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.DeactivateContactChannelInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContact(ctx context.Context, params *ssmcontacts.DeleteContactInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.DeleteContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContact")
	}

	var r0 *ssmcontacts.DeleteContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeleteContactInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.DeleteContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeleteContactInput, ...func(*ssmcontacts.Options)) *ssmcontacts.DeleteContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.DeleteContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.DeleteContactInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContactChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContactChannel(ctx context.Context, params *ssmcontacts.DeleteContactChannelInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.DeleteContactChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContactChannel")
	}

	var r0 *ssmcontacts.DeleteContactChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeleteContactChannelInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.DeleteContactChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeleteContactChannelInput, ...func(*ssmcontacts.Options)) *ssmcontacts.DeleteContactChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.DeleteContactChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.DeleteContactChannelInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRotation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRotation(ctx context.Context, params *ssmcontacts.DeleteRotationInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.DeleteRotationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRotation")
	}

	var r0 *ssmcontacts.DeleteRotationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeleteRotationInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.DeleteRotationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeleteRotationInput, ...func(*ssmcontacts.Options)) *ssmcontacts.DeleteRotationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.DeleteRotationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.DeleteRotationInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRotationOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRotationOverride(ctx context.Context, params *ssmcontacts.DeleteRotationOverrideInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.DeleteRotationOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRotationOverride")
	}

	var r0 *ssmcontacts.DeleteRotationOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeleteRotationOverrideInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.DeleteRotationOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DeleteRotationOverrideInput, ...func(*ssmcontacts.Options)) *ssmcontacts.DeleteRotationOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.DeleteRotationOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.DeleteRotationOverrideInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEngagement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEngagement(ctx context.Context, params *ssmcontacts.DescribeEngagementInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.DescribeEngagementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEngagement")
	}

	var r0 *ssmcontacts.DescribeEngagementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DescribeEngagementInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.DescribeEngagementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DescribeEngagementInput, ...func(*ssmcontacts.Options)) *ssmcontacts.DescribeEngagementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.DescribeEngagementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.DescribeEngagementInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePage(ctx context.Context, params *ssmcontacts.DescribePageInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.DescribePageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePage")
	}

	var r0 *ssmcontacts.DescribePageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DescribePageInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.DescribePageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.DescribePageInput, ...func(*ssmcontacts.Options)) *ssmcontacts.DescribePageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.DescribePageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.DescribePageInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContact(ctx context.Context, params *ssmcontacts.GetContactInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.GetContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContact")
	}

	var r0 *ssmcontacts.GetContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetContactInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.GetContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetContactInput, ...func(*ssmcontacts.Options)) *ssmcontacts.GetContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.GetContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.GetContactInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContactChannel(ctx context.Context, params *ssmcontacts.GetContactChannelInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.GetContactChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactChannel")
	}

	var r0 *ssmcontacts.GetContactChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetContactChannelInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.GetContactChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetContactChannelInput, ...func(*ssmcontacts.Options)) *ssmcontacts.GetContactChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.GetContactChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.GetContactChannelInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContactPolicy(ctx context.Context, params *ssmcontacts.GetContactPolicyInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.GetContactPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactPolicy")
	}

	var r0 *ssmcontacts.GetContactPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetContactPolicyInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.GetContactPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetContactPolicyInput, ...func(*ssmcontacts.Options)) *ssmcontacts.GetContactPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.GetContactPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.GetContactPolicyInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRotation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRotation(ctx context.Context, params *ssmcontacts.GetRotationInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.GetRotationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRotation")
	}

	var r0 *ssmcontacts.GetRotationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetRotationInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.GetRotationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetRotationInput, ...func(*ssmcontacts.Options)) *ssmcontacts.GetRotationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.GetRotationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.GetRotationInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRotationOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRotationOverride(ctx context.Context, params *ssmcontacts.GetRotationOverrideInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.GetRotationOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRotationOverride")
	}

	var r0 *ssmcontacts.GetRotationOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetRotationOverrideInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.GetRotationOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.GetRotationOverrideInput, ...func(*ssmcontacts.Options)) *ssmcontacts.GetRotationOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.GetRotationOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.GetRotationOverrideInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContactChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContactChannels(ctx context.Context, params *ssmcontacts.ListContactChannelsInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListContactChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContactChannels")
	}

	var r0 *ssmcontacts.ListContactChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListContactChannelsInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListContactChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListContactChannelsInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListContactChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListContactChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListContactChannelsInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContacts(ctx context.Context, params *ssmcontacts.ListContactsInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListContactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContacts")
	}

	var r0 *ssmcontacts.ListContactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListContactsInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListContactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListContactsInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListContactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListContactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListContactsInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngagements provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEngagements(ctx context.Context, params *ssmcontacts.ListEngagementsInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListEngagementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEngagements")
	}

	var r0 *ssmcontacts.ListEngagementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListEngagementsInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListEngagementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListEngagementsInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListEngagementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListEngagementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListEngagementsInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPageReceipts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPageReceipts(ctx context.Context, params *ssmcontacts.ListPageReceiptsInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPageReceiptsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPageReceipts")
	}

	var r0 *ssmcontacts.ListPageReceiptsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPageReceiptsInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPageReceiptsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPageReceiptsInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListPageReceiptsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListPageReceiptsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListPageReceiptsInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPageResolutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPageResolutions(ctx context.Context, params *ssmcontacts.ListPageResolutionsInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPageResolutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPageResolutions")
	}

	var r0 *ssmcontacts.ListPageResolutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPageResolutionsInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPageResolutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPageResolutionsInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListPageResolutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListPageResolutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListPageResolutionsInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPagesByContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPagesByContact(ctx context.Context, params *ssmcontacts.ListPagesByContactInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPagesByContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPagesByContact")
	}

	var r0 *ssmcontacts.ListPagesByContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPagesByContactInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPagesByContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPagesByContactInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListPagesByContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListPagesByContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListPagesByContactInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPagesByEngagement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPagesByEngagement(ctx context.Context, params *ssmcontacts.ListPagesByEngagementInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPagesByEngagementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPagesByEngagement")
	}

	var r0 *ssmcontacts.ListPagesByEngagementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPagesByEngagementInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPagesByEngagementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPagesByEngagementInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListPagesByEngagementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListPagesByEngagementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListPagesByEngagementInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPreviewRotationShifts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPreviewRotationShifts(ctx context.Context, params *ssmcontacts.ListPreviewRotationShiftsInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPreviewRotationShiftsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPreviewRotationShifts")
	}

	var r0 *ssmcontacts.ListPreviewRotationShiftsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPreviewRotationShiftsInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListPreviewRotationShiftsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListPreviewRotationShiftsInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListPreviewRotationShiftsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListPreviewRotationShiftsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListPreviewRotationShiftsInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRotationOverrides provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRotationOverrides(ctx context.Context, params *ssmcontacts.ListRotationOverridesInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListRotationOverridesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRotationOverrides")
	}

	var r0 *ssmcontacts.ListRotationOverridesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListRotationOverridesInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListRotationOverridesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListRotationOverridesInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListRotationOverridesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListRotationOverridesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListRotationOverridesInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRotationShifts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRotationShifts(ctx context.Context, params *ssmcontacts.ListRotationShiftsInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListRotationShiftsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRotationShifts")
	}

	var r0 *ssmcontacts.ListRotationShiftsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListRotationShiftsInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListRotationShiftsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListRotationShiftsInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListRotationShiftsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListRotationShiftsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListRotationShiftsInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRotations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRotations(ctx context.Context, params *ssmcontacts.ListRotationsInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListRotationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRotations")
	}

	var r0 *ssmcontacts.ListRotationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListRotationsInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListRotationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListRotationsInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListRotationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListRotationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListRotationsInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *ssmcontacts.ListTagsForResourceInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *ssmcontacts.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListTagsForResourceInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.ListTagsForResourceInput, ...func(*ssmcontacts.Options)) *ssmcontacts.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.ListTagsForResourceInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() ssmcontacts.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 ssmcontacts.Options
	if rf, ok := ret.Get(0).(func() ssmcontacts.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ssmcontacts.Options)
	}

	return r0
}

// PutContactPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutContactPolicy(ctx context.Context, params *ssmcontacts.PutContactPolicyInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.PutContactPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutContactPolicy")
	}

	var r0 *ssmcontacts.PutContactPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.PutContactPolicyInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.PutContactPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.PutContactPolicyInput, ...func(*ssmcontacts.Options)) *ssmcontacts.PutContactPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.PutContactPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.PutContactPolicyInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendActivationCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendActivationCode(ctx context.Context, params *ssmcontacts.SendActivationCodeInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.SendActivationCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendActivationCode")
	}

	var r0 *ssmcontacts.SendActivationCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.SendActivationCodeInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.SendActivationCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.SendActivationCodeInput, ...func(*ssmcontacts.Options)) *ssmcontacts.SendActivationCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.SendActivationCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.SendActivationCodeInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartEngagement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartEngagement(ctx context.Context, params *ssmcontacts.StartEngagementInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.StartEngagementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartEngagement")
	}

	var r0 *ssmcontacts.StartEngagementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.StartEngagementInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.StartEngagementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.StartEngagementInput, ...func(*ssmcontacts.Options)) *ssmcontacts.StartEngagementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.StartEngagementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.StartEngagementInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopEngagement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopEngagement(ctx context.Context, params *ssmcontacts.StopEngagementInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.StopEngagementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopEngagement")
	}

	var r0 *ssmcontacts.StopEngagementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.StopEngagementInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.StopEngagementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.StopEngagementInput, ...func(*ssmcontacts.Options)) *ssmcontacts.StopEngagementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.StopEngagementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.StopEngagementInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *ssmcontacts.TagResourceInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *ssmcontacts.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.TagResourceInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.TagResourceInput, ...func(*ssmcontacts.Options)) *ssmcontacts.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.TagResourceInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *ssmcontacts.UntagResourceInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *ssmcontacts.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.UntagResourceInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.UntagResourceInput, ...func(*ssmcontacts.Options)) *ssmcontacts.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.UntagResourceInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContact(ctx context.Context, params *ssmcontacts.UpdateContactInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.UpdateContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContact")
	}

	var r0 *ssmcontacts.UpdateContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.UpdateContactInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.UpdateContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.UpdateContactInput, ...func(*ssmcontacts.Options)) *ssmcontacts.UpdateContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.UpdateContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.UpdateContactInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContactChannel(ctx context.Context, params *ssmcontacts.UpdateContactChannelInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.UpdateContactChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContactChannel")
	}

	var r0 *ssmcontacts.UpdateContactChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.UpdateContactChannelInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.UpdateContactChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.UpdateContactChannelInput, ...func(*ssmcontacts.Options)) *ssmcontacts.UpdateContactChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.UpdateContactChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.UpdateContactChannelInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRotation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRotation(ctx context.Context, params *ssmcontacts.UpdateRotationInput, optFns ...func(*ssmcontacts.Options)) (*ssmcontacts.UpdateRotationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRotation")
	}

	var r0 *ssmcontacts.UpdateRotationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.UpdateRotationInput, ...func(*ssmcontacts.Options)) (*ssmcontacts.UpdateRotationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmcontacts.UpdateRotationInput, ...func(*ssmcontacts.Options)) *ssmcontacts.UpdateRotationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmcontacts.UpdateRotationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmcontacts.UpdateRotationInput, ...func(*ssmcontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
