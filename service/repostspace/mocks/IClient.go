// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	repostspace "github.com/aws/aws-sdk-go-v2/service/repostspace"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchAddRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchAddRole(ctx context.Context, params *repostspace.BatchAddRoleInput, optFns ...func(*repostspace.Options)) (*repostspace.BatchAddRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchAddRole")
	}

	var r0 *repostspace.BatchAddRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.BatchAddRoleInput, ...func(*repostspace.Options)) (*repostspace.BatchAddRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.BatchAddRoleInput, ...func(*repostspace.Options)) *repostspace.BatchAddRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.BatchAddRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.BatchAddRoleInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchRemoveRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchRemoveRole(ctx context.Context, params *repostspace.BatchRemoveRoleInput, optFns ...func(*repostspace.Options)) (*repostspace.BatchRemoveRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchRemoveRole")
	}

	var r0 *repostspace.BatchRemoveRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.BatchRemoveRoleInput, ...func(*repostspace.Options)) (*repostspace.BatchRemoveRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.BatchRemoveRoleInput, ...func(*repostspace.Options)) *repostspace.BatchRemoveRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.BatchRemoveRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.BatchRemoveRoleInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSpace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSpace(ctx context.Context, params *repostspace.CreateSpaceInput, optFns ...func(*repostspace.Options)) (*repostspace.CreateSpaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSpace")
	}

	var r0 *repostspace.CreateSpaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.CreateSpaceInput, ...func(*repostspace.Options)) (*repostspace.CreateSpaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.CreateSpaceInput, ...func(*repostspace.Options)) *repostspace.CreateSpaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.CreateSpaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.CreateSpaceInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSpace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSpace(ctx context.Context, params *repostspace.DeleteSpaceInput, optFns ...func(*repostspace.Options)) (*repostspace.DeleteSpaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSpace")
	}

	var r0 *repostspace.DeleteSpaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.DeleteSpaceInput, ...func(*repostspace.Options)) (*repostspace.DeleteSpaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.DeleteSpaceInput, ...func(*repostspace.Options)) *repostspace.DeleteSpaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.DeleteSpaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.DeleteSpaceInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterAdmin(ctx context.Context, params *repostspace.DeregisterAdminInput, optFns ...func(*repostspace.Options)) (*repostspace.DeregisterAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterAdmin")
	}

	var r0 *repostspace.DeregisterAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.DeregisterAdminInput, ...func(*repostspace.Options)) (*repostspace.DeregisterAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.DeregisterAdminInput, ...func(*repostspace.Options)) *repostspace.DeregisterAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.DeregisterAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.DeregisterAdminInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSpace(ctx context.Context, params *repostspace.GetSpaceInput, optFns ...func(*repostspace.Options)) (*repostspace.GetSpaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSpace")
	}

	var r0 *repostspace.GetSpaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.GetSpaceInput, ...func(*repostspace.Options)) (*repostspace.GetSpaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.GetSpaceInput, ...func(*repostspace.Options)) *repostspace.GetSpaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.GetSpaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.GetSpaceInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSpaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSpaces(ctx context.Context, params *repostspace.ListSpacesInput, optFns ...func(*repostspace.Options)) (*repostspace.ListSpacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSpaces")
	}

	var r0 *repostspace.ListSpacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.ListSpacesInput, ...func(*repostspace.Options)) (*repostspace.ListSpacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.ListSpacesInput, ...func(*repostspace.Options)) *repostspace.ListSpacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.ListSpacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.ListSpacesInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *repostspace.ListTagsForResourceInput, optFns ...func(*repostspace.Options)) (*repostspace.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *repostspace.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.ListTagsForResourceInput, ...func(*repostspace.Options)) (*repostspace.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.ListTagsForResourceInput, ...func(*repostspace.Options)) *repostspace.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.ListTagsForResourceInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() repostspace.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 repostspace.Options
	if rf, ok := ret.Get(0).(func() repostspace.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repostspace.Options)
	}

	return r0
}

// RegisterAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterAdmin(ctx context.Context, params *repostspace.RegisterAdminInput, optFns ...func(*repostspace.Options)) (*repostspace.RegisterAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAdmin")
	}

	var r0 *repostspace.RegisterAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.RegisterAdminInput, ...func(*repostspace.Options)) (*repostspace.RegisterAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.RegisterAdminInput, ...func(*repostspace.Options)) *repostspace.RegisterAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.RegisterAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.RegisterAdminInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInvites provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendInvites(ctx context.Context, params *repostspace.SendInvitesInput, optFns ...func(*repostspace.Options)) (*repostspace.SendInvitesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendInvites")
	}

	var r0 *repostspace.SendInvitesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.SendInvitesInput, ...func(*repostspace.Options)) (*repostspace.SendInvitesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.SendInvitesInput, ...func(*repostspace.Options)) *repostspace.SendInvitesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.SendInvitesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.SendInvitesInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *repostspace.TagResourceInput, optFns ...func(*repostspace.Options)) (*repostspace.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *repostspace.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.TagResourceInput, ...func(*repostspace.Options)) (*repostspace.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.TagResourceInput, ...func(*repostspace.Options)) *repostspace.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.TagResourceInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *repostspace.UntagResourceInput, optFns ...func(*repostspace.Options)) (*repostspace.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *repostspace.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.UntagResourceInput, ...func(*repostspace.Options)) (*repostspace.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.UntagResourceInput, ...func(*repostspace.Options)) *repostspace.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.UntagResourceInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSpace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSpace(ctx context.Context, params *repostspace.UpdateSpaceInput, optFns ...func(*repostspace.Options)) (*repostspace.UpdateSpaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSpace")
	}

	var r0 *repostspace.UpdateSpaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.UpdateSpaceInput, ...func(*repostspace.Options)) (*repostspace.UpdateSpaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *repostspace.UpdateSpaceInput, ...func(*repostspace.Options)) *repostspace.UpdateSpaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*repostspace.UpdateSpaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *repostspace.UpdateSpaceInput, ...func(*repostspace.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
