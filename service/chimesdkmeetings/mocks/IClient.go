// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	chimesdkmeetings "github.com/aws/aws-sdk-go-v2/service/chimesdkmeetings"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchCreateAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchCreateAttendee(ctx context.Context, params *chimesdkmeetings.BatchCreateAttendeeInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.BatchCreateAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchCreateAttendee")
	}

	var r0 *chimesdkmeetings.BatchCreateAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.BatchCreateAttendeeInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.BatchCreateAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.BatchCreateAttendeeInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.BatchCreateAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.BatchCreateAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.BatchCreateAttendeeInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateAttendeeCapabilitiesExcept provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateAttendeeCapabilitiesExcept(ctx context.Context, params *chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateAttendeeCapabilitiesExcept")
	}

	var r0 *chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.BatchUpdateAttendeeCapabilitiesExceptInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAttendee(ctx context.Context, params *chimesdkmeetings.CreateAttendeeInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.CreateAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAttendee")
	}

	var r0 *chimesdkmeetings.CreateAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.CreateAttendeeInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.CreateAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.CreateAttendeeInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.CreateAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.CreateAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.CreateAttendeeInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMeeting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMeeting(ctx context.Context, params *chimesdkmeetings.CreateMeetingInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.CreateMeetingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMeeting")
	}

	var r0 *chimesdkmeetings.CreateMeetingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.CreateMeetingInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.CreateMeetingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.CreateMeetingInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.CreateMeetingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.CreateMeetingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.CreateMeetingInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMeetingWithAttendees provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMeetingWithAttendees(ctx context.Context, params *chimesdkmeetings.CreateMeetingWithAttendeesInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.CreateMeetingWithAttendeesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMeetingWithAttendees")
	}

	var r0 *chimesdkmeetings.CreateMeetingWithAttendeesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.CreateMeetingWithAttendeesInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.CreateMeetingWithAttendeesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.CreateMeetingWithAttendeesInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.CreateMeetingWithAttendeesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.CreateMeetingWithAttendeesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.CreateMeetingWithAttendeesInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAttendee(ctx context.Context, params *chimesdkmeetings.DeleteAttendeeInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.DeleteAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAttendee")
	}

	var r0 *chimesdkmeetings.DeleteAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.DeleteAttendeeInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.DeleteAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.DeleteAttendeeInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.DeleteAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.DeleteAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.DeleteAttendeeInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMeeting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMeeting(ctx context.Context, params *chimesdkmeetings.DeleteMeetingInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.DeleteMeetingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMeeting")
	}

	var r0 *chimesdkmeetings.DeleteMeetingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.DeleteMeetingInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.DeleteMeetingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.DeleteMeetingInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.DeleteMeetingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.DeleteMeetingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.DeleteMeetingInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAttendee provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAttendee(ctx context.Context, params *chimesdkmeetings.GetAttendeeInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.GetAttendeeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAttendee")
	}

	var r0 *chimesdkmeetings.GetAttendeeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.GetAttendeeInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.GetAttendeeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.GetAttendeeInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.GetAttendeeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.GetAttendeeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.GetAttendeeInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMeeting provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMeeting(ctx context.Context, params *chimesdkmeetings.GetMeetingInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.GetMeetingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMeeting")
	}

	var r0 *chimesdkmeetings.GetMeetingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.GetMeetingInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.GetMeetingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.GetMeetingInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.GetMeetingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.GetMeetingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.GetMeetingInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttendees provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttendees(ctx context.Context, params *chimesdkmeetings.ListAttendeesInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.ListAttendeesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttendees")
	}

	var r0 *chimesdkmeetings.ListAttendeesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.ListAttendeesInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.ListAttendeesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.ListAttendeesInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.ListAttendeesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.ListAttendeesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.ListAttendeesInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *chimesdkmeetings.ListTagsForResourceInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *chimesdkmeetings.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.ListTagsForResourceInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.ListTagsForResourceInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.ListTagsForResourceInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() chimesdkmeetings.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 chimesdkmeetings.Options
	if rf, ok := ret.Get(0).(func() chimesdkmeetings.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chimesdkmeetings.Options)
	}

	return r0
}

// StartMeetingTranscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMeetingTranscription(ctx context.Context, params *chimesdkmeetings.StartMeetingTranscriptionInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.StartMeetingTranscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMeetingTranscription")
	}

	var r0 *chimesdkmeetings.StartMeetingTranscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.StartMeetingTranscriptionInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.StartMeetingTranscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.StartMeetingTranscriptionInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.StartMeetingTranscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.StartMeetingTranscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.StartMeetingTranscriptionInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMeetingTranscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopMeetingTranscription(ctx context.Context, params *chimesdkmeetings.StopMeetingTranscriptionInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.StopMeetingTranscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopMeetingTranscription")
	}

	var r0 *chimesdkmeetings.StopMeetingTranscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.StopMeetingTranscriptionInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.StopMeetingTranscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.StopMeetingTranscriptionInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.StopMeetingTranscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.StopMeetingTranscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.StopMeetingTranscriptionInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *chimesdkmeetings.TagResourceInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *chimesdkmeetings.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.TagResourceInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.TagResourceInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.TagResourceInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *chimesdkmeetings.UntagResourceInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *chimesdkmeetings.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.UntagResourceInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.UntagResourceInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.UntagResourceInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAttendeeCapabilities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAttendeeCapabilities(ctx context.Context, params *chimesdkmeetings.UpdateAttendeeCapabilitiesInput, optFns ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.UpdateAttendeeCapabilitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAttendeeCapabilities")
	}

	var r0 *chimesdkmeetings.UpdateAttendeeCapabilitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.UpdateAttendeeCapabilitiesInput, ...func(*chimesdkmeetings.Options)) (*chimesdkmeetings.UpdateAttendeeCapabilitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmeetings.UpdateAttendeeCapabilitiesInput, ...func(*chimesdkmeetings.Options)) *chimesdkmeetings.UpdateAttendeeCapabilitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmeetings.UpdateAttendeeCapabilitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmeetings.UpdateAttendeeCapabilitiesInput, ...func(*chimesdkmeetings.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
