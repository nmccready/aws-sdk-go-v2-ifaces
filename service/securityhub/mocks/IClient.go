// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	securityhub "github.com/aws/aws-sdk-go-v2/service/securityhub"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptAdministratorInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptAdministratorInvitation(ctx context.Context, params *securityhub.AcceptAdministratorInvitationInput, optFns ...func(*securityhub.Options)) (*securityhub.AcceptAdministratorInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptAdministratorInvitation")
	}

	var r0 *securityhub.AcceptAdministratorInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.AcceptAdministratorInvitationInput, ...func(*securityhub.Options)) (*securityhub.AcceptAdministratorInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.AcceptAdministratorInvitationInput, ...func(*securityhub.Options)) *securityhub.AcceptAdministratorInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.AcceptAdministratorInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.AcceptAdministratorInvitationInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptInvitation(ctx context.Context, params *securityhub.AcceptInvitationInput, optFns ...func(*securityhub.Options)) (*securityhub.AcceptInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 *securityhub.AcceptInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.AcceptInvitationInput, ...func(*securityhub.Options)) (*securityhub.AcceptInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.AcceptInvitationInput, ...func(*securityhub.Options)) *securityhub.AcceptInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.AcceptInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.AcceptInvitationInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteAutomationRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteAutomationRules(ctx context.Context, params *securityhub.BatchDeleteAutomationRulesInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchDeleteAutomationRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteAutomationRules")
	}

	var r0 *securityhub.BatchDeleteAutomationRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchDeleteAutomationRulesInput, ...func(*securityhub.Options)) (*securityhub.BatchDeleteAutomationRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchDeleteAutomationRulesInput, ...func(*securityhub.Options)) *securityhub.BatchDeleteAutomationRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchDeleteAutomationRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchDeleteAutomationRulesInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDisableStandards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDisableStandards(ctx context.Context, params *securityhub.BatchDisableStandardsInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchDisableStandardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDisableStandards")
	}

	var r0 *securityhub.BatchDisableStandardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchDisableStandardsInput, ...func(*securityhub.Options)) (*securityhub.BatchDisableStandardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchDisableStandardsInput, ...func(*securityhub.Options)) *securityhub.BatchDisableStandardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchDisableStandardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchDisableStandardsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchEnableStandards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchEnableStandards(ctx context.Context, params *securityhub.BatchEnableStandardsInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchEnableStandardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchEnableStandards")
	}

	var r0 *securityhub.BatchEnableStandardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchEnableStandardsInput, ...func(*securityhub.Options)) (*securityhub.BatchEnableStandardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchEnableStandardsInput, ...func(*securityhub.Options)) *securityhub.BatchEnableStandardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchEnableStandardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchEnableStandardsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetAutomationRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetAutomationRules(ctx context.Context, params *securityhub.BatchGetAutomationRulesInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchGetAutomationRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetAutomationRules")
	}

	var r0 *securityhub.BatchGetAutomationRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchGetAutomationRulesInput, ...func(*securityhub.Options)) (*securityhub.BatchGetAutomationRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchGetAutomationRulesInput, ...func(*securityhub.Options)) *securityhub.BatchGetAutomationRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchGetAutomationRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchGetAutomationRulesInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetConfigurationPolicyAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetConfigurationPolicyAssociations(ctx context.Context, params *securityhub.BatchGetConfigurationPolicyAssociationsInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchGetConfigurationPolicyAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetConfigurationPolicyAssociations")
	}

	var r0 *securityhub.BatchGetConfigurationPolicyAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchGetConfigurationPolicyAssociationsInput, ...func(*securityhub.Options)) (*securityhub.BatchGetConfigurationPolicyAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchGetConfigurationPolicyAssociationsInput, ...func(*securityhub.Options)) *securityhub.BatchGetConfigurationPolicyAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchGetConfigurationPolicyAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchGetConfigurationPolicyAssociationsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetSecurityControls provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetSecurityControls(ctx context.Context, params *securityhub.BatchGetSecurityControlsInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchGetSecurityControlsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetSecurityControls")
	}

	var r0 *securityhub.BatchGetSecurityControlsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchGetSecurityControlsInput, ...func(*securityhub.Options)) (*securityhub.BatchGetSecurityControlsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchGetSecurityControlsInput, ...func(*securityhub.Options)) *securityhub.BatchGetSecurityControlsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchGetSecurityControlsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchGetSecurityControlsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetStandardsControlAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetStandardsControlAssociations(ctx context.Context, params *securityhub.BatchGetStandardsControlAssociationsInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchGetStandardsControlAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetStandardsControlAssociations")
	}

	var r0 *securityhub.BatchGetStandardsControlAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchGetStandardsControlAssociationsInput, ...func(*securityhub.Options)) (*securityhub.BatchGetStandardsControlAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchGetStandardsControlAssociationsInput, ...func(*securityhub.Options)) *securityhub.BatchGetStandardsControlAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchGetStandardsControlAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchGetStandardsControlAssociationsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchImportFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchImportFindings(ctx context.Context, params *securityhub.BatchImportFindingsInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchImportFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchImportFindings")
	}

	var r0 *securityhub.BatchImportFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchImportFindingsInput, ...func(*securityhub.Options)) (*securityhub.BatchImportFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchImportFindingsInput, ...func(*securityhub.Options)) *securityhub.BatchImportFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchImportFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchImportFindingsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateAutomationRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateAutomationRules(ctx context.Context, params *securityhub.BatchUpdateAutomationRulesInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchUpdateAutomationRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateAutomationRules")
	}

	var r0 *securityhub.BatchUpdateAutomationRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchUpdateAutomationRulesInput, ...func(*securityhub.Options)) (*securityhub.BatchUpdateAutomationRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchUpdateAutomationRulesInput, ...func(*securityhub.Options)) *securityhub.BatchUpdateAutomationRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchUpdateAutomationRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchUpdateAutomationRulesInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateFindings(ctx context.Context, params *securityhub.BatchUpdateFindingsInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchUpdateFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateFindings")
	}

	var r0 *securityhub.BatchUpdateFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchUpdateFindingsInput, ...func(*securityhub.Options)) (*securityhub.BatchUpdateFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchUpdateFindingsInput, ...func(*securityhub.Options)) *securityhub.BatchUpdateFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchUpdateFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchUpdateFindingsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchUpdateStandardsControlAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchUpdateStandardsControlAssociations(ctx context.Context, params *securityhub.BatchUpdateStandardsControlAssociationsInput, optFns ...func(*securityhub.Options)) (*securityhub.BatchUpdateStandardsControlAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchUpdateStandardsControlAssociations")
	}

	var r0 *securityhub.BatchUpdateStandardsControlAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchUpdateStandardsControlAssociationsInput, ...func(*securityhub.Options)) (*securityhub.BatchUpdateStandardsControlAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.BatchUpdateStandardsControlAssociationsInput, ...func(*securityhub.Options)) *securityhub.BatchUpdateStandardsControlAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.BatchUpdateStandardsControlAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.BatchUpdateStandardsControlAssociationsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateActionTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateActionTarget(ctx context.Context, params *securityhub.CreateActionTargetInput, optFns ...func(*securityhub.Options)) (*securityhub.CreateActionTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateActionTarget")
	}

	var r0 *securityhub.CreateActionTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateActionTargetInput, ...func(*securityhub.Options)) (*securityhub.CreateActionTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateActionTargetInput, ...func(*securityhub.Options)) *securityhub.CreateActionTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.CreateActionTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.CreateActionTargetInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAutomationRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAutomationRule(ctx context.Context, params *securityhub.CreateAutomationRuleInput, optFns ...func(*securityhub.Options)) (*securityhub.CreateAutomationRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAutomationRule")
	}

	var r0 *securityhub.CreateAutomationRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateAutomationRuleInput, ...func(*securityhub.Options)) (*securityhub.CreateAutomationRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateAutomationRuleInput, ...func(*securityhub.Options)) *securityhub.CreateAutomationRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.CreateAutomationRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.CreateAutomationRuleInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfigurationPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationPolicy(ctx context.Context, params *securityhub.CreateConfigurationPolicyInput, optFns ...func(*securityhub.Options)) (*securityhub.CreateConfigurationPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationPolicy")
	}

	var r0 *securityhub.CreateConfigurationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateConfigurationPolicyInput, ...func(*securityhub.Options)) (*securityhub.CreateConfigurationPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateConfigurationPolicyInput, ...func(*securityhub.Options)) *securityhub.CreateConfigurationPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.CreateConfigurationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.CreateConfigurationPolicyInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFindingAggregator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFindingAggregator(ctx context.Context, params *securityhub.CreateFindingAggregatorInput, optFns ...func(*securityhub.Options)) (*securityhub.CreateFindingAggregatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFindingAggregator")
	}

	var r0 *securityhub.CreateFindingAggregatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateFindingAggregatorInput, ...func(*securityhub.Options)) (*securityhub.CreateFindingAggregatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateFindingAggregatorInput, ...func(*securityhub.Options)) *securityhub.CreateFindingAggregatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.CreateFindingAggregatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.CreateFindingAggregatorInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInsight provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInsight(ctx context.Context, params *securityhub.CreateInsightInput, optFns ...func(*securityhub.Options)) (*securityhub.CreateInsightOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInsight")
	}

	var r0 *securityhub.CreateInsightOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateInsightInput, ...func(*securityhub.Options)) (*securityhub.CreateInsightOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateInsightInput, ...func(*securityhub.Options)) *securityhub.CreateInsightOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.CreateInsightOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.CreateInsightInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMembers(ctx context.Context, params *securityhub.CreateMembersInput, optFns ...func(*securityhub.Options)) (*securityhub.CreateMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMembers")
	}

	var r0 *securityhub.CreateMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateMembersInput, ...func(*securityhub.Options)) (*securityhub.CreateMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.CreateMembersInput, ...func(*securityhub.Options)) *securityhub.CreateMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.CreateMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.CreateMembersInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeclineInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeclineInvitations(ctx context.Context, params *securityhub.DeclineInvitationsInput, optFns ...func(*securityhub.Options)) (*securityhub.DeclineInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeclineInvitations")
	}

	var r0 *securityhub.DeclineInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeclineInvitationsInput, ...func(*securityhub.Options)) (*securityhub.DeclineInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeclineInvitationsInput, ...func(*securityhub.Options)) *securityhub.DeclineInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DeclineInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DeclineInvitationsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActionTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteActionTarget(ctx context.Context, params *securityhub.DeleteActionTargetInput, optFns ...func(*securityhub.Options)) (*securityhub.DeleteActionTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActionTarget")
	}

	var r0 *securityhub.DeleteActionTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteActionTargetInput, ...func(*securityhub.Options)) (*securityhub.DeleteActionTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteActionTargetInput, ...func(*securityhub.Options)) *securityhub.DeleteActionTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DeleteActionTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DeleteActionTargetInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationPolicy(ctx context.Context, params *securityhub.DeleteConfigurationPolicyInput, optFns ...func(*securityhub.Options)) (*securityhub.DeleteConfigurationPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationPolicy")
	}

	var r0 *securityhub.DeleteConfigurationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteConfigurationPolicyInput, ...func(*securityhub.Options)) (*securityhub.DeleteConfigurationPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteConfigurationPolicyInput, ...func(*securityhub.Options)) *securityhub.DeleteConfigurationPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DeleteConfigurationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DeleteConfigurationPolicyInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFindingAggregator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFindingAggregator(ctx context.Context, params *securityhub.DeleteFindingAggregatorInput, optFns ...func(*securityhub.Options)) (*securityhub.DeleteFindingAggregatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFindingAggregator")
	}

	var r0 *securityhub.DeleteFindingAggregatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteFindingAggregatorInput, ...func(*securityhub.Options)) (*securityhub.DeleteFindingAggregatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteFindingAggregatorInput, ...func(*securityhub.Options)) *securityhub.DeleteFindingAggregatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DeleteFindingAggregatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DeleteFindingAggregatorInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInsight provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInsight(ctx context.Context, params *securityhub.DeleteInsightInput, optFns ...func(*securityhub.Options)) (*securityhub.DeleteInsightOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInsight")
	}

	var r0 *securityhub.DeleteInsightOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteInsightInput, ...func(*securityhub.Options)) (*securityhub.DeleteInsightOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteInsightInput, ...func(*securityhub.Options)) *securityhub.DeleteInsightOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DeleteInsightOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DeleteInsightInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInvitations(ctx context.Context, params *securityhub.DeleteInvitationsInput, optFns ...func(*securityhub.Options)) (*securityhub.DeleteInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvitations")
	}

	var r0 *securityhub.DeleteInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteInvitationsInput, ...func(*securityhub.Options)) (*securityhub.DeleteInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteInvitationsInput, ...func(*securityhub.Options)) *securityhub.DeleteInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DeleteInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DeleteInvitationsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMembers(ctx context.Context, params *securityhub.DeleteMembersInput, optFns ...func(*securityhub.Options)) (*securityhub.DeleteMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMembers")
	}

	var r0 *securityhub.DeleteMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteMembersInput, ...func(*securityhub.Options)) (*securityhub.DeleteMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DeleteMembersInput, ...func(*securityhub.Options)) *securityhub.DeleteMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DeleteMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DeleteMembersInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeActionTargets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeActionTargets(ctx context.Context, params *securityhub.DescribeActionTargetsInput, optFns ...func(*securityhub.Options)) (*securityhub.DescribeActionTargetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeActionTargets")
	}

	var r0 *securityhub.DescribeActionTargetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeActionTargetsInput, ...func(*securityhub.Options)) (*securityhub.DescribeActionTargetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeActionTargetsInput, ...func(*securityhub.Options)) *securityhub.DescribeActionTargetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DescribeActionTargetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DescribeActionTargetsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHub provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHub(ctx context.Context, params *securityhub.DescribeHubInput, optFns ...func(*securityhub.Options)) (*securityhub.DescribeHubOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHub")
	}

	var r0 *securityhub.DescribeHubOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeHubInput, ...func(*securityhub.Options)) (*securityhub.DescribeHubOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeHubInput, ...func(*securityhub.Options)) *securityhub.DescribeHubOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DescribeHubOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DescribeHubInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationConfiguration(ctx context.Context, params *securityhub.DescribeOrganizationConfigurationInput, optFns ...func(*securityhub.Options)) (*securityhub.DescribeOrganizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationConfiguration")
	}

	var r0 *securityhub.DescribeOrganizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeOrganizationConfigurationInput, ...func(*securityhub.Options)) (*securityhub.DescribeOrganizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeOrganizationConfigurationInput, ...func(*securityhub.Options)) *securityhub.DescribeOrganizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DescribeOrganizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DescribeOrganizationConfigurationInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProducts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProducts(ctx context.Context, params *securityhub.DescribeProductsInput, optFns ...func(*securityhub.Options)) (*securityhub.DescribeProductsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProducts")
	}

	var r0 *securityhub.DescribeProductsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeProductsInput, ...func(*securityhub.Options)) (*securityhub.DescribeProductsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeProductsInput, ...func(*securityhub.Options)) *securityhub.DescribeProductsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DescribeProductsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DescribeProductsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStandards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStandards(ctx context.Context, params *securityhub.DescribeStandardsInput, optFns ...func(*securityhub.Options)) (*securityhub.DescribeStandardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStandards")
	}

	var r0 *securityhub.DescribeStandardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeStandardsInput, ...func(*securityhub.Options)) (*securityhub.DescribeStandardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeStandardsInput, ...func(*securityhub.Options)) *securityhub.DescribeStandardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DescribeStandardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DescribeStandardsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStandardsControls provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStandardsControls(ctx context.Context, params *securityhub.DescribeStandardsControlsInput, optFns ...func(*securityhub.Options)) (*securityhub.DescribeStandardsControlsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStandardsControls")
	}

	var r0 *securityhub.DescribeStandardsControlsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeStandardsControlsInput, ...func(*securityhub.Options)) (*securityhub.DescribeStandardsControlsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DescribeStandardsControlsInput, ...func(*securityhub.Options)) *securityhub.DescribeStandardsControlsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DescribeStandardsControlsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DescribeStandardsControlsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableImportFindingsForProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableImportFindingsForProduct(ctx context.Context, params *securityhub.DisableImportFindingsForProductInput, optFns ...func(*securityhub.Options)) (*securityhub.DisableImportFindingsForProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableImportFindingsForProduct")
	}

	var r0 *securityhub.DisableImportFindingsForProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisableImportFindingsForProductInput, ...func(*securityhub.Options)) (*securityhub.DisableImportFindingsForProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisableImportFindingsForProductInput, ...func(*securityhub.Options)) *securityhub.DisableImportFindingsForProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DisableImportFindingsForProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DisableImportFindingsForProductInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableOrganizationAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableOrganizationAdminAccount(ctx context.Context, params *securityhub.DisableOrganizationAdminAccountInput, optFns ...func(*securityhub.Options)) (*securityhub.DisableOrganizationAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableOrganizationAdminAccount")
	}

	var r0 *securityhub.DisableOrganizationAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisableOrganizationAdminAccountInput, ...func(*securityhub.Options)) (*securityhub.DisableOrganizationAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisableOrganizationAdminAccountInput, ...func(*securityhub.Options)) *securityhub.DisableOrganizationAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DisableOrganizationAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DisableOrganizationAdminAccountInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableSecurityHub provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableSecurityHub(ctx context.Context, params *securityhub.DisableSecurityHubInput, optFns ...func(*securityhub.Options)) (*securityhub.DisableSecurityHubOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableSecurityHub")
	}

	var r0 *securityhub.DisableSecurityHubOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisableSecurityHubInput, ...func(*securityhub.Options)) (*securityhub.DisableSecurityHubOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisableSecurityHubInput, ...func(*securityhub.Options)) *securityhub.DisableSecurityHubOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DisableSecurityHubOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DisableSecurityHubInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFromAdministratorAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFromAdministratorAccount(ctx context.Context, params *securityhub.DisassociateFromAdministratorAccountInput, optFns ...func(*securityhub.Options)) (*securityhub.DisassociateFromAdministratorAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFromAdministratorAccount")
	}

	var r0 *securityhub.DisassociateFromAdministratorAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisassociateFromAdministratorAccountInput, ...func(*securityhub.Options)) (*securityhub.DisassociateFromAdministratorAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisassociateFromAdministratorAccountInput, ...func(*securityhub.Options)) *securityhub.DisassociateFromAdministratorAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DisassociateFromAdministratorAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DisassociateFromAdministratorAccountInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFromMasterAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFromMasterAccount(ctx context.Context, params *securityhub.DisassociateFromMasterAccountInput, optFns ...func(*securityhub.Options)) (*securityhub.DisassociateFromMasterAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFromMasterAccount")
	}

	var r0 *securityhub.DisassociateFromMasterAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisassociateFromMasterAccountInput, ...func(*securityhub.Options)) (*securityhub.DisassociateFromMasterAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisassociateFromMasterAccountInput, ...func(*securityhub.Options)) *securityhub.DisassociateFromMasterAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DisassociateFromMasterAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DisassociateFromMasterAccountInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMembers(ctx context.Context, params *securityhub.DisassociateMembersInput, optFns ...func(*securityhub.Options)) (*securityhub.DisassociateMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMembers")
	}

	var r0 *securityhub.DisassociateMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisassociateMembersInput, ...func(*securityhub.Options)) (*securityhub.DisassociateMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.DisassociateMembersInput, ...func(*securityhub.Options)) *securityhub.DisassociateMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.DisassociateMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.DisassociateMembersInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableImportFindingsForProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableImportFindingsForProduct(ctx context.Context, params *securityhub.EnableImportFindingsForProductInput, optFns ...func(*securityhub.Options)) (*securityhub.EnableImportFindingsForProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableImportFindingsForProduct")
	}

	var r0 *securityhub.EnableImportFindingsForProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.EnableImportFindingsForProductInput, ...func(*securityhub.Options)) (*securityhub.EnableImportFindingsForProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.EnableImportFindingsForProductInput, ...func(*securityhub.Options)) *securityhub.EnableImportFindingsForProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.EnableImportFindingsForProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.EnableImportFindingsForProductInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableOrganizationAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableOrganizationAdminAccount(ctx context.Context, params *securityhub.EnableOrganizationAdminAccountInput, optFns ...func(*securityhub.Options)) (*securityhub.EnableOrganizationAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableOrganizationAdminAccount")
	}

	var r0 *securityhub.EnableOrganizationAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.EnableOrganizationAdminAccountInput, ...func(*securityhub.Options)) (*securityhub.EnableOrganizationAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.EnableOrganizationAdminAccountInput, ...func(*securityhub.Options)) *securityhub.EnableOrganizationAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.EnableOrganizationAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.EnableOrganizationAdminAccountInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableSecurityHub provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableSecurityHub(ctx context.Context, params *securityhub.EnableSecurityHubInput, optFns ...func(*securityhub.Options)) (*securityhub.EnableSecurityHubOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableSecurityHub")
	}

	var r0 *securityhub.EnableSecurityHubOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.EnableSecurityHubInput, ...func(*securityhub.Options)) (*securityhub.EnableSecurityHubOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.EnableSecurityHubInput, ...func(*securityhub.Options)) *securityhub.EnableSecurityHubOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.EnableSecurityHubOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.EnableSecurityHubInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdministratorAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAdministratorAccount(ctx context.Context, params *securityhub.GetAdministratorAccountInput, optFns ...func(*securityhub.Options)) (*securityhub.GetAdministratorAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAdministratorAccount")
	}

	var r0 *securityhub.GetAdministratorAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetAdministratorAccountInput, ...func(*securityhub.Options)) (*securityhub.GetAdministratorAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetAdministratorAccountInput, ...func(*securityhub.Options)) *securityhub.GetAdministratorAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetAdministratorAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetAdministratorAccountInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationPolicy(ctx context.Context, params *securityhub.GetConfigurationPolicyInput, optFns ...func(*securityhub.Options)) (*securityhub.GetConfigurationPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationPolicy")
	}

	var r0 *securityhub.GetConfigurationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetConfigurationPolicyInput, ...func(*securityhub.Options)) (*securityhub.GetConfigurationPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetConfigurationPolicyInput, ...func(*securityhub.Options)) *securityhub.GetConfigurationPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetConfigurationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetConfigurationPolicyInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationPolicyAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationPolicyAssociation(ctx context.Context, params *securityhub.GetConfigurationPolicyAssociationInput, optFns ...func(*securityhub.Options)) (*securityhub.GetConfigurationPolicyAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationPolicyAssociation")
	}

	var r0 *securityhub.GetConfigurationPolicyAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetConfigurationPolicyAssociationInput, ...func(*securityhub.Options)) (*securityhub.GetConfigurationPolicyAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetConfigurationPolicyAssociationInput, ...func(*securityhub.Options)) *securityhub.GetConfigurationPolicyAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetConfigurationPolicyAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetConfigurationPolicyAssociationInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEnabledStandards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEnabledStandards(ctx context.Context, params *securityhub.GetEnabledStandardsInput, optFns ...func(*securityhub.Options)) (*securityhub.GetEnabledStandardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEnabledStandards")
	}

	var r0 *securityhub.GetEnabledStandardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetEnabledStandardsInput, ...func(*securityhub.Options)) (*securityhub.GetEnabledStandardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetEnabledStandardsInput, ...func(*securityhub.Options)) *securityhub.GetEnabledStandardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetEnabledStandardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetEnabledStandardsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindingAggregator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindingAggregator(ctx context.Context, params *securityhub.GetFindingAggregatorInput, optFns ...func(*securityhub.Options)) (*securityhub.GetFindingAggregatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingAggregator")
	}

	var r0 *securityhub.GetFindingAggregatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetFindingAggregatorInput, ...func(*securityhub.Options)) (*securityhub.GetFindingAggregatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetFindingAggregatorInput, ...func(*securityhub.Options)) *securityhub.GetFindingAggregatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetFindingAggregatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetFindingAggregatorInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindingHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindingHistory(ctx context.Context, params *securityhub.GetFindingHistoryInput, optFns ...func(*securityhub.Options)) (*securityhub.GetFindingHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingHistory")
	}

	var r0 *securityhub.GetFindingHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetFindingHistoryInput, ...func(*securityhub.Options)) (*securityhub.GetFindingHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetFindingHistoryInput, ...func(*securityhub.Options)) *securityhub.GetFindingHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetFindingHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetFindingHistoryInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindings(ctx context.Context, params *securityhub.GetFindingsInput, optFns ...func(*securityhub.Options)) (*securityhub.GetFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindings")
	}

	var r0 *securityhub.GetFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetFindingsInput, ...func(*securityhub.Options)) (*securityhub.GetFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetFindingsInput, ...func(*securityhub.Options)) *securityhub.GetFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetFindingsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInsightResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInsightResults(ctx context.Context, params *securityhub.GetInsightResultsInput, optFns ...func(*securityhub.Options)) (*securityhub.GetInsightResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInsightResults")
	}

	var r0 *securityhub.GetInsightResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetInsightResultsInput, ...func(*securityhub.Options)) (*securityhub.GetInsightResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetInsightResultsInput, ...func(*securityhub.Options)) *securityhub.GetInsightResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetInsightResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetInsightResultsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInsights provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInsights(ctx context.Context, params *securityhub.GetInsightsInput, optFns ...func(*securityhub.Options)) (*securityhub.GetInsightsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInsights")
	}

	var r0 *securityhub.GetInsightsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetInsightsInput, ...func(*securityhub.Options)) (*securityhub.GetInsightsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetInsightsInput, ...func(*securityhub.Options)) *securityhub.GetInsightsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetInsightsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetInsightsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationsCount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInvitationsCount(ctx context.Context, params *securityhub.GetInvitationsCountInput, optFns ...func(*securityhub.Options)) (*securityhub.GetInvitationsCountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitationsCount")
	}

	var r0 *securityhub.GetInvitationsCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetInvitationsCountInput, ...func(*securityhub.Options)) (*securityhub.GetInvitationsCountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetInvitationsCountInput, ...func(*securityhub.Options)) *securityhub.GetInvitationsCountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetInvitationsCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetInvitationsCountInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMasterAccount(ctx context.Context, params *securityhub.GetMasterAccountInput, optFns ...func(*securityhub.Options)) (*securityhub.GetMasterAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterAccount")
	}

	var r0 *securityhub.GetMasterAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetMasterAccountInput, ...func(*securityhub.Options)) (*securityhub.GetMasterAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetMasterAccountInput, ...func(*securityhub.Options)) *securityhub.GetMasterAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetMasterAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetMasterAccountInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMembers(ctx context.Context, params *securityhub.GetMembersInput, optFns ...func(*securityhub.Options)) (*securityhub.GetMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMembers")
	}

	var r0 *securityhub.GetMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetMembersInput, ...func(*securityhub.Options)) (*securityhub.GetMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetMembersInput, ...func(*securityhub.Options)) *securityhub.GetMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetMembersInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSecurityControlDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSecurityControlDefinition(ctx context.Context, params *securityhub.GetSecurityControlDefinitionInput, optFns ...func(*securityhub.Options)) (*securityhub.GetSecurityControlDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSecurityControlDefinition")
	}

	var r0 *securityhub.GetSecurityControlDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetSecurityControlDefinitionInput, ...func(*securityhub.Options)) (*securityhub.GetSecurityControlDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.GetSecurityControlDefinitionInput, ...func(*securityhub.Options)) *securityhub.GetSecurityControlDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.GetSecurityControlDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.GetSecurityControlDefinitionInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InviteMembers(ctx context.Context, params *securityhub.InviteMembersInput, optFns ...func(*securityhub.Options)) (*securityhub.InviteMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InviteMembers")
	}

	var r0 *securityhub.InviteMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.InviteMembersInput, ...func(*securityhub.Options)) (*securityhub.InviteMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.InviteMembersInput, ...func(*securityhub.Options)) *securityhub.InviteMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.InviteMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.InviteMembersInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAutomationRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAutomationRules(ctx context.Context, params *securityhub.ListAutomationRulesInput, optFns ...func(*securityhub.Options)) (*securityhub.ListAutomationRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAutomationRules")
	}

	var r0 *securityhub.ListAutomationRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListAutomationRulesInput, ...func(*securityhub.Options)) (*securityhub.ListAutomationRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListAutomationRulesInput, ...func(*securityhub.Options)) *securityhub.ListAutomationRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListAutomationRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListAutomationRulesInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationPolicies(ctx context.Context, params *securityhub.ListConfigurationPoliciesInput, optFns ...func(*securityhub.Options)) (*securityhub.ListConfigurationPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationPolicies")
	}

	var r0 *securityhub.ListConfigurationPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListConfigurationPoliciesInput, ...func(*securityhub.Options)) (*securityhub.ListConfigurationPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListConfigurationPoliciesInput, ...func(*securityhub.Options)) *securityhub.ListConfigurationPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListConfigurationPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListConfigurationPoliciesInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationPolicyAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationPolicyAssociations(ctx context.Context, params *securityhub.ListConfigurationPolicyAssociationsInput, optFns ...func(*securityhub.Options)) (*securityhub.ListConfigurationPolicyAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationPolicyAssociations")
	}

	var r0 *securityhub.ListConfigurationPolicyAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListConfigurationPolicyAssociationsInput, ...func(*securityhub.Options)) (*securityhub.ListConfigurationPolicyAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListConfigurationPolicyAssociationsInput, ...func(*securityhub.Options)) *securityhub.ListConfigurationPolicyAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListConfigurationPolicyAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListConfigurationPolicyAssociationsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEnabledProductsForImport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEnabledProductsForImport(ctx context.Context, params *securityhub.ListEnabledProductsForImportInput, optFns ...func(*securityhub.Options)) (*securityhub.ListEnabledProductsForImportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEnabledProductsForImport")
	}

	var r0 *securityhub.ListEnabledProductsForImportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListEnabledProductsForImportInput, ...func(*securityhub.Options)) (*securityhub.ListEnabledProductsForImportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListEnabledProductsForImportInput, ...func(*securityhub.Options)) *securityhub.ListEnabledProductsForImportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListEnabledProductsForImportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListEnabledProductsForImportInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFindingAggregators provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFindingAggregators(ctx context.Context, params *securityhub.ListFindingAggregatorsInput, optFns ...func(*securityhub.Options)) (*securityhub.ListFindingAggregatorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFindingAggregators")
	}

	var r0 *securityhub.ListFindingAggregatorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListFindingAggregatorsInput, ...func(*securityhub.Options)) (*securityhub.ListFindingAggregatorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListFindingAggregatorsInput, ...func(*securityhub.Options)) *securityhub.ListFindingAggregatorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListFindingAggregatorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListFindingAggregatorsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvitations(ctx context.Context, params *securityhub.ListInvitationsInput, optFns ...func(*securityhub.Options)) (*securityhub.ListInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvitations")
	}

	var r0 *securityhub.ListInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListInvitationsInput, ...func(*securityhub.Options)) (*securityhub.ListInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListInvitationsInput, ...func(*securityhub.Options)) *securityhub.ListInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListInvitationsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMembers(ctx context.Context, params *securityhub.ListMembersInput, optFns ...func(*securityhub.Options)) (*securityhub.ListMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 *securityhub.ListMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListMembersInput, ...func(*securityhub.Options)) (*securityhub.ListMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListMembersInput, ...func(*securityhub.Options)) *securityhub.ListMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListMembersInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationAdminAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizationAdminAccounts(ctx context.Context, params *securityhub.ListOrganizationAdminAccountsInput, optFns ...func(*securityhub.Options)) (*securityhub.ListOrganizationAdminAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationAdminAccounts")
	}

	var r0 *securityhub.ListOrganizationAdminAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListOrganizationAdminAccountsInput, ...func(*securityhub.Options)) (*securityhub.ListOrganizationAdminAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListOrganizationAdminAccountsInput, ...func(*securityhub.Options)) *securityhub.ListOrganizationAdminAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListOrganizationAdminAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListOrganizationAdminAccountsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSecurityControlDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSecurityControlDefinitions(ctx context.Context, params *securityhub.ListSecurityControlDefinitionsInput, optFns ...func(*securityhub.Options)) (*securityhub.ListSecurityControlDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSecurityControlDefinitions")
	}

	var r0 *securityhub.ListSecurityControlDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListSecurityControlDefinitionsInput, ...func(*securityhub.Options)) (*securityhub.ListSecurityControlDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListSecurityControlDefinitionsInput, ...func(*securityhub.Options)) *securityhub.ListSecurityControlDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListSecurityControlDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListSecurityControlDefinitionsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStandardsControlAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStandardsControlAssociations(ctx context.Context, params *securityhub.ListStandardsControlAssociationsInput, optFns ...func(*securityhub.Options)) (*securityhub.ListStandardsControlAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStandardsControlAssociations")
	}

	var r0 *securityhub.ListStandardsControlAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListStandardsControlAssociationsInput, ...func(*securityhub.Options)) (*securityhub.ListStandardsControlAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListStandardsControlAssociationsInput, ...func(*securityhub.Options)) *securityhub.ListStandardsControlAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListStandardsControlAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListStandardsControlAssociationsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *securityhub.ListTagsForResourceInput, optFns ...func(*securityhub.Options)) (*securityhub.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *securityhub.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListTagsForResourceInput, ...func(*securityhub.Options)) (*securityhub.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.ListTagsForResourceInput, ...func(*securityhub.Options)) *securityhub.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.ListTagsForResourceInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() securityhub.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 securityhub.Options
	if rf, ok := ret.Get(0).(func() securityhub.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(securityhub.Options)
	}

	return r0
}

// StartConfigurationPolicyAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartConfigurationPolicyAssociation(ctx context.Context, params *securityhub.StartConfigurationPolicyAssociationInput, optFns ...func(*securityhub.Options)) (*securityhub.StartConfigurationPolicyAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartConfigurationPolicyAssociation")
	}

	var r0 *securityhub.StartConfigurationPolicyAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.StartConfigurationPolicyAssociationInput, ...func(*securityhub.Options)) (*securityhub.StartConfigurationPolicyAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.StartConfigurationPolicyAssociationInput, ...func(*securityhub.Options)) *securityhub.StartConfigurationPolicyAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.StartConfigurationPolicyAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.StartConfigurationPolicyAssociationInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartConfigurationPolicyDisassociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartConfigurationPolicyDisassociation(ctx context.Context, params *securityhub.StartConfigurationPolicyDisassociationInput, optFns ...func(*securityhub.Options)) (*securityhub.StartConfigurationPolicyDisassociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartConfigurationPolicyDisassociation")
	}

	var r0 *securityhub.StartConfigurationPolicyDisassociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.StartConfigurationPolicyDisassociationInput, ...func(*securityhub.Options)) (*securityhub.StartConfigurationPolicyDisassociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.StartConfigurationPolicyDisassociationInput, ...func(*securityhub.Options)) *securityhub.StartConfigurationPolicyDisassociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.StartConfigurationPolicyDisassociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.StartConfigurationPolicyDisassociationInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *securityhub.TagResourceInput, optFns ...func(*securityhub.Options)) (*securityhub.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *securityhub.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.TagResourceInput, ...func(*securityhub.Options)) (*securityhub.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.TagResourceInput, ...func(*securityhub.Options)) *securityhub.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.TagResourceInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *securityhub.UntagResourceInput, optFns ...func(*securityhub.Options)) (*securityhub.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *securityhub.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UntagResourceInput, ...func(*securityhub.Options)) (*securityhub.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UntagResourceInput, ...func(*securityhub.Options)) *securityhub.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UntagResourceInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateActionTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateActionTarget(ctx context.Context, params *securityhub.UpdateActionTargetInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateActionTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateActionTarget")
	}

	var r0 *securityhub.UpdateActionTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateActionTargetInput, ...func(*securityhub.Options)) (*securityhub.UpdateActionTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateActionTargetInput, ...func(*securityhub.Options)) *securityhub.UpdateActionTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateActionTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateActionTargetInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationPolicy(ctx context.Context, params *securityhub.UpdateConfigurationPolicyInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateConfigurationPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationPolicy")
	}

	var r0 *securityhub.UpdateConfigurationPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateConfigurationPolicyInput, ...func(*securityhub.Options)) (*securityhub.UpdateConfigurationPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateConfigurationPolicyInput, ...func(*securityhub.Options)) *securityhub.UpdateConfigurationPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateConfigurationPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateConfigurationPolicyInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFindingAggregator provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFindingAggregator(ctx context.Context, params *securityhub.UpdateFindingAggregatorInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateFindingAggregatorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFindingAggregator")
	}

	var r0 *securityhub.UpdateFindingAggregatorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateFindingAggregatorInput, ...func(*securityhub.Options)) (*securityhub.UpdateFindingAggregatorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateFindingAggregatorInput, ...func(*securityhub.Options)) *securityhub.UpdateFindingAggregatorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateFindingAggregatorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateFindingAggregatorInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFindings(ctx context.Context, params *securityhub.UpdateFindingsInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFindings")
	}

	var r0 *securityhub.UpdateFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateFindingsInput, ...func(*securityhub.Options)) (*securityhub.UpdateFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateFindingsInput, ...func(*securityhub.Options)) *securityhub.UpdateFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateFindingsInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInsight provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInsight(ctx context.Context, params *securityhub.UpdateInsightInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateInsightOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInsight")
	}

	var r0 *securityhub.UpdateInsightOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateInsightInput, ...func(*securityhub.Options)) (*securityhub.UpdateInsightOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateInsightInput, ...func(*securityhub.Options)) *securityhub.UpdateInsightOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateInsightOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateInsightInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOrganizationConfiguration(ctx context.Context, params *securityhub.UpdateOrganizationConfigurationInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateOrganizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationConfiguration")
	}

	var r0 *securityhub.UpdateOrganizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateOrganizationConfigurationInput, ...func(*securityhub.Options)) (*securityhub.UpdateOrganizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateOrganizationConfigurationInput, ...func(*securityhub.Options)) *securityhub.UpdateOrganizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateOrganizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateOrganizationConfigurationInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSecurityControl(ctx context.Context, params *securityhub.UpdateSecurityControlInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateSecurityControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecurityControl")
	}

	var r0 *securityhub.UpdateSecurityControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateSecurityControlInput, ...func(*securityhub.Options)) (*securityhub.UpdateSecurityControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateSecurityControlInput, ...func(*securityhub.Options)) *securityhub.UpdateSecurityControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateSecurityControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateSecurityControlInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSecurityHubConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSecurityHubConfiguration(ctx context.Context, params *securityhub.UpdateSecurityHubConfigurationInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateSecurityHubConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSecurityHubConfiguration")
	}

	var r0 *securityhub.UpdateSecurityHubConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateSecurityHubConfigurationInput, ...func(*securityhub.Options)) (*securityhub.UpdateSecurityHubConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateSecurityHubConfigurationInput, ...func(*securityhub.Options)) *securityhub.UpdateSecurityHubConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateSecurityHubConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateSecurityHubConfigurationInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStandardsControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStandardsControl(ctx context.Context, params *securityhub.UpdateStandardsControlInput, optFns ...func(*securityhub.Options)) (*securityhub.UpdateStandardsControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStandardsControl")
	}

	var r0 *securityhub.UpdateStandardsControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateStandardsControlInput, ...func(*securityhub.Options)) (*securityhub.UpdateStandardsControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *securityhub.UpdateStandardsControlInput, ...func(*securityhub.Options)) *securityhub.UpdateStandardsControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*securityhub.UpdateStandardsControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *securityhub.UpdateStandardsControlInput, ...func(*securityhub.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
