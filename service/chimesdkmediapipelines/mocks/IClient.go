// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	chimesdkmediapipelines "github.com/aws/aws-sdk-go-v2/service/chimesdkmediapipelines"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateMediaCapturePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMediaCapturePipeline(ctx context.Context, params *chimesdkmediapipelines.CreateMediaCapturePipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaCapturePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMediaCapturePipeline")
	}

	var r0 *chimesdkmediapipelines.CreateMediaCapturePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaCapturePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.CreateMediaCapturePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.CreateMediaCapturePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.CreateMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMediaConcatenationPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMediaConcatenationPipeline(ctx context.Context, params *chimesdkmediapipelines.CreateMediaConcatenationPipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaConcatenationPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMediaConcatenationPipeline")
	}

	var r0 *chimesdkmediapipelines.CreateMediaConcatenationPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaConcatenationPipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaConcatenationPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaConcatenationPipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.CreateMediaConcatenationPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.CreateMediaConcatenationPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.CreateMediaConcatenationPipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMediaInsightsPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMediaInsightsPipeline(ctx context.Context, params *chimesdkmediapipelines.CreateMediaInsightsPipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaInsightsPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMediaInsightsPipeline")
	}

	var r0 *chimesdkmediapipelines.CreateMediaInsightsPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaInsightsPipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaInsightsPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaInsightsPipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.CreateMediaInsightsPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.CreateMediaInsightsPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.CreateMediaInsightsPipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMediaInsightsPipelineConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMediaInsightsPipelineConfiguration(ctx context.Context, params *chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMediaInsightsPipelineConfiguration")
	}

	var r0 *chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.CreateMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMediaLiveConnectorPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMediaLiveConnectorPipeline(ctx context.Context, params *chimesdkmediapipelines.CreateMediaLiveConnectorPipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaLiveConnectorPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMediaLiveConnectorPipeline")
	}

	var r0 *chimesdkmediapipelines.CreateMediaLiveConnectorPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaLiveConnectorPipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaLiveConnectorPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaLiveConnectorPipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.CreateMediaLiveConnectorPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.CreateMediaLiveConnectorPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.CreateMediaLiveConnectorPipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMediaPipelineKinesisVideoStreamPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMediaPipelineKinesisVideoStreamPool(ctx context.Context, params *chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMediaPipelineKinesisVideoStreamPool")
	}

	var r0 *chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.CreateMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMediaStreamPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMediaStreamPipeline(ctx context.Context, params *chimesdkmediapipelines.CreateMediaStreamPipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaStreamPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMediaStreamPipeline")
	}

	var r0 *chimesdkmediapipelines.CreateMediaStreamPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaStreamPipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.CreateMediaStreamPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.CreateMediaStreamPipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.CreateMediaStreamPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.CreateMediaStreamPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.CreateMediaStreamPipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMediaCapturePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMediaCapturePipeline(ctx context.Context, params *chimesdkmediapipelines.DeleteMediaCapturePipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.DeleteMediaCapturePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMediaCapturePipeline")
	}

	var r0 *chimesdkmediapipelines.DeleteMediaCapturePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.DeleteMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.DeleteMediaCapturePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.DeleteMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.DeleteMediaCapturePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.DeleteMediaCapturePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.DeleteMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMediaInsightsPipelineConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMediaInsightsPipelineConfiguration(ctx context.Context, params *chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMediaInsightsPipelineConfiguration")
	}

	var r0 *chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.DeleteMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMediaPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMediaPipeline(ctx context.Context, params *chimesdkmediapipelines.DeleteMediaPipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.DeleteMediaPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMediaPipeline")
	}

	var r0 *chimesdkmediapipelines.DeleteMediaPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.DeleteMediaPipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.DeleteMediaPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.DeleteMediaPipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.DeleteMediaPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.DeleteMediaPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.DeleteMediaPipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMediaPipelineKinesisVideoStreamPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMediaPipelineKinesisVideoStreamPool(ctx context.Context, params *chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMediaPipelineKinesisVideoStreamPool")
	}

	var r0 *chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.DeleteMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMediaCapturePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMediaCapturePipeline(ctx context.Context, params *chimesdkmediapipelines.GetMediaCapturePipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetMediaCapturePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaCapturePipeline")
	}

	var r0 *chimesdkmediapipelines.GetMediaCapturePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetMediaCapturePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.GetMediaCapturePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.GetMediaCapturePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.GetMediaCapturePipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMediaInsightsPipelineConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMediaInsightsPipelineConfiguration(ctx context.Context, params *chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaInsightsPipelineConfiguration")
	}

	var r0 *chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.GetMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMediaPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMediaPipeline(ctx context.Context, params *chimesdkmediapipelines.GetMediaPipelineInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetMediaPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaPipeline")
	}

	var r0 *chimesdkmediapipelines.GetMediaPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetMediaPipelineInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetMediaPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetMediaPipelineInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.GetMediaPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.GetMediaPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.GetMediaPipelineInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMediaPipelineKinesisVideoStreamPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMediaPipelineKinesisVideoStreamPool(ctx context.Context, params *chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMediaPipelineKinesisVideoStreamPool")
	}

	var r0 *chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.GetMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSpeakerSearchTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSpeakerSearchTask(ctx context.Context, params *chimesdkmediapipelines.GetSpeakerSearchTaskInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetSpeakerSearchTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSpeakerSearchTask")
	}

	var r0 *chimesdkmediapipelines.GetSpeakerSearchTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetSpeakerSearchTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.GetSpeakerSearchTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.GetSpeakerSearchTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.GetSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVoiceToneAnalysisTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVoiceToneAnalysisTask(ctx context.Context, params *chimesdkmediapipelines.GetVoiceToneAnalysisTaskInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetVoiceToneAnalysisTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVoiceToneAnalysisTask")
	}

	var r0 *chimesdkmediapipelines.GetVoiceToneAnalysisTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.GetVoiceToneAnalysisTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.GetVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.GetVoiceToneAnalysisTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.GetVoiceToneAnalysisTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.GetVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMediaCapturePipelines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMediaCapturePipelines(ctx context.Context, params *chimesdkmediapipelines.ListMediaCapturePipelinesInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListMediaCapturePipelinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMediaCapturePipelines")
	}

	var r0 *chimesdkmediapipelines.ListMediaCapturePipelinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListMediaCapturePipelinesInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListMediaCapturePipelinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListMediaCapturePipelinesInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.ListMediaCapturePipelinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.ListMediaCapturePipelinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.ListMediaCapturePipelinesInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMediaInsightsPipelineConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMediaInsightsPipelineConfigurations(ctx context.Context, params *chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMediaInsightsPipelineConfigurations")
	}

	var r0 *chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.ListMediaInsightsPipelineConfigurationsInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMediaPipelineKinesisVideoStreamPools provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMediaPipelineKinesisVideoStreamPools(ctx context.Context, params *chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMediaPipelineKinesisVideoStreamPools")
	}

	var r0 *chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.ListMediaPipelineKinesisVideoStreamPoolsInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMediaPipelines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMediaPipelines(ctx context.Context, params *chimesdkmediapipelines.ListMediaPipelinesInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListMediaPipelinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMediaPipelines")
	}

	var r0 *chimesdkmediapipelines.ListMediaPipelinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListMediaPipelinesInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListMediaPipelinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListMediaPipelinesInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.ListMediaPipelinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.ListMediaPipelinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.ListMediaPipelinesInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *chimesdkmediapipelines.ListTagsForResourceInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *chimesdkmediapipelines.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListTagsForResourceInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.ListTagsForResourceInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.ListTagsForResourceInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() chimesdkmediapipelines.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 chimesdkmediapipelines.Options
	if rf, ok := ret.Get(0).(func() chimesdkmediapipelines.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(chimesdkmediapipelines.Options)
	}

	return r0
}

// StartSpeakerSearchTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSpeakerSearchTask(ctx context.Context, params *chimesdkmediapipelines.StartSpeakerSearchTaskInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.StartSpeakerSearchTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSpeakerSearchTask")
	}

	var r0 *chimesdkmediapipelines.StartSpeakerSearchTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.StartSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.StartSpeakerSearchTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.StartSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.StartSpeakerSearchTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.StartSpeakerSearchTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.StartSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartVoiceToneAnalysisTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartVoiceToneAnalysisTask(ctx context.Context, params *chimesdkmediapipelines.StartVoiceToneAnalysisTaskInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.StartVoiceToneAnalysisTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartVoiceToneAnalysisTask")
	}

	var r0 *chimesdkmediapipelines.StartVoiceToneAnalysisTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.StartVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.StartVoiceToneAnalysisTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.StartVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.StartVoiceToneAnalysisTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.StartVoiceToneAnalysisTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.StartVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopSpeakerSearchTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopSpeakerSearchTask(ctx context.Context, params *chimesdkmediapipelines.StopSpeakerSearchTaskInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.StopSpeakerSearchTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopSpeakerSearchTask")
	}

	var r0 *chimesdkmediapipelines.StopSpeakerSearchTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.StopSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.StopSpeakerSearchTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.StopSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.StopSpeakerSearchTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.StopSpeakerSearchTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.StopSpeakerSearchTaskInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopVoiceToneAnalysisTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopVoiceToneAnalysisTask(ctx context.Context, params *chimesdkmediapipelines.StopVoiceToneAnalysisTaskInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.StopVoiceToneAnalysisTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopVoiceToneAnalysisTask")
	}

	var r0 *chimesdkmediapipelines.StopVoiceToneAnalysisTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.StopVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.StopVoiceToneAnalysisTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.StopVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.StopVoiceToneAnalysisTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.StopVoiceToneAnalysisTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.StopVoiceToneAnalysisTaskInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *chimesdkmediapipelines.TagResourceInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *chimesdkmediapipelines.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.TagResourceInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.TagResourceInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.TagResourceInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *chimesdkmediapipelines.UntagResourceInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *chimesdkmediapipelines.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.UntagResourceInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.UntagResourceInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.UntagResourceInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMediaInsightsPipelineConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMediaInsightsPipelineConfiguration(ctx context.Context, params *chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMediaInsightsPipelineConfiguration")
	}

	var r0 *chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.UpdateMediaInsightsPipelineConfigurationInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMediaInsightsPipelineStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMediaInsightsPipelineStatus(ctx context.Context, params *chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMediaInsightsPipelineStatus")
	}

	var r0 *chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.UpdateMediaInsightsPipelineStatusInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMediaPipelineKinesisVideoStreamPool provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMediaPipelineKinesisVideoStreamPool(ctx context.Context, params *chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolInput, optFns ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMediaPipelineKinesisVideoStreamPool")
	}

	var r0 *chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) (*chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) *chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *chimesdkmediapipelines.UpdateMediaPipelineKinesisVideoStreamPoolInput, ...func(*chimesdkmediapipelines.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
