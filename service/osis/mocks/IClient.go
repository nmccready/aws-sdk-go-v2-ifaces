// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	osis "github.com/aws/aws-sdk-go-v2/service/osis"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreatePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePipeline(ctx context.Context, params *osis.CreatePipelineInput, optFns ...func(*osis.Options)) (*osis.CreatePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipeline")
	}

	var r0 *osis.CreatePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.CreatePipelineInput, ...func(*osis.Options)) (*osis.CreatePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.CreatePipelineInput, ...func(*osis.Options)) *osis.CreatePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.CreatePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.CreatePipelineInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePipeline(ctx context.Context, params *osis.DeletePipelineInput, optFns ...func(*osis.Options)) (*osis.DeletePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipeline")
	}

	var r0 *osis.DeletePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.DeletePipelineInput, ...func(*osis.Options)) (*osis.DeletePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.DeletePipelineInput, ...func(*osis.Options)) *osis.DeletePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.DeletePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.DeletePipelineInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPipeline(ctx context.Context, params *osis.GetPipelineInput, optFns ...func(*osis.Options)) (*osis.GetPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPipeline")
	}

	var r0 *osis.GetPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.GetPipelineInput, ...func(*osis.Options)) (*osis.GetPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.GetPipelineInput, ...func(*osis.Options)) *osis.GetPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.GetPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.GetPipelineInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineBlueprint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPipelineBlueprint(ctx context.Context, params *osis.GetPipelineBlueprintInput, optFns ...func(*osis.Options)) (*osis.GetPipelineBlueprintOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineBlueprint")
	}

	var r0 *osis.GetPipelineBlueprintOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.GetPipelineBlueprintInput, ...func(*osis.Options)) (*osis.GetPipelineBlueprintOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.GetPipelineBlueprintInput, ...func(*osis.Options)) *osis.GetPipelineBlueprintOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.GetPipelineBlueprintOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.GetPipelineBlueprintInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPipelineChangeProgress provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPipelineChangeProgress(ctx context.Context, params *osis.GetPipelineChangeProgressInput, optFns ...func(*osis.Options)) (*osis.GetPipelineChangeProgressOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPipelineChangeProgress")
	}

	var r0 *osis.GetPipelineChangeProgressOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.GetPipelineChangeProgressInput, ...func(*osis.Options)) (*osis.GetPipelineChangeProgressOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.GetPipelineChangeProgressInput, ...func(*osis.Options)) *osis.GetPipelineChangeProgressOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.GetPipelineChangeProgressOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.GetPipelineChangeProgressInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelineBlueprints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPipelineBlueprints(ctx context.Context, params *osis.ListPipelineBlueprintsInput, optFns ...func(*osis.Options)) (*osis.ListPipelineBlueprintsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineBlueprints")
	}

	var r0 *osis.ListPipelineBlueprintsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.ListPipelineBlueprintsInput, ...func(*osis.Options)) (*osis.ListPipelineBlueprintsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.ListPipelineBlueprintsInput, ...func(*osis.Options)) *osis.ListPipelineBlueprintsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.ListPipelineBlueprintsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.ListPipelineBlueprintsInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPipelines(ctx context.Context, params *osis.ListPipelinesInput, optFns ...func(*osis.Options)) (*osis.ListPipelinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 *osis.ListPipelinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.ListPipelinesInput, ...func(*osis.Options)) (*osis.ListPipelinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.ListPipelinesInput, ...func(*osis.Options)) *osis.ListPipelinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.ListPipelinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.ListPipelinesInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *osis.ListTagsForResourceInput, optFns ...func(*osis.Options)) (*osis.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *osis.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.ListTagsForResourceInput, ...func(*osis.Options)) (*osis.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.ListTagsForResourceInput, ...func(*osis.Options)) *osis.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.ListTagsForResourceInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() osis.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 osis.Options
	if rf, ok := ret.Get(0).(func() osis.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(osis.Options)
	}

	return r0
}

// StartPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartPipeline(ctx context.Context, params *osis.StartPipelineInput, optFns ...func(*osis.Options)) (*osis.StartPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartPipeline")
	}

	var r0 *osis.StartPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.StartPipelineInput, ...func(*osis.Options)) (*osis.StartPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.StartPipelineInput, ...func(*osis.Options)) *osis.StartPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.StartPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.StartPipelineInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopPipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopPipeline(ctx context.Context, params *osis.StopPipelineInput, optFns ...func(*osis.Options)) (*osis.StopPipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopPipeline")
	}

	var r0 *osis.StopPipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.StopPipelineInput, ...func(*osis.Options)) (*osis.StopPipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.StopPipelineInput, ...func(*osis.Options)) *osis.StopPipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.StopPipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.StopPipelineInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *osis.TagResourceInput, optFns ...func(*osis.Options)) (*osis.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *osis.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.TagResourceInput, ...func(*osis.Options)) (*osis.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.TagResourceInput, ...func(*osis.Options)) *osis.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.TagResourceInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *osis.UntagResourceInput, optFns ...func(*osis.Options)) (*osis.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *osis.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.UntagResourceInput, ...func(*osis.Options)) (*osis.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.UntagResourceInput, ...func(*osis.Options)) *osis.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.UntagResourceInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePipeline(ctx context.Context, params *osis.UpdatePipelineInput, optFns ...func(*osis.Options)) (*osis.UpdatePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipeline")
	}

	var r0 *osis.UpdatePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.UpdatePipelineInput, ...func(*osis.Options)) (*osis.UpdatePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.UpdatePipelineInput, ...func(*osis.Options)) *osis.UpdatePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.UpdatePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.UpdatePipelineInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidatePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ValidatePipeline(ctx context.Context, params *osis.ValidatePipelineInput, optFns ...func(*osis.Options)) (*osis.ValidatePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidatePipeline")
	}

	var r0 *osis.ValidatePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *osis.ValidatePipelineInput, ...func(*osis.Options)) (*osis.ValidatePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *osis.ValidatePipelineInput, ...func(*osis.Options)) *osis.ValidatePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*osis.ValidatePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *osis.ValidatePipelineInput, ...func(*osis.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
