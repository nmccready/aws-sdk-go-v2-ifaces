// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	backup "github.com/aws/aws-sdk-go-v2/service/backup"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelLegalHold provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelLegalHold(ctx context.Context, params *backup.CancelLegalHoldInput, optFns ...func(*backup.Options)) (*backup.CancelLegalHoldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelLegalHold")
	}

	var r0 *backup.CancelLegalHoldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CancelLegalHoldInput, ...func(*backup.Options)) (*backup.CancelLegalHoldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CancelLegalHoldInput, ...func(*backup.Options)) *backup.CancelLegalHoldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CancelLegalHoldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CancelLegalHoldInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackupPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackupPlan(ctx context.Context, params *backup.CreateBackupPlanInput, optFns ...func(*backup.Options)) (*backup.CreateBackupPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupPlan")
	}

	var r0 *backup.CreateBackupPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateBackupPlanInput, ...func(*backup.Options)) (*backup.CreateBackupPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateBackupPlanInput, ...func(*backup.Options)) *backup.CreateBackupPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateBackupPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateBackupPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackupSelection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackupSelection(ctx context.Context, params *backup.CreateBackupSelectionInput, optFns ...func(*backup.Options)) (*backup.CreateBackupSelectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupSelection")
	}

	var r0 *backup.CreateBackupSelectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateBackupSelectionInput, ...func(*backup.Options)) (*backup.CreateBackupSelectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateBackupSelectionInput, ...func(*backup.Options)) *backup.CreateBackupSelectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateBackupSelectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateBackupSelectionInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackupVault provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackupVault(ctx context.Context, params *backup.CreateBackupVaultInput, optFns ...func(*backup.Options)) (*backup.CreateBackupVaultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackupVault")
	}

	var r0 *backup.CreateBackupVaultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateBackupVaultInput, ...func(*backup.Options)) (*backup.CreateBackupVaultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateBackupVaultInput, ...func(*backup.Options)) *backup.CreateBackupVaultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateBackupVaultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateBackupVaultInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFramework provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFramework(ctx context.Context, params *backup.CreateFrameworkInput, optFns ...func(*backup.Options)) (*backup.CreateFrameworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFramework")
	}

	var r0 *backup.CreateFrameworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateFrameworkInput, ...func(*backup.Options)) (*backup.CreateFrameworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateFrameworkInput, ...func(*backup.Options)) *backup.CreateFrameworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateFrameworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateFrameworkInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLegalHold provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLegalHold(ctx context.Context, params *backup.CreateLegalHoldInput, optFns ...func(*backup.Options)) (*backup.CreateLegalHoldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLegalHold")
	}

	var r0 *backup.CreateLegalHoldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateLegalHoldInput, ...func(*backup.Options)) (*backup.CreateLegalHoldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateLegalHoldInput, ...func(*backup.Options)) *backup.CreateLegalHoldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateLegalHoldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateLegalHoldInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLogicallyAirGappedBackupVault provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLogicallyAirGappedBackupVault(ctx context.Context, params *backup.CreateLogicallyAirGappedBackupVaultInput, optFns ...func(*backup.Options)) (*backup.CreateLogicallyAirGappedBackupVaultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLogicallyAirGappedBackupVault")
	}

	var r0 *backup.CreateLogicallyAirGappedBackupVaultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateLogicallyAirGappedBackupVaultInput, ...func(*backup.Options)) (*backup.CreateLogicallyAirGappedBackupVaultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateLogicallyAirGappedBackupVaultInput, ...func(*backup.Options)) *backup.CreateLogicallyAirGappedBackupVaultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateLogicallyAirGappedBackupVaultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateLogicallyAirGappedBackupVaultInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReportPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReportPlan(ctx context.Context, params *backup.CreateReportPlanInput, optFns ...func(*backup.Options)) (*backup.CreateReportPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReportPlan")
	}

	var r0 *backup.CreateReportPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateReportPlanInput, ...func(*backup.Options)) (*backup.CreateReportPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateReportPlanInput, ...func(*backup.Options)) *backup.CreateReportPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateReportPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateReportPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRestoreTestingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRestoreTestingPlan(ctx context.Context, params *backup.CreateRestoreTestingPlanInput, optFns ...func(*backup.Options)) (*backup.CreateRestoreTestingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestoreTestingPlan")
	}

	var r0 *backup.CreateRestoreTestingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateRestoreTestingPlanInput, ...func(*backup.Options)) (*backup.CreateRestoreTestingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateRestoreTestingPlanInput, ...func(*backup.Options)) *backup.CreateRestoreTestingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateRestoreTestingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateRestoreTestingPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRestoreTestingSelection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRestoreTestingSelection(ctx context.Context, params *backup.CreateRestoreTestingSelectionInput, optFns ...func(*backup.Options)) (*backup.CreateRestoreTestingSelectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestoreTestingSelection")
	}

	var r0 *backup.CreateRestoreTestingSelectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateRestoreTestingSelectionInput, ...func(*backup.Options)) (*backup.CreateRestoreTestingSelectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.CreateRestoreTestingSelectionInput, ...func(*backup.Options)) *backup.CreateRestoreTestingSelectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.CreateRestoreTestingSelectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.CreateRestoreTestingSelectionInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackupPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackupPlan(ctx context.Context, params *backup.DeleteBackupPlanInput, optFns ...func(*backup.Options)) (*backup.DeleteBackupPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupPlan")
	}

	var r0 *backup.DeleteBackupPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupPlanInput, ...func(*backup.Options)) (*backup.DeleteBackupPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupPlanInput, ...func(*backup.Options)) *backup.DeleteBackupPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteBackupPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteBackupPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackupSelection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackupSelection(ctx context.Context, params *backup.DeleteBackupSelectionInput, optFns ...func(*backup.Options)) (*backup.DeleteBackupSelectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupSelection")
	}

	var r0 *backup.DeleteBackupSelectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupSelectionInput, ...func(*backup.Options)) (*backup.DeleteBackupSelectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupSelectionInput, ...func(*backup.Options)) *backup.DeleteBackupSelectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteBackupSelectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteBackupSelectionInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackupVault provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackupVault(ctx context.Context, params *backup.DeleteBackupVaultInput, optFns ...func(*backup.Options)) (*backup.DeleteBackupVaultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupVault")
	}

	var r0 *backup.DeleteBackupVaultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupVaultInput, ...func(*backup.Options)) (*backup.DeleteBackupVaultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupVaultInput, ...func(*backup.Options)) *backup.DeleteBackupVaultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteBackupVaultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteBackupVaultInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackupVaultAccessPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackupVaultAccessPolicy(ctx context.Context, params *backup.DeleteBackupVaultAccessPolicyInput, optFns ...func(*backup.Options)) (*backup.DeleteBackupVaultAccessPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupVaultAccessPolicy")
	}

	var r0 *backup.DeleteBackupVaultAccessPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupVaultAccessPolicyInput, ...func(*backup.Options)) (*backup.DeleteBackupVaultAccessPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupVaultAccessPolicyInput, ...func(*backup.Options)) *backup.DeleteBackupVaultAccessPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteBackupVaultAccessPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteBackupVaultAccessPolicyInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackupVaultLockConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackupVaultLockConfiguration(ctx context.Context, params *backup.DeleteBackupVaultLockConfigurationInput, optFns ...func(*backup.Options)) (*backup.DeleteBackupVaultLockConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupVaultLockConfiguration")
	}

	var r0 *backup.DeleteBackupVaultLockConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupVaultLockConfigurationInput, ...func(*backup.Options)) (*backup.DeleteBackupVaultLockConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupVaultLockConfigurationInput, ...func(*backup.Options)) *backup.DeleteBackupVaultLockConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteBackupVaultLockConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteBackupVaultLockConfigurationInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackupVaultNotifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackupVaultNotifications(ctx context.Context, params *backup.DeleteBackupVaultNotificationsInput, optFns ...func(*backup.Options)) (*backup.DeleteBackupVaultNotificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackupVaultNotifications")
	}

	var r0 *backup.DeleteBackupVaultNotificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupVaultNotificationsInput, ...func(*backup.Options)) (*backup.DeleteBackupVaultNotificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteBackupVaultNotificationsInput, ...func(*backup.Options)) *backup.DeleteBackupVaultNotificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteBackupVaultNotificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteBackupVaultNotificationsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFramework provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFramework(ctx context.Context, params *backup.DeleteFrameworkInput, optFns ...func(*backup.Options)) (*backup.DeleteFrameworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFramework")
	}

	var r0 *backup.DeleteFrameworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteFrameworkInput, ...func(*backup.Options)) (*backup.DeleteFrameworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteFrameworkInput, ...func(*backup.Options)) *backup.DeleteFrameworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteFrameworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteFrameworkInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecoveryPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRecoveryPoint(ctx context.Context, params *backup.DeleteRecoveryPointInput, optFns ...func(*backup.Options)) (*backup.DeleteRecoveryPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecoveryPoint")
	}

	var r0 *backup.DeleteRecoveryPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteRecoveryPointInput, ...func(*backup.Options)) (*backup.DeleteRecoveryPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteRecoveryPointInput, ...func(*backup.Options)) *backup.DeleteRecoveryPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteRecoveryPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteRecoveryPointInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReportPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReportPlan(ctx context.Context, params *backup.DeleteReportPlanInput, optFns ...func(*backup.Options)) (*backup.DeleteReportPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReportPlan")
	}

	var r0 *backup.DeleteReportPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteReportPlanInput, ...func(*backup.Options)) (*backup.DeleteReportPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteReportPlanInput, ...func(*backup.Options)) *backup.DeleteReportPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteReportPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteReportPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRestoreTestingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRestoreTestingPlan(ctx context.Context, params *backup.DeleteRestoreTestingPlanInput, optFns ...func(*backup.Options)) (*backup.DeleteRestoreTestingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRestoreTestingPlan")
	}

	var r0 *backup.DeleteRestoreTestingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteRestoreTestingPlanInput, ...func(*backup.Options)) (*backup.DeleteRestoreTestingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteRestoreTestingPlanInput, ...func(*backup.Options)) *backup.DeleteRestoreTestingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteRestoreTestingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteRestoreTestingPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRestoreTestingSelection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRestoreTestingSelection(ctx context.Context, params *backup.DeleteRestoreTestingSelectionInput, optFns ...func(*backup.Options)) (*backup.DeleteRestoreTestingSelectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRestoreTestingSelection")
	}

	var r0 *backup.DeleteRestoreTestingSelectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteRestoreTestingSelectionInput, ...func(*backup.Options)) (*backup.DeleteRestoreTestingSelectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DeleteRestoreTestingSelectionInput, ...func(*backup.Options)) *backup.DeleteRestoreTestingSelectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DeleteRestoreTestingSelectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DeleteRestoreTestingSelectionInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBackupJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBackupJob(ctx context.Context, params *backup.DescribeBackupJobInput, optFns ...func(*backup.Options)) (*backup.DescribeBackupJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBackupJob")
	}

	var r0 *backup.DescribeBackupJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeBackupJobInput, ...func(*backup.Options)) (*backup.DescribeBackupJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeBackupJobInput, ...func(*backup.Options)) *backup.DescribeBackupJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeBackupJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeBackupJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBackupVault provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBackupVault(ctx context.Context, params *backup.DescribeBackupVaultInput, optFns ...func(*backup.Options)) (*backup.DescribeBackupVaultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBackupVault")
	}

	var r0 *backup.DescribeBackupVaultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeBackupVaultInput, ...func(*backup.Options)) (*backup.DescribeBackupVaultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeBackupVaultInput, ...func(*backup.Options)) *backup.DescribeBackupVaultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeBackupVaultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeBackupVaultInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCopyJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCopyJob(ctx context.Context, params *backup.DescribeCopyJobInput, optFns ...func(*backup.Options)) (*backup.DescribeCopyJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCopyJob")
	}

	var r0 *backup.DescribeCopyJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeCopyJobInput, ...func(*backup.Options)) (*backup.DescribeCopyJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeCopyJobInput, ...func(*backup.Options)) *backup.DescribeCopyJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeCopyJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeCopyJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFramework provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFramework(ctx context.Context, params *backup.DescribeFrameworkInput, optFns ...func(*backup.Options)) (*backup.DescribeFrameworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFramework")
	}

	var r0 *backup.DescribeFrameworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeFrameworkInput, ...func(*backup.Options)) (*backup.DescribeFrameworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeFrameworkInput, ...func(*backup.Options)) *backup.DescribeFrameworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeFrameworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeFrameworkInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGlobalSettings(ctx context.Context, params *backup.DescribeGlobalSettingsInput, optFns ...func(*backup.Options)) (*backup.DescribeGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGlobalSettings")
	}

	var r0 *backup.DescribeGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeGlobalSettingsInput, ...func(*backup.Options)) (*backup.DescribeGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeGlobalSettingsInput, ...func(*backup.Options)) *backup.DescribeGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeGlobalSettingsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProtectedResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProtectedResource(ctx context.Context, params *backup.DescribeProtectedResourceInput, optFns ...func(*backup.Options)) (*backup.DescribeProtectedResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProtectedResource")
	}

	var r0 *backup.DescribeProtectedResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeProtectedResourceInput, ...func(*backup.Options)) (*backup.DescribeProtectedResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeProtectedResourceInput, ...func(*backup.Options)) *backup.DescribeProtectedResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeProtectedResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeProtectedResourceInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRecoveryPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRecoveryPoint(ctx context.Context, params *backup.DescribeRecoveryPointInput, optFns ...func(*backup.Options)) (*backup.DescribeRecoveryPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRecoveryPoint")
	}

	var r0 *backup.DescribeRecoveryPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeRecoveryPointInput, ...func(*backup.Options)) (*backup.DescribeRecoveryPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeRecoveryPointInput, ...func(*backup.Options)) *backup.DescribeRecoveryPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeRecoveryPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeRecoveryPointInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRegionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRegionSettings(ctx context.Context, params *backup.DescribeRegionSettingsInput, optFns ...func(*backup.Options)) (*backup.DescribeRegionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRegionSettings")
	}

	var r0 *backup.DescribeRegionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeRegionSettingsInput, ...func(*backup.Options)) (*backup.DescribeRegionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeRegionSettingsInput, ...func(*backup.Options)) *backup.DescribeRegionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeRegionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeRegionSettingsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReportJob(ctx context.Context, params *backup.DescribeReportJobInput, optFns ...func(*backup.Options)) (*backup.DescribeReportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReportJob")
	}

	var r0 *backup.DescribeReportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeReportJobInput, ...func(*backup.Options)) (*backup.DescribeReportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeReportJobInput, ...func(*backup.Options)) *backup.DescribeReportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeReportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeReportJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReportPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReportPlan(ctx context.Context, params *backup.DescribeReportPlanInput, optFns ...func(*backup.Options)) (*backup.DescribeReportPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReportPlan")
	}

	var r0 *backup.DescribeReportPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeReportPlanInput, ...func(*backup.Options)) (*backup.DescribeReportPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeReportPlanInput, ...func(*backup.Options)) *backup.DescribeReportPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeReportPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeReportPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRestoreJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRestoreJob(ctx context.Context, params *backup.DescribeRestoreJobInput, optFns ...func(*backup.Options)) (*backup.DescribeRestoreJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRestoreJob")
	}

	var r0 *backup.DescribeRestoreJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeRestoreJobInput, ...func(*backup.Options)) (*backup.DescribeRestoreJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DescribeRestoreJobInput, ...func(*backup.Options)) *backup.DescribeRestoreJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DescribeRestoreJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DescribeRestoreJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateRecoveryPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateRecoveryPoint(ctx context.Context, params *backup.DisassociateRecoveryPointInput, optFns ...func(*backup.Options)) (*backup.DisassociateRecoveryPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateRecoveryPoint")
	}

	var r0 *backup.DisassociateRecoveryPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DisassociateRecoveryPointInput, ...func(*backup.Options)) (*backup.DisassociateRecoveryPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DisassociateRecoveryPointInput, ...func(*backup.Options)) *backup.DisassociateRecoveryPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DisassociateRecoveryPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DisassociateRecoveryPointInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateRecoveryPointFromParent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateRecoveryPointFromParent(ctx context.Context, params *backup.DisassociateRecoveryPointFromParentInput, optFns ...func(*backup.Options)) (*backup.DisassociateRecoveryPointFromParentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateRecoveryPointFromParent")
	}

	var r0 *backup.DisassociateRecoveryPointFromParentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DisassociateRecoveryPointFromParentInput, ...func(*backup.Options)) (*backup.DisassociateRecoveryPointFromParentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.DisassociateRecoveryPointFromParentInput, ...func(*backup.Options)) *backup.DisassociateRecoveryPointFromParentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.DisassociateRecoveryPointFromParentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.DisassociateRecoveryPointFromParentInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportBackupPlanTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportBackupPlanTemplate(ctx context.Context, params *backup.ExportBackupPlanTemplateInput, optFns ...func(*backup.Options)) (*backup.ExportBackupPlanTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportBackupPlanTemplate")
	}

	var r0 *backup.ExportBackupPlanTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ExportBackupPlanTemplateInput, ...func(*backup.Options)) (*backup.ExportBackupPlanTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ExportBackupPlanTemplateInput, ...func(*backup.Options)) *backup.ExportBackupPlanTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ExportBackupPlanTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ExportBackupPlanTemplateInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackupPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackupPlan(ctx context.Context, params *backup.GetBackupPlanInput, optFns ...func(*backup.Options)) (*backup.GetBackupPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupPlan")
	}

	var r0 *backup.GetBackupPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupPlanInput, ...func(*backup.Options)) (*backup.GetBackupPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupPlanInput, ...func(*backup.Options)) *backup.GetBackupPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetBackupPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetBackupPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackupPlanFromJSON provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackupPlanFromJSON(ctx context.Context, params *backup.GetBackupPlanFromJSONInput, optFns ...func(*backup.Options)) (*backup.GetBackupPlanFromJSONOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupPlanFromJSON")
	}

	var r0 *backup.GetBackupPlanFromJSONOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupPlanFromJSONInput, ...func(*backup.Options)) (*backup.GetBackupPlanFromJSONOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupPlanFromJSONInput, ...func(*backup.Options)) *backup.GetBackupPlanFromJSONOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetBackupPlanFromJSONOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetBackupPlanFromJSONInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackupPlanFromTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackupPlanFromTemplate(ctx context.Context, params *backup.GetBackupPlanFromTemplateInput, optFns ...func(*backup.Options)) (*backup.GetBackupPlanFromTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupPlanFromTemplate")
	}

	var r0 *backup.GetBackupPlanFromTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupPlanFromTemplateInput, ...func(*backup.Options)) (*backup.GetBackupPlanFromTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupPlanFromTemplateInput, ...func(*backup.Options)) *backup.GetBackupPlanFromTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetBackupPlanFromTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetBackupPlanFromTemplateInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackupSelection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackupSelection(ctx context.Context, params *backup.GetBackupSelectionInput, optFns ...func(*backup.Options)) (*backup.GetBackupSelectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupSelection")
	}

	var r0 *backup.GetBackupSelectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupSelectionInput, ...func(*backup.Options)) (*backup.GetBackupSelectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupSelectionInput, ...func(*backup.Options)) *backup.GetBackupSelectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetBackupSelectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetBackupSelectionInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackupVaultAccessPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackupVaultAccessPolicy(ctx context.Context, params *backup.GetBackupVaultAccessPolicyInput, optFns ...func(*backup.Options)) (*backup.GetBackupVaultAccessPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupVaultAccessPolicy")
	}

	var r0 *backup.GetBackupVaultAccessPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupVaultAccessPolicyInput, ...func(*backup.Options)) (*backup.GetBackupVaultAccessPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupVaultAccessPolicyInput, ...func(*backup.Options)) *backup.GetBackupVaultAccessPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetBackupVaultAccessPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetBackupVaultAccessPolicyInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackupVaultNotifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackupVaultNotifications(ctx context.Context, params *backup.GetBackupVaultNotificationsInput, optFns ...func(*backup.Options)) (*backup.GetBackupVaultNotificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackupVaultNotifications")
	}

	var r0 *backup.GetBackupVaultNotificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupVaultNotificationsInput, ...func(*backup.Options)) (*backup.GetBackupVaultNotificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetBackupVaultNotificationsInput, ...func(*backup.Options)) *backup.GetBackupVaultNotificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetBackupVaultNotificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetBackupVaultNotificationsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLegalHold provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLegalHold(ctx context.Context, params *backup.GetLegalHoldInput, optFns ...func(*backup.Options)) (*backup.GetLegalHoldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLegalHold")
	}

	var r0 *backup.GetLegalHoldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetLegalHoldInput, ...func(*backup.Options)) (*backup.GetLegalHoldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetLegalHoldInput, ...func(*backup.Options)) *backup.GetLegalHoldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetLegalHoldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetLegalHoldInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecoveryPointIndexDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecoveryPointIndexDetails(ctx context.Context, params *backup.GetRecoveryPointIndexDetailsInput, optFns ...func(*backup.Options)) (*backup.GetRecoveryPointIndexDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecoveryPointIndexDetails")
	}

	var r0 *backup.GetRecoveryPointIndexDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRecoveryPointIndexDetailsInput, ...func(*backup.Options)) (*backup.GetRecoveryPointIndexDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRecoveryPointIndexDetailsInput, ...func(*backup.Options)) *backup.GetRecoveryPointIndexDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetRecoveryPointIndexDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetRecoveryPointIndexDetailsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecoveryPointRestoreMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecoveryPointRestoreMetadata(ctx context.Context, params *backup.GetRecoveryPointRestoreMetadataInput, optFns ...func(*backup.Options)) (*backup.GetRecoveryPointRestoreMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecoveryPointRestoreMetadata")
	}

	var r0 *backup.GetRecoveryPointRestoreMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRecoveryPointRestoreMetadataInput, ...func(*backup.Options)) (*backup.GetRecoveryPointRestoreMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRecoveryPointRestoreMetadataInput, ...func(*backup.Options)) *backup.GetRecoveryPointRestoreMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetRecoveryPointRestoreMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetRecoveryPointRestoreMetadataInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestoreJobMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRestoreJobMetadata(ctx context.Context, params *backup.GetRestoreJobMetadataInput, optFns ...func(*backup.Options)) (*backup.GetRestoreJobMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRestoreJobMetadata")
	}

	var r0 *backup.GetRestoreJobMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRestoreJobMetadataInput, ...func(*backup.Options)) (*backup.GetRestoreJobMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRestoreJobMetadataInput, ...func(*backup.Options)) *backup.GetRestoreJobMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetRestoreJobMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetRestoreJobMetadataInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestoreTestingInferredMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRestoreTestingInferredMetadata(ctx context.Context, params *backup.GetRestoreTestingInferredMetadataInput, optFns ...func(*backup.Options)) (*backup.GetRestoreTestingInferredMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRestoreTestingInferredMetadata")
	}

	var r0 *backup.GetRestoreTestingInferredMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRestoreTestingInferredMetadataInput, ...func(*backup.Options)) (*backup.GetRestoreTestingInferredMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRestoreTestingInferredMetadataInput, ...func(*backup.Options)) *backup.GetRestoreTestingInferredMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetRestoreTestingInferredMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetRestoreTestingInferredMetadataInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestoreTestingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRestoreTestingPlan(ctx context.Context, params *backup.GetRestoreTestingPlanInput, optFns ...func(*backup.Options)) (*backup.GetRestoreTestingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRestoreTestingPlan")
	}

	var r0 *backup.GetRestoreTestingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRestoreTestingPlanInput, ...func(*backup.Options)) (*backup.GetRestoreTestingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRestoreTestingPlanInput, ...func(*backup.Options)) *backup.GetRestoreTestingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetRestoreTestingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetRestoreTestingPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRestoreTestingSelection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRestoreTestingSelection(ctx context.Context, params *backup.GetRestoreTestingSelectionInput, optFns ...func(*backup.Options)) (*backup.GetRestoreTestingSelectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRestoreTestingSelection")
	}

	var r0 *backup.GetRestoreTestingSelectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRestoreTestingSelectionInput, ...func(*backup.Options)) (*backup.GetRestoreTestingSelectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetRestoreTestingSelectionInput, ...func(*backup.Options)) *backup.GetRestoreTestingSelectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetRestoreTestingSelectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetRestoreTestingSelectionInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSupportedResourceTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSupportedResourceTypes(ctx context.Context, params *backup.GetSupportedResourceTypesInput, optFns ...func(*backup.Options)) (*backup.GetSupportedResourceTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedResourceTypes")
	}

	var r0 *backup.GetSupportedResourceTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetSupportedResourceTypesInput, ...func(*backup.Options)) (*backup.GetSupportedResourceTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.GetSupportedResourceTypesInput, ...func(*backup.Options)) *backup.GetSupportedResourceTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.GetSupportedResourceTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.GetSupportedResourceTypesInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupJobSummaries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackupJobSummaries(ctx context.Context, params *backup.ListBackupJobSummariesInput, optFns ...func(*backup.Options)) (*backup.ListBackupJobSummariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupJobSummaries")
	}

	var r0 *backup.ListBackupJobSummariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupJobSummariesInput, ...func(*backup.Options)) (*backup.ListBackupJobSummariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupJobSummariesInput, ...func(*backup.Options)) *backup.ListBackupJobSummariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListBackupJobSummariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListBackupJobSummariesInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackupJobs(ctx context.Context, params *backup.ListBackupJobsInput, optFns ...func(*backup.Options)) (*backup.ListBackupJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupJobs")
	}

	var r0 *backup.ListBackupJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupJobsInput, ...func(*backup.Options)) (*backup.ListBackupJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupJobsInput, ...func(*backup.Options)) *backup.ListBackupJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListBackupJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListBackupJobsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupPlanTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackupPlanTemplates(ctx context.Context, params *backup.ListBackupPlanTemplatesInput, optFns ...func(*backup.Options)) (*backup.ListBackupPlanTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupPlanTemplates")
	}

	var r0 *backup.ListBackupPlanTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupPlanTemplatesInput, ...func(*backup.Options)) (*backup.ListBackupPlanTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupPlanTemplatesInput, ...func(*backup.Options)) *backup.ListBackupPlanTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListBackupPlanTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListBackupPlanTemplatesInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupPlanVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackupPlanVersions(ctx context.Context, params *backup.ListBackupPlanVersionsInput, optFns ...func(*backup.Options)) (*backup.ListBackupPlanVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupPlanVersions")
	}

	var r0 *backup.ListBackupPlanVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupPlanVersionsInput, ...func(*backup.Options)) (*backup.ListBackupPlanVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupPlanVersionsInput, ...func(*backup.Options)) *backup.ListBackupPlanVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListBackupPlanVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListBackupPlanVersionsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackupPlans(ctx context.Context, params *backup.ListBackupPlansInput, optFns ...func(*backup.Options)) (*backup.ListBackupPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupPlans")
	}

	var r0 *backup.ListBackupPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupPlansInput, ...func(*backup.Options)) (*backup.ListBackupPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupPlansInput, ...func(*backup.Options)) *backup.ListBackupPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListBackupPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListBackupPlansInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupSelections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackupSelections(ctx context.Context, params *backup.ListBackupSelectionsInput, optFns ...func(*backup.Options)) (*backup.ListBackupSelectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupSelections")
	}

	var r0 *backup.ListBackupSelectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupSelectionsInput, ...func(*backup.Options)) (*backup.ListBackupSelectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupSelectionsInput, ...func(*backup.Options)) *backup.ListBackupSelectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListBackupSelectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListBackupSelectionsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackupVaults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackupVaults(ctx context.Context, params *backup.ListBackupVaultsInput, optFns ...func(*backup.Options)) (*backup.ListBackupVaultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackupVaults")
	}

	var r0 *backup.ListBackupVaultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupVaultsInput, ...func(*backup.Options)) (*backup.ListBackupVaultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListBackupVaultsInput, ...func(*backup.Options)) *backup.ListBackupVaultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListBackupVaultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListBackupVaultsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCopyJobSummaries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCopyJobSummaries(ctx context.Context, params *backup.ListCopyJobSummariesInput, optFns ...func(*backup.Options)) (*backup.ListCopyJobSummariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCopyJobSummaries")
	}

	var r0 *backup.ListCopyJobSummariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListCopyJobSummariesInput, ...func(*backup.Options)) (*backup.ListCopyJobSummariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListCopyJobSummariesInput, ...func(*backup.Options)) *backup.ListCopyJobSummariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListCopyJobSummariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListCopyJobSummariesInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCopyJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCopyJobs(ctx context.Context, params *backup.ListCopyJobsInput, optFns ...func(*backup.Options)) (*backup.ListCopyJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCopyJobs")
	}

	var r0 *backup.ListCopyJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListCopyJobsInput, ...func(*backup.Options)) (*backup.ListCopyJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListCopyJobsInput, ...func(*backup.Options)) *backup.ListCopyJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListCopyJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListCopyJobsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFrameworks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFrameworks(ctx context.Context, params *backup.ListFrameworksInput, optFns ...func(*backup.Options)) (*backup.ListFrameworksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFrameworks")
	}

	var r0 *backup.ListFrameworksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListFrameworksInput, ...func(*backup.Options)) (*backup.ListFrameworksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListFrameworksInput, ...func(*backup.Options)) *backup.ListFrameworksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListFrameworksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListFrameworksInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIndexedRecoveryPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIndexedRecoveryPoints(ctx context.Context, params *backup.ListIndexedRecoveryPointsInput, optFns ...func(*backup.Options)) (*backup.ListIndexedRecoveryPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexedRecoveryPoints")
	}

	var r0 *backup.ListIndexedRecoveryPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListIndexedRecoveryPointsInput, ...func(*backup.Options)) (*backup.ListIndexedRecoveryPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListIndexedRecoveryPointsInput, ...func(*backup.Options)) *backup.ListIndexedRecoveryPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListIndexedRecoveryPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListIndexedRecoveryPointsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLegalHolds provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLegalHolds(ctx context.Context, params *backup.ListLegalHoldsInput, optFns ...func(*backup.Options)) (*backup.ListLegalHoldsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLegalHolds")
	}

	var r0 *backup.ListLegalHoldsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListLegalHoldsInput, ...func(*backup.Options)) (*backup.ListLegalHoldsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListLegalHoldsInput, ...func(*backup.Options)) *backup.ListLegalHoldsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListLegalHoldsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListLegalHoldsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProtectedResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProtectedResources(ctx context.Context, params *backup.ListProtectedResourcesInput, optFns ...func(*backup.Options)) (*backup.ListProtectedResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtectedResources")
	}

	var r0 *backup.ListProtectedResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListProtectedResourcesInput, ...func(*backup.Options)) (*backup.ListProtectedResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListProtectedResourcesInput, ...func(*backup.Options)) *backup.ListProtectedResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListProtectedResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListProtectedResourcesInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProtectedResourcesByBackupVault provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProtectedResourcesByBackupVault(ctx context.Context, params *backup.ListProtectedResourcesByBackupVaultInput, optFns ...func(*backup.Options)) (*backup.ListProtectedResourcesByBackupVaultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProtectedResourcesByBackupVault")
	}

	var r0 *backup.ListProtectedResourcesByBackupVaultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListProtectedResourcesByBackupVaultInput, ...func(*backup.Options)) (*backup.ListProtectedResourcesByBackupVaultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListProtectedResourcesByBackupVaultInput, ...func(*backup.Options)) *backup.ListProtectedResourcesByBackupVaultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListProtectedResourcesByBackupVaultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListProtectedResourcesByBackupVaultInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecoveryPointsByBackupVault provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecoveryPointsByBackupVault(ctx context.Context, params *backup.ListRecoveryPointsByBackupVaultInput, optFns ...func(*backup.Options)) (*backup.ListRecoveryPointsByBackupVaultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecoveryPointsByBackupVault")
	}

	var r0 *backup.ListRecoveryPointsByBackupVaultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRecoveryPointsByBackupVaultInput, ...func(*backup.Options)) (*backup.ListRecoveryPointsByBackupVaultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRecoveryPointsByBackupVaultInput, ...func(*backup.Options)) *backup.ListRecoveryPointsByBackupVaultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListRecoveryPointsByBackupVaultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListRecoveryPointsByBackupVaultInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecoveryPointsByLegalHold provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecoveryPointsByLegalHold(ctx context.Context, params *backup.ListRecoveryPointsByLegalHoldInput, optFns ...func(*backup.Options)) (*backup.ListRecoveryPointsByLegalHoldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecoveryPointsByLegalHold")
	}

	var r0 *backup.ListRecoveryPointsByLegalHoldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRecoveryPointsByLegalHoldInput, ...func(*backup.Options)) (*backup.ListRecoveryPointsByLegalHoldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRecoveryPointsByLegalHoldInput, ...func(*backup.Options)) *backup.ListRecoveryPointsByLegalHoldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListRecoveryPointsByLegalHoldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListRecoveryPointsByLegalHoldInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecoveryPointsByResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecoveryPointsByResource(ctx context.Context, params *backup.ListRecoveryPointsByResourceInput, optFns ...func(*backup.Options)) (*backup.ListRecoveryPointsByResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecoveryPointsByResource")
	}

	var r0 *backup.ListRecoveryPointsByResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRecoveryPointsByResourceInput, ...func(*backup.Options)) (*backup.ListRecoveryPointsByResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRecoveryPointsByResourceInput, ...func(*backup.Options)) *backup.ListRecoveryPointsByResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListRecoveryPointsByResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListRecoveryPointsByResourceInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReportJobs(ctx context.Context, params *backup.ListReportJobsInput, optFns ...func(*backup.Options)) (*backup.ListReportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReportJobs")
	}

	var r0 *backup.ListReportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListReportJobsInput, ...func(*backup.Options)) (*backup.ListReportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListReportJobsInput, ...func(*backup.Options)) *backup.ListReportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListReportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListReportJobsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReportPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReportPlans(ctx context.Context, params *backup.ListReportPlansInput, optFns ...func(*backup.Options)) (*backup.ListReportPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReportPlans")
	}

	var r0 *backup.ListReportPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListReportPlansInput, ...func(*backup.Options)) (*backup.ListReportPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListReportPlansInput, ...func(*backup.Options)) *backup.ListReportPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListReportPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListReportPlansInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRestoreJobSummaries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRestoreJobSummaries(ctx context.Context, params *backup.ListRestoreJobSummariesInput, optFns ...func(*backup.Options)) (*backup.ListRestoreJobSummariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRestoreJobSummaries")
	}

	var r0 *backup.ListRestoreJobSummariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreJobSummariesInput, ...func(*backup.Options)) (*backup.ListRestoreJobSummariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreJobSummariesInput, ...func(*backup.Options)) *backup.ListRestoreJobSummariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListRestoreJobSummariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListRestoreJobSummariesInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRestoreJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRestoreJobs(ctx context.Context, params *backup.ListRestoreJobsInput, optFns ...func(*backup.Options)) (*backup.ListRestoreJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRestoreJobs")
	}

	var r0 *backup.ListRestoreJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreJobsInput, ...func(*backup.Options)) (*backup.ListRestoreJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreJobsInput, ...func(*backup.Options)) *backup.ListRestoreJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListRestoreJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListRestoreJobsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRestoreJobsByProtectedResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRestoreJobsByProtectedResource(ctx context.Context, params *backup.ListRestoreJobsByProtectedResourceInput, optFns ...func(*backup.Options)) (*backup.ListRestoreJobsByProtectedResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRestoreJobsByProtectedResource")
	}

	var r0 *backup.ListRestoreJobsByProtectedResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreJobsByProtectedResourceInput, ...func(*backup.Options)) (*backup.ListRestoreJobsByProtectedResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreJobsByProtectedResourceInput, ...func(*backup.Options)) *backup.ListRestoreJobsByProtectedResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListRestoreJobsByProtectedResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListRestoreJobsByProtectedResourceInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRestoreTestingPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRestoreTestingPlans(ctx context.Context, params *backup.ListRestoreTestingPlansInput, optFns ...func(*backup.Options)) (*backup.ListRestoreTestingPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRestoreTestingPlans")
	}

	var r0 *backup.ListRestoreTestingPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreTestingPlansInput, ...func(*backup.Options)) (*backup.ListRestoreTestingPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreTestingPlansInput, ...func(*backup.Options)) *backup.ListRestoreTestingPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListRestoreTestingPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListRestoreTestingPlansInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRestoreTestingSelections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRestoreTestingSelections(ctx context.Context, params *backup.ListRestoreTestingSelectionsInput, optFns ...func(*backup.Options)) (*backup.ListRestoreTestingSelectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRestoreTestingSelections")
	}

	var r0 *backup.ListRestoreTestingSelectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreTestingSelectionsInput, ...func(*backup.Options)) (*backup.ListRestoreTestingSelectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListRestoreTestingSelectionsInput, ...func(*backup.Options)) *backup.ListRestoreTestingSelectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListRestoreTestingSelectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListRestoreTestingSelectionsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTags(ctx context.Context, params *backup.ListTagsInput, optFns ...func(*backup.Options)) (*backup.ListTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 *backup.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListTagsInput, ...func(*backup.Options)) (*backup.ListTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.ListTagsInput, ...func(*backup.Options)) *backup.ListTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.ListTagsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() backup.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 backup.Options
	if rf, ok := ret.Get(0).(func() backup.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backup.Options)
	}

	return r0
}

// PutBackupVaultAccessPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBackupVaultAccessPolicy(ctx context.Context, params *backup.PutBackupVaultAccessPolicyInput, optFns ...func(*backup.Options)) (*backup.PutBackupVaultAccessPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBackupVaultAccessPolicy")
	}

	var r0 *backup.PutBackupVaultAccessPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.PutBackupVaultAccessPolicyInput, ...func(*backup.Options)) (*backup.PutBackupVaultAccessPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.PutBackupVaultAccessPolicyInput, ...func(*backup.Options)) *backup.PutBackupVaultAccessPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.PutBackupVaultAccessPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.PutBackupVaultAccessPolicyInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBackupVaultLockConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBackupVaultLockConfiguration(ctx context.Context, params *backup.PutBackupVaultLockConfigurationInput, optFns ...func(*backup.Options)) (*backup.PutBackupVaultLockConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBackupVaultLockConfiguration")
	}

	var r0 *backup.PutBackupVaultLockConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.PutBackupVaultLockConfigurationInput, ...func(*backup.Options)) (*backup.PutBackupVaultLockConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.PutBackupVaultLockConfigurationInput, ...func(*backup.Options)) *backup.PutBackupVaultLockConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.PutBackupVaultLockConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.PutBackupVaultLockConfigurationInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBackupVaultNotifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBackupVaultNotifications(ctx context.Context, params *backup.PutBackupVaultNotificationsInput, optFns ...func(*backup.Options)) (*backup.PutBackupVaultNotificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBackupVaultNotifications")
	}

	var r0 *backup.PutBackupVaultNotificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.PutBackupVaultNotificationsInput, ...func(*backup.Options)) (*backup.PutBackupVaultNotificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.PutBackupVaultNotificationsInput, ...func(*backup.Options)) *backup.PutBackupVaultNotificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.PutBackupVaultNotificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.PutBackupVaultNotificationsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRestoreValidationResult provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRestoreValidationResult(ctx context.Context, params *backup.PutRestoreValidationResultInput, optFns ...func(*backup.Options)) (*backup.PutRestoreValidationResultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRestoreValidationResult")
	}

	var r0 *backup.PutRestoreValidationResultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.PutRestoreValidationResultInput, ...func(*backup.Options)) (*backup.PutRestoreValidationResultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.PutRestoreValidationResultInput, ...func(*backup.Options)) *backup.PutRestoreValidationResultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.PutRestoreValidationResultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.PutRestoreValidationResultInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBackupJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartBackupJob(ctx context.Context, params *backup.StartBackupJobInput, optFns ...func(*backup.Options)) (*backup.StartBackupJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartBackupJob")
	}

	var r0 *backup.StartBackupJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StartBackupJobInput, ...func(*backup.Options)) (*backup.StartBackupJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StartBackupJobInput, ...func(*backup.Options)) *backup.StartBackupJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.StartBackupJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.StartBackupJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartCopyJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartCopyJob(ctx context.Context, params *backup.StartCopyJobInput, optFns ...func(*backup.Options)) (*backup.StartCopyJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartCopyJob")
	}

	var r0 *backup.StartCopyJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StartCopyJobInput, ...func(*backup.Options)) (*backup.StartCopyJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StartCopyJobInput, ...func(*backup.Options)) *backup.StartCopyJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.StartCopyJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.StartCopyJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartReportJob(ctx context.Context, params *backup.StartReportJobInput, optFns ...func(*backup.Options)) (*backup.StartReportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartReportJob")
	}

	var r0 *backup.StartReportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StartReportJobInput, ...func(*backup.Options)) (*backup.StartReportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StartReportJobInput, ...func(*backup.Options)) *backup.StartReportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.StartReportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.StartReportJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRestoreJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRestoreJob(ctx context.Context, params *backup.StartRestoreJobInput, optFns ...func(*backup.Options)) (*backup.StartRestoreJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRestoreJob")
	}

	var r0 *backup.StartRestoreJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StartRestoreJobInput, ...func(*backup.Options)) (*backup.StartRestoreJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StartRestoreJobInput, ...func(*backup.Options)) *backup.StartRestoreJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.StartRestoreJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.StartRestoreJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBackupJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopBackupJob(ctx context.Context, params *backup.StopBackupJobInput, optFns ...func(*backup.Options)) (*backup.StopBackupJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopBackupJob")
	}

	var r0 *backup.StopBackupJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StopBackupJobInput, ...func(*backup.Options)) (*backup.StopBackupJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.StopBackupJobInput, ...func(*backup.Options)) *backup.StopBackupJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.StopBackupJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.StopBackupJobInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *backup.TagResourceInput, optFns ...func(*backup.Options)) (*backup.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *backup.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.TagResourceInput, ...func(*backup.Options)) (*backup.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.TagResourceInput, ...func(*backup.Options)) *backup.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.TagResourceInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *backup.UntagResourceInput, optFns ...func(*backup.Options)) (*backup.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *backup.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UntagResourceInput, ...func(*backup.Options)) (*backup.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UntagResourceInput, ...func(*backup.Options)) *backup.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UntagResourceInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackupPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBackupPlan(ctx context.Context, params *backup.UpdateBackupPlanInput, optFns ...func(*backup.Options)) (*backup.UpdateBackupPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackupPlan")
	}

	var r0 *backup.UpdateBackupPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateBackupPlanInput, ...func(*backup.Options)) (*backup.UpdateBackupPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateBackupPlanInput, ...func(*backup.Options)) *backup.UpdateBackupPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateBackupPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateBackupPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFramework provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFramework(ctx context.Context, params *backup.UpdateFrameworkInput, optFns ...func(*backup.Options)) (*backup.UpdateFrameworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFramework")
	}

	var r0 *backup.UpdateFrameworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateFrameworkInput, ...func(*backup.Options)) (*backup.UpdateFrameworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateFrameworkInput, ...func(*backup.Options)) *backup.UpdateFrameworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateFrameworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateFrameworkInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGlobalSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGlobalSettings(ctx context.Context, params *backup.UpdateGlobalSettingsInput, optFns ...func(*backup.Options)) (*backup.UpdateGlobalSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGlobalSettings")
	}

	var r0 *backup.UpdateGlobalSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateGlobalSettingsInput, ...func(*backup.Options)) (*backup.UpdateGlobalSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateGlobalSettingsInput, ...func(*backup.Options)) *backup.UpdateGlobalSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateGlobalSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateGlobalSettingsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecoveryPointIndexSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRecoveryPointIndexSettings(ctx context.Context, params *backup.UpdateRecoveryPointIndexSettingsInput, optFns ...func(*backup.Options)) (*backup.UpdateRecoveryPointIndexSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecoveryPointIndexSettings")
	}

	var r0 *backup.UpdateRecoveryPointIndexSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRecoveryPointIndexSettingsInput, ...func(*backup.Options)) (*backup.UpdateRecoveryPointIndexSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRecoveryPointIndexSettingsInput, ...func(*backup.Options)) *backup.UpdateRecoveryPointIndexSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateRecoveryPointIndexSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateRecoveryPointIndexSettingsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecoveryPointLifecycle provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRecoveryPointLifecycle(ctx context.Context, params *backup.UpdateRecoveryPointLifecycleInput, optFns ...func(*backup.Options)) (*backup.UpdateRecoveryPointLifecycleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecoveryPointLifecycle")
	}

	var r0 *backup.UpdateRecoveryPointLifecycleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRecoveryPointLifecycleInput, ...func(*backup.Options)) (*backup.UpdateRecoveryPointLifecycleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRecoveryPointLifecycleInput, ...func(*backup.Options)) *backup.UpdateRecoveryPointLifecycleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateRecoveryPointLifecycleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateRecoveryPointLifecycleInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRegionSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRegionSettings(ctx context.Context, params *backup.UpdateRegionSettingsInput, optFns ...func(*backup.Options)) (*backup.UpdateRegionSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRegionSettings")
	}

	var r0 *backup.UpdateRegionSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRegionSettingsInput, ...func(*backup.Options)) (*backup.UpdateRegionSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRegionSettingsInput, ...func(*backup.Options)) *backup.UpdateRegionSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateRegionSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateRegionSettingsInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReportPlan(ctx context.Context, params *backup.UpdateReportPlanInput, optFns ...func(*backup.Options)) (*backup.UpdateReportPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReportPlan")
	}

	var r0 *backup.UpdateReportPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateReportPlanInput, ...func(*backup.Options)) (*backup.UpdateReportPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateReportPlanInput, ...func(*backup.Options)) *backup.UpdateReportPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateReportPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateReportPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRestoreTestingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRestoreTestingPlan(ctx context.Context, params *backup.UpdateRestoreTestingPlanInput, optFns ...func(*backup.Options)) (*backup.UpdateRestoreTestingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRestoreTestingPlan")
	}

	var r0 *backup.UpdateRestoreTestingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRestoreTestingPlanInput, ...func(*backup.Options)) (*backup.UpdateRestoreTestingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRestoreTestingPlanInput, ...func(*backup.Options)) *backup.UpdateRestoreTestingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateRestoreTestingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateRestoreTestingPlanInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRestoreTestingSelection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRestoreTestingSelection(ctx context.Context, params *backup.UpdateRestoreTestingSelectionInput, optFns ...func(*backup.Options)) (*backup.UpdateRestoreTestingSelectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRestoreTestingSelection")
	}

	var r0 *backup.UpdateRestoreTestingSelectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRestoreTestingSelectionInput, ...func(*backup.Options)) (*backup.UpdateRestoreTestingSelectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backup.UpdateRestoreTestingSelectionInput, ...func(*backup.Options)) *backup.UpdateRestoreTestingSelectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backup.UpdateRestoreTestingSelectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backup.UpdateRestoreTestingSelectionInput, ...func(*backup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
