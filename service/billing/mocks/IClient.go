// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	billing "github.com/aws/aws-sdk-go-v2/service/billing"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateBillingView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBillingView(ctx context.Context, params *billing.CreateBillingViewInput, optFns ...func(*billing.Options)) (*billing.CreateBillingViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBillingView")
	}

	var r0 *billing.CreateBillingViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.CreateBillingViewInput, ...func(*billing.Options)) (*billing.CreateBillingViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.CreateBillingViewInput, ...func(*billing.Options)) *billing.CreateBillingViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.CreateBillingViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.CreateBillingViewInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBillingView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBillingView(ctx context.Context, params *billing.DeleteBillingViewInput, optFns ...func(*billing.Options)) (*billing.DeleteBillingViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBillingView")
	}

	var r0 *billing.DeleteBillingViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.DeleteBillingViewInput, ...func(*billing.Options)) (*billing.DeleteBillingViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.DeleteBillingViewInput, ...func(*billing.Options)) *billing.DeleteBillingViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.DeleteBillingViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.DeleteBillingViewInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBillingView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBillingView(ctx context.Context, params *billing.GetBillingViewInput, optFns ...func(*billing.Options)) (*billing.GetBillingViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBillingView")
	}

	var r0 *billing.GetBillingViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetBillingViewInput, ...func(*billing.Options)) (*billing.GetBillingViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetBillingViewInput, ...func(*billing.Options)) *billing.GetBillingViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.GetBillingViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetBillingViewInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *billing.GetResourcePolicyInput, optFns ...func(*billing.Options)) (*billing.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *billing.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetResourcePolicyInput, ...func(*billing.Options)) (*billing.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.GetResourcePolicyInput, ...func(*billing.Options)) *billing.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.GetResourcePolicyInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBillingViews provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBillingViews(ctx context.Context, params *billing.ListBillingViewsInput, optFns ...func(*billing.Options)) (*billing.ListBillingViewsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBillingViews")
	}

	var r0 *billing.ListBillingViewsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ListBillingViewsInput, ...func(*billing.Options)) (*billing.ListBillingViewsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ListBillingViewsInput, ...func(*billing.Options)) *billing.ListBillingViewsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.ListBillingViewsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.ListBillingViewsInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSourceViewsForBillingView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSourceViewsForBillingView(ctx context.Context, params *billing.ListSourceViewsForBillingViewInput, optFns ...func(*billing.Options)) (*billing.ListSourceViewsForBillingViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSourceViewsForBillingView")
	}

	var r0 *billing.ListSourceViewsForBillingViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ListSourceViewsForBillingViewInput, ...func(*billing.Options)) (*billing.ListSourceViewsForBillingViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ListSourceViewsForBillingViewInput, ...func(*billing.Options)) *billing.ListSourceViewsForBillingViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.ListSourceViewsForBillingViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.ListSourceViewsForBillingViewInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *billing.ListTagsForResourceInput, optFns ...func(*billing.Options)) (*billing.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *billing.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ListTagsForResourceInput, ...func(*billing.Options)) (*billing.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.ListTagsForResourceInput, ...func(*billing.Options)) *billing.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.ListTagsForResourceInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() billing.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 billing.Options
	if rf, ok := ret.Get(0).(func() billing.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(billing.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *billing.TagResourceInput, optFns ...func(*billing.Options)) (*billing.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *billing.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.TagResourceInput, ...func(*billing.Options)) (*billing.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.TagResourceInput, ...func(*billing.Options)) *billing.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.TagResourceInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *billing.UntagResourceInput, optFns ...func(*billing.Options)) (*billing.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *billing.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.UntagResourceInput, ...func(*billing.Options)) (*billing.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.UntagResourceInput, ...func(*billing.Options)) *billing.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.UntagResourceInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBillingView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBillingView(ctx context.Context, params *billing.UpdateBillingViewInput, optFns ...func(*billing.Options)) (*billing.UpdateBillingViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBillingView")
	}

	var r0 *billing.UpdateBillingViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *billing.UpdateBillingViewInput, ...func(*billing.Options)) (*billing.UpdateBillingViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *billing.UpdateBillingViewInput, ...func(*billing.Options)) *billing.UpdateBillingViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*billing.UpdateBillingViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *billing.UpdateBillingViewInput, ...func(*billing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
