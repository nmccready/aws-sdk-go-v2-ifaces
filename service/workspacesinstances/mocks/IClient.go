// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	workspacesinstances "github.com/aws/aws-sdk-go-v2/service/workspacesinstances"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateVolume(ctx context.Context, params *workspacesinstances.AssociateVolumeInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.AssociateVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateVolume")
	}

	var r0 *workspacesinstances.AssociateVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.AssociateVolumeInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.AssociateVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.AssociateVolumeInput, ...func(*workspacesinstances.Options)) *workspacesinstances.AssociateVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.AssociateVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.AssociateVolumeInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVolume(ctx context.Context, params *workspacesinstances.CreateVolumeInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.CreateVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVolume")
	}

	var r0 *workspacesinstances.CreateVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.CreateVolumeInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.CreateVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.CreateVolumeInput, ...func(*workspacesinstances.Options)) *workspacesinstances.CreateVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.CreateVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.CreateVolumeInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkspaceInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkspaceInstance(ctx context.Context, params *workspacesinstances.CreateWorkspaceInstanceInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.CreateWorkspaceInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkspaceInstance")
	}

	var r0 *workspacesinstances.CreateWorkspaceInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.CreateWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.CreateWorkspaceInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.CreateWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) *workspacesinstances.CreateWorkspaceInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.CreateWorkspaceInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.CreateWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVolume(ctx context.Context, params *workspacesinstances.DeleteVolumeInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.DeleteVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVolume")
	}

	var r0 *workspacesinstances.DeleteVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.DeleteVolumeInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.DeleteVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.DeleteVolumeInput, ...func(*workspacesinstances.Options)) *workspacesinstances.DeleteVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.DeleteVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.DeleteVolumeInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkspaceInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkspaceInstance(ctx context.Context, params *workspacesinstances.DeleteWorkspaceInstanceInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.DeleteWorkspaceInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkspaceInstance")
	}

	var r0 *workspacesinstances.DeleteWorkspaceInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.DeleteWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.DeleteWorkspaceInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.DeleteWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) *workspacesinstances.DeleteWorkspaceInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.DeleteWorkspaceInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.DeleteWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateVolume(ctx context.Context, params *workspacesinstances.DisassociateVolumeInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.DisassociateVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateVolume")
	}

	var r0 *workspacesinstances.DisassociateVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.DisassociateVolumeInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.DisassociateVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.DisassociateVolumeInput, ...func(*workspacesinstances.Options)) *workspacesinstances.DisassociateVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.DisassociateVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.DisassociateVolumeInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkspaceInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkspaceInstance(ctx context.Context, params *workspacesinstances.GetWorkspaceInstanceInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.GetWorkspaceInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkspaceInstance")
	}

	var r0 *workspacesinstances.GetWorkspaceInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.GetWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.GetWorkspaceInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.GetWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) *workspacesinstances.GetWorkspaceInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.GetWorkspaceInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.GetWorkspaceInstanceInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstanceTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInstanceTypes(ctx context.Context, params *workspacesinstances.ListInstanceTypesInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.ListInstanceTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstanceTypes")
	}

	var r0 *workspacesinstances.ListInstanceTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.ListInstanceTypesInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.ListInstanceTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.ListInstanceTypesInput, ...func(*workspacesinstances.Options)) *workspacesinstances.ListInstanceTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.ListInstanceTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.ListInstanceTypesInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRegions(ctx context.Context, params *workspacesinstances.ListRegionsInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.ListRegionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRegions")
	}

	var r0 *workspacesinstances.ListRegionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.ListRegionsInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.ListRegionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.ListRegionsInput, ...func(*workspacesinstances.Options)) *workspacesinstances.ListRegionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.ListRegionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.ListRegionsInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *workspacesinstances.ListTagsForResourceInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *workspacesinstances.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.ListTagsForResourceInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.ListTagsForResourceInput, ...func(*workspacesinstances.Options)) *workspacesinstances.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.ListTagsForResourceInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkspaceInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkspaceInstances(ctx context.Context, params *workspacesinstances.ListWorkspaceInstancesInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.ListWorkspaceInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkspaceInstances")
	}

	var r0 *workspacesinstances.ListWorkspaceInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.ListWorkspaceInstancesInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.ListWorkspaceInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.ListWorkspaceInstancesInput, ...func(*workspacesinstances.Options)) *workspacesinstances.ListWorkspaceInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.ListWorkspaceInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.ListWorkspaceInstancesInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() workspacesinstances.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 workspacesinstances.Options
	if rf, ok := ret.Get(0).(func() workspacesinstances.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(workspacesinstances.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *workspacesinstances.TagResourceInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *workspacesinstances.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.TagResourceInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.TagResourceInput, ...func(*workspacesinstances.Options)) *workspacesinstances.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.TagResourceInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *workspacesinstances.UntagResourceInput, optFns ...func(*workspacesinstances.Options)) (*workspacesinstances.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *workspacesinstances.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.UntagResourceInput, ...func(*workspacesinstances.Options)) (*workspacesinstances.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workspacesinstances.UntagResourceInput, ...func(*workspacesinstances.Options)) *workspacesinstances.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workspacesinstances.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workspacesinstances.UntagResourceInput, ...func(*workspacesinstances.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
