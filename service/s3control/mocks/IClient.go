// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	s3control "github.com/aws/aws-sdk-go-v2/service/s3control"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateAccessGrantsIdentityCenter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateAccessGrantsIdentityCenter(ctx context.Context, params *s3control.AssociateAccessGrantsIdentityCenterInput, optFns ...func(*s3control.Options)) (*s3control.AssociateAccessGrantsIdentityCenterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateAccessGrantsIdentityCenter")
	}

	var r0 *s3control.AssociateAccessGrantsIdentityCenterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.AssociateAccessGrantsIdentityCenterInput, ...func(*s3control.Options)) (*s3control.AssociateAccessGrantsIdentityCenterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.AssociateAccessGrantsIdentityCenterInput, ...func(*s3control.Options)) *s3control.AssociateAccessGrantsIdentityCenterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.AssociateAccessGrantsIdentityCenterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.AssociateAccessGrantsIdentityCenterInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccessGrant(ctx context.Context, params *s3control.CreateAccessGrantInput, optFns ...func(*s3control.Options)) (*s3control.CreateAccessGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessGrant")
	}

	var r0 *s3control.CreateAccessGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessGrantInput, ...func(*s3control.Options)) (*s3control.CreateAccessGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessGrantInput, ...func(*s3control.Options)) *s3control.CreateAccessGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateAccessGrantInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessGrantsInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccessGrantsInstance(ctx context.Context, params *s3control.CreateAccessGrantsInstanceInput, optFns ...func(*s3control.Options)) (*s3control.CreateAccessGrantsInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessGrantsInstance")
	}

	var r0 *s3control.CreateAccessGrantsInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessGrantsInstanceInput, ...func(*s3control.Options)) (*s3control.CreateAccessGrantsInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessGrantsInstanceInput, ...func(*s3control.Options)) *s3control.CreateAccessGrantsInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessGrantsInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateAccessGrantsInstanceInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessGrantsLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccessGrantsLocation(ctx context.Context, params *s3control.CreateAccessGrantsLocationInput, optFns ...func(*s3control.Options)) (*s3control.CreateAccessGrantsLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessGrantsLocation")
	}

	var r0 *s3control.CreateAccessGrantsLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessGrantsLocationInput, ...func(*s3control.Options)) (*s3control.CreateAccessGrantsLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessGrantsLocationInput, ...func(*s3control.Options)) *s3control.CreateAccessGrantsLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessGrantsLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateAccessGrantsLocationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccessPoint(ctx context.Context, params *s3control.CreateAccessPointInput, optFns ...func(*s3control.Options)) (*s3control.CreateAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessPoint")
	}

	var r0 *s3control.CreateAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessPointInput, ...func(*s3control.Options)) (*s3control.CreateAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessPointInput, ...func(*s3control.Options)) *s3control.CreateAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateAccessPointInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAccessPointForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAccessPointForObjectLambda(ctx context.Context, params *s3control.CreateAccessPointForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.CreateAccessPointForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessPointForObjectLambda")
	}

	var r0 *s3control.CreateAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessPointForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.CreateAccessPointForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateAccessPointForObjectLambdaInput, ...func(*s3control.Options)) *s3control.CreateAccessPointForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateAccessPointForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBucket(ctx context.Context, params *s3control.CreateBucketInput, optFns ...func(*s3control.Options)) (*s3control.CreateBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBucket")
	}

	var r0 *s3control.CreateBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateBucketInput, ...func(*s3control.Options)) (*s3control.CreateBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateBucketInput, ...func(*s3control.Options)) *s3control.CreateBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateBucketInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJob(ctx context.Context, params *s3control.CreateJobInput, optFns ...func(*s3control.Options)) (*s3control.CreateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *s3control.CreateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateJobInput, ...func(*s3control.Options)) (*s3control.CreateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateJobInput, ...func(*s3control.Options)) *s3control.CreateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateJobInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMultiRegionAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMultiRegionAccessPoint(ctx context.Context, params *s3control.CreateMultiRegionAccessPointInput, optFns ...func(*s3control.Options)) (*s3control.CreateMultiRegionAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMultiRegionAccessPoint")
	}

	var r0 *s3control.CreateMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateMultiRegionAccessPointInput, ...func(*s3control.Options)) (*s3control.CreateMultiRegionAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateMultiRegionAccessPointInput, ...func(*s3control.Options)) *s3control.CreateMultiRegionAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateMultiRegionAccessPointInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStorageLensGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStorageLensGroup(ctx context.Context, params *s3control.CreateStorageLensGroupInput, optFns ...func(*s3control.Options)) (*s3control.CreateStorageLensGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStorageLensGroup")
	}

	var r0 *s3control.CreateStorageLensGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateStorageLensGroupInput, ...func(*s3control.Options)) (*s3control.CreateStorageLensGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.CreateStorageLensGroupInput, ...func(*s3control.Options)) *s3control.CreateStorageLensGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.CreateStorageLensGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.CreateStorageLensGroupInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessGrant(ctx context.Context, params *s3control.DeleteAccessGrantInput, optFns ...func(*s3control.Options)) (*s3control.DeleteAccessGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessGrant")
	}

	var r0 *s3control.DeleteAccessGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessGrantInput, ...func(*s3control.Options)) (*s3control.DeleteAccessGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessGrantInput, ...func(*s3control.Options)) *s3control.DeleteAccessGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessGrantInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessGrantsInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessGrantsInstance(ctx context.Context, params *s3control.DeleteAccessGrantsInstanceInput, optFns ...func(*s3control.Options)) (*s3control.DeleteAccessGrantsInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessGrantsInstance")
	}

	var r0 *s3control.DeleteAccessGrantsInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessGrantsInstanceInput, ...func(*s3control.Options)) (*s3control.DeleteAccessGrantsInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessGrantsInstanceInput, ...func(*s3control.Options)) *s3control.DeleteAccessGrantsInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessGrantsInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessGrantsInstanceInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessGrantsInstanceResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessGrantsInstanceResourcePolicy(ctx context.Context, params *s3control.DeleteAccessGrantsInstanceResourcePolicyInput, optFns ...func(*s3control.Options)) (*s3control.DeleteAccessGrantsInstanceResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessGrantsInstanceResourcePolicy")
	}

	var r0 *s3control.DeleteAccessGrantsInstanceResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) (*s3control.DeleteAccessGrantsInstanceResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) *s3control.DeleteAccessGrantsInstanceResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessGrantsInstanceResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessGrantsLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessGrantsLocation(ctx context.Context, params *s3control.DeleteAccessGrantsLocationInput, optFns ...func(*s3control.Options)) (*s3control.DeleteAccessGrantsLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessGrantsLocation")
	}

	var r0 *s3control.DeleteAccessGrantsLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessGrantsLocationInput, ...func(*s3control.Options)) (*s3control.DeleteAccessGrantsLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessGrantsLocationInput, ...func(*s3control.Options)) *s3control.DeleteAccessGrantsLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessGrantsLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessGrantsLocationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessPoint(ctx context.Context, params *s3control.DeleteAccessPointInput, optFns ...func(*s3control.Options)) (*s3control.DeleteAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessPoint")
	}

	var r0 *s3control.DeleteAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointInput, ...func(*s3control.Options)) (*s3control.DeleteAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointInput, ...func(*s3control.Options)) *s3control.DeleteAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessPointInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessPointForObjectLambda(ctx context.Context, params *s3control.DeleteAccessPointForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.DeleteAccessPointForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessPointForObjectLambda")
	}

	var r0 *s3control.DeleteAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.DeleteAccessPointForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointForObjectLambdaInput, ...func(*s3control.Options)) *s3control.DeleteAccessPointForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessPointForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessPointPolicy(ctx context.Context, params *s3control.DeleteAccessPointPolicyInput, optFns ...func(*s3control.Options)) (*s3control.DeleteAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessPointPolicy")
	}

	var r0 *s3control.DeleteAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointPolicyInput, ...func(*s3control.Options)) (*s3control.DeleteAccessPointPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointPolicyInput, ...func(*s3control.Options)) *s3control.DeleteAccessPointPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessPointPolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessPointPolicyForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessPointPolicyForObjectLambda(ctx context.Context, params *s3control.DeleteAccessPointPolicyForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessPointPolicyForObjectLambda")
	}

	var r0 *s3control.DeleteAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.DeleteAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) *s3control.DeleteAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBucket(ctx context.Context, params *s3control.DeleteBucketInput, optFns ...func(*s3control.Options)) (*s3control.DeleteBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucket")
	}

	var r0 *s3control.DeleteBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketInput, ...func(*s3control.Options)) (*s3control.DeleteBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketInput, ...func(*s3control.Options)) *s3control.DeleteBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketLifecycleConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBucketLifecycleConfiguration(ctx context.Context, params *s3control.DeleteBucketLifecycleConfigurationInput, optFns ...func(*s3control.Options)) (*s3control.DeleteBucketLifecycleConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucketLifecycleConfiguration")
	}

	var r0 *s3control.DeleteBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketLifecycleConfigurationInput, ...func(*s3control.Options)) (*s3control.DeleteBucketLifecycleConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketLifecycleConfigurationInput, ...func(*s3control.Options)) *s3control.DeleteBucketLifecycleConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketLifecycleConfigurationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBucketPolicy(ctx context.Context, params *s3control.DeleteBucketPolicyInput, optFns ...func(*s3control.Options)) (*s3control.DeleteBucketPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucketPolicy")
	}

	var r0 *s3control.DeleteBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketPolicyInput, ...func(*s3control.Options)) (*s3control.DeleteBucketPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketPolicyInput, ...func(*s3control.Options)) *s3control.DeleteBucketPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketPolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBucketReplication(ctx context.Context, params *s3control.DeleteBucketReplicationInput, optFns ...func(*s3control.Options)) (*s3control.DeleteBucketReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucketReplication")
	}

	var r0 *s3control.DeleteBucketReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketReplicationInput, ...func(*s3control.Options)) (*s3control.DeleteBucketReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketReplicationInput, ...func(*s3control.Options)) *s3control.DeleteBucketReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketReplicationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBucketTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBucketTagging(ctx context.Context, params *s3control.DeleteBucketTaggingInput, optFns ...func(*s3control.Options)) (*s3control.DeleteBucketTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucketTagging")
	}

	var r0 *s3control.DeleteBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketTaggingInput, ...func(*s3control.Options)) (*s3control.DeleteBucketTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteBucketTaggingInput, ...func(*s3control.Options)) *s3control.DeleteBucketTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteBucketTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJobTagging(ctx context.Context, params *s3control.DeleteJobTaggingInput, optFns ...func(*s3control.Options)) (*s3control.DeleteJobTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobTagging")
	}

	var r0 *s3control.DeleteJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteJobTaggingInput, ...func(*s3control.Options)) (*s3control.DeleteJobTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteJobTaggingInput, ...func(*s3control.Options)) *s3control.DeleteJobTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteJobTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMultiRegionAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMultiRegionAccessPoint(ctx context.Context, params *s3control.DeleteMultiRegionAccessPointInput, optFns ...func(*s3control.Options)) (*s3control.DeleteMultiRegionAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMultiRegionAccessPoint")
	}

	var r0 *s3control.DeleteMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteMultiRegionAccessPointInput, ...func(*s3control.Options)) (*s3control.DeleteMultiRegionAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteMultiRegionAccessPointInput, ...func(*s3control.Options)) *s3control.DeleteMultiRegionAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteMultiRegionAccessPointInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePublicAccessBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePublicAccessBlock(ctx context.Context, params *s3control.DeletePublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.DeletePublicAccessBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublicAccessBlock")
	}

	var r0 *s3control.DeletePublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeletePublicAccessBlockInput, ...func(*s3control.Options)) (*s3control.DeletePublicAccessBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeletePublicAccessBlockInput, ...func(*s3control.Options)) *s3control.DeletePublicAccessBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeletePublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeletePublicAccessBlockInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageLensConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStorageLensConfiguration(ctx context.Context, params *s3control.DeleteStorageLensConfigurationInput, optFns ...func(*s3control.Options)) (*s3control.DeleteStorageLensConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStorageLensConfiguration")
	}

	var r0 *s3control.DeleteStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensConfigurationInput, ...func(*s3control.Options)) (*s3control.DeleteStorageLensConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensConfigurationInput, ...func(*s3control.Options)) *s3control.DeleteStorageLensConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteStorageLensConfigurationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageLensConfigurationTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStorageLensConfigurationTagging(ctx context.Context, params *s3control.DeleteStorageLensConfigurationTaggingInput, optFns ...func(*s3control.Options)) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStorageLensConfigurationTagging")
	}

	var r0 *s3control.DeleteStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) (*s3control.DeleteStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) *s3control.DeleteStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStorageLensGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStorageLensGroup(ctx context.Context, params *s3control.DeleteStorageLensGroupInput, optFns ...func(*s3control.Options)) (*s3control.DeleteStorageLensGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStorageLensGroup")
	}

	var r0 *s3control.DeleteStorageLensGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensGroupInput, ...func(*s3control.Options)) (*s3control.DeleteStorageLensGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DeleteStorageLensGroupInput, ...func(*s3control.Options)) *s3control.DeleteStorageLensGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DeleteStorageLensGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DeleteStorageLensGroupInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeJob(ctx context.Context, params *s3control.DescribeJobInput, optFns ...func(*s3control.Options)) (*s3control.DescribeJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeJob")
	}

	var r0 *s3control.DescribeJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DescribeJobInput, ...func(*s3control.Options)) (*s3control.DescribeJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DescribeJobInput, ...func(*s3control.Options)) *s3control.DescribeJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DescribeJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DescribeJobInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMultiRegionAccessPointOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMultiRegionAccessPointOperation(ctx context.Context, params *s3control.DescribeMultiRegionAccessPointOperationInput, optFns ...func(*s3control.Options)) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMultiRegionAccessPointOperation")
	}

	var r0 *s3control.DescribeMultiRegionAccessPointOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DescribeMultiRegionAccessPointOperationInput, ...func(*s3control.Options)) (*s3control.DescribeMultiRegionAccessPointOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DescribeMultiRegionAccessPointOperationInput, ...func(*s3control.Options)) *s3control.DescribeMultiRegionAccessPointOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DescribeMultiRegionAccessPointOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DescribeMultiRegionAccessPointOperationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DissociateAccessGrantsIdentityCenter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DissociateAccessGrantsIdentityCenter(ctx context.Context, params *s3control.DissociateAccessGrantsIdentityCenterInput, optFns ...func(*s3control.Options)) (*s3control.DissociateAccessGrantsIdentityCenterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DissociateAccessGrantsIdentityCenter")
	}

	var r0 *s3control.DissociateAccessGrantsIdentityCenterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DissociateAccessGrantsIdentityCenterInput, ...func(*s3control.Options)) (*s3control.DissociateAccessGrantsIdentityCenterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.DissociateAccessGrantsIdentityCenterInput, ...func(*s3control.Options)) *s3control.DissociateAccessGrantsIdentityCenterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.DissociateAccessGrantsIdentityCenterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.DissociateAccessGrantsIdentityCenterInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessGrant provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessGrant(ctx context.Context, params *s3control.GetAccessGrantInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessGrantOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessGrant")
	}

	var r0 *s3control.GetAccessGrantOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantInput, ...func(*s3control.Options)) (*s3control.GetAccessGrantOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantInput, ...func(*s3control.Options)) *s3control.GetAccessGrantOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessGrantOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessGrantInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessGrantsInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessGrantsInstance(ctx context.Context, params *s3control.GetAccessGrantsInstanceInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessGrantsInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessGrantsInstance")
	}

	var r0 *s3control.GetAccessGrantsInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantsInstanceInput, ...func(*s3control.Options)) (*s3control.GetAccessGrantsInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantsInstanceInput, ...func(*s3control.Options)) *s3control.GetAccessGrantsInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessGrantsInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessGrantsInstanceInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessGrantsInstanceForPrefix provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessGrantsInstanceForPrefix(ctx context.Context, params *s3control.GetAccessGrantsInstanceForPrefixInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessGrantsInstanceForPrefixOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessGrantsInstanceForPrefix")
	}

	var r0 *s3control.GetAccessGrantsInstanceForPrefixOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantsInstanceForPrefixInput, ...func(*s3control.Options)) (*s3control.GetAccessGrantsInstanceForPrefixOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantsInstanceForPrefixInput, ...func(*s3control.Options)) *s3control.GetAccessGrantsInstanceForPrefixOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessGrantsInstanceForPrefixOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessGrantsInstanceForPrefixInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessGrantsInstanceResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessGrantsInstanceResourcePolicy(ctx context.Context, params *s3control.GetAccessGrantsInstanceResourcePolicyInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessGrantsInstanceResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessGrantsInstanceResourcePolicy")
	}

	var r0 *s3control.GetAccessGrantsInstanceResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) (*s3control.GetAccessGrantsInstanceResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) *s3control.GetAccessGrantsInstanceResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessGrantsInstanceResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessGrantsLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessGrantsLocation(ctx context.Context, params *s3control.GetAccessGrantsLocationInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessGrantsLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessGrantsLocation")
	}

	var r0 *s3control.GetAccessGrantsLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantsLocationInput, ...func(*s3control.Options)) (*s3control.GetAccessGrantsLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessGrantsLocationInput, ...func(*s3control.Options)) *s3control.GetAccessGrantsLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessGrantsLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessGrantsLocationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessPoint(ctx context.Context, params *s3control.GetAccessPointInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessPoint")
	}

	var r0 *s3control.GetAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointInput, ...func(*s3control.Options)) (*s3control.GetAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointInput, ...func(*s3control.Options)) *s3control.GetAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointConfigurationForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessPointConfigurationForObjectLambda(ctx context.Context, params *s3control.GetAccessPointConfigurationForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessPointConfigurationForObjectLambda")
	}

	var r0 *s3control.GetAccessPointConfigurationForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointConfigurationForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.GetAccessPointConfigurationForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointConfigurationForObjectLambdaInput, ...func(*s3control.Options)) *s3control.GetAccessPointConfigurationForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointConfigurationForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointConfigurationForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessPointForObjectLambda(ctx context.Context, params *s3control.GetAccessPointForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessPointForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessPointForObjectLambda")
	}

	var r0 *s3control.GetAccessPointForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.GetAccessPointForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointForObjectLambdaInput, ...func(*s3control.Options)) *s3control.GetAccessPointForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessPointPolicy(ctx context.Context, params *s3control.GetAccessPointPolicyInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessPointPolicy")
	}

	var r0 *s3control.GetAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyInput, ...func(*s3control.Options)) (*s3control.GetAccessPointPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyInput, ...func(*s3control.Options)) *s3control.GetAccessPointPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointPolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessPointPolicyForObjectLambda(ctx context.Context, params *s3control.GetAccessPointPolicyForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessPointPolicyForObjectLambda")
	}

	var r0 *s3control.GetAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.GetAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) *s3control.GetAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessPointPolicyStatus(ctx context.Context, params *s3control.GetAccessPointPolicyStatusInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessPointPolicyStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessPointPolicyStatus")
	}

	var r0 *s3control.GetAccessPointPolicyStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyStatusInput, ...func(*s3control.Options)) (*s3control.GetAccessPointPolicyStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyStatusInput, ...func(*s3control.Options)) *s3control.GetAccessPointPolicyStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointPolicyStatusInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessPointPolicyStatusForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessPointPolicyStatusForObjectLambda(ctx context.Context, params *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessPointPolicyStatusForObjectLambda")
	}

	var r0 *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, ...func(*s3control.Options)) *s3control.GetAccessPointPolicyStatusForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetAccessPointPolicyStatusForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetAccessPointPolicyStatusForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucket provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucket(ctx context.Context, params *s3control.GetBucketInput, optFns ...func(*s3control.Options)) (*s3control.GetBucketOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucket")
	}

	var r0 *s3control.GetBucketOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketInput, ...func(*s3control.Options)) (*s3control.GetBucketOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketInput, ...func(*s3control.Options)) *s3control.GetBucketOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketLifecycleConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketLifecycleConfiguration(ctx context.Context, params *s3control.GetBucketLifecycleConfigurationInput, optFns ...func(*s3control.Options)) (*s3control.GetBucketLifecycleConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketLifecycleConfiguration")
	}

	var r0 *s3control.GetBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketLifecycleConfigurationInput, ...func(*s3control.Options)) (*s3control.GetBucketLifecycleConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketLifecycleConfigurationInput, ...func(*s3control.Options)) *s3control.GetBucketLifecycleConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketLifecycleConfigurationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketPolicy(ctx context.Context, params *s3control.GetBucketPolicyInput, optFns ...func(*s3control.Options)) (*s3control.GetBucketPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketPolicy")
	}

	var r0 *s3control.GetBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketPolicyInput, ...func(*s3control.Options)) (*s3control.GetBucketPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketPolicyInput, ...func(*s3control.Options)) *s3control.GetBucketPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketPolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketReplication(ctx context.Context, params *s3control.GetBucketReplicationInput, optFns ...func(*s3control.Options)) (*s3control.GetBucketReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketReplication")
	}

	var r0 *s3control.GetBucketReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketReplicationInput, ...func(*s3control.Options)) (*s3control.GetBucketReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketReplicationInput, ...func(*s3control.Options)) *s3control.GetBucketReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketReplicationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketTagging(ctx context.Context, params *s3control.GetBucketTaggingInput, optFns ...func(*s3control.Options)) (*s3control.GetBucketTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketTagging")
	}

	var r0 *s3control.GetBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketTaggingInput, ...func(*s3control.Options)) (*s3control.GetBucketTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketTaggingInput, ...func(*s3control.Options)) *s3control.GetBucketTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBucketVersioning provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBucketVersioning(ctx context.Context, params *s3control.GetBucketVersioningInput, optFns ...func(*s3control.Options)) (*s3control.GetBucketVersioningOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketVersioning")
	}

	var r0 *s3control.GetBucketVersioningOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketVersioningInput, ...func(*s3control.Options)) (*s3control.GetBucketVersioningOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetBucketVersioningInput, ...func(*s3control.Options)) *s3control.GetBucketVersioningOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetBucketVersioningOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetBucketVersioningInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataAccess(ctx context.Context, params *s3control.GetDataAccessInput, optFns ...func(*s3control.Options)) (*s3control.GetDataAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataAccess")
	}

	var r0 *s3control.GetDataAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetDataAccessInput, ...func(*s3control.Options)) (*s3control.GetDataAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetDataAccessInput, ...func(*s3control.Options)) *s3control.GetDataAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetDataAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetDataAccessInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJobTagging(ctx context.Context, params *s3control.GetJobTaggingInput, optFns ...func(*s3control.Options)) (*s3control.GetJobTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJobTagging")
	}

	var r0 *s3control.GetJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetJobTaggingInput, ...func(*s3control.Options)) (*s3control.GetJobTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetJobTaggingInput, ...func(*s3control.Options)) *s3control.GetJobTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetJobTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMultiRegionAccessPoint(ctx context.Context, params *s3control.GetMultiRegionAccessPointInput, optFns ...func(*s3control.Options)) (*s3control.GetMultiRegionAccessPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiRegionAccessPoint")
	}

	var r0 *s3control.GetMultiRegionAccessPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointInput, ...func(*s3control.Options)) (*s3control.GetMultiRegionAccessPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointInput, ...func(*s3control.Options)) *s3control.GetMultiRegionAccessPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetMultiRegionAccessPointInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPointPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMultiRegionAccessPointPolicy(ctx context.Context, params *s3control.GetMultiRegionAccessPointPolicyInput, optFns ...func(*s3control.Options)) (*s3control.GetMultiRegionAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiRegionAccessPointPolicy")
	}

	var r0 *s3control.GetMultiRegionAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyInput, ...func(*s3control.Options)) (*s3control.GetMultiRegionAccessPointPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyInput, ...func(*s3control.Options)) *s3control.GetMultiRegionAccessPointPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPointPolicyStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMultiRegionAccessPointPolicyStatus(ctx context.Context, params *s3control.GetMultiRegionAccessPointPolicyStatusInput, optFns ...func(*s3control.Options)) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiRegionAccessPointPolicyStatus")
	}

	var r0 *s3control.GetMultiRegionAccessPointPolicyStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyStatusInput, ...func(*s3control.Options)) (*s3control.GetMultiRegionAccessPointPolicyStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyStatusInput, ...func(*s3control.Options)) *s3control.GetMultiRegionAccessPointPolicyStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointPolicyStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetMultiRegionAccessPointPolicyStatusInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultiRegionAccessPointRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMultiRegionAccessPointRoutes(ctx context.Context, params *s3control.GetMultiRegionAccessPointRoutesInput, optFns ...func(*s3control.Options)) (*s3control.GetMultiRegionAccessPointRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMultiRegionAccessPointRoutes")
	}

	var r0 *s3control.GetMultiRegionAccessPointRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointRoutesInput, ...func(*s3control.Options)) (*s3control.GetMultiRegionAccessPointRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetMultiRegionAccessPointRoutesInput, ...func(*s3control.Options)) *s3control.GetMultiRegionAccessPointRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetMultiRegionAccessPointRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetMultiRegionAccessPointRoutesInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPublicAccessBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPublicAccessBlock(ctx context.Context, params *s3control.GetPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.GetPublicAccessBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPublicAccessBlock")
	}

	var r0 *s3control.GetPublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...func(*s3control.Options)) (*s3control.GetPublicAccessBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...func(*s3control.Options)) *s3control.GetPublicAccessBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetPublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetPublicAccessBlockInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLensConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStorageLensConfiguration(ctx context.Context, params *s3control.GetStorageLensConfigurationInput, optFns ...func(*s3control.Options)) (*s3control.GetStorageLensConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageLensConfiguration")
	}

	var r0 *s3control.GetStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensConfigurationInput, ...func(*s3control.Options)) (*s3control.GetStorageLensConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensConfigurationInput, ...func(*s3control.Options)) *s3control.GetStorageLensConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetStorageLensConfigurationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLensConfigurationTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStorageLensConfigurationTagging(ctx context.Context, params *s3control.GetStorageLensConfigurationTaggingInput, optFns ...func(*s3control.Options)) (*s3control.GetStorageLensConfigurationTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageLensConfigurationTagging")
	}

	var r0 *s3control.GetStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) (*s3control.GetStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) *s3control.GetStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStorageLensGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetStorageLensGroup(ctx context.Context, params *s3control.GetStorageLensGroupInput, optFns ...func(*s3control.Options)) (*s3control.GetStorageLensGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetStorageLensGroup")
	}

	var r0 *s3control.GetStorageLensGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensGroupInput, ...func(*s3control.Options)) (*s3control.GetStorageLensGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.GetStorageLensGroupInput, ...func(*s3control.Options)) *s3control.GetStorageLensGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.GetStorageLensGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.GetStorageLensGroupInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessGrants provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccessGrants(ctx context.Context, params *s3control.ListAccessGrantsInput, optFns ...func(*s3control.Options)) (*s3control.ListAccessGrantsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessGrants")
	}

	var r0 *s3control.ListAccessGrantsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessGrantsInput, ...func(*s3control.Options)) (*s3control.ListAccessGrantsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessGrantsInput, ...func(*s3control.Options)) *s3control.ListAccessGrantsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessGrantsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListAccessGrantsInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessGrantsInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccessGrantsInstances(ctx context.Context, params *s3control.ListAccessGrantsInstancesInput, optFns ...func(*s3control.Options)) (*s3control.ListAccessGrantsInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessGrantsInstances")
	}

	var r0 *s3control.ListAccessGrantsInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessGrantsInstancesInput, ...func(*s3control.Options)) (*s3control.ListAccessGrantsInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessGrantsInstancesInput, ...func(*s3control.Options)) *s3control.ListAccessGrantsInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessGrantsInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListAccessGrantsInstancesInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessGrantsLocations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccessGrantsLocations(ctx context.Context, params *s3control.ListAccessGrantsLocationsInput, optFns ...func(*s3control.Options)) (*s3control.ListAccessGrantsLocationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessGrantsLocations")
	}

	var r0 *s3control.ListAccessGrantsLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessGrantsLocationsInput, ...func(*s3control.Options)) (*s3control.ListAccessGrantsLocationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessGrantsLocationsInput, ...func(*s3control.Options)) *s3control.ListAccessGrantsLocationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessGrantsLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListAccessGrantsLocationsInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccessPoints(ctx context.Context, params *s3control.ListAccessPointsInput, optFns ...func(*s3control.Options)) (*s3control.ListAccessPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessPoints")
	}

	var r0 *s3control.ListAccessPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsInput, ...func(*s3control.Options)) (*s3control.ListAccessPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsInput, ...func(*s3control.Options)) *s3control.ListAccessPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListAccessPointsInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessPointsForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccessPointsForObjectLambda(ctx context.Context, params *s3control.ListAccessPointsForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.ListAccessPointsForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessPointsForObjectLambda")
	}

	var r0 *s3control.ListAccessPointsForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.ListAccessPointsForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListAccessPointsForObjectLambdaInput, ...func(*s3control.Options)) *s3control.ListAccessPointsForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListAccessPointsForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListAccessPointsForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobs(ctx context.Context, params *s3control.ListJobsInput, optFns ...func(*s3control.Options)) (*s3control.ListJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *s3control.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListJobsInput, ...func(*s3control.Options)) (*s3control.ListJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListJobsInput, ...func(*s3control.Options)) *s3control.ListJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListJobsInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMultiRegionAccessPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMultiRegionAccessPoints(ctx context.Context, params *s3control.ListMultiRegionAccessPointsInput, optFns ...func(*s3control.Options)) (*s3control.ListMultiRegionAccessPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMultiRegionAccessPoints")
	}

	var r0 *s3control.ListMultiRegionAccessPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListMultiRegionAccessPointsInput, ...func(*s3control.Options)) (*s3control.ListMultiRegionAccessPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListMultiRegionAccessPointsInput, ...func(*s3control.Options)) *s3control.ListMultiRegionAccessPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListMultiRegionAccessPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListMultiRegionAccessPointsInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRegionalBuckets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRegionalBuckets(ctx context.Context, params *s3control.ListRegionalBucketsInput, optFns ...func(*s3control.Options)) (*s3control.ListRegionalBucketsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRegionalBuckets")
	}

	var r0 *s3control.ListRegionalBucketsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListRegionalBucketsInput, ...func(*s3control.Options)) (*s3control.ListRegionalBucketsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListRegionalBucketsInput, ...func(*s3control.Options)) *s3control.ListRegionalBucketsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListRegionalBucketsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListRegionalBucketsInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorageLensConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStorageLensConfigurations(ctx context.Context, params *s3control.ListStorageLensConfigurationsInput, optFns ...func(*s3control.Options)) (*s3control.ListStorageLensConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageLensConfigurations")
	}

	var r0 *s3control.ListStorageLensConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListStorageLensConfigurationsInput, ...func(*s3control.Options)) (*s3control.ListStorageLensConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListStorageLensConfigurationsInput, ...func(*s3control.Options)) *s3control.ListStorageLensConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListStorageLensConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListStorageLensConfigurationsInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStorageLensGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStorageLensGroups(ctx context.Context, params *s3control.ListStorageLensGroupsInput, optFns ...func(*s3control.Options)) (*s3control.ListStorageLensGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStorageLensGroups")
	}

	var r0 *s3control.ListStorageLensGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListStorageLensGroupsInput, ...func(*s3control.Options)) (*s3control.ListStorageLensGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListStorageLensGroupsInput, ...func(*s3control.Options)) *s3control.ListStorageLensGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListStorageLensGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListStorageLensGroupsInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *s3control.ListTagsForResourceInput, optFns ...func(*s3control.Options)) (*s3control.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *s3control.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListTagsForResourceInput, ...func(*s3control.Options)) (*s3control.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.ListTagsForResourceInput, ...func(*s3control.Options)) *s3control.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.ListTagsForResourceInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() s3control.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 s3control.Options
	if rf, ok := ret.Get(0).(func() s3control.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(s3control.Options)
	}

	return r0
}

// PutAccessGrantsInstanceResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccessGrantsInstanceResourcePolicy(ctx context.Context, params *s3control.PutAccessGrantsInstanceResourcePolicyInput, optFns ...func(*s3control.Options)) (*s3control.PutAccessGrantsInstanceResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccessGrantsInstanceResourcePolicy")
	}

	var r0 *s3control.PutAccessGrantsInstanceResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) (*s3control.PutAccessGrantsInstanceResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) *s3control.PutAccessGrantsInstanceResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessGrantsInstanceResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutAccessGrantsInstanceResourcePolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointConfigurationForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccessPointConfigurationForObjectLambda(ctx context.Context, params *s3control.PutAccessPointConfigurationForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccessPointConfigurationForObjectLambda")
	}

	var r0 *s3control.PutAccessPointConfigurationForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointConfigurationForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.PutAccessPointConfigurationForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointConfigurationForObjectLambdaInput, ...func(*s3control.Options)) *s3control.PutAccessPointConfigurationForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointConfigurationForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutAccessPointConfigurationForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccessPointPolicy(ctx context.Context, params *s3control.PutAccessPointPolicyInput, optFns ...func(*s3control.Options)) (*s3control.PutAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccessPointPolicy")
	}

	var r0 *s3control.PutAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointPolicyInput, ...func(*s3control.Options)) (*s3control.PutAccessPointPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointPolicyInput, ...func(*s3control.Options)) *s3control.PutAccessPointPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutAccessPointPolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutAccessPointPolicyForObjectLambda provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccessPointPolicyForObjectLambda(ctx context.Context, params *s3control.PutAccessPointPolicyForObjectLambdaInput, optFns ...func(*s3control.Options)) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccessPointPolicyForObjectLambda")
	}

	var r0 *s3control.PutAccessPointPolicyForObjectLambdaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) (*s3control.PutAccessPointPolicyForObjectLambdaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) *s3control.PutAccessPointPolicyForObjectLambdaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutAccessPointPolicyForObjectLambdaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutAccessPointPolicyForObjectLambdaInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketLifecycleConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBucketLifecycleConfiguration(ctx context.Context, params *s3control.PutBucketLifecycleConfigurationInput, optFns ...func(*s3control.Options)) (*s3control.PutBucketLifecycleConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBucketLifecycleConfiguration")
	}

	var r0 *s3control.PutBucketLifecycleConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketLifecycleConfigurationInput, ...func(*s3control.Options)) (*s3control.PutBucketLifecycleConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketLifecycleConfigurationInput, ...func(*s3control.Options)) *s3control.PutBucketLifecycleConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketLifecycleConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketLifecycleConfigurationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBucketPolicy(ctx context.Context, params *s3control.PutBucketPolicyInput, optFns ...func(*s3control.Options)) (*s3control.PutBucketPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBucketPolicy")
	}

	var r0 *s3control.PutBucketPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketPolicyInput, ...func(*s3control.Options)) (*s3control.PutBucketPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketPolicyInput, ...func(*s3control.Options)) *s3control.PutBucketPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketPolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBucketReplication(ctx context.Context, params *s3control.PutBucketReplicationInput, optFns ...func(*s3control.Options)) (*s3control.PutBucketReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBucketReplication")
	}

	var r0 *s3control.PutBucketReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketReplicationInput, ...func(*s3control.Options)) (*s3control.PutBucketReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketReplicationInput, ...func(*s3control.Options)) *s3control.PutBucketReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketReplicationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBucketTagging(ctx context.Context, params *s3control.PutBucketTaggingInput, optFns ...func(*s3control.Options)) (*s3control.PutBucketTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBucketTagging")
	}

	var r0 *s3control.PutBucketTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketTaggingInput, ...func(*s3control.Options)) (*s3control.PutBucketTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketTaggingInput, ...func(*s3control.Options)) *s3control.PutBucketTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutBucketVersioning provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutBucketVersioning(ctx context.Context, params *s3control.PutBucketVersioningInput, optFns ...func(*s3control.Options)) (*s3control.PutBucketVersioningOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutBucketVersioning")
	}

	var r0 *s3control.PutBucketVersioningOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketVersioningInput, ...func(*s3control.Options)) (*s3control.PutBucketVersioningOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutBucketVersioningInput, ...func(*s3control.Options)) *s3control.PutBucketVersioningOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutBucketVersioningOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutBucketVersioningInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutJobTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutJobTagging(ctx context.Context, params *s3control.PutJobTaggingInput, optFns ...func(*s3control.Options)) (*s3control.PutJobTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutJobTagging")
	}

	var r0 *s3control.PutJobTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutJobTaggingInput, ...func(*s3control.Options)) (*s3control.PutJobTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutJobTaggingInput, ...func(*s3control.Options)) *s3control.PutJobTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutJobTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutJobTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMultiRegionAccessPointPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMultiRegionAccessPointPolicy(ctx context.Context, params *s3control.PutMultiRegionAccessPointPolicyInput, optFns ...func(*s3control.Options)) (*s3control.PutMultiRegionAccessPointPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMultiRegionAccessPointPolicy")
	}

	var r0 *s3control.PutMultiRegionAccessPointPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutMultiRegionAccessPointPolicyInput, ...func(*s3control.Options)) (*s3control.PutMultiRegionAccessPointPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutMultiRegionAccessPointPolicyInput, ...func(*s3control.Options)) *s3control.PutMultiRegionAccessPointPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutMultiRegionAccessPointPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutMultiRegionAccessPointPolicyInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutPublicAccessBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPublicAccessBlock(ctx context.Context, params *s3control.PutPublicAccessBlockInput, optFns ...func(*s3control.Options)) (*s3control.PutPublicAccessBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPublicAccessBlock")
	}

	var r0 *s3control.PutPublicAccessBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutPublicAccessBlockInput, ...func(*s3control.Options)) (*s3control.PutPublicAccessBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutPublicAccessBlockInput, ...func(*s3control.Options)) *s3control.PutPublicAccessBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutPublicAccessBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutPublicAccessBlockInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStorageLensConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutStorageLensConfiguration(ctx context.Context, params *s3control.PutStorageLensConfigurationInput, optFns ...func(*s3control.Options)) (*s3control.PutStorageLensConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutStorageLensConfiguration")
	}

	var r0 *s3control.PutStorageLensConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutStorageLensConfigurationInput, ...func(*s3control.Options)) (*s3control.PutStorageLensConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutStorageLensConfigurationInput, ...func(*s3control.Options)) *s3control.PutStorageLensConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutStorageLensConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutStorageLensConfigurationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutStorageLensConfigurationTagging provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutStorageLensConfigurationTagging(ctx context.Context, params *s3control.PutStorageLensConfigurationTaggingInput, optFns ...func(*s3control.Options)) (*s3control.PutStorageLensConfigurationTaggingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutStorageLensConfigurationTagging")
	}

	var r0 *s3control.PutStorageLensConfigurationTaggingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) (*s3control.PutStorageLensConfigurationTaggingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.PutStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) *s3control.PutStorageLensConfigurationTaggingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.PutStorageLensConfigurationTaggingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.PutStorageLensConfigurationTaggingInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitMultiRegionAccessPointRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SubmitMultiRegionAccessPointRoutes(ctx context.Context, params *s3control.SubmitMultiRegionAccessPointRoutesInput, optFns ...func(*s3control.Options)) (*s3control.SubmitMultiRegionAccessPointRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitMultiRegionAccessPointRoutes")
	}

	var r0 *s3control.SubmitMultiRegionAccessPointRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.SubmitMultiRegionAccessPointRoutesInput, ...func(*s3control.Options)) (*s3control.SubmitMultiRegionAccessPointRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.SubmitMultiRegionAccessPointRoutesInput, ...func(*s3control.Options)) *s3control.SubmitMultiRegionAccessPointRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.SubmitMultiRegionAccessPointRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.SubmitMultiRegionAccessPointRoutesInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *s3control.TagResourceInput, optFns ...func(*s3control.Options)) (*s3control.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *s3control.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.TagResourceInput, ...func(*s3control.Options)) (*s3control.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.TagResourceInput, ...func(*s3control.Options)) *s3control.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.TagResourceInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *s3control.UntagResourceInput, optFns ...func(*s3control.Options)) (*s3control.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *s3control.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UntagResourceInput, ...func(*s3control.Options)) (*s3control.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UntagResourceInput, ...func(*s3control.Options)) *s3control.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.UntagResourceInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAccessGrantsLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAccessGrantsLocation(ctx context.Context, params *s3control.UpdateAccessGrantsLocationInput, optFns ...func(*s3control.Options)) (*s3control.UpdateAccessGrantsLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccessGrantsLocation")
	}

	var r0 *s3control.UpdateAccessGrantsLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateAccessGrantsLocationInput, ...func(*s3control.Options)) (*s3control.UpdateAccessGrantsLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateAccessGrantsLocationInput, ...func(*s3control.Options)) *s3control.UpdateAccessGrantsLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UpdateAccessGrantsLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.UpdateAccessGrantsLocationInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobPriority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateJobPriority(ctx context.Context, params *s3control.UpdateJobPriorityInput, optFns ...func(*s3control.Options)) (*s3control.UpdateJobPriorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobPriority")
	}

	var r0 *s3control.UpdateJobPriorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateJobPriorityInput, ...func(*s3control.Options)) (*s3control.UpdateJobPriorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateJobPriorityInput, ...func(*s3control.Options)) *s3control.UpdateJobPriorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UpdateJobPriorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.UpdateJobPriorityInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateJobStatus(ctx context.Context, params *s3control.UpdateJobStatusInput, optFns ...func(*s3control.Options)) (*s3control.UpdateJobStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobStatus")
	}

	var r0 *s3control.UpdateJobStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateJobStatusInput, ...func(*s3control.Options)) (*s3control.UpdateJobStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateJobStatusInput, ...func(*s3control.Options)) *s3control.UpdateJobStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UpdateJobStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.UpdateJobStatusInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStorageLensGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStorageLensGroup(ctx context.Context, params *s3control.UpdateStorageLensGroupInput, optFns ...func(*s3control.Options)) (*s3control.UpdateStorageLensGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStorageLensGroup")
	}

	var r0 *s3control.UpdateStorageLensGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateStorageLensGroupInput, ...func(*s3control.Options)) (*s3control.UpdateStorageLensGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *s3control.UpdateStorageLensGroupInput, ...func(*s3control.Options)) *s3control.UpdateStorageLensGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*s3control.UpdateStorageLensGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *s3control.UpdateStorageLensGroupInput, ...func(*s3control.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
