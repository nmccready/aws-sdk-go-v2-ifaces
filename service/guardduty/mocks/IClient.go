// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	guardduty "github.com/aws/aws-sdk-go-v2/service/guardduty"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptAdministratorInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptAdministratorInvitation(ctx context.Context, params *guardduty.AcceptAdministratorInvitationInput, optFns ...func(*guardduty.Options)) (*guardduty.AcceptAdministratorInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptAdministratorInvitation")
	}

	var r0 *guardduty.AcceptAdministratorInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.AcceptAdministratorInvitationInput, ...func(*guardduty.Options)) (*guardduty.AcceptAdministratorInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.AcceptAdministratorInvitationInput, ...func(*guardduty.Options)) *guardduty.AcceptAdministratorInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.AcceptAdministratorInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.AcceptAdministratorInvitationInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AcceptInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptInvitation(ctx context.Context, params *guardduty.AcceptInvitationInput, optFns ...func(*guardduty.Options)) (*guardduty.AcceptInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptInvitation")
	}

	var r0 *guardduty.AcceptInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.AcceptInvitationInput, ...func(*guardduty.Options)) (*guardduty.AcceptInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.AcceptInvitationInput, ...func(*guardduty.Options)) *guardduty.AcceptInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.AcceptInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.AcceptInvitationInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ArchiveFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ArchiveFindings(ctx context.Context, params *guardduty.ArchiveFindingsInput, optFns ...func(*guardduty.Options)) (*guardduty.ArchiveFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ArchiveFindings")
	}

	var r0 *guardduty.ArchiveFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ArchiveFindingsInput, ...func(*guardduty.Options)) (*guardduty.ArchiveFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ArchiveFindingsInput, ...func(*guardduty.Options)) *guardduty.ArchiveFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ArchiveFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ArchiveFindingsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDetector(ctx context.Context, params *guardduty.CreateDetectorInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDetector")
	}

	var r0 *guardduty.CreateDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateDetectorInput, ...func(*guardduty.Options)) (*guardduty.CreateDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateDetectorInput, ...func(*guardduty.Options)) *guardduty.CreateDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateDetectorInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFilter(ctx context.Context, params *guardduty.CreateFilterInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFilter")
	}

	var r0 *guardduty.CreateFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateFilterInput, ...func(*guardduty.Options)) (*guardduty.CreateFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateFilterInput, ...func(*guardduty.Options)) *guardduty.CreateFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateFilterInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIPSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIPSet(ctx context.Context, params *guardduty.CreateIPSetInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateIPSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIPSet")
	}

	var r0 *guardduty.CreateIPSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateIPSetInput, ...func(*guardduty.Options)) (*guardduty.CreateIPSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateIPSetInput, ...func(*guardduty.Options)) *guardduty.CreateIPSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateIPSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateIPSetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMalwareProtectionPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMalwareProtectionPlan(ctx context.Context, params *guardduty.CreateMalwareProtectionPlanInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateMalwareProtectionPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMalwareProtectionPlan")
	}

	var r0 *guardduty.CreateMalwareProtectionPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateMalwareProtectionPlanInput, ...func(*guardduty.Options)) (*guardduty.CreateMalwareProtectionPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateMalwareProtectionPlanInput, ...func(*guardduty.Options)) *guardduty.CreateMalwareProtectionPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateMalwareProtectionPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateMalwareProtectionPlanInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMembers(ctx context.Context, params *guardduty.CreateMembersInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMembers")
	}

	var r0 *guardduty.CreateMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateMembersInput, ...func(*guardduty.Options)) (*guardduty.CreateMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateMembersInput, ...func(*guardduty.Options)) *guardduty.CreateMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateMembersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePublishingDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePublishingDestination(ctx context.Context, params *guardduty.CreatePublishingDestinationInput, optFns ...func(*guardduty.Options)) (*guardduty.CreatePublishingDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePublishingDestination")
	}

	var r0 *guardduty.CreatePublishingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreatePublishingDestinationInput, ...func(*guardduty.Options)) (*guardduty.CreatePublishingDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreatePublishingDestinationInput, ...func(*guardduty.Options)) *guardduty.CreatePublishingDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreatePublishingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreatePublishingDestinationInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSampleFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSampleFindings(ctx context.Context, params *guardduty.CreateSampleFindingsInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateSampleFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSampleFindings")
	}

	var r0 *guardduty.CreateSampleFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateSampleFindingsInput, ...func(*guardduty.Options)) (*guardduty.CreateSampleFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateSampleFindingsInput, ...func(*guardduty.Options)) *guardduty.CreateSampleFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateSampleFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateSampleFindingsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThreatEntitySet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateThreatEntitySet(ctx context.Context, params *guardduty.CreateThreatEntitySetInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateThreatEntitySetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateThreatEntitySet")
	}

	var r0 *guardduty.CreateThreatEntitySetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateThreatEntitySetInput, ...func(*guardduty.Options)) (*guardduty.CreateThreatEntitySetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateThreatEntitySetInput, ...func(*guardduty.Options)) *guardduty.CreateThreatEntitySetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateThreatEntitySetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateThreatEntitySetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateThreatIntelSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateThreatIntelSet(ctx context.Context, params *guardduty.CreateThreatIntelSetInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateThreatIntelSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateThreatIntelSet")
	}

	var r0 *guardduty.CreateThreatIntelSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateThreatIntelSetInput, ...func(*guardduty.Options)) (*guardduty.CreateThreatIntelSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateThreatIntelSetInput, ...func(*guardduty.Options)) *guardduty.CreateThreatIntelSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateThreatIntelSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateThreatIntelSetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrustedEntitySet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrustedEntitySet(ctx context.Context, params *guardduty.CreateTrustedEntitySetInput, optFns ...func(*guardduty.Options)) (*guardduty.CreateTrustedEntitySetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrustedEntitySet")
	}

	var r0 *guardduty.CreateTrustedEntitySetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateTrustedEntitySetInput, ...func(*guardduty.Options)) (*guardduty.CreateTrustedEntitySetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.CreateTrustedEntitySetInput, ...func(*guardduty.Options)) *guardduty.CreateTrustedEntitySetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.CreateTrustedEntitySetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.CreateTrustedEntitySetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeclineInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeclineInvitations(ctx context.Context, params *guardduty.DeclineInvitationsInput, optFns ...func(*guardduty.Options)) (*guardduty.DeclineInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeclineInvitations")
	}

	var r0 *guardduty.DeclineInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeclineInvitationsInput, ...func(*guardduty.Options)) (*guardduty.DeclineInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeclineInvitationsInput, ...func(*guardduty.Options)) *guardduty.DeclineInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeclineInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeclineInvitationsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDetector(ctx context.Context, params *guardduty.DeleteDetectorInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDetector")
	}

	var r0 *guardduty.DeleteDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteDetectorInput, ...func(*guardduty.Options)) (*guardduty.DeleteDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteDetectorInput, ...func(*guardduty.Options)) *guardduty.DeleteDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteDetectorInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFilter(ctx context.Context, params *guardduty.DeleteFilterInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFilter")
	}

	var r0 *guardduty.DeleteFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteFilterInput, ...func(*guardduty.Options)) (*guardduty.DeleteFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteFilterInput, ...func(*guardduty.Options)) *guardduty.DeleteFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteFilterInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIPSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIPSet(ctx context.Context, params *guardduty.DeleteIPSetInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteIPSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIPSet")
	}

	var r0 *guardduty.DeleteIPSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteIPSetInput, ...func(*guardduty.Options)) (*guardduty.DeleteIPSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteIPSetInput, ...func(*guardduty.Options)) *guardduty.DeleteIPSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteIPSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteIPSetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInvitations(ctx context.Context, params *guardduty.DeleteInvitationsInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvitations")
	}

	var r0 *guardduty.DeleteInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteInvitationsInput, ...func(*guardduty.Options)) (*guardduty.DeleteInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteInvitationsInput, ...func(*guardduty.Options)) *guardduty.DeleteInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteInvitationsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMalwareProtectionPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMalwareProtectionPlan(ctx context.Context, params *guardduty.DeleteMalwareProtectionPlanInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteMalwareProtectionPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMalwareProtectionPlan")
	}

	var r0 *guardduty.DeleteMalwareProtectionPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteMalwareProtectionPlanInput, ...func(*guardduty.Options)) (*guardduty.DeleteMalwareProtectionPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteMalwareProtectionPlanInput, ...func(*guardduty.Options)) *guardduty.DeleteMalwareProtectionPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteMalwareProtectionPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteMalwareProtectionPlanInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMembers(ctx context.Context, params *guardduty.DeleteMembersInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMembers")
	}

	var r0 *guardduty.DeleteMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteMembersInput, ...func(*guardduty.Options)) (*guardduty.DeleteMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteMembersInput, ...func(*guardduty.Options)) *guardduty.DeleteMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteMembersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePublishingDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePublishingDestination(ctx context.Context, params *guardduty.DeletePublishingDestinationInput, optFns ...func(*guardduty.Options)) (*guardduty.DeletePublishingDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePublishingDestination")
	}

	var r0 *guardduty.DeletePublishingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeletePublishingDestinationInput, ...func(*guardduty.Options)) (*guardduty.DeletePublishingDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeletePublishingDestinationInput, ...func(*guardduty.Options)) *guardduty.DeletePublishingDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeletePublishingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeletePublishingDestinationInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThreatEntitySet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteThreatEntitySet(ctx context.Context, params *guardduty.DeleteThreatEntitySetInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteThreatEntitySetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteThreatEntitySet")
	}

	var r0 *guardduty.DeleteThreatEntitySetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteThreatEntitySetInput, ...func(*guardduty.Options)) (*guardduty.DeleteThreatEntitySetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteThreatEntitySetInput, ...func(*guardduty.Options)) *guardduty.DeleteThreatEntitySetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteThreatEntitySetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteThreatEntitySetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteThreatIntelSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteThreatIntelSet(ctx context.Context, params *guardduty.DeleteThreatIntelSetInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteThreatIntelSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteThreatIntelSet")
	}

	var r0 *guardduty.DeleteThreatIntelSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteThreatIntelSetInput, ...func(*guardduty.Options)) (*guardduty.DeleteThreatIntelSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteThreatIntelSetInput, ...func(*guardduty.Options)) *guardduty.DeleteThreatIntelSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteThreatIntelSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteThreatIntelSetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrustedEntitySet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrustedEntitySet(ctx context.Context, params *guardduty.DeleteTrustedEntitySetInput, optFns ...func(*guardduty.Options)) (*guardduty.DeleteTrustedEntitySetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrustedEntitySet")
	}

	var r0 *guardduty.DeleteTrustedEntitySetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteTrustedEntitySetInput, ...func(*guardduty.Options)) (*guardduty.DeleteTrustedEntitySetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DeleteTrustedEntitySetInput, ...func(*guardduty.Options)) *guardduty.DeleteTrustedEntitySetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DeleteTrustedEntitySetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DeleteTrustedEntitySetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMalwareScans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMalwareScans(ctx context.Context, params *guardduty.DescribeMalwareScansInput, optFns ...func(*guardduty.Options)) (*guardduty.DescribeMalwareScansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMalwareScans")
	}

	var r0 *guardduty.DescribeMalwareScansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DescribeMalwareScansInput, ...func(*guardduty.Options)) (*guardduty.DescribeMalwareScansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DescribeMalwareScansInput, ...func(*guardduty.Options)) *guardduty.DescribeMalwareScansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DescribeMalwareScansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DescribeMalwareScansInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganizationConfiguration(ctx context.Context, params *guardduty.DescribeOrganizationConfigurationInput, optFns ...func(*guardduty.Options)) (*guardduty.DescribeOrganizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganizationConfiguration")
	}

	var r0 *guardduty.DescribeOrganizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DescribeOrganizationConfigurationInput, ...func(*guardduty.Options)) (*guardduty.DescribeOrganizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DescribeOrganizationConfigurationInput, ...func(*guardduty.Options)) *guardduty.DescribeOrganizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DescribeOrganizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DescribeOrganizationConfigurationInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePublishingDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePublishingDestination(ctx context.Context, params *guardduty.DescribePublishingDestinationInput, optFns ...func(*guardduty.Options)) (*guardduty.DescribePublishingDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePublishingDestination")
	}

	var r0 *guardduty.DescribePublishingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DescribePublishingDestinationInput, ...func(*guardduty.Options)) (*guardduty.DescribePublishingDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DescribePublishingDestinationInput, ...func(*guardduty.Options)) *guardduty.DescribePublishingDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DescribePublishingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DescribePublishingDestinationInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableOrganizationAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableOrganizationAdminAccount(ctx context.Context, params *guardduty.DisableOrganizationAdminAccountInput, optFns ...func(*guardduty.Options)) (*guardduty.DisableOrganizationAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableOrganizationAdminAccount")
	}

	var r0 *guardduty.DisableOrganizationAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DisableOrganizationAdminAccountInput, ...func(*guardduty.Options)) (*guardduty.DisableOrganizationAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DisableOrganizationAdminAccountInput, ...func(*guardduty.Options)) *guardduty.DisableOrganizationAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DisableOrganizationAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DisableOrganizationAdminAccountInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFromAdministratorAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFromAdministratorAccount(ctx context.Context, params *guardduty.DisassociateFromAdministratorAccountInput, optFns ...func(*guardduty.Options)) (*guardduty.DisassociateFromAdministratorAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFromAdministratorAccount")
	}

	var r0 *guardduty.DisassociateFromAdministratorAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DisassociateFromAdministratorAccountInput, ...func(*guardduty.Options)) (*guardduty.DisassociateFromAdministratorAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DisassociateFromAdministratorAccountInput, ...func(*guardduty.Options)) *guardduty.DisassociateFromAdministratorAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DisassociateFromAdministratorAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DisassociateFromAdministratorAccountInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateFromMasterAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateFromMasterAccount(ctx context.Context, params *guardduty.DisassociateFromMasterAccountInput, optFns ...func(*guardduty.Options)) (*guardduty.DisassociateFromMasterAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateFromMasterAccount")
	}

	var r0 *guardduty.DisassociateFromMasterAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DisassociateFromMasterAccountInput, ...func(*guardduty.Options)) (*guardduty.DisassociateFromMasterAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DisassociateFromMasterAccountInput, ...func(*guardduty.Options)) *guardduty.DisassociateFromMasterAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DisassociateFromMasterAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DisassociateFromMasterAccountInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMembers(ctx context.Context, params *guardduty.DisassociateMembersInput, optFns ...func(*guardduty.Options)) (*guardduty.DisassociateMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMembers")
	}

	var r0 *guardduty.DisassociateMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DisassociateMembersInput, ...func(*guardduty.Options)) (*guardduty.DisassociateMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.DisassociateMembersInput, ...func(*guardduty.Options)) *guardduty.DisassociateMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.DisassociateMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.DisassociateMembersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableOrganizationAdminAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableOrganizationAdminAccount(ctx context.Context, params *guardduty.EnableOrganizationAdminAccountInput, optFns ...func(*guardduty.Options)) (*guardduty.EnableOrganizationAdminAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableOrganizationAdminAccount")
	}

	var r0 *guardduty.EnableOrganizationAdminAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.EnableOrganizationAdminAccountInput, ...func(*guardduty.Options)) (*guardduty.EnableOrganizationAdminAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.EnableOrganizationAdminAccountInput, ...func(*guardduty.Options)) *guardduty.EnableOrganizationAdminAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.EnableOrganizationAdminAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.EnableOrganizationAdminAccountInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAdministratorAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAdministratorAccount(ctx context.Context, params *guardduty.GetAdministratorAccountInput, optFns ...func(*guardduty.Options)) (*guardduty.GetAdministratorAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAdministratorAccount")
	}

	var r0 *guardduty.GetAdministratorAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetAdministratorAccountInput, ...func(*guardduty.Options)) (*guardduty.GetAdministratorAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetAdministratorAccountInput, ...func(*guardduty.Options)) *guardduty.GetAdministratorAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetAdministratorAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetAdministratorAccountInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoverageStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCoverageStatistics(ctx context.Context, params *guardduty.GetCoverageStatisticsInput, optFns ...func(*guardduty.Options)) (*guardduty.GetCoverageStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCoverageStatistics")
	}

	var r0 *guardduty.GetCoverageStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetCoverageStatisticsInput, ...func(*guardduty.Options)) (*guardduty.GetCoverageStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetCoverageStatisticsInput, ...func(*guardduty.Options)) *guardduty.GetCoverageStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetCoverageStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetCoverageStatisticsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDetector(ctx context.Context, params *guardduty.GetDetectorInput, optFns ...func(*guardduty.Options)) (*guardduty.GetDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDetector")
	}

	var r0 *guardduty.GetDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetDetectorInput, ...func(*guardduty.Options)) (*guardduty.GetDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetDetectorInput, ...func(*guardduty.Options)) *guardduty.GetDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetDetectorInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFilter(ctx context.Context, params *guardduty.GetFilterInput, optFns ...func(*guardduty.Options)) (*guardduty.GetFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFilter")
	}

	var r0 *guardduty.GetFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetFilterInput, ...func(*guardduty.Options)) (*guardduty.GetFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetFilterInput, ...func(*guardduty.Options)) *guardduty.GetFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetFilterInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindings(ctx context.Context, params *guardduty.GetFindingsInput, optFns ...func(*guardduty.Options)) (*guardduty.GetFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindings")
	}

	var r0 *guardduty.GetFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetFindingsInput, ...func(*guardduty.Options)) (*guardduty.GetFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetFindingsInput, ...func(*guardduty.Options)) *guardduty.GetFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetFindingsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFindingsStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFindingsStatistics(ctx context.Context, params *guardduty.GetFindingsStatisticsInput, optFns ...func(*guardduty.Options)) (*guardduty.GetFindingsStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFindingsStatistics")
	}

	var r0 *guardduty.GetFindingsStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetFindingsStatisticsInput, ...func(*guardduty.Options)) (*guardduty.GetFindingsStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetFindingsStatisticsInput, ...func(*guardduty.Options)) *guardduty.GetFindingsStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetFindingsStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetFindingsStatisticsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIPSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIPSet(ctx context.Context, params *guardduty.GetIPSetInput, optFns ...func(*guardduty.Options)) (*guardduty.GetIPSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIPSet")
	}

	var r0 *guardduty.GetIPSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetIPSetInput, ...func(*guardduty.Options)) (*guardduty.GetIPSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetIPSetInput, ...func(*guardduty.Options)) *guardduty.GetIPSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetIPSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetIPSetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvitationsCount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInvitationsCount(ctx context.Context, params *guardduty.GetInvitationsCountInput, optFns ...func(*guardduty.Options)) (*guardduty.GetInvitationsCountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvitationsCount")
	}

	var r0 *guardduty.GetInvitationsCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetInvitationsCountInput, ...func(*guardduty.Options)) (*guardduty.GetInvitationsCountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetInvitationsCountInput, ...func(*guardduty.Options)) *guardduty.GetInvitationsCountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetInvitationsCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetInvitationsCountInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMalwareProtectionPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMalwareProtectionPlan(ctx context.Context, params *guardduty.GetMalwareProtectionPlanInput, optFns ...func(*guardduty.Options)) (*guardduty.GetMalwareProtectionPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMalwareProtectionPlan")
	}

	var r0 *guardduty.GetMalwareProtectionPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMalwareProtectionPlanInput, ...func(*guardduty.Options)) (*guardduty.GetMalwareProtectionPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMalwareProtectionPlanInput, ...func(*guardduty.Options)) *guardduty.GetMalwareProtectionPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetMalwareProtectionPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetMalwareProtectionPlanInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMalwareScanSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMalwareScanSettings(ctx context.Context, params *guardduty.GetMalwareScanSettingsInput, optFns ...func(*guardduty.Options)) (*guardduty.GetMalwareScanSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMalwareScanSettings")
	}

	var r0 *guardduty.GetMalwareScanSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMalwareScanSettingsInput, ...func(*guardduty.Options)) (*guardduty.GetMalwareScanSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMalwareScanSettingsInput, ...func(*guardduty.Options)) *guardduty.GetMalwareScanSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetMalwareScanSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetMalwareScanSettingsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMasterAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMasterAccount(ctx context.Context, params *guardduty.GetMasterAccountInput, optFns ...func(*guardduty.Options)) (*guardduty.GetMasterAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMasterAccount")
	}

	var r0 *guardduty.GetMasterAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMasterAccountInput, ...func(*guardduty.Options)) (*guardduty.GetMasterAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMasterAccountInput, ...func(*guardduty.Options)) *guardduty.GetMasterAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetMasterAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetMasterAccountInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMemberDetectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMemberDetectors(ctx context.Context, params *guardduty.GetMemberDetectorsInput, optFns ...func(*guardduty.Options)) (*guardduty.GetMemberDetectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMemberDetectors")
	}

	var r0 *guardduty.GetMemberDetectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMemberDetectorsInput, ...func(*guardduty.Options)) (*guardduty.GetMemberDetectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMemberDetectorsInput, ...func(*guardduty.Options)) *guardduty.GetMemberDetectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetMemberDetectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetMemberDetectorsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMembers(ctx context.Context, params *guardduty.GetMembersInput, optFns ...func(*guardduty.Options)) (*guardduty.GetMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMembers")
	}

	var r0 *guardduty.GetMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMembersInput, ...func(*guardduty.Options)) (*guardduty.GetMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetMembersInput, ...func(*guardduty.Options)) *guardduty.GetMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetMembersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOrganizationStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOrganizationStatistics(ctx context.Context, params *guardduty.GetOrganizationStatisticsInput, optFns ...func(*guardduty.Options)) (*guardduty.GetOrganizationStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOrganizationStatistics")
	}

	var r0 *guardduty.GetOrganizationStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetOrganizationStatisticsInput, ...func(*guardduty.Options)) (*guardduty.GetOrganizationStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetOrganizationStatisticsInput, ...func(*guardduty.Options)) *guardduty.GetOrganizationStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetOrganizationStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetOrganizationStatisticsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRemainingFreeTrialDays provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRemainingFreeTrialDays(ctx context.Context, params *guardduty.GetRemainingFreeTrialDaysInput, optFns ...func(*guardduty.Options)) (*guardduty.GetRemainingFreeTrialDaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRemainingFreeTrialDays")
	}

	var r0 *guardduty.GetRemainingFreeTrialDaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetRemainingFreeTrialDaysInput, ...func(*guardduty.Options)) (*guardduty.GetRemainingFreeTrialDaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetRemainingFreeTrialDaysInput, ...func(*guardduty.Options)) *guardduty.GetRemainingFreeTrialDaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetRemainingFreeTrialDaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetRemainingFreeTrialDaysInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreatEntitySet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetThreatEntitySet(ctx context.Context, params *guardduty.GetThreatEntitySetInput, optFns ...func(*guardduty.Options)) (*guardduty.GetThreatEntitySetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetThreatEntitySet")
	}

	var r0 *guardduty.GetThreatEntitySetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetThreatEntitySetInput, ...func(*guardduty.Options)) (*guardduty.GetThreatEntitySetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetThreatEntitySetInput, ...func(*guardduty.Options)) *guardduty.GetThreatEntitySetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetThreatEntitySetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetThreatEntitySetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThreatIntelSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetThreatIntelSet(ctx context.Context, params *guardduty.GetThreatIntelSetInput, optFns ...func(*guardduty.Options)) (*guardduty.GetThreatIntelSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetThreatIntelSet")
	}

	var r0 *guardduty.GetThreatIntelSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetThreatIntelSetInput, ...func(*guardduty.Options)) (*guardduty.GetThreatIntelSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetThreatIntelSetInput, ...func(*guardduty.Options)) *guardduty.GetThreatIntelSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetThreatIntelSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetThreatIntelSetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrustedEntitySet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrustedEntitySet(ctx context.Context, params *guardduty.GetTrustedEntitySetInput, optFns ...func(*guardduty.Options)) (*guardduty.GetTrustedEntitySetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrustedEntitySet")
	}

	var r0 *guardduty.GetTrustedEntitySetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetTrustedEntitySetInput, ...func(*guardduty.Options)) (*guardduty.GetTrustedEntitySetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetTrustedEntitySetInput, ...func(*guardduty.Options)) *guardduty.GetTrustedEntitySetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetTrustedEntitySetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetTrustedEntitySetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsageStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUsageStatistics(ctx context.Context, params *guardduty.GetUsageStatisticsInput, optFns ...func(*guardduty.Options)) (*guardduty.GetUsageStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUsageStatistics")
	}

	var r0 *guardduty.GetUsageStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetUsageStatisticsInput, ...func(*guardduty.Options)) (*guardduty.GetUsageStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.GetUsageStatisticsInput, ...func(*guardduty.Options)) *guardduty.GetUsageStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.GetUsageStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.GetUsageStatisticsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InviteMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InviteMembers(ctx context.Context, params *guardduty.InviteMembersInput, optFns ...func(*guardduty.Options)) (*guardduty.InviteMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InviteMembers")
	}

	var r0 *guardduty.InviteMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.InviteMembersInput, ...func(*guardduty.Options)) (*guardduty.InviteMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.InviteMembersInput, ...func(*guardduty.Options)) *guardduty.InviteMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.InviteMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.InviteMembersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoverage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCoverage(ctx context.Context, params *guardduty.ListCoverageInput, optFns ...func(*guardduty.Options)) (*guardduty.ListCoverageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCoverage")
	}

	var r0 *guardduty.ListCoverageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListCoverageInput, ...func(*guardduty.Options)) (*guardduty.ListCoverageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListCoverageInput, ...func(*guardduty.Options)) *guardduty.ListCoverageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListCoverageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListCoverageInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDetectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDetectors(ctx context.Context, params *guardduty.ListDetectorsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListDetectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDetectors")
	}

	var r0 *guardduty.ListDetectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListDetectorsInput, ...func(*guardduty.Options)) (*guardduty.ListDetectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListDetectorsInput, ...func(*guardduty.Options)) *guardduty.ListDetectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListDetectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListDetectorsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFilters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFilters(ctx context.Context, params *guardduty.ListFiltersInput, optFns ...func(*guardduty.Options)) (*guardduty.ListFiltersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFilters")
	}

	var r0 *guardduty.ListFiltersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListFiltersInput, ...func(*guardduty.Options)) (*guardduty.ListFiltersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListFiltersInput, ...func(*guardduty.Options)) *guardduty.ListFiltersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListFiltersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListFiltersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFindings(ctx context.Context, params *guardduty.ListFindingsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFindings")
	}

	var r0 *guardduty.ListFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListFindingsInput, ...func(*guardduty.Options)) (*guardduty.ListFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListFindingsInput, ...func(*guardduty.Options)) *guardduty.ListFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListFindingsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIPSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIPSets(ctx context.Context, params *guardduty.ListIPSetsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListIPSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIPSets")
	}

	var r0 *guardduty.ListIPSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListIPSetsInput, ...func(*guardduty.Options)) (*guardduty.ListIPSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListIPSetsInput, ...func(*guardduty.Options)) *guardduty.ListIPSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListIPSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListIPSetsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvitations(ctx context.Context, params *guardduty.ListInvitationsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvitations")
	}

	var r0 *guardduty.ListInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListInvitationsInput, ...func(*guardduty.Options)) (*guardduty.ListInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListInvitationsInput, ...func(*guardduty.Options)) *guardduty.ListInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListInvitationsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMalwareProtectionPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMalwareProtectionPlans(ctx context.Context, params *guardduty.ListMalwareProtectionPlansInput, optFns ...func(*guardduty.Options)) (*guardduty.ListMalwareProtectionPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMalwareProtectionPlans")
	}

	var r0 *guardduty.ListMalwareProtectionPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListMalwareProtectionPlansInput, ...func(*guardduty.Options)) (*guardduty.ListMalwareProtectionPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListMalwareProtectionPlansInput, ...func(*guardduty.Options)) *guardduty.ListMalwareProtectionPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListMalwareProtectionPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListMalwareProtectionPlansInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMembers(ctx context.Context, params *guardduty.ListMembersInput, optFns ...func(*guardduty.Options)) (*guardduty.ListMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMembers")
	}

	var r0 *guardduty.ListMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListMembersInput, ...func(*guardduty.Options)) (*guardduty.ListMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListMembersInput, ...func(*guardduty.Options)) *guardduty.ListMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListMembersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationAdminAccounts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizationAdminAccounts(ctx context.Context, params *guardduty.ListOrganizationAdminAccountsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListOrganizationAdminAccountsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationAdminAccounts")
	}

	var r0 *guardduty.ListOrganizationAdminAccountsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListOrganizationAdminAccountsInput, ...func(*guardduty.Options)) (*guardduty.ListOrganizationAdminAccountsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListOrganizationAdminAccountsInput, ...func(*guardduty.Options)) *guardduty.ListOrganizationAdminAccountsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListOrganizationAdminAccountsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListOrganizationAdminAccountsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPublishingDestinations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPublishingDestinations(ctx context.Context, params *guardduty.ListPublishingDestinationsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListPublishingDestinationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPublishingDestinations")
	}

	var r0 *guardduty.ListPublishingDestinationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListPublishingDestinationsInput, ...func(*guardduty.Options)) (*guardduty.ListPublishingDestinationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListPublishingDestinationsInput, ...func(*guardduty.Options)) *guardduty.ListPublishingDestinationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListPublishingDestinationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListPublishingDestinationsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *guardduty.ListTagsForResourceInput, optFns ...func(*guardduty.Options)) (*guardduty.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *guardduty.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListTagsForResourceInput, ...func(*guardduty.Options)) (*guardduty.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListTagsForResourceInput, ...func(*guardduty.Options)) *guardduty.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListTagsForResourceInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThreatEntitySets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThreatEntitySets(ctx context.Context, params *guardduty.ListThreatEntitySetsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListThreatEntitySetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThreatEntitySets")
	}

	var r0 *guardduty.ListThreatEntitySetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListThreatEntitySetsInput, ...func(*guardduty.Options)) (*guardduty.ListThreatEntitySetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListThreatEntitySetsInput, ...func(*guardduty.Options)) *guardduty.ListThreatEntitySetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListThreatEntitySetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListThreatEntitySetsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListThreatIntelSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListThreatIntelSets(ctx context.Context, params *guardduty.ListThreatIntelSetsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListThreatIntelSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListThreatIntelSets")
	}

	var r0 *guardduty.ListThreatIntelSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListThreatIntelSetsInput, ...func(*guardduty.Options)) (*guardduty.ListThreatIntelSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListThreatIntelSetsInput, ...func(*guardduty.Options)) *guardduty.ListThreatIntelSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListThreatIntelSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListThreatIntelSetsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrustedEntitySets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrustedEntitySets(ctx context.Context, params *guardduty.ListTrustedEntitySetsInput, optFns ...func(*guardduty.Options)) (*guardduty.ListTrustedEntitySetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrustedEntitySets")
	}

	var r0 *guardduty.ListTrustedEntitySetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListTrustedEntitySetsInput, ...func(*guardduty.Options)) (*guardduty.ListTrustedEntitySetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.ListTrustedEntitySetsInput, ...func(*guardduty.Options)) *guardduty.ListTrustedEntitySetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.ListTrustedEntitySetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.ListTrustedEntitySetsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() guardduty.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 guardduty.Options
	if rf, ok := ret.Get(0).(func() guardduty.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(guardduty.Options)
	}

	return r0
}

// StartMalwareScan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMalwareScan(ctx context.Context, params *guardduty.StartMalwareScanInput, optFns ...func(*guardduty.Options)) (*guardduty.StartMalwareScanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMalwareScan")
	}

	var r0 *guardduty.StartMalwareScanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.StartMalwareScanInput, ...func(*guardduty.Options)) (*guardduty.StartMalwareScanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.StartMalwareScanInput, ...func(*guardduty.Options)) *guardduty.StartMalwareScanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.StartMalwareScanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.StartMalwareScanInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMonitoringMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMonitoringMembers(ctx context.Context, params *guardduty.StartMonitoringMembersInput, optFns ...func(*guardduty.Options)) (*guardduty.StartMonitoringMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMonitoringMembers")
	}

	var r0 *guardduty.StartMonitoringMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.StartMonitoringMembersInput, ...func(*guardduty.Options)) (*guardduty.StartMonitoringMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.StartMonitoringMembersInput, ...func(*guardduty.Options)) *guardduty.StartMonitoringMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.StartMonitoringMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.StartMonitoringMembersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMonitoringMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopMonitoringMembers(ctx context.Context, params *guardduty.StopMonitoringMembersInput, optFns ...func(*guardduty.Options)) (*guardduty.StopMonitoringMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopMonitoringMembers")
	}

	var r0 *guardduty.StopMonitoringMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.StopMonitoringMembersInput, ...func(*guardduty.Options)) (*guardduty.StopMonitoringMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.StopMonitoringMembersInput, ...func(*guardduty.Options)) *guardduty.StopMonitoringMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.StopMonitoringMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.StopMonitoringMembersInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *guardduty.TagResourceInput, optFns ...func(*guardduty.Options)) (*guardduty.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *guardduty.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.TagResourceInput, ...func(*guardduty.Options)) (*guardduty.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.TagResourceInput, ...func(*guardduty.Options)) *guardduty.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.TagResourceInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnarchiveFindings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnarchiveFindings(ctx context.Context, params *guardduty.UnarchiveFindingsInput, optFns ...func(*guardduty.Options)) (*guardduty.UnarchiveFindingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnarchiveFindings")
	}

	var r0 *guardduty.UnarchiveFindingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UnarchiveFindingsInput, ...func(*guardduty.Options)) (*guardduty.UnarchiveFindingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UnarchiveFindingsInput, ...func(*guardduty.Options)) *guardduty.UnarchiveFindingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UnarchiveFindingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UnarchiveFindingsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *guardduty.UntagResourceInput, optFns ...func(*guardduty.Options)) (*guardduty.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *guardduty.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UntagResourceInput, ...func(*guardduty.Options)) (*guardduty.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UntagResourceInput, ...func(*guardduty.Options)) *guardduty.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UntagResourceInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDetector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDetector(ctx context.Context, params *guardduty.UpdateDetectorInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateDetectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDetector")
	}

	var r0 *guardduty.UpdateDetectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateDetectorInput, ...func(*guardduty.Options)) (*guardduty.UpdateDetectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateDetectorInput, ...func(*guardduty.Options)) *guardduty.UpdateDetectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateDetectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateDetectorInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFilter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFilter(ctx context.Context, params *guardduty.UpdateFilterInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateFilterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFilter")
	}

	var r0 *guardduty.UpdateFilterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateFilterInput, ...func(*guardduty.Options)) (*guardduty.UpdateFilterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateFilterInput, ...func(*guardduty.Options)) *guardduty.UpdateFilterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateFilterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateFilterInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFindingsFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFindingsFeedback(ctx context.Context, params *guardduty.UpdateFindingsFeedbackInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateFindingsFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFindingsFeedback")
	}

	var r0 *guardduty.UpdateFindingsFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateFindingsFeedbackInput, ...func(*guardduty.Options)) (*guardduty.UpdateFindingsFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateFindingsFeedbackInput, ...func(*guardduty.Options)) *guardduty.UpdateFindingsFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateFindingsFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateFindingsFeedbackInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIPSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIPSet(ctx context.Context, params *guardduty.UpdateIPSetInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateIPSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIPSet")
	}

	var r0 *guardduty.UpdateIPSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateIPSetInput, ...func(*guardduty.Options)) (*guardduty.UpdateIPSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateIPSetInput, ...func(*guardduty.Options)) *guardduty.UpdateIPSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateIPSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateIPSetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMalwareProtectionPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMalwareProtectionPlan(ctx context.Context, params *guardduty.UpdateMalwareProtectionPlanInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateMalwareProtectionPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMalwareProtectionPlan")
	}

	var r0 *guardduty.UpdateMalwareProtectionPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateMalwareProtectionPlanInput, ...func(*guardduty.Options)) (*guardduty.UpdateMalwareProtectionPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateMalwareProtectionPlanInput, ...func(*guardduty.Options)) *guardduty.UpdateMalwareProtectionPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateMalwareProtectionPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateMalwareProtectionPlanInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMalwareScanSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMalwareScanSettings(ctx context.Context, params *guardduty.UpdateMalwareScanSettingsInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateMalwareScanSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMalwareScanSettings")
	}

	var r0 *guardduty.UpdateMalwareScanSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateMalwareScanSettingsInput, ...func(*guardduty.Options)) (*guardduty.UpdateMalwareScanSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateMalwareScanSettingsInput, ...func(*guardduty.Options)) *guardduty.UpdateMalwareScanSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateMalwareScanSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateMalwareScanSettingsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMemberDetectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMemberDetectors(ctx context.Context, params *guardduty.UpdateMemberDetectorsInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateMemberDetectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMemberDetectors")
	}

	var r0 *guardduty.UpdateMemberDetectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateMemberDetectorsInput, ...func(*guardduty.Options)) (*guardduty.UpdateMemberDetectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateMemberDetectorsInput, ...func(*guardduty.Options)) *guardduty.UpdateMemberDetectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateMemberDetectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateMemberDetectorsInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOrganizationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOrganizationConfiguration(ctx context.Context, params *guardduty.UpdateOrganizationConfigurationInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateOrganizationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOrganizationConfiguration")
	}

	var r0 *guardduty.UpdateOrganizationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateOrganizationConfigurationInput, ...func(*guardduty.Options)) (*guardduty.UpdateOrganizationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateOrganizationConfigurationInput, ...func(*guardduty.Options)) *guardduty.UpdateOrganizationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateOrganizationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateOrganizationConfigurationInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePublishingDestination provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePublishingDestination(ctx context.Context, params *guardduty.UpdatePublishingDestinationInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdatePublishingDestinationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePublishingDestination")
	}

	var r0 *guardduty.UpdatePublishingDestinationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdatePublishingDestinationInput, ...func(*guardduty.Options)) (*guardduty.UpdatePublishingDestinationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdatePublishingDestinationInput, ...func(*guardduty.Options)) *guardduty.UpdatePublishingDestinationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdatePublishingDestinationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdatePublishingDestinationInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThreatEntitySet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThreatEntitySet(ctx context.Context, params *guardduty.UpdateThreatEntitySetInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateThreatEntitySetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThreatEntitySet")
	}

	var r0 *guardduty.UpdateThreatEntitySetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateThreatEntitySetInput, ...func(*guardduty.Options)) (*guardduty.UpdateThreatEntitySetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateThreatEntitySetInput, ...func(*guardduty.Options)) *guardduty.UpdateThreatEntitySetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateThreatEntitySetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateThreatEntitySetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThreatIntelSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThreatIntelSet(ctx context.Context, params *guardduty.UpdateThreatIntelSetInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateThreatIntelSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThreatIntelSet")
	}

	var r0 *guardduty.UpdateThreatIntelSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateThreatIntelSetInput, ...func(*guardduty.Options)) (*guardduty.UpdateThreatIntelSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateThreatIntelSetInput, ...func(*guardduty.Options)) *guardduty.UpdateThreatIntelSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateThreatIntelSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateThreatIntelSetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrustedEntitySet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrustedEntitySet(ctx context.Context, params *guardduty.UpdateTrustedEntitySetInput, optFns ...func(*guardduty.Options)) (*guardduty.UpdateTrustedEntitySetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrustedEntitySet")
	}

	var r0 *guardduty.UpdateTrustedEntitySetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateTrustedEntitySetInput, ...func(*guardduty.Options)) (*guardduty.UpdateTrustedEntitySetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *guardduty.UpdateTrustedEntitySetInput, ...func(*guardduty.Options)) *guardduty.UpdateTrustedEntitySetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*guardduty.UpdateTrustedEntitySetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *guardduty.UpdateTrustedEntitySetInput, ...func(*guardduty.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
