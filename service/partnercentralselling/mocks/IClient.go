// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	partnercentralselling "github.com/aws/aws-sdk-go-v2/service/partnercentralselling"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptEngagementInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptEngagementInvitation(ctx context.Context, params *partnercentralselling.AcceptEngagementInvitationInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.AcceptEngagementInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptEngagementInvitation")
	}

	var r0 *partnercentralselling.AcceptEngagementInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.AcceptEngagementInvitationInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.AcceptEngagementInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.AcceptEngagementInvitationInput, ...func(*partnercentralselling.Options)) *partnercentralselling.AcceptEngagementInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.AcceptEngagementInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.AcceptEngagementInvitationInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignOpportunity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssignOpportunity(ctx context.Context, params *partnercentralselling.AssignOpportunityInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.AssignOpportunityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignOpportunity")
	}

	var r0 *partnercentralselling.AssignOpportunityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.AssignOpportunityInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.AssignOpportunityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.AssignOpportunityInput, ...func(*partnercentralselling.Options)) *partnercentralselling.AssignOpportunityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.AssignOpportunityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.AssignOpportunityInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateOpportunity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateOpportunity(ctx context.Context, params *partnercentralselling.AssociateOpportunityInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.AssociateOpportunityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateOpportunity")
	}

	var r0 *partnercentralselling.AssociateOpportunityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.AssociateOpportunityInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.AssociateOpportunityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.AssociateOpportunityInput, ...func(*partnercentralselling.Options)) *partnercentralselling.AssociateOpportunityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.AssociateOpportunityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.AssociateOpportunityInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEngagement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEngagement(ctx context.Context, params *partnercentralselling.CreateEngagementInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateEngagementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEngagement")
	}

	var r0 *partnercentralselling.CreateEngagementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateEngagementInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateEngagementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateEngagementInput, ...func(*partnercentralselling.Options)) *partnercentralselling.CreateEngagementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.CreateEngagementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.CreateEngagementInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEngagementInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEngagementInvitation(ctx context.Context, params *partnercentralselling.CreateEngagementInvitationInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateEngagementInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEngagementInvitation")
	}

	var r0 *partnercentralselling.CreateEngagementInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateEngagementInvitationInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateEngagementInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateEngagementInvitationInput, ...func(*partnercentralselling.Options)) *partnercentralselling.CreateEngagementInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.CreateEngagementInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.CreateEngagementInvitationInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOpportunity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOpportunity(ctx context.Context, params *partnercentralselling.CreateOpportunityInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateOpportunityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOpportunity")
	}

	var r0 *partnercentralselling.CreateOpportunityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateOpportunityInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateOpportunityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateOpportunityInput, ...func(*partnercentralselling.Options)) *partnercentralselling.CreateOpportunityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.CreateOpportunityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.CreateOpportunityInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceSnapshot(ctx context.Context, params *partnercentralselling.CreateResourceSnapshotInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateResourceSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceSnapshot")
	}

	var r0 *partnercentralselling.CreateResourceSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateResourceSnapshotInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateResourceSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateResourceSnapshotInput, ...func(*partnercentralselling.Options)) *partnercentralselling.CreateResourceSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.CreateResourceSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.CreateResourceSnapshotInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceSnapshotJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceSnapshotJob(ctx context.Context, params *partnercentralselling.CreateResourceSnapshotJobInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateResourceSnapshotJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceSnapshotJob")
	}

	var r0 *partnercentralselling.CreateResourceSnapshotJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.CreateResourceSnapshotJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.CreateResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) *partnercentralselling.CreateResourceSnapshotJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.CreateResourceSnapshotJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.CreateResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceSnapshotJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceSnapshotJob(ctx context.Context, params *partnercentralselling.DeleteResourceSnapshotJobInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.DeleteResourceSnapshotJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceSnapshotJob")
	}

	var r0 *partnercentralselling.DeleteResourceSnapshotJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.DeleteResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.DeleteResourceSnapshotJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.DeleteResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) *partnercentralselling.DeleteResourceSnapshotJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.DeleteResourceSnapshotJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.DeleteResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateOpportunity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateOpportunity(ctx context.Context, params *partnercentralselling.DisassociateOpportunityInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.DisassociateOpportunityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateOpportunity")
	}

	var r0 *partnercentralselling.DisassociateOpportunityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.DisassociateOpportunityInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.DisassociateOpportunityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.DisassociateOpportunityInput, ...func(*partnercentralselling.Options)) *partnercentralselling.DisassociateOpportunityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.DisassociateOpportunityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.DisassociateOpportunityInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAwsOpportunitySummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAwsOpportunitySummary(ctx context.Context, params *partnercentralselling.GetAwsOpportunitySummaryInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.GetAwsOpportunitySummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAwsOpportunitySummary")
	}

	var r0 *partnercentralselling.GetAwsOpportunitySummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetAwsOpportunitySummaryInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.GetAwsOpportunitySummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetAwsOpportunitySummaryInput, ...func(*partnercentralselling.Options)) *partnercentralselling.GetAwsOpportunitySummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.GetAwsOpportunitySummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.GetAwsOpportunitySummaryInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEngagement provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEngagement(ctx context.Context, params *partnercentralselling.GetEngagementInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.GetEngagementOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEngagement")
	}

	var r0 *partnercentralselling.GetEngagementOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetEngagementInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.GetEngagementOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetEngagementInput, ...func(*partnercentralselling.Options)) *partnercentralselling.GetEngagementOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.GetEngagementOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.GetEngagementInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEngagementInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEngagementInvitation(ctx context.Context, params *partnercentralselling.GetEngagementInvitationInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.GetEngagementInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEngagementInvitation")
	}

	var r0 *partnercentralselling.GetEngagementInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetEngagementInvitationInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.GetEngagementInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetEngagementInvitationInput, ...func(*partnercentralselling.Options)) *partnercentralselling.GetEngagementInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.GetEngagementInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.GetEngagementInvitationInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOpportunity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOpportunity(ctx context.Context, params *partnercentralselling.GetOpportunityInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.GetOpportunityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOpportunity")
	}

	var r0 *partnercentralselling.GetOpportunityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetOpportunityInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.GetOpportunityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetOpportunityInput, ...func(*partnercentralselling.Options)) *partnercentralselling.GetOpportunityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.GetOpportunityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.GetOpportunityInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceSnapshot(ctx context.Context, params *partnercentralselling.GetResourceSnapshotInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.GetResourceSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceSnapshot")
	}

	var r0 *partnercentralselling.GetResourceSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetResourceSnapshotInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.GetResourceSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetResourceSnapshotInput, ...func(*partnercentralselling.Options)) *partnercentralselling.GetResourceSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.GetResourceSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.GetResourceSnapshotInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceSnapshotJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceSnapshotJob(ctx context.Context, params *partnercentralselling.GetResourceSnapshotJobInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.GetResourceSnapshotJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceSnapshotJob")
	}

	var r0 *partnercentralselling.GetResourceSnapshotJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.GetResourceSnapshotJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) *partnercentralselling.GetResourceSnapshotJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.GetResourceSnapshotJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.GetResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSellingSystemSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSellingSystemSettings(ctx context.Context, params *partnercentralselling.GetSellingSystemSettingsInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.GetSellingSystemSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSellingSystemSettings")
	}

	var r0 *partnercentralselling.GetSellingSystemSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetSellingSystemSettingsInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.GetSellingSystemSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.GetSellingSystemSettingsInput, ...func(*partnercentralselling.Options)) *partnercentralselling.GetSellingSystemSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.GetSellingSystemSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.GetSellingSystemSettingsInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngagementByAcceptingInvitationTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEngagementByAcceptingInvitationTasks(ctx context.Context, params *partnercentralselling.ListEngagementByAcceptingInvitationTasksInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementByAcceptingInvitationTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEngagementByAcceptingInvitationTasks")
	}

	var r0 *partnercentralselling.ListEngagementByAcceptingInvitationTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementByAcceptingInvitationTasksInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementByAcceptingInvitationTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementByAcceptingInvitationTasksInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListEngagementByAcceptingInvitationTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListEngagementByAcceptingInvitationTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListEngagementByAcceptingInvitationTasksInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngagementFromOpportunityTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEngagementFromOpportunityTasks(ctx context.Context, params *partnercentralselling.ListEngagementFromOpportunityTasksInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementFromOpportunityTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEngagementFromOpportunityTasks")
	}

	var r0 *partnercentralselling.ListEngagementFromOpportunityTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementFromOpportunityTasksInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementFromOpportunityTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementFromOpportunityTasksInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListEngagementFromOpportunityTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListEngagementFromOpportunityTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListEngagementFromOpportunityTasksInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngagementInvitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEngagementInvitations(ctx context.Context, params *partnercentralselling.ListEngagementInvitationsInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementInvitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEngagementInvitations")
	}

	var r0 *partnercentralselling.ListEngagementInvitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementInvitationsInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementInvitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementInvitationsInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListEngagementInvitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListEngagementInvitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListEngagementInvitationsInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngagementMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEngagementMembers(ctx context.Context, params *partnercentralselling.ListEngagementMembersInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEngagementMembers")
	}

	var r0 *partnercentralselling.ListEngagementMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementMembersInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementMembersInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListEngagementMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListEngagementMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListEngagementMembersInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngagementResourceAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEngagementResourceAssociations(ctx context.Context, params *partnercentralselling.ListEngagementResourceAssociationsInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementResourceAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEngagementResourceAssociations")
	}

	var r0 *partnercentralselling.ListEngagementResourceAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementResourceAssociationsInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementResourceAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementResourceAssociationsInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListEngagementResourceAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListEngagementResourceAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListEngagementResourceAssociationsInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEngagements provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEngagements(ctx context.Context, params *partnercentralselling.ListEngagementsInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEngagements")
	}

	var r0 *partnercentralselling.ListEngagementsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementsInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListEngagementsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListEngagementsInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListEngagementsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListEngagementsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListEngagementsInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOpportunities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOpportunities(ctx context.Context, params *partnercentralselling.ListOpportunitiesInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListOpportunitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOpportunities")
	}

	var r0 *partnercentralselling.ListOpportunitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListOpportunitiesInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListOpportunitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListOpportunitiesInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListOpportunitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListOpportunitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListOpportunitiesInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceSnapshotJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceSnapshotJobs(ctx context.Context, params *partnercentralselling.ListResourceSnapshotJobsInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListResourceSnapshotJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceSnapshotJobs")
	}

	var r0 *partnercentralselling.ListResourceSnapshotJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListResourceSnapshotJobsInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListResourceSnapshotJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListResourceSnapshotJobsInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListResourceSnapshotJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListResourceSnapshotJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListResourceSnapshotJobsInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceSnapshots(ctx context.Context, params *partnercentralselling.ListResourceSnapshotsInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListResourceSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceSnapshots")
	}

	var r0 *partnercentralselling.ListResourceSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListResourceSnapshotsInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListResourceSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListResourceSnapshotsInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListResourceSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListResourceSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListResourceSnapshotsInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSolutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSolutions(ctx context.Context, params *partnercentralselling.ListSolutionsInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListSolutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSolutions")
	}

	var r0 *partnercentralselling.ListSolutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListSolutionsInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListSolutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListSolutionsInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListSolutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListSolutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListSolutionsInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *partnercentralselling.ListTagsForResourceInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *partnercentralselling.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListTagsForResourceInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.ListTagsForResourceInput, ...func(*partnercentralselling.Options)) *partnercentralselling.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.ListTagsForResourceInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() partnercentralselling.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 partnercentralselling.Options
	if rf, ok := ret.Get(0).(func() partnercentralselling.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(partnercentralselling.Options)
	}

	return r0
}

// PutSellingSystemSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSellingSystemSettings(ctx context.Context, params *partnercentralselling.PutSellingSystemSettingsInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.PutSellingSystemSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSellingSystemSettings")
	}

	var r0 *partnercentralselling.PutSellingSystemSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.PutSellingSystemSettingsInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.PutSellingSystemSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.PutSellingSystemSettingsInput, ...func(*partnercentralselling.Options)) *partnercentralselling.PutSellingSystemSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.PutSellingSystemSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.PutSellingSystemSettingsInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectEngagementInvitation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectEngagementInvitation(ctx context.Context, params *partnercentralselling.RejectEngagementInvitationInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.RejectEngagementInvitationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectEngagementInvitation")
	}

	var r0 *partnercentralselling.RejectEngagementInvitationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.RejectEngagementInvitationInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.RejectEngagementInvitationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.RejectEngagementInvitationInput, ...func(*partnercentralselling.Options)) *partnercentralselling.RejectEngagementInvitationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.RejectEngagementInvitationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.RejectEngagementInvitationInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartEngagementByAcceptingInvitationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartEngagementByAcceptingInvitationTask(ctx context.Context, params *partnercentralselling.StartEngagementByAcceptingInvitationTaskInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.StartEngagementByAcceptingInvitationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartEngagementByAcceptingInvitationTask")
	}

	var r0 *partnercentralselling.StartEngagementByAcceptingInvitationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.StartEngagementByAcceptingInvitationTaskInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.StartEngagementByAcceptingInvitationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.StartEngagementByAcceptingInvitationTaskInput, ...func(*partnercentralselling.Options)) *partnercentralselling.StartEngagementByAcceptingInvitationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.StartEngagementByAcceptingInvitationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.StartEngagementByAcceptingInvitationTaskInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartEngagementFromOpportunityTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartEngagementFromOpportunityTask(ctx context.Context, params *partnercentralselling.StartEngagementFromOpportunityTaskInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.StartEngagementFromOpportunityTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartEngagementFromOpportunityTask")
	}

	var r0 *partnercentralselling.StartEngagementFromOpportunityTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.StartEngagementFromOpportunityTaskInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.StartEngagementFromOpportunityTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.StartEngagementFromOpportunityTaskInput, ...func(*partnercentralselling.Options)) *partnercentralselling.StartEngagementFromOpportunityTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.StartEngagementFromOpportunityTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.StartEngagementFromOpportunityTaskInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartResourceSnapshotJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartResourceSnapshotJob(ctx context.Context, params *partnercentralselling.StartResourceSnapshotJobInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.StartResourceSnapshotJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartResourceSnapshotJob")
	}

	var r0 *partnercentralselling.StartResourceSnapshotJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.StartResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.StartResourceSnapshotJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.StartResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) *partnercentralselling.StartResourceSnapshotJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.StartResourceSnapshotJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.StartResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopResourceSnapshotJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopResourceSnapshotJob(ctx context.Context, params *partnercentralselling.StopResourceSnapshotJobInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.StopResourceSnapshotJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopResourceSnapshotJob")
	}

	var r0 *partnercentralselling.StopResourceSnapshotJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.StopResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.StopResourceSnapshotJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.StopResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) *partnercentralselling.StopResourceSnapshotJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.StopResourceSnapshotJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.StopResourceSnapshotJobInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SubmitOpportunity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SubmitOpportunity(ctx context.Context, params *partnercentralselling.SubmitOpportunityInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.SubmitOpportunityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SubmitOpportunity")
	}

	var r0 *partnercentralselling.SubmitOpportunityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.SubmitOpportunityInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.SubmitOpportunityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.SubmitOpportunityInput, ...func(*partnercentralselling.Options)) *partnercentralselling.SubmitOpportunityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.SubmitOpportunityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.SubmitOpportunityInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *partnercentralselling.TagResourceInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *partnercentralselling.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.TagResourceInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.TagResourceInput, ...func(*partnercentralselling.Options)) *partnercentralselling.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.TagResourceInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *partnercentralselling.UntagResourceInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *partnercentralselling.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.UntagResourceInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.UntagResourceInput, ...func(*partnercentralselling.Options)) *partnercentralselling.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.UntagResourceInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOpportunity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOpportunity(ctx context.Context, params *partnercentralselling.UpdateOpportunityInput, optFns ...func(*partnercentralselling.Options)) (*partnercentralselling.UpdateOpportunityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOpportunity")
	}

	var r0 *partnercentralselling.UpdateOpportunityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.UpdateOpportunityInput, ...func(*partnercentralselling.Options)) (*partnercentralselling.UpdateOpportunityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *partnercentralselling.UpdateOpportunityInput, ...func(*partnercentralselling.Options)) *partnercentralselling.UpdateOpportunityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*partnercentralselling.UpdateOpportunityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *partnercentralselling.UpdateOpportunityInput, ...func(*partnercentralselling.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
