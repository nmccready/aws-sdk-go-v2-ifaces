// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	pcaconnectorscep "github.com/aws/aws-sdk-go-v2/service/pcaconnectorscep"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateChallenge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateChallenge(ctx context.Context, params *pcaconnectorscep.CreateChallengeInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.CreateChallengeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateChallenge")
	}

	var r0 *pcaconnectorscep.CreateChallengeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.CreateChallengeInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.CreateChallengeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.CreateChallengeInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.CreateChallengeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.CreateChallengeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.CreateChallengeInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnector(ctx context.Context, params *pcaconnectorscep.CreateConnectorInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.CreateConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnector")
	}

	var r0 *pcaconnectorscep.CreateConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.CreateConnectorInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.CreateConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.CreateConnectorInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.CreateConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.CreateConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.CreateConnectorInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChallenge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChallenge(ctx context.Context, params *pcaconnectorscep.DeleteChallengeInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.DeleteChallengeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChallenge")
	}

	var r0 *pcaconnectorscep.DeleteChallengeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.DeleteChallengeInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.DeleteChallengeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.DeleteChallengeInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.DeleteChallengeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.DeleteChallengeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.DeleteChallengeInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnector(ctx context.Context, params *pcaconnectorscep.DeleteConnectorInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.DeleteConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnector")
	}

	var r0 *pcaconnectorscep.DeleteConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.DeleteConnectorInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.DeleteConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.DeleteConnectorInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.DeleteConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.DeleteConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.DeleteConnectorInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChallengeMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChallengeMetadata(ctx context.Context, params *pcaconnectorscep.GetChallengeMetadataInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.GetChallengeMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChallengeMetadata")
	}

	var r0 *pcaconnectorscep.GetChallengeMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.GetChallengeMetadataInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.GetChallengeMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.GetChallengeMetadataInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.GetChallengeMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.GetChallengeMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.GetChallengeMetadataInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChallengePassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChallengePassword(ctx context.Context, params *pcaconnectorscep.GetChallengePasswordInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.GetChallengePasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChallengePassword")
	}

	var r0 *pcaconnectorscep.GetChallengePasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.GetChallengePasswordInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.GetChallengePasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.GetChallengePasswordInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.GetChallengePasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.GetChallengePasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.GetChallengePasswordInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnector(ctx context.Context, params *pcaconnectorscep.GetConnectorInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.GetConnectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnector")
	}

	var r0 *pcaconnectorscep.GetConnectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.GetConnectorInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.GetConnectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.GetConnectorInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.GetConnectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.GetConnectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.GetConnectorInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChallengeMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChallengeMetadata(ctx context.Context, params *pcaconnectorscep.ListChallengeMetadataInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.ListChallengeMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChallengeMetadata")
	}

	var r0 *pcaconnectorscep.ListChallengeMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.ListChallengeMetadataInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.ListChallengeMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.ListChallengeMetadataInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.ListChallengeMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.ListChallengeMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.ListChallengeMetadataInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectors(ctx context.Context, params *pcaconnectorscep.ListConnectorsInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.ListConnectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectors")
	}

	var r0 *pcaconnectorscep.ListConnectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.ListConnectorsInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.ListConnectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.ListConnectorsInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.ListConnectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.ListConnectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.ListConnectorsInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *pcaconnectorscep.ListTagsForResourceInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *pcaconnectorscep.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.ListTagsForResourceInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.ListTagsForResourceInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.ListTagsForResourceInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() pcaconnectorscep.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 pcaconnectorscep.Options
	if rf, ok := ret.Get(0).(func() pcaconnectorscep.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(pcaconnectorscep.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *pcaconnectorscep.TagResourceInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *pcaconnectorscep.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.TagResourceInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.TagResourceInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.TagResourceInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *pcaconnectorscep.UntagResourceInput, optFns ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *pcaconnectorscep.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.UntagResourceInput, ...func(*pcaconnectorscep.Options)) (*pcaconnectorscep.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *pcaconnectorscep.UntagResourceInput, ...func(*pcaconnectorscep.Options)) *pcaconnectorscep.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pcaconnectorscep.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *pcaconnectorscep.UntagResourceInput, ...func(*pcaconnectorscep.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
