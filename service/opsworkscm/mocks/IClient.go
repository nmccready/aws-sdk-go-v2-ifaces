// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	opsworkscm "github.com/aws/aws-sdk-go-v2/service/opsworkscm"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateNode(ctx context.Context, params *opsworkscm.AssociateNodeInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.AssociateNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateNode")
	}

	var r0 *opsworkscm.AssociateNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.AssociateNodeInput, ...func(*opsworkscm.Options)) (*opsworkscm.AssociateNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.AssociateNodeInput, ...func(*opsworkscm.Options)) *opsworkscm.AssociateNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.AssociateNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.AssociateNodeInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackup(ctx context.Context, params *opsworkscm.CreateBackupInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.CreateBackupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackup")
	}

	var r0 *opsworkscm.CreateBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.CreateBackupInput, ...func(*opsworkscm.Options)) (*opsworkscm.CreateBackupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.CreateBackupInput, ...func(*opsworkscm.Options)) *opsworkscm.CreateBackupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.CreateBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.CreateBackupInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServer(ctx context.Context, params *opsworkscm.CreateServerInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.CreateServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServer")
	}

	var r0 *opsworkscm.CreateServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.CreateServerInput, ...func(*opsworkscm.Options)) (*opsworkscm.CreateServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.CreateServerInput, ...func(*opsworkscm.Options)) *opsworkscm.CreateServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.CreateServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.CreateServerInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackup(ctx context.Context, params *opsworkscm.DeleteBackupInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.DeleteBackupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackup")
	}

	var r0 *opsworkscm.DeleteBackupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DeleteBackupInput, ...func(*opsworkscm.Options)) (*opsworkscm.DeleteBackupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DeleteBackupInput, ...func(*opsworkscm.Options)) *opsworkscm.DeleteBackupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.DeleteBackupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.DeleteBackupInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServer(ctx context.Context, params *opsworkscm.DeleteServerInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.DeleteServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServer")
	}

	var r0 *opsworkscm.DeleteServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DeleteServerInput, ...func(*opsworkscm.Options)) (*opsworkscm.DeleteServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DeleteServerInput, ...func(*opsworkscm.Options)) *opsworkscm.DeleteServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.DeleteServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.DeleteServerInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountAttributes(ctx context.Context, params *opsworkscm.DescribeAccountAttributesInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.DescribeAccountAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountAttributes")
	}

	var r0 *opsworkscm.DescribeAccountAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeAccountAttributesInput, ...func(*opsworkscm.Options)) (*opsworkscm.DescribeAccountAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeAccountAttributesInput, ...func(*opsworkscm.Options)) *opsworkscm.DescribeAccountAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.DescribeAccountAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.DescribeAccountAttributesInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBackups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBackups(ctx context.Context, params *opsworkscm.DescribeBackupsInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.DescribeBackupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBackups")
	}

	var r0 *opsworkscm.DescribeBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeBackupsInput, ...func(*opsworkscm.Options)) (*opsworkscm.DescribeBackupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeBackupsInput, ...func(*opsworkscm.Options)) *opsworkscm.DescribeBackupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.DescribeBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.DescribeBackupsInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEvents(ctx context.Context, params *opsworkscm.DescribeEventsInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.DescribeEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEvents")
	}

	var r0 *opsworkscm.DescribeEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeEventsInput, ...func(*opsworkscm.Options)) (*opsworkscm.DescribeEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeEventsInput, ...func(*opsworkscm.Options)) *opsworkscm.DescribeEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.DescribeEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.DescribeEventsInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNodeAssociationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNodeAssociationStatus(ctx context.Context, params *opsworkscm.DescribeNodeAssociationStatusInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.DescribeNodeAssociationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNodeAssociationStatus")
	}

	var r0 *opsworkscm.DescribeNodeAssociationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeNodeAssociationStatusInput, ...func(*opsworkscm.Options)) (*opsworkscm.DescribeNodeAssociationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeNodeAssociationStatusInput, ...func(*opsworkscm.Options)) *opsworkscm.DescribeNodeAssociationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.DescribeNodeAssociationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.DescribeNodeAssociationStatusInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServers(ctx context.Context, params *opsworkscm.DescribeServersInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.DescribeServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServers")
	}

	var r0 *opsworkscm.DescribeServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeServersInput, ...func(*opsworkscm.Options)) (*opsworkscm.DescribeServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DescribeServersInput, ...func(*opsworkscm.Options)) *opsworkscm.DescribeServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.DescribeServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.DescribeServersInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateNode(ctx context.Context, params *opsworkscm.DisassociateNodeInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.DisassociateNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateNode")
	}

	var r0 *opsworkscm.DisassociateNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DisassociateNodeInput, ...func(*opsworkscm.Options)) (*opsworkscm.DisassociateNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.DisassociateNodeInput, ...func(*opsworkscm.Options)) *opsworkscm.DisassociateNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.DisassociateNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.DisassociateNodeInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportServerEngineAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportServerEngineAttribute(ctx context.Context, params *opsworkscm.ExportServerEngineAttributeInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.ExportServerEngineAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportServerEngineAttribute")
	}

	var r0 *opsworkscm.ExportServerEngineAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.ExportServerEngineAttributeInput, ...func(*opsworkscm.Options)) (*opsworkscm.ExportServerEngineAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.ExportServerEngineAttributeInput, ...func(*opsworkscm.Options)) *opsworkscm.ExportServerEngineAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.ExportServerEngineAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.ExportServerEngineAttributeInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *opsworkscm.ListTagsForResourceInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *opsworkscm.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.ListTagsForResourceInput, ...func(*opsworkscm.Options)) (*opsworkscm.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.ListTagsForResourceInput, ...func(*opsworkscm.Options)) *opsworkscm.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.ListTagsForResourceInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() opsworkscm.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 opsworkscm.Options
	if rf, ok := ret.Get(0).(func() opsworkscm.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(opsworkscm.Options)
	}

	return r0
}

// RestoreServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreServer(ctx context.Context, params *opsworkscm.RestoreServerInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.RestoreServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreServer")
	}

	var r0 *opsworkscm.RestoreServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.RestoreServerInput, ...func(*opsworkscm.Options)) (*opsworkscm.RestoreServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.RestoreServerInput, ...func(*opsworkscm.Options)) *opsworkscm.RestoreServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.RestoreServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.RestoreServerInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMaintenance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMaintenance(ctx context.Context, params *opsworkscm.StartMaintenanceInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.StartMaintenanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMaintenance")
	}

	var r0 *opsworkscm.StartMaintenanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.StartMaintenanceInput, ...func(*opsworkscm.Options)) (*opsworkscm.StartMaintenanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.StartMaintenanceInput, ...func(*opsworkscm.Options)) *opsworkscm.StartMaintenanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.StartMaintenanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.StartMaintenanceInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *opsworkscm.TagResourceInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *opsworkscm.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.TagResourceInput, ...func(*opsworkscm.Options)) (*opsworkscm.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.TagResourceInput, ...func(*opsworkscm.Options)) *opsworkscm.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.TagResourceInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *opsworkscm.UntagResourceInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *opsworkscm.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.UntagResourceInput, ...func(*opsworkscm.Options)) (*opsworkscm.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.UntagResourceInput, ...func(*opsworkscm.Options)) *opsworkscm.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.UntagResourceInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServer(ctx context.Context, params *opsworkscm.UpdateServerInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.UpdateServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServer")
	}

	var r0 *opsworkscm.UpdateServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.UpdateServerInput, ...func(*opsworkscm.Options)) (*opsworkscm.UpdateServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.UpdateServerInput, ...func(*opsworkscm.Options)) *opsworkscm.UpdateServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.UpdateServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.UpdateServerInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServerEngineAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServerEngineAttributes(ctx context.Context, params *opsworkscm.UpdateServerEngineAttributesInput, optFns ...func(*opsworkscm.Options)) (*opsworkscm.UpdateServerEngineAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServerEngineAttributes")
	}

	var r0 *opsworkscm.UpdateServerEngineAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.UpdateServerEngineAttributesInput, ...func(*opsworkscm.Options)) (*opsworkscm.UpdateServerEngineAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworkscm.UpdateServerEngineAttributesInput, ...func(*opsworkscm.Options)) *opsworkscm.UpdateServerEngineAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworkscm.UpdateServerEngineAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworkscm.UpdateServerEngineAttributesInput, ...func(*opsworkscm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
