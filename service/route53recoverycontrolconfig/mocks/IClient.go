// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	route53recoverycontrolconfig "github.com/aws/aws-sdk-go-v2/service/route53recoverycontrolconfig"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCluster(ctx context.Context, params *route53recoverycontrolconfig.CreateClusterInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.CreateClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *route53recoverycontrolconfig.CreateClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.CreateClusterInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.CreateClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.CreateClusterInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.CreateClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.CreateClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.CreateClusterInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateControlPanel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateControlPanel(ctx context.Context, params *route53recoverycontrolconfig.CreateControlPanelInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.CreateControlPanelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateControlPanel")
	}

	var r0 *route53recoverycontrolconfig.CreateControlPanelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.CreateControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.CreateControlPanelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.CreateControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.CreateControlPanelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.CreateControlPanelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.CreateControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoutingControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoutingControl(ctx context.Context, params *route53recoverycontrolconfig.CreateRoutingControlInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.CreateRoutingControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoutingControl")
	}

	var r0 *route53recoverycontrolconfig.CreateRoutingControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.CreateRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.CreateRoutingControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.CreateRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.CreateRoutingControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.CreateRoutingControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.CreateRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSafetyRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSafetyRule(ctx context.Context, params *route53recoverycontrolconfig.CreateSafetyRuleInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.CreateSafetyRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSafetyRule")
	}

	var r0 *route53recoverycontrolconfig.CreateSafetyRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.CreateSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.CreateSafetyRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.CreateSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.CreateSafetyRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.CreateSafetyRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.CreateSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCluster(ctx context.Context, params *route53recoverycontrolconfig.DeleteClusterInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DeleteClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *route53recoverycontrolconfig.DeleteClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DeleteClusterInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DeleteClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DeleteClusterInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.DeleteClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.DeleteClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.DeleteClusterInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteControlPanel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteControlPanel(ctx context.Context, params *route53recoverycontrolconfig.DeleteControlPanelInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DeleteControlPanelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteControlPanel")
	}

	var r0 *route53recoverycontrolconfig.DeleteControlPanelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DeleteControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DeleteControlPanelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DeleteControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.DeleteControlPanelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.DeleteControlPanelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.DeleteControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoutingControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoutingControl(ctx context.Context, params *route53recoverycontrolconfig.DeleteRoutingControlInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DeleteRoutingControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoutingControl")
	}

	var r0 *route53recoverycontrolconfig.DeleteRoutingControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DeleteRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DeleteRoutingControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DeleteRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.DeleteRoutingControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.DeleteRoutingControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.DeleteRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSafetyRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSafetyRule(ctx context.Context, params *route53recoverycontrolconfig.DeleteSafetyRuleInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DeleteSafetyRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSafetyRule")
	}

	var r0 *route53recoverycontrolconfig.DeleteSafetyRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DeleteSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DeleteSafetyRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DeleteSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.DeleteSafetyRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.DeleteSafetyRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.DeleteSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCluster(ctx context.Context, params *route53recoverycontrolconfig.DescribeClusterInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCluster")
	}

	var r0 *route53recoverycontrolconfig.DescribeClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DescribeClusterInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DescribeClusterInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.DescribeClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.DescribeClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.DescribeClusterInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeControlPanel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeControlPanel(ctx context.Context, params *route53recoverycontrolconfig.DescribeControlPanelInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeControlPanelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeControlPanel")
	}

	var r0 *route53recoverycontrolconfig.DescribeControlPanelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DescribeControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeControlPanelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DescribeControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.DescribeControlPanelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.DescribeControlPanelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.DescribeControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRoutingControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRoutingControl(ctx context.Context, params *route53recoverycontrolconfig.DescribeRoutingControlInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeRoutingControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRoutingControl")
	}

	var r0 *route53recoverycontrolconfig.DescribeRoutingControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DescribeRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeRoutingControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DescribeRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.DescribeRoutingControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.DescribeRoutingControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.DescribeRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSafetyRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSafetyRule(ctx context.Context, params *route53recoverycontrolconfig.DescribeSafetyRuleInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeSafetyRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSafetyRule")
	}

	var r0 *route53recoverycontrolconfig.DescribeSafetyRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DescribeSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.DescribeSafetyRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.DescribeSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.DescribeSafetyRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.DescribeSafetyRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.DescribeSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *route53recoverycontrolconfig.GetResourcePolicyInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *route53recoverycontrolconfig.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.GetResourcePolicyInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.GetResourcePolicyInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.GetResourcePolicyInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssociatedRoute53HealthChecks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssociatedRoute53HealthChecks(ctx context.Context, params *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssociatedRoute53HealthChecks")
	}

	var r0 *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.ListAssociatedRoute53HealthChecksInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClusters(ctx context.Context, params *route53recoverycontrolconfig.ListClustersInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *route53recoverycontrolconfig.ListClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListClustersInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListClustersInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.ListClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.ListClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.ListClustersInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListControlPanels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListControlPanels(ctx context.Context, params *route53recoverycontrolconfig.ListControlPanelsInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListControlPanelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListControlPanels")
	}

	var r0 *route53recoverycontrolconfig.ListControlPanelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListControlPanelsInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListControlPanelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListControlPanelsInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.ListControlPanelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.ListControlPanelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.ListControlPanelsInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoutingControls provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoutingControls(ctx context.Context, params *route53recoverycontrolconfig.ListRoutingControlsInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListRoutingControlsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoutingControls")
	}

	var r0 *route53recoverycontrolconfig.ListRoutingControlsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListRoutingControlsInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListRoutingControlsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListRoutingControlsInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.ListRoutingControlsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.ListRoutingControlsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.ListRoutingControlsInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSafetyRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSafetyRules(ctx context.Context, params *route53recoverycontrolconfig.ListSafetyRulesInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListSafetyRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSafetyRules")
	}

	var r0 *route53recoverycontrolconfig.ListSafetyRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListSafetyRulesInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListSafetyRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListSafetyRulesInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.ListSafetyRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.ListSafetyRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.ListSafetyRulesInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *route53recoverycontrolconfig.ListTagsForResourceInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *route53recoverycontrolconfig.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListTagsForResourceInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.ListTagsForResourceInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.ListTagsForResourceInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() route53recoverycontrolconfig.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 route53recoverycontrolconfig.Options
	if rf, ok := ret.Get(0).(func() route53recoverycontrolconfig.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(route53recoverycontrolconfig.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *route53recoverycontrolconfig.TagResourceInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *route53recoverycontrolconfig.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.TagResourceInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.TagResourceInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.TagResourceInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *route53recoverycontrolconfig.UntagResourceInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *route53recoverycontrolconfig.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.UntagResourceInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.UntagResourceInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.UntagResourceInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateControlPanel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateControlPanel(ctx context.Context, params *route53recoverycontrolconfig.UpdateControlPanelInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.UpdateControlPanelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateControlPanel")
	}

	var r0 *route53recoverycontrolconfig.UpdateControlPanelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.UpdateControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.UpdateControlPanelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.UpdateControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.UpdateControlPanelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.UpdateControlPanelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.UpdateControlPanelInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoutingControl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoutingControl(ctx context.Context, params *route53recoverycontrolconfig.UpdateRoutingControlInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.UpdateRoutingControlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoutingControl")
	}

	var r0 *route53recoverycontrolconfig.UpdateRoutingControlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.UpdateRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.UpdateRoutingControlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.UpdateRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.UpdateRoutingControlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.UpdateRoutingControlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.UpdateRoutingControlInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSafetyRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSafetyRule(ctx context.Context, params *route53recoverycontrolconfig.UpdateSafetyRuleInput, optFns ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.UpdateSafetyRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSafetyRule")
	}

	var r0 *route53recoverycontrolconfig.UpdateSafetyRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.UpdateSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) (*route53recoverycontrolconfig.UpdateSafetyRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoverycontrolconfig.UpdateSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) *route53recoverycontrolconfig.UpdateSafetyRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoverycontrolconfig.UpdateSafetyRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoverycontrolconfig.UpdateSafetyRuleInput, ...func(*route53recoverycontrolconfig.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
