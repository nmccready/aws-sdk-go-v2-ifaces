// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	acm "github.com/aws/aws-sdk-go-v2/service/acm"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddTagsToCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTagsToCertificate(ctx context.Context, params *acm.AddTagsToCertificateInput, optFns ...func(*acm.Options)) (*acm.AddTagsToCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToCertificate")
	}

	var r0 *acm.AddTagsToCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.AddTagsToCertificateInput, ...func(*acm.Options)) (*acm.AddTagsToCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.AddTagsToCertificateInput, ...func(*acm.Options)) *acm.AddTagsToCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.AddTagsToCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.AddTagsToCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCertificate(ctx context.Context, params *acm.DeleteCertificateInput, optFns ...func(*acm.Options)) (*acm.DeleteCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 *acm.DeleteCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.DeleteCertificateInput, ...func(*acm.Options)) (*acm.DeleteCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.DeleteCertificateInput, ...func(*acm.Options)) *acm.DeleteCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.DeleteCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.DeleteCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificate(ctx context.Context, params *acm.DescribeCertificateInput, optFns ...func(*acm.Options)) (*acm.DescribeCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificate")
	}

	var r0 *acm.DescribeCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.DescribeCertificateInput, ...func(*acm.Options)) (*acm.DescribeCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.DescribeCertificateInput, ...func(*acm.Options)) *acm.DescribeCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.DescribeCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.DescribeCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportCertificate(ctx context.Context, params *acm.ExportCertificateInput, optFns ...func(*acm.Options)) (*acm.ExportCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportCertificate")
	}

	var r0 *acm.ExportCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ExportCertificateInput, ...func(*acm.Options)) (*acm.ExportCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ExportCertificateInput, ...func(*acm.Options)) *acm.ExportCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.ExportCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.ExportCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountConfiguration(ctx context.Context, params *acm.GetAccountConfigurationInput, optFns ...func(*acm.Options)) (*acm.GetAccountConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountConfiguration")
	}

	var r0 *acm.GetAccountConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.GetAccountConfigurationInput, ...func(*acm.Options)) (*acm.GetAccountConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.GetAccountConfigurationInput, ...func(*acm.Options)) *acm.GetAccountConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.GetAccountConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.GetAccountConfigurationInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCertificate(ctx context.Context, params *acm.GetCertificateInput, optFns ...func(*acm.Options)) (*acm.GetCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCertificate")
	}

	var r0 *acm.GetCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.GetCertificateInput, ...func(*acm.Options)) (*acm.GetCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.GetCertificateInput, ...func(*acm.Options)) *acm.GetCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.GetCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.GetCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportCertificate(ctx context.Context, params *acm.ImportCertificateInput, optFns ...func(*acm.Options)) (*acm.ImportCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportCertificate")
	}

	var r0 *acm.ImportCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ImportCertificateInput, ...func(*acm.Options)) (*acm.ImportCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ImportCertificateInput, ...func(*acm.Options)) *acm.ImportCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.ImportCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.ImportCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCertificates(ctx context.Context, params *acm.ListCertificatesInput, optFns ...func(*acm.Options)) (*acm.ListCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCertificates")
	}

	var r0 *acm.ListCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ListCertificatesInput, ...func(*acm.Options)) (*acm.ListCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ListCertificatesInput, ...func(*acm.Options)) *acm.ListCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.ListCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.ListCertificatesInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForCertificate(ctx context.Context, params *acm.ListTagsForCertificateInput, optFns ...func(*acm.Options)) (*acm.ListTagsForCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForCertificate")
	}

	var r0 *acm.ListTagsForCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ListTagsForCertificateInput, ...func(*acm.Options)) (*acm.ListTagsForCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ListTagsForCertificateInput, ...func(*acm.Options)) *acm.ListTagsForCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.ListTagsForCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.ListTagsForCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() acm.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 acm.Options
	if rf, ok := ret.Get(0).(func() acm.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(acm.Options)
	}

	return r0
}

// PutAccountConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccountConfiguration(ctx context.Context, params *acm.PutAccountConfigurationInput, optFns ...func(*acm.Options)) (*acm.PutAccountConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccountConfiguration")
	}

	var r0 *acm.PutAccountConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.PutAccountConfigurationInput, ...func(*acm.Options)) (*acm.PutAccountConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.PutAccountConfigurationInput, ...func(*acm.Options)) *acm.PutAccountConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.PutAccountConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.PutAccountConfigurationInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTagsFromCertificate(ctx context.Context, params *acm.RemoveTagsFromCertificateInput, optFns ...func(*acm.Options)) (*acm.RemoveTagsFromCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagsFromCertificate")
	}

	var r0 *acm.RemoveTagsFromCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.RemoveTagsFromCertificateInput, ...func(*acm.Options)) (*acm.RemoveTagsFromCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.RemoveTagsFromCertificateInput, ...func(*acm.Options)) *acm.RemoveTagsFromCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.RemoveTagsFromCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.RemoveTagsFromCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenewCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RenewCertificate(ctx context.Context, params *acm.RenewCertificateInput, optFns ...func(*acm.Options)) (*acm.RenewCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RenewCertificate")
	}

	var r0 *acm.RenewCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.RenewCertificateInput, ...func(*acm.Options)) (*acm.RenewCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.RenewCertificateInput, ...func(*acm.Options)) *acm.RenewCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.RenewCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.RenewCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RequestCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RequestCertificate(ctx context.Context, params *acm.RequestCertificateInput, optFns ...func(*acm.Options)) (*acm.RequestCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RequestCertificate")
	}

	var r0 *acm.RequestCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.RequestCertificateInput, ...func(*acm.Options)) (*acm.RequestCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.RequestCertificateInput, ...func(*acm.Options)) *acm.RequestCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.RequestCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.RequestCertificateInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendValidationEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResendValidationEmail(ctx context.Context, params *acm.ResendValidationEmailInput, optFns ...func(*acm.Options)) (*acm.ResendValidationEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResendValidationEmail")
	}

	var r0 *acm.ResendValidationEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ResendValidationEmailInput, ...func(*acm.Options)) (*acm.ResendValidationEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.ResendValidationEmailInput, ...func(*acm.Options)) *acm.ResendValidationEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.ResendValidationEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.ResendValidationEmailInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCertificateOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCertificateOptions(ctx context.Context, params *acm.UpdateCertificateOptionsInput, optFns ...func(*acm.Options)) (*acm.UpdateCertificateOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCertificateOptions")
	}

	var r0 *acm.UpdateCertificateOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *acm.UpdateCertificateOptionsInput, ...func(*acm.Options)) (*acm.UpdateCertificateOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *acm.UpdateCertificateOptionsInput, ...func(*acm.Options)) *acm.UpdateCertificateOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*acm.UpdateCertificateOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *acm.UpdateCertificateOptionsInput, ...func(*acm.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
