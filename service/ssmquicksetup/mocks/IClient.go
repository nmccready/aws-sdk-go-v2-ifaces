// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	ssmquicksetup "github.com/aws/aws-sdk-go-v2/service/ssmquicksetup"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateConfigurationManager provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfigurationManager(ctx context.Context, params *ssmquicksetup.CreateConfigurationManagerInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.CreateConfigurationManagerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfigurationManager")
	}

	var r0 *ssmquicksetup.CreateConfigurationManagerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.CreateConfigurationManagerInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.CreateConfigurationManagerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.CreateConfigurationManagerInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.CreateConfigurationManagerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.CreateConfigurationManagerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.CreateConfigurationManagerInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfigurationManager provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfigurationManager(ctx context.Context, params *ssmquicksetup.DeleteConfigurationManagerInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.DeleteConfigurationManagerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfigurationManager")
	}

	var r0 *ssmquicksetup.DeleteConfigurationManagerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.DeleteConfigurationManagerInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.DeleteConfigurationManagerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.DeleteConfigurationManagerInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.DeleteConfigurationManagerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.DeleteConfigurationManagerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.DeleteConfigurationManagerInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfiguration(ctx context.Context, params *ssmquicksetup.GetConfigurationInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.GetConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfiguration")
	}

	var r0 *ssmquicksetup.GetConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.GetConfigurationInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.GetConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.GetConfigurationInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.GetConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.GetConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.GetConfigurationInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfigurationManager provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfigurationManager(ctx context.Context, params *ssmquicksetup.GetConfigurationManagerInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.GetConfigurationManagerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfigurationManager")
	}

	var r0 *ssmquicksetup.GetConfigurationManagerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.GetConfigurationManagerInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.GetConfigurationManagerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.GetConfigurationManagerInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.GetConfigurationManagerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.GetConfigurationManagerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.GetConfigurationManagerInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceSettings(ctx context.Context, params *ssmquicksetup.GetServiceSettingsInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.GetServiceSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceSettings")
	}

	var r0 *ssmquicksetup.GetServiceSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.GetServiceSettingsInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.GetServiceSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.GetServiceSettingsInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.GetServiceSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.GetServiceSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.GetServiceSettingsInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurationManagers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurationManagers(ctx context.Context, params *ssmquicksetup.ListConfigurationManagersInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.ListConfigurationManagersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurationManagers")
	}

	var r0 *ssmquicksetup.ListConfigurationManagersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.ListConfigurationManagersInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.ListConfigurationManagersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.ListConfigurationManagersInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.ListConfigurationManagersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.ListConfigurationManagersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.ListConfigurationManagersInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigurations(ctx context.Context, params *ssmquicksetup.ListConfigurationsInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.ListConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigurations")
	}

	var r0 *ssmquicksetup.ListConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.ListConfigurationsInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.ListConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.ListConfigurationsInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.ListConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.ListConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.ListConfigurationsInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQuickSetupTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQuickSetupTypes(ctx context.Context, params *ssmquicksetup.ListQuickSetupTypesInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.ListQuickSetupTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQuickSetupTypes")
	}

	var r0 *ssmquicksetup.ListQuickSetupTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.ListQuickSetupTypesInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.ListQuickSetupTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.ListQuickSetupTypesInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.ListQuickSetupTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.ListQuickSetupTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.ListQuickSetupTypesInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *ssmquicksetup.ListTagsForResourceInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *ssmquicksetup.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.ListTagsForResourceInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.ListTagsForResourceInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.ListTagsForResourceInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() ssmquicksetup.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 ssmquicksetup.Options
	if rf, ok := ret.Get(0).(func() ssmquicksetup.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ssmquicksetup.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *ssmquicksetup.TagResourceInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *ssmquicksetup.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.TagResourceInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.TagResourceInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.TagResourceInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *ssmquicksetup.UntagResourceInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *ssmquicksetup.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.UntagResourceInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.UntagResourceInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.UntagResourceInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationDefinition(ctx context.Context, params *ssmquicksetup.UpdateConfigurationDefinitionInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.UpdateConfigurationDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationDefinition")
	}

	var r0 *ssmquicksetup.UpdateConfigurationDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.UpdateConfigurationDefinitionInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.UpdateConfigurationDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.UpdateConfigurationDefinitionInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.UpdateConfigurationDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.UpdateConfigurationDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.UpdateConfigurationDefinitionInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfigurationManager provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfigurationManager(ctx context.Context, params *ssmquicksetup.UpdateConfigurationManagerInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.UpdateConfigurationManagerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfigurationManager")
	}

	var r0 *ssmquicksetup.UpdateConfigurationManagerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.UpdateConfigurationManagerInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.UpdateConfigurationManagerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.UpdateConfigurationManagerInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.UpdateConfigurationManagerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.UpdateConfigurationManagerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.UpdateConfigurationManagerInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceSettings(ctx context.Context, params *ssmquicksetup.UpdateServiceSettingsInput, optFns ...func(*ssmquicksetup.Options)) (*ssmquicksetup.UpdateServiceSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceSettings")
	}

	var r0 *ssmquicksetup.UpdateServiceSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.UpdateServiceSettingsInput, ...func(*ssmquicksetup.Options)) (*ssmquicksetup.UpdateServiceSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ssmquicksetup.UpdateServiceSettingsInput, ...func(*ssmquicksetup.Options)) *ssmquicksetup.UpdateServiceSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ssmquicksetup.UpdateServiceSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ssmquicksetup.UpdateServiceSettingsInput, ...func(*ssmquicksetup.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
