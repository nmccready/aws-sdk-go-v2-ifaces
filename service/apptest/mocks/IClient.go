// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	apptest "github.com/aws/aws-sdk-go-v2/service/apptest"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateTestCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTestCase(ctx context.Context, params *apptest.CreateTestCaseInput, optFns ...func(*apptest.Options)) (*apptest.CreateTestCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTestCase")
	}

	var r0 *apptest.CreateTestCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.CreateTestCaseInput, ...func(*apptest.Options)) (*apptest.CreateTestCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.CreateTestCaseInput, ...func(*apptest.Options)) *apptest.CreateTestCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.CreateTestCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.CreateTestCaseInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTestConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTestConfiguration(ctx context.Context, params *apptest.CreateTestConfigurationInput, optFns ...func(*apptest.Options)) (*apptest.CreateTestConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTestConfiguration")
	}

	var r0 *apptest.CreateTestConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.CreateTestConfigurationInput, ...func(*apptest.Options)) (*apptest.CreateTestConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.CreateTestConfigurationInput, ...func(*apptest.Options)) *apptest.CreateTestConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.CreateTestConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.CreateTestConfigurationInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTestSuite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTestSuite(ctx context.Context, params *apptest.CreateTestSuiteInput, optFns ...func(*apptest.Options)) (*apptest.CreateTestSuiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTestSuite")
	}

	var r0 *apptest.CreateTestSuiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.CreateTestSuiteInput, ...func(*apptest.Options)) (*apptest.CreateTestSuiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.CreateTestSuiteInput, ...func(*apptest.Options)) *apptest.CreateTestSuiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.CreateTestSuiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.CreateTestSuiteInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTestCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTestCase(ctx context.Context, params *apptest.DeleteTestCaseInput, optFns ...func(*apptest.Options)) (*apptest.DeleteTestCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTestCase")
	}

	var r0 *apptest.DeleteTestCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.DeleteTestCaseInput, ...func(*apptest.Options)) (*apptest.DeleteTestCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.DeleteTestCaseInput, ...func(*apptest.Options)) *apptest.DeleteTestCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.DeleteTestCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.DeleteTestCaseInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTestConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTestConfiguration(ctx context.Context, params *apptest.DeleteTestConfigurationInput, optFns ...func(*apptest.Options)) (*apptest.DeleteTestConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTestConfiguration")
	}

	var r0 *apptest.DeleteTestConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.DeleteTestConfigurationInput, ...func(*apptest.Options)) (*apptest.DeleteTestConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.DeleteTestConfigurationInput, ...func(*apptest.Options)) *apptest.DeleteTestConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.DeleteTestConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.DeleteTestConfigurationInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTestRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTestRun(ctx context.Context, params *apptest.DeleteTestRunInput, optFns ...func(*apptest.Options)) (*apptest.DeleteTestRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTestRun")
	}

	var r0 *apptest.DeleteTestRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.DeleteTestRunInput, ...func(*apptest.Options)) (*apptest.DeleteTestRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.DeleteTestRunInput, ...func(*apptest.Options)) *apptest.DeleteTestRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.DeleteTestRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.DeleteTestRunInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTestSuite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTestSuite(ctx context.Context, params *apptest.DeleteTestSuiteInput, optFns ...func(*apptest.Options)) (*apptest.DeleteTestSuiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTestSuite")
	}

	var r0 *apptest.DeleteTestSuiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.DeleteTestSuiteInput, ...func(*apptest.Options)) (*apptest.DeleteTestSuiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.DeleteTestSuiteInput, ...func(*apptest.Options)) *apptest.DeleteTestSuiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.DeleteTestSuiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.DeleteTestSuiteInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTestCase(ctx context.Context, params *apptest.GetTestCaseInput, optFns ...func(*apptest.Options)) (*apptest.GetTestCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTestCase")
	}

	var r0 *apptest.GetTestCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.GetTestCaseInput, ...func(*apptest.Options)) (*apptest.GetTestCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.GetTestCaseInput, ...func(*apptest.Options)) *apptest.GetTestCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.GetTestCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.GetTestCaseInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTestConfiguration(ctx context.Context, params *apptest.GetTestConfigurationInput, optFns ...func(*apptest.Options)) (*apptest.GetTestConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTestConfiguration")
	}

	var r0 *apptest.GetTestConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.GetTestConfigurationInput, ...func(*apptest.Options)) (*apptest.GetTestConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.GetTestConfigurationInput, ...func(*apptest.Options)) *apptest.GetTestConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.GetTestConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.GetTestConfigurationInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestRunStep provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTestRunStep(ctx context.Context, params *apptest.GetTestRunStepInput, optFns ...func(*apptest.Options)) (*apptest.GetTestRunStepOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTestRunStep")
	}

	var r0 *apptest.GetTestRunStepOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.GetTestRunStepInput, ...func(*apptest.Options)) (*apptest.GetTestRunStepOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.GetTestRunStepInput, ...func(*apptest.Options)) *apptest.GetTestRunStepOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.GetTestRunStepOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.GetTestRunStepInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestSuite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTestSuite(ctx context.Context, params *apptest.GetTestSuiteInput, optFns ...func(*apptest.Options)) (*apptest.GetTestSuiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTestSuite")
	}

	var r0 *apptest.GetTestSuiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.GetTestSuiteInput, ...func(*apptest.Options)) (*apptest.GetTestSuiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.GetTestSuiteInput, ...func(*apptest.Options)) *apptest.GetTestSuiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.GetTestSuiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.GetTestSuiteInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *apptest.ListTagsForResourceInput, optFns ...func(*apptest.Options)) (*apptest.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *apptest.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTagsForResourceInput, ...func(*apptest.Options)) (*apptest.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTagsForResourceInput, ...func(*apptest.Options)) *apptest.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.ListTagsForResourceInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestCases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestCases(ctx context.Context, params *apptest.ListTestCasesInput, optFns ...func(*apptest.Options)) (*apptest.ListTestCasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestCases")
	}

	var r0 *apptest.ListTestCasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestCasesInput, ...func(*apptest.Options)) (*apptest.ListTestCasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestCasesInput, ...func(*apptest.Options)) *apptest.ListTestCasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.ListTestCasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.ListTestCasesInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestConfigurations(ctx context.Context, params *apptest.ListTestConfigurationsInput, optFns ...func(*apptest.Options)) (*apptest.ListTestConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestConfigurations")
	}

	var r0 *apptest.ListTestConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestConfigurationsInput, ...func(*apptest.Options)) (*apptest.ListTestConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestConfigurationsInput, ...func(*apptest.Options)) *apptest.ListTestConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.ListTestConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.ListTestConfigurationsInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestRunSteps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestRunSteps(ctx context.Context, params *apptest.ListTestRunStepsInput, optFns ...func(*apptest.Options)) (*apptest.ListTestRunStepsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestRunSteps")
	}

	var r0 *apptest.ListTestRunStepsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestRunStepsInput, ...func(*apptest.Options)) (*apptest.ListTestRunStepsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestRunStepsInput, ...func(*apptest.Options)) *apptest.ListTestRunStepsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.ListTestRunStepsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.ListTestRunStepsInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestRunTestCases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestRunTestCases(ctx context.Context, params *apptest.ListTestRunTestCasesInput, optFns ...func(*apptest.Options)) (*apptest.ListTestRunTestCasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestRunTestCases")
	}

	var r0 *apptest.ListTestRunTestCasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestRunTestCasesInput, ...func(*apptest.Options)) (*apptest.ListTestRunTestCasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestRunTestCasesInput, ...func(*apptest.Options)) *apptest.ListTestRunTestCasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.ListTestRunTestCasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.ListTestRunTestCasesInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestRuns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestRuns(ctx context.Context, params *apptest.ListTestRunsInput, optFns ...func(*apptest.Options)) (*apptest.ListTestRunsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestRuns")
	}

	var r0 *apptest.ListTestRunsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestRunsInput, ...func(*apptest.Options)) (*apptest.ListTestRunsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestRunsInput, ...func(*apptest.Options)) *apptest.ListTestRunsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.ListTestRunsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.ListTestRunsInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTestSuites provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTestSuites(ctx context.Context, params *apptest.ListTestSuitesInput, optFns ...func(*apptest.Options)) (*apptest.ListTestSuitesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTestSuites")
	}

	var r0 *apptest.ListTestSuitesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestSuitesInput, ...func(*apptest.Options)) (*apptest.ListTestSuitesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.ListTestSuitesInput, ...func(*apptest.Options)) *apptest.ListTestSuitesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.ListTestSuitesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.ListTestSuitesInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() apptest.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 apptest.Options
	if rf, ok := ret.Get(0).(func() apptest.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(apptest.Options)
	}

	return r0
}

// StartTestRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartTestRun(ctx context.Context, params *apptest.StartTestRunInput, optFns ...func(*apptest.Options)) (*apptest.StartTestRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartTestRun")
	}

	var r0 *apptest.StartTestRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.StartTestRunInput, ...func(*apptest.Options)) (*apptest.StartTestRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.StartTestRunInput, ...func(*apptest.Options)) *apptest.StartTestRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.StartTestRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.StartTestRunInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *apptest.TagResourceInput, optFns ...func(*apptest.Options)) (*apptest.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *apptest.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.TagResourceInput, ...func(*apptest.Options)) (*apptest.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.TagResourceInput, ...func(*apptest.Options)) *apptest.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.TagResourceInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *apptest.UntagResourceInput, optFns ...func(*apptest.Options)) (*apptest.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *apptest.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.UntagResourceInput, ...func(*apptest.Options)) (*apptest.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.UntagResourceInput, ...func(*apptest.Options)) *apptest.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.UntagResourceInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTestCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTestCase(ctx context.Context, params *apptest.UpdateTestCaseInput, optFns ...func(*apptest.Options)) (*apptest.UpdateTestCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTestCase")
	}

	var r0 *apptest.UpdateTestCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.UpdateTestCaseInput, ...func(*apptest.Options)) (*apptest.UpdateTestCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.UpdateTestCaseInput, ...func(*apptest.Options)) *apptest.UpdateTestCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.UpdateTestCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.UpdateTestCaseInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTestConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTestConfiguration(ctx context.Context, params *apptest.UpdateTestConfigurationInput, optFns ...func(*apptest.Options)) (*apptest.UpdateTestConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTestConfiguration")
	}

	var r0 *apptest.UpdateTestConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.UpdateTestConfigurationInput, ...func(*apptest.Options)) (*apptest.UpdateTestConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.UpdateTestConfigurationInput, ...func(*apptest.Options)) *apptest.UpdateTestConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.UpdateTestConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.UpdateTestConfigurationInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTestSuite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTestSuite(ctx context.Context, params *apptest.UpdateTestSuiteInput, optFns ...func(*apptest.Options)) (*apptest.UpdateTestSuiteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTestSuite")
	}

	var r0 *apptest.UpdateTestSuiteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.UpdateTestSuiteInput, ...func(*apptest.Options)) (*apptest.UpdateTestSuiteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *apptest.UpdateTestSuiteInput, ...func(*apptest.Options)) *apptest.UpdateTestSuiteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*apptest.UpdateTestSuiteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *apptest.UpdateTestSuiteInput, ...func(*apptest.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
