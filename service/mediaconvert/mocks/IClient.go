// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mediaconvert "github.com/aws/aws-sdk-go-v2/service/mediaconvert"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateCertificate(ctx context.Context, params *mediaconvert.AssociateCertificateInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.AssociateCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateCertificate")
	}

	var r0 *mediaconvert.AssociateCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.AssociateCertificateInput, ...func(*mediaconvert.Options)) (*mediaconvert.AssociateCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.AssociateCertificateInput, ...func(*mediaconvert.Options)) *mediaconvert.AssociateCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.AssociateCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.AssociateCertificateInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelJob(ctx context.Context, params *mediaconvert.CancelJobInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.CancelJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelJob")
	}

	var r0 *mediaconvert.CancelJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CancelJobInput, ...func(*mediaconvert.Options)) (*mediaconvert.CancelJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CancelJobInput, ...func(*mediaconvert.Options)) *mediaconvert.CancelJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.CancelJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.CancelJobInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJob(ctx context.Context, params *mediaconvert.CreateJobInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.CreateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJob")
	}

	var r0 *mediaconvert.CreateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CreateJobInput, ...func(*mediaconvert.Options)) (*mediaconvert.CreateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CreateJobInput, ...func(*mediaconvert.Options)) *mediaconvert.CreateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.CreateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.CreateJobInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateJobTemplate(ctx context.Context, params *mediaconvert.CreateJobTemplateInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.CreateJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateJobTemplate")
	}

	var r0 *mediaconvert.CreateJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CreateJobTemplateInput, ...func(*mediaconvert.Options)) (*mediaconvert.CreateJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CreateJobTemplateInput, ...func(*mediaconvert.Options)) *mediaconvert.CreateJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.CreateJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.CreateJobTemplateInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePreset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePreset(ctx context.Context, params *mediaconvert.CreatePresetInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.CreatePresetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePreset")
	}

	var r0 *mediaconvert.CreatePresetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CreatePresetInput, ...func(*mediaconvert.Options)) (*mediaconvert.CreatePresetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CreatePresetInput, ...func(*mediaconvert.Options)) *mediaconvert.CreatePresetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.CreatePresetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.CreatePresetInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQueue(ctx context.Context, params *mediaconvert.CreateQueueInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.CreateQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueue")
	}

	var r0 *mediaconvert.CreateQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CreateQueueInput, ...func(*mediaconvert.Options)) (*mediaconvert.CreateQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.CreateQueueInput, ...func(*mediaconvert.Options)) *mediaconvert.CreateQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.CreateQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.CreateQueueInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteJobTemplate(ctx context.Context, params *mediaconvert.DeleteJobTemplateInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.DeleteJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteJobTemplate")
	}

	var r0 *mediaconvert.DeleteJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DeleteJobTemplateInput, ...func(*mediaconvert.Options)) (*mediaconvert.DeleteJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DeleteJobTemplateInput, ...func(*mediaconvert.Options)) *mediaconvert.DeleteJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.DeleteJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.DeleteJobTemplateInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePolicy(ctx context.Context, params *mediaconvert.DeletePolicyInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.DeletePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePolicy")
	}

	var r0 *mediaconvert.DeletePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DeletePolicyInput, ...func(*mediaconvert.Options)) (*mediaconvert.DeletePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DeletePolicyInput, ...func(*mediaconvert.Options)) *mediaconvert.DeletePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.DeletePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.DeletePolicyInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePreset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePreset(ctx context.Context, params *mediaconvert.DeletePresetInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.DeletePresetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePreset")
	}

	var r0 *mediaconvert.DeletePresetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DeletePresetInput, ...func(*mediaconvert.Options)) (*mediaconvert.DeletePresetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DeletePresetInput, ...func(*mediaconvert.Options)) *mediaconvert.DeletePresetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.DeletePresetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.DeletePresetInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQueue(ctx context.Context, params *mediaconvert.DeleteQueueInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.DeleteQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueue")
	}

	var r0 *mediaconvert.DeleteQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DeleteQueueInput, ...func(*mediaconvert.Options)) (*mediaconvert.DeleteQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DeleteQueueInput, ...func(*mediaconvert.Options)) *mediaconvert.DeleteQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.DeleteQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.DeleteQueueInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEndpoints(ctx context.Context, params *mediaconvert.DescribeEndpointsInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.DescribeEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEndpoints")
	}

	var r0 *mediaconvert.DescribeEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DescribeEndpointsInput, ...func(*mediaconvert.Options)) (*mediaconvert.DescribeEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DescribeEndpointsInput, ...func(*mediaconvert.Options)) *mediaconvert.DescribeEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.DescribeEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.DescribeEndpointsInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateCertificate(ctx context.Context, params *mediaconvert.DisassociateCertificateInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.DisassociateCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateCertificate")
	}

	var r0 *mediaconvert.DisassociateCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DisassociateCertificateInput, ...func(*mediaconvert.Options)) (*mediaconvert.DisassociateCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.DisassociateCertificateInput, ...func(*mediaconvert.Options)) *mediaconvert.DisassociateCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.DisassociateCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.DisassociateCertificateInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJob(ctx context.Context, params *mediaconvert.GetJobInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.GetJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJob")
	}

	var r0 *mediaconvert.GetJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetJobInput, ...func(*mediaconvert.Options)) (*mediaconvert.GetJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetJobInput, ...func(*mediaconvert.Options)) *mediaconvert.GetJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.GetJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.GetJobInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetJobTemplate(ctx context.Context, params *mediaconvert.GetJobTemplateInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.GetJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetJobTemplate")
	}

	var r0 *mediaconvert.GetJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetJobTemplateInput, ...func(*mediaconvert.Options)) (*mediaconvert.GetJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetJobTemplateInput, ...func(*mediaconvert.Options)) *mediaconvert.GetJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.GetJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.GetJobTemplateInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPolicy(ctx context.Context, params *mediaconvert.GetPolicyInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.GetPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *mediaconvert.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetPolicyInput, ...func(*mediaconvert.Options)) (*mediaconvert.GetPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetPolicyInput, ...func(*mediaconvert.Options)) *mediaconvert.GetPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.GetPolicyInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPreset(ctx context.Context, params *mediaconvert.GetPresetInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.GetPresetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPreset")
	}

	var r0 *mediaconvert.GetPresetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetPresetInput, ...func(*mediaconvert.Options)) (*mediaconvert.GetPresetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetPresetInput, ...func(*mediaconvert.Options)) *mediaconvert.GetPresetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.GetPresetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.GetPresetInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueue(ctx context.Context, params *mediaconvert.GetQueueInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.GetQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueue")
	}

	var r0 *mediaconvert.GetQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetQueueInput, ...func(*mediaconvert.Options)) (*mediaconvert.GetQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.GetQueueInput, ...func(*mediaconvert.Options)) *mediaconvert.GetQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.GetQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.GetQueueInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobTemplates(ctx context.Context, params *mediaconvert.ListJobTemplatesInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.ListJobTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobTemplates")
	}

	var r0 *mediaconvert.ListJobTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListJobTemplatesInput, ...func(*mediaconvert.Options)) (*mediaconvert.ListJobTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListJobTemplatesInput, ...func(*mediaconvert.Options)) *mediaconvert.ListJobTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.ListJobTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.ListJobTemplatesInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListJobs(ctx context.Context, params *mediaconvert.ListJobsInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.ListJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListJobs")
	}

	var r0 *mediaconvert.ListJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListJobsInput, ...func(*mediaconvert.Options)) (*mediaconvert.ListJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListJobsInput, ...func(*mediaconvert.Options)) *mediaconvert.ListJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.ListJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.ListJobsInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPresets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPresets(ctx context.Context, params *mediaconvert.ListPresetsInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.ListPresetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPresets")
	}

	var r0 *mediaconvert.ListPresetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListPresetsInput, ...func(*mediaconvert.Options)) (*mediaconvert.ListPresetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListPresetsInput, ...func(*mediaconvert.Options)) *mediaconvert.ListPresetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.ListPresetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.ListPresetsInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueues provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueues(ctx context.Context, params *mediaconvert.ListQueuesInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.ListQueuesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueues")
	}

	var r0 *mediaconvert.ListQueuesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListQueuesInput, ...func(*mediaconvert.Options)) (*mediaconvert.ListQueuesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListQueuesInput, ...func(*mediaconvert.Options)) *mediaconvert.ListQueuesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.ListQueuesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.ListQueuesInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *mediaconvert.ListTagsForResourceInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *mediaconvert.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListTagsForResourceInput, ...func(*mediaconvert.Options)) (*mediaconvert.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.ListTagsForResourceInput, ...func(*mediaconvert.Options)) *mediaconvert.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.ListTagsForResourceInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() mediaconvert.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 mediaconvert.Options
	if rf, ok := ret.Get(0).(func() mediaconvert.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mediaconvert.Options)
	}

	return r0
}

// PutPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutPolicy(ctx context.Context, params *mediaconvert.PutPolicyInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.PutPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutPolicy")
	}

	var r0 *mediaconvert.PutPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.PutPolicyInput, ...func(*mediaconvert.Options)) (*mediaconvert.PutPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.PutPolicyInput, ...func(*mediaconvert.Options)) *mediaconvert.PutPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.PutPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.PutPolicyInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchJobs(ctx context.Context, params *mediaconvert.SearchJobsInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.SearchJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchJobs")
	}

	var r0 *mediaconvert.SearchJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.SearchJobsInput, ...func(*mediaconvert.Options)) (*mediaconvert.SearchJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.SearchJobsInput, ...func(*mediaconvert.Options)) *mediaconvert.SearchJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.SearchJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.SearchJobsInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *mediaconvert.TagResourceInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *mediaconvert.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.TagResourceInput, ...func(*mediaconvert.Options)) (*mediaconvert.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.TagResourceInput, ...func(*mediaconvert.Options)) *mediaconvert.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.TagResourceInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *mediaconvert.UntagResourceInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *mediaconvert.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.UntagResourceInput, ...func(*mediaconvert.Options)) (*mediaconvert.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.UntagResourceInput, ...func(*mediaconvert.Options)) *mediaconvert.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.UntagResourceInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateJobTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateJobTemplate(ctx context.Context, params *mediaconvert.UpdateJobTemplateInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.UpdateJobTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateJobTemplate")
	}

	var r0 *mediaconvert.UpdateJobTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.UpdateJobTemplateInput, ...func(*mediaconvert.Options)) (*mediaconvert.UpdateJobTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.UpdateJobTemplateInput, ...func(*mediaconvert.Options)) *mediaconvert.UpdateJobTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.UpdateJobTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.UpdateJobTemplateInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePreset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePreset(ctx context.Context, params *mediaconvert.UpdatePresetInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.UpdatePresetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePreset")
	}

	var r0 *mediaconvert.UpdatePresetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.UpdatePresetInput, ...func(*mediaconvert.Options)) (*mediaconvert.UpdatePresetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.UpdatePresetInput, ...func(*mediaconvert.Options)) *mediaconvert.UpdatePresetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.UpdatePresetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.UpdatePresetInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateQueue provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateQueue(ctx context.Context, params *mediaconvert.UpdateQueueInput, optFns ...func(*mediaconvert.Options)) (*mediaconvert.UpdateQueueOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateQueue")
	}

	var r0 *mediaconvert.UpdateQueueOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.UpdateQueueInput, ...func(*mediaconvert.Options)) (*mediaconvert.UpdateQueueOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediaconvert.UpdateQueueInput, ...func(*mediaconvert.Options)) *mediaconvert.UpdateQueueOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediaconvert.UpdateQueueOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediaconvert.UpdateQueueInput, ...func(*mediaconvert.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
