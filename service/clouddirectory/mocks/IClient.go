// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	clouddirectory "github.com/aws/aws-sdk-go-v2/service/clouddirectory"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddFacetToObject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddFacetToObject(ctx context.Context, params *clouddirectory.AddFacetToObjectInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.AddFacetToObjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddFacetToObject")
	}

	var r0 *clouddirectory.AddFacetToObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AddFacetToObjectInput, ...func(*clouddirectory.Options)) (*clouddirectory.AddFacetToObjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AddFacetToObjectInput, ...func(*clouddirectory.Options)) *clouddirectory.AddFacetToObjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.AddFacetToObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.AddFacetToObjectInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplySchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ApplySchema(ctx context.Context, params *clouddirectory.ApplySchemaInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ApplySchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplySchema")
	}

	var r0 *clouddirectory.ApplySchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ApplySchemaInput, ...func(*clouddirectory.Options)) (*clouddirectory.ApplySchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ApplySchemaInput, ...func(*clouddirectory.Options)) *clouddirectory.ApplySchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ApplySchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ApplySchemaInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachObject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachObject(ctx context.Context, params *clouddirectory.AttachObjectInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.AttachObjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachObject")
	}

	var r0 *clouddirectory.AttachObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AttachObjectInput, ...func(*clouddirectory.Options)) (*clouddirectory.AttachObjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AttachObjectInput, ...func(*clouddirectory.Options)) *clouddirectory.AttachObjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.AttachObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.AttachObjectInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachPolicy(ctx context.Context, params *clouddirectory.AttachPolicyInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.AttachPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachPolicy")
	}

	var r0 *clouddirectory.AttachPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AttachPolicyInput, ...func(*clouddirectory.Options)) (*clouddirectory.AttachPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AttachPolicyInput, ...func(*clouddirectory.Options)) *clouddirectory.AttachPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.AttachPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.AttachPolicyInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachToIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachToIndex(ctx context.Context, params *clouddirectory.AttachToIndexInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.AttachToIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachToIndex")
	}

	var r0 *clouddirectory.AttachToIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AttachToIndexInput, ...func(*clouddirectory.Options)) (*clouddirectory.AttachToIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AttachToIndexInput, ...func(*clouddirectory.Options)) *clouddirectory.AttachToIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.AttachToIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.AttachToIndexInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachTypedLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachTypedLink(ctx context.Context, params *clouddirectory.AttachTypedLinkInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.AttachTypedLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachTypedLink")
	}

	var r0 *clouddirectory.AttachTypedLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AttachTypedLinkInput, ...func(*clouddirectory.Options)) (*clouddirectory.AttachTypedLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.AttachTypedLinkInput, ...func(*clouddirectory.Options)) *clouddirectory.AttachTypedLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.AttachTypedLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.AttachTypedLinkInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchRead provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchRead(ctx context.Context, params *clouddirectory.BatchReadInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.BatchReadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchRead")
	}

	var r0 *clouddirectory.BatchReadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.BatchReadInput, ...func(*clouddirectory.Options)) (*clouddirectory.BatchReadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.BatchReadInput, ...func(*clouddirectory.Options)) *clouddirectory.BatchReadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.BatchReadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.BatchReadInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchWrite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchWrite(ctx context.Context, params *clouddirectory.BatchWriteInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.BatchWriteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchWrite")
	}

	var r0 *clouddirectory.BatchWriteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.BatchWriteInput, ...func(*clouddirectory.Options)) (*clouddirectory.BatchWriteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.BatchWriteInput, ...func(*clouddirectory.Options)) *clouddirectory.BatchWriteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.BatchWriteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.BatchWriteInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDirectory(ctx context.Context, params *clouddirectory.CreateDirectoryInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.CreateDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectory")
	}

	var r0 *clouddirectory.CreateDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateDirectoryInput, ...func(*clouddirectory.Options)) (*clouddirectory.CreateDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateDirectoryInput, ...func(*clouddirectory.Options)) *clouddirectory.CreateDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.CreateDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.CreateDirectoryInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFacet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFacet(ctx context.Context, params *clouddirectory.CreateFacetInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.CreateFacetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFacet")
	}

	var r0 *clouddirectory.CreateFacetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateFacetInput, ...func(*clouddirectory.Options)) (*clouddirectory.CreateFacetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateFacetInput, ...func(*clouddirectory.Options)) *clouddirectory.CreateFacetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.CreateFacetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.CreateFacetInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIndex(ctx context.Context, params *clouddirectory.CreateIndexInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.CreateIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 *clouddirectory.CreateIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateIndexInput, ...func(*clouddirectory.Options)) (*clouddirectory.CreateIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateIndexInput, ...func(*clouddirectory.Options)) *clouddirectory.CreateIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.CreateIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.CreateIndexInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateObject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateObject(ctx context.Context, params *clouddirectory.CreateObjectInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.CreateObjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateObject")
	}

	var r0 *clouddirectory.CreateObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateObjectInput, ...func(*clouddirectory.Options)) (*clouddirectory.CreateObjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateObjectInput, ...func(*clouddirectory.Options)) *clouddirectory.CreateObjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.CreateObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.CreateObjectInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSchema(ctx context.Context, params *clouddirectory.CreateSchemaInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.CreateSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSchema")
	}

	var r0 *clouddirectory.CreateSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateSchemaInput, ...func(*clouddirectory.Options)) (*clouddirectory.CreateSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateSchemaInput, ...func(*clouddirectory.Options)) *clouddirectory.CreateSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.CreateSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.CreateSchemaInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTypedLinkFacet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTypedLinkFacet(ctx context.Context, params *clouddirectory.CreateTypedLinkFacetInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.CreateTypedLinkFacetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTypedLinkFacet")
	}

	var r0 *clouddirectory.CreateTypedLinkFacetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateTypedLinkFacetInput, ...func(*clouddirectory.Options)) (*clouddirectory.CreateTypedLinkFacetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.CreateTypedLinkFacetInput, ...func(*clouddirectory.Options)) *clouddirectory.CreateTypedLinkFacetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.CreateTypedLinkFacetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.CreateTypedLinkFacetInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDirectory(ctx context.Context, params *clouddirectory.DeleteDirectoryInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DeleteDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDirectory")
	}

	var r0 *clouddirectory.DeleteDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteDirectoryInput, ...func(*clouddirectory.Options)) (*clouddirectory.DeleteDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteDirectoryInput, ...func(*clouddirectory.Options)) *clouddirectory.DeleteDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DeleteDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DeleteDirectoryInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFacet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFacet(ctx context.Context, params *clouddirectory.DeleteFacetInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DeleteFacetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFacet")
	}

	var r0 *clouddirectory.DeleteFacetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteFacetInput, ...func(*clouddirectory.Options)) (*clouddirectory.DeleteFacetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteFacetInput, ...func(*clouddirectory.Options)) *clouddirectory.DeleteFacetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DeleteFacetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DeleteFacetInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteObject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteObject(ctx context.Context, params *clouddirectory.DeleteObjectInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DeleteObjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteObject")
	}

	var r0 *clouddirectory.DeleteObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteObjectInput, ...func(*clouddirectory.Options)) (*clouddirectory.DeleteObjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteObjectInput, ...func(*clouddirectory.Options)) *clouddirectory.DeleteObjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DeleteObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DeleteObjectInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSchema(ctx context.Context, params *clouddirectory.DeleteSchemaInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DeleteSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSchema")
	}

	var r0 *clouddirectory.DeleteSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteSchemaInput, ...func(*clouddirectory.Options)) (*clouddirectory.DeleteSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteSchemaInput, ...func(*clouddirectory.Options)) *clouddirectory.DeleteSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DeleteSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DeleteSchemaInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTypedLinkFacet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTypedLinkFacet(ctx context.Context, params *clouddirectory.DeleteTypedLinkFacetInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DeleteTypedLinkFacetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTypedLinkFacet")
	}

	var r0 *clouddirectory.DeleteTypedLinkFacetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteTypedLinkFacetInput, ...func(*clouddirectory.Options)) (*clouddirectory.DeleteTypedLinkFacetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DeleteTypedLinkFacetInput, ...func(*clouddirectory.Options)) *clouddirectory.DeleteTypedLinkFacetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DeleteTypedLinkFacetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DeleteTypedLinkFacetInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachFromIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachFromIndex(ctx context.Context, params *clouddirectory.DetachFromIndexInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DetachFromIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachFromIndex")
	}

	var r0 *clouddirectory.DetachFromIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DetachFromIndexInput, ...func(*clouddirectory.Options)) (*clouddirectory.DetachFromIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DetachFromIndexInput, ...func(*clouddirectory.Options)) *clouddirectory.DetachFromIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DetachFromIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DetachFromIndexInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachObject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachObject(ctx context.Context, params *clouddirectory.DetachObjectInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DetachObjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachObject")
	}

	var r0 *clouddirectory.DetachObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DetachObjectInput, ...func(*clouddirectory.Options)) (*clouddirectory.DetachObjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DetachObjectInput, ...func(*clouddirectory.Options)) *clouddirectory.DetachObjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DetachObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DetachObjectInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachPolicy(ctx context.Context, params *clouddirectory.DetachPolicyInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DetachPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachPolicy")
	}

	var r0 *clouddirectory.DetachPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DetachPolicyInput, ...func(*clouddirectory.Options)) (*clouddirectory.DetachPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DetachPolicyInput, ...func(*clouddirectory.Options)) *clouddirectory.DetachPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DetachPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DetachPolicyInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachTypedLink provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachTypedLink(ctx context.Context, params *clouddirectory.DetachTypedLinkInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DetachTypedLinkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachTypedLink")
	}

	var r0 *clouddirectory.DetachTypedLinkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DetachTypedLinkInput, ...func(*clouddirectory.Options)) (*clouddirectory.DetachTypedLinkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DetachTypedLinkInput, ...func(*clouddirectory.Options)) *clouddirectory.DetachTypedLinkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DetachTypedLinkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DetachTypedLinkInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableDirectory(ctx context.Context, params *clouddirectory.DisableDirectoryInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.DisableDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableDirectory")
	}

	var r0 *clouddirectory.DisableDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DisableDirectoryInput, ...func(*clouddirectory.Options)) (*clouddirectory.DisableDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.DisableDirectoryInput, ...func(*clouddirectory.Options)) *clouddirectory.DisableDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.DisableDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.DisableDirectoryInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableDirectory(ctx context.Context, params *clouddirectory.EnableDirectoryInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.EnableDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableDirectory")
	}

	var r0 *clouddirectory.EnableDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.EnableDirectoryInput, ...func(*clouddirectory.Options)) (*clouddirectory.EnableDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.EnableDirectoryInput, ...func(*clouddirectory.Options)) *clouddirectory.EnableDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.EnableDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.EnableDirectoryInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppliedSchemaVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAppliedSchemaVersion(ctx context.Context, params *clouddirectory.GetAppliedSchemaVersionInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.GetAppliedSchemaVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAppliedSchemaVersion")
	}

	var r0 *clouddirectory.GetAppliedSchemaVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetAppliedSchemaVersionInput, ...func(*clouddirectory.Options)) (*clouddirectory.GetAppliedSchemaVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetAppliedSchemaVersionInput, ...func(*clouddirectory.Options)) *clouddirectory.GetAppliedSchemaVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.GetAppliedSchemaVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.GetAppliedSchemaVersionInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDirectory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDirectory(ctx context.Context, params *clouddirectory.GetDirectoryInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.GetDirectoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDirectory")
	}

	var r0 *clouddirectory.GetDirectoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetDirectoryInput, ...func(*clouddirectory.Options)) (*clouddirectory.GetDirectoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetDirectoryInput, ...func(*clouddirectory.Options)) *clouddirectory.GetDirectoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.GetDirectoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.GetDirectoryInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFacet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFacet(ctx context.Context, params *clouddirectory.GetFacetInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.GetFacetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFacet")
	}

	var r0 *clouddirectory.GetFacetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetFacetInput, ...func(*clouddirectory.Options)) (*clouddirectory.GetFacetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetFacetInput, ...func(*clouddirectory.Options)) *clouddirectory.GetFacetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.GetFacetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.GetFacetInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLinkAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLinkAttributes(ctx context.Context, params *clouddirectory.GetLinkAttributesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.GetLinkAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLinkAttributes")
	}

	var r0 *clouddirectory.GetLinkAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetLinkAttributesInput, ...func(*clouddirectory.Options)) (*clouddirectory.GetLinkAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetLinkAttributesInput, ...func(*clouddirectory.Options)) *clouddirectory.GetLinkAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.GetLinkAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.GetLinkAttributesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetObjectAttributes(ctx context.Context, params *clouddirectory.GetObjectAttributesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.GetObjectAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectAttributes")
	}

	var r0 *clouddirectory.GetObjectAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetObjectAttributesInput, ...func(*clouddirectory.Options)) (*clouddirectory.GetObjectAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetObjectAttributesInput, ...func(*clouddirectory.Options)) *clouddirectory.GetObjectAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.GetObjectAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.GetObjectAttributesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetObjectInformation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetObjectInformation(ctx context.Context, params *clouddirectory.GetObjectInformationInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.GetObjectInformationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetObjectInformation")
	}

	var r0 *clouddirectory.GetObjectInformationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetObjectInformationInput, ...func(*clouddirectory.Options)) (*clouddirectory.GetObjectInformationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetObjectInformationInput, ...func(*clouddirectory.Options)) *clouddirectory.GetObjectInformationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.GetObjectInformationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.GetObjectInformationInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSchemaAsJson provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSchemaAsJson(ctx context.Context, params *clouddirectory.GetSchemaAsJsonInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.GetSchemaAsJsonOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSchemaAsJson")
	}

	var r0 *clouddirectory.GetSchemaAsJsonOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetSchemaAsJsonInput, ...func(*clouddirectory.Options)) (*clouddirectory.GetSchemaAsJsonOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetSchemaAsJsonInput, ...func(*clouddirectory.Options)) *clouddirectory.GetSchemaAsJsonOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.GetSchemaAsJsonOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.GetSchemaAsJsonInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTypedLinkFacetInformation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTypedLinkFacetInformation(ctx context.Context, params *clouddirectory.GetTypedLinkFacetInformationInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.GetTypedLinkFacetInformationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTypedLinkFacetInformation")
	}

	var r0 *clouddirectory.GetTypedLinkFacetInformationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetTypedLinkFacetInformationInput, ...func(*clouddirectory.Options)) (*clouddirectory.GetTypedLinkFacetInformationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.GetTypedLinkFacetInformationInput, ...func(*clouddirectory.Options)) *clouddirectory.GetTypedLinkFacetInformationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.GetTypedLinkFacetInformationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.GetTypedLinkFacetInformationInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppliedSchemaArns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppliedSchemaArns(ctx context.Context, params *clouddirectory.ListAppliedSchemaArnsInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListAppliedSchemaArnsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppliedSchemaArns")
	}

	var r0 *clouddirectory.ListAppliedSchemaArnsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListAppliedSchemaArnsInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListAppliedSchemaArnsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListAppliedSchemaArnsInput, ...func(*clouddirectory.Options)) *clouddirectory.ListAppliedSchemaArnsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListAppliedSchemaArnsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListAppliedSchemaArnsInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttachedIndices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttachedIndices(ctx context.Context, params *clouddirectory.ListAttachedIndicesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListAttachedIndicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttachedIndices")
	}

	var r0 *clouddirectory.ListAttachedIndicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListAttachedIndicesInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListAttachedIndicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListAttachedIndicesInput, ...func(*clouddirectory.Options)) *clouddirectory.ListAttachedIndicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListAttachedIndicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListAttachedIndicesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevelopmentSchemaArns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDevelopmentSchemaArns(ctx context.Context, params *clouddirectory.ListDevelopmentSchemaArnsInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDevelopmentSchemaArns")
	}

	var r0 *clouddirectory.ListDevelopmentSchemaArnsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListDevelopmentSchemaArnsInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListDevelopmentSchemaArnsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListDevelopmentSchemaArnsInput, ...func(*clouddirectory.Options)) *clouddirectory.ListDevelopmentSchemaArnsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListDevelopmentSchemaArnsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListDevelopmentSchemaArnsInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDirectories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDirectories(ctx context.Context, params *clouddirectory.ListDirectoriesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListDirectoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDirectories")
	}

	var r0 *clouddirectory.ListDirectoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListDirectoriesInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListDirectoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListDirectoriesInput, ...func(*clouddirectory.Options)) *clouddirectory.ListDirectoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListDirectoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListDirectoriesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFacetAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFacetAttributes(ctx context.Context, params *clouddirectory.ListFacetAttributesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListFacetAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFacetAttributes")
	}

	var r0 *clouddirectory.ListFacetAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListFacetAttributesInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListFacetAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListFacetAttributesInput, ...func(*clouddirectory.Options)) *clouddirectory.ListFacetAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListFacetAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListFacetAttributesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFacetNames provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFacetNames(ctx context.Context, params *clouddirectory.ListFacetNamesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListFacetNamesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFacetNames")
	}

	var r0 *clouddirectory.ListFacetNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListFacetNamesInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListFacetNamesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListFacetNamesInput, ...func(*clouddirectory.Options)) *clouddirectory.ListFacetNamesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListFacetNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListFacetNamesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIncomingTypedLinks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIncomingTypedLinks(ctx context.Context, params *clouddirectory.ListIncomingTypedLinksInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListIncomingTypedLinksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIncomingTypedLinks")
	}

	var r0 *clouddirectory.ListIncomingTypedLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListIncomingTypedLinksInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListIncomingTypedLinksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListIncomingTypedLinksInput, ...func(*clouddirectory.Options)) *clouddirectory.ListIncomingTypedLinksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListIncomingTypedLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListIncomingTypedLinksInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIndex(ctx context.Context, params *clouddirectory.ListIndexInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndex")
	}

	var r0 *clouddirectory.ListIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListIndexInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListIndexInput, ...func(*clouddirectory.Options)) *clouddirectory.ListIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListIndexInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListManagedSchemaArns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListManagedSchemaArns(ctx context.Context, params *clouddirectory.ListManagedSchemaArnsInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListManagedSchemaArnsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListManagedSchemaArns")
	}

	var r0 *clouddirectory.ListManagedSchemaArnsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListManagedSchemaArnsInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListManagedSchemaArnsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListManagedSchemaArnsInput, ...func(*clouddirectory.Options)) *clouddirectory.ListManagedSchemaArnsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListManagedSchemaArnsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListManagedSchemaArnsInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListObjectAttributes(ctx context.Context, params *clouddirectory.ListObjectAttributesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectAttributes")
	}

	var r0 *clouddirectory.ListObjectAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectAttributesInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectAttributesInput, ...func(*clouddirectory.Options)) *clouddirectory.ListObjectAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListObjectAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListObjectAttributesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectChildren provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListObjectChildren(ctx context.Context, params *clouddirectory.ListObjectChildrenInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectChildrenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectChildren")
	}

	var r0 *clouddirectory.ListObjectChildrenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectChildrenInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectChildrenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectChildrenInput, ...func(*clouddirectory.Options)) *clouddirectory.ListObjectChildrenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListObjectChildrenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListObjectChildrenInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectParentPaths provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListObjectParentPaths(ctx context.Context, params *clouddirectory.ListObjectParentPathsInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectParentPathsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectParentPaths")
	}

	var r0 *clouddirectory.ListObjectParentPathsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectParentPathsInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectParentPathsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectParentPathsInput, ...func(*clouddirectory.Options)) *clouddirectory.ListObjectParentPathsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListObjectParentPathsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListObjectParentPathsInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectParents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListObjectParents(ctx context.Context, params *clouddirectory.ListObjectParentsInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectParentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectParents")
	}

	var r0 *clouddirectory.ListObjectParentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectParentsInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectParentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectParentsInput, ...func(*clouddirectory.Options)) *clouddirectory.ListObjectParentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListObjectParentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListObjectParentsInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListObjectPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListObjectPolicies(ctx context.Context, params *clouddirectory.ListObjectPoliciesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListObjectPolicies")
	}

	var r0 *clouddirectory.ListObjectPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectPoliciesInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListObjectPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListObjectPoliciesInput, ...func(*clouddirectory.Options)) *clouddirectory.ListObjectPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListObjectPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListObjectPoliciesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOutgoingTypedLinks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOutgoingTypedLinks(ctx context.Context, params *clouddirectory.ListOutgoingTypedLinksInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListOutgoingTypedLinksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOutgoingTypedLinks")
	}

	var r0 *clouddirectory.ListOutgoingTypedLinksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListOutgoingTypedLinksInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListOutgoingTypedLinksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListOutgoingTypedLinksInput, ...func(*clouddirectory.Options)) *clouddirectory.ListOutgoingTypedLinksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListOutgoingTypedLinksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListOutgoingTypedLinksInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicyAttachments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPolicyAttachments(ctx context.Context, params *clouddirectory.ListPolicyAttachmentsInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListPolicyAttachmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicyAttachments")
	}

	var r0 *clouddirectory.ListPolicyAttachmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListPolicyAttachmentsInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListPolicyAttachmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListPolicyAttachmentsInput, ...func(*clouddirectory.Options)) *clouddirectory.ListPolicyAttachmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListPolicyAttachmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListPolicyAttachmentsInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPublishedSchemaArns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPublishedSchemaArns(ctx context.Context, params *clouddirectory.ListPublishedSchemaArnsInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListPublishedSchemaArnsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPublishedSchemaArns")
	}

	var r0 *clouddirectory.ListPublishedSchemaArnsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListPublishedSchemaArnsInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListPublishedSchemaArnsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListPublishedSchemaArnsInput, ...func(*clouddirectory.Options)) *clouddirectory.ListPublishedSchemaArnsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListPublishedSchemaArnsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListPublishedSchemaArnsInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *clouddirectory.ListTagsForResourceInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *clouddirectory.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListTagsForResourceInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListTagsForResourceInput, ...func(*clouddirectory.Options)) *clouddirectory.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListTagsForResourceInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTypedLinkFacetAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTypedLinkFacetAttributes(ctx context.Context, params *clouddirectory.ListTypedLinkFacetAttributesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTypedLinkFacetAttributes")
	}

	var r0 *clouddirectory.ListTypedLinkFacetAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListTypedLinkFacetAttributesInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListTypedLinkFacetAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListTypedLinkFacetAttributesInput, ...func(*clouddirectory.Options)) *clouddirectory.ListTypedLinkFacetAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListTypedLinkFacetAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListTypedLinkFacetAttributesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTypedLinkFacetNames provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTypedLinkFacetNames(ctx context.Context, params *clouddirectory.ListTypedLinkFacetNamesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.ListTypedLinkFacetNamesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTypedLinkFacetNames")
	}

	var r0 *clouddirectory.ListTypedLinkFacetNamesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListTypedLinkFacetNamesInput, ...func(*clouddirectory.Options)) (*clouddirectory.ListTypedLinkFacetNamesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.ListTypedLinkFacetNamesInput, ...func(*clouddirectory.Options)) *clouddirectory.ListTypedLinkFacetNamesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.ListTypedLinkFacetNamesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.ListTypedLinkFacetNamesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LookupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) LookupPolicy(ctx context.Context, params *clouddirectory.LookupPolicyInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.LookupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for LookupPolicy")
	}

	var r0 *clouddirectory.LookupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.LookupPolicyInput, ...func(*clouddirectory.Options)) (*clouddirectory.LookupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.LookupPolicyInput, ...func(*clouddirectory.Options)) *clouddirectory.LookupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.LookupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.LookupPolicyInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() clouddirectory.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 clouddirectory.Options
	if rf, ok := ret.Get(0).(func() clouddirectory.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(clouddirectory.Options)
	}

	return r0
}

// PublishSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PublishSchema(ctx context.Context, params *clouddirectory.PublishSchemaInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.PublishSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PublishSchema")
	}

	var r0 *clouddirectory.PublishSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.PublishSchemaInput, ...func(*clouddirectory.Options)) (*clouddirectory.PublishSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.PublishSchemaInput, ...func(*clouddirectory.Options)) *clouddirectory.PublishSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.PublishSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.PublishSchemaInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSchemaFromJson provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSchemaFromJson(ctx context.Context, params *clouddirectory.PutSchemaFromJsonInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.PutSchemaFromJsonOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSchemaFromJson")
	}

	var r0 *clouddirectory.PutSchemaFromJsonOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.PutSchemaFromJsonInput, ...func(*clouddirectory.Options)) (*clouddirectory.PutSchemaFromJsonOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.PutSchemaFromJsonInput, ...func(*clouddirectory.Options)) *clouddirectory.PutSchemaFromJsonOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.PutSchemaFromJsonOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.PutSchemaFromJsonInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFacetFromObject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveFacetFromObject(ctx context.Context, params *clouddirectory.RemoveFacetFromObjectInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.RemoveFacetFromObjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFacetFromObject")
	}

	var r0 *clouddirectory.RemoveFacetFromObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.RemoveFacetFromObjectInput, ...func(*clouddirectory.Options)) (*clouddirectory.RemoveFacetFromObjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.RemoveFacetFromObjectInput, ...func(*clouddirectory.Options)) *clouddirectory.RemoveFacetFromObjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.RemoveFacetFromObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.RemoveFacetFromObjectInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *clouddirectory.TagResourceInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *clouddirectory.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.TagResourceInput, ...func(*clouddirectory.Options)) (*clouddirectory.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.TagResourceInput, ...func(*clouddirectory.Options)) *clouddirectory.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.TagResourceInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *clouddirectory.UntagResourceInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *clouddirectory.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UntagResourceInput, ...func(*clouddirectory.Options)) (*clouddirectory.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UntagResourceInput, ...func(*clouddirectory.Options)) *clouddirectory.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.UntagResourceInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFacet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFacet(ctx context.Context, params *clouddirectory.UpdateFacetInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.UpdateFacetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFacet")
	}

	var r0 *clouddirectory.UpdateFacetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateFacetInput, ...func(*clouddirectory.Options)) (*clouddirectory.UpdateFacetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateFacetInput, ...func(*clouddirectory.Options)) *clouddirectory.UpdateFacetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.UpdateFacetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.UpdateFacetInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLinkAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLinkAttributes(ctx context.Context, params *clouddirectory.UpdateLinkAttributesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.UpdateLinkAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLinkAttributes")
	}

	var r0 *clouddirectory.UpdateLinkAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateLinkAttributesInput, ...func(*clouddirectory.Options)) (*clouddirectory.UpdateLinkAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateLinkAttributesInput, ...func(*clouddirectory.Options)) *clouddirectory.UpdateLinkAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.UpdateLinkAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.UpdateLinkAttributesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateObjectAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateObjectAttributes(ctx context.Context, params *clouddirectory.UpdateObjectAttributesInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.UpdateObjectAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateObjectAttributes")
	}

	var r0 *clouddirectory.UpdateObjectAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateObjectAttributesInput, ...func(*clouddirectory.Options)) (*clouddirectory.UpdateObjectAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateObjectAttributesInput, ...func(*clouddirectory.Options)) *clouddirectory.UpdateObjectAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.UpdateObjectAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.UpdateObjectAttributesInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSchema(ctx context.Context, params *clouddirectory.UpdateSchemaInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.UpdateSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSchema")
	}

	var r0 *clouddirectory.UpdateSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateSchemaInput, ...func(*clouddirectory.Options)) (*clouddirectory.UpdateSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateSchemaInput, ...func(*clouddirectory.Options)) *clouddirectory.UpdateSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.UpdateSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.UpdateSchemaInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTypedLinkFacet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTypedLinkFacet(ctx context.Context, params *clouddirectory.UpdateTypedLinkFacetInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.UpdateTypedLinkFacetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTypedLinkFacet")
	}

	var r0 *clouddirectory.UpdateTypedLinkFacetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateTypedLinkFacetInput, ...func(*clouddirectory.Options)) (*clouddirectory.UpdateTypedLinkFacetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpdateTypedLinkFacetInput, ...func(*clouddirectory.Options)) *clouddirectory.UpdateTypedLinkFacetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.UpdateTypedLinkFacetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.UpdateTypedLinkFacetInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradeAppliedSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpgradeAppliedSchema(ctx context.Context, params *clouddirectory.UpgradeAppliedSchemaInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.UpgradeAppliedSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpgradeAppliedSchema")
	}

	var r0 *clouddirectory.UpgradeAppliedSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpgradeAppliedSchemaInput, ...func(*clouddirectory.Options)) (*clouddirectory.UpgradeAppliedSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpgradeAppliedSchemaInput, ...func(*clouddirectory.Options)) *clouddirectory.UpgradeAppliedSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.UpgradeAppliedSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.UpgradeAppliedSchemaInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpgradePublishedSchema provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpgradePublishedSchema(ctx context.Context, params *clouddirectory.UpgradePublishedSchemaInput, optFns ...func(*clouddirectory.Options)) (*clouddirectory.UpgradePublishedSchemaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpgradePublishedSchema")
	}

	var r0 *clouddirectory.UpgradePublishedSchemaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpgradePublishedSchemaInput, ...func(*clouddirectory.Options)) (*clouddirectory.UpgradePublishedSchemaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *clouddirectory.UpgradePublishedSchemaInput, ...func(*clouddirectory.Options)) *clouddirectory.UpgradePublishedSchemaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*clouddirectory.UpgradePublishedSchemaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *clouddirectory.UpgradePublishedSchemaInput, ...func(*clouddirectory.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
