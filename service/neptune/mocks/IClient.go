// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	neptune "github.com/aws/aws-sdk-go-v2/service/neptune"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddRoleToDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddRoleToDBCluster(ctx context.Context, params *neptune.AddRoleToDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.AddRoleToDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddRoleToDBCluster")
	}

	var r0 *neptune.AddRoleToDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.AddRoleToDBClusterInput, ...func(*neptune.Options)) (*neptune.AddRoleToDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.AddRoleToDBClusterInput, ...func(*neptune.Options)) *neptune.AddRoleToDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.AddRoleToDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.AddRoleToDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddSourceIdentifierToSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddSourceIdentifierToSubscription(ctx context.Context, params *neptune.AddSourceIdentifierToSubscriptionInput, optFns ...func(*neptune.Options)) (*neptune.AddSourceIdentifierToSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddSourceIdentifierToSubscription")
	}

	var r0 *neptune.AddSourceIdentifierToSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.AddSourceIdentifierToSubscriptionInput, ...func(*neptune.Options)) (*neptune.AddSourceIdentifierToSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.AddSourceIdentifierToSubscriptionInput, ...func(*neptune.Options)) *neptune.AddSourceIdentifierToSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.AddSourceIdentifierToSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.AddSourceIdentifierToSubscriptionInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTagsToResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTagsToResource(ctx context.Context, params *neptune.AddTagsToResourceInput, optFns ...func(*neptune.Options)) (*neptune.AddTagsToResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToResource")
	}

	var r0 *neptune.AddTagsToResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.AddTagsToResourceInput, ...func(*neptune.Options)) (*neptune.AddTagsToResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.AddTagsToResourceInput, ...func(*neptune.Options)) *neptune.AddTagsToResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.AddTagsToResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.AddTagsToResourceInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyPendingMaintenanceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ApplyPendingMaintenanceAction(ctx context.Context, params *neptune.ApplyPendingMaintenanceActionInput, optFns ...func(*neptune.Options)) (*neptune.ApplyPendingMaintenanceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyPendingMaintenanceAction")
	}

	var r0 *neptune.ApplyPendingMaintenanceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ApplyPendingMaintenanceActionInput, ...func(*neptune.Options)) (*neptune.ApplyPendingMaintenanceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ApplyPendingMaintenanceActionInput, ...func(*neptune.Options)) *neptune.ApplyPendingMaintenanceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ApplyPendingMaintenanceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ApplyPendingMaintenanceActionInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBClusterParameterGroup(ctx context.Context, params *neptune.CopyDBClusterParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.CopyDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBClusterParameterGroup")
	}

	var r0 *neptune.CopyDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CopyDBClusterParameterGroupInput, ...func(*neptune.Options)) (*neptune.CopyDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CopyDBClusterParameterGroupInput, ...func(*neptune.Options)) *neptune.CopyDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CopyDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CopyDBClusterParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBClusterSnapshot(ctx context.Context, params *neptune.CopyDBClusterSnapshotInput, optFns ...func(*neptune.Options)) (*neptune.CopyDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBClusterSnapshot")
	}

	var r0 *neptune.CopyDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CopyDBClusterSnapshotInput, ...func(*neptune.Options)) (*neptune.CopyDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CopyDBClusterSnapshotInput, ...func(*neptune.Options)) *neptune.CopyDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CopyDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CopyDBClusterSnapshotInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyDBParameterGroup(ctx context.Context, params *neptune.CopyDBParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.CopyDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyDBParameterGroup")
	}

	var r0 *neptune.CopyDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CopyDBParameterGroupInput, ...func(*neptune.Options)) (*neptune.CopyDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CopyDBParameterGroupInput, ...func(*neptune.Options)) *neptune.CopyDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CopyDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CopyDBParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBCluster(ctx context.Context, params *neptune.CreateDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.CreateDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBCluster")
	}

	var r0 *neptune.CreateDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBClusterInput, ...func(*neptune.Options)) (*neptune.CreateDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBClusterInput, ...func(*neptune.Options)) *neptune.CreateDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBClusterEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBClusterEndpoint(ctx context.Context, params *neptune.CreateDBClusterEndpointInput, optFns ...func(*neptune.Options)) (*neptune.CreateDBClusterEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBClusterEndpoint")
	}

	var r0 *neptune.CreateDBClusterEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBClusterEndpointInput, ...func(*neptune.Options)) (*neptune.CreateDBClusterEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBClusterEndpointInput, ...func(*neptune.Options)) *neptune.CreateDBClusterEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateDBClusterEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateDBClusterEndpointInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBClusterParameterGroup(ctx context.Context, params *neptune.CreateDBClusterParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.CreateDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBClusterParameterGroup")
	}

	var r0 *neptune.CreateDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBClusterParameterGroupInput, ...func(*neptune.Options)) (*neptune.CreateDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBClusterParameterGroupInput, ...func(*neptune.Options)) *neptune.CreateDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateDBClusterParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBClusterSnapshot(ctx context.Context, params *neptune.CreateDBClusterSnapshotInput, optFns ...func(*neptune.Options)) (*neptune.CreateDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBClusterSnapshot")
	}

	var r0 *neptune.CreateDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBClusterSnapshotInput, ...func(*neptune.Options)) (*neptune.CreateDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBClusterSnapshotInput, ...func(*neptune.Options)) *neptune.CreateDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateDBClusterSnapshotInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBInstance(ctx context.Context, params *neptune.CreateDBInstanceInput, optFns ...func(*neptune.Options)) (*neptune.CreateDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBInstance")
	}

	var r0 *neptune.CreateDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBInstanceInput, ...func(*neptune.Options)) (*neptune.CreateDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBInstanceInput, ...func(*neptune.Options)) *neptune.CreateDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateDBInstanceInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBParameterGroup(ctx context.Context, params *neptune.CreateDBParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.CreateDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBParameterGroup")
	}

	var r0 *neptune.CreateDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBParameterGroupInput, ...func(*neptune.Options)) (*neptune.CreateDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBParameterGroupInput, ...func(*neptune.Options)) *neptune.CreateDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateDBParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDBSubnetGroup(ctx context.Context, params *neptune.CreateDBSubnetGroupInput, optFns ...func(*neptune.Options)) (*neptune.CreateDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDBSubnetGroup")
	}

	var r0 *neptune.CreateDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBSubnetGroupInput, ...func(*neptune.Options)) (*neptune.CreateDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateDBSubnetGroupInput, ...func(*neptune.Options)) *neptune.CreateDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateDBSubnetGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventSubscription(ctx context.Context, params *neptune.CreateEventSubscriptionInput, optFns ...func(*neptune.Options)) (*neptune.CreateEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventSubscription")
	}

	var r0 *neptune.CreateEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateEventSubscriptionInput, ...func(*neptune.Options)) (*neptune.CreateEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateEventSubscriptionInput, ...func(*neptune.Options)) *neptune.CreateEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateEventSubscriptionInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGlobalCluster(ctx context.Context, params *neptune.CreateGlobalClusterInput, optFns ...func(*neptune.Options)) (*neptune.CreateGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGlobalCluster")
	}

	var r0 *neptune.CreateGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateGlobalClusterInput, ...func(*neptune.Options)) (*neptune.CreateGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.CreateGlobalClusterInput, ...func(*neptune.Options)) *neptune.CreateGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.CreateGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.CreateGlobalClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBCluster(ctx context.Context, params *neptune.DeleteDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.DeleteDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBCluster")
	}

	var r0 *neptune.DeleteDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBClusterInput, ...func(*neptune.Options)) (*neptune.DeleteDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBClusterInput, ...func(*neptune.Options)) *neptune.DeleteDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterEndpoint(ctx context.Context, params *neptune.DeleteDBClusterEndpointInput, optFns ...func(*neptune.Options)) (*neptune.DeleteDBClusterEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterEndpoint")
	}

	var r0 *neptune.DeleteDBClusterEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBClusterEndpointInput, ...func(*neptune.Options)) (*neptune.DeleteDBClusterEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBClusterEndpointInput, ...func(*neptune.Options)) *neptune.DeleteDBClusterEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteDBClusterEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteDBClusterEndpointInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterParameterGroup(ctx context.Context, params *neptune.DeleteDBClusterParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.DeleteDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterParameterGroup")
	}

	var r0 *neptune.DeleteDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBClusterParameterGroupInput, ...func(*neptune.Options)) (*neptune.DeleteDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBClusterParameterGroupInput, ...func(*neptune.Options)) *neptune.DeleteDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteDBClusterParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBClusterSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBClusterSnapshot(ctx context.Context, params *neptune.DeleteDBClusterSnapshotInput, optFns ...func(*neptune.Options)) (*neptune.DeleteDBClusterSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBClusterSnapshot")
	}

	var r0 *neptune.DeleteDBClusterSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBClusterSnapshotInput, ...func(*neptune.Options)) (*neptune.DeleteDBClusterSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBClusterSnapshotInput, ...func(*neptune.Options)) *neptune.DeleteDBClusterSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteDBClusterSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteDBClusterSnapshotInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBInstance(ctx context.Context, params *neptune.DeleteDBInstanceInput, optFns ...func(*neptune.Options)) (*neptune.DeleteDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBInstance")
	}

	var r0 *neptune.DeleteDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBInstanceInput, ...func(*neptune.Options)) (*neptune.DeleteDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBInstanceInput, ...func(*neptune.Options)) *neptune.DeleteDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteDBInstanceInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBParameterGroup(ctx context.Context, params *neptune.DeleteDBParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.DeleteDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBParameterGroup")
	}

	var r0 *neptune.DeleteDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBParameterGroupInput, ...func(*neptune.Options)) (*neptune.DeleteDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBParameterGroupInput, ...func(*neptune.Options)) *neptune.DeleteDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteDBParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDBSubnetGroup(ctx context.Context, params *neptune.DeleteDBSubnetGroupInput, optFns ...func(*neptune.Options)) (*neptune.DeleteDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDBSubnetGroup")
	}

	var r0 *neptune.DeleteDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBSubnetGroupInput, ...func(*neptune.Options)) (*neptune.DeleteDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteDBSubnetGroupInput, ...func(*neptune.Options)) *neptune.DeleteDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteDBSubnetGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventSubscription(ctx context.Context, params *neptune.DeleteEventSubscriptionInput, optFns ...func(*neptune.Options)) (*neptune.DeleteEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventSubscription")
	}

	var r0 *neptune.DeleteEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteEventSubscriptionInput, ...func(*neptune.Options)) (*neptune.DeleteEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteEventSubscriptionInput, ...func(*neptune.Options)) *neptune.DeleteEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteEventSubscriptionInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGlobalCluster(ctx context.Context, params *neptune.DeleteGlobalClusterInput, optFns ...func(*neptune.Options)) (*neptune.DeleteGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGlobalCluster")
	}

	var r0 *neptune.DeleteGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteGlobalClusterInput, ...func(*neptune.Options)) (*neptune.DeleteGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DeleteGlobalClusterInput, ...func(*neptune.Options)) *neptune.DeleteGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DeleteGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DeleteGlobalClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterEndpoints(ctx context.Context, params *neptune.DescribeDBClusterEndpointsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBClusterEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterEndpoints")
	}

	var r0 *neptune.DescribeDBClusterEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterEndpointsInput, ...func(*neptune.Options)) (*neptune.DescribeDBClusterEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterEndpointsInput, ...func(*neptune.Options)) *neptune.DescribeDBClusterEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBClusterEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBClusterEndpointsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterParameterGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterParameterGroups(ctx context.Context, params *neptune.DescribeDBClusterParameterGroupsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBClusterParameterGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterParameterGroups")
	}

	var r0 *neptune.DescribeDBClusterParameterGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterParameterGroupsInput, ...func(*neptune.Options)) (*neptune.DescribeDBClusterParameterGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterParameterGroupsInput, ...func(*neptune.Options)) *neptune.DescribeDBClusterParameterGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBClusterParameterGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBClusterParameterGroupsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterParameters(ctx context.Context, params *neptune.DescribeDBClusterParametersInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBClusterParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterParameters")
	}

	var r0 *neptune.DescribeDBClusterParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterParametersInput, ...func(*neptune.Options)) (*neptune.DescribeDBClusterParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterParametersInput, ...func(*neptune.Options)) *neptune.DescribeDBClusterParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBClusterParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBClusterParametersInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterSnapshotAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterSnapshotAttributes(ctx context.Context, params *neptune.DescribeDBClusterSnapshotAttributesInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterSnapshotAttributes")
	}

	var r0 *neptune.DescribeDBClusterSnapshotAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterSnapshotAttributesInput, ...func(*neptune.Options)) (*neptune.DescribeDBClusterSnapshotAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterSnapshotAttributesInput, ...func(*neptune.Options)) *neptune.DescribeDBClusterSnapshotAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBClusterSnapshotAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBClusterSnapshotAttributesInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusterSnapshots provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusterSnapshots(ctx context.Context, params *neptune.DescribeDBClusterSnapshotsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBClusterSnapshotsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusterSnapshots")
	}

	var r0 *neptune.DescribeDBClusterSnapshotsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterSnapshotsInput, ...func(*neptune.Options)) (*neptune.DescribeDBClusterSnapshotsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClusterSnapshotsInput, ...func(*neptune.Options)) *neptune.DescribeDBClusterSnapshotsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBClusterSnapshotsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBClusterSnapshotsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBClusters(ctx context.Context, params *neptune.DescribeDBClustersInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBClusters")
	}

	var r0 *neptune.DescribeDBClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClustersInput, ...func(*neptune.Options)) (*neptune.DescribeDBClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBClustersInput, ...func(*neptune.Options)) *neptune.DescribeDBClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBClustersInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBEngineVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBEngineVersions(ctx context.Context, params *neptune.DescribeDBEngineVersionsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBEngineVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBEngineVersions")
	}

	var r0 *neptune.DescribeDBEngineVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBEngineVersionsInput, ...func(*neptune.Options)) (*neptune.DescribeDBEngineVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBEngineVersionsInput, ...func(*neptune.Options)) *neptune.DescribeDBEngineVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBEngineVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBEngineVersionsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBInstances(ctx context.Context, params *neptune.DescribeDBInstancesInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBInstances")
	}

	var r0 *neptune.DescribeDBInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBInstancesInput, ...func(*neptune.Options)) (*neptune.DescribeDBInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBInstancesInput, ...func(*neptune.Options)) *neptune.DescribeDBInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBInstancesInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBParameterGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBParameterGroups(ctx context.Context, params *neptune.DescribeDBParameterGroupsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBParameterGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBParameterGroups")
	}

	var r0 *neptune.DescribeDBParameterGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBParameterGroupsInput, ...func(*neptune.Options)) (*neptune.DescribeDBParameterGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBParameterGroupsInput, ...func(*neptune.Options)) *neptune.DescribeDBParameterGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBParameterGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBParameterGroupsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBParameters(ctx context.Context, params *neptune.DescribeDBParametersInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBParameters")
	}

	var r0 *neptune.DescribeDBParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBParametersInput, ...func(*neptune.Options)) (*neptune.DescribeDBParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBParametersInput, ...func(*neptune.Options)) *neptune.DescribeDBParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBParametersInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDBSubnetGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDBSubnetGroups(ctx context.Context, params *neptune.DescribeDBSubnetGroupsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeDBSubnetGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDBSubnetGroups")
	}

	var r0 *neptune.DescribeDBSubnetGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBSubnetGroupsInput, ...func(*neptune.Options)) (*neptune.DescribeDBSubnetGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeDBSubnetGroupsInput, ...func(*neptune.Options)) *neptune.DescribeDBSubnetGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeDBSubnetGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeDBSubnetGroupsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEngineDefaultClusterParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEngineDefaultClusterParameters(ctx context.Context, params *neptune.DescribeEngineDefaultClusterParametersInput, optFns ...func(*neptune.Options)) (*neptune.DescribeEngineDefaultClusterParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEngineDefaultClusterParameters")
	}

	var r0 *neptune.DescribeEngineDefaultClusterParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEngineDefaultClusterParametersInput, ...func(*neptune.Options)) (*neptune.DescribeEngineDefaultClusterParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEngineDefaultClusterParametersInput, ...func(*neptune.Options)) *neptune.DescribeEngineDefaultClusterParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeEngineDefaultClusterParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeEngineDefaultClusterParametersInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEngineDefaultParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEngineDefaultParameters(ctx context.Context, params *neptune.DescribeEngineDefaultParametersInput, optFns ...func(*neptune.Options)) (*neptune.DescribeEngineDefaultParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEngineDefaultParameters")
	}

	var r0 *neptune.DescribeEngineDefaultParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEngineDefaultParametersInput, ...func(*neptune.Options)) (*neptune.DescribeEngineDefaultParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEngineDefaultParametersInput, ...func(*neptune.Options)) *neptune.DescribeEngineDefaultParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeEngineDefaultParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeEngineDefaultParametersInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventCategories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventCategories(ctx context.Context, params *neptune.DescribeEventCategoriesInput, optFns ...func(*neptune.Options)) (*neptune.DescribeEventCategoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventCategories")
	}

	var r0 *neptune.DescribeEventCategoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEventCategoriesInput, ...func(*neptune.Options)) (*neptune.DescribeEventCategoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEventCategoriesInput, ...func(*neptune.Options)) *neptune.DescribeEventCategoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeEventCategoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeEventCategoriesInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventSubscriptions(ctx context.Context, params *neptune.DescribeEventSubscriptionsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeEventSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventSubscriptions")
	}

	var r0 *neptune.DescribeEventSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEventSubscriptionsInput, ...func(*neptune.Options)) (*neptune.DescribeEventSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEventSubscriptionsInput, ...func(*neptune.Options)) *neptune.DescribeEventSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeEventSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeEventSubscriptionsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEvents(ctx context.Context, params *neptune.DescribeEventsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEvents")
	}

	var r0 *neptune.DescribeEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEventsInput, ...func(*neptune.Options)) (*neptune.DescribeEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeEventsInput, ...func(*neptune.Options)) *neptune.DescribeEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeEventsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGlobalClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGlobalClusters(ctx context.Context, params *neptune.DescribeGlobalClustersInput, optFns ...func(*neptune.Options)) (*neptune.DescribeGlobalClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGlobalClusters")
	}

	var r0 *neptune.DescribeGlobalClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeGlobalClustersInput, ...func(*neptune.Options)) (*neptune.DescribeGlobalClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeGlobalClustersInput, ...func(*neptune.Options)) *neptune.DescribeGlobalClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeGlobalClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeGlobalClustersInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrderableDBInstanceOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrderableDBInstanceOptions(ctx context.Context, params *neptune.DescribeOrderableDBInstanceOptionsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrderableDBInstanceOptions")
	}

	var r0 *neptune.DescribeOrderableDBInstanceOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeOrderableDBInstanceOptionsInput, ...func(*neptune.Options)) (*neptune.DescribeOrderableDBInstanceOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeOrderableDBInstanceOptionsInput, ...func(*neptune.Options)) *neptune.DescribeOrderableDBInstanceOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeOrderableDBInstanceOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeOrderableDBInstanceOptionsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePendingMaintenanceActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePendingMaintenanceActions(ctx context.Context, params *neptune.DescribePendingMaintenanceActionsInput, optFns ...func(*neptune.Options)) (*neptune.DescribePendingMaintenanceActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePendingMaintenanceActions")
	}

	var r0 *neptune.DescribePendingMaintenanceActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribePendingMaintenanceActionsInput, ...func(*neptune.Options)) (*neptune.DescribePendingMaintenanceActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribePendingMaintenanceActionsInput, ...func(*neptune.Options)) *neptune.DescribePendingMaintenanceActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribePendingMaintenanceActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribePendingMaintenanceActionsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeValidDBInstanceModifications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeValidDBInstanceModifications(ctx context.Context, params *neptune.DescribeValidDBInstanceModificationsInput, optFns ...func(*neptune.Options)) (*neptune.DescribeValidDBInstanceModificationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeValidDBInstanceModifications")
	}

	var r0 *neptune.DescribeValidDBInstanceModificationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeValidDBInstanceModificationsInput, ...func(*neptune.Options)) (*neptune.DescribeValidDBInstanceModificationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.DescribeValidDBInstanceModificationsInput, ...func(*neptune.Options)) *neptune.DescribeValidDBInstanceModificationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.DescribeValidDBInstanceModificationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.DescribeValidDBInstanceModificationsInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FailoverDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FailoverDBCluster(ctx context.Context, params *neptune.FailoverDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.FailoverDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FailoverDBCluster")
	}

	var r0 *neptune.FailoverDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.FailoverDBClusterInput, ...func(*neptune.Options)) (*neptune.FailoverDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.FailoverDBClusterInput, ...func(*neptune.Options)) *neptune.FailoverDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.FailoverDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.FailoverDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FailoverGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) FailoverGlobalCluster(ctx context.Context, params *neptune.FailoverGlobalClusterInput, optFns ...func(*neptune.Options)) (*neptune.FailoverGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for FailoverGlobalCluster")
	}

	var r0 *neptune.FailoverGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.FailoverGlobalClusterInput, ...func(*neptune.Options)) (*neptune.FailoverGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.FailoverGlobalClusterInput, ...func(*neptune.Options)) *neptune.FailoverGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.FailoverGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.FailoverGlobalClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *neptune.ListTagsForResourceInput, optFns ...func(*neptune.Options)) (*neptune.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *neptune.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ListTagsForResourceInput, ...func(*neptune.Options)) (*neptune.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ListTagsForResourceInput, ...func(*neptune.Options)) *neptune.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ListTagsForResourceInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBCluster(ctx context.Context, params *neptune.ModifyDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.ModifyDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBCluster")
	}

	var r0 *neptune.ModifyDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBClusterInput, ...func(*neptune.Options)) (*neptune.ModifyDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBClusterInput, ...func(*neptune.Options)) *neptune.ModifyDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBClusterEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBClusterEndpoint(ctx context.Context, params *neptune.ModifyDBClusterEndpointInput, optFns ...func(*neptune.Options)) (*neptune.ModifyDBClusterEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBClusterEndpoint")
	}

	var r0 *neptune.ModifyDBClusterEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBClusterEndpointInput, ...func(*neptune.Options)) (*neptune.ModifyDBClusterEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBClusterEndpointInput, ...func(*neptune.Options)) *neptune.ModifyDBClusterEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyDBClusterEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyDBClusterEndpointInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBClusterParameterGroup(ctx context.Context, params *neptune.ModifyDBClusterParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.ModifyDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBClusterParameterGroup")
	}

	var r0 *neptune.ModifyDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBClusterParameterGroupInput, ...func(*neptune.Options)) (*neptune.ModifyDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBClusterParameterGroupInput, ...func(*neptune.Options)) *neptune.ModifyDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyDBClusterParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBClusterSnapshotAttribute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBClusterSnapshotAttribute(ctx context.Context, params *neptune.ModifyDBClusterSnapshotAttributeInput, optFns ...func(*neptune.Options)) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBClusterSnapshotAttribute")
	}

	var r0 *neptune.ModifyDBClusterSnapshotAttributeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBClusterSnapshotAttributeInput, ...func(*neptune.Options)) (*neptune.ModifyDBClusterSnapshotAttributeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBClusterSnapshotAttributeInput, ...func(*neptune.Options)) *neptune.ModifyDBClusterSnapshotAttributeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyDBClusterSnapshotAttributeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyDBClusterSnapshotAttributeInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBInstance(ctx context.Context, params *neptune.ModifyDBInstanceInput, optFns ...func(*neptune.Options)) (*neptune.ModifyDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBInstance")
	}

	var r0 *neptune.ModifyDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBInstanceInput, ...func(*neptune.Options)) (*neptune.ModifyDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBInstanceInput, ...func(*neptune.Options)) *neptune.ModifyDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyDBInstanceInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBParameterGroup(ctx context.Context, params *neptune.ModifyDBParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.ModifyDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBParameterGroup")
	}

	var r0 *neptune.ModifyDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBParameterGroupInput, ...func(*neptune.Options)) (*neptune.ModifyDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBParameterGroupInput, ...func(*neptune.Options)) *neptune.ModifyDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyDBParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDBSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDBSubnetGroup(ctx context.Context, params *neptune.ModifyDBSubnetGroupInput, optFns ...func(*neptune.Options)) (*neptune.ModifyDBSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDBSubnetGroup")
	}

	var r0 *neptune.ModifyDBSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBSubnetGroupInput, ...func(*neptune.Options)) (*neptune.ModifyDBSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyDBSubnetGroupInput, ...func(*neptune.Options)) *neptune.ModifyDBSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyDBSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyDBSubnetGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyEventSubscription(ctx context.Context, params *neptune.ModifyEventSubscriptionInput, optFns ...func(*neptune.Options)) (*neptune.ModifyEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyEventSubscription")
	}

	var r0 *neptune.ModifyEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyEventSubscriptionInput, ...func(*neptune.Options)) (*neptune.ModifyEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyEventSubscriptionInput, ...func(*neptune.Options)) *neptune.ModifyEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyEventSubscriptionInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyGlobalCluster(ctx context.Context, params *neptune.ModifyGlobalClusterInput, optFns ...func(*neptune.Options)) (*neptune.ModifyGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyGlobalCluster")
	}

	var r0 *neptune.ModifyGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyGlobalClusterInput, ...func(*neptune.Options)) (*neptune.ModifyGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ModifyGlobalClusterInput, ...func(*neptune.Options)) *neptune.ModifyGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ModifyGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ModifyGlobalClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() neptune.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 neptune.Options
	if rf, ok := ret.Get(0).(func() neptune.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(neptune.Options)
	}

	return r0
}

// PromoteReadReplicaDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PromoteReadReplicaDBCluster(ctx context.Context, params *neptune.PromoteReadReplicaDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.PromoteReadReplicaDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PromoteReadReplicaDBCluster")
	}

	var r0 *neptune.PromoteReadReplicaDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.PromoteReadReplicaDBClusterInput, ...func(*neptune.Options)) (*neptune.PromoteReadReplicaDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.PromoteReadReplicaDBClusterInput, ...func(*neptune.Options)) *neptune.PromoteReadReplicaDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.PromoteReadReplicaDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.PromoteReadReplicaDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RebootDBInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootDBInstance(ctx context.Context, params *neptune.RebootDBInstanceInput, optFns ...func(*neptune.Options)) (*neptune.RebootDBInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootDBInstance")
	}

	var r0 *neptune.RebootDBInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RebootDBInstanceInput, ...func(*neptune.Options)) (*neptune.RebootDBInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RebootDBInstanceInput, ...func(*neptune.Options)) *neptune.RebootDBInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.RebootDBInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.RebootDBInstanceInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveFromGlobalCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveFromGlobalCluster(ctx context.Context, params *neptune.RemoveFromGlobalClusterInput, optFns ...func(*neptune.Options)) (*neptune.RemoveFromGlobalClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveFromGlobalCluster")
	}

	var r0 *neptune.RemoveFromGlobalClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RemoveFromGlobalClusterInput, ...func(*neptune.Options)) (*neptune.RemoveFromGlobalClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RemoveFromGlobalClusterInput, ...func(*neptune.Options)) *neptune.RemoveFromGlobalClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.RemoveFromGlobalClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.RemoveFromGlobalClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveRoleFromDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveRoleFromDBCluster(ctx context.Context, params *neptune.RemoveRoleFromDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.RemoveRoleFromDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveRoleFromDBCluster")
	}

	var r0 *neptune.RemoveRoleFromDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RemoveRoleFromDBClusterInput, ...func(*neptune.Options)) (*neptune.RemoveRoleFromDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RemoveRoleFromDBClusterInput, ...func(*neptune.Options)) *neptune.RemoveRoleFromDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.RemoveRoleFromDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.RemoveRoleFromDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveSourceIdentifierFromSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveSourceIdentifierFromSubscription(ctx context.Context, params *neptune.RemoveSourceIdentifierFromSubscriptionInput, optFns ...func(*neptune.Options)) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveSourceIdentifierFromSubscription")
	}

	var r0 *neptune.RemoveSourceIdentifierFromSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RemoveSourceIdentifierFromSubscriptionInput, ...func(*neptune.Options)) (*neptune.RemoveSourceIdentifierFromSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RemoveSourceIdentifierFromSubscriptionInput, ...func(*neptune.Options)) *neptune.RemoveSourceIdentifierFromSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.RemoveSourceIdentifierFromSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.RemoveSourceIdentifierFromSubscriptionInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTagsFromResource(ctx context.Context, params *neptune.RemoveTagsFromResourceInput, optFns ...func(*neptune.Options)) (*neptune.RemoveTagsFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagsFromResource")
	}

	var r0 *neptune.RemoveTagsFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RemoveTagsFromResourceInput, ...func(*neptune.Options)) (*neptune.RemoveTagsFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RemoveTagsFromResourceInput, ...func(*neptune.Options)) *neptune.RemoveTagsFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.RemoveTagsFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.RemoveTagsFromResourceInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDBClusterParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetDBClusterParameterGroup(ctx context.Context, params *neptune.ResetDBClusterParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.ResetDBClusterParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetDBClusterParameterGroup")
	}

	var r0 *neptune.ResetDBClusterParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ResetDBClusterParameterGroupInput, ...func(*neptune.Options)) (*neptune.ResetDBClusterParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ResetDBClusterParameterGroupInput, ...func(*neptune.Options)) *neptune.ResetDBClusterParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ResetDBClusterParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ResetDBClusterParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetDBParameterGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetDBParameterGroup(ctx context.Context, params *neptune.ResetDBParameterGroupInput, optFns ...func(*neptune.Options)) (*neptune.ResetDBParameterGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetDBParameterGroup")
	}

	var r0 *neptune.ResetDBParameterGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ResetDBParameterGroupInput, ...func(*neptune.Options)) (*neptune.ResetDBParameterGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.ResetDBParameterGroupInput, ...func(*neptune.Options)) *neptune.ResetDBParameterGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.ResetDBParameterGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.ResetDBParameterGroupInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBClusterFromSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBClusterFromSnapshot(ctx context.Context, params *neptune.RestoreDBClusterFromSnapshotInput, optFns ...func(*neptune.Options)) (*neptune.RestoreDBClusterFromSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBClusterFromSnapshot")
	}

	var r0 *neptune.RestoreDBClusterFromSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RestoreDBClusterFromSnapshotInput, ...func(*neptune.Options)) (*neptune.RestoreDBClusterFromSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RestoreDBClusterFromSnapshotInput, ...func(*neptune.Options)) *neptune.RestoreDBClusterFromSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.RestoreDBClusterFromSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.RestoreDBClusterFromSnapshotInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RestoreDBClusterToPointInTime provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RestoreDBClusterToPointInTime(ctx context.Context, params *neptune.RestoreDBClusterToPointInTimeInput, optFns ...func(*neptune.Options)) (*neptune.RestoreDBClusterToPointInTimeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RestoreDBClusterToPointInTime")
	}

	var r0 *neptune.RestoreDBClusterToPointInTimeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RestoreDBClusterToPointInTimeInput, ...func(*neptune.Options)) (*neptune.RestoreDBClusterToPointInTimeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.RestoreDBClusterToPointInTimeInput, ...func(*neptune.Options)) *neptune.RestoreDBClusterToPointInTimeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.RestoreDBClusterToPointInTimeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.RestoreDBClusterToPointInTimeInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDBCluster(ctx context.Context, params *neptune.StartDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.StartDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDBCluster")
	}

	var r0 *neptune.StartDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.StartDBClusterInput, ...func(*neptune.Options)) (*neptune.StartDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.StartDBClusterInput, ...func(*neptune.Options)) *neptune.StartDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.StartDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.StartDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDBCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDBCluster(ctx context.Context, params *neptune.StopDBClusterInput, optFns ...func(*neptune.Options)) (*neptune.StopDBClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDBCluster")
	}

	var r0 *neptune.StopDBClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.StopDBClusterInput, ...func(*neptune.Options)) (*neptune.StopDBClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *neptune.StopDBClusterInput, ...func(*neptune.Options)) *neptune.StopDBClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*neptune.StopDBClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *neptune.StopDBClusterInput, ...func(*neptune.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
