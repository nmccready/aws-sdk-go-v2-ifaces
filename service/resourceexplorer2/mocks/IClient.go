// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	resourceexplorer2 "github.com/aws/aws-sdk-go-v2/service/resourceexplorer2"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateDefaultView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateDefaultView(ctx context.Context, params *resourceexplorer2.AssociateDefaultViewInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.AssociateDefaultViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDefaultView")
	}

	var r0 *resourceexplorer2.AssociateDefaultViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.AssociateDefaultViewInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.AssociateDefaultViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.AssociateDefaultViewInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.AssociateDefaultViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.AssociateDefaultViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.AssociateDefaultViewInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchGetView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetView(ctx context.Context, params *resourceexplorer2.BatchGetViewInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.BatchGetViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetView")
	}

	var r0 *resourceexplorer2.BatchGetViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.BatchGetViewInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.BatchGetViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.BatchGetViewInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.BatchGetViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.BatchGetViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.BatchGetViewInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIndex(ctx context.Context, params *resourceexplorer2.CreateIndexInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.CreateIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 *resourceexplorer2.CreateIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.CreateIndexInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.CreateIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.CreateIndexInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.CreateIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.CreateIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.CreateIndexInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateView(ctx context.Context, params *resourceexplorer2.CreateViewInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.CreateViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateView")
	}

	var r0 *resourceexplorer2.CreateViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.CreateViewInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.CreateViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.CreateViewInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.CreateViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.CreateViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.CreateViewInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIndex(ctx context.Context, params *resourceexplorer2.DeleteIndexInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.DeleteIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndex")
	}

	var r0 *resourceexplorer2.DeleteIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.DeleteIndexInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.DeleteIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.DeleteIndexInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.DeleteIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.DeleteIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.DeleteIndexInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteView(ctx context.Context, params *resourceexplorer2.DeleteViewInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.DeleteViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteView")
	}

	var r0 *resourceexplorer2.DeleteViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.DeleteViewInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.DeleteViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.DeleteViewInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.DeleteViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.DeleteViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.DeleteViewInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDefaultView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateDefaultView(ctx context.Context, params *resourceexplorer2.DisassociateDefaultViewInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.DisassociateDefaultViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateDefaultView")
	}

	var r0 *resourceexplorer2.DisassociateDefaultViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.DisassociateDefaultViewInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.DisassociateDefaultViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.DisassociateDefaultViewInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.DisassociateDefaultViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.DisassociateDefaultViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.DisassociateDefaultViewInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountLevelServiceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountLevelServiceConfiguration(ctx context.Context, params *resourceexplorer2.GetAccountLevelServiceConfigurationInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.GetAccountLevelServiceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountLevelServiceConfiguration")
	}

	var r0 *resourceexplorer2.GetAccountLevelServiceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.GetAccountLevelServiceConfigurationInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.GetAccountLevelServiceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.GetAccountLevelServiceConfigurationInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.GetAccountLevelServiceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.GetAccountLevelServiceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.GetAccountLevelServiceConfigurationInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDefaultView(ctx context.Context, params *resourceexplorer2.GetDefaultViewInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.GetDefaultViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultView")
	}

	var r0 *resourceexplorer2.GetDefaultViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.GetDefaultViewInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.GetDefaultViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.GetDefaultViewInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.GetDefaultViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.GetDefaultViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.GetDefaultViewInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIndex(ctx context.Context, params *resourceexplorer2.GetIndexInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.GetIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 *resourceexplorer2.GetIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.GetIndexInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.GetIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.GetIndexInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.GetIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.GetIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.GetIndexInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetView(ctx context.Context, params *resourceexplorer2.GetViewInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.GetViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetView")
	}

	var r0 *resourceexplorer2.GetViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.GetViewInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.GetViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.GetViewInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.GetViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.GetViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.GetViewInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIndexes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIndexes(ctx context.Context, params *resourceexplorer2.ListIndexesInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListIndexesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexes")
	}

	var r0 *resourceexplorer2.ListIndexesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListIndexesInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListIndexesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListIndexesInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.ListIndexesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.ListIndexesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.ListIndexesInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIndexesForMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIndexesForMembers(ctx context.Context, params *resourceexplorer2.ListIndexesForMembersInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListIndexesForMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndexesForMembers")
	}

	var r0 *resourceexplorer2.ListIndexesForMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListIndexesForMembersInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListIndexesForMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListIndexesForMembersInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.ListIndexesForMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.ListIndexesForMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.ListIndexesForMembersInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSupportedResourceTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSupportedResourceTypes(ctx context.Context, params *resourceexplorer2.ListSupportedResourceTypesInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListSupportedResourceTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSupportedResourceTypes")
	}

	var r0 *resourceexplorer2.ListSupportedResourceTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListSupportedResourceTypesInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListSupportedResourceTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListSupportedResourceTypesInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.ListSupportedResourceTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.ListSupportedResourceTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.ListSupportedResourceTypesInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *resourceexplorer2.ListTagsForResourceInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *resourceexplorer2.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListTagsForResourceInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListTagsForResourceInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.ListTagsForResourceInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListViews provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListViews(ctx context.Context, params *resourceexplorer2.ListViewsInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListViewsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListViews")
	}

	var r0 *resourceexplorer2.ListViewsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListViewsInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.ListViewsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.ListViewsInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.ListViewsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.ListViewsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.ListViewsInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() resourceexplorer2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 resourceexplorer2.Options
	if rf, ok := ret.Get(0).(func() resourceexplorer2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(resourceexplorer2.Options)
	}

	return r0
}

// Search provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Search(ctx context.Context, params *resourceexplorer2.SearchInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.SearchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *resourceexplorer2.SearchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.SearchInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.SearchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.SearchInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.SearchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.SearchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.SearchInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *resourceexplorer2.TagResourceInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *resourceexplorer2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.TagResourceInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.TagResourceInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.TagResourceInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *resourceexplorer2.UntagResourceInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *resourceexplorer2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.UntagResourceInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.UntagResourceInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.UntagResourceInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIndexType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIndexType(ctx context.Context, params *resourceexplorer2.UpdateIndexTypeInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.UpdateIndexTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIndexType")
	}

	var r0 *resourceexplorer2.UpdateIndexTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.UpdateIndexTypeInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.UpdateIndexTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.UpdateIndexTypeInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.UpdateIndexTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.UpdateIndexTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.UpdateIndexTypeInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateView(ctx context.Context, params *resourceexplorer2.UpdateViewInput, optFns ...func(*resourceexplorer2.Options)) (*resourceexplorer2.UpdateViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateView")
	}

	var r0 *resourceexplorer2.UpdateViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.UpdateViewInput, ...func(*resourceexplorer2.Options)) (*resourceexplorer2.UpdateViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourceexplorer2.UpdateViewInput, ...func(*resourceexplorer2.Options)) *resourceexplorer2.UpdateViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourceexplorer2.UpdateViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourceexplorer2.UpdateViewInput, ...func(*resourceexplorer2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
