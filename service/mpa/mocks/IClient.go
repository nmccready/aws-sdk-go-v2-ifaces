// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	mpa "github.com/aws/aws-sdk-go-v2/service/mpa"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelSession(ctx context.Context, params *mpa.CancelSessionInput, optFns ...func(*mpa.Options)) (*mpa.CancelSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelSession")
	}

	var r0 *mpa.CancelSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.CancelSessionInput, ...func(*mpa.Options)) (*mpa.CancelSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.CancelSessionInput, ...func(*mpa.Options)) *mpa.CancelSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.CancelSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.CancelSessionInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApprovalTeam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApprovalTeam(ctx context.Context, params *mpa.CreateApprovalTeamInput, optFns ...func(*mpa.Options)) (*mpa.CreateApprovalTeamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApprovalTeam")
	}

	var r0 *mpa.CreateApprovalTeamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.CreateApprovalTeamInput, ...func(*mpa.Options)) (*mpa.CreateApprovalTeamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.CreateApprovalTeamInput, ...func(*mpa.Options)) *mpa.CreateApprovalTeamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.CreateApprovalTeamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.CreateApprovalTeamInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIdentitySource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIdentitySource(ctx context.Context, params *mpa.CreateIdentitySourceInput, optFns ...func(*mpa.Options)) (*mpa.CreateIdentitySourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentitySource")
	}

	var r0 *mpa.CreateIdentitySourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.CreateIdentitySourceInput, ...func(*mpa.Options)) (*mpa.CreateIdentitySourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.CreateIdentitySourceInput, ...func(*mpa.Options)) *mpa.CreateIdentitySourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.CreateIdentitySourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.CreateIdentitySourceInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentitySource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIdentitySource(ctx context.Context, params *mpa.DeleteIdentitySourceInput, optFns ...func(*mpa.Options)) (*mpa.DeleteIdentitySourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentitySource")
	}

	var r0 *mpa.DeleteIdentitySourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.DeleteIdentitySourceInput, ...func(*mpa.Options)) (*mpa.DeleteIdentitySourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.DeleteIdentitySourceInput, ...func(*mpa.Options)) *mpa.DeleteIdentitySourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.DeleteIdentitySourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.DeleteIdentitySourceInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInactiveApprovalTeamVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInactiveApprovalTeamVersion(ctx context.Context, params *mpa.DeleteInactiveApprovalTeamVersionInput, optFns ...func(*mpa.Options)) (*mpa.DeleteInactiveApprovalTeamVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInactiveApprovalTeamVersion")
	}

	var r0 *mpa.DeleteInactiveApprovalTeamVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.DeleteInactiveApprovalTeamVersionInput, ...func(*mpa.Options)) (*mpa.DeleteInactiveApprovalTeamVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.DeleteInactiveApprovalTeamVersionInput, ...func(*mpa.Options)) *mpa.DeleteInactiveApprovalTeamVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.DeleteInactiveApprovalTeamVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.DeleteInactiveApprovalTeamVersionInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApprovalTeam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApprovalTeam(ctx context.Context, params *mpa.GetApprovalTeamInput, optFns ...func(*mpa.Options)) (*mpa.GetApprovalTeamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApprovalTeam")
	}

	var r0 *mpa.GetApprovalTeamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetApprovalTeamInput, ...func(*mpa.Options)) (*mpa.GetApprovalTeamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetApprovalTeamInput, ...func(*mpa.Options)) *mpa.GetApprovalTeamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.GetApprovalTeamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.GetApprovalTeamInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentitySource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentitySource(ctx context.Context, params *mpa.GetIdentitySourceInput, optFns ...func(*mpa.Options)) (*mpa.GetIdentitySourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentitySource")
	}

	var r0 *mpa.GetIdentitySourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetIdentitySourceInput, ...func(*mpa.Options)) (*mpa.GetIdentitySourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetIdentitySourceInput, ...func(*mpa.Options)) *mpa.GetIdentitySourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.GetIdentitySourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.GetIdentitySourceInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicyVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPolicyVersion(ctx context.Context, params *mpa.GetPolicyVersionInput, optFns ...func(*mpa.Options)) (*mpa.GetPolicyVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicyVersion")
	}

	var r0 *mpa.GetPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetPolicyVersionInput, ...func(*mpa.Options)) (*mpa.GetPolicyVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetPolicyVersionInput, ...func(*mpa.Options)) *mpa.GetPolicyVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.GetPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.GetPolicyVersionInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcePolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourcePolicy(ctx context.Context, params *mpa.GetResourcePolicyInput, optFns ...func(*mpa.Options)) (*mpa.GetResourcePolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcePolicy")
	}

	var r0 *mpa.GetResourcePolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetResourcePolicyInput, ...func(*mpa.Options)) (*mpa.GetResourcePolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetResourcePolicyInput, ...func(*mpa.Options)) *mpa.GetResourcePolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.GetResourcePolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.GetResourcePolicyInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSession(ctx context.Context, params *mpa.GetSessionInput, optFns ...func(*mpa.Options)) (*mpa.GetSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *mpa.GetSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetSessionInput, ...func(*mpa.Options)) (*mpa.GetSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.GetSessionInput, ...func(*mpa.Options)) *mpa.GetSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.GetSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.GetSessionInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApprovalTeams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApprovalTeams(ctx context.Context, params *mpa.ListApprovalTeamsInput, optFns ...func(*mpa.Options)) (*mpa.ListApprovalTeamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApprovalTeams")
	}

	var r0 *mpa.ListApprovalTeamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListApprovalTeamsInput, ...func(*mpa.Options)) (*mpa.ListApprovalTeamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListApprovalTeamsInput, ...func(*mpa.Options)) *mpa.ListApprovalTeamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.ListApprovalTeamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.ListApprovalTeamsInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentitySources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIdentitySources(ctx context.Context, params *mpa.ListIdentitySourcesInput, optFns ...func(*mpa.Options)) (*mpa.ListIdentitySourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentitySources")
	}

	var r0 *mpa.ListIdentitySourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListIdentitySourcesInput, ...func(*mpa.Options)) (*mpa.ListIdentitySourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListIdentitySourcesInput, ...func(*mpa.Options)) *mpa.ListIdentitySourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.ListIdentitySourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.ListIdentitySourcesInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPolicies(ctx context.Context, params *mpa.ListPoliciesInput, optFns ...func(*mpa.Options)) (*mpa.ListPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicies")
	}

	var r0 *mpa.ListPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListPoliciesInput, ...func(*mpa.Options)) (*mpa.ListPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListPoliciesInput, ...func(*mpa.Options)) *mpa.ListPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.ListPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.ListPoliciesInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPolicyVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPolicyVersions(ctx context.Context, params *mpa.ListPolicyVersionsInput, optFns ...func(*mpa.Options)) (*mpa.ListPolicyVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPolicyVersions")
	}

	var r0 *mpa.ListPolicyVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListPolicyVersionsInput, ...func(*mpa.Options)) (*mpa.ListPolicyVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListPolicyVersionsInput, ...func(*mpa.Options)) *mpa.ListPolicyVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.ListPolicyVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.ListPolicyVersionsInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcePolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourcePolicies(ctx context.Context, params *mpa.ListResourcePoliciesInput, optFns ...func(*mpa.Options)) (*mpa.ListResourcePoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourcePolicies")
	}

	var r0 *mpa.ListResourcePoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListResourcePoliciesInput, ...func(*mpa.Options)) (*mpa.ListResourcePoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListResourcePoliciesInput, ...func(*mpa.Options)) *mpa.ListResourcePoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.ListResourcePoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.ListResourcePoliciesInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSessions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSessions(ctx context.Context, params *mpa.ListSessionsInput, optFns ...func(*mpa.Options)) (*mpa.ListSessionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSessions")
	}

	var r0 *mpa.ListSessionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListSessionsInput, ...func(*mpa.Options)) (*mpa.ListSessionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListSessionsInput, ...func(*mpa.Options)) *mpa.ListSessionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.ListSessionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.ListSessionsInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *mpa.ListTagsForResourceInput, optFns ...func(*mpa.Options)) (*mpa.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *mpa.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListTagsForResourceInput, ...func(*mpa.Options)) (*mpa.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.ListTagsForResourceInput, ...func(*mpa.Options)) *mpa.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.ListTagsForResourceInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() mpa.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 mpa.Options
	if rf, ok := ret.Get(0).(func() mpa.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mpa.Options)
	}

	return r0
}

// StartActiveApprovalTeamDeletion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartActiveApprovalTeamDeletion(ctx context.Context, params *mpa.StartActiveApprovalTeamDeletionInput, optFns ...func(*mpa.Options)) (*mpa.StartActiveApprovalTeamDeletionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartActiveApprovalTeamDeletion")
	}

	var r0 *mpa.StartActiveApprovalTeamDeletionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.StartActiveApprovalTeamDeletionInput, ...func(*mpa.Options)) (*mpa.StartActiveApprovalTeamDeletionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.StartActiveApprovalTeamDeletionInput, ...func(*mpa.Options)) *mpa.StartActiveApprovalTeamDeletionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.StartActiveApprovalTeamDeletionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.StartActiveApprovalTeamDeletionInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *mpa.TagResourceInput, optFns ...func(*mpa.Options)) (*mpa.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *mpa.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.TagResourceInput, ...func(*mpa.Options)) (*mpa.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.TagResourceInput, ...func(*mpa.Options)) *mpa.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.TagResourceInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *mpa.UntagResourceInput, optFns ...func(*mpa.Options)) (*mpa.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *mpa.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.UntagResourceInput, ...func(*mpa.Options)) (*mpa.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.UntagResourceInput, ...func(*mpa.Options)) *mpa.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.UntagResourceInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApprovalTeam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApprovalTeam(ctx context.Context, params *mpa.UpdateApprovalTeamInput, optFns ...func(*mpa.Options)) (*mpa.UpdateApprovalTeamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApprovalTeam")
	}

	var r0 *mpa.UpdateApprovalTeamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.UpdateApprovalTeamInput, ...func(*mpa.Options)) (*mpa.UpdateApprovalTeamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mpa.UpdateApprovalTeamInput, ...func(*mpa.Options)) *mpa.UpdateApprovalTeamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mpa.UpdateApprovalTeamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mpa.UpdateApprovalTeamInput, ...func(*mpa.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
