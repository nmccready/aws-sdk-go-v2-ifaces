// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	servicecatalog "github.com/aws/aws-sdk-go-v2/service/servicecatalog"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptPortfolioShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptPortfolioShare(ctx context.Context, params *servicecatalog.AcceptPortfolioShareInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.AcceptPortfolioShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptPortfolioShare")
	}

	var r0 *servicecatalog.AcceptPortfolioShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AcceptPortfolioShareInput, ...func(*servicecatalog.Options)) (*servicecatalog.AcceptPortfolioShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AcceptPortfolioShareInput, ...func(*servicecatalog.Options)) *servicecatalog.AcceptPortfolioShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.AcceptPortfolioShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.AcceptPortfolioShareInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateBudgetWithResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateBudgetWithResource(ctx context.Context, params *servicecatalog.AssociateBudgetWithResourceInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.AssociateBudgetWithResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateBudgetWithResource")
	}

	var r0 *servicecatalog.AssociateBudgetWithResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociateBudgetWithResourceInput, ...func(*servicecatalog.Options)) (*servicecatalog.AssociateBudgetWithResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociateBudgetWithResourceInput, ...func(*servicecatalog.Options)) *servicecatalog.AssociateBudgetWithResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.AssociateBudgetWithResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.AssociateBudgetWithResourceInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociatePrincipalWithPortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePrincipalWithPortfolio(ctx context.Context, params *servicecatalog.AssociatePrincipalWithPortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePrincipalWithPortfolio")
	}

	var r0 *servicecatalog.AssociatePrincipalWithPortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociatePrincipalWithPortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.AssociatePrincipalWithPortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociatePrincipalWithPortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.AssociatePrincipalWithPortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.AssociatePrincipalWithPortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.AssociatePrincipalWithPortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateProductWithPortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateProductWithPortfolio(ctx context.Context, params *servicecatalog.AssociateProductWithPortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.AssociateProductWithPortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateProductWithPortfolio")
	}

	var r0 *servicecatalog.AssociateProductWithPortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociateProductWithPortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.AssociateProductWithPortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociateProductWithPortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.AssociateProductWithPortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.AssociateProductWithPortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.AssociateProductWithPortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateServiceActionWithProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateServiceActionWithProvisioningArtifact(ctx context.Context, params *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateServiceActionWithProvisioningArtifact")
	}

	var r0 *servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.AssociateServiceActionWithProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.AssociateServiceActionWithProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTagOptionWithResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateTagOptionWithResource(ctx context.Context, params *servicecatalog.AssociateTagOptionWithResourceInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.AssociateTagOptionWithResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateTagOptionWithResource")
	}

	var r0 *servicecatalog.AssociateTagOptionWithResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociateTagOptionWithResourceInput, ...func(*servicecatalog.Options)) (*servicecatalog.AssociateTagOptionWithResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.AssociateTagOptionWithResourceInput, ...func(*servicecatalog.Options)) *servicecatalog.AssociateTagOptionWithResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.AssociateTagOptionWithResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.AssociateTagOptionWithResourceInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchAssociateServiceActionWithProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchAssociateServiceActionWithProvisioningArtifact(ctx context.Context, params *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchAssociateServiceActionWithProvisioningArtifact")
	}

	var r0 *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.BatchAssociateServiceActionWithProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDisassociateServiceActionFromProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDisassociateServiceActionFromProvisioningArtifact(ctx context.Context, params *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDisassociateServiceActionFromProvisioningArtifact")
	}

	var r0 *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.BatchDisassociateServiceActionFromProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CopyProduct(ctx context.Context, params *servicecatalog.CopyProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CopyProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CopyProduct")
	}

	var r0 *servicecatalog.CopyProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CopyProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.CopyProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CopyProductInput, ...func(*servicecatalog.Options)) *servicecatalog.CopyProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CopyProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CopyProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConstraint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConstraint(ctx context.Context, params *servicecatalog.CreateConstraintInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CreateConstraintOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConstraint")
	}

	var r0 *servicecatalog.CreateConstraintOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateConstraintInput, ...func(*servicecatalog.Options)) (*servicecatalog.CreateConstraintOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateConstraintInput, ...func(*servicecatalog.Options)) *servicecatalog.CreateConstraintOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CreateConstraintOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CreateConstraintInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePortfolio(ctx context.Context, params *servicecatalog.CreatePortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CreatePortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePortfolio")
	}

	var r0 *servicecatalog.CreatePortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreatePortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.CreatePortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreatePortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.CreatePortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CreatePortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CreatePortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePortfolioShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePortfolioShare(ctx context.Context, params *servicecatalog.CreatePortfolioShareInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CreatePortfolioShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePortfolioShare")
	}

	var r0 *servicecatalog.CreatePortfolioShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreatePortfolioShareInput, ...func(*servicecatalog.Options)) (*servicecatalog.CreatePortfolioShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreatePortfolioShareInput, ...func(*servicecatalog.Options)) *servicecatalog.CreatePortfolioShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CreatePortfolioShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CreatePortfolioShareInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProduct(ctx context.Context, params *servicecatalog.CreateProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CreateProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 *servicecatalog.CreateProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.CreateProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateProductInput, ...func(*servicecatalog.Options)) *servicecatalog.CreateProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CreateProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CreateProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProvisionedProductPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProvisionedProductPlan(ctx context.Context, params *servicecatalog.CreateProvisionedProductPlanInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CreateProvisionedProductPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvisionedProductPlan")
	}

	var r0 *servicecatalog.CreateProvisionedProductPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateProvisionedProductPlanInput, ...func(*servicecatalog.Options)) (*servicecatalog.CreateProvisionedProductPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateProvisionedProductPlanInput, ...func(*servicecatalog.Options)) *servicecatalog.CreateProvisionedProductPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CreateProvisionedProductPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CreateProvisionedProductPlanInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProvisioningArtifact(ctx context.Context, params *servicecatalog.CreateProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CreateProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProvisioningArtifact")
	}

	var r0 *servicecatalog.CreateProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.CreateProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.CreateProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CreateProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CreateProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateServiceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateServiceAction(ctx context.Context, params *servicecatalog.CreateServiceActionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CreateServiceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateServiceAction")
	}

	var r0 *servicecatalog.CreateServiceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateServiceActionInput, ...func(*servicecatalog.Options)) (*servicecatalog.CreateServiceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateServiceActionInput, ...func(*servicecatalog.Options)) *servicecatalog.CreateServiceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CreateServiceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CreateServiceActionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTagOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTagOption(ctx context.Context, params *servicecatalog.CreateTagOptionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.CreateTagOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTagOption")
	}

	var r0 *servicecatalog.CreateTagOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateTagOptionInput, ...func(*servicecatalog.Options)) (*servicecatalog.CreateTagOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.CreateTagOptionInput, ...func(*servicecatalog.Options)) *servicecatalog.CreateTagOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.CreateTagOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.CreateTagOptionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConstraint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConstraint(ctx context.Context, params *servicecatalog.DeleteConstraintInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DeleteConstraintOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConstraint")
	}

	var r0 *servicecatalog.DeleteConstraintOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteConstraintInput, ...func(*servicecatalog.Options)) (*servicecatalog.DeleteConstraintOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteConstraintInput, ...func(*servicecatalog.Options)) *servicecatalog.DeleteConstraintOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DeleteConstraintOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DeleteConstraintInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePortfolio(ctx context.Context, params *servicecatalog.DeletePortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DeletePortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePortfolio")
	}

	var r0 *servicecatalog.DeletePortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeletePortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.DeletePortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeletePortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.DeletePortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DeletePortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DeletePortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePortfolioShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePortfolioShare(ctx context.Context, params *servicecatalog.DeletePortfolioShareInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DeletePortfolioShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePortfolioShare")
	}

	var r0 *servicecatalog.DeletePortfolioShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeletePortfolioShareInput, ...func(*servicecatalog.Options)) (*servicecatalog.DeletePortfolioShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeletePortfolioShareInput, ...func(*servicecatalog.Options)) *servicecatalog.DeletePortfolioShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DeletePortfolioShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DeletePortfolioShareInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProduct(ctx context.Context, params *servicecatalog.DeleteProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DeleteProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 *servicecatalog.DeleteProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.DeleteProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteProductInput, ...func(*servicecatalog.Options)) *servicecatalog.DeleteProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DeleteProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DeleteProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvisionedProductPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProvisionedProductPlan(ctx context.Context, params *servicecatalog.DeleteProvisionedProductPlanInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DeleteProvisionedProductPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvisionedProductPlan")
	}

	var r0 *servicecatalog.DeleteProvisionedProductPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteProvisionedProductPlanInput, ...func(*servicecatalog.Options)) (*servicecatalog.DeleteProvisionedProductPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteProvisionedProductPlanInput, ...func(*servicecatalog.Options)) *servicecatalog.DeleteProvisionedProductPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DeleteProvisionedProductPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DeleteProvisionedProductPlanInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProvisioningArtifact(ctx context.Context, params *servicecatalog.DeleteProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DeleteProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProvisioningArtifact")
	}

	var r0 *servicecatalog.DeleteProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.DeleteProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.DeleteProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DeleteProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DeleteProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteServiceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteServiceAction(ctx context.Context, params *servicecatalog.DeleteServiceActionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DeleteServiceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteServiceAction")
	}

	var r0 *servicecatalog.DeleteServiceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteServiceActionInput, ...func(*servicecatalog.Options)) (*servicecatalog.DeleteServiceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteServiceActionInput, ...func(*servicecatalog.Options)) *servicecatalog.DeleteServiceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DeleteServiceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DeleteServiceActionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTagOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTagOption(ctx context.Context, params *servicecatalog.DeleteTagOptionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DeleteTagOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagOption")
	}

	var r0 *servicecatalog.DeleteTagOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteTagOptionInput, ...func(*servicecatalog.Options)) (*servicecatalog.DeleteTagOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DeleteTagOptionInput, ...func(*servicecatalog.Options)) *servicecatalog.DeleteTagOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DeleteTagOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DeleteTagOptionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConstraint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConstraint(ctx context.Context, params *servicecatalog.DescribeConstraintInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeConstraintOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConstraint")
	}

	var r0 *servicecatalog.DescribeConstraintOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeConstraintInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeConstraintOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeConstraintInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeConstraintOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeConstraintOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeConstraintInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCopyProductStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCopyProductStatus(ctx context.Context, params *servicecatalog.DescribeCopyProductStatusInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeCopyProductStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCopyProductStatus")
	}

	var r0 *servicecatalog.DescribeCopyProductStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeCopyProductStatusInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeCopyProductStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeCopyProductStatusInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeCopyProductStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeCopyProductStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeCopyProductStatusInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePortfolio(ctx context.Context, params *servicecatalog.DescribePortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePortfolio")
	}

	var r0 *servicecatalog.DescribePortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribePortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribePortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribePortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribePortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribePortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePortfolioShareStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePortfolioShareStatus(ctx context.Context, params *servicecatalog.DescribePortfolioShareStatusInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioShareStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePortfolioShareStatus")
	}

	var r0 *servicecatalog.DescribePortfolioShareStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribePortfolioShareStatusInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioShareStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribePortfolioShareStatusInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribePortfolioShareStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribePortfolioShareStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribePortfolioShareStatusInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePortfolioShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePortfolioShares(ctx context.Context, params *servicecatalog.DescribePortfolioSharesInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePortfolioShares")
	}

	var r0 *servicecatalog.DescribePortfolioSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribePortfolioSharesInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribePortfolioSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribePortfolioSharesInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribePortfolioSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribePortfolioSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribePortfolioSharesInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProduct(ctx context.Context, params *servicecatalog.DescribeProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProduct")
	}

	var r0 *servicecatalog.DescribeProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProductInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProductAsAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProductAsAdmin(ctx context.Context, params *servicecatalog.DescribeProductAsAdminInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductAsAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProductAsAdmin")
	}

	var r0 *servicecatalog.DescribeProductAsAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProductAsAdminInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductAsAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProductAsAdminInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeProductAsAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeProductAsAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeProductAsAdminInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProductView provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProductView(ctx context.Context, params *servicecatalog.DescribeProductViewInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductViewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProductView")
	}

	var r0 *servicecatalog.DescribeProductViewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProductViewInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProductViewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProductViewInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeProductViewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeProductViewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeProductViewInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProvisionedProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProvisionedProduct(ctx context.Context, params *servicecatalog.DescribeProvisionedProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisionedProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProvisionedProduct")
	}

	var r0 *servicecatalog.DescribeProvisionedProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProvisionedProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisionedProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProvisionedProductInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeProvisionedProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeProvisionedProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeProvisionedProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProvisionedProductPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProvisionedProductPlan(ctx context.Context, params *servicecatalog.DescribeProvisionedProductPlanInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisionedProductPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProvisionedProductPlan")
	}

	var r0 *servicecatalog.DescribeProvisionedProductPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProvisionedProductPlanInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisionedProductPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProvisionedProductPlanInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeProvisionedProductPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeProvisionedProductPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeProvisionedProductPlanInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProvisioningArtifact(ctx context.Context, params *servicecatalog.DescribeProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProvisioningArtifact")
	}

	var r0 *servicecatalog.DescribeProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProvisioningParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProvisioningParameters(ctx context.Context, params *servicecatalog.DescribeProvisioningParametersInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisioningParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProvisioningParameters")
	}

	var r0 *servicecatalog.DescribeProvisioningParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProvisioningParametersInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeProvisioningParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeProvisioningParametersInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeProvisioningParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeProvisioningParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeProvisioningParametersInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRecord provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRecord(ctx context.Context, params *servicecatalog.DescribeRecordInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeRecordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRecord")
	}

	var r0 *servicecatalog.DescribeRecordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeRecordInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeRecordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeRecordInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeRecordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeRecordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeRecordInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServiceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServiceAction(ctx context.Context, params *servicecatalog.DescribeServiceActionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeServiceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServiceAction")
	}

	var r0 *servicecatalog.DescribeServiceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeServiceActionInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeServiceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeServiceActionInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeServiceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeServiceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeServiceActionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServiceActionExecutionParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServiceActionExecutionParameters(ctx context.Context, params *servicecatalog.DescribeServiceActionExecutionParametersInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServiceActionExecutionParameters")
	}

	var r0 *servicecatalog.DescribeServiceActionExecutionParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeServiceActionExecutionParametersInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeServiceActionExecutionParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeServiceActionExecutionParametersInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeServiceActionExecutionParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeServiceActionExecutionParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeServiceActionExecutionParametersInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTagOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTagOption(ctx context.Context, params *servicecatalog.DescribeTagOptionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DescribeTagOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTagOption")
	}

	var r0 *servicecatalog.DescribeTagOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeTagOptionInput, ...func(*servicecatalog.Options)) (*servicecatalog.DescribeTagOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DescribeTagOptionInput, ...func(*servicecatalog.Options)) *servicecatalog.DescribeTagOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DescribeTagOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DescribeTagOptionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableAWSOrganizationsAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableAWSOrganizationsAccess(ctx context.Context, params *servicecatalog.DisableAWSOrganizationsAccessInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableAWSOrganizationsAccess")
	}

	var r0 *servicecatalog.DisableAWSOrganizationsAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisableAWSOrganizationsAccessInput, ...func(*servicecatalog.Options)) (*servicecatalog.DisableAWSOrganizationsAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisableAWSOrganizationsAccessInput, ...func(*servicecatalog.Options)) *servicecatalog.DisableAWSOrganizationsAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DisableAWSOrganizationsAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DisableAWSOrganizationsAccessInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateBudgetFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateBudgetFromResource(ctx context.Context, params *servicecatalog.DisassociateBudgetFromResourceInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DisassociateBudgetFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateBudgetFromResource")
	}

	var r0 *servicecatalog.DisassociateBudgetFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociateBudgetFromResourceInput, ...func(*servicecatalog.Options)) (*servicecatalog.DisassociateBudgetFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociateBudgetFromResourceInput, ...func(*servicecatalog.Options)) *servicecatalog.DisassociateBudgetFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DisassociateBudgetFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DisassociateBudgetFromResourceInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePrincipalFromPortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePrincipalFromPortfolio(ctx context.Context, params *servicecatalog.DisassociatePrincipalFromPortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePrincipalFromPortfolio")
	}

	var r0 *servicecatalog.DisassociatePrincipalFromPortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociatePrincipalFromPortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.DisassociatePrincipalFromPortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociatePrincipalFromPortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.DisassociatePrincipalFromPortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DisassociatePrincipalFromPortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DisassociatePrincipalFromPortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateProductFromPortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateProductFromPortfolio(ctx context.Context, params *servicecatalog.DisassociateProductFromPortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DisassociateProductFromPortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateProductFromPortfolio")
	}

	var r0 *servicecatalog.DisassociateProductFromPortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociateProductFromPortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.DisassociateProductFromPortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociateProductFromPortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.DisassociateProductFromPortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DisassociateProductFromPortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DisassociateProductFromPortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateServiceActionFromProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateServiceActionFromProvisioningArtifact(ctx context.Context, params *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateServiceActionFromProvisioningArtifact")
	}

	var r0 *servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DisassociateServiceActionFromProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DisassociateServiceActionFromProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTagOptionFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateTagOptionFromResource(ctx context.Context, params *servicecatalog.DisassociateTagOptionFromResourceInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateTagOptionFromResource")
	}

	var r0 *servicecatalog.DisassociateTagOptionFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociateTagOptionFromResourceInput, ...func(*servicecatalog.Options)) (*servicecatalog.DisassociateTagOptionFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.DisassociateTagOptionFromResourceInput, ...func(*servicecatalog.Options)) *servicecatalog.DisassociateTagOptionFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.DisassociateTagOptionFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.DisassociateTagOptionFromResourceInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableAWSOrganizationsAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableAWSOrganizationsAccess(ctx context.Context, params *servicecatalog.EnableAWSOrganizationsAccessInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableAWSOrganizationsAccess")
	}

	var r0 *servicecatalog.EnableAWSOrganizationsAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.EnableAWSOrganizationsAccessInput, ...func(*servicecatalog.Options)) (*servicecatalog.EnableAWSOrganizationsAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.EnableAWSOrganizationsAccessInput, ...func(*servicecatalog.Options)) *servicecatalog.EnableAWSOrganizationsAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.EnableAWSOrganizationsAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.EnableAWSOrganizationsAccessInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteProvisionedProductPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteProvisionedProductPlan(ctx context.Context, params *servicecatalog.ExecuteProvisionedProductPlanInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteProvisionedProductPlan")
	}

	var r0 *servicecatalog.ExecuteProvisionedProductPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ExecuteProvisionedProductPlanInput, ...func(*servicecatalog.Options)) (*servicecatalog.ExecuteProvisionedProductPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ExecuteProvisionedProductPlanInput, ...func(*servicecatalog.Options)) *servicecatalog.ExecuteProvisionedProductPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ExecuteProvisionedProductPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ExecuteProvisionedProductPlanInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteProvisionedProductServiceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExecuteProvisionedProductServiceAction(ctx context.Context, params *servicecatalog.ExecuteProvisionedProductServiceActionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExecuteProvisionedProductServiceAction")
	}

	var r0 *servicecatalog.ExecuteProvisionedProductServiceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ExecuteProvisionedProductServiceActionInput, ...func(*servicecatalog.Options)) (*servicecatalog.ExecuteProvisionedProductServiceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ExecuteProvisionedProductServiceActionInput, ...func(*servicecatalog.Options)) *servicecatalog.ExecuteProvisionedProductServiceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ExecuteProvisionedProductServiceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ExecuteProvisionedProductServiceActionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAWSOrganizationsAccessStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAWSOrganizationsAccessStatus(ctx context.Context, params *servicecatalog.GetAWSOrganizationsAccessStatusInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAWSOrganizationsAccessStatus")
	}

	var r0 *servicecatalog.GetAWSOrganizationsAccessStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.GetAWSOrganizationsAccessStatusInput, ...func(*servicecatalog.Options)) (*servicecatalog.GetAWSOrganizationsAccessStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.GetAWSOrganizationsAccessStatusInput, ...func(*servicecatalog.Options)) *servicecatalog.GetAWSOrganizationsAccessStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.GetAWSOrganizationsAccessStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.GetAWSOrganizationsAccessStatusInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProvisionedProductOutputs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProvisionedProductOutputs(ctx context.Context, params *servicecatalog.GetProvisionedProductOutputsInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.GetProvisionedProductOutputsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProvisionedProductOutputs")
	}

	var r0 *servicecatalog.GetProvisionedProductOutputsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.GetProvisionedProductOutputsInput, ...func(*servicecatalog.Options)) (*servicecatalog.GetProvisionedProductOutputsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.GetProvisionedProductOutputsInput, ...func(*servicecatalog.Options)) *servicecatalog.GetProvisionedProductOutputsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.GetProvisionedProductOutputsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.GetProvisionedProductOutputsInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportAsProvisionedProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportAsProvisionedProduct(ctx context.Context, params *servicecatalog.ImportAsProvisionedProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ImportAsProvisionedProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportAsProvisionedProduct")
	}

	var r0 *servicecatalog.ImportAsProvisionedProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ImportAsProvisionedProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.ImportAsProvisionedProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ImportAsProvisionedProductInput, ...func(*servicecatalog.Options)) *servicecatalog.ImportAsProvisionedProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ImportAsProvisionedProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ImportAsProvisionedProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAcceptedPortfolioShares provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAcceptedPortfolioShares(ctx context.Context, params *servicecatalog.ListAcceptedPortfolioSharesInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAcceptedPortfolioShares")
	}

	var r0 *servicecatalog.ListAcceptedPortfolioSharesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListAcceptedPortfolioSharesInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListAcceptedPortfolioSharesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListAcceptedPortfolioSharesInput, ...func(*servicecatalog.Options)) *servicecatalog.ListAcceptedPortfolioSharesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListAcceptedPortfolioSharesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListAcceptedPortfolioSharesInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBudgetsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBudgetsForResource(ctx context.Context, params *servicecatalog.ListBudgetsForResourceInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListBudgetsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBudgetsForResource")
	}

	var r0 *servicecatalog.ListBudgetsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListBudgetsForResourceInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListBudgetsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListBudgetsForResourceInput, ...func(*servicecatalog.Options)) *servicecatalog.ListBudgetsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListBudgetsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListBudgetsForResourceInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConstraintsForPortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConstraintsForPortfolio(ctx context.Context, params *servicecatalog.ListConstraintsForPortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListConstraintsForPortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConstraintsForPortfolio")
	}

	var r0 *servicecatalog.ListConstraintsForPortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListConstraintsForPortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListConstraintsForPortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListConstraintsForPortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.ListConstraintsForPortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListConstraintsForPortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListConstraintsForPortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLaunchPaths provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLaunchPaths(ctx context.Context, params *servicecatalog.ListLaunchPathsInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListLaunchPathsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunchPaths")
	}

	var r0 *servicecatalog.ListLaunchPathsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListLaunchPathsInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListLaunchPathsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListLaunchPathsInput, ...func(*servicecatalog.Options)) *servicecatalog.ListLaunchPathsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListLaunchPathsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListLaunchPathsInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizationPortfolioAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizationPortfolioAccess(ctx context.Context, params *servicecatalog.ListOrganizationPortfolioAccessInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizationPortfolioAccess")
	}

	var r0 *servicecatalog.ListOrganizationPortfolioAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListOrganizationPortfolioAccessInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListOrganizationPortfolioAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListOrganizationPortfolioAccessInput, ...func(*servicecatalog.Options)) *servicecatalog.ListOrganizationPortfolioAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListOrganizationPortfolioAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListOrganizationPortfolioAccessInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPortfolioAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPortfolioAccess(ctx context.Context, params *servicecatalog.ListPortfolioAccessInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfolioAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPortfolioAccess")
	}

	var r0 *servicecatalog.ListPortfolioAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListPortfolioAccessInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfolioAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListPortfolioAccessInput, ...func(*servicecatalog.Options)) *servicecatalog.ListPortfolioAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListPortfolioAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListPortfolioAccessInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPortfolios provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPortfolios(ctx context.Context, params *servicecatalog.ListPortfoliosInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfoliosOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPortfolios")
	}

	var r0 *servicecatalog.ListPortfoliosOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListPortfoliosInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfoliosOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListPortfoliosInput, ...func(*servicecatalog.Options)) *servicecatalog.ListPortfoliosOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListPortfoliosOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListPortfoliosInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPortfoliosForProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPortfoliosForProduct(ctx context.Context, params *servicecatalog.ListPortfoliosForProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfoliosForProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPortfoliosForProduct")
	}

	var r0 *servicecatalog.ListPortfoliosForProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListPortfoliosForProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListPortfoliosForProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListPortfoliosForProductInput, ...func(*servicecatalog.Options)) *servicecatalog.ListPortfoliosForProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListPortfoliosForProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListPortfoliosForProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrincipalsForPortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrincipalsForPortfolio(ctx context.Context, params *servicecatalog.ListPrincipalsForPortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListPrincipalsForPortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrincipalsForPortfolio")
	}

	var r0 *servicecatalog.ListPrincipalsForPortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListPrincipalsForPortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListPrincipalsForPortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListPrincipalsForPortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.ListPrincipalsForPortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListPrincipalsForPortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListPrincipalsForPortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProvisionedProductPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProvisionedProductPlans(ctx context.Context, params *servicecatalog.ListProvisionedProductPlansInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisionedProductPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisionedProductPlans")
	}

	var r0 *servicecatalog.ListProvisionedProductPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListProvisionedProductPlansInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisionedProductPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListProvisionedProductPlansInput, ...func(*servicecatalog.Options)) *servicecatalog.ListProvisionedProductPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListProvisionedProductPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListProvisionedProductPlansInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProvisioningArtifacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProvisioningArtifacts(ctx context.Context, params *servicecatalog.ListProvisioningArtifactsInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisioningArtifactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisioningArtifacts")
	}

	var r0 *servicecatalog.ListProvisioningArtifactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListProvisioningArtifactsInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisioningArtifactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListProvisioningArtifactsInput, ...func(*servicecatalog.Options)) *servicecatalog.ListProvisioningArtifactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListProvisioningArtifactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListProvisioningArtifactsInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProvisioningArtifactsForServiceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProvisioningArtifactsForServiceAction(ctx context.Context, params *servicecatalog.ListProvisioningArtifactsForServiceActionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProvisioningArtifactsForServiceAction")
	}

	var r0 *servicecatalog.ListProvisioningArtifactsForServiceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListProvisioningArtifactsForServiceActionInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListProvisioningArtifactsForServiceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListProvisioningArtifactsForServiceActionInput, ...func(*servicecatalog.Options)) *servicecatalog.ListProvisioningArtifactsForServiceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListProvisioningArtifactsForServiceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListProvisioningArtifactsForServiceActionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecordHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecordHistory(ctx context.Context, params *servicecatalog.ListRecordHistoryInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListRecordHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecordHistory")
	}

	var r0 *servicecatalog.ListRecordHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListRecordHistoryInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListRecordHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListRecordHistoryInput, ...func(*servicecatalog.Options)) *servicecatalog.ListRecordHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListRecordHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListRecordHistoryInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourcesForTagOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourcesForTagOption(ctx context.Context, params *servicecatalog.ListResourcesForTagOptionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListResourcesForTagOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourcesForTagOption")
	}

	var r0 *servicecatalog.ListResourcesForTagOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListResourcesForTagOptionInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListResourcesForTagOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListResourcesForTagOptionInput, ...func(*servicecatalog.Options)) *servicecatalog.ListResourcesForTagOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListResourcesForTagOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListResourcesForTagOptionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceActions(ctx context.Context, params *servicecatalog.ListServiceActionsInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListServiceActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceActions")
	}

	var r0 *servicecatalog.ListServiceActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListServiceActionsInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListServiceActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListServiceActionsInput, ...func(*servicecatalog.Options)) *servicecatalog.ListServiceActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListServiceActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListServiceActionsInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListServiceActionsForProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListServiceActionsForProvisioningArtifact(ctx context.Context, params *servicecatalog.ListServiceActionsForProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListServiceActionsForProvisioningArtifact")
	}

	var r0 *servicecatalog.ListServiceActionsForProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListServiceActionsForProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListServiceActionsForProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListServiceActionsForProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.ListServiceActionsForProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListServiceActionsForProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListServiceActionsForProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStackInstancesForProvisionedProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStackInstancesForProvisionedProduct(ctx context.Context, params *servicecatalog.ListStackInstancesForProvisionedProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStackInstancesForProvisionedProduct")
	}

	var r0 *servicecatalog.ListStackInstancesForProvisionedProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListStackInstancesForProvisionedProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListStackInstancesForProvisionedProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListStackInstancesForProvisionedProductInput, ...func(*servicecatalog.Options)) *servicecatalog.ListStackInstancesForProvisionedProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListStackInstancesForProvisionedProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListStackInstancesForProvisionedProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagOptions(ctx context.Context, params *servicecatalog.ListTagOptionsInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ListTagOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagOptions")
	}

	var r0 *servicecatalog.ListTagOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListTagOptionsInput, ...func(*servicecatalog.Options)) (*servicecatalog.ListTagOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ListTagOptionsInput, ...func(*servicecatalog.Options)) *servicecatalog.ListTagOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ListTagOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ListTagOptionsInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyProvisionProductEngineWorkflowResult provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) NotifyProvisionProductEngineWorkflowResult(ctx context.Context, params *servicecatalog.NotifyProvisionProductEngineWorkflowResultInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyProvisionProductEngineWorkflowResult")
	}

	var r0 *servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.NotifyProvisionProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) (*servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.NotifyProvisionProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) *servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.NotifyProvisionProductEngineWorkflowResultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.NotifyProvisionProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyTerminateProvisionedProductEngineWorkflowResult provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) NotifyTerminateProvisionedProductEngineWorkflowResult(ctx context.Context, params *servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyTerminateProvisionedProductEngineWorkflowResult")
	}

	var r0 *servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) (*servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) *servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.NotifyTerminateProvisionedProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotifyUpdateProvisionedProductEngineWorkflowResult provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) NotifyUpdateProvisionedProductEngineWorkflowResult(ctx context.Context, params *servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for NotifyUpdateProvisionedProductEngineWorkflowResult")
	}

	var r0 *servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) (*servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) *servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.NotifyUpdateProvisionedProductEngineWorkflowResultInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() servicecatalog.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 servicecatalog.Options
	if rf, ok := ret.Get(0).(func() servicecatalog.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(servicecatalog.Options)
	}

	return r0
}

// ProvisionProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ProvisionProduct(ctx context.Context, params *servicecatalog.ProvisionProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ProvisionProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ProvisionProduct")
	}

	var r0 *servicecatalog.ProvisionProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ProvisionProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.ProvisionProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ProvisionProductInput, ...func(*servicecatalog.Options)) *servicecatalog.ProvisionProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ProvisionProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ProvisionProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectPortfolioShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectPortfolioShare(ctx context.Context, params *servicecatalog.RejectPortfolioShareInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.RejectPortfolioShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectPortfolioShare")
	}

	var r0 *servicecatalog.RejectPortfolioShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.RejectPortfolioShareInput, ...func(*servicecatalog.Options)) (*servicecatalog.RejectPortfolioShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.RejectPortfolioShareInput, ...func(*servicecatalog.Options)) *servicecatalog.RejectPortfolioShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.RejectPortfolioShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.RejectPortfolioShareInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ScanProvisionedProducts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ScanProvisionedProducts(ctx context.Context, params *servicecatalog.ScanProvisionedProductsInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.ScanProvisionedProductsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ScanProvisionedProducts")
	}

	var r0 *servicecatalog.ScanProvisionedProductsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ScanProvisionedProductsInput, ...func(*servicecatalog.Options)) (*servicecatalog.ScanProvisionedProductsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.ScanProvisionedProductsInput, ...func(*servicecatalog.Options)) *servicecatalog.ScanProvisionedProductsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.ScanProvisionedProductsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.ScanProvisionedProductsInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProducts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchProducts(ctx context.Context, params *servicecatalog.SearchProductsInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.SearchProductsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchProducts")
	}

	var r0 *servicecatalog.SearchProductsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.SearchProductsInput, ...func(*servicecatalog.Options)) (*servicecatalog.SearchProductsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.SearchProductsInput, ...func(*servicecatalog.Options)) *servicecatalog.SearchProductsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.SearchProductsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.SearchProductsInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProductsAsAdmin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchProductsAsAdmin(ctx context.Context, params *servicecatalog.SearchProductsAsAdminInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.SearchProductsAsAdminOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchProductsAsAdmin")
	}

	var r0 *servicecatalog.SearchProductsAsAdminOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.SearchProductsAsAdminInput, ...func(*servicecatalog.Options)) (*servicecatalog.SearchProductsAsAdminOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.SearchProductsAsAdminInput, ...func(*servicecatalog.Options)) *servicecatalog.SearchProductsAsAdminOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.SearchProductsAsAdminOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.SearchProductsAsAdminInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProvisionedProducts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchProvisionedProducts(ctx context.Context, params *servicecatalog.SearchProvisionedProductsInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.SearchProvisionedProductsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchProvisionedProducts")
	}

	var r0 *servicecatalog.SearchProvisionedProductsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.SearchProvisionedProductsInput, ...func(*servicecatalog.Options)) (*servicecatalog.SearchProvisionedProductsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.SearchProvisionedProductsInput, ...func(*servicecatalog.Options)) *servicecatalog.SearchProvisionedProductsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.SearchProvisionedProductsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.SearchProvisionedProductsInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateProvisionedProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TerminateProvisionedProduct(ctx context.Context, params *servicecatalog.TerminateProvisionedProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.TerminateProvisionedProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateProvisionedProduct")
	}

	var r0 *servicecatalog.TerminateProvisionedProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.TerminateProvisionedProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.TerminateProvisionedProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.TerminateProvisionedProductInput, ...func(*servicecatalog.Options)) *servicecatalog.TerminateProvisionedProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.TerminateProvisionedProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.TerminateProvisionedProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConstraint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConstraint(ctx context.Context, params *servicecatalog.UpdateConstraintInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdateConstraintOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConstraint")
	}

	var r0 *servicecatalog.UpdateConstraintOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateConstraintInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdateConstraintOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateConstraintInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdateConstraintOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdateConstraintOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdateConstraintInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePortfolio(ctx context.Context, params *servicecatalog.UpdatePortfolioInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdatePortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePortfolio")
	}

	var r0 *servicecatalog.UpdatePortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdatePortfolioInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdatePortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdatePortfolioInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdatePortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdatePortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdatePortfolioInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePortfolioShare provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePortfolioShare(ctx context.Context, params *servicecatalog.UpdatePortfolioShareInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdatePortfolioShareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePortfolioShare")
	}

	var r0 *servicecatalog.UpdatePortfolioShareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdatePortfolioShareInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdatePortfolioShareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdatePortfolioShareInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdatePortfolioShareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdatePortfolioShareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdatePortfolioShareInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProduct(ctx context.Context, params *servicecatalog.UpdateProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdateProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 *servicecatalog.UpdateProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdateProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateProductInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdateProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdateProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdateProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvisionedProduct provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProvisionedProduct(ctx context.Context, params *servicecatalog.UpdateProvisionedProductInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdateProvisionedProductOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvisionedProduct")
	}

	var r0 *servicecatalog.UpdateProvisionedProductOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateProvisionedProductInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdateProvisionedProductOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateProvisionedProductInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdateProvisionedProductOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdateProvisionedProductOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdateProvisionedProductInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvisionedProductProperties provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProvisionedProductProperties(ctx context.Context, params *servicecatalog.UpdateProvisionedProductPropertiesInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvisionedProductProperties")
	}

	var r0 *servicecatalog.UpdateProvisionedProductPropertiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateProvisionedProductPropertiesInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdateProvisionedProductPropertiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateProvisionedProductPropertiesInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdateProvisionedProductPropertiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdateProvisionedProductPropertiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdateProvisionedProductPropertiesInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProvisioningArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProvisioningArtifact(ctx context.Context, params *servicecatalog.UpdateProvisioningArtifactInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdateProvisioningArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProvisioningArtifact")
	}

	var r0 *servicecatalog.UpdateProvisioningArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateProvisioningArtifactInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdateProvisioningArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateProvisioningArtifactInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdateProvisioningArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdateProvisioningArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdateProvisioningArtifactInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateServiceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateServiceAction(ctx context.Context, params *servicecatalog.UpdateServiceActionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdateServiceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateServiceAction")
	}

	var r0 *servicecatalog.UpdateServiceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateServiceActionInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdateServiceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateServiceActionInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdateServiceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdateServiceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdateServiceActionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTagOption provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTagOption(ctx context.Context, params *servicecatalog.UpdateTagOptionInput, optFns ...func(*servicecatalog.Options)) (*servicecatalog.UpdateTagOptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTagOption")
	}

	var r0 *servicecatalog.UpdateTagOptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateTagOptionInput, ...func(*servicecatalog.Options)) (*servicecatalog.UpdateTagOptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *servicecatalog.UpdateTagOptionInput, ...func(*servicecatalog.Options)) *servicecatalog.UpdateTagOptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*servicecatalog.UpdateTagOptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *servicecatalog.UpdateTagOptionInput, ...func(*servicecatalog.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
