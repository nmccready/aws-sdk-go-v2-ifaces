// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	groundstation "github.com/aws/aws-sdk-go-v2/service/groundstation"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelContact(ctx context.Context, params *groundstation.CancelContactInput, optFns ...func(*groundstation.Options)) (*groundstation.CancelContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelContact")
	}

	var r0 *groundstation.CancelContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CancelContactInput, ...func(*groundstation.Options)) (*groundstation.CancelContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CancelContactInput, ...func(*groundstation.Options)) *groundstation.CancelContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.CancelContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.CancelContactInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConfig(ctx context.Context, params *groundstation.CreateConfigInput, optFns ...func(*groundstation.Options)) (*groundstation.CreateConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConfig")
	}

	var r0 *groundstation.CreateConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CreateConfigInput, ...func(*groundstation.Options)) (*groundstation.CreateConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CreateConfigInput, ...func(*groundstation.Options)) *groundstation.CreateConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.CreateConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.CreateConfigInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataflowEndpointGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataflowEndpointGroup(ctx context.Context, params *groundstation.CreateDataflowEndpointGroupInput, optFns ...func(*groundstation.Options)) (*groundstation.CreateDataflowEndpointGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataflowEndpointGroup")
	}

	var r0 *groundstation.CreateDataflowEndpointGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CreateDataflowEndpointGroupInput, ...func(*groundstation.Options)) (*groundstation.CreateDataflowEndpointGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CreateDataflowEndpointGroupInput, ...func(*groundstation.Options)) *groundstation.CreateDataflowEndpointGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.CreateDataflowEndpointGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.CreateDataflowEndpointGroupInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEphemeris provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEphemeris(ctx context.Context, params *groundstation.CreateEphemerisInput, optFns ...func(*groundstation.Options)) (*groundstation.CreateEphemerisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEphemeris")
	}

	var r0 *groundstation.CreateEphemerisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CreateEphemerisInput, ...func(*groundstation.Options)) (*groundstation.CreateEphemerisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CreateEphemerisInput, ...func(*groundstation.Options)) *groundstation.CreateEphemerisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.CreateEphemerisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.CreateEphemerisInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMissionProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMissionProfile(ctx context.Context, params *groundstation.CreateMissionProfileInput, optFns ...func(*groundstation.Options)) (*groundstation.CreateMissionProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMissionProfile")
	}

	var r0 *groundstation.CreateMissionProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CreateMissionProfileInput, ...func(*groundstation.Options)) (*groundstation.CreateMissionProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.CreateMissionProfileInput, ...func(*groundstation.Options)) *groundstation.CreateMissionProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.CreateMissionProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.CreateMissionProfileInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConfig(ctx context.Context, params *groundstation.DeleteConfigInput, optFns ...func(*groundstation.Options)) (*groundstation.DeleteConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConfig")
	}

	var r0 *groundstation.DeleteConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DeleteConfigInput, ...func(*groundstation.Options)) (*groundstation.DeleteConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DeleteConfigInput, ...func(*groundstation.Options)) *groundstation.DeleteConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.DeleteConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.DeleteConfigInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataflowEndpointGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataflowEndpointGroup(ctx context.Context, params *groundstation.DeleteDataflowEndpointGroupInput, optFns ...func(*groundstation.Options)) (*groundstation.DeleteDataflowEndpointGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataflowEndpointGroup")
	}

	var r0 *groundstation.DeleteDataflowEndpointGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DeleteDataflowEndpointGroupInput, ...func(*groundstation.Options)) (*groundstation.DeleteDataflowEndpointGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DeleteDataflowEndpointGroupInput, ...func(*groundstation.Options)) *groundstation.DeleteDataflowEndpointGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.DeleteDataflowEndpointGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.DeleteDataflowEndpointGroupInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEphemeris provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEphemeris(ctx context.Context, params *groundstation.DeleteEphemerisInput, optFns ...func(*groundstation.Options)) (*groundstation.DeleteEphemerisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEphemeris")
	}

	var r0 *groundstation.DeleteEphemerisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DeleteEphemerisInput, ...func(*groundstation.Options)) (*groundstation.DeleteEphemerisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DeleteEphemerisInput, ...func(*groundstation.Options)) *groundstation.DeleteEphemerisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.DeleteEphemerisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.DeleteEphemerisInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMissionProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMissionProfile(ctx context.Context, params *groundstation.DeleteMissionProfileInput, optFns ...func(*groundstation.Options)) (*groundstation.DeleteMissionProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMissionProfile")
	}

	var r0 *groundstation.DeleteMissionProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DeleteMissionProfileInput, ...func(*groundstation.Options)) (*groundstation.DeleteMissionProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DeleteMissionProfileInput, ...func(*groundstation.Options)) *groundstation.DeleteMissionProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.DeleteMissionProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.DeleteMissionProfileInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeContact(ctx context.Context, params *groundstation.DescribeContactInput, optFns ...func(*groundstation.Options)) (*groundstation.DescribeContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeContact")
	}

	var r0 *groundstation.DescribeContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DescribeContactInput, ...func(*groundstation.Options)) (*groundstation.DescribeContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DescribeContactInput, ...func(*groundstation.Options)) *groundstation.DescribeContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.DescribeContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.DescribeContactInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEphemeris provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEphemeris(ctx context.Context, params *groundstation.DescribeEphemerisInput, optFns ...func(*groundstation.Options)) (*groundstation.DescribeEphemerisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEphemeris")
	}

	var r0 *groundstation.DescribeEphemerisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DescribeEphemerisInput, ...func(*groundstation.Options)) (*groundstation.DescribeEphemerisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.DescribeEphemerisInput, ...func(*groundstation.Options)) *groundstation.DescribeEphemerisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.DescribeEphemerisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.DescribeEphemerisInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAgentConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAgentConfiguration(ctx context.Context, params *groundstation.GetAgentConfigurationInput, optFns ...func(*groundstation.Options)) (*groundstation.GetAgentConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAgentConfiguration")
	}

	var r0 *groundstation.GetAgentConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetAgentConfigurationInput, ...func(*groundstation.Options)) (*groundstation.GetAgentConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetAgentConfigurationInput, ...func(*groundstation.Options)) *groundstation.GetAgentConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.GetAgentConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.GetAgentConfigurationInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConfig(ctx context.Context, params *groundstation.GetConfigInput, optFns ...func(*groundstation.Options)) (*groundstation.GetConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConfig")
	}

	var r0 *groundstation.GetConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetConfigInput, ...func(*groundstation.Options)) (*groundstation.GetConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetConfigInput, ...func(*groundstation.Options)) *groundstation.GetConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.GetConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.GetConfigInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataflowEndpointGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataflowEndpointGroup(ctx context.Context, params *groundstation.GetDataflowEndpointGroupInput, optFns ...func(*groundstation.Options)) (*groundstation.GetDataflowEndpointGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataflowEndpointGroup")
	}

	var r0 *groundstation.GetDataflowEndpointGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetDataflowEndpointGroupInput, ...func(*groundstation.Options)) (*groundstation.GetDataflowEndpointGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetDataflowEndpointGroupInput, ...func(*groundstation.Options)) *groundstation.GetDataflowEndpointGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.GetDataflowEndpointGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.GetDataflowEndpointGroupInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMinuteUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMinuteUsage(ctx context.Context, params *groundstation.GetMinuteUsageInput, optFns ...func(*groundstation.Options)) (*groundstation.GetMinuteUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMinuteUsage")
	}

	var r0 *groundstation.GetMinuteUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetMinuteUsageInput, ...func(*groundstation.Options)) (*groundstation.GetMinuteUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetMinuteUsageInput, ...func(*groundstation.Options)) *groundstation.GetMinuteUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.GetMinuteUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.GetMinuteUsageInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMissionProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMissionProfile(ctx context.Context, params *groundstation.GetMissionProfileInput, optFns ...func(*groundstation.Options)) (*groundstation.GetMissionProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMissionProfile")
	}

	var r0 *groundstation.GetMissionProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetMissionProfileInput, ...func(*groundstation.Options)) (*groundstation.GetMissionProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetMissionProfileInput, ...func(*groundstation.Options)) *groundstation.GetMissionProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.GetMissionProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.GetMissionProfileInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSatellite provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSatellite(ctx context.Context, params *groundstation.GetSatelliteInput, optFns ...func(*groundstation.Options)) (*groundstation.GetSatelliteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSatellite")
	}

	var r0 *groundstation.GetSatelliteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetSatelliteInput, ...func(*groundstation.Options)) (*groundstation.GetSatelliteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.GetSatelliteInput, ...func(*groundstation.Options)) *groundstation.GetSatelliteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.GetSatelliteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.GetSatelliteInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConfigs(ctx context.Context, params *groundstation.ListConfigsInput, optFns ...func(*groundstation.Options)) (*groundstation.ListConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConfigs")
	}

	var r0 *groundstation.ListConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListConfigsInput, ...func(*groundstation.Options)) (*groundstation.ListConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListConfigsInput, ...func(*groundstation.Options)) *groundstation.ListConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ListConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ListConfigsInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContacts(ctx context.Context, params *groundstation.ListContactsInput, optFns ...func(*groundstation.Options)) (*groundstation.ListContactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContacts")
	}

	var r0 *groundstation.ListContactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListContactsInput, ...func(*groundstation.Options)) (*groundstation.ListContactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListContactsInput, ...func(*groundstation.Options)) *groundstation.ListContactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ListContactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ListContactsInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataflowEndpointGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataflowEndpointGroups(ctx context.Context, params *groundstation.ListDataflowEndpointGroupsInput, optFns ...func(*groundstation.Options)) (*groundstation.ListDataflowEndpointGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataflowEndpointGroups")
	}

	var r0 *groundstation.ListDataflowEndpointGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListDataflowEndpointGroupsInput, ...func(*groundstation.Options)) (*groundstation.ListDataflowEndpointGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListDataflowEndpointGroupsInput, ...func(*groundstation.Options)) *groundstation.ListDataflowEndpointGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ListDataflowEndpointGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ListDataflowEndpointGroupsInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEphemerides provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEphemerides(ctx context.Context, params *groundstation.ListEphemeridesInput, optFns ...func(*groundstation.Options)) (*groundstation.ListEphemeridesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEphemerides")
	}

	var r0 *groundstation.ListEphemeridesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListEphemeridesInput, ...func(*groundstation.Options)) (*groundstation.ListEphemeridesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListEphemeridesInput, ...func(*groundstation.Options)) *groundstation.ListEphemeridesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ListEphemeridesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ListEphemeridesInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroundStations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroundStations(ctx context.Context, params *groundstation.ListGroundStationsInput, optFns ...func(*groundstation.Options)) (*groundstation.ListGroundStationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroundStations")
	}

	var r0 *groundstation.ListGroundStationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListGroundStationsInput, ...func(*groundstation.Options)) (*groundstation.ListGroundStationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListGroundStationsInput, ...func(*groundstation.Options)) *groundstation.ListGroundStationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ListGroundStationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ListGroundStationsInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMissionProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMissionProfiles(ctx context.Context, params *groundstation.ListMissionProfilesInput, optFns ...func(*groundstation.Options)) (*groundstation.ListMissionProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMissionProfiles")
	}

	var r0 *groundstation.ListMissionProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListMissionProfilesInput, ...func(*groundstation.Options)) (*groundstation.ListMissionProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListMissionProfilesInput, ...func(*groundstation.Options)) *groundstation.ListMissionProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ListMissionProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ListMissionProfilesInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSatellites provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSatellites(ctx context.Context, params *groundstation.ListSatellitesInput, optFns ...func(*groundstation.Options)) (*groundstation.ListSatellitesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSatellites")
	}

	var r0 *groundstation.ListSatellitesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListSatellitesInput, ...func(*groundstation.Options)) (*groundstation.ListSatellitesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListSatellitesInput, ...func(*groundstation.Options)) *groundstation.ListSatellitesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ListSatellitesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ListSatellitesInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *groundstation.ListTagsForResourceInput, optFns ...func(*groundstation.Options)) (*groundstation.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *groundstation.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListTagsForResourceInput, ...func(*groundstation.Options)) (*groundstation.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ListTagsForResourceInput, ...func(*groundstation.Options)) *groundstation.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ListTagsForResourceInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() groundstation.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 groundstation.Options
	if rf, ok := ret.Get(0).(func() groundstation.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(groundstation.Options)
	}

	return r0
}

// RegisterAgent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterAgent(ctx context.Context, params *groundstation.RegisterAgentInput, optFns ...func(*groundstation.Options)) (*groundstation.RegisterAgentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterAgent")
	}

	var r0 *groundstation.RegisterAgentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.RegisterAgentInput, ...func(*groundstation.Options)) (*groundstation.RegisterAgentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.RegisterAgentInput, ...func(*groundstation.Options)) *groundstation.RegisterAgentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.RegisterAgentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.RegisterAgentInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReserveContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReserveContact(ctx context.Context, params *groundstation.ReserveContactInput, optFns ...func(*groundstation.Options)) (*groundstation.ReserveContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReserveContact")
	}

	var r0 *groundstation.ReserveContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ReserveContactInput, ...func(*groundstation.Options)) (*groundstation.ReserveContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.ReserveContactInput, ...func(*groundstation.Options)) *groundstation.ReserveContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.ReserveContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.ReserveContactInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *groundstation.TagResourceInput, optFns ...func(*groundstation.Options)) (*groundstation.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *groundstation.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.TagResourceInput, ...func(*groundstation.Options)) (*groundstation.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.TagResourceInput, ...func(*groundstation.Options)) *groundstation.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.TagResourceInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *groundstation.UntagResourceInput, optFns ...func(*groundstation.Options)) (*groundstation.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *groundstation.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UntagResourceInput, ...func(*groundstation.Options)) (*groundstation.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UntagResourceInput, ...func(*groundstation.Options)) *groundstation.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.UntagResourceInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAgentStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAgentStatus(ctx context.Context, params *groundstation.UpdateAgentStatusInput, optFns ...func(*groundstation.Options)) (*groundstation.UpdateAgentStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAgentStatus")
	}

	var r0 *groundstation.UpdateAgentStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UpdateAgentStatusInput, ...func(*groundstation.Options)) (*groundstation.UpdateAgentStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UpdateAgentStatusInput, ...func(*groundstation.Options)) *groundstation.UpdateAgentStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.UpdateAgentStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.UpdateAgentStatusInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConfig(ctx context.Context, params *groundstation.UpdateConfigInput, optFns ...func(*groundstation.Options)) (*groundstation.UpdateConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConfig")
	}

	var r0 *groundstation.UpdateConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UpdateConfigInput, ...func(*groundstation.Options)) (*groundstation.UpdateConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UpdateConfigInput, ...func(*groundstation.Options)) *groundstation.UpdateConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.UpdateConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.UpdateConfigInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEphemeris provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEphemeris(ctx context.Context, params *groundstation.UpdateEphemerisInput, optFns ...func(*groundstation.Options)) (*groundstation.UpdateEphemerisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEphemeris")
	}

	var r0 *groundstation.UpdateEphemerisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UpdateEphemerisInput, ...func(*groundstation.Options)) (*groundstation.UpdateEphemerisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UpdateEphemerisInput, ...func(*groundstation.Options)) *groundstation.UpdateEphemerisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.UpdateEphemerisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.UpdateEphemerisInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMissionProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMissionProfile(ctx context.Context, params *groundstation.UpdateMissionProfileInput, optFns ...func(*groundstation.Options)) (*groundstation.UpdateMissionProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMissionProfile")
	}

	var r0 *groundstation.UpdateMissionProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UpdateMissionProfileInput, ...func(*groundstation.Options)) (*groundstation.UpdateMissionProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *groundstation.UpdateMissionProfileInput, ...func(*groundstation.Options)) *groundstation.UpdateMissionProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*groundstation.UpdateMissionProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *groundstation.UpdateMissionProfileInput, ...func(*groundstation.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
