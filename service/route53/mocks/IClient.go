// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	route53 "github.com/aws/aws-sdk-go-v2/service/route53"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ActivateKeySigningKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateKeySigningKey(ctx context.Context, params *route53.ActivateKeySigningKeyInput, optFns ...func(*route53.Options)) (*route53.ActivateKeySigningKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateKeySigningKey")
	}

	var r0 *route53.ActivateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ActivateKeySigningKeyInput, ...func(*route53.Options)) (*route53.ActivateKeySigningKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ActivateKeySigningKeyInput, ...func(*route53.Options)) *route53.ActivateKeySigningKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ActivateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ActivateKeySigningKeyInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateVPCWithHostedZone provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateVPCWithHostedZone(ctx context.Context, params *route53.AssociateVPCWithHostedZoneInput, optFns ...func(*route53.Options)) (*route53.AssociateVPCWithHostedZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateVPCWithHostedZone")
	}

	var r0 *route53.AssociateVPCWithHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.AssociateVPCWithHostedZoneInput, ...func(*route53.Options)) (*route53.AssociateVPCWithHostedZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.AssociateVPCWithHostedZoneInput, ...func(*route53.Options)) *route53.AssociateVPCWithHostedZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.AssociateVPCWithHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.AssociateVPCWithHostedZoneInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeCidrCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ChangeCidrCollection(ctx context.Context, params *route53.ChangeCidrCollectionInput, optFns ...func(*route53.Options)) (*route53.ChangeCidrCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeCidrCollection")
	}

	var r0 *route53.ChangeCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeCidrCollectionInput, ...func(*route53.Options)) (*route53.ChangeCidrCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeCidrCollectionInput, ...func(*route53.Options)) *route53.ChangeCidrCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ChangeCidrCollectionInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeResourceRecordSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ChangeResourceRecordSets(ctx context.Context, params *route53.ChangeResourceRecordSetsInput, optFns ...func(*route53.Options)) (*route53.ChangeResourceRecordSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeResourceRecordSets")
	}

	var r0 *route53.ChangeResourceRecordSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeResourceRecordSetsInput, ...func(*route53.Options)) (*route53.ChangeResourceRecordSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeResourceRecordSetsInput, ...func(*route53.Options)) *route53.ChangeResourceRecordSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeResourceRecordSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ChangeResourceRecordSetsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChangeTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ChangeTagsForResource(ctx context.Context, params *route53.ChangeTagsForResourceInput, optFns ...func(*route53.Options)) (*route53.ChangeTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChangeTagsForResource")
	}

	var r0 *route53.ChangeTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeTagsForResourceInput, ...func(*route53.Options)) (*route53.ChangeTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ChangeTagsForResourceInput, ...func(*route53.Options)) *route53.ChangeTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ChangeTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ChangeTagsForResourceInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCidrCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCidrCollection(ctx context.Context, params *route53.CreateCidrCollectionInput, optFns ...func(*route53.Options)) (*route53.CreateCidrCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCidrCollection")
	}

	var r0 *route53.CreateCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateCidrCollectionInput, ...func(*route53.Options)) (*route53.CreateCidrCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateCidrCollectionInput, ...func(*route53.Options)) *route53.CreateCidrCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateCidrCollectionInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHealthCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHealthCheck(ctx context.Context, params *route53.CreateHealthCheckInput, optFns ...func(*route53.Options)) (*route53.CreateHealthCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHealthCheck")
	}

	var r0 *route53.CreateHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateHealthCheckInput, ...func(*route53.Options)) (*route53.CreateHealthCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateHealthCheckInput, ...func(*route53.Options)) *route53.CreateHealthCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateHealthCheckInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHostedZone provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHostedZone(ctx context.Context, params *route53.CreateHostedZoneInput, optFns ...func(*route53.Options)) (*route53.CreateHostedZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHostedZone")
	}

	var r0 *route53.CreateHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateHostedZoneInput, ...func(*route53.Options)) (*route53.CreateHostedZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateHostedZoneInput, ...func(*route53.Options)) *route53.CreateHostedZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateHostedZoneInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateKeySigningKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateKeySigningKey(ctx context.Context, params *route53.CreateKeySigningKeyInput, optFns ...func(*route53.Options)) (*route53.CreateKeySigningKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeySigningKey")
	}

	var r0 *route53.CreateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateKeySigningKeyInput, ...func(*route53.Options)) (*route53.CreateKeySigningKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateKeySigningKeyInput, ...func(*route53.Options)) *route53.CreateKeySigningKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateKeySigningKeyInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateQueryLoggingConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateQueryLoggingConfig(ctx context.Context, params *route53.CreateQueryLoggingConfigInput, optFns ...func(*route53.Options)) (*route53.CreateQueryLoggingConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateQueryLoggingConfig")
	}

	var r0 *route53.CreateQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateQueryLoggingConfigInput, ...func(*route53.Options)) (*route53.CreateQueryLoggingConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateQueryLoggingConfigInput, ...func(*route53.Options)) *route53.CreateQueryLoggingConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateQueryLoggingConfigInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReusableDelegationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReusableDelegationSet(ctx context.Context, params *route53.CreateReusableDelegationSetInput, optFns ...func(*route53.Options)) (*route53.CreateReusableDelegationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReusableDelegationSet")
	}

	var r0 *route53.CreateReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateReusableDelegationSetInput, ...func(*route53.Options)) (*route53.CreateReusableDelegationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateReusableDelegationSetInput, ...func(*route53.Options)) *route53.CreateReusableDelegationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateReusableDelegationSetInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrafficPolicy(ctx context.Context, params *route53.CreateTrafficPolicyInput, optFns ...func(*route53.Options)) (*route53.CreateTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrafficPolicy")
	}

	var r0 *route53.CreateTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyInput, ...func(*route53.Options)) (*route53.CreateTrafficPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyInput, ...func(*route53.Options)) *route53.CreateTrafficPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateTrafficPolicyInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicyInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrafficPolicyInstance(ctx context.Context, params *route53.CreateTrafficPolicyInstanceInput, optFns ...func(*route53.Options)) (*route53.CreateTrafficPolicyInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrafficPolicyInstance")
	}

	var r0 *route53.CreateTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyInstanceInput, ...func(*route53.Options)) (*route53.CreateTrafficPolicyInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyInstanceInput, ...func(*route53.Options)) *route53.CreateTrafficPolicyInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateTrafficPolicyInstanceInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicyVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrafficPolicyVersion(ctx context.Context, params *route53.CreateTrafficPolicyVersionInput, optFns ...func(*route53.Options)) (*route53.CreateTrafficPolicyVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrafficPolicyVersion")
	}

	var r0 *route53.CreateTrafficPolicyVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyVersionInput, ...func(*route53.Options)) (*route53.CreateTrafficPolicyVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateTrafficPolicyVersionInput, ...func(*route53.Options)) *route53.CreateTrafficPolicyVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateTrafficPolicyVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateTrafficPolicyVersionInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVPCAssociationAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVPCAssociationAuthorization(ctx context.Context, params *route53.CreateVPCAssociationAuthorizationInput, optFns ...func(*route53.Options)) (*route53.CreateVPCAssociationAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVPCAssociationAuthorization")
	}

	var r0 *route53.CreateVPCAssociationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateVPCAssociationAuthorizationInput, ...func(*route53.Options)) (*route53.CreateVPCAssociationAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.CreateVPCAssociationAuthorizationInput, ...func(*route53.Options)) *route53.CreateVPCAssociationAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.CreateVPCAssociationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.CreateVPCAssociationAuthorizationInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeactivateKeySigningKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeactivateKeySigningKey(ctx context.Context, params *route53.DeactivateKeySigningKeyInput, optFns ...func(*route53.Options)) (*route53.DeactivateKeySigningKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeactivateKeySigningKey")
	}

	var r0 *route53.DeactivateKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeactivateKeySigningKeyInput, ...func(*route53.Options)) (*route53.DeactivateKeySigningKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeactivateKeySigningKeyInput, ...func(*route53.Options)) *route53.DeactivateKeySigningKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeactivateKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeactivateKeySigningKeyInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCidrCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCidrCollection(ctx context.Context, params *route53.DeleteCidrCollectionInput, optFns ...func(*route53.Options)) (*route53.DeleteCidrCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCidrCollection")
	}

	var r0 *route53.DeleteCidrCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteCidrCollectionInput, ...func(*route53.Options)) (*route53.DeleteCidrCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteCidrCollectionInput, ...func(*route53.Options)) *route53.DeleteCidrCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteCidrCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteCidrCollectionInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHealthCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHealthCheck(ctx context.Context, params *route53.DeleteHealthCheckInput, optFns ...func(*route53.Options)) (*route53.DeleteHealthCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHealthCheck")
	}

	var r0 *route53.DeleteHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteHealthCheckInput, ...func(*route53.Options)) (*route53.DeleteHealthCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteHealthCheckInput, ...func(*route53.Options)) *route53.DeleteHealthCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteHealthCheckInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHostedZone provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHostedZone(ctx context.Context, params *route53.DeleteHostedZoneInput, optFns ...func(*route53.Options)) (*route53.DeleteHostedZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHostedZone")
	}

	var r0 *route53.DeleteHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteHostedZoneInput, ...func(*route53.Options)) (*route53.DeleteHostedZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteHostedZoneInput, ...func(*route53.Options)) *route53.DeleteHostedZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteHostedZoneInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteKeySigningKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteKeySigningKey(ctx context.Context, params *route53.DeleteKeySigningKeyInput, optFns ...func(*route53.Options)) (*route53.DeleteKeySigningKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeySigningKey")
	}

	var r0 *route53.DeleteKeySigningKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteKeySigningKeyInput, ...func(*route53.Options)) (*route53.DeleteKeySigningKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteKeySigningKeyInput, ...func(*route53.Options)) *route53.DeleteKeySigningKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteKeySigningKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteKeySigningKeyInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteQueryLoggingConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteQueryLoggingConfig(ctx context.Context, params *route53.DeleteQueryLoggingConfigInput, optFns ...func(*route53.Options)) (*route53.DeleteQueryLoggingConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteQueryLoggingConfig")
	}

	var r0 *route53.DeleteQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteQueryLoggingConfigInput, ...func(*route53.Options)) (*route53.DeleteQueryLoggingConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteQueryLoggingConfigInput, ...func(*route53.Options)) *route53.DeleteQueryLoggingConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteQueryLoggingConfigInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReusableDelegationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReusableDelegationSet(ctx context.Context, params *route53.DeleteReusableDelegationSetInput, optFns ...func(*route53.Options)) (*route53.DeleteReusableDelegationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReusableDelegationSet")
	}

	var r0 *route53.DeleteReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteReusableDelegationSetInput, ...func(*route53.Options)) (*route53.DeleteReusableDelegationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteReusableDelegationSetInput, ...func(*route53.Options)) *route53.DeleteReusableDelegationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteReusableDelegationSetInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrafficPolicy(ctx context.Context, params *route53.DeleteTrafficPolicyInput, optFns ...func(*route53.Options)) (*route53.DeleteTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrafficPolicy")
	}

	var r0 *route53.DeleteTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteTrafficPolicyInput, ...func(*route53.Options)) (*route53.DeleteTrafficPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteTrafficPolicyInput, ...func(*route53.Options)) *route53.DeleteTrafficPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteTrafficPolicyInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficPolicyInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrafficPolicyInstance(ctx context.Context, params *route53.DeleteTrafficPolicyInstanceInput, optFns ...func(*route53.Options)) (*route53.DeleteTrafficPolicyInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrafficPolicyInstance")
	}

	var r0 *route53.DeleteTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteTrafficPolicyInstanceInput, ...func(*route53.Options)) (*route53.DeleteTrafficPolicyInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteTrafficPolicyInstanceInput, ...func(*route53.Options)) *route53.DeleteTrafficPolicyInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteTrafficPolicyInstanceInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVPCAssociationAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVPCAssociationAuthorization(ctx context.Context, params *route53.DeleteVPCAssociationAuthorizationInput, optFns ...func(*route53.Options)) (*route53.DeleteVPCAssociationAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVPCAssociationAuthorization")
	}

	var r0 *route53.DeleteVPCAssociationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteVPCAssociationAuthorizationInput, ...func(*route53.Options)) (*route53.DeleteVPCAssociationAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DeleteVPCAssociationAuthorizationInput, ...func(*route53.Options)) *route53.DeleteVPCAssociationAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DeleteVPCAssociationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DeleteVPCAssociationAuthorizationInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableHostedZoneDNSSEC provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableHostedZoneDNSSEC(ctx context.Context, params *route53.DisableHostedZoneDNSSECInput, optFns ...func(*route53.Options)) (*route53.DisableHostedZoneDNSSECOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableHostedZoneDNSSEC")
	}

	var r0 *route53.DisableHostedZoneDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DisableHostedZoneDNSSECInput, ...func(*route53.Options)) (*route53.DisableHostedZoneDNSSECOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DisableHostedZoneDNSSECInput, ...func(*route53.Options)) *route53.DisableHostedZoneDNSSECOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DisableHostedZoneDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DisableHostedZoneDNSSECInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateVPCFromHostedZone provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateVPCFromHostedZone(ctx context.Context, params *route53.DisassociateVPCFromHostedZoneInput, optFns ...func(*route53.Options)) (*route53.DisassociateVPCFromHostedZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateVPCFromHostedZone")
	}

	var r0 *route53.DisassociateVPCFromHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DisassociateVPCFromHostedZoneInput, ...func(*route53.Options)) (*route53.DisassociateVPCFromHostedZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.DisassociateVPCFromHostedZoneInput, ...func(*route53.Options)) *route53.DisassociateVPCFromHostedZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.DisassociateVPCFromHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.DisassociateVPCFromHostedZoneInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableHostedZoneDNSSEC provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableHostedZoneDNSSEC(ctx context.Context, params *route53.EnableHostedZoneDNSSECInput, optFns ...func(*route53.Options)) (*route53.EnableHostedZoneDNSSECOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableHostedZoneDNSSEC")
	}

	var r0 *route53.EnableHostedZoneDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.EnableHostedZoneDNSSECInput, ...func(*route53.Options)) (*route53.EnableHostedZoneDNSSECOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.EnableHostedZoneDNSSECInput, ...func(*route53.Options)) *route53.EnableHostedZoneDNSSECOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.EnableHostedZoneDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.EnableHostedZoneDNSSECInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccountLimit(ctx context.Context, params *route53.GetAccountLimitInput, optFns ...func(*route53.Options)) (*route53.GetAccountLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccountLimit")
	}

	var r0 *route53.GetAccountLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetAccountLimitInput, ...func(*route53.Options)) (*route53.GetAccountLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetAccountLimitInput, ...func(*route53.Options)) *route53.GetAccountLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetAccountLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetAccountLimitInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChange provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChange(ctx context.Context, params *route53.GetChangeInput, optFns ...func(*route53.Options)) (*route53.GetChangeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChange")
	}

	var r0 *route53.GetChangeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetChangeInput, ...func(*route53.Options)) (*route53.GetChangeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetChangeInput, ...func(*route53.Options)) *route53.GetChangeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetChangeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetChangeInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCheckerIpRanges provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCheckerIpRanges(ctx context.Context, params *route53.GetCheckerIpRangesInput, optFns ...func(*route53.Options)) (*route53.GetCheckerIpRangesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCheckerIpRanges")
	}

	var r0 *route53.GetCheckerIpRangesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetCheckerIpRangesInput, ...func(*route53.Options)) (*route53.GetCheckerIpRangesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetCheckerIpRangesInput, ...func(*route53.Options)) *route53.GetCheckerIpRangesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetCheckerIpRangesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetCheckerIpRangesInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDNSSEC provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDNSSEC(ctx context.Context, params *route53.GetDNSSECInput, optFns ...func(*route53.Options)) (*route53.GetDNSSECOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDNSSEC")
	}

	var r0 *route53.GetDNSSECOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetDNSSECInput, ...func(*route53.Options)) (*route53.GetDNSSECOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetDNSSECInput, ...func(*route53.Options)) *route53.GetDNSSECOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetDNSSECOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetDNSSECInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGeoLocation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGeoLocation(ctx context.Context, params *route53.GetGeoLocationInput, optFns ...func(*route53.Options)) (*route53.GetGeoLocationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGeoLocation")
	}

	var r0 *route53.GetGeoLocationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetGeoLocationInput, ...func(*route53.Options)) (*route53.GetGeoLocationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetGeoLocationInput, ...func(*route53.Options)) *route53.GetGeoLocationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetGeoLocationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetGeoLocationInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHealthCheck(ctx context.Context, params *route53.GetHealthCheckInput, optFns ...func(*route53.Options)) (*route53.GetHealthCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthCheck")
	}

	var r0 *route53.GetHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckInput, ...func(*route53.Options)) (*route53.GetHealthCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckInput, ...func(*route53.Options)) *route53.GetHealthCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHealthCheckInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckCount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHealthCheckCount(ctx context.Context, params *route53.GetHealthCheckCountInput, optFns ...func(*route53.Options)) (*route53.GetHealthCheckCountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthCheckCount")
	}

	var r0 *route53.GetHealthCheckCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckCountInput, ...func(*route53.Options)) (*route53.GetHealthCheckCountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckCountInput, ...func(*route53.Options)) *route53.GetHealthCheckCountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHealthCheckCountInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckLastFailureReason provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHealthCheckLastFailureReason(ctx context.Context, params *route53.GetHealthCheckLastFailureReasonInput, optFns ...func(*route53.Options)) (*route53.GetHealthCheckLastFailureReasonOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthCheckLastFailureReason")
	}

	var r0 *route53.GetHealthCheckLastFailureReasonOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckLastFailureReasonInput, ...func(*route53.Options)) (*route53.GetHealthCheckLastFailureReasonOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckLastFailureReasonInput, ...func(*route53.Options)) *route53.GetHealthCheckLastFailureReasonOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckLastFailureReasonOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHealthCheckLastFailureReasonInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHealthCheckStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHealthCheckStatus(ctx context.Context, params *route53.GetHealthCheckStatusInput, optFns ...func(*route53.Options)) (*route53.GetHealthCheckStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHealthCheckStatus")
	}

	var r0 *route53.GetHealthCheckStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckStatusInput, ...func(*route53.Options)) (*route53.GetHealthCheckStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHealthCheckStatusInput, ...func(*route53.Options)) *route53.GetHealthCheckStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHealthCheckStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHealthCheckStatusInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZone provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHostedZone(ctx context.Context, params *route53.GetHostedZoneInput, optFns ...func(*route53.Options)) (*route53.GetHostedZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHostedZone")
	}

	var r0 *route53.GetHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneInput, ...func(*route53.Options)) (*route53.GetHostedZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneInput, ...func(*route53.Options)) *route53.GetHostedZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHostedZoneInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZoneCount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHostedZoneCount(ctx context.Context, params *route53.GetHostedZoneCountInput, optFns ...func(*route53.Options)) (*route53.GetHostedZoneCountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHostedZoneCount")
	}

	var r0 *route53.GetHostedZoneCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneCountInput, ...func(*route53.Options)) (*route53.GetHostedZoneCountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneCountInput, ...func(*route53.Options)) *route53.GetHostedZoneCountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHostedZoneCountInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostedZoneLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHostedZoneLimit(ctx context.Context, params *route53.GetHostedZoneLimitInput, optFns ...func(*route53.Options)) (*route53.GetHostedZoneLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHostedZoneLimit")
	}

	var r0 *route53.GetHostedZoneLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneLimitInput, ...func(*route53.Options)) (*route53.GetHostedZoneLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetHostedZoneLimitInput, ...func(*route53.Options)) *route53.GetHostedZoneLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetHostedZoneLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetHostedZoneLimitInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetQueryLoggingConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetQueryLoggingConfig(ctx context.Context, params *route53.GetQueryLoggingConfigInput, optFns ...func(*route53.Options)) (*route53.GetQueryLoggingConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetQueryLoggingConfig")
	}

	var r0 *route53.GetQueryLoggingConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetQueryLoggingConfigInput, ...func(*route53.Options)) (*route53.GetQueryLoggingConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetQueryLoggingConfigInput, ...func(*route53.Options)) *route53.GetQueryLoggingConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetQueryLoggingConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetQueryLoggingConfigInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReusableDelegationSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReusableDelegationSet(ctx context.Context, params *route53.GetReusableDelegationSetInput, optFns ...func(*route53.Options)) (*route53.GetReusableDelegationSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReusableDelegationSet")
	}

	var r0 *route53.GetReusableDelegationSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetReusableDelegationSetInput, ...func(*route53.Options)) (*route53.GetReusableDelegationSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetReusableDelegationSetInput, ...func(*route53.Options)) *route53.GetReusableDelegationSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetReusableDelegationSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetReusableDelegationSetInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReusableDelegationSetLimit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReusableDelegationSetLimit(ctx context.Context, params *route53.GetReusableDelegationSetLimitInput, optFns ...func(*route53.Options)) (*route53.GetReusableDelegationSetLimitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReusableDelegationSetLimit")
	}

	var r0 *route53.GetReusableDelegationSetLimitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetReusableDelegationSetLimitInput, ...func(*route53.Options)) (*route53.GetReusableDelegationSetLimitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetReusableDelegationSetLimitInput, ...func(*route53.Options)) *route53.GetReusableDelegationSetLimitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetReusableDelegationSetLimitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetReusableDelegationSetLimitInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrafficPolicy(ctx context.Context, params *route53.GetTrafficPolicyInput, optFns ...func(*route53.Options)) (*route53.GetTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrafficPolicy")
	}

	var r0 *route53.GetTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInput, ...func(*route53.Options)) (*route53.GetTrafficPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInput, ...func(*route53.Options)) *route53.GetTrafficPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetTrafficPolicyInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicyInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrafficPolicyInstance(ctx context.Context, params *route53.GetTrafficPolicyInstanceInput, optFns ...func(*route53.Options)) (*route53.GetTrafficPolicyInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrafficPolicyInstance")
	}

	var r0 *route53.GetTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInstanceInput, ...func(*route53.Options)) (*route53.GetTrafficPolicyInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInstanceInput, ...func(*route53.Options)) *route53.GetTrafficPolicyInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetTrafficPolicyInstanceInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicyInstanceCount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrafficPolicyInstanceCount(ctx context.Context, params *route53.GetTrafficPolicyInstanceCountInput, optFns ...func(*route53.Options)) (*route53.GetTrafficPolicyInstanceCountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrafficPolicyInstanceCount")
	}

	var r0 *route53.GetTrafficPolicyInstanceCountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInstanceCountInput, ...func(*route53.Options)) (*route53.GetTrafficPolicyInstanceCountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.GetTrafficPolicyInstanceCountInput, ...func(*route53.Options)) *route53.GetTrafficPolicyInstanceCountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.GetTrafficPolicyInstanceCountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.GetTrafficPolicyInstanceCountInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrBlocks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCidrBlocks(ctx context.Context, params *route53.ListCidrBlocksInput, optFns ...func(*route53.Options)) (*route53.ListCidrBlocksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCidrBlocks")
	}

	var r0 *route53.ListCidrBlocksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrBlocksInput, ...func(*route53.Options)) (*route53.ListCidrBlocksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrBlocksInput, ...func(*route53.Options)) *route53.ListCidrBlocksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrBlocksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListCidrBlocksInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrCollections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCidrCollections(ctx context.Context, params *route53.ListCidrCollectionsInput, optFns ...func(*route53.Options)) (*route53.ListCidrCollectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCidrCollections")
	}

	var r0 *route53.ListCidrCollectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrCollectionsInput, ...func(*route53.Options)) (*route53.ListCidrCollectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrCollectionsInput, ...func(*route53.Options)) *route53.ListCidrCollectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrCollectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListCidrCollectionsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCidrLocations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCidrLocations(ctx context.Context, params *route53.ListCidrLocationsInput, optFns ...func(*route53.Options)) (*route53.ListCidrLocationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCidrLocations")
	}

	var r0 *route53.ListCidrLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrLocationsInput, ...func(*route53.Options)) (*route53.ListCidrLocationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListCidrLocationsInput, ...func(*route53.Options)) *route53.ListCidrLocationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListCidrLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListCidrLocationsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGeoLocations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGeoLocations(ctx context.Context, params *route53.ListGeoLocationsInput, optFns ...func(*route53.Options)) (*route53.ListGeoLocationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGeoLocations")
	}

	var r0 *route53.ListGeoLocationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListGeoLocationsInput, ...func(*route53.Options)) (*route53.ListGeoLocationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListGeoLocationsInput, ...func(*route53.Options)) *route53.ListGeoLocationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListGeoLocationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListGeoLocationsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHealthChecks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHealthChecks(ctx context.Context, params *route53.ListHealthChecksInput, optFns ...func(*route53.Options)) (*route53.ListHealthChecksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHealthChecks")
	}

	var r0 *route53.ListHealthChecksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHealthChecksInput, ...func(*route53.Options)) (*route53.ListHealthChecksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHealthChecksInput, ...func(*route53.Options)) *route53.ListHealthChecksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHealthChecksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListHealthChecksInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZones provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHostedZones(ctx context.Context, params *route53.ListHostedZonesInput, optFns ...func(*route53.Options)) (*route53.ListHostedZonesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHostedZones")
	}

	var r0 *route53.ListHostedZonesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesInput, ...func(*route53.Options)) (*route53.ListHostedZonesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesInput, ...func(*route53.Options)) *route53.ListHostedZonesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListHostedZonesInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZonesByName provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHostedZonesByName(ctx context.Context, params *route53.ListHostedZonesByNameInput, optFns ...func(*route53.Options)) (*route53.ListHostedZonesByNameOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHostedZonesByName")
	}

	var r0 *route53.ListHostedZonesByNameOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesByNameInput, ...func(*route53.Options)) (*route53.ListHostedZonesByNameOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesByNameInput, ...func(*route53.Options)) *route53.ListHostedZonesByNameOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesByNameOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListHostedZonesByNameInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHostedZonesByVPC provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHostedZonesByVPC(ctx context.Context, params *route53.ListHostedZonesByVPCInput, optFns ...func(*route53.Options)) (*route53.ListHostedZonesByVPCOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHostedZonesByVPC")
	}

	var r0 *route53.ListHostedZonesByVPCOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesByVPCInput, ...func(*route53.Options)) (*route53.ListHostedZonesByVPCOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListHostedZonesByVPCInput, ...func(*route53.Options)) *route53.ListHostedZonesByVPCOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListHostedZonesByVPCOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListHostedZonesByVPCInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListQueryLoggingConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListQueryLoggingConfigs(ctx context.Context, params *route53.ListQueryLoggingConfigsInput, optFns ...func(*route53.Options)) (*route53.ListQueryLoggingConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListQueryLoggingConfigs")
	}

	var r0 *route53.ListQueryLoggingConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListQueryLoggingConfigsInput, ...func(*route53.Options)) (*route53.ListQueryLoggingConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListQueryLoggingConfigsInput, ...func(*route53.Options)) *route53.ListQueryLoggingConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListQueryLoggingConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListQueryLoggingConfigsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceRecordSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceRecordSets(ctx context.Context, params *route53.ListResourceRecordSetsInput, optFns ...func(*route53.Options)) (*route53.ListResourceRecordSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceRecordSets")
	}

	var r0 *route53.ListResourceRecordSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListResourceRecordSetsInput, ...func(*route53.Options)) (*route53.ListResourceRecordSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListResourceRecordSetsInput, ...func(*route53.Options)) *route53.ListResourceRecordSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListResourceRecordSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListResourceRecordSetsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReusableDelegationSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReusableDelegationSets(ctx context.Context, params *route53.ListReusableDelegationSetsInput, optFns ...func(*route53.Options)) (*route53.ListReusableDelegationSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReusableDelegationSets")
	}

	var r0 *route53.ListReusableDelegationSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListReusableDelegationSetsInput, ...func(*route53.Options)) (*route53.ListReusableDelegationSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListReusableDelegationSetsInput, ...func(*route53.Options)) *route53.ListReusableDelegationSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListReusableDelegationSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListReusableDelegationSetsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *route53.ListTagsForResourceInput, optFns ...func(*route53.Options)) (*route53.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *route53.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTagsForResourceInput, ...func(*route53.Options)) (*route53.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTagsForResourceInput, ...func(*route53.Options)) *route53.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTagsForResourceInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResources(ctx context.Context, params *route53.ListTagsForResourcesInput, optFns ...func(*route53.Options)) (*route53.ListTagsForResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResources")
	}

	var r0 *route53.ListTagsForResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTagsForResourcesInput, ...func(*route53.Options)) (*route53.ListTagsForResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTagsForResourcesInput, ...func(*route53.Options)) *route53.ListTagsForResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTagsForResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTagsForResourcesInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrafficPolicies(ctx context.Context, params *route53.ListTrafficPoliciesInput, optFns ...func(*route53.Options)) (*route53.ListTrafficPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrafficPolicies")
	}

	var r0 *route53.ListTrafficPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPoliciesInput, ...func(*route53.Options)) (*route53.ListTrafficPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPoliciesInput, ...func(*route53.Options)) *route53.ListTrafficPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPoliciesInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrafficPolicyInstances(ctx context.Context, params *route53.ListTrafficPolicyInstancesInput, optFns ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrafficPolicyInstances")
	}

	var r0 *route53.ListTrafficPolicyInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesInput, ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesInput, ...func(*route53.Options)) *route53.ListTrafficPolicyInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPolicyInstancesInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstancesByHostedZone provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrafficPolicyInstancesByHostedZone(ctx context.Context, params *route53.ListTrafficPolicyInstancesByHostedZoneInput, optFns ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrafficPolicyInstancesByHostedZone")
	}

	var r0 *route53.ListTrafficPolicyInstancesByHostedZoneOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesByHostedZoneInput, ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesByHostedZoneOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesByHostedZoneInput, ...func(*route53.Options)) *route53.ListTrafficPolicyInstancesByHostedZoneOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesByHostedZoneOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPolicyInstancesByHostedZoneInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyInstancesByPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrafficPolicyInstancesByPolicy(ctx context.Context, params *route53.ListTrafficPolicyInstancesByPolicyInput, optFns ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrafficPolicyInstancesByPolicy")
	}

	var r0 *route53.ListTrafficPolicyInstancesByPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesByPolicyInput, ...func(*route53.Options)) (*route53.ListTrafficPolicyInstancesByPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyInstancesByPolicyInput, ...func(*route53.Options)) *route53.ListTrafficPolicyInstancesByPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyInstancesByPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPolicyInstancesByPolicyInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicyVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrafficPolicyVersions(ctx context.Context, params *route53.ListTrafficPolicyVersionsInput, optFns ...func(*route53.Options)) (*route53.ListTrafficPolicyVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrafficPolicyVersions")
	}

	var r0 *route53.ListTrafficPolicyVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyVersionsInput, ...func(*route53.Options)) (*route53.ListTrafficPolicyVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListTrafficPolicyVersionsInput, ...func(*route53.Options)) *route53.ListTrafficPolicyVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListTrafficPolicyVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListTrafficPolicyVersionsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVPCAssociationAuthorizations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVPCAssociationAuthorizations(ctx context.Context, params *route53.ListVPCAssociationAuthorizationsInput, optFns ...func(*route53.Options)) (*route53.ListVPCAssociationAuthorizationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVPCAssociationAuthorizations")
	}

	var r0 *route53.ListVPCAssociationAuthorizationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListVPCAssociationAuthorizationsInput, ...func(*route53.Options)) (*route53.ListVPCAssociationAuthorizationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.ListVPCAssociationAuthorizationsInput, ...func(*route53.Options)) *route53.ListVPCAssociationAuthorizationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.ListVPCAssociationAuthorizationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.ListVPCAssociationAuthorizationsInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() route53.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 route53.Options
	if rf, ok := ret.Get(0).(func() route53.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(route53.Options)
	}

	return r0
}

// TestDNSAnswer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestDNSAnswer(ctx context.Context, params *route53.TestDNSAnswerInput, optFns ...func(*route53.Options)) (*route53.TestDNSAnswerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestDNSAnswer")
	}

	var r0 *route53.TestDNSAnswerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.TestDNSAnswerInput, ...func(*route53.Options)) (*route53.TestDNSAnswerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.TestDNSAnswerInput, ...func(*route53.Options)) *route53.TestDNSAnswerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.TestDNSAnswerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.TestDNSAnswerInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHealthCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHealthCheck(ctx context.Context, params *route53.UpdateHealthCheckInput, optFns ...func(*route53.Options)) (*route53.UpdateHealthCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHealthCheck")
	}

	var r0 *route53.UpdateHealthCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateHealthCheckInput, ...func(*route53.Options)) (*route53.UpdateHealthCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateHealthCheckInput, ...func(*route53.Options)) *route53.UpdateHealthCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateHealthCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.UpdateHealthCheckInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHostedZoneComment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHostedZoneComment(ctx context.Context, params *route53.UpdateHostedZoneCommentInput, optFns ...func(*route53.Options)) (*route53.UpdateHostedZoneCommentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHostedZoneComment")
	}

	var r0 *route53.UpdateHostedZoneCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateHostedZoneCommentInput, ...func(*route53.Options)) (*route53.UpdateHostedZoneCommentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateHostedZoneCommentInput, ...func(*route53.Options)) *route53.UpdateHostedZoneCommentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateHostedZoneCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.UpdateHostedZoneCommentInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrafficPolicyComment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrafficPolicyComment(ctx context.Context, params *route53.UpdateTrafficPolicyCommentInput, optFns ...func(*route53.Options)) (*route53.UpdateTrafficPolicyCommentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrafficPolicyComment")
	}

	var r0 *route53.UpdateTrafficPolicyCommentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateTrafficPolicyCommentInput, ...func(*route53.Options)) (*route53.UpdateTrafficPolicyCommentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateTrafficPolicyCommentInput, ...func(*route53.Options)) *route53.UpdateTrafficPolicyCommentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateTrafficPolicyCommentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.UpdateTrafficPolicyCommentInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrafficPolicyInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrafficPolicyInstance(ctx context.Context, params *route53.UpdateTrafficPolicyInstanceInput, optFns ...func(*route53.Options)) (*route53.UpdateTrafficPolicyInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrafficPolicyInstance")
	}

	var r0 *route53.UpdateTrafficPolicyInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateTrafficPolicyInstanceInput, ...func(*route53.Options)) (*route53.UpdateTrafficPolicyInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53.UpdateTrafficPolicyInstanceInput, ...func(*route53.Options)) *route53.UpdateTrafficPolicyInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53.UpdateTrafficPolicyInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53.UpdateTrafficPolicyInstanceInput, ...func(*route53.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
