// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	backupsearch "github.com/aws/aws-sdk-go-v2/service/backupsearch"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// GetSearchJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSearchJob(ctx context.Context, params *backupsearch.GetSearchJobInput, optFns ...func(*backupsearch.Options)) (*backupsearch.GetSearchJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSearchJob")
	}

	var r0 *backupsearch.GetSearchJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.GetSearchJobInput, ...func(*backupsearch.Options)) (*backupsearch.GetSearchJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.GetSearchJobInput, ...func(*backupsearch.Options)) *backupsearch.GetSearchJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.GetSearchJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.GetSearchJobInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSearchResultExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSearchResultExportJob(ctx context.Context, params *backupsearch.GetSearchResultExportJobInput, optFns ...func(*backupsearch.Options)) (*backupsearch.GetSearchResultExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSearchResultExportJob")
	}

	var r0 *backupsearch.GetSearchResultExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.GetSearchResultExportJobInput, ...func(*backupsearch.Options)) (*backupsearch.GetSearchResultExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.GetSearchResultExportJobInput, ...func(*backupsearch.Options)) *backupsearch.GetSearchResultExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.GetSearchResultExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.GetSearchResultExportJobInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSearchJobBackups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSearchJobBackups(ctx context.Context, params *backupsearch.ListSearchJobBackupsInput, optFns ...func(*backupsearch.Options)) (*backupsearch.ListSearchJobBackupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSearchJobBackups")
	}

	var r0 *backupsearch.ListSearchJobBackupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListSearchJobBackupsInput, ...func(*backupsearch.Options)) (*backupsearch.ListSearchJobBackupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListSearchJobBackupsInput, ...func(*backupsearch.Options)) *backupsearch.ListSearchJobBackupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.ListSearchJobBackupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.ListSearchJobBackupsInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSearchJobResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSearchJobResults(ctx context.Context, params *backupsearch.ListSearchJobResultsInput, optFns ...func(*backupsearch.Options)) (*backupsearch.ListSearchJobResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSearchJobResults")
	}

	var r0 *backupsearch.ListSearchJobResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListSearchJobResultsInput, ...func(*backupsearch.Options)) (*backupsearch.ListSearchJobResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListSearchJobResultsInput, ...func(*backupsearch.Options)) *backupsearch.ListSearchJobResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.ListSearchJobResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.ListSearchJobResultsInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSearchJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSearchJobs(ctx context.Context, params *backupsearch.ListSearchJobsInput, optFns ...func(*backupsearch.Options)) (*backupsearch.ListSearchJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSearchJobs")
	}

	var r0 *backupsearch.ListSearchJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListSearchJobsInput, ...func(*backupsearch.Options)) (*backupsearch.ListSearchJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListSearchJobsInput, ...func(*backupsearch.Options)) *backupsearch.ListSearchJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.ListSearchJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.ListSearchJobsInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSearchResultExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSearchResultExportJobs(ctx context.Context, params *backupsearch.ListSearchResultExportJobsInput, optFns ...func(*backupsearch.Options)) (*backupsearch.ListSearchResultExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSearchResultExportJobs")
	}

	var r0 *backupsearch.ListSearchResultExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListSearchResultExportJobsInput, ...func(*backupsearch.Options)) (*backupsearch.ListSearchResultExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListSearchResultExportJobsInput, ...func(*backupsearch.Options)) *backupsearch.ListSearchResultExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.ListSearchResultExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.ListSearchResultExportJobsInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *backupsearch.ListTagsForResourceInput, optFns ...func(*backupsearch.Options)) (*backupsearch.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *backupsearch.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListTagsForResourceInput, ...func(*backupsearch.Options)) (*backupsearch.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.ListTagsForResourceInput, ...func(*backupsearch.Options)) *backupsearch.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.ListTagsForResourceInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() backupsearch.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 backupsearch.Options
	if rf, ok := ret.Get(0).(func() backupsearch.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(backupsearch.Options)
	}

	return r0
}

// StartSearchJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSearchJob(ctx context.Context, params *backupsearch.StartSearchJobInput, optFns ...func(*backupsearch.Options)) (*backupsearch.StartSearchJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSearchJob")
	}

	var r0 *backupsearch.StartSearchJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.StartSearchJobInput, ...func(*backupsearch.Options)) (*backupsearch.StartSearchJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.StartSearchJobInput, ...func(*backupsearch.Options)) *backupsearch.StartSearchJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.StartSearchJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.StartSearchJobInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSearchResultExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSearchResultExportJob(ctx context.Context, params *backupsearch.StartSearchResultExportJobInput, optFns ...func(*backupsearch.Options)) (*backupsearch.StartSearchResultExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSearchResultExportJob")
	}

	var r0 *backupsearch.StartSearchResultExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.StartSearchResultExportJobInput, ...func(*backupsearch.Options)) (*backupsearch.StartSearchResultExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.StartSearchResultExportJobInput, ...func(*backupsearch.Options)) *backupsearch.StartSearchResultExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.StartSearchResultExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.StartSearchResultExportJobInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopSearchJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopSearchJob(ctx context.Context, params *backupsearch.StopSearchJobInput, optFns ...func(*backupsearch.Options)) (*backupsearch.StopSearchJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopSearchJob")
	}

	var r0 *backupsearch.StopSearchJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.StopSearchJobInput, ...func(*backupsearch.Options)) (*backupsearch.StopSearchJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.StopSearchJobInput, ...func(*backupsearch.Options)) *backupsearch.StopSearchJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.StopSearchJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.StopSearchJobInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *backupsearch.TagResourceInput, optFns ...func(*backupsearch.Options)) (*backupsearch.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *backupsearch.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.TagResourceInput, ...func(*backupsearch.Options)) (*backupsearch.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.TagResourceInput, ...func(*backupsearch.Options)) *backupsearch.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.TagResourceInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *backupsearch.UntagResourceInput, optFns ...func(*backupsearch.Options)) (*backupsearch.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *backupsearch.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.UntagResourceInput, ...func(*backupsearch.Options)) (*backupsearch.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *backupsearch.UntagResourceInput, ...func(*backupsearch.Options)) *backupsearch.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*backupsearch.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *backupsearch.UntagResourceInput, ...func(*backupsearch.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
