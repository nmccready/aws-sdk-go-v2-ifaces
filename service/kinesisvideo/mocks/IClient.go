// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	kinesisvideo "github.com/aws/aws-sdk-go-v2/service/kinesisvideo"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateSignalingChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSignalingChannel(ctx context.Context, params *kinesisvideo.CreateSignalingChannelInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.CreateSignalingChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSignalingChannel")
	}

	var r0 *kinesisvideo.CreateSignalingChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.CreateSignalingChannelInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.CreateSignalingChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.CreateSignalingChannelInput, ...func(*kinesisvideo.Options)) *kinesisvideo.CreateSignalingChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.CreateSignalingChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.CreateSignalingChannelInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStream(ctx context.Context, params *kinesisvideo.CreateStreamInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.CreateStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStream")
	}

	var r0 *kinesisvideo.CreateStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.CreateStreamInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.CreateStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.CreateStreamInput, ...func(*kinesisvideo.Options)) *kinesisvideo.CreateStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.CreateStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.CreateStreamInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEdgeConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEdgeConfiguration(ctx context.Context, params *kinesisvideo.DeleteEdgeConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DeleteEdgeConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEdgeConfiguration")
	}

	var r0 *kinesisvideo.DeleteEdgeConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DeleteEdgeConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DeleteEdgeConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DeleteEdgeConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DeleteEdgeConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DeleteEdgeConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DeleteEdgeConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSignalingChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSignalingChannel(ctx context.Context, params *kinesisvideo.DeleteSignalingChannelInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DeleteSignalingChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSignalingChannel")
	}

	var r0 *kinesisvideo.DeleteSignalingChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DeleteSignalingChannelInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DeleteSignalingChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DeleteSignalingChannelInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DeleteSignalingChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DeleteSignalingChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DeleteSignalingChannelInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStream(ctx context.Context, params *kinesisvideo.DeleteStreamInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DeleteStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStream")
	}

	var r0 *kinesisvideo.DeleteStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DeleteStreamInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DeleteStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DeleteStreamInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DeleteStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DeleteStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DeleteStreamInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEdgeConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEdgeConfiguration(ctx context.Context, params *kinesisvideo.DescribeEdgeConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeEdgeConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEdgeConfiguration")
	}

	var r0 *kinesisvideo.DescribeEdgeConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeEdgeConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeEdgeConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeEdgeConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DescribeEdgeConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DescribeEdgeConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DescribeEdgeConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImageGenerationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeImageGenerationConfiguration(ctx context.Context, params *kinesisvideo.DescribeImageGenerationConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeImageGenerationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeImageGenerationConfiguration")
	}

	var r0 *kinesisvideo.DescribeImageGenerationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeImageGenerationConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeImageGenerationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeImageGenerationConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DescribeImageGenerationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DescribeImageGenerationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DescribeImageGenerationConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMappedResourceConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMappedResourceConfiguration(ctx context.Context, params *kinesisvideo.DescribeMappedResourceConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeMappedResourceConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMappedResourceConfiguration")
	}

	var r0 *kinesisvideo.DescribeMappedResourceConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeMappedResourceConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeMappedResourceConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeMappedResourceConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DescribeMappedResourceConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DescribeMappedResourceConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DescribeMappedResourceConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMediaStorageConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMediaStorageConfiguration(ctx context.Context, params *kinesisvideo.DescribeMediaStorageConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeMediaStorageConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMediaStorageConfiguration")
	}

	var r0 *kinesisvideo.DescribeMediaStorageConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeMediaStorageConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeMediaStorageConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeMediaStorageConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DescribeMediaStorageConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DescribeMediaStorageConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DescribeMediaStorageConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNotificationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNotificationConfiguration(ctx context.Context, params *kinesisvideo.DescribeNotificationConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeNotificationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNotificationConfiguration")
	}

	var r0 *kinesisvideo.DescribeNotificationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeNotificationConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeNotificationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeNotificationConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DescribeNotificationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DescribeNotificationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DescribeNotificationConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSignalingChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSignalingChannel(ctx context.Context, params *kinesisvideo.DescribeSignalingChannelInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeSignalingChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSignalingChannel")
	}

	var r0 *kinesisvideo.DescribeSignalingChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeSignalingChannelInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeSignalingChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeSignalingChannelInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DescribeSignalingChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DescribeSignalingChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DescribeSignalingChannelInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStream(ctx context.Context, params *kinesisvideo.DescribeStreamInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStream")
	}

	var r0 *kinesisvideo.DescribeStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeStreamInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.DescribeStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.DescribeStreamInput, ...func(*kinesisvideo.Options)) *kinesisvideo.DescribeStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.DescribeStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.DescribeStreamInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataEndpoint(ctx context.Context, params *kinesisvideo.GetDataEndpointInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.GetDataEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataEndpoint")
	}

	var r0 *kinesisvideo.GetDataEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.GetDataEndpointInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.GetDataEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.GetDataEndpointInput, ...func(*kinesisvideo.Options)) *kinesisvideo.GetDataEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.GetDataEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.GetDataEndpointInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSignalingChannelEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSignalingChannelEndpoint(ctx context.Context, params *kinesisvideo.GetSignalingChannelEndpointInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.GetSignalingChannelEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSignalingChannelEndpoint")
	}

	var r0 *kinesisvideo.GetSignalingChannelEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.GetSignalingChannelEndpointInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.GetSignalingChannelEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.GetSignalingChannelEndpointInput, ...func(*kinesisvideo.Options)) *kinesisvideo.GetSignalingChannelEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.GetSignalingChannelEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.GetSignalingChannelEndpointInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEdgeAgentConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEdgeAgentConfigurations(ctx context.Context, params *kinesisvideo.ListEdgeAgentConfigurationsInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.ListEdgeAgentConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEdgeAgentConfigurations")
	}

	var r0 *kinesisvideo.ListEdgeAgentConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListEdgeAgentConfigurationsInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.ListEdgeAgentConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListEdgeAgentConfigurationsInput, ...func(*kinesisvideo.Options)) *kinesisvideo.ListEdgeAgentConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.ListEdgeAgentConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.ListEdgeAgentConfigurationsInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSignalingChannels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSignalingChannels(ctx context.Context, params *kinesisvideo.ListSignalingChannelsInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.ListSignalingChannelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSignalingChannels")
	}

	var r0 *kinesisvideo.ListSignalingChannelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListSignalingChannelsInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.ListSignalingChannelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListSignalingChannelsInput, ...func(*kinesisvideo.Options)) *kinesisvideo.ListSignalingChannelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.ListSignalingChannelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.ListSignalingChannelsInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStreams(ctx context.Context, params *kinesisvideo.ListStreamsInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.ListStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStreams")
	}

	var r0 *kinesisvideo.ListStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListStreamsInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.ListStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListStreamsInput, ...func(*kinesisvideo.Options)) *kinesisvideo.ListStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.ListStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.ListStreamsInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *kinesisvideo.ListTagsForResourceInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *kinesisvideo.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListTagsForResourceInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListTagsForResourceInput, ...func(*kinesisvideo.Options)) *kinesisvideo.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.ListTagsForResourceInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForStream(ctx context.Context, params *kinesisvideo.ListTagsForStreamInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.ListTagsForStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForStream")
	}

	var r0 *kinesisvideo.ListTagsForStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListTagsForStreamInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.ListTagsForStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.ListTagsForStreamInput, ...func(*kinesisvideo.Options)) *kinesisvideo.ListTagsForStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.ListTagsForStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.ListTagsForStreamInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() kinesisvideo.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 kinesisvideo.Options
	if rf, ok := ret.Get(0).(func() kinesisvideo.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(kinesisvideo.Options)
	}

	return r0
}

// StartEdgeConfigurationUpdate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartEdgeConfigurationUpdate(ctx context.Context, params *kinesisvideo.StartEdgeConfigurationUpdateInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.StartEdgeConfigurationUpdateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartEdgeConfigurationUpdate")
	}

	var r0 *kinesisvideo.StartEdgeConfigurationUpdateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.StartEdgeConfigurationUpdateInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.StartEdgeConfigurationUpdateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.StartEdgeConfigurationUpdateInput, ...func(*kinesisvideo.Options)) *kinesisvideo.StartEdgeConfigurationUpdateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.StartEdgeConfigurationUpdateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.StartEdgeConfigurationUpdateInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *kinesisvideo.TagResourceInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *kinesisvideo.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.TagResourceInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.TagResourceInput, ...func(*kinesisvideo.Options)) *kinesisvideo.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.TagResourceInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagStream(ctx context.Context, params *kinesisvideo.TagStreamInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.TagStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagStream")
	}

	var r0 *kinesisvideo.TagStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.TagStreamInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.TagStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.TagStreamInput, ...func(*kinesisvideo.Options)) *kinesisvideo.TagStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.TagStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.TagStreamInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *kinesisvideo.UntagResourceInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *kinesisvideo.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UntagResourceInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UntagResourceInput, ...func(*kinesisvideo.Options)) *kinesisvideo.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.UntagResourceInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagStream(ctx context.Context, params *kinesisvideo.UntagStreamInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.UntagStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagStream")
	}

	var r0 *kinesisvideo.UntagStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UntagStreamInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.UntagStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UntagStreamInput, ...func(*kinesisvideo.Options)) *kinesisvideo.UntagStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.UntagStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.UntagStreamInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataRetention provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataRetention(ctx context.Context, params *kinesisvideo.UpdateDataRetentionInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateDataRetentionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataRetention")
	}

	var r0 *kinesisvideo.UpdateDataRetentionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateDataRetentionInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateDataRetentionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateDataRetentionInput, ...func(*kinesisvideo.Options)) *kinesisvideo.UpdateDataRetentionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.UpdateDataRetentionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.UpdateDataRetentionInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImageGenerationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateImageGenerationConfiguration(ctx context.Context, params *kinesisvideo.UpdateImageGenerationConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateImageGenerationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageGenerationConfiguration")
	}

	var r0 *kinesisvideo.UpdateImageGenerationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateImageGenerationConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateImageGenerationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateImageGenerationConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.UpdateImageGenerationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.UpdateImageGenerationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.UpdateImageGenerationConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMediaStorageConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMediaStorageConfiguration(ctx context.Context, params *kinesisvideo.UpdateMediaStorageConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateMediaStorageConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMediaStorageConfiguration")
	}

	var r0 *kinesisvideo.UpdateMediaStorageConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateMediaStorageConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateMediaStorageConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateMediaStorageConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.UpdateMediaStorageConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.UpdateMediaStorageConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.UpdateMediaStorageConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotificationConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNotificationConfiguration(ctx context.Context, params *kinesisvideo.UpdateNotificationConfigurationInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateNotificationConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotificationConfiguration")
	}

	var r0 *kinesisvideo.UpdateNotificationConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateNotificationConfigurationInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateNotificationConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateNotificationConfigurationInput, ...func(*kinesisvideo.Options)) *kinesisvideo.UpdateNotificationConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.UpdateNotificationConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.UpdateNotificationConfigurationInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSignalingChannel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSignalingChannel(ctx context.Context, params *kinesisvideo.UpdateSignalingChannelInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateSignalingChannelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSignalingChannel")
	}

	var r0 *kinesisvideo.UpdateSignalingChannelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateSignalingChannelInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateSignalingChannelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateSignalingChannelInput, ...func(*kinesisvideo.Options)) *kinesisvideo.UpdateSignalingChannelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.UpdateSignalingChannelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.UpdateSignalingChannelInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStream(ctx context.Context, params *kinesisvideo.UpdateStreamInput, optFns ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStream")
	}

	var r0 *kinesisvideo.UpdateStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateStreamInput, ...func(*kinesisvideo.Options)) (*kinesisvideo.UpdateStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *kinesisvideo.UpdateStreamInput, ...func(*kinesisvideo.Options)) *kinesisvideo.UpdateStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*kinesisvideo.UpdateStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *kinesisvideo.UpdateStreamInput, ...func(*kinesisvideo.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
