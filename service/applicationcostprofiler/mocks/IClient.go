// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	applicationcostprofiler "github.com/aws/aws-sdk-go-v2/service/applicationcostprofiler"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DeleteReportDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReportDefinition(ctx context.Context, params *applicationcostprofiler.DeleteReportDefinitionInput, optFns ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.DeleteReportDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReportDefinition")
	}

	var r0 *applicationcostprofiler.DeleteReportDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.DeleteReportDefinitionInput, ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.DeleteReportDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.DeleteReportDefinitionInput, ...func(*applicationcostprofiler.Options)) *applicationcostprofiler.DeleteReportDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationcostprofiler.DeleteReportDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationcostprofiler.DeleteReportDefinitionInput, ...func(*applicationcostprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReportDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReportDefinition(ctx context.Context, params *applicationcostprofiler.GetReportDefinitionInput, optFns ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.GetReportDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReportDefinition")
	}

	var r0 *applicationcostprofiler.GetReportDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.GetReportDefinitionInput, ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.GetReportDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.GetReportDefinitionInput, ...func(*applicationcostprofiler.Options)) *applicationcostprofiler.GetReportDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationcostprofiler.GetReportDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationcostprofiler.GetReportDefinitionInput, ...func(*applicationcostprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportApplicationUsage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportApplicationUsage(ctx context.Context, params *applicationcostprofiler.ImportApplicationUsageInput, optFns ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.ImportApplicationUsageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportApplicationUsage")
	}

	var r0 *applicationcostprofiler.ImportApplicationUsageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.ImportApplicationUsageInput, ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.ImportApplicationUsageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.ImportApplicationUsageInput, ...func(*applicationcostprofiler.Options)) *applicationcostprofiler.ImportApplicationUsageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationcostprofiler.ImportApplicationUsageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationcostprofiler.ImportApplicationUsageInput, ...func(*applicationcostprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReportDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReportDefinitions(ctx context.Context, params *applicationcostprofiler.ListReportDefinitionsInput, optFns ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.ListReportDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReportDefinitions")
	}

	var r0 *applicationcostprofiler.ListReportDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.ListReportDefinitionsInput, ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.ListReportDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.ListReportDefinitionsInput, ...func(*applicationcostprofiler.Options)) *applicationcostprofiler.ListReportDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationcostprofiler.ListReportDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationcostprofiler.ListReportDefinitionsInput, ...func(*applicationcostprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() applicationcostprofiler.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 applicationcostprofiler.Options
	if rf, ok := ret.Get(0).(func() applicationcostprofiler.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(applicationcostprofiler.Options)
	}

	return r0
}

// PutReportDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutReportDefinition(ctx context.Context, params *applicationcostprofiler.PutReportDefinitionInput, optFns ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.PutReportDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutReportDefinition")
	}

	var r0 *applicationcostprofiler.PutReportDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.PutReportDefinitionInput, ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.PutReportDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.PutReportDefinitionInput, ...func(*applicationcostprofiler.Options)) *applicationcostprofiler.PutReportDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationcostprofiler.PutReportDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationcostprofiler.PutReportDefinitionInput, ...func(*applicationcostprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReportDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReportDefinition(ctx context.Context, params *applicationcostprofiler.UpdateReportDefinitionInput, optFns ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.UpdateReportDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReportDefinition")
	}

	var r0 *applicationcostprofiler.UpdateReportDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.UpdateReportDefinitionInput, ...func(*applicationcostprofiler.Options)) (*applicationcostprofiler.UpdateReportDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *applicationcostprofiler.UpdateReportDefinitionInput, ...func(*applicationcostprofiler.Options)) *applicationcostprofiler.UpdateReportDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*applicationcostprofiler.UpdateReportDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *applicationcostprofiler.UpdateReportDefinitionInput, ...func(*applicationcostprofiler.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
