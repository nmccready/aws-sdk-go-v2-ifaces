// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	customerprofiles "github.com/aws/aws-sdk-go-v2/service/customerprofiles"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddProfileKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddProfileKey(ctx context.Context, params *customerprofiles.AddProfileKeyInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.AddProfileKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddProfileKey")
	}

	var r0 *customerprofiles.AddProfileKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.AddProfileKeyInput, ...func(*customerprofiles.Options)) (*customerprofiles.AddProfileKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.AddProfileKeyInput, ...func(*customerprofiles.Options)) *customerprofiles.AddProfileKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.AddProfileKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.AddProfileKeyInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCalculatedAttributeDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCalculatedAttributeDefinition(ctx context.Context, params *customerprofiles.CreateCalculatedAttributeDefinitionInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.CreateCalculatedAttributeDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCalculatedAttributeDefinition")
	}

	var r0 *customerprofiles.CreateCalculatedAttributeDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) (*customerprofiles.CreateCalculatedAttributeDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) *customerprofiles.CreateCalculatedAttributeDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.CreateCalculatedAttributeDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.CreateCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomain(ctx context.Context, params *customerprofiles.CreateDomainInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.CreateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 *customerprofiles.CreateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateDomainInput, ...func(*customerprofiles.Options)) (*customerprofiles.CreateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateDomainInput, ...func(*customerprofiles.Options)) *customerprofiles.CreateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.CreateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.CreateDomainInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventStream(ctx context.Context, params *customerprofiles.CreateEventStreamInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.CreateEventStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventStream")
	}

	var r0 *customerprofiles.CreateEventStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateEventStreamInput, ...func(*customerprofiles.Options)) (*customerprofiles.CreateEventStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateEventStreamInput, ...func(*customerprofiles.Options)) *customerprofiles.CreateEventStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.CreateEventStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.CreateEventStreamInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIntegrationWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIntegrationWorkflow(ctx context.Context, params *customerprofiles.CreateIntegrationWorkflowInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.CreateIntegrationWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIntegrationWorkflow")
	}

	var r0 *customerprofiles.CreateIntegrationWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateIntegrationWorkflowInput, ...func(*customerprofiles.Options)) (*customerprofiles.CreateIntegrationWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateIntegrationWorkflowInput, ...func(*customerprofiles.Options)) *customerprofiles.CreateIntegrationWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.CreateIntegrationWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.CreateIntegrationWorkflowInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProfile(ctx context.Context, params *customerprofiles.CreateProfileInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.CreateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProfile")
	}

	var r0 *customerprofiles.CreateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateProfileInput, ...func(*customerprofiles.Options)) (*customerprofiles.CreateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.CreateProfileInput, ...func(*customerprofiles.Options)) *customerprofiles.CreateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.CreateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.CreateProfileInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCalculatedAttributeDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCalculatedAttributeDefinition(ctx context.Context, params *customerprofiles.DeleteCalculatedAttributeDefinitionInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteCalculatedAttributeDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCalculatedAttributeDefinition")
	}

	var r0 *customerprofiles.DeleteCalculatedAttributeDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteCalculatedAttributeDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteCalculatedAttributeDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteCalculatedAttributeDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomain(ctx context.Context, params *customerprofiles.DeleteDomainInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomain")
	}

	var r0 *customerprofiles.DeleteDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteDomainInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteDomainInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteDomainInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventStream(ctx context.Context, params *customerprofiles.DeleteEventStreamInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteEventStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventStream")
	}

	var r0 *customerprofiles.DeleteEventStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteEventStreamInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteEventStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteEventStreamInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteEventStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteEventStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteEventStreamInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIntegration(ctx context.Context, params *customerprofiles.DeleteIntegrationInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIntegration")
	}

	var r0 *customerprofiles.DeleteIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteIntegrationInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteIntegrationInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteIntegrationInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfile(ctx context.Context, params *customerprofiles.DeleteProfileInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfile")
	}

	var r0 *customerprofiles.DeleteProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteProfileInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteProfileInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteProfileInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfileKey provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfileKey(ctx context.Context, params *customerprofiles.DeleteProfileKeyInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteProfileKeyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfileKey")
	}

	var r0 *customerprofiles.DeleteProfileKeyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteProfileKeyInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteProfileKeyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteProfileKeyInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteProfileKeyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteProfileKeyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteProfileKeyInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfileObject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfileObject(ctx context.Context, params *customerprofiles.DeleteProfileObjectInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteProfileObjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfileObject")
	}

	var r0 *customerprofiles.DeleteProfileObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteProfileObjectInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteProfileObjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteProfileObjectInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteProfileObjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteProfileObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteProfileObjectInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProfileObjectType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProfileObjectType(ctx context.Context, params *customerprofiles.DeleteProfileObjectTypeInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteProfileObjectTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProfileObjectType")
	}

	var r0 *customerprofiles.DeleteProfileObjectTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteProfileObjectTypeInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteProfileObjectTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteProfileObjectTypeInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteProfileObjectTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteProfileObjectTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteProfileObjectTypeInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkflow(ctx context.Context, params *customerprofiles.DeleteWorkflowInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DeleteWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkflow")
	}

	var r0 *customerprofiles.DeleteWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteWorkflowInput, ...func(*customerprofiles.Options)) (*customerprofiles.DeleteWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DeleteWorkflowInput, ...func(*customerprofiles.Options)) *customerprofiles.DeleteWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DeleteWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DeleteWorkflowInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetectProfileObjectType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetectProfileObjectType(ctx context.Context, params *customerprofiles.DetectProfileObjectTypeInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.DetectProfileObjectTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetectProfileObjectType")
	}

	var r0 *customerprofiles.DetectProfileObjectTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DetectProfileObjectTypeInput, ...func(*customerprofiles.Options)) (*customerprofiles.DetectProfileObjectTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.DetectProfileObjectTypeInput, ...func(*customerprofiles.Options)) *customerprofiles.DetectProfileObjectTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.DetectProfileObjectTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.DetectProfileObjectTypeInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAutoMergingPreview provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAutoMergingPreview(ctx context.Context, params *customerprofiles.GetAutoMergingPreviewInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetAutoMergingPreviewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAutoMergingPreview")
	}

	var r0 *customerprofiles.GetAutoMergingPreviewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetAutoMergingPreviewInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetAutoMergingPreviewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetAutoMergingPreviewInput, ...func(*customerprofiles.Options)) *customerprofiles.GetAutoMergingPreviewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetAutoMergingPreviewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetAutoMergingPreviewInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculatedAttributeDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCalculatedAttributeDefinition(ctx context.Context, params *customerprofiles.GetCalculatedAttributeDefinitionInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetCalculatedAttributeDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCalculatedAttributeDefinition")
	}

	var r0 *customerprofiles.GetCalculatedAttributeDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetCalculatedAttributeDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) *customerprofiles.GetCalculatedAttributeDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetCalculatedAttributeDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCalculatedAttributeForProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCalculatedAttributeForProfile(ctx context.Context, params *customerprofiles.GetCalculatedAttributeForProfileInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetCalculatedAttributeForProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCalculatedAttributeForProfile")
	}

	var r0 *customerprofiles.GetCalculatedAttributeForProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetCalculatedAttributeForProfileInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetCalculatedAttributeForProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetCalculatedAttributeForProfileInput, ...func(*customerprofiles.Options)) *customerprofiles.GetCalculatedAttributeForProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetCalculatedAttributeForProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetCalculatedAttributeForProfileInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomain(ctx context.Context, params *customerprofiles.GetDomainInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomain")
	}

	var r0 *customerprofiles.GetDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetDomainInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetDomainInput, ...func(*customerprofiles.Options)) *customerprofiles.GetDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetDomainInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventStream provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEventStream(ctx context.Context, params *customerprofiles.GetEventStreamInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetEventStreamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEventStream")
	}

	var r0 *customerprofiles.GetEventStreamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetEventStreamInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetEventStreamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetEventStreamInput, ...func(*customerprofiles.Options)) *customerprofiles.GetEventStreamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetEventStreamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetEventStreamInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIdentityResolutionJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIdentityResolutionJob(ctx context.Context, params *customerprofiles.GetIdentityResolutionJobInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetIdentityResolutionJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIdentityResolutionJob")
	}

	var r0 *customerprofiles.GetIdentityResolutionJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetIdentityResolutionJobInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetIdentityResolutionJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetIdentityResolutionJobInput, ...func(*customerprofiles.Options)) *customerprofiles.GetIdentityResolutionJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetIdentityResolutionJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetIdentityResolutionJobInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIntegration(ctx context.Context, params *customerprofiles.GetIntegrationInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIntegration")
	}

	var r0 *customerprofiles.GetIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetIntegrationInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetIntegrationInput, ...func(*customerprofiles.Options)) *customerprofiles.GetIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetIntegrationInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMatches provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMatches(ctx context.Context, params *customerprofiles.GetMatchesInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetMatchesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMatches")
	}

	var r0 *customerprofiles.GetMatchesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetMatchesInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetMatchesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetMatchesInput, ...func(*customerprofiles.Options)) *customerprofiles.GetMatchesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetMatchesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetMatchesInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileObjectType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfileObjectType(ctx context.Context, params *customerprofiles.GetProfileObjectTypeInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetProfileObjectTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileObjectType")
	}

	var r0 *customerprofiles.GetProfileObjectTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetProfileObjectTypeInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetProfileObjectTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetProfileObjectTypeInput, ...func(*customerprofiles.Options)) *customerprofiles.GetProfileObjectTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetProfileObjectTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetProfileObjectTypeInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProfileObjectTypeTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProfileObjectTypeTemplate(ctx context.Context, params *customerprofiles.GetProfileObjectTypeTemplateInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetProfileObjectTypeTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProfileObjectTypeTemplate")
	}

	var r0 *customerprofiles.GetProfileObjectTypeTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetProfileObjectTypeTemplateInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetProfileObjectTypeTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetProfileObjectTypeTemplateInput, ...func(*customerprofiles.Options)) *customerprofiles.GetProfileObjectTypeTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetProfileObjectTypeTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetProfileObjectTypeTemplateInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSimilarProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSimilarProfiles(ctx context.Context, params *customerprofiles.GetSimilarProfilesInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetSimilarProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSimilarProfiles")
	}

	var r0 *customerprofiles.GetSimilarProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetSimilarProfilesInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetSimilarProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetSimilarProfilesInput, ...func(*customerprofiles.Options)) *customerprofiles.GetSimilarProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetSimilarProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetSimilarProfilesInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflow provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkflow(ctx context.Context, params *customerprofiles.GetWorkflowInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetWorkflowOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflow")
	}

	var r0 *customerprofiles.GetWorkflowOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetWorkflowInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetWorkflowOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetWorkflowInput, ...func(*customerprofiles.Options)) *customerprofiles.GetWorkflowOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetWorkflowOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetWorkflowInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkflowSteps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkflowSteps(ctx context.Context, params *customerprofiles.GetWorkflowStepsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.GetWorkflowStepsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkflowSteps")
	}

	var r0 *customerprofiles.GetWorkflowStepsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetWorkflowStepsInput, ...func(*customerprofiles.Options)) (*customerprofiles.GetWorkflowStepsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.GetWorkflowStepsInput, ...func(*customerprofiles.Options)) *customerprofiles.GetWorkflowStepsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.GetWorkflowStepsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.GetWorkflowStepsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccountIntegrations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccountIntegrations(ctx context.Context, params *customerprofiles.ListAccountIntegrationsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListAccountIntegrationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccountIntegrations")
	}

	var r0 *customerprofiles.ListAccountIntegrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListAccountIntegrationsInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListAccountIntegrationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListAccountIntegrationsInput, ...func(*customerprofiles.Options)) *customerprofiles.ListAccountIntegrationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListAccountIntegrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListAccountIntegrationsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCalculatedAttributeDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCalculatedAttributeDefinitions(ctx context.Context, params *customerprofiles.ListCalculatedAttributeDefinitionsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListCalculatedAttributeDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCalculatedAttributeDefinitions")
	}

	var r0 *customerprofiles.ListCalculatedAttributeDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListCalculatedAttributeDefinitionsInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListCalculatedAttributeDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListCalculatedAttributeDefinitionsInput, ...func(*customerprofiles.Options)) *customerprofiles.ListCalculatedAttributeDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListCalculatedAttributeDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListCalculatedAttributeDefinitionsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCalculatedAttributesForProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCalculatedAttributesForProfile(ctx context.Context, params *customerprofiles.ListCalculatedAttributesForProfileInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListCalculatedAttributesForProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCalculatedAttributesForProfile")
	}

	var r0 *customerprofiles.ListCalculatedAttributesForProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListCalculatedAttributesForProfileInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListCalculatedAttributesForProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListCalculatedAttributesForProfileInput, ...func(*customerprofiles.Options)) *customerprofiles.ListCalculatedAttributesForProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListCalculatedAttributesForProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListCalculatedAttributesForProfileInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomains(ctx context.Context, params *customerprofiles.ListDomainsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 *customerprofiles.ListDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListDomainsInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListDomainsInput, ...func(*customerprofiles.Options)) *customerprofiles.ListDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListDomainsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEventStreams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEventStreams(ctx context.Context, params *customerprofiles.ListEventStreamsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListEventStreamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEventStreams")
	}

	var r0 *customerprofiles.ListEventStreamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListEventStreamsInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListEventStreamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListEventStreamsInput, ...func(*customerprofiles.Options)) *customerprofiles.ListEventStreamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListEventStreamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListEventStreamsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIdentityResolutionJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIdentityResolutionJobs(ctx context.Context, params *customerprofiles.ListIdentityResolutionJobsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListIdentityResolutionJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIdentityResolutionJobs")
	}

	var r0 *customerprofiles.ListIdentityResolutionJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListIdentityResolutionJobsInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListIdentityResolutionJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListIdentityResolutionJobsInput, ...func(*customerprofiles.Options)) *customerprofiles.ListIdentityResolutionJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListIdentityResolutionJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListIdentityResolutionJobsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIntegrations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIntegrations(ctx context.Context, params *customerprofiles.ListIntegrationsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListIntegrationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIntegrations")
	}

	var r0 *customerprofiles.ListIntegrationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListIntegrationsInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListIntegrationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListIntegrationsInput, ...func(*customerprofiles.Options)) *customerprofiles.ListIntegrationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListIntegrationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListIntegrationsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfileObjectTypeTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfileObjectTypeTemplates(ctx context.Context, params *customerprofiles.ListProfileObjectTypeTemplatesInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListProfileObjectTypeTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfileObjectTypeTemplates")
	}

	var r0 *customerprofiles.ListProfileObjectTypeTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListProfileObjectTypeTemplatesInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListProfileObjectTypeTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListProfileObjectTypeTemplatesInput, ...func(*customerprofiles.Options)) *customerprofiles.ListProfileObjectTypeTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListProfileObjectTypeTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListProfileObjectTypeTemplatesInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfileObjectTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfileObjectTypes(ctx context.Context, params *customerprofiles.ListProfileObjectTypesInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListProfileObjectTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfileObjectTypes")
	}

	var r0 *customerprofiles.ListProfileObjectTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListProfileObjectTypesInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListProfileObjectTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListProfileObjectTypesInput, ...func(*customerprofiles.Options)) *customerprofiles.ListProfileObjectTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListProfileObjectTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListProfileObjectTypesInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProfileObjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProfileObjects(ctx context.Context, params *customerprofiles.ListProfileObjectsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListProfileObjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProfileObjects")
	}

	var r0 *customerprofiles.ListProfileObjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListProfileObjectsInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListProfileObjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListProfileObjectsInput, ...func(*customerprofiles.Options)) *customerprofiles.ListProfileObjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListProfileObjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListProfileObjectsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleBasedMatches provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRuleBasedMatches(ctx context.Context, params *customerprofiles.ListRuleBasedMatchesInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListRuleBasedMatchesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRuleBasedMatches")
	}

	var r0 *customerprofiles.ListRuleBasedMatchesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListRuleBasedMatchesInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListRuleBasedMatchesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListRuleBasedMatchesInput, ...func(*customerprofiles.Options)) *customerprofiles.ListRuleBasedMatchesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListRuleBasedMatchesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListRuleBasedMatchesInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *customerprofiles.ListTagsForResourceInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *customerprofiles.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListTagsForResourceInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListTagsForResourceInput, ...func(*customerprofiles.Options)) *customerprofiles.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListTagsForResourceInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkflows provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkflows(ctx context.Context, params *customerprofiles.ListWorkflowsInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.ListWorkflowsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkflows")
	}

	var r0 *customerprofiles.ListWorkflowsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListWorkflowsInput, ...func(*customerprofiles.Options)) (*customerprofiles.ListWorkflowsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.ListWorkflowsInput, ...func(*customerprofiles.Options)) *customerprofiles.ListWorkflowsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.ListWorkflowsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.ListWorkflowsInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MergeProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) MergeProfiles(ctx context.Context, params *customerprofiles.MergeProfilesInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.MergeProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MergeProfiles")
	}

	var r0 *customerprofiles.MergeProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.MergeProfilesInput, ...func(*customerprofiles.Options)) (*customerprofiles.MergeProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.MergeProfilesInput, ...func(*customerprofiles.Options)) *customerprofiles.MergeProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.MergeProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.MergeProfilesInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() customerprofiles.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 customerprofiles.Options
	if rf, ok := ret.Get(0).(func() customerprofiles.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(customerprofiles.Options)
	}

	return r0
}

// PutIntegration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutIntegration(ctx context.Context, params *customerprofiles.PutIntegrationInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.PutIntegrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutIntegration")
	}

	var r0 *customerprofiles.PutIntegrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.PutIntegrationInput, ...func(*customerprofiles.Options)) (*customerprofiles.PutIntegrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.PutIntegrationInput, ...func(*customerprofiles.Options)) *customerprofiles.PutIntegrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.PutIntegrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.PutIntegrationInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProfileObject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutProfileObject(ctx context.Context, params *customerprofiles.PutProfileObjectInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.PutProfileObjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutProfileObject")
	}

	var r0 *customerprofiles.PutProfileObjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.PutProfileObjectInput, ...func(*customerprofiles.Options)) (*customerprofiles.PutProfileObjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.PutProfileObjectInput, ...func(*customerprofiles.Options)) *customerprofiles.PutProfileObjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.PutProfileObjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.PutProfileObjectInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutProfileObjectType provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutProfileObjectType(ctx context.Context, params *customerprofiles.PutProfileObjectTypeInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.PutProfileObjectTypeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutProfileObjectType")
	}

	var r0 *customerprofiles.PutProfileObjectTypeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.PutProfileObjectTypeInput, ...func(*customerprofiles.Options)) (*customerprofiles.PutProfileObjectTypeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.PutProfileObjectTypeInput, ...func(*customerprofiles.Options)) *customerprofiles.PutProfileObjectTypeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.PutProfileObjectTypeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.PutProfileObjectTypeInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchProfiles(ctx context.Context, params *customerprofiles.SearchProfilesInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.SearchProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchProfiles")
	}

	var r0 *customerprofiles.SearchProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.SearchProfilesInput, ...func(*customerprofiles.Options)) (*customerprofiles.SearchProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.SearchProfilesInput, ...func(*customerprofiles.Options)) *customerprofiles.SearchProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.SearchProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.SearchProfilesInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *customerprofiles.TagResourceInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *customerprofiles.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.TagResourceInput, ...func(*customerprofiles.Options)) (*customerprofiles.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.TagResourceInput, ...func(*customerprofiles.Options)) *customerprofiles.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.TagResourceInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *customerprofiles.UntagResourceInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *customerprofiles.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.UntagResourceInput, ...func(*customerprofiles.Options)) (*customerprofiles.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.UntagResourceInput, ...func(*customerprofiles.Options)) *customerprofiles.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.UntagResourceInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCalculatedAttributeDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCalculatedAttributeDefinition(ctx context.Context, params *customerprofiles.UpdateCalculatedAttributeDefinitionInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.UpdateCalculatedAttributeDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCalculatedAttributeDefinition")
	}

	var r0 *customerprofiles.UpdateCalculatedAttributeDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.UpdateCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) (*customerprofiles.UpdateCalculatedAttributeDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.UpdateCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) *customerprofiles.UpdateCalculatedAttributeDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.UpdateCalculatedAttributeDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.UpdateCalculatedAttributeDefinitionInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomain(ctx context.Context, params *customerprofiles.UpdateDomainInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.UpdateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 *customerprofiles.UpdateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.UpdateDomainInput, ...func(*customerprofiles.Options)) (*customerprofiles.UpdateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.UpdateDomainInput, ...func(*customerprofiles.Options)) *customerprofiles.UpdateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.UpdateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.UpdateDomainInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProfile(ctx context.Context, params *customerprofiles.UpdateProfileInput, optFns ...func(*customerprofiles.Options)) (*customerprofiles.UpdateProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProfile")
	}

	var r0 *customerprofiles.UpdateProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.UpdateProfileInput, ...func(*customerprofiles.Options)) (*customerprofiles.UpdateProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *customerprofiles.UpdateProfileInput, ...func(*customerprofiles.Options)) *customerprofiles.UpdateProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*customerprofiles.UpdateProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *customerprofiles.UpdateProfileInput, ...func(*customerprofiles.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
