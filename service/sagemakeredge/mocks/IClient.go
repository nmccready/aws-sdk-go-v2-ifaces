// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	sagemakeredge "github.com/aws/aws-sdk-go-v2/service/sagemakeredge"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// GetDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployments(ctx context.Context, params *sagemakeredge.GetDeploymentsInput, optFns ...func(*sagemakeredge.Options)) (*sagemakeredge.GetDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployments")
	}

	var r0 *sagemakeredge.GetDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakeredge.GetDeploymentsInput, ...func(*sagemakeredge.Options)) (*sagemakeredge.GetDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakeredge.GetDeploymentsInput, ...func(*sagemakeredge.Options)) *sagemakeredge.GetDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakeredge.GetDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakeredge.GetDeploymentsInput, ...func(*sagemakeredge.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceRegistration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeviceRegistration(ctx context.Context, params *sagemakeredge.GetDeviceRegistrationInput, optFns ...func(*sagemakeredge.Options)) (*sagemakeredge.GetDeviceRegistrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceRegistration")
	}

	var r0 *sagemakeredge.GetDeviceRegistrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakeredge.GetDeviceRegistrationInput, ...func(*sagemakeredge.Options)) (*sagemakeredge.GetDeviceRegistrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakeredge.GetDeviceRegistrationInput, ...func(*sagemakeredge.Options)) *sagemakeredge.GetDeviceRegistrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakeredge.GetDeviceRegistrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakeredge.GetDeviceRegistrationInput, ...func(*sagemakeredge.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() sagemakeredge.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 sagemakeredge.Options
	if rf, ok := ret.Get(0).(func() sagemakeredge.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sagemakeredge.Options)
	}

	return r0
}

// SendHeartbeat provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendHeartbeat(ctx context.Context, params *sagemakeredge.SendHeartbeatInput, optFns ...func(*sagemakeredge.Options)) (*sagemakeredge.SendHeartbeatOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendHeartbeat")
	}

	var r0 *sagemakeredge.SendHeartbeatOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakeredge.SendHeartbeatInput, ...func(*sagemakeredge.Options)) (*sagemakeredge.SendHeartbeatOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakeredge.SendHeartbeatInput, ...func(*sagemakeredge.Options)) *sagemakeredge.SendHeartbeatOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakeredge.SendHeartbeatOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakeredge.SendHeartbeatInput, ...func(*sagemakeredge.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
