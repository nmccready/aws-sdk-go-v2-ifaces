// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	qbusiness "github.com/aws/aws-sdk-go-v2/service/qbusiness"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociatePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociatePermission(ctx context.Context, params *qbusiness.AssociatePermissionInput, optFns ...func(*qbusiness.Options)) (*qbusiness.AssociatePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociatePermission")
	}

	var r0 *qbusiness.AssociatePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.AssociatePermissionInput, ...func(*qbusiness.Options)) (*qbusiness.AssociatePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.AssociatePermissionInput, ...func(*qbusiness.Options)) *qbusiness.AssociatePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.AssociatePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.AssociatePermissionInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteDocument provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteDocument(ctx context.Context, params *qbusiness.BatchDeleteDocumentInput, optFns ...func(*qbusiness.Options)) (*qbusiness.BatchDeleteDocumentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteDocument")
	}

	var r0 *qbusiness.BatchDeleteDocumentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.BatchDeleteDocumentInput, ...func(*qbusiness.Options)) (*qbusiness.BatchDeleteDocumentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.BatchDeleteDocumentInput, ...func(*qbusiness.Options)) *qbusiness.BatchDeleteDocumentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.BatchDeleteDocumentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.BatchDeleteDocumentInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchPutDocument provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchPutDocument(ctx context.Context, params *qbusiness.BatchPutDocumentInput, optFns ...func(*qbusiness.Options)) (*qbusiness.BatchPutDocumentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutDocument")
	}

	var r0 *qbusiness.BatchPutDocumentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.BatchPutDocumentInput, ...func(*qbusiness.Options)) (*qbusiness.BatchPutDocumentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.BatchPutDocumentInput, ...func(*qbusiness.Options)) *qbusiness.BatchPutDocumentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.BatchPutDocumentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.BatchPutDocumentInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Chat provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Chat(ctx context.Context, params *qbusiness.ChatInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ChatOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Chat")
	}

	var r0 *qbusiness.ChatOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ChatInput, ...func(*qbusiness.Options)) (*qbusiness.ChatOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ChatInput, ...func(*qbusiness.Options)) *qbusiness.ChatOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ChatOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ChatInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ChatSync provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ChatSync(ctx context.Context, params *qbusiness.ChatSyncInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ChatSyncOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ChatSync")
	}

	var r0 *qbusiness.ChatSyncOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ChatSyncInput, ...func(*qbusiness.Options)) (*qbusiness.ChatSyncOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ChatSyncInput, ...func(*qbusiness.Options)) *qbusiness.ChatSyncOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ChatSyncOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ChatSyncInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApplication(ctx context.Context, params *qbusiness.CreateApplicationInput, optFns ...func(*qbusiness.Options)) (*qbusiness.CreateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApplication")
	}

	var r0 *qbusiness.CreateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateApplicationInput, ...func(*qbusiness.Options)) (*qbusiness.CreateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateApplicationInput, ...func(*qbusiness.Options)) *qbusiness.CreateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.CreateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.CreateApplicationInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataAccessor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataAccessor(ctx context.Context, params *qbusiness.CreateDataAccessorInput, optFns ...func(*qbusiness.Options)) (*qbusiness.CreateDataAccessorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataAccessor")
	}

	var r0 *qbusiness.CreateDataAccessorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateDataAccessorInput, ...func(*qbusiness.Options)) (*qbusiness.CreateDataAccessorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateDataAccessorInput, ...func(*qbusiness.Options)) *qbusiness.CreateDataAccessorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.CreateDataAccessorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.CreateDataAccessorInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataSource(ctx context.Context, params *qbusiness.CreateDataSourceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.CreateDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataSource")
	}

	var r0 *qbusiness.CreateDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateDataSourceInput, ...func(*qbusiness.Options)) (*qbusiness.CreateDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateDataSourceInput, ...func(*qbusiness.Options)) *qbusiness.CreateDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.CreateDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.CreateDataSourceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIndex(ctx context.Context, params *qbusiness.CreateIndexInput, optFns ...func(*qbusiness.Options)) (*qbusiness.CreateIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIndex")
	}

	var r0 *qbusiness.CreateIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateIndexInput, ...func(*qbusiness.Options)) (*qbusiness.CreateIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateIndexInput, ...func(*qbusiness.Options)) *qbusiness.CreateIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.CreateIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.CreateIndexInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePlugin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePlugin(ctx context.Context, params *qbusiness.CreatePluginInput, optFns ...func(*qbusiness.Options)) (*qbusiness.CreatePluginOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePlugin")
	}

	var r0 *qbusiness.CreatePluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreatePluginInput, ...func(*qbusiness.Options)) (*qbusiness.CreatePluginOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreatePluginInput, ...func(*qbusiness.Options)) *qbusiness.CreatePluginOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.CreatePluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.CreatePluginInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRetriever provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRetriever(ctx context.Context, params *qbusiness.CreateRetrieverInput, optFns ...func(*qbusiness.Options)) (*qbusiness.CreateRetrieverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRetriever")
	}

	var r0 *qbusiness.CreateRetrieverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateRetrieverInput, ...func(*qbusiness.Options)) (*qbusiness.CreateRetrieverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateRetrieverInput, ...func(*qbusiness.Options)) *qbusiness.CreateRetrieverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.CreateRetrieverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.CreateRetrieverInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *qbusiness.CreateUserInput, optFns ...func(*qbusiness.Options)) (*qbusiness.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *qbusiness.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateUserInput, ...func(*qbusiness.Options)) (*qbusiness.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateUserInput, ...func(*qbusiness.Options)) *qbusiness.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.CreateUserInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWebExperience provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWebExperience(ctx context.Context, params *qbusiness.CreateWebExperienceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.CreateWebExperienceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebExperience")
	}

	var r0 *qbusiness.CreateWebExperienceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateWebExperienceInput, ...func(*qbusiness.Options)) (*qbusiness.CreateWebExperienceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.CreateWebExperienceInput, ...func(*qbusiness.Options)) *qbusiness.CreateWebExperienceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.CreateWebExperienceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.CreateWebExperienceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApplication(ctx context.Context, params *qbusiness.DeleteApplicationInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApplication")
	}

	var r0 *qbusiness.DeleteApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteApplicationInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteApplicationInput, ...func(*qbusiness.Options)) *qbusiness.DeleteApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteApplicationInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteChatControlsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteChatControlsConfiguration(ctx context.Context, params *qbusiness.DeleteChatControlsConfigurationInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteChatControlsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteChatControlsConfiguration")
	}

	var r0 *qbusiness.DeleteChatControlsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteChatControlsConfigurationInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteChatControlsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteChatControlsConfigurationInput, ...func(*qbusiness.Options)) *qbusiness.DeleteChatControlsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteChatControlsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteChatControlsConfigurationInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConversation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConversation(ctx context.Context, params *qbusiness.DeleteConversationInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteConversationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConversation")
	}

	var r0 *qbusiness.DeleteConversationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteConversationInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteConversationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteConversationInput, ...func(*qbusiness.Options)) *qbusiness.DeleteConversationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteConversationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteConversationInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataAccessor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataAccessor(ctx context.Context, params *qbusiness.DeleteDataAccessorInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteDataAccessorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataAccessor")
	}

	var r0 *qbusiness.DeleteDataAccessorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteDataAccessorInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteDataAccessorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteDataAccessorInput, ...func(*qbusiness.Options)) *qbusiness.DeleteDataAccessorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteDataAccessorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteDataAccessorInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataSource(ctx context.Context, params *qbusiness.DeleteDataSourceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataSource")
	}

	var r0 *qbusiness.DeleteDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteDataSourceInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteDataSourceInput, ...func(*qbusiness.Options)) *qbusiness.DeleteDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteDataSourceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGroup(ctx context.Context, params *qbusiness.DeleteGroupInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *qbusiness.DeleteGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteGroupInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteGroupInput, ...func(*qbusiness.Options)) *qbusiness.DeleteGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteGroupInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIndex(ctx context.Context, params *qbusiness.DeleteIndexInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIndex")
	}

	var r0 *qbusiness.DeleteIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteIndexInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteIndexInput, ...func(*qbusiness.Options)) *qbusiness.DeleteIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteIndexInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePlugin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePlugin(ctx context.Context, params *qbusiness.DeletePluginInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeletePluginOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePlugin")
	}

	var r0 *qbusiness.DeletePluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeletePluginInput, ...func(*qbusiness.Options)) (*qbusiness.DeletePluginOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeletePluginInput, ...func(*qbusiness.Options)) *qbusiness.DeletePluginOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeletePluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeletePluginInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRetriever provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRetriever(ctx context.Context, params *qbusiness.DeleteRetrieverInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteRetrieverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRetriever")
	}

	var r0 *qbusiness.DeleteRetrieverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteRetrieverInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteRetrieverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteRetrieverInput, ...func(*qbusiness.Options)) *qbusiness.DeleteRetrieverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteRetrieverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteRetrieverInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *qbusiness.DeleteUserInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *qbusiness.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteUserInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteUserInput, ...func(*qbusiness.Options)) *qbusiness.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteUserInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWebExperience provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWebExperience(ctx context.Context, params *qbusiness.DeleteWebExperienceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DeleteWebExperienceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebExperience")
	}

	var r0 *qbusiness.DeleteWebExperienceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteWebExperienceInput, ...func(*qbusiness.Options)) (*qbusiness.DeleteWebExperienceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DeleteWebExperienceInput, ...func(*qbusiness.Options)) *qbusiness.DeleteWebExperienceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DeleteWebExperienceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DeleteWebExperienceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociatePermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociatePermission(ctx context.Context, params *qbusiness.DisassociatePermissionInput, optFns ...func(*qbusiness.Options)) (*qbusiness.DisassociatePermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociatePermission")
	}

	var r0 *qbusiness.DisassociatePermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DisassociatePermissionInput, ...func(*qbusiness.Options)) (*qbusiness.DisassociatePermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.DisassociatePermissionInput, ...func(*qbusiness.Options)) *qbusiness.DisassociatePermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.DisassociatePermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.DisassociatePermissionInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetApplication(ctx context.Context, params *qbusiness.GetApplicationInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetApplication")
	}

	var r0 *qbusiness.GetApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetApplicationInput, ...func(*qbusiness.Options)) (*qbusiness.GetApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetApplicationInput, ...func(*qbusiness.Options)) *qbusiness.GetApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetApplicationInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetChatControlsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetChatControlsConfiguration(ctx context.Context, params *qbusiness.GetChatControlsConfigurationInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetChatControlsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetChatControlsConfiguration")
	}

	var r0 *qbusiness.GetChatControlsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetChatControlsConfigurationInput, ...func(*qbusiness.Options)) (*qbusiness.GetChatControlsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetChatControlsConfigurationInput, ...func(*qbusiness.Options)) *qbusiness.GetChatControlsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetChatControlsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetChatControlsConfigurationInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataAccessor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataAccessor(ctx context.Context, params *qbusiness.GetDataAccessorInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetDataAccessorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataAccessor")
	}

	var r0 *qbusiness.GetDataAccessorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetDataAccessorInput, ...func(*qbusiness.Options)) (*qbusiness.GetDataAccessorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetDataAccessorInput, ...func(*qbusiness.Options)) *qbusiness.GetDataAccessorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetDataAccessorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetDataAccessorInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataSource(ctx context.Context, params *qbusiness.GetDataSourceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataSource")
	}

	var r0 *qbusiness.GetDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetDataSourceInput, ...func(*qbusiness.Options)) (*qbusiness.GetDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetDataSourceInput, ...func(*qbusiness.Options)) *qbusiness.GetDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetDataSourceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGroup(ctx context.Context, params *qbusiness.GetGroupInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *qbusiness.GetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetGroupInput, ...func(*qbusiness.Options)) (*qbusiness.GetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetGroupInput, ...func(*qbusiness.Options)) *qbusiness.GetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetGroupInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIndex(ctx context.Context, params *qbusiness.GetIndexInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIndex")
	}

	var r0 *qbusiness.GetIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetIndexInput, ...func(*qbusiness.Options)) (*qbusiness.GetIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetIndexInput, ...func(*qbusiness.Options)) *qbusiness.GetIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetIndexInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMedia provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMedia(ctx context.Context, params *qbusiness.GetMediaInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetMediaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMedia")
	}

	var r0 *qbusiness.GetMediaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetMediaInput, ...func(*qbusiness.Options)) (*qbusiness.GetMediaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetMediaInput, ...func(*qbusiness.Options)) *qbusiness.GetMediaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetMediaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetMediaInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPlugin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPlugin(ctx context.Context, params *qbusiness.GetPluginInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetPluginOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPlugin")
	}

	var r0 *qbusiness.GetPluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetPluginInput, ...func(*qbusiness.Options)) (*qbusiness.GetPluginOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetPluginInput, ...func(*qbusiness.Options)) *qbusiness.GetPluginOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetPluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetPluginInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPolicy(ctx context.Context, params *qbusiness.GetPolicyInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPolicy")
	}

	var r0 *qbusiness.GetPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetPolicyInput, ...func(*qbusiness.Options)) (*qbusiness.GetPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetPolicyInput, ...func(*qbusiness.Options)) *qbusiness.GetPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetPolicyInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRetriever provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRetriever(ctx context.Context, params *qbusiness.GetRetrieverInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetRetrieverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRetriever")
	}

	var r0 *qbusiness.GetRetrieverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetRetrieverInput, ...func(*qbusiness.Options)) (*qbusiness.GetRetrieverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetRetrieverInput, ...func(*qbusiness.Options)) *qbusiness.GetRetrieverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetRetrieverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetRetrieverInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetUser(ctx context.Context, params *qbusiness.GetUserInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *qbusiness.GetUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetUserInput, ...func(*qbusiness.Options)) (*qbusiness.GetUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetUserInput, ...func(*qbusiness.Options)) *qbusiness.GetUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetUserInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebExperience provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWebExperience(ctx context.Context, params *qbusiness.GetWebExperienceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.GetWebExperienceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWebExperience")
	}

	var r0 *qbusiness.GetWebExperienceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetWebExperienceInput, ...func(*qbusiness.Options)) (*qbusiness.GetWebExperienceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.GetWebExperienceInput, ...func(*qbusiness.Options)) *qbusiness.GetWebExperienceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.GetWebExperienceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.GetWebExperienceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApplications(ctx context.Context, params *qbusiness.ListApplicationsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListApplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApplications")
	}

	var r0 *qbusiness.ListApplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListApplicationsInput, ...func(*qbusiness.Options)) (*qbusiness.ListApplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListApplicationsInput, ...func(*qbusiness.Options)) *qbusiness.ListApplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListApplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListApplicationsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAttachments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAttachments(ctx context.Context, params *qbusiness.ListAttachmentsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListAttachmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAttachments")
	}

	var r0 *qbusiness.ListAttachmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListAttachmentsInput, ...func(*qbusiness.Options)) (*qbusiness.ListAttachmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListAttachmentsInput, ...func(*qbusiness.Options)) *qbusiness.ListAttachmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListAttachmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListAttachmentsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConversations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConversations(ctx context.Context, params *qbusiness.ListConversationsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListConversationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConversations")
	}

	var r0 *qbusiness.ListConversationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListConversationsInput, ...func(*qbusiness.Options)) (*qbusiness.ListConversationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListConversationsInput, ...func(*qbusiness.Options)) *qbusiness.ListConversationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListConversationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListConversationsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataAccessors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataAccessors(ctx context.Context, params *qbusiness.ListDataAccessorsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListDataAccessorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataAccessors")
	}

	var r0 *qbusiness.ListDataAccessorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListDataAccessorsInput, ...func(*qbusiness.Options)) (*qbusiness.ListDataAccessorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListDataAccessorsInput, ...func(*qbusiness.Options)) *qbusiness.ListDataAccessorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListDataAccessorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListDataAccessorsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSourceSyncJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSourceSyncJobs(ctx context.Context, params *qbusiness.ListDataSourceSyncJobsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListDataSourceSyncJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSourceSyncJobs")
	}

	var r0 *qbusiness.ListDataSourceSyncJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListDataSourceSyncJobsInput, ...func(*qbusiness.Options)) (*qbusiness.ListDataSourceSyncJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListDataSourceSyncJobsInput, ...func(*qbusiness.Options)) *qbusiness.ListDataSourceSyncJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListDataSourceSyncJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListDataSourceSyncJobsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataSources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataSources(ctx context.Context, params *qbusiness.ListDataSourcesInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListDataSourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataSources")
	}

	var r0 *qbusiness.ListDataSourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListDataSourcesInput, ...func(*qbusiness.Options)) (*qbusiness.ListDataSourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListDataSourcesInput, ...func(*qbusiness.Options)) *qbusiness.ListDataSourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListDataSourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListDataSourcesInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDocuments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDocuments(ctx context.Context, params *qbusiness.ListDocumentsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListDocumentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDocuments")
	}

	var r0 *qbusiness.ListDocumentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListDocumentsInput, ...func(*qbusiness.Options)) (*qbusiness.ListDocumentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListDocumentsInput, ...func(*qbusiness.Options)) *qbusiness.ListDocumentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListDocumentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListDocumentsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroups(ctx context.Context, params *qbusiness.ListGroupsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *qbusiness.ListGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListGroupsInput, ...func(*qbusiness.Options)) (*qbusiness.ListGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListGroupsInput, ...func(*qbusiness.Options)) *qbusiness.ListGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListGroupsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIndices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIndices(ctx context.Context, params *qbusiness.ListIndicesInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListIndicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIndices")
	}

	var r0 *qbusiness.ListIndicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListIndicesInput, ...func(*qbusiness.Options)) (*qbusiness.ListIndicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListIndicesInput, ...func(*qbusiness.Options)) *qbusiness.ListIndicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListIndicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListIndicesInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMessages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMessages(ctx context.Context, params *qbusiness.ListMessagesInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListMessagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMessages")
	}

	var r0 *qbusiness.ListMessagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListMessagesInput, ...func(*qbusiness.Options)) (*qbusiness.ListMessagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListMessagesInput, ...func(*qbusiness.Options)) *qbusiness.ListMessagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListMessagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListMessagesInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPluginActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPluginActions(ctx context.Context, params *qbusiness.ListPluginActionsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListPluginActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPluginActions")
	}

	var r0 *qbusiness.ListPluginActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListPluginActionsInput, ...func(*qbusiness.Options)) (*qbusiness.ListPluginActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListPluginActionsInput, ...func(*qbusiness.Options)) *qbusiness.ListPluginActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListPluginActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListPluginActionsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPluginTypeActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPluginTypeActions(ctx context.Context, params *qbusiness.ListPluginTypeActionsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListPluginTypeActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPluginTypeActions")
	}

	var r0 *qbusiness.ListPluginTypeActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListPluginTypeActionsInput, ...func(*qbusiness.Options)) (*qbusiness.ListPluginTypeActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListPluginTypeActionsInput, ...func(*qbusiness.Options)) *qbusiness.ListPluginTypeActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListPluginTypeActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListPluginTypeActionsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPluginTypeMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPluginTypeMetadata(ctx context.Context, params *qbusiness.ListPluginTypeMetadataInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListPluginTypeMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPluginTypeMetadata")
	}

	var r0 *qbusiness.ListPluginTypeMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListPluginTypeMetadataInput, ...func(*qbusiness.Options)) (*qbusiness.ListPluginTypeMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListPluginTypeMetadataInput, ...func(*qbusiness.Options)) *qbusiness.ListPluginTypeMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListPluginTypeMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListPluginTypeMetadataInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPlugins provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPlugins(ctx context.Context, params *qbusiness.ListPluginsInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListPluginsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPlugins")
	}

	var r0 *qbusiness.ListPluginsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListPluginsInput, ...func(*qbusiness.Options)) (*qbusiness.ListPluginsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListPluginsInput, ...func(*qbusiness.Options)) *qbusiness.ListPluginsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListPluginsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListPluginsInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRetrievers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRetrievers(ctx context.Context, params *qbusiness.ListRetrieversInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListRetrieversOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRetrievers")
	}

	var r0 *qbusiness.ListRetrieversOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListRetrieversInput, ...func(*qbusiness.Options)) (*qbusiness.ListRetrieversOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListRetrieversInput, ...func(*qbusiness.Options)) *qbusiness.ListRetrieversOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListRetrieversOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListRetrieversInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *qbusiness.ListTagsForResourceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *qbusiness.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListTagsForResourceInput, ...func(*qbusiness.Options)) (*qbusiness.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListTagsForResourceInput, ...func(*qbusiness.Options)) *qbusiness.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListTagsForResourceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWebExperiences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWebExperiences(ctx context.Context, params *qbusiness.ListWebExperiencesInput, optFns ...func(*qbusiness.Options)) (*qbusiness.ListWebExperiencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWebExperiences")
	}

	var r0 *qbusiness.ListWebExperiencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListWebExperiencesInput, ...func(*qbusiness.Options)) (*qbusiness.ListWebExperiencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.ListWebExperiencesInput, ...func(*qbusiness.Options)) *qbusiness.ListWebExperiencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.ListWebExperiencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.ListWebExperiencesInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() qbusiness.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 qbusiness.Options
	if rf, ok := ret.Get(0).(func() qbusiness.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(qbusiness.Options)
	}

	return r0
}

// PutFeedback provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutFeedback(ctx context.Context, params *qbusiness.PutFeedbackInput, optFns ...func(*qbusiness.Options)) (*qbusiness.PutFeedbackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutFeedback")
	}

	var r0 *qbusiness.PutFeedbackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.PutFeedbackInput, ...func(*qbusiness.Options)) (*qbusiness.PutFeedbackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.PutFeedbackInput, ...func(*qbusiness.Options)) *qbusiness.PutFeedbackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.PutFeedbackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.PutFeedbackInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutGroup(ctx context.Context, params *qbusiness.PutGroupInput, optFns ...func(*qbusiness.Options)) (*qbusiness.PutGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutGroup")
	}

	var r0 *qbusiness.PutGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.PutGroupInput, ...func(*qbusiness.Options)) (*qbusiness.PutGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.PutGroupInput, ...func(*qbusiness.Options)) *qbusiness.PutGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.PutGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.PutGroupInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRelevantContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchRelevantContent(ctx context.Context, params *qbusiness.SearchRelevantContentInput, optFns ...func(*qbusiness.Options)) (*qbusiness.SearchRelevantContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchRelevantContent")
	}

	var r0 *qbusiness.SearchRelevantContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.SearchRelevantContentInput, ...func(*qbusiness.Options)) (*qbusiness.SearchRelevantContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.SearchRelevantContentInput, ...func(*qbusiness.Options)) *qbusiness.SearchRelevantContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.SearchRelevantContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.SearchRelevantContentInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDataSourceSyncJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDataSourceSyncJob(ctx context.Context, params *qbusiness.StartDataSourceSyncJobInput, optFns ...func(*qbusiness.Options)) (*qbusiness.StartDataSourceSyncJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDataSourceSyncJob")
	}

	var r0 *qbusiness.StartDataSourceSyncJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.StartDataSourceSyncJobInput, ...func(*qbusiness.Options)) (*qbusiness.StartDataSourceSyncJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.StartDataSourceSyncJobInput, ...func(*qbusiness.Options)) *qbusiness.StartDataSourceSyncJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.StartDataSourceSyncJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.StartDataSourceSyncJobInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDataSourceSyncJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDataSourceSyncJob(ctx context.Context, params *qbusiness.StopDataSourceSyncJobInput, optFns ...func(*qbusiness.Options)) (*qbusiness.StopDataSourceSyncJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDataSourceSyncJob")
	}

	var r0 *qbusiness.StopDataSourceSyncJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.StopDataSourceSyncJobInput, ...func(*qbusiness.Options)) (*qbusiness.StopDataSourceSyncJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.StopDataSourceSyncJobInput, ...func(*qbusiness.Options)) *qbusiness.StopDataSourceSyncJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.StopDataSourceSyncJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.StopDataSourceSyncJobInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *qbusiness.TagResourceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *qbusiness.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.TagResourceInput, ...func(*qbusiness.Options)) (*qbusiness.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.TagResourceInput, ...func(*qbusiness.Options)) *qbusiness.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.TagResourceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *qbusiness.UntagResourceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *qbusiness.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UntagResourceInput, ...func(*qbusiness.Options)) (*qbusiness.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UntagResourceInput, ...func(*qbusiness.Options)) *qbusiness.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UntagResourceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApplication(ctx context.Context, params *qbusiness.UpdateApplicationInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdateApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApplication")
	}

	var r0 *qbusiness.UpdateApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateApplicationInput, ...func(*qbusiness.Options)) (*qbusiness.UpdateApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateApplicationInput, ...func(*qbusiness.Options)) *qbusiness.UpdateApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdateApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdateApplicationInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateChatControlsConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateChatControlsConfiguration(ctx context.Context, params *qbusiness.UpdateChatControlsConfigurationInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdateChatControlsConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateChatControlsConfiguration")
	}

	var r0 *qbusiness.UpdateChatControlsConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateChatControlsConfigurationInput, ...func(*qbusiness.Options)) (*qbusiness.UpdateChatControlsConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateChatControlsConfigurationInput, ...func(*qbusiness.Options)) *qbusiness.UpdateChatControlsConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdateChatControlsConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdateChatControlsConfigurationInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataAccessor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataAccessor(ctx context.Context, params *qbusiness.UpdateDataAccessorInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdateDataAccessorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataAccessor")
	}

	var r0 *qbusiness.UpdateDataAccessorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateDataAccessorInput, ...func(*qbusiness.Options)) (*qbusiness.UpdateDataAccessorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateDataAccessorInput, ...func(*qbusiness.Options)) *qbusiness.UpdateDataAccessorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdateDataAccessorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdateDataAccessorInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDataSource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDataSource(ctx context.Context, params *qbusiness.UpdateDataSourceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdateDataSourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDataSource")
	}

	var r0 *qbusiness.UpdateDataSourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateDataSourceInput, ...func(*qbusiness.Options)) (*qbusiness.UpdateDataSourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateDataSourceInput, ...func(*qbusiness.Options)) *qbusiness.UpdateDataSourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdateDataSourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdateDataSourceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIndex provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIndex(ctx context.Context, params *qbusiness.UpdateIndexInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdateIndexOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIndex")
	}

	var r0 *qbusiness.UpdateIndexOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateIndexInput, ...func(*qbusiness.Options)) (*qbusiness.UpdateIndexOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateIndexInput, ...func(*qbusiness.Options)) *qbusiness.UpdateIndexOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdateIndexOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdateIndexInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePlugin provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePlugin(ctx context.Context, params *qbusiness.UpdatePluginInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdatePluginOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePlugin")
	}

	var r0 *qbusiness.UpdatePluginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdatePluginInput, ...func(*qbusiness.Options)) (*qbusiness.UpdatePluginOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdatePluginInput, ...func(*qbusiness.Options)) *qbusiness.UpdatePluginOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdatePluginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdatePluginInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRetriever provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRetriever(ctx context.Context, params *qbusiness.UpdateRetrieverInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdateRetrieverOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRetriever")
	}

	var r0 *qbusiness.UpdateRetrieverOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateRetrieverInput, ...func(*qbusiness.Options)) (*qbusiness.UpdateRetrieverOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateRetrieverInput, ...func(*qbusiness.Options)) *qbusiness.UpdateRetrieverOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdateRetrieverOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdateRetrieverInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *qbusiness.UpdateUserInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *qbusiness.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateUserInput, ...func(*qbusiness.Options)) (*qbusiness.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateUserInput, ...func(*qbusiness.Options)) *qbusiness.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdateUserInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWebExperience provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWebExperience(ctx context.Context, params *qbusiness.UpdateWebExperienceInput, optFns ...func(*qbusiness.Options)) (*qbusiness.UpdateWebExperienceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWebExperience")
	}

	var r0 *qbusiness.UpdateWebExperienceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateWebExperienceInput, ...func(*qbusiness.Options)) (*qbusiness.UpdateWebExperienceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *qbusiness.UpdateWebExperienceInput, ...func(*qbusiness.Options)) *qbusiness.UpdateWebExperienceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*qbusiness.UpdateWebExperienceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *qbusiness.UpdateWebExperienceInput, ...func(*qbusiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
