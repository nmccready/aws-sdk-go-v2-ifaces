// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	invoicing "github.com/aws/aws-sdk-go-v2/service/invoicing"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetInvoiceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetInvoiceProfile(ctx context.Context, params *invoicing.BatchGetInvoiceProfileInput, optFns ...func(*invoicing.Options)) (*invoicing.BatchGetInvoiceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetInvoiceProfile")
	}

	var r0 *invoicing.BatchGetInvoiceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.BatchGetInvoiceProfileInput, ...func(*invoicing.Options)) (*invoicing.BatchGetInvoiceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.BatchGetInvoiceProfileInput, ...func(*invoicing.Options)) *invoicing.BatchGetInvoiceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.BatchGetInvoiceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.BatchGetInvoiceProfileInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInvoiceUnit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInvoiceUnit(ctx context.Context, params *invoicing.CreateInvoiceUnitInput, optFns ...func(*invoicing.Options)) (*invoicing.CreateInvoiceUnitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvoiceUnit")
	}

	var r0 *invoicing.CreateInvoiceUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.CreateInvoiceUnitInput, ...func(*invoicing.Options)) (*invoicing.CreateInvoiceUnitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.CreateInvoiceUnitInput, ...func(*invoicing.Options)) *invoicing.CreateInvoiceUnitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.CreateInvoiceUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.CreateInvoiceUnitInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvoiceUnit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInvoiceUnit(ctx context.Context, params *invoicing.DeleteInvoiceUnitInput, optFns ...func(*invoicing.Options)) (*invoicing.DeleteInvoiceUnitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvoiceUnit")
	}

	var r0 *invoicing.DeleteInvoiceUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.DeleteInvoiceUnitInput, ...func(*invoicing.Options)) (*invoicing.DeleteInvoiceUnitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.DeleteInvoiceUnitInput, ...func(*invoicing.Options)) *invoicing.DeleteInvoiceUnitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.DeleteInvoiceUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.DeleteInvoiceUnitInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvoiceUnit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInvoiceUnit(ctx context.Context, params *invoicing.GetInvoiceUnitInput, optFns ...func(*invoicing.Options)) (*invoicing.GetInvoiceUnitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvoiceUnit")
	}

	var r0 *invoicing.GetInvoiceUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.GetInvoiceUnitInput, ...func(*invoicing.Options)) (*invoicing.GetInvoiceUnitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.GetInvoiceUnitInput, ...func(*invoicing.Options)) *invoicing.GetInvoiceUnitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.GetInvoiceUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.GetInvoiceUnitInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvoiceSummaries provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvoiceSummaries(ctx context.Context, params *invoicing.ListInvoiceSummariesInput, optFns ...func(*invoicing.Options)) (*invoicing.ListInvoiceSummariesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoiceSummaries")
	}

	var r0 *invoicing.ListInvoiceSummariesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.ListInvoiceSummariesInput, ...func(*invoicing.Options)) (*invoicing.ListInvoiceSummariesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.ListInvoiceSummariesInput, ...func(*invoicing.Options)) *invoicing.ListInvoiceSummariesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.ListInvoiceSummariesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.ListInvoiceSummariesInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvoiceUnits provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvoiceUnits(ctx context.Context, params *invoicing.ListInvoiceUnitsInput, optFns ...func(*invoicing.Options)) (*invoicing.ListInvoiceUnitsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvoiceUnits")
	}

	var r0 *invoicing.ListInvoiceUnitsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.ListInvoiceUnitsInput, ...func(*invoicing.Options)) (*invoicing.ListInvoiceUnitsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.ListInvoiceUnitsInput, ...func(*invoicing.Options)) *invoicing.ListInvoiceUnitsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.ListInvoiceUnitsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.ListInvoiceUnitsInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *invoicing.ListTagsForResourceInput, optFns ...func(*invoicing.Options)) (*invoicing.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *invoicing.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.ListTagsForResourceInput, ...func(*invoicing.Options)) (*invoicing.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.ListTagsForResourceInput, ...func(*invoicing.Options)) *invoicing.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.ListTagsForResourceInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() invoicing.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 invoicing.Options
	if rf, ok := ret.Get(0).(func() invoicing.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(invoicing.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *invoicing.TagResourceInput, optFns ...func(*invoicing.Options)) (*invoicing.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *invoicing.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.TagResourceInput, ...func(*invoicing.Options)) (*invoicing.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.TagResourceInput, ...func(*invoicing.Options)) *invoicing.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.TagResourceInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *invoicing.UntagResourceInput, optFns ...func(*invoicing.Options)) (*invoicing.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *invoicing.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.UntagResourceInput, ...func(*invoicing.Options)) (*invoicing.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.UntagResourceInput, ...func(*invoicing.Options)) *invoicing.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.UntagResourceInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvoiceUnit provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInvoiceUnit(ctx context.Context, params *invoicing.UpdateInvoiceUnitInput, optFns ...func(*invoicing.Options)) (*invoicing.UpdateInvoiceUnitOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvoiceUnit")
	}

	var r0 *invoicing.UpdateInvoiceUnitOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.UpdateInvoiceUnitInput, ...func(*invoicing.Options)) (*invoicing.UpdateInvoiceUnitOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *invoicing.UpdateInvoiceUnitInput, ...func(*invoicing.Options)) *invoicing.UpdateInvoiceUnitOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*invoicing.UpdateInvoiceUnitOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *invoicing.UpdateInvoiceUnitInput, ...func(*invoicing.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
