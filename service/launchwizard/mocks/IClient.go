// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	launchwizard "github.com/aws/aws-sdk-go-v2/service/launchwizard"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeployment(ctx context.Context, params *launchwizard.CreateDeploymentInput, optFns ...func(*launchwizard.Options)) (*launchwizard.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *launchwizard.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.CreateDeploymentInput, ...func(*launchwizard.Options)) (*launchwizard.CreateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.CreateDeploymentInput, ...func(*launchwizard.Options)) *launchwizard.CreateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.CreateDeploymentInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeployment(ctx context.Context, params *launchwizard.DeleteDeploymentInput, optFns ...func(*launchwizard.Options)) (*launchwizard.DeleteDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 *launchwizard.DeleteDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.DeleteDeploymentInput, ...func(*launchwizard.Options)) (*launchwizard.DeleteDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.DeleteDeploymentInput, ...func(*launchwizard.Options)) *launchwizard.DeleteDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.DeleteDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.DeleteDeploymentInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployment(ctx context.Context, params *launchwizard.GetDeploymentInput, optFns ...func(*launchwizard.Options)) (*launchwizard.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *launchwizard.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.GetDeploymentInput, ...func(*launchwizard.Options)) (*launchwizard.GetDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.GetDeploymentInput, ...func(*launchwizard.Options)) *launchwizard.GetDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.GetDeploymentInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkload provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkload(ctx context.Context, params *launchwizard.GetWorkloadInput, optFns ...func(*launchwizard.Options)) (*launchwizard.GetWorkloadOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkload")
	}

	var r0 *launchwizard.GetWorkloadOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.GetWorkloadInput, ...func(*launchwizard.Options)) (*launchwizard.GetWorkloadOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.GetWorkloadInput, ...func(*launchwizard.Options)) *launchwizard.GetWorkloadOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.GetWorkloadOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.GetWorkloadInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWorkloadDeploymentPattern provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetWorkloadDeploymentPattern(ctx context.Context, params *launchwizard.GetWorkloadDeploymentPatternInput, optFns ...func(*launchwizard.Options)) (*launchwizard.GetWorkloadDeploymentPatternOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetWorkloadDeploymentPattern")
	}

	var r0 *launchwizard.GetWorkloadDeploymentPatternOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.GetWorkloadDeploymentPatternInput, ...func(*launchwizard.Options)) (*launchwizard.GetWorkloadDeploymentPatternOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.GetWorkloadDeploymentPatternInput, ...func(*launchwizard.Options)) *launchwizard.GetWorkloadDeploymentPatternOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.GetWorkloadDeploymentPatternOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.GetWorkloadDeploymentPatternInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeploymentEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeploymentEvents(ctx context.Context, params *launchwizard.ListDeploymentEventsInput, optFns ...func(*launchwizard.Options)) (*launchwizard.ListDeploymentEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeploymentEvents")
	}

	var r0 *launchwizard.ListDeploymentEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListDeploymentEventsInput, ...func(*launchwizard.Options)) (*launchwizard.ListDeploymentEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListDeploymentEventsInput, ...func(*launchwizard.Options)) *launchwizard.ListDeploymentEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.ListDeploymentEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.ListDeploymentEventsInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeployments(ctx context.Context, params *launchwizard.ListDeploymentsInput, optFns ...func(*launchwizard.Options)) (*launchwizard.ListDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 *launchwizard.ListDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListDeploymentsInput, ...func(*launchwizard.Options)) (*launchwizard.ListDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListDeploymentsInput, ...func(*launchwizard.Options)) *launchwizard.ListDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.ListDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.ListDeploymentsInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *launchwizard.ListTagsForResourceInput, optFns ...func(*launchwizard.Options)) (*launchwizard.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *launchwizard.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListTagsForResourceInput, ...func(*launchwizard.Options)) (*launchwizard.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListTagsForResourceInput, ...func(*launchwizard.Options)) *launchwizard.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.ListTagsForResourceInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkloadDeploymentPatterns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkloadDeploymentPatterns(ctx context.Context, params *launchwizard.ListWorkloadDeploymentPatternsInput, optFns ...func(*launchwizard.Options)) (*launchwizard.ListWorkloadDeploymentPatternsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloadDeploymentPatterns")
	}

	var r0 *launchwizard.ListWorkloadDeploymentPatternsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListWorkloadDeploymentPatternsInput, ...func(*launchwizard.Options)) (*launchwizard.ListWorkloadDeploymentPatternsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListWorkloadDeploymentPatternsInput, ...func(*launchwizard.Options)) *launchwizard.ListWorkloadDeploymentPatternsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.ListWorkloadDeploymentPatternsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.ListWorkloadDeploymentPatternsInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkloads provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkloads(ctx context.Context, params *launchwizard.ListWorkloadsInput, optFns ...func(*launchwizard.Options)) (*launchwizard.ListWorkloadsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkloads")
	}

	var r0 *launchwizard.ListWorkloadsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListWorkloadsInput, ...func(*launchwizard.Options)) (*launchwizard.ListWorkloadsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.ListWorkloadsInput, ...func(*launchwizard.Options)) *launchwizard.ListWorkloadsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.ListWorkloadsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.ListWorkloadsInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() launchwizard.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 launchwizard.Options
	if rf, ok := ret.Get(0).(func() launchwizard.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(launchwizard.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *launchwizard.TagResourceInput, optFns ...func(*launchwizard.Options)) (*launchwizard.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *launchwizard.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.TagResourceInput, ...func(*launchwizard.Options)) (*launchwizard.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.TagResourceInput, ...func(*launchwizard.Options)) *launchwizard.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.TagResourceInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *launchwizard.UntagResourceInput, optFns ...func(*launchwizard.Options)) (*launchwizard.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *launchwizard.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.UntagResourceInput, ...func(*launchwizard.Options)) (*launchwizard.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *launchwizard.UntagResourceInput, ...func(*launchwizard.Options)) *launchwizard.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*launchwizard.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *launchwizard.UntagResourceInput, ...func(*launchwizard.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
