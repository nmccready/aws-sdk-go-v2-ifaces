// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	route53recoveryreadiness "github.com/aws/aws-sdk-go-v2/service/route53recoveryreadiness"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateCell provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCell(ctx context.Context, params *route53recoveryreadiness.CreateCellInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateCellOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCell")
	}

	var r0 *route53recoveryreadiness.CreateCellOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateCellInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateCellOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateCellInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.CreateCellOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.CreateCellOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.CreateCellInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCrossAccountAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCrossAccountAuthorization(ctx context.Context, params *route53recoveryreadiness.CreateCrossAccountAuthorizationInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateCrossAccountAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCrossAccountAuthorization")
	}

	var r0 *route53recoveryreadiness.CreateCrossAccountAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateCrossAccountAuthorizationInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateCrossAccountAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateCrossAccountAuthorizationInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.CreateCrossAccountAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.CreateCrossAccountAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.CreateCrossAccountAuthorizationInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReadinessCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReadinessCheck(ctx context.Context, params *route53recoveryreadiness.CreateReadinessCheckInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateReadinessCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReadinessCheck")
	}

	var r0 *route53recoveryreadiness.CreateReadinessCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateReadinessCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.CreateReadinessCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.CreateReadinessCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.CreateReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRecoveryGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRecoveryGroup(ctx context.Context, params *route53recoveryreadiness.CreateRecoveryGroupInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateRecoveryGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRecoveryGroup")
	}

	var r0 *route53recoveryreadiness.CreateRecoveryGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateRecoveryGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.CreateRecoveryGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.CreateRecoveryGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.CreateRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceSet(ctx context.Context, params *route53recoveryreadiness.CreateResourceSetInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateResourceSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceSet")
	}

	var r0 *route53recoveryreadiness.CreateResourceSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateResourceSetInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.CreateResourceSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.CreateResourceSetInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.CreateResourceSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.CreateResourceSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.CreateResourceSetInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCell provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCell(ctx context.Context, params *route53recoveryreadiness.DeleteCellInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteCellOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCell")
	}

	var r0 *route53recoveryreadiness.DeleteCellOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteCellInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteCellOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteCellInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.DeleteCellOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.DeleteCellOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.DeleteCellInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCrossAccountAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCrossAccountAuthorization(ctx context.Context, params *route53recoveryreadiness.DeleteCrossAccountAuthorizationInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCrossAccountAuthorization")
	}

	var r0 *route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteCrossAccountAuthorizationInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteCrossAccountAuthorizationInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.DeleteCrossAccountAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.DeleteCrossAccountAuthorizationInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReadinessCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReadinessCheck(ctx context.Context, params *route53recoveryreadiness.DeleteReadinessCheckInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteReadinessCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReadinessCheck")
	}

	var r0 *route53recoveryreadiness.DeleteReadinessCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteReadinessCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.DeleteReadinessCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.DeleteReadinessCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.DeleteReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRecoveryGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRecoveryGroup(ctx context.Context, params *route53recoveryreadiness.DeleteRecoveryGroupInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteRecoveryGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRecoveryGroup")
	}

	var r0 *route53recoveryreadiness.DeleteRecoveryGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteRecoveryGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.DeleteRecoveryGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.DeleteRecoveryGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.DeleteRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceSet(ctx context.Context, params *route53recoveryreadiness.DeleteResourceSetInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteResourceSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceSet")
	}

	var r0 *route53recoveryreadiness.DeleteResourceSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteResourceSetInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.DeleteResourceSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.DeleteResourceSetInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.DeleteResourceSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.DeleteResourceSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.DeleteResourceSetInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchitectureRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetArchitectureRecommendations(ctx context.Context, params *route53recoveryreadiness.GetArchitectureRecommendationsInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetArchitectureRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArchitectureRecommendations")
	}

	var r0 *route53recoveryreadiness.GetArchitectureRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetArchitectureRecommendationsInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetArchitectureRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetArchitectureRecommendationsInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetArchitectureRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetArchitectureRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetArchitectureRecommendationsInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCell provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCell(ctx context.Context, params *route53recoveryreadiness.GetCellInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetCellOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCell")
	}

	var r0 *route53recoveryreadiness.GetCellOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetCellInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetCellOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetCellInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetCellOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetCellOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetCellInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCellReadinessSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCellReadinessSummary(ctx context.Context, params *route53recoveryreadiness.GetCellReadinessSummaryInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetCellReadinessSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCellReadinessSummary")
	}

	var r0 *route53recoveryreadiness.GetCellReadinessSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetCellReadinessSummaryInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetCellReadinessSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetCellReadinessSummaryInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetCellReadinessSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetCellReadinessSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetCellReadinessSummaryInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReadinessCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReadinessCheck(ctx context.Context, params *route53recoveryreadiness.GetReadinessCheckInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReadinessCheck")
	}

	var r0 *route53recoveryreadiness.GetReadinessCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetReadinessCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetReadinessCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReadinessCheckResourceStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReadinessCheckResourceStatus(ctx context.Context, params *route53recoveryreadiness.GetReadinessCheckResourceStatusInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReadinessCheckResourceStatus")
	}

	var r0 *route53recoveryreadiness.GetReadinessCheckResourceStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckResourceStatusInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckResourceStatusInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetReadinessCheckResourceStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetReadinessCheckResourceStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckResourceStatusInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReadinessCheckStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetReadinessCheckStatus(ctx context.Context, params *route53recoveryreadiness.GetReadinessCheckStatusInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetReadinessCheckStatus")
	}

	var r0 *route53recoveryreadiness.GetReadinessCheckStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckStatusInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetReadinessCheckStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckStatusInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetReadinessCheckStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetReadinessCheckStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetReadinessCheckStatusInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecoveryGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecoveryGroup(ctx context.Context, params *route53recoveryreadiness.GetRecoveryGroupInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetRecoveryGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecoveryGroup")
	}

	var r0 *route53recoveryreadiness.GetRecoveryGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetRecoveryGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetRecoveryGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetRecoveryGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRecoveryGroupReadinessSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRecoveryGroupReadinessSummary(ctx context.Context, params *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRecoveryGroupReadinessSummary")
	}

	var r0 *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetRecoveryGroupReadinessSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetRecoveryGroupReadinessSummaryInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceSet(ctx context.Context, params *route53recoveryreadiness.GetResourceSetInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetResourceSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceSet")
	}

	var r0 *route53recoveryreadiness.GetResourceSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetResourceSetInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.GetResourceSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.GetResourceSetInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.GetResourceSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.GetResourceSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.GetResourceSetInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCells provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCells(ctx context.Context, params *route53recoveryreadiness.ListCellsInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListCellsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCells")
	}

	var r0 *route53recoveryreadiness.ListCellsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListCellsInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListCellsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListCellsInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.ListCellsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.ListCellsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.ListCellsInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCrossAccountAuthorizations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCrossAccountAuthorizations(ctx context.Context, params *route53recoveryreadiness.ListCrossAccountAuthorizationsInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCrossAccountAuthorizations")
	}

	var r0 *route53recoveryreadiness.ListCrossAccountAuthorizationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListCrossAccountAuthorizationsInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListCrossAccountAuthorizationsInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.ListCrossAccountAuthorizationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.ListCrossAccountAuthorizationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.ListCrossAccountAuthorizationsInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReadinessChecks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListReadinessChecks(ctx context.Context, params *route53recoveryreadiness.ListReadinessChecksInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListReadinessChecksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListReadinessChecks")
	}

	var r0 *route53recoveryreadiness.ListReadinessChecksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListReadinessChecksInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListReadinessChecksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListReadinessChecksInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.ListReadinessChecksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.ListReadinessChecksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.ListReadinessChecksInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRecoveryGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRecoveryGroups(ctx context.Context, params *route53recoveryreadiness.ListRecoveryGroupsInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListRecoveryGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRecoveryGroups")
	}

	var r0 *route53recoveryreadiness.ListRecoveryGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListRecoveryGroupsInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListRecoveryGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListRecoveryGroupsInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.ListRecoveryGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.ListRecoveryGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.ListRecoveryGroupsInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceSets(ctx context.Context, params *route53recoveryreadiness.ListResourceSetsInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListResourceSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceSets")
	}

	var r0 *route53recoveryreadiness.ListResourceSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListResourceSetsInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListResourceSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListResourceSetsInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.ListResourceSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.ListResourceSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.ListResourceSetsInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRules(ctx context.Context, params *route53recoveryreadiness.ListRulesInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRules")
	}

	var r0 *route53recoveryreadiness.ListRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListRulesInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListRulesInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.ListRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.ListRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.ListRulesInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResources(ctx context.Context, params *route53recoveryreadiness.ListTagsForResourcesInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListTagsForResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResources")
	}

	var r0 *route53recoveryreadiness.ListTagsForResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListTagsForResourcesInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.ListTagsForResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.ListTagsForResourcesInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.ListTagsForResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.ListTagsForResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.ListTagsForResourcesInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() route53recoveryreadiness.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 route53recoveryreadiness.Options
	if rf, ok := ret.Get(0).(func() route53recoveryreadiness.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(route53recoveryreadiness.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *route53recoveryreadiness.TagResourceInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *route53recoveryreadiness.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.TagResourceInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.TagResourceInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.TagResourceInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *route53recoveryreadiness.UntagResourceInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *route53recoveryreadiness.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UntagResourceInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UntagResourceInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.UntagResourceInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCell provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCell(ctx context.Context, params *route53recoveryreadiness.UpdateCellInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UpdateCellOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCell")
	}

	var r0 *route53recoveryreadiness.UpdateCellOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UpdateCellInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UpdateCellOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UpdateCellInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.UpdateCellOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.UpdateCellOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.UpdateCellInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateReadinessCheck provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateReadinessCheck(ctx context.Context, params *route53recoveryreadiness.UpdateReadinessCheckInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UpdateReadinessCheckOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateReadinessCheck")
	}

	var r0 *route53recoveryreadiness.UpdateReadinessCheckOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UpdateReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UpdateReadinessCheckOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UpdateReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.UpdateReadinessCheckOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.UpdateReadinessCheckOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.UpdateReadinessCheckInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRecoveryGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRecoveryGroup(ctx context.Context, params *route53recoveryreadiness.UpdateRecoveryGroupInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UpdateRecoveryGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRecoveryGroup")
	}

	var r0 *route53recoveryreadiness.UpdateRecoveryGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UpdateRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UpdateRecoveryGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UpdateRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.UpdateRecoveryGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.UpdateRecoveryGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.UpdateRecoveryGroupInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceSet(ctx context.Context, params *route53recoveryreadiness.UpdateResourceSetInput, optFns ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UpdateResourceSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceSet")
	}

	var r0 *route53recoveryreadiness.UpdateResourceSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UpdateResourceSetInput, ...func(*route53recoveryreadiness.Options)) (*route53recoveryreadiness.UpdateResourceSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53recoveryreadiness.UpdateResourceSetInput, ...func(*route53recoveryreadiness.Options)) *route53recoveryreadiness.UpdateResourceSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53recoveryreadiness.UpdateResourceSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53recoveryreadiness.UpdateResourceSetInput, ...func(*route53recoveryreadiness.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
