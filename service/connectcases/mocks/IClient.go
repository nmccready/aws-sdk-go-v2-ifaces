// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	connectcases "github.com/aws/aws-sdk-go-v2/service/connectcases"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchGetField provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchGetField(ctx context.Context, params *connectcases.BatchGetFieldInput, optFns ...func(*connectcases.Options)) (*connectcases.BatchGetFieldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchGetField")
	}

	var r0 *connectcases.BatchGetFieldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.BatchGetFieldInput, ...func(*connectcases.Options)) (*connectcases.BatchGetFieldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.BatchGetFieldInput, ...func(*connectcases.Options)) *connectcases.BatchGetFieldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.BatchGetFieldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.BatchGetFieldInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchPutFieldOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchPutFieldOptions(ctx context.Context, params *connectcases.BatchPutFieldOptionsInput, optFns ...func(*connectcases.Options)) (*connectcases.BatchPutFieldOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchPutFieldOptions")
	}

	var r0 *connectcases.BatchPutFieldOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.BatchPutFieldOptionsInput, ...func(*connectcases.Options)) (*connectcases.BatchPutFieldOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.BatchPutFieldOptionsInput, ...func(*connectcases.Options)) *connectcases.BatchPutFieldOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.BatchPutFieldOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.BatchPutFieldOptionsInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCase(ctx context.Context, params *connectcases.CreateCaseInput, optFns ...func(*connectcases.Options)) (*connectcases.CreateCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCase")
	}

	var r0 *connectcases.CreateCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateCaseInput, ...func(*connectcases.Options)) (*connectcases.CreateCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateCaseInput, ...func(*connectcases.Options)) *connectcases.CreateCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.CreateCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.CreateCaseInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomain(ctx context.Context, params *connectcases.CreateDomainInput, optFns ...func(*connectcases.Options)) (*connectcases.CreateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 *connectcases.CreateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateDomainInput, ...func(*connectcases.Options)) (*connectcases.CreateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateDomainInput, ...func(*connectcases.Options)) *connectcases.CreateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.CreateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.CreateDomainInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateField provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateField(ctx context.Context, params *connectcases.CreateFieldInput, optFns ...func(*connectcases.Options)) (*connectcases.CreateFieldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateField")
	}

	var r0 *connectcases.CreateFieldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateFieldInput, ...func(*connectcases.Options)) (*connectcases.CreateFieldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateFieldInput, ...func(*connectcases.Options)) *connectcases.CreateFieldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.CreateFieldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.CreateFieldInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLayout provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLayout(ctx context.Context, params *connectcases.CreateLayoutInput, optFns ...func(*connectcases.Options)) (*connectcases.CreateLayoutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLayout")
	}

	var r0 *connectcases.CreateLayoutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateLayoutInput, ...func(*connectcases.Options)) (*connectcases.CreateLayoutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateLayoutInput, ...func(*connectcases.Options)) *connectcases.CreateLayoutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.CreateLayoutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.CreateLayoutInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelatedItem provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRelatedItem(ctx context.Context, params *connectcases.CreateRelatedItemInput, optFns ...func(*connectcases.Options)) (*connectcases.CreateRelatedItemOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelatedItem")
	}

	var r0 *connectcases.CreateRelatedItemOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateRelatedItemInput, ...func(*connectcases.Options)) (*connectcases.CreateRelatedItemOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateRelatedItemInput, ...func(*connectcases.Options)) *connectcases.CreateRelatedItemOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.CreateRelatedItemOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.CreateRelatedItemInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTemplate(ctx context.Context, params *connectcases.CreateTemplateInput, optFns ...func(*connectcases.Options)) (*connectcases.CreateTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTemplate")
	}

	var r0 *connectcases.CreateTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateTemplateInput, ...func(*connectcases.Options)) (*connectcases.CreateTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.CreateTemplateInput, ...func(*connectcases.Options)) *connectcases.CreateTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.CreateTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.CreateTemplateInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomain(ctx context.Context, params *connectcases.DeleteDomainInput, optFns ...func(*connectcases.Options)) (*connectcases.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomain")
	}

	var r0 *connectcases.DeleteDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.DeleteDomainInput, ...func(*connectcases.Options)) (*connectcases.DeleteDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.DeleteDomainInput, ...func(*connectcases.Options)) *connectcases.DeleteDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.DeleteDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.DeleteDomainInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteField provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteField(ctx context.Context, params *connectcases.DeleteFieldInput, optFns ...func(*connectcases.Options)) (*connectcases.DeleteFieldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteField")
	}

	var r0 *connectcases.DeleteFieldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.DeleteFieldInput, ...func(*connectcases.Options)) (*connectcases.DeleteFieldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.DeleteFieldInput, ...func(*connectcases.Options)) *connectcases.DeleteFieldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.DeleteFieldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.DeleteFieldInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLayout provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLayout(ctx context.Context, params *connectcases.DeleteLayoutInput, optFns ...func(*connectcases.Options)) (*connectcases.DeleteLayoutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLayout")
	}

	var r0 *connectcases.DeleteLayoutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.DeleteLayoutInput, ...func(*connectcases.Options)) (*connectcases.DeleteLayoutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.DeleteLayoutInput, ...func(*connectcases.Options)) *connectcases.DeleteLayoutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.DeleteLayoutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.DeleteLayoutInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTemplate(ctx context.Context, params *connectcases.DeleteTemplateInput, optFns ...func(*connectcases.Options)) (*connectcases.DeleteTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTemplate")
	}

	var r0 *connectcases.DeleteTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.DeleteTemplateInput, ...func(*connectcases.Options)) (*connectcases.DeleteTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.DeleteTemplateInput, ...func(*connectcases.Options)) *connectcases.DeleteTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.DeleteTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.DeleteTemplateInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCase(ctx context.Context, params *connectcases.GetCaseInput, optFns ...func(*connectcases.Options)) (*connectcases.GetCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCase")
	}

	var r0 *connectcases.GetCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetCaseInput, ...func(*connectcases.Options)) (*connectcases.GetCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetCaseInput, ...func(*connectcases.Options)) *connectcases.GetCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.GetCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.GetCaseInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCaseAuditEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCaseAuditEvents(ctx context.Context, params *connectcases.GetCaseAuditEventsInput, optFns ...func(*connectcases.Options)) (*connectcases.GetCaseAuditEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCaseAuditEvents")
	}

	var r0 *connectcases.GetCaseAuditEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetCaseAuditEventsInput, ...func(*connectcases.Options)) (*connectcases.GetCaseAuditEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetCaseAuditEventsInput, ...func(*connectcases.Options)) *connectcases.GetCaseAuditEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.GetCaseAuditEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.GetCaseAuditEventsInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCaseEventConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCaseEventConfiguration(ctx context.Context, params *connectcases.GetCaseEventConfigurationInput, optFns ...func(*connectcases.Options)) (*connectcases.GetCaseEventConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCaseEventConfiguration")
	}

	var r0 *connectcases.GetCaseEventConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetCaseEventConfigurationInput, ...func(*connectcases.Options)) (*connectcases.GetCaseEventConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetCaseEventConfigurationInput, ...func(*connectcases.Options)) *connectcases.GetCaseEventConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.GetCaseEventConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.GetCaseEventConfigurationInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomain(ctx context.Context, params *connectcases.GetDomainInput, optFns ...func(*connectcases.Options)) (*connectcases.GetDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomain")
	}

	var r0 *connectcases.GetDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetDomainInput, ...func(*connectcases.Options)) (*connectcases.GetDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetDomainInput, ...func(*connectcases.Options)) *connectcases.GetDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.GetDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.GetDomainInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLayout provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLayout(ctx context.Context, params *connectcases.GetLayoutInput, optFns ...func(*connectcases.Options)) (*connectcases.GetLayoutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLayout")
	}

	var r0 *connectcases.GetLayoutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetLayoutInput, ...func(*connectcases.Options)) (*connectcases.GetLayoutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetLayoutInput, ...func(*connectcases.Options)) *connectcases.GetLayoutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.GetLayoutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.GetLayoutInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTemplate(ctx context.Context, params *connectcases.GetTemplateInput, optFns ...func(*connectcases.Options)) (*connectcases.GetTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTemplate")
	}

	var r0 *connectcases.GetTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetTemplateInput, ...func(*connectcases.Options)) (*connectcases.GetTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.GetTemplateInput, ...func(*connectcases.Options)) *connectcases.GetTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.GetTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.GetTemplateInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCasesForContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCasesForContact(ctx context.Context, params *connectcases.ListCasesForContactInput, optFns ...func(*connectcases.Options)) (*connectcases.ListCasesForContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCasesForContact")
	}

	var r0 *connectcases.ListCasesForContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListCasesForContactInput, ...func(*connectcases.Options)) (*connectcases.ListCasesForContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListCasesForContactInput, ...func(*connectcases.Options)) *connectcases.ListCasesForContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.ListCasesForContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.ListCasesForContactInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomains(ctx context.Context, params *connectcases.ListDomainsInput, optFns ...func(*connectcases.Options)) (*connectcases.ListDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 *connectcases.ListDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListDomainsInput, ...func(*connectcases.Options)) (*connectcases.ListDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListDomainsInput, ...func(*connectcases.Options)) *connectcases.ListDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.ListDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.ListDomainsInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFieldOptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFieldOptions(ctx context.Context, params *connectcases.ListFieldOptionsInput, optFns ...func(*connectcases.Options)) (*connectcases.ListFieldOptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFieldOptions")
	}

	var r0 *connectcases.ListFieldOptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListFieldOptionsInput, ...func(*connectcases.Options)) (*connectcases.ListFieldOptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListFieldOptionsInput, ...func(*connectcases.Options)) *connectcases.ListFieldOptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.ListFieldOptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.ListFieldOptionsInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFields provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFields(ctx context.Context, params *connectcases.ListFieldsInput, optFns ...func(*connectcases.Options)) (*connectcases.ListFieldsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFields")
	}

	var r0 *connectcases.ListFieldsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListFieldsInput, ...func(*connectcases.Options)) (*connectcases.ListFieldsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListFieldsInput, ...func(*connectcases.Options)) *connectcases.ListFieldsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.ListFieldsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.ListFieldsInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLayouts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLayouts(ctx context.Context, params *connectcases.ListLayoutsInput, optFns ...func(*connectcases.Options)) (*connectcases.ListLayoutsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLayouts")
	}

	var r0 *connectcases.ListLayoutsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListLayoutsInput, ...func(*connectcases.Options)) (*connectcases.ListLayoutsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListLayoutsInput, ...func(*connectcases.Options)) *connectcases.ListLayoutsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.ListLayoutsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.ListLayoutsInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *connectcases.ListTagsForResourceInput, optFns ...func(*connectcases.Options)) (*connectcases.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *connectcases.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListTagsForResourceInput, ...func(*connectcases.Options)) (*connectcases.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListTagsForResourceInput, ...func(*connectcases.Options)) *connectcases.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.ListTagsForResourceInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTemplates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTemplates(ctx context.Context, params *connectcases.ListTemplatesInput, optFns ...func(*connectcases.Options)) (*connectcases.ListTemplatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTemplates")
	}

	var r0 *connectcases.ListTemplatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListTemplatesInput, ...func(*connectcases.Options)) (*connectcases.ListTemplatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.ListTemplatesInput, ...func(*connectcases.Options)) *connectcases.ListTemplatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.ListTemplatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.ListTemplatesInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() connectcases.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 connectcases.Options
	if rf, ok := ret.Get(0).(func() connectcases.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(connectcases.Options)
	}

	return r0
}

// PutCaseEventConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutCaseEventConfiguration(ctx context.Context, params *connectcases.PutCaseEventConfigurationInput, optFns ...func(*connectcases.Options)) (*connectcases.PutCaseEventConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutCaseEventConfiguration")
	}

	var r0 *connectcases.PutCaseEventConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.PutCaseEventConfigurationInput, ...func(*connectcases.Options)) (*connectcases.PutCaseEventConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.PutCaseEventConfigurationInput, ...func(*connectcases.Options)) *connectcases.PutCaseEventConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.PutCaseEventConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.PutCaseEventConfigurationInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchCases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchCases(ctx context.Context, params *connectcases.SearchCasesInput, optFns ...func(*connectcases.Options)) (*connectcases.SearchCasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchCases")
	}

	var r0 *connectcases.SearchCasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.SearchCasesInput, ...func(*connectcases.Options)) (*connectcases.SearchCasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.SearchCasesInput, ...func(*connectcases.Options)) *connectcases.SearchCasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.SearchCasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.SearchCasesInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchRelatedItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchRelatedItems(ctx context.Context, params *connectcases.SearchRelatedItemsInput, optFns ...func(*connectcases.Options)) (*connectcases.SearchRelatedItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchRelatedItems")
	}

	var r0 *connectcases.SearchRelatedItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.SearchRelatedItemsInput, ...func(*connectcases.Options)) (*connectcases.SearchRelatedItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.SearchRelatedItemsInput, ...func(*connectcases.Options)) *connectcases.SearchRelatedItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.SearchRelatedItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.SearchRelatedItemsInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *connectcases.TagResourceInput, optFns ...func(*connectcases.Options)) (*connectcases.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *connectcases.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.TagResourceInput, ...func(*connectcases.Options)) (*connectcases.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.TagResourceInput, ...func(*connectcases.Options)) *connectcases.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.TagResourceInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *connectcases.UntagResourceInput, optFns ...func(*connectcases.Options)) (*connectcases.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *connectcases.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UntagResourceInput, ...func(*connectcases.Options)) (*connectcases.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UntagResourceInput, ...func(*connectcases.Options)) *connectcases.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.UntagResourceInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCase(ctx context.Context, params *connectcases.UpdateCaseInput, optFns ...func(*connectcases.Options)) (*connectcases.UpdateCaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCase")
	}

	var r0 *connectcases.UpdateCaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UpdateCaseInput, ...func(*connectcases.Options)) (*connectcases.UpdateCaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UpdateCaseInput, ...func(*connectcases.Options)) *connectcases.UpdateCaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.UpdateCaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.UpdateCaseInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateField provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateField(ctx context.Context, params *connectcases.UpdateFieldInput, optFns ...func(*connectcases.Options)) (*connectcases.UpdateFieldOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateField")
	}

	var r0 *connectcases.UpdateFieldOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UpdateFieldInput, ...func(*connectcases.Options)) (*connectcases.UpdateFieldOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UpdateFieldInput, ...func(*connectcases.Options)) *connectcases.UpdateFieldOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.UpdateFieldOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.UpdateFieldInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLayout provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLayout(ctx context.Context, params *connectcases.UpdateLayoutInput, optFns ...func(*connectcases.Options)) (*connectcases.UpdateLayoutOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLayout")
	}

	var r0 *connectcases.UpdateLayoutOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UpdateLayoutInput, ...func(*connectcases.Options)) (*connectcases.UpdateLayoutOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UpdateLayoutInput, ...func(*connectcases.Options)) *connectcases.UpdateLayoutOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.UpdateLayoutOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.UpdateLayoutInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTemplate(ctx context.Context, params *connectcases.UpdateTemplateInput, optFns ...func(*connectcases.Options)) (*connectcases.UpdateTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTemplate")
	}

	var r0 *connectcases.UpdateTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UpdateTemplateInput, ...func(*connectcases.Options)) (*connectcases.UpdateTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *connectcases.UpdateTemplateInput, ...func(*connectcases.Options)) *connectcases.UpdateTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*connectcases.UpdateTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *connectcases.UpdateTemplateInput, ...func(*connectcases.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
