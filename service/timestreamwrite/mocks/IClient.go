// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	timestreamwrite "github.com/aws/aws-sdk-go-v2/service/timestreamwrite"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateBatchLoadTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBatchLoadTask(ctx context.Context, params *timestreamwrite.CreateBatchLoadTaskInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.CreateBatchLoadTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBatchLoadTask")
	}

	var r0 *timestreamwrite.CreateBatchLoadTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.CreateBatchLoadTaskInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.CreateBatchLoadTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.CreateBatchLoadTaskInput, ...func(*timestreamwrite.Options)) *timestreamwrite.CreateBatchLoadTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.CreateBatchLoadTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.CreateBatchLoadTaskInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDatabase(ctx context.Context, params *timestreamwrite.CreateDatabaseInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.CreateDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDatabase")
	}

	var r0 *timestreamwrite.CreateDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.CreateDatabaseInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.CreateDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.CreateDatabaseInput, ...func(*timestreamwrite.Options)) *timestreamwrite.CreateDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.CreateDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.CreateDatabaseInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTable provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTable(ctx context.Context, params *timestreamwrite.CreateTableInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.CreateTableOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTable")
	}

	var r0 *timestreamwrite.CreateTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.CreateTableInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.CreateTableOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.CreateTableInput, ...func(*timestreamwrite.Options)) *timestreamwrite.CreateTableOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.CreateTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.CreateTableInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDatabase(ctx context.Context, params *timestreamwrite.DeleteDatabaseInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.DeleteDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDatabase")
	}

	var r0 *timestreamwrite.DeleteDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DeleteDatabaseInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.DeleteDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DeleteDatabaseInput, ...func(*timestreamwrite.Options)) *timestreamwrite.DeleteDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.DeleteDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.DeleteDatabaseInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTable provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTable(ctx context.Context, params *timestreamwrite.DeleteTableInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.DeleteTableOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTable")
	}

	var r0 *timestreamwrite.DeleteTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DeleteTableInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.DeleteTableOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DeleteTableInput, ...func(*timestreamwrite.Options)) *timestreamwrite.DeleteTableOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.DeleteTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.DeleteTableInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeBatchLoadTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeBatchLoadTask(ctx context.Context, params *timestreamwrite.DescribeBatchLoadTaskInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.DescribeBatchLoadTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeBatchLoadTask")
	}

	var r0 *timestreamwrite.DescribeBatchLoadTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DescribeBatchLoadTaskInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.DescribeBatchLoadTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DescribeBatchLoadTaskInput, ...func(*timestreamwrite.Options)) *timestreamwrite.DescribeBatchLoadTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.DescribeBatchLoadTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.DescribeBatchLoadTaskInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDatabase(ctx context.Context, params *timestreamwrite.DescribeDatabaseInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.DescribeDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDatabase")
	}

	var r0 *timestreamwrite.DescribeDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DescribeDatabaseInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.DescribeDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DescribeDatabaseInput, ...func(*timestreamwrite.Options)) *timestreamwrite.DescribeDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.DescribeDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.DescribeDatabaseInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEndpoints(ctx context.Context, params *timestreamwrite.DescribeEndpointsInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.DescribeEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEndpoints")
	}

	var r0 *timestreamwrite.DescribeEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DescribeEndpointsInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.DescribeEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DescribeEndpointsInput, ...func(*timestreamwrite.Options)) *timestreamwrite.DescribeEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.DescribeEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.DescribeEndpointsInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTable provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTable(ctx context.Context, params *timestreamwrite.DescribeTableInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.DescribeTableOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTable")
	}

	var r0 *timestreamwrite.DescribeTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DescribeTableInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.DescribeTableOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.DescribeTableInput, ...func(*timestreamwrite.Options)) *timestreamwrite.DescribeTableOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.DescribeTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.DescribeTableInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBatchLoadTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBatchLoadTasks(ctx context.Context, params *timestreamwrite.ListBatchLoadTasksInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.ListBatchLoadTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBatchLoadTasks")
	}

	var r0 *timestreamwrite.ListBatchLoadTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ListBatchLoadTasksInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.ListBatchLoadTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ListBatchLoadTasksInput, ...func(*timestreamwrite.Options)) *timestreamwrite.ListBatchLoadTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.ListBatchLoadTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.ListBatchLoadTasksInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDatabases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDatabases(ctx context.Context, params *timestreamwrite.ListDatabasesInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.ListDatabasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDatabases")
	}

	var r0 *timestreamwrite.ListDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ListDatabasesInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.ListDatabasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ListDatabasesInput, ...func(*timestreamwrite.Options)) *timestreamwrite.ListDatabasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.ListDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.ListDatabasesInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTables provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTables(ctx context.Context, params *timestreamwrite.ListTablesInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.ListTablesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTables")
	}

	var r0 *timestreamwrite.ListTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ListTablesInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.ListTablesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ListTablesInput, ...func(*timestreamwrite.Options)) *timestreamwrite.ListTablesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.ListTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.ListTablesInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *timestreamwrite.ListTagsForResourceInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *timestreamwrite.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ListTagsForResourceInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ListTagsForResourceInput, ...func(*timestreamwrite.Options)) *timestreamwrite.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.ListTagsForResourceInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() timestreamwrite.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 timestreamwrite.Options
	if rf, ok := ret.Get(0).(func() timestreamwrite.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(timestreamwrite.Options)
	}

	return r0
}

// ResumeBatchLoadTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResumeBatchLoadTask(ctx context.Context, params *timestreamwrite.ResumeBatchLoadTaskInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.ResumeBatchLoadTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResumeBatchLoadTask")
	}

	var r0 *timestreamwrite.ResumeBatchLoadTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ResumeBatchLoadTaskInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.ResumeBatchLoadTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.ResumeBatchLoadTaskInput, ...func(*timestreamwrite.Options)) *timestreamwrite.ResumeBatchLoadTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.ResumeBatchLoadTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.ResumeBatchLoadTaskInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *timestreamwrite.TagResourceInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *timestreamwrite.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.TagResourceInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.TagResourceInput, ...func(*timestreamwrite.Options)) *timestreamwrite.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.TagResourceInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *timestreamwrite.UntagResourceInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *timestreamwrite.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.UntagResourceInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.UntagResourceInput, ...func(*timestreamwrite.Options)) *timestreamwrite.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.UntagResourceInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDatabase provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDatabase(ctx context.Context, params *timestreamwrite.UpdateDatabaseInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.UpdateDatabaseOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDatabase")
	}

	var r0 *timestreamwrite.UpdateDatabaseOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.UpdateDatabaseInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.UpdateDatabaseOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.UpdateDatabaseInput, ...func(*timestreamwrite.Options)) *timestreamwrite.UpdateDatabaseOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.UpdateDatabaseOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.UpdateDatabaseInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTable provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTable(ctx context.Context, params *timestreamwrite.UpdateTableInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.UpdateTableOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTable")
	}

	var r0 *timestreamwrite.UpdateTableOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.UpdateTableInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.UpdateTableOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.UpdateTableInput, ...func(*timestreamwrite.Options)) *timestreamwrite.UpdateTableOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.UpdateTableOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.UpdateTableInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WriteRecords provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) WriteRecords(ctx context.Context, params *timestreamwrite.WriteRecordsInput, optFns ...func(*timestreamwrite.Options)) (*timestreamwrite.WriteRecordsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WriteRecords")
	}

	var r0 *timestreamwrite.WriteRecordsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.WriteRecordsInput, ...func(*timestreamwrite.Options)) (*timestreamwrite.WriteRecordsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *timestreamwrite.WriteRecordsInput, ...func(*timestreamwrite.Options)) *timestreamwrite.WriteRecordsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*timestreamwrite.WriteRecordsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *timestreamwrite.WriteRecordsInput, ...func(*timestreamwrite.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
