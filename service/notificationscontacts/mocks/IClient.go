// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	notificationscontacts "github.com/aws/aws-sdk-go-v2/service/notificationscontacts"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ActivateEmailContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ActivateEmailContact(ctx context.Context, params *notificationscontacts.ActivateEmailContactInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.ActivateEmailContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ActivateEmailContact")
	}

	var r0 *notificationscontacts.ActivateEmailContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.ActivateEmailContactInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.ActivateEmailContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.ActivateEmailContactInput, ...func(*notificationscontacts.Options)) *notificationscontacts.ActivateEmailContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.ActivateEmailContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.ActivateEmailContactInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEmailContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEmailContact(ctx context.Context, params *notificationscontacts.CreateEmailContactInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.CreateEmailContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEmailContact")
	}

	var r0 *notificationscontacts.CreateEmailContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.CreateEmailContactInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.CreateEmailContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.CreateEmailContactInput, ...func(*notificationscontacts.Options)) *notificationscontacts.CreateEmailContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.CreateEmailContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.CreateEmailContactInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEmailContact(ctx context.Context, params *notificationscontacts.DeleteEmailContactInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.DeleteEmailContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmailContact")
	}

	var r0 *notificationscontacts.DeleteEmailContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.DeleteEmailContactInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.DeleteEmailContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.DeleteEmailContactInput, ...func(*notificationscontacts.Options)) *notificationscontacts.DeleteEmailContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.DeleteEmailContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.DeleteEmailContactInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEmailContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEmailContact(ctx context.Context, params *notificationscontacts.GetEmailContactInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.GetEmailContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEmailContact")
	}

	var r0 *notificationscontacts.GetEmailContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.GetEmailContactInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.GetEmailContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.GetEmailContactInput, ...func(*notificationscontacts.Options)) *notificationscontacts.GetEmailContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.GetEmailContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.GetEmailContactInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEmailContacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEmailContacts(ctx context.Context, params *notificationscontacts.ListEmailContactsInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.ListEmailContactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEmailContacts")
	}

	var r0 *notificationscontacts.ListEmailContactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.ListEmailContactsInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.ListEmailContactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.ListEmailContactsInput, ...func(*notificationscontacts.Options)) *notificationscontacts.ListEmailContactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.ListEmailContactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.ListEmailContactsInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *notificationscontacts.ListTagsForResourceInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *notificationscontacts.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.ListTagsForResourceInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.ListTagsForResourceInput, ...func(*notificationscontacts.Options)) *notificationscontacts.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.ListTagsForResourceInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() notificationscontacts.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 notificationscontacts.Options
	if rf, ok := ret.Get(0).(func() notificationscontacts.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(notificationscontacts.Options)
	}

	return r0
}

// SendActivationCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendActivationCode(ctx context.Context, params *notificationscontacts.SendActivationCodeInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.SendActivationCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendActivationCode")
	}

	var r0 *notificationscontacts.SendActivationCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.SendActivationCodeInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.SendActivationCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.SendActivationCodeInput, ...func(*notificationscontacts.Options)) *notificationscontacts.SendActivationCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.SendActivationCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.SendActivationCodeInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *notificationscontacts.TagResourceInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *notificationscontacts.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.TagResourceInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.TagResourceInput, ...func(*notificationscontacts.Options)) *notificationscontacts.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.TagResourceInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *notificationscontacts.UntagResourceInput, optFns ...func(*notificationscontacts.Options)) (*notificationscontacts.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *notificationscontacts.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.UntagResourceInput, ...func(*notificationscontacts.Options)) (*notificationscontacts.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notificationscontacts.UntagResourceInput, ...func(*notificationscontacts.Options)) *notificationscontacts.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notificationscontacts.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notificationscontacts.UntagResourceInput, ...func(*notificationscontacts.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
