// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mailmanager "github.com/aws/aws-sdk-go-v2/service/mailmanager"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateAddonInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAddonInstance(ctx context.Context, params *mailmanager.CreateAddonInstanceInput, optFns ...func(*mailmanager.Options)) (*mailmanager.CreateAddonInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAddonInstance")
	}

	var r0 *mailmanager.CreateAddonInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateAddonInstanceInput, ...func(*mailmanager.Options)) (*mailmanager.CreateAddonInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateAddonInstanceInput, ...func(*mailmanager.Options)) *mailmanager.CreateAddonInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.CreateAddonInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.CreateAddonInstanceInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAddonSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAddonSubscription(ctx context.Context, params *mailmanager.CreateAddonSubscriptionInput, optFns ...func(*mailmanager.Options)) (*mailmanager.CreateAddonSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAddonSubscription")
	}

	var r0 *mailmanager.CreateAddonSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateAddonSubscriptionInput, ...func(*mailmanager.Options)) (*mailmanager.CreateAddonSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateAddonSubscriptionInput, ...func(*mailmanager.Options)) *mailmanager.CreateAddonSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.CreateAddonSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.CreateAddonSubscriptionInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateArchive(ctx context.Context, params *mailmanager.CreateArchiveInput, optFns ...func(*mailmanager.Options)) (*mailmanager.CreateArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateArchive")
	}

	var r0 *mailmanager.CreateArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateArchiveInput, ...func(*mailmanager.Options)) (*mailmanager.CreateArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateArchiveInput, ...func(*mailmanager.Options)) *mailmanager.CreateArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.CreateArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.CreateArchiveInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIngressPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIngressPoint(ctx context.Context, params *mailmanager.CreateIngressPointInput, optFns ...func(*mailmanager.Options)) (*mailmanager.CreateIngressPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIngressPoint")
	}

	var r0 *mailmanager.CreateIngressPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateIngressPointInput, ...func(*mailmanager.Options)) (*mailmanager.CreateIngressPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateIngressPointInput, ...func(*mailmanager.Options)) *mailmanager.CreateIngressPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.CreateIngressPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.CreateIngressPointInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRelay provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRelay(ctx context.Context, params *mailmanager.CreateRelayInput, optFns ...func(*mailmanager.Options)) (*mailmanager.CreateRelayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRelay")
	}

	var r0 *mailmanager.CreateRelayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateRelayInput, ...func(*mailmanager.Options)) (*mailmanager.CreateRelayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateRelayInput, ...func(*mailmanager.Options)) *mailmanager.CreateRelayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.CreateRelayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.CreateRelayInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRuleSet(ctx context.Context, params *mailmanager.CreateRuleSetInput, optFns ...func(*mailmanager.Options)) (*mailmanager.CreateRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRuleSet")
	}

	var r0 *mailmanager.CreateRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateRuleSetInput, ...func(*mailmanager.Options)) (*mailmanager.CreateRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateRuleSetInput, ...func(*mailmanager.Options)) *mailmanager.CreateRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.CreateRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.CreateRuleSetInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrafficPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrafficPolicy(ctx context.Context, params *mailmanager.CreateTrafficPolicyInput, optFns ...func(*mailmanager.Options)) (*mailmanager.CreateTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrafficPolicy")
	}

	var r0 *mailmanager.CreateTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateTrafficPolicyInput, ...func(*mailmanager.Options)) (*mailmanager.CreateTrafficPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.CreateTrafficPolicyInput, ...func(*mailmanager.Options)) *mailmanager.CreateTrafficPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.CreateTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.CreateTrafficPolicyInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAddonInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAddonInstance(ctx context.Context, params *mailmanager.DeleteAddonInstanceInput, optFns ...func(*mailmanager.Options)) (*mailmanager.DeleteAddonInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddonInstance")
	}

	var r0 *mailmanager.DeleteAddonInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteAddonInstanceInput, ...func(*mailmanager.Options)) (*mailmanager.DeleteAddonInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteAddonInstanceInput, ...func(*mailmanager.Options)) *mailmanager.DeleteAddonInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.DeleteAddonInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.DeleteAddonInstanceInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAddonSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAddonSubscription(ctx context.Context, params *mailmanager.DeleteAddonSubscriptionInput, optFns ...func(*mailmanager.Options)) (*mailmanager.DeleteAddonSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAddonSubscription")
	}

	var r0 *mailmanager.DeleteAddonSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteAddonSubscriptionInput, ...func(*mailmanager.Options)) (*mailmanager.DeleteAddonSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteAddonSubscriptionInput, ...func(*mailmanager.Options)) *mailmanager.DeleteAddonSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.DeleteAddonSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.DeleteAddonSubscriptionInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteArchive(ctx context.Context, params *mailmanager.DeleteArchiveInput, optFns ...func(*mailmanager.Options)) (*mailmanager.DeleteArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArchive")
	}

	var r0 *mailmanager.DeleteArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteArchiveInput, ...func(*mailmanager.Options)) (*mailmanager.DeleteArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteArchiveInput, ...func(*mailmanager.Options)) *mailmanager.DeleteArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.DeleteArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.DeleteArchiveInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIngressPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIngressPoint(ctx context.Context, params *mailmanager.DeleteIngressPointInput, optFns ...func(*mailmanager.Options)) (*mailmanager.DeleteIngressPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIngressPoint")
	}

	var r0 *mailmanager.DeleteIngressPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteIngressPointInput, ...func(*mailmanager.Options)) (*mailmanager.DeleteIngressPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteIngressPointInput, ...func(*mailmanager.Options)) *mailmanager.DeleteIngressPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.DeleteIngressPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.DeleteIngressPointInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRelay provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRelay(ctx context.Context, params *mailmanager.DeleteRelayInput, optFns ...func(*mailmanager.Options)) (*mailmanager.DeleteRelayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRelay")
	}

	var r0 *mailmanager.DeleteRelayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteRelayInput, ...func(*mailmanager.Options)) (*mailmanager.DeleteRelayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteRelayInput, ...func(*mailmanager.Options)) *mailmanager.DeleteRelayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.DeleteRelayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.DeleteRelayInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRuleSet(ctx context.Context, params *mailmanager.DeleteRuleSetInput, optFns ...func(*mailmanager.Options)) (*mailmanager.DeleteRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRuleSet")
	}

	var r0 *mailmanager.DeleteRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteRuleSetInput, ...func(*mailmanager.Options)) (*mailmanager.DeleteRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteRuleSetInput, ...func(*mailmanager.Options)) *mailmanager.DeleteRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.DeleteRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.DeleteRuleSetInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrafficPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrafficPolicy(ctx context.Context, params *mailmanager.DeleteTrafficPolicyInput, optFns ...func(*mailmanager.Options)) (*mailmanager.DeleteTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrafficPolicy")
	}

	var r0 *mailmanager.DeleteTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteTrafficPolicyInput, ...func(*mailmanager.Options)) (*mailmanager.DeleteTrafficPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.DeleteTrafficPolicyInput, ...func(*mailmanager.Options)) *mailmanager.DeleteTrafficPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.DeleteTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.DeleteTrafficPolicyInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddonInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAddonInstance(ctx context.Context, params *mailmanager.GetAddonInstanceInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetAddonInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAddonInstance")
	}

	var r0 *mailmanager.GetAddonInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetAddonInstanceInput, ...func(*mailmanager.Options)) (*mailmanager.GetAddonInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetAddonInstanceInput, ...func(*mailmanager.Options)) *mailmanager.GetAddonInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetAddonInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetAddonInstanceInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAddonSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAddonSubscription(ctx context.Context, params *mailmanager.GetAddonSubscriptionInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetAddonSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAddonSubscription")
	}

	var r0 *mailmanager.GetAddonSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetAddonSubscriptionInput, ...func(*mailmanager.Options)) (*mailmanager.GetAddonSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetAddonSubscriptionInput, ...func(*mailmanager.Options)) *mailmanager.GetAddonSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetAddonSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetAddonSubscriptionInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetArchive(ctx context.Context, params *mailmanager.GetArchiveInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArchive")
	}

	var r0 *mailmanager.GetArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveInput, ...func(*mailmanager.Options)) (*mailmanager.GetArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveInput, ...func(*mailmanager.Options)) *mailmanager.GetArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetArchiveInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchiveExport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetArchiveExport(ctx context.Context, params *mailmanager.GetArchiveExportInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetArchiveExportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArchiveExport")
	}

	var r0 *mailmanager.GetArchiveExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveExportInput, ...func(*mailmanager.Options)) (*mailmanager.GetArchiveExportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveExportInput, ...func(*mailmanager.Options)) *mailmanager.GetArchiveExportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetArchiveExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetArchiveExportInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchiveMessage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetArchiveMessage(ctx context.Context, params *mailmanager.GetArchiveMessageInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetArchiveMessageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArchiveMessage")
	}

	var r0 *mailmanager.GetArchiveMessageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveMessageInput, ...func(*mailmanager.Options)) (*mailmanager.GetArchiveMessageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveMessageInput, ...func(*mailmanager.Options)) *mailmanager.GetArchiveMessageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetArchiveMessageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetArchiveMessageInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchiveMessageContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetArchiveMessageContent(ctx context.Context, params *mailmanager.GetArchiveMessageContentInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetArchiveMessageContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArchiveMessageContent")
	}

	var r0 *mailmanager.GetArchiveMessageContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveMessageContentInput, ...func(*mailmanager.Options)) (*mailmanager.GetArchiveMessageContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveMessageContentInput, ...func(*mailmanager.Options)) *mailmanager.GetArchiveMessageContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetArchiveMessageContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetArchiveMessageContentInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchiveSearch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetArchiveSearch(ctx context.Context, params *mailmanager.GetArchiveSearchInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetArchiveSearchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArchiveSearch")
	}

	var r0 *mailmanager.GetArchiveSearchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveSearchInput, ...func(*mailmanager.Options)) (*mailmanager.GetArchiveSearchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveSearchInput, ...func(*mailmanager.Options)) *mailmanager.GetArchiveSearchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetArchiveSearchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetArchiveSearchInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetArchiveSearchResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetArchiveSearchResults(ctx context.Context, params *mailmanager.GetArchiveSearchResultsInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetArchiveSearchResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetArchiveSearchResults")
	}

	var r0 *mailmanager.GetArchiveSearchResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveSearchResultsInput, ...func(*mailmanager.Options)) (*mailmanager.GetArchiveSearchResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetArchiveSearchResultsInput, ...func(*mailmanager.Options)) *mailmanager.GetArchiveSearchResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetArchiveSearchResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetArchiveSearchResultsInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetIngressPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetIngressPoint(ctx context.Context, params *mailmanager.GetIngressPointInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetIngressPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetIngressPoint")
	}

	var r0 *mailmanager.GetIngressPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetIngressPointInput, ...func(*mailmanager.Options)) (*mailmanager.GetIngressPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetIngressPointInput, ...func(*mailmanager.Options)) *mailmanager.GetIngressPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetIngressPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetIngressPointInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRelay provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRelay(ctx context.Context, params *mailmanager.GetRelayInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetRelayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRelay")
	}

	var r0 *mailmanager.GetRelayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetRelayInput, ...func(*mailmanager.Options)) (*mailmanager.GetRelayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetRelayInput, ...func(*mailmanager.Options)) *mailmanager.GetRelayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetRelayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetRelayInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRuleSet(ctx context.Context, params *mailmanager.GetRuleSetInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRuleSet")
	}

	var r0 *mailmanager.GetRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetRuleSetInput, ...func(*mailmanager.Options)) (*mailmanager.GetRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetRuleSetInput, ...func(*mailmanager.Options)) *mailmanager.GetRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetRuleSetInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTrafficPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTrafficPolicy(ctx context.Context, params *mailmanager.GetTrafficPolicyInput, optFns ...func(*mailmanager.Options)) (*mailmanager.GetTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTrafficPolicy")
	}

	var r0 *mailmanager.GetTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetTrafficPolicyInput, ...func(*mailmanager.Options)) (*mailmanager.GetTrafficPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.GetTrafficPolicyInput, ...func(*mailmanager.Options)) *mailmanager.GetTrafficPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.GetTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.GetTrafficPolicyInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAddonInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAddonInstances(ctx context.Context, params *mailmanager.ListAddonInstancesInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListAddonInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAddonInstances")
	}

	var r0 *mailmanager.ListAddonInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListAddonInstancesInput, ...func(*mailmanager.Options)) (*mailmanager.ListAddonInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListAddonInstancesInput, ...func(*mailmanager.Options)) *mailmanager.ListAddonInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListAddonInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListAddonInstancesInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAddonSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAddonSubscriptions(ctx context.Context, params *mailmanager.ListAddonSubscriptionsInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListAddonSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAddonSubscriptions")
	}

	var r0 *mailmanager.ListAddonSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListAddonSubscriptionsInput, ...func(*mailmanager.Options)) (*mailmanager.ListAddonSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListAddonSubscriptionsInput, ...func(*mailmanager.Options)) *mailmanager.ListAddonSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListAddonSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListAddonSubscriptionsInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchiveExports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListArchiveExports(ctx context.Context, params *mailmanager.ListArchiveExportsInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListArchiveExportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArchiveExports")
	}

	var r0 *mailmanager.ListArchiveExportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListArchiveExportsInput, ...func(*mailmanager.Options)) (*mailmanager.ListArchiveExportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListArchiveExportsInput, ...func(*mailmanager.Options)) *mailmanager.ListArchiveExportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListArchiveExportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListArchiveExportsInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchiveSearches provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListArchiveSearches(ctx context.Context, params *mailmanager.ListArchiveSearchesInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListArchiveSearchesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArchiveSearches")
	}

	var r0 *mailmanager.ListArchiveSearchesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListArchiveSearchesInput, ...func(*mailmanager.Options)) (*mailmanager.ListArchiveSearchesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListArchiveSearchesInput, ...func(*mailmanager.Options)) *mailmanager.ListArchiveSearchesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListArchiveSearchesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListArchiveSearchesInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArchives provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListArchives(ctx context.Context, params *mailmanager.ListArchivesInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListArchivesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArchives")
	}

	var r0 *mailmanager.ListArchivesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListArchivesInput, ...func(*mailmanager.Options)) (*mailmanager.ListArchivesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListArchivesInput, ...func(*mailmanager.Options)) *mailmanager.ListArchivesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListArchivesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListArchivesInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListIngressPoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListIngressPoints(ctx context.Context, params *mailmanager.ListIngressPointsInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListIngressPointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListIngressPoints")
	}

	var r0 *mailmanager.ListIngressPointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListIngressPointsInput, ...func(*mailmanager.Options)) (*mailmanager.ListIngressPointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListIngressPointsInput, ...func(*mailmanager.Options)) *mailmanager.ListIngressPointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListIngressPointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListIngressPointsInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRelays provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRelays(ctx context.Context, params *mailmanager.ListRelaysInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListRelaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRelays")
	}

	var r0 *mailmanager.ListRelaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListRelaysInput, ...func(*mailmanager.Options)) (*mailmanager.ListRelaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListRelaysInput, ...func(*mailmanager.Options)) *mailmanager.ListRelaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListRelaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListRelaysInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRuleSets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRuleSets(ctx context.Context, params *mailmanager.ListRuleSetsInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListRuleSetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRuleSets")
	}

	var r0 *mailmanager.ListRuleSetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListRuleSetsInput, ...func(*mailmanager.Options)) (*mailmanager.ListRuleSetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListRuleSetsInput, ...func(*mailmanager.Options)) *mailmanager.ListRuleSetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListRuleSetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListRuleSetsInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *mailmanager.ListTagsForResourceInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *mailmanager.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListTagsForResourceInput, ...func(*mailmanager.Options)) (*mailmanager.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListTagsForResourceInput, ...func(*mailmanager.Options)) *mailmanager.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListTagsForResourceInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrafficPolicies provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrafficPolicies(ctx context.Context, params *mailmanager.ListTrafficPoliciesInput, optFns ...func(*mailmanager.Options)) (*mailmanager.ListTrafficPoliciesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrafficPolicies")
	}

	var r0 *mailmanager.ListTrafficPoliciesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListTrafficPoliciesInput, ...func(*mailmanager.Options)) (*mailmanager.ListTrafficPoliciesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.ListTrafficPoliciesInput, ...func(*mailmanager.Options)) *mailmanager.ListTrafficPoliciesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.ListTrafficPoliciesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.ListTrafficPoliciesInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() mailmanager.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 mailmanager.Options
	if rf, ok := ret.Get(0).(func() mailmanager.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mailmanager.Options)
	}

	return r0
}

// StartArchiveExport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartArchiveExport(ctx context.Context, params *mailmanager.StartArchiveExportInput, optFns ...func(*mailmanager.Options)) (*mailmanager.StartArchiveExportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartArchiveExport")
	}

	var r0 *mailmanager.StartArchiveExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.StartArchiveExportInput, ...func(*mailmanager.Options)) (*mailmanager.StartArchiveExportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.StartArchiveExportInput, ...func(*mailmanager.Options)) *mailmanager.StartArchiveExportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.StartArchiveExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.StartArchiveExportInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartArchiveSearch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartArchiveSearch(ctx context.Context, params *mailmanager.StartArchiveSearchInput, optFns ...func(*mailmanager.Options)) (*mailmanager.StartArchiveSearchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartArchiveSearch")
	}

	var r0 *mailmanager.StartArchiveSearchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.StartArchiveSearchInput, ...func(*mailmanager.Options)) (*mailmanager.StartArchiveSearchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.StartArchiveSearchInput, ...func(*mailmanager.Options)) *mailmanager.StartArchiveSearchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.StartArchiveSearchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.StartArchiveSearchInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopArchiveExport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopArchiveExport(ctx context.Context, params *mailmanager.StopArchiveExportInput, optFns ...func(*mailmanager.Options)) (*mailmanager.StopArchiveExportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopArchiveExport")
	}

	var r0 *mailmanager.StopArchiveExportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.StopArchiveExportInput, ...func(*mailmanager.Options)) (*mailmanager.StopArchiveExportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.StopArchiveExportInput, ...func(*mailmanager.Options)) *mailmanager.StopArchiveExportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.StopArchiveExportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.StopArchiveExportInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopArchiveSearch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopArchiveSearch(ctx context.Context, params *mailmanager.StopArchiveSearchInput, optFns ...func(*mailmanager.Options)) (*mailmanager.StopArchiveSearchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopArchiveSearch")
	}

	var r0 *mailmanager.StopArchiveSearchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.StopArchiveSearchInput, ...func(*mailmanager.Options)) (*mailmanager.StopArchiveSearchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.StopArchiveSearchInput, ...func(*mailmanager.Options)) *mailmanager.StopArchiveSearchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.StopArchiveSearchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.StopArchiveSearchInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *mailmanager.TagResourceInput, optFns ...func(*mailmanager.Options)) (*mailmanager.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *mailmanager.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.TagResourceInput, ...func(*mailmanager.Options)) (*mailmanager.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.TagResourceInput, ...func(*mailmanager.Options)) *mailmanager.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.TagResourceInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *mailmanager.UntagResourceInput, optFns ...func(*mailmanager.Options)) (*mailmanager.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *mailmanager.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UntagResourceInput, ...func(*mailmanager.Options)) (*mailmanager.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UntagResourceInput, ...func(*mailmanager.Options)) *mailmanager.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.UntagResourceInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArchive provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateArchive(ctx context.Context, params *mailmanager.UpdateArchiveInput, optFns ...func(*mailmanager.Options)) (*mailmanager.UpdateArchiveOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArchive")
	}

	var r0 *mailmanager.UpdateArchiveOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateArchiveInput, ...func(*mailmanager.Options)) (*mailmanager.UpdateArchiveOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateArchiveInput, ...func(*mailmanager.Options)) *mailmanager.UpdateArchiveOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.UpdateArchiveOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.UpdateArchiveInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateIngressPoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateIngressPoint(ctx context.Context, params *mailmanager.UpdateIngressPointInput, optFns ...func(*mailmanager.Options)) (*mailmanager.UpdateIngressPointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateIngressPoint")
	}

	var r0 *mailmanager.UpdateIngressPointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateIngressPointInput, ...func(*mailmanager.Options)) (*mailmanager.UpdateIngressPointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateIngressPointInput, ...func(*mailmanager.Options)) *mailmanager.UpdateIngressPointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.UpdateIngressPointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.UpdateIngressPointInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelay provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRelay(ctx context.Context, params *mailmanager.UpdateRelayInput, optFns ...func(*mailmanager.Options)) (*mailmanager.UpdateRelayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRelay")
	}

	var r0 *mailmanager.UpdateRelayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateRelayInput, ...func(*mailmanager.Options)) (*mailmanager.UpdateRelayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateRelayInput, ...func(*mailmanager.Options)) *mailmanager.UpdateRelayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.UpdateRelayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.UpdateRelayInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRuleSet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRuleSet(ctx context.Context, params *mailmanager.UpdateRuleSetInput, optFns ...func(*mailmanager.Options)) (*mailmanager.UpdateRuleSetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRuleSet")
	}

	var r0 *mailmanager.UpdateRuleSetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateRuleSetInput, ...func(*mailmanager.Options)) (*mailmanager.UpdateRuleSetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateRuleSetInput, ...func(*mailmanager.Options)) *mailmanager.UpdateRuleSetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.UpdateRuleSetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.UpdateRuleSetInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrafficPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrafficPolicy(ctx context.Context, params *mailmanager.UpdateTrafficPolicyInput, optFns ...func(*mailmanager.Options)) (*mailmanager.UpdateTrafficPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrafficPolicy")
	}

	var r0 *mailmanager.UpdateTrafficPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateTrafficPolicyInput, ...func(*mailmanager.Options)) (*mailmanager.UpdateTrafficPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mailmanager.UpdateTrafficPolicyInput, ...func(*mailmanager.Options)) *mailmanager.UpdateTrafficPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mailmanager.UpdateTrafficPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mailmanager.UpdateTrafficPolicyInput, ...func(*mailmanager.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
