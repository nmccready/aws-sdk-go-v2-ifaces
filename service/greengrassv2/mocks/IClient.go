// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	greengrassv2 "github.com/aws/aws-sdk-go-v2/service/greengrassv2"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateServiceRoleToAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateServiceRoleToAccount(ctx context.Context, params *greengrassv2.AssociateServiceRoleToAccountInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.AssociateServiceRoleToAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateServiceRoleToAccount")
	}

	var r0 *greengrassv2.AssociateServiceRoleToAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.AssociateServiceRoleToAccountInput, ...func(*greengrassv2.Options)) (*greengrassv2.AssociateServiceRoleToAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.AssociateServiceRoleToAccountInput, ...func(*greengrassv2.Options)) *greengrassv2.AssociateServiceRoleToAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.AssociateServiceRoleToAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.AssociateServiceRoleToAccountInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchAssociateClientDeviceWithCoreDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchAssociateClientDeviceWithCoreDevice(ctx context.Context, params *greengrassv2.BatchAssociateClientDeviceWithCoreDeviceInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.BatchAssociateClientDeviceWithCoreDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchAssociateClientDeviceWithCoreDevice")
	}

	var r0 *greengrassv2.BatchAssociateClientDeviceWithCoreDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.BatchAssociateClientDeviceWithCoreDeviceInput, ...func(*greengrassv2.Options)) (*greengrassv2.BatchAssociateClientDeviceWithCoreDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.BatchAssociateClientDeviceWithCoreDeviceInput, ...func(*greengrassv2.Options)) *greengrassv2.BatchAssociateClientDeviceWithCoreDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.BatchAssociateClientDeviceWithCoreDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.BatchAssociateClientDeviceWithCoreDeviceInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDisassociateClientDeviceFromCoreDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDisassociateClientDeviceFromCoreDevice(ctx context.Context, params *greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDisassociateClientDeviceFromCoreDevice")
	}

	var r0 *greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceInput, ...func(*greengrassv2.Options)) (*greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceInput, ...func(*greengrassv2.Options)) *greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.BatchDisassociateClientDeviceFromCoreDeviceInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelDeployment(ctx context.Context, params *greengrassv2.CancelDeploymentInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.CancelDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelDeployment")
	}

	var r0 *greengrassv2.CancelDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.CancelDeploymentInput, ...func(*greengrassv2.Options)) (*greengrassv2.CancelDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.CancelDeploymentInput, ...func(*greengrassv2.Options)) *greengrassv2.CancelDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.CancelDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.CancelDeploymentInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComponentVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComponentVersion(ctx context.Context, params *greengrassv2.CreateComponentVersionInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.CreateComponentVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComponentVersion")
	}

	var r0 *greengrassv2.CreateComponentVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.CreateComponentVersionInput, ...func(*greengrassv2.Options)) (*greengrassv2.CreateComponentVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.CreateComponentVersionInput, ...func(*greengrassv2.Options)) *greengrassv2.CreateComponentVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.CreateComponentVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.CreateComponentVersionInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeployment(ctx context.Context, params *greengrassv2.CreateDeploymentInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *greengrassv2.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.CreateDeploymentInput, ...func(*greengrassv2.Options)) (*greengrassv2.CreateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.CreateDeploymentInput, ...func(*greengrassv2.Options)) *greengrassv2.CreateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.CreateDeploymentInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteComponent(ctx context.Context, params *greengrassv2.DeleteComponentInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.DeleteComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComponent")
	}

	var r0 *greengrassv2.DeleteComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DeleteComponentInput, ...func(*greengrassv2.Options)) (*greengrassv2.DeleteComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DeleteComponentInput, ...func(*greengrassv2.Options)) *greengrassv2.DeleteComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.DeleteComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.DeleteComponentInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCoreDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCoreDevice(ctx context.Context, params *greengrassv2.DeleteCoreDeviceInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.DeleteCoreDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCoreDevice")
	}

	var r0 *greengrassv2.DeleteCoreDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DeleteCoreDeviceInput, ...func(*greengrassv2.Options)) (*greengrassv2.DeleteCoreDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DeleteCoreDeviceInput, ...func(*greengrassv2.Options)) *greengrassv2.DeleteCoreDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.DeleteCoreDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.DeleteCoreDeviceInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeployment(ctx context.Context, params *greengrassv2.DeleteDeploymentInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.DeleteDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeployment")
	}

	var r0 *greengrassv2.DeleteDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DeleteDeploymentInput, ...func(*greengrassv2.Options)) (*greengrassv2.DeleteDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DeleteDeploymentInput, ...func(*greengrassv2.Options)) *greengrassv2.DeleteDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.DeleteDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.DeleteDeploymentInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeComponent(ctx context.Context, params *greengrassv2.DescribeComponentInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.DescribeComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeComponent")
	}

	var r0 *greengrassv2.DescribeComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DescribeComponentInput, ...func(*greengrassv2.Options)) (*greengrassv2.DescribeComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DescribeComponentInput, ...func(*greengrassv2.Options)) *greengrassv2.DescribeComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.DescribeComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.DescribeComponentInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateServiceRoleFromAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateServiceRoleFromAccount(ctx context.Context, params *greengrassv2.DisassociateServiceRoleFromAccountInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.DisassociateServiceRoleFromAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateServiceRoleFromAccount")
	}

	var r0 *greengrassv2.DisassociateServiceRoleFromAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DisassociateServiceRoleFromAccountInput, ...func(*greengrassv2.Options)) (*greengrassv2.DisassociateServiceRoleFromAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.DisassociateServiceRoleFromAccountInput, ...func(*greengrassv2.Options)) *greengrassv2.DisassociateServiceRoleFromAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.DisassociateServiceRoleFromAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.DisassociateServiceRoleFromAccountInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComponent(ctx context.Context, params *greengrassv2.GetComponentInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.GetComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComponent")
	}

	var r0 *greengrassv2.GetComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetComponentInput, ...func(*greengrassv2.Options)) (*greengrassv2.GetComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetComponentInput, ...func(*greengrassv2.Options)) *greengrassv2.GetComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.GetComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.GetComponentInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetComponentVersionArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetComponentVersionArtifact(ctx context.Context, params *greengrassv2.GetComponentVersionArtifactInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.GetComponentVersionArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetComponentVersionArtifact")
	}

	var r0 *greengrassv2.GetComponentVersionArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetComponentVersionArtifactInput, ...func(*greengrassv2.Options)) (*greengrassv2.GetComponentVersionArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetComponentVersionArtifactInput, ...func(*greengrassv2.Options)) *greengrassv2.GetComponentVersionArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.GetComponentVersionArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.GetComponentVersionArtifactInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectivityInfo provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectivityInfo(ctx context.Context, params *greengrassv2.GetConnectivityInfoInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.GetConnectivityInfoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectivityInfo")
	}

	var r0 *greengrassv2.GetConnectivityInfoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetConnectivityInfoInput, ...func(*greengrassv2.Options)) (*greengrassv2.GetConnectivityInfoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetConnectivityInfoInput, ...func(*greengrassv2.Options)) *greengrassv2.GetConnectivityInfoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.GetConnectivityInfoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.GetConnectivityInfoInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCoreDevice(ctx context.Context, params *greengrassv2.GetCoreDeviceInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.GetCoreDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCoreDevice")
	}

	var r0 *greengrassv2.GetCoreDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetCoreDeviceInput, ...func(*greengrassv2.Options)) (*greengrassv2.GetCoreDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetCoreDeviceInput, ...func(*greengrassv2.Options)) *greengrassv2.GetCoreDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.GetCoreDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.GetCoreDeviceInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeployment(ctx context.Context, params *greengrassv2.GetDeploymentInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.GetDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeployment")
	}

	var r0 *greengrassv2.GetDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetDeploymentInput, ...func(*greengrassv2.Options)) (*greengrassv2.GetDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetDeploymentInput, ...func(*greengrassv2.Options)) *greengrassv2.GetDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.GetDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.GetDeploymentInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceRoleForAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceRoleForAccount(ctx context.Context, params *greengrassv2.GetServiceRoleForAccountInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.GetServiceRoleForAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceRoleForAccount")
	}

	var r0 *greengrassv2.GetServiceRoleForAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetServiceRoleForAccountInput, ...func(*greengrassv2.Options)) (*greengrassv2.GetServiceRoleForAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.GetServiceRoleForAccountInput, ...func(*greengrassv2.Options)) *greengrassv2.GetServiceRoleForAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.GetServiceRoleForAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.GetServiceRoleForAccountInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClientDevicesAssociatedWithCoreDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClientDevicesAssociatedWithCoreDevice(ctx context.Context, params *greengrassv2.ListClientDevicesAssociatedWithCoreDeviceInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ListClientDevicesAssociatedWithCoreDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClientDevicesAssociatedWithCoreDevice")
	}

	var r0 *greengrassv2.ListClientDevicesAssociatedWithCoreDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListClientDevicesAssociatedWithCoreDeviceInput, ...func(*greengrassv2.Options)) (*greengrassv2.ListClientDevicesAssociatedWithCoreDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListClientDevicesAssociatedWithCoreDeviceInput, ...func(*greengrassv2.Options)) *greengrassv2.ListClientDevicesAssociatedWithCoreDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ListClientDevicesAssociatedWithCoreDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ListClientDevicesAssociatedWithCoreDeviceInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponentVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponentVersions(ctx context.Context, params *greengrassv2.ListComponentVersionsInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ListComponentVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponentVersions")
	}

	var r0 *greengrassv2.ListComponentVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListComponentVersionsInput, ...func(*greengrassv2.Options)) (*greengrassv2.ListComponentVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListComponentVersionsInput, ...func(*greengrassv2.Options)) *greengrassv2.ListComponentVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ListComponentVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ListComponentVersionsInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComponents(ctx context.Context, params *greengrassv2.ListComponentsInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ListComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComponents")
	}

	var r0 *greengrassv2.ListComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListComponentsInput, ...func(*greengrassv2.Options)) (*greengrassv2.ListComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListComponentsInput, ...func(*greengrassv2.Options)) *greengrassv2.ListComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ListComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ListComponentsInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoreDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCoreDevices(ctx context.Context, params *greengrassv2.ListCoreDevicesInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ListCoreDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCoreDevices")
	}

	var r0 *greengrassv2.ListCoreDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListCoreDevicesInput, ...func(*greengrassv2.Options)) (*greengrassv2.ListCoreDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListCoreDevicesInput, ...func(*greengrassv2.Options)) *greengrassv2.ListCoreDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ListCoreDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ListCoreDevicesInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeployments(ctx context.Context, params *greengrassv2.ListDeploymentsInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ListDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 *greengrassv2.ListDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListDeploymentsInput, ...func(*greengrassv2.Options)) (*greengrassv2.ListDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListDeploymentsInput, ...func(*greengrassv2.Options)) *greengrassv2.ListDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ListDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ListDeploymentsInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEffectiveDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEffectiveDeployments(ctx context.Context, params *greengrassv2.ListEffectiveDeploymentsInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ListEffectiveDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEffectiveDeployments")
	}

	var r0 *greengrassv2.ListEffectiveDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListEffectiveDeploymentsInput, ...func(*greengrassv2.Options)) (*greengrassv2.ListEffectiveDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListEffectiveDeploymentsInput, ...func(*greengrassv2.Options)) *greengrassv2.ListEffectiveDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ListEffectiveDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ListEffectiveDeploymentsInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInstalledComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInstalledComponents(ctx context.Context, params *greengrassv2.ListInstalledComponentsInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ListInstalledComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInstalledComponents")
	}

	var r0 *greengrassv2.ListInstalledComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListInstalledComponentsInput, ...func(*greengrassv2.Options)) (*greengrassv2.ListInstalledComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListInstalledComponentsInput, ...func(*greengrassv2.Options)) *greengrassv2.ListInstalledComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ListInstalledComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ListInstalledComponentsInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *greengrassv2.ListTagsForResourceInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *greengrassv2.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListTagsForResourceInput, ...func(*greengrassv2.Options)) (*greengrassv2.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ListTagsForResourceInput, ...func(*greengrassv2.Options)) *greengrassv2.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ListTagsForResourceInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() greengrassv2.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 greengrassv2.Options
	if rf, ok := ret.Get(0).(func() greengrassv2.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(greengrassv2.Options)
	}

	return r0
}

// ResolveComponentCandidates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResolveComponentCandidates(ctx context.Context, params *greengrassv2.ResolveComponentCandidatesInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.ResolveComponentCandidatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResolveComponentCandidates")
	}

	var r0 *greengrassv2.ResolveComponentCandidatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ResolveComponentCandidatesInput, ...func(*greengrassv2.Options)) (*greengrassv2.ResolveComponentCandidatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.ResolveComponentCandidatesInput, ...func(*greengrassv2.Options)) *greengrassv2.ResolveComponentCandidatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.ResolveComponentCandidatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.ResolveComponentCandidatesInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *greengrassv2.TagResourceInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *greengrassv2.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.TagResourceInput, ...func(*greengrassv2.Options)) (*greengrassv2.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.TagResourceInput, ...func(*greengrassv2.Options)) *greengrassv2.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.TagResourceInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *greengrassv2.UntagResourceInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *greengrassv2.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.UntagResourceInput, ...func(*greengrassv2.Options)) (*greengrassv2.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.UntagResourceInput, ...func(*greengrassv2.Options)) *greengrassv2.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.UntagResourceInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectivityInfo provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnectivityInfo(ctx context.Context, params *greengrassv2.UpdateConnectivityInfoInput, optFns ...func(*greengrassv2.Options)) (*greengrassv2.UpdateConnectivityInfoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectivityInfo")
	}

	var r0 *greengrassv2.UpdateConnectivityInfoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.UpdateConnectivityInfoInput, ...func(*greengrassv2.Options)) (*greengrassv2.UpdateConnectivityInfoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrassv2.UpdateConnectivityInfoInput, ...func(*greengrassv2.Options)) *greengrassv2.UpdateConnectivityInfoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrassv2.UpdateConnectivityInfoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrassv2.UpdateConnectivityInfoInput, ...func(*greengrassv2.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
