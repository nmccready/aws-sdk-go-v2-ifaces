// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mediapackagevod "github.com/aws/aws-sdk-go-v2/service/mediapackagevod"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// ConfigureLogs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ConfigureLogs(ctx context.Context, params *mediapackagevod.ConfigureLogsInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.ConfigureLogsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConfigureLogs")
	}

	var r0 *mediapackagevod.ConfigureLogsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ConfigureLogsInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.ConfigureLogsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ConfigureLogsInput, ...func(*mediapackagevod.Options)) *mediapackagevod.ConfigureLogsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.ConfigureLogsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.ConfigureLogsInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAsset(ctx context.Context, params *mediapackagevod.CreateAssetInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.CreateAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAsset")
	}

	var r0 *mediapackagevod.CreateAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.CreateAssetInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.CreateAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.CreateAssetInput, ...func(*mediapackagevod.Options)) *mediapackagevod.CreateAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.CreateAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.CreateAssetInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePackagingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePackagingConfiguration(ctx context.Context, params *mediapackagevod.CreatePackagingConfigurationInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.CreatePackagingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackagingConfiguration")
	}

	var r0 *mediapackagevod.CreatePackagingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.CreatePackagingConfigurationInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.CreatePackagingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.CreatePackagingConfigurationInput, ...func(*mediapackagevod.Options)) *mediapackagevod.CreatePackagingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.CreatePackagingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.CreatePackagingConfigurationInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePackagingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePackagingGroup(ctx context.Context, params *mediapackagevod.CreatePackagingGroupInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.CreatePackagingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePackagingGroup")
	}

	var r0 *mediapackagevod.CreatePackagingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.CreatePackagingGroupInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.CreatePackagingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.CreatePackagingGroupInput, ...func(*mediapackagevod.Options)) *mediapackagevod.CreatePackagingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.CreatePackagingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.CreatePackagingGroupInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAsset(ctx context.Context, params *mediapackagevod.DeleteAssetInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.DeleteAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAsset")
	}

	var r0 *mediapackagevod.DeleteAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DeleteAssetInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.DeleteAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DeleteAssetInput, ...func(*mediapackagevod.Options)) *mediapackagevod.DeleteAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.DeleteAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.DeleteAssetInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackagingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePackagingConfiguration(ctx context.Context, params *mediapackagevod.DeletePackagingConfigurationInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.DeletePackagingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePackagingConfiguration")
	}

	var r0 *mediapackagevod.DeletePackagingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DeletePackagingConfigurationInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.DeletePackagingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DeletePackagingConfigurationInput, ...func(*mediapackagevod.Options)) *mediapackagevod.DeletePackagingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.DeletePackagingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.DeletePackagingConfigurationInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePackagingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePackagingGroup(ctx context.Context, params *mediapackagevod.DeletePackagingGroupInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.DeletePackagingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePackagingGroup")
	}

	var r0 *mediapackagevod.DeletePackagingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DeletePackagingGroupInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.DeletePackagingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DeletePackagingGroupInput, ...func(*mediapackagevod.Options)) *mediapackagevod.DeletePackagingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.DeletePackagingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.DeletePackagingGroupInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAsset provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAsset(ctx context.Context, params *mediapackagevod.DescribeAssetInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.DescribeAssetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAsset")
	}

	var r0 *mediapackagevod.DescribeAssetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DescribeAssetInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.DescribeAssetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DescribeAssetInput, ...func(*mediapackagevod.Options)) *mediapackagevod.DescribeAssetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.DescribeAssetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.DescribeAssetInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePackagingConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePackagingConfiguration(ctx context.Context, params *mediapackagevod.DescribePackagingConfigurationInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.DescribePackagingConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePackagingConfiguration")
	}

	var r0 *mediapackagevod.DescribePackagingConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DescribePackagingConfigurationInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.DescribePackagingConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DescribePackagingConfigurationInput, ...func(*mediapackagevod.Options)) *mediapackagevod.DescribePackagingConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.DescribePackagingConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.DescribePackagingConfigurationInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePackagingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePackagingGroup(ctx context.Context, params *mediapackagevod.DescribePackagingGroupInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.DescribePackagingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePackagingGroup")
	}

	var r0 *mediapackagevod.DescribePackagingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DescribePackagingGroupInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.DescribePackagingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.DescribePackagingGroupInput, ...func(*mediapackagevod.Options)) *mediapackagevod.DescribePackagingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.DescribePackagingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.DescribePackagingGroupInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssets(ctx context.Context, params *mediapackagevod.ListAssetsInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.ListAssetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssets")
	}

	var r0 *mediapackagevod.ListAssetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ListAssetsInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.ListAssetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ListAssetsInput, ...func(*mediapackagevod.Options)) *mediapackagevod.ListAssetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.ListAssetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.ListAssetsInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPackagingConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPackagingConfigurations(ctx context.Context, params *mediapackagevod.ListPackagingConfigurationsInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.ListPackagingConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPackagingConfigurations")
	}

	var r0 *mediapackagevod.ListPackagingConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ListPackagingConfigurationsInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.ListPackagingConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ListPackagingConfigurationsInput, ...func(*mediapackagevod.Options)) *mediapackagevod.ListPackagingConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.ListPackagingConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.ListPackagingConfigurationsInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPackagingGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPackagingGroups(ctx context.Context, params *mediapackagevod.ListPackagingGroupsInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.ListPackagingGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPackagingGroups")
	}

	var r0 *mediapackagevod.ListPackagingGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ListPackagingGroupsInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.ListPackagingGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ListPackagingGroupsInput, ...func(*mediapackagevod.Options)) *mediapackagevod.ListPackagingGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.ListPackagingGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.ListPackagingGroupsInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *mediapackagevod.ListTagsForResourceInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *mediapackagevod.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ListTagsForResourceInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.ListTagsForResourceInput, ...func(*mediapackagevod.Options)) *mediapackagevod.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.ListTagsForResourceInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() mediapackagevod.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 mediapackagevod.Options
	if rf, ok := ret.Get(0).(func() mediapackagevod.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(mediapackagevod.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *mediapackagevod.TagResourceInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *mediapackagevod.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.TagResourceInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.TagResourceInput, ...func(*mediapackagevod.Options)) *mediapackagevod.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.TagResourceInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *mediapackagevod.UntagResourceInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *mediapackagevod.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.UntagResourceInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.UntagResourceInput, ...func(*mediapackagevod.Options)) *mediapackagevod.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.UntagResourceInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePackagingGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePackagingGroup(ctx context.Context, params *mediapackagevod.UpdatePackagingGroupInput, optFns ...func(*mediapackagevod.Options)) (*mediapackagevod.UpdatePackagingGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePackagingGroup")
	}

	var r0 *mediapackagevod.UpdatePackagingGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.UpdatePackagingGroupInput, ...func(*mediapackagevod.Options)) (*mediapackagevod.UpdatePackagingGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *mediapackagevod.UpdatePackagingGroupInput, ...func(*mediapackagevod.Options)) *mediapackagevod.UpdatePackagingGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mediapackagevod.UpdatePackagingGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *mediapackagevod.UpdatePackagingGroupInput, ...func(*mediapackagevod.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
