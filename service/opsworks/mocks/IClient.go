// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	opsworks "github.com/aws/aws-sdk-go-v2/service/opsworks"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssignInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssignInstance(ctx context.Context, params *opsworks.AssignInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.AssignInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignInstance")
	}

	var r0 *opsworks.AssignInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.AssignInstanceInput, ...func(*opsworks.Options)) (*opsworks.AssignInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.AssignInstanceInput, ...func(*opsworks.Options)) *opsworks.AssignInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.AssignInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.AssignInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssignVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssignVolume(ctx context.Context, params *opsworks.AssignVolumeInput, optFns ...func(*opsworks.Options)) (*opsworks.AssignVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssignVolume")
	}

	var r0 *opsworks.AssignVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.AssignVolumeInput, ...func(*opsworks.Options)) (*opsworks.AssignVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.AssignVolumeInput, ...func(*opsworks.Options)) *opsworks.AssignVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.AssignVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.AssignVolumeInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateElasticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateElasticIp(ctx context.Context, params *opsworks.AssociateElasticIpInput, optFns ...func(*opsworks.Options)) (*opsworks.AssociateElasticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateElasticIp")
	}

	var r0 *opsworks.AssociateElasticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.AssociateElasticIpInput, ...func(*opsworks.Options)) (*opsworks.AssociateElasticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.AssociateElasticIpInput, ...func(*opsworks.Options)) *opsworks.AssociateElasticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.AssociateElasticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.AssociateElasticIpInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachElasticLoadBalancer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachElasticLoadBalancer(ctx context.Context, params *opsworks.AttachElasticLoadBalancerInput, optFns ...func(*opsworks.Options)) (*opsworks.AttachElasticLoadBalancerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachElasticLoadBalancer")
	}

	var r0 *opsworks.AttachElasticLoadBalancerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.AttachElasticLoadBalancerInput, ...func(*opsworks.Options)) (*opsworks.AttachElasticLoadBalancerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.AttachElasticLoadBalancerInput, ...func(*opsworks.Options)) *opsworks.AttachElasticLoadBalancerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.AttachElasticLoadBalancerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.AttachElasticLoadBalancerInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CloneStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CloneStack(ctx context.Context, params *opsworks.CloneStackInput, optFns ...func(*opsworks.Options)) (*opsworks.CloneStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloneStack")
	}

	var r0 *opsworks.CloneStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CloneStackInput, ...func(*opsworks.Options)) (*opsworks.CloneStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CloneStackInput, ...func(*opsworks.Options)) *opsworks.CloneStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.CloneStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.CloneStackInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApp(ctx context.Context, params *opsworks.CreateAppInput, optFns ...func(*opsworks.Options)) (*opsworks.CreateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *opsworks.CreateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateAppInput, ...func(*opsworks.Options)) (*opsworks.CreateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateAppInput, ...func(*opsworks.Options)) *opsworks.CreateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.CreateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.CreateAppInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeployment(ctx context.Context, params *opsworks.CreateDeploymentInput, optFns ...func(*opsworks.Options)) (*opsworks.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *opsworks.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateDeploymentInput, ...func(*opsworks.Options)) (*opsworks.CreateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateDeploymentInput, ...func(*opsworks.Options)) *opsworks.CreateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.CreateDeploymentInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstance(ctx context.Context, params *opsworks.CreateInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.CreateInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstance")
	}

	var r0 *opsworks.CreateInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateInstanceInput, ...func(*opsworks.Options)) (*opsworks.CreateInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateInstanceInput, ...func(*opsworks.Options)) *opsworks.CreateInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.CreateInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.CreateInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLayer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLayer(ctx context.Context, params *opsworks.CreateLayerInput, optFns ...func(*opsworks.Options)) (*opsworks.CreateLayerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLayer")
	}

	var r0 *opsworks.CreateLayerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateLayerInput, ...func(*opsworks.Options)) (*opsworks.CreateLayerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateLayerInput, ...func(*opsworks.Options)) *opsworks.CreateLayerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.CreateLayerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.CreateLayerInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStack(ctx context.Context, params *opsworks.CreateStackInput, optFns ...func(*opsworks.Options)) (*opsworks.CreateStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStack")
	}

	var r0 *opsworks.CreateStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateStackInput, ...func(*opsworks.Options)) (*opsworks.CreateStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateStackInput, ...func(*opsworks.Options)) *opsworks.CreateStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.CreateStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.CreateStackInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserProfile(ctx context.Context, params *opsworks.CreateUserProfileInput, optFns ...func(*opsworks.Options)) (*opsworks.CreateUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserProfile")
	}

	var r0 *opsworks.CreateUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateUserProfileInput, ...func(*opsworks.Options)) (*opsworks.CreateUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.CreateUserProfileInput, ...func(*opsworks.Options)) *opsworks.CreateUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.CreateUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.CreateUserProfileInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApp(ctx context.Context, params *opsworks.DeleteAppInput, optFns ...func(*opsworks.Options)) (*opsworks.DeleteAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *opsworks.DeleteAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteAppInput, ...func(*opsworks.Options)) (*opsworks.DeleteAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteAppInput, ...func(*opsworks.Options)) *opsworks.DeleteAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeleteAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeleteAppInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstance(ctx context.Context, params *opsworks.DeleteInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.DeleteInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstance")
	}

	var r0 *opsworks.DeleteInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteInstanceInput, ...func(*opsworks.Options)) (*opsworks.DeleteInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteInstanceInput, ...func(*opsworks.Options)) *opsworks.DeleteInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeleteInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeleteInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLayer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLayer(ctx context.Context, params *opsworks.DeleteLayerInput, optFns ...func(*opsworks.Options)) (*opsworks.DeleteLayerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLayer")
	}

	var r0 *opsworks.DeleteLayerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteLayerInput, ...func(*opsworks.Options)) (*opsworks.DeleteLayerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteLayerInput, ...func(*opsworks.Options)) *opsworks.DeleteLayerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeleteLayerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeleteLayerInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStack(ctx context.Context, params *opsworks.DeleteStackInput, optFns ...func(*opsworks.Options)) (*opsworks.DeleteStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStack")
	}

	var r0 *opsworks.DeleteStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteStackInput, ...func(*opsworks.Options)) (*opsworks.DeleteStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteStackInput, ...func(*opsworks.Options)) *opsworks.DeleteStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeleteStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeleteStackInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserProfile(ctx context.Context, params *opsworks.DeleteUserProfileInput, optFns ...func(*opsworks.Options)) (*opsworks.DeleteUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserProfile")
	}

	var r0 *opsworks.DeleteUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteUserProfileInput, ...func(*opsworks.Options)) (*opsworks.DeleteUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeleteUserProfileInput, ...func(*opsworks.Options)) *opsworks.DeleteUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeleteUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeleteUserProfileInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterEcsCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterEcsCluster(ctx context.Context, params *opsworks.DeregisterEcsClusterInput, optFns ...func(*opsworks.Options)) (*opsworks.DeregisterEcsClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterEcsCluster")
	}

	var r0 *opsworks.DeregisterEcsClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterEcsClusterInput, ...func(*opsworks.Options)) (*opsworks.DeregisterEcsClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterEcsClusterInput, ...func(*opsworks.Options)) *opsworks.DeregisterEcsClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeregisterEcsClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeregisterEcsClusterInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterElasticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterElasticIp(ctx context.Context, params *opsworks.DeregisterElasticIpInput, optFns ...func(*opsworks.Options)) (*opsworks.DeregisterElasticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterElasticIp")
	}

	var r0 *opsworks.DeregisterElasticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterElasticIpInput, ...func(*opsworks.Options)) (*opsworks.DeregisterElasticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterElasticIpInput, ...func(*opsworks.Options)) *opsworks.DeregisterElasticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeregisterElasticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeregisterElasticIpInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterInstance(ctx context.Context, params *opsworks.DeregisterInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.DeregisterInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterInstance")
	}

	var r0 *opsworks.DeregisterInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterInstanceInput, ...func(*opsworks.Options)) (*opsworks.DeregisterInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterInstanceInput, ...func(*opsworks.Options)) *opsworks.DeregisterInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeregisterInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeregisterInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterRdsDbInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterRdsDbInstance(ctx context.Context, params *opsworks.DeregisterRdsDbInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.DeregisterRdsDbInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterRdsDbInstance")
	}

	var r0 *opsworks.DeregisterRdsDbInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterRdsDbInstanceInput, ...func(*opsworks.Options)) (*opsworks.DeregisterRdsDbInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterRdsDbInstanceInput, ...func(*opsworks.Options)) *opsworks.DeregisterRdsDbInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeregisterRdsDbInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeregisterRdsDbInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterVolume(ctx context.Context, params *opsworks.DeregisterVolumeInput, optFns ...func(*opsworks.Options)) (*opsworks.DeregisterVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterVolume")
	}

	var r0 *opsworks.DeregisterVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterVolumeInput, ...func(*opsworks.Options)) (*opsworks.DeregisterVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DeregisterVolumeInput, ...func(*opsworks.Options)) *opsworks.DeregisterVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DeregisterVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DeregisterVolumeInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAgentVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAgentVersions(ctx context.Context, params *opsworks.DescribeAgentVersionsInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeAgentVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAgentVersions")
	}

	var r0 *opsworks.DescribeAgentVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeAgentVersionsInput, ...func(*opsworks.Options)) (*opsworks.DescribeAgentVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeAgentVersionsInput, ...func(*opsworks.Options)) *opsworks.DescribeAgentVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeAgentVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeAgentVersionsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApps(ctx context.Context, params *opsworks.DescribeAppsInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApps")
	}

	var r0 *opsworks.DescribeAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeAppsInput, ...func(*opsworks.Options)) (*opsworks.DescribeAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeAppsInput, ...func(*opsworks.Options)) *opsworks.DescribeAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeAppsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCommands provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCommands(ctx context.Context, params *opsworks.DescribeCommandsInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeCommandsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCommands")
	}

	var r0 *opsworks.DescribeCommandsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeCommandsInput, ...func(*opsworks.Options)) (*opsworks.DescribeCommandsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeCommandsInput, ...func(*opsworks.Options)) *opsworks.DescribeCommandsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeCommandsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeCommandsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDeployments(ctx context.Context, params *opsworks.DescribeDeploymentsInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDeployments")
	}

	var r0 *opsworks.DescribeDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeDeploymentsInput, ...func(*opsworks.Options)) (*opsworks.DescribeDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeDeploymentsInput, ...func(*opsworks.Options)) *opsworks.DescribeDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeDeploymentsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEcsClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEcsClusters(ctx context.Context, params *opsworks.DescribeEcsClustersInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeEcsClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEcsClusters")
	}

	var r0 *opsworks.DescribeEcsClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeEcsClustersInput, ...func(*opsworks.Options)) (*opsworks.DescribeEcsClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeEcsClustersInput, ...func(*opsworks.Options)) *opsworks.DescribeEcsClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeEcsClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeEcsClustersInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeElasticIps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeElasticIps(ctx context.Context, params *opsworks.DescribeElasticIpsInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeElasticIpsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeElasticIps")
	}

	var r0 *opsworks.DescribeElasticIpsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeElasticIpsInput, ...func(*opsworks.Options)) (*opsworks.DescribeElasticIpsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeElasticIpsInput, ...func(*opsworks.Options)) *opsworks.DescribeElasticIpsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeElasticIpsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeElasticIpsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeElasticLoadBalancers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeElasticLoadBalancers(ctx context.Context, params *opsworks.DescribeElasticLoadBalancersInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeElasticLoadBalancersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeElasticLoadBalancers")
	}

	var r0 *opsworks.DescribeElasticLoadBalancersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeElasticLoadBalancersInput, ...func(*opsworks.Options)) (*opsworks.DescribeElasticLoadBalancersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeElasticLoadBalancersInput, ...func(*opsworks.Options)) *opsworks.DescribeElasticLoadBalancersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeElasticLoadBalancersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeElasticLoadBalancersInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInstances(ctx context.Context, params *opsworks.DescribeInstancesInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstances")
	}

	var r0 *opsworks.DescribeInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeInstancesInput, ...func(*opsworks.Options)) (*opsworks.DescribeInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeInstancesInput, ...func(*opsworks.Options)) *opsworks.DescribeInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeInstancesInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLayers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLayers(ctx context.Context, params *opsworks.DescribeLayersInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeLayersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLayers")
	}

	var r0 *opsworks.DescribeLayersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeLayersInput, ...func(*opsworks.Options)) (*opsworks.DescribeLayersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeLayersInput, ...func(*opsworks.Options)) *opsworks.DescribeLayersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeLayersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeLayersInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLoadBasedAutoScaling provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLoadBasedAutoScaling(ctx context.Context, params *opsworks.DescribeLoadBasedAutoScalingInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeLoadBasedAutoScalingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLoadBasedAutoScaling")
	}

	var r0 *opsworks.DescribeLoadBasedAutoScalingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeLoadBasedAutoScalingInput, ...func(*opsworks.Options)) (*opsworks.DescribeLoadBasedAutoScalingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeLoadBasedAutoScalingInput, ...func(*opsworks.Options)) *opsworks.DescribeLoadBasedAutoScalingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeLoadBasedAutoScalingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeLoadBasedAutoScalingInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMyUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMyUserProfile(ctx context.Context, params *opsworks.DescribeMyUserProfileInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeMyUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMyUserProfile")
	}

	var r0 *opsworks.DescribeMyUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeMyUserProfileInput, ...func(*opsworks.Options)) (*opsworks.DescribeMyUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeMyUserProfileInput, ...func(*opsworks.Options)) *opsworks.DescribeMyUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeMyUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeMyUserProfileInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOperatingSystems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOperatingSystems(ctx context.Context, params *opsworks.DescribeOperatingSystemsInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeOperatingSystemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOperatingSystems")
	}

	var r0 *opsworks.DescribeOperatingSystemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeOperatingSystemsInput, ...func(*opsworks.Options)) (*opsworks.DescribeOperatingSystemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeOperatingSystemsInput, ...func(*opsworks.Options)) *opsworks.DescribeOperatingSystemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeOperatingSystemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeOperatingSystemsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePermissions(ctx context.Context, params *opsworks.DescribePermissionsInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribePermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePermissions")
	}

	var r0 *opsworks.DescribePermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribePermissionsInput, ...func(*opsworks.Options)) (*opsworks.DescribePermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribePermissionsInput, ...func(*opsworks.Options)) *opsworks.DescribePermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribePermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribePermissionsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRaidArrays provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRaidArrays(ctx context.Context, params *opsworks.DescribeRaidArraysInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeRaidArraysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRaidArrays")
	}

	var r0 *opsworks.DescribeRaidArraysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeRaidArraysInput, ...func(*opsworks.Options)) (*opsworks.DescribeRaidArraysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeRaidArraysInput, ...func(*opsworks.Options)) *opsworks.DescribeRaidArraysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeRaidArraysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeRaidArraysInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRdsDbInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRdsDbInstances(ctx context.Context, params *opsworks.DescribeRdsDbInstancesInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeRdsDbInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRdsDbInstances")
	}

	var r0 *opsworks.DescribeRdsDbInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeRdsDbInstancesInput, ...func(*opsworks.Options)) (*opsworks.DescribeRdsDbInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeRdsDbInstancesInput, ...func(*opsworks.Options)) *opsworks.DescribeRdsDbInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeRdsDbInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeRdsDbInstancesInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeServiceErrors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeServiceErrors(ctx context.Context, params *opsworks.DescribeServiceErrorsInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeServiceErrorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeServiceErrors")
	}

	var r0 *opsworks.DescribeServiceErrorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeServiceErrorsInput, ...func(*opsworks.Options)) (*opsworks.DescribeServiceErrorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeServiceErrorsInput, ...func(*opsworks.Options)) *opsworks.DescribeServiceErrorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeServiceErrorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeServiceErrorsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStackProvisioningParameters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStackProvisioningParameters(ctx context.Context, params *opsworks.DescribeStackProvisioningParametersInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeStackProvisioningParametersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStackProvisioningParameters")
	}

	var r0 *opsworks.DescribeStackProvisioningParametersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeStackProvisioningParametersInput, ...func(*opsworks.Options)) (*opsworks.DescribeStackProvisioningParametersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeStackProvisioningParametersInput, ...func(*opsworks.Options)) *opsworks.DescribeStackProvisioningParametersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeStackProvisioningParametersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeStackProvisioningParametersInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStackSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStackSummary(ctx context.Context, params *opsworks.DescribeStackSummaryInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeStackSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStackSummary")
	}

	var r0 *opsworks.DescribeStackSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeStackSummaryInput, ...func(*opsworks.Options)) (*opsworks.DescribeStackSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeStackSummaryInput, ...func(*opsworks.Options)) *opsworks.DescribeStackSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeStackSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeStackSummaryInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStacks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStacks(ctx context.Context, params *opsworks.DescribeStacksInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeStacksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStacks")
	}

	var r0 *opsworks.DescribeStacksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeStacksInput, ...func(*opsworks.Options)) (*opsworks.DescribeStacksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeStacksInput, ...func(*opsworks.Options)) *opsworks.DescribeStacksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeStacksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeStacksInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTimeBasedAutoScaling provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTimeBasedAutoScaling(ctx context.Context, params *opsworks.DescribeTimeBasedAutoScalingInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeTimeBasedAutoScalingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTimeBasedAutoScaling")
	}

	var r0 *opsworks.DescribeTimeBasedAutoScalingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeTimeBasedAutoScalingInput, ...func(*opsworks.Options)) (*opsworks.DescribeTimeBasedAutoScalingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeTimeBasedAutoScalingInput, ...func(*opsworks.Options)) *opsworks.DescribeTimeBasedAutoScalingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeTimeBasedAutoScalingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeTimeBasedAutoScalingInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserProfiles(ctx context.Context, params *opsworks.DescribeUserProfilesInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeUserProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserProfiles")
	}

	var r0 *opsworks.DescribeUserProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeUserProfilesInput, ...func(*opsworks.Options)) (*opsworks.DescribeUserProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeUserProfilesInput, ...func(*opsworks.Options)) *opsworks.DescribeUserProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeUserProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeUserProfilesInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVolumes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVolumes(ctx context.Context, params *opsworks.DescribeVolumesInput, optFns ...func(*opsworks.Options)) (*opsworks.DescribeVolumesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVolumes")
	}

	var r0 *opsworks.DescribeVolumesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeVolumesInput, ...func(*opsworks.Options)) (*opsworks.DescribeVolumesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DescribeVolumesInput, ...func(*opsworks.Options)) *opsworks.DescribeVolumesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DescribeVolumesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DescribeVolumesInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachElasticLoadBalancer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachElasticLoadBalancer(ctx context.Context, params *opsworks.DetachElasticLoadBalancerInput, optFns ...func(*opsworks.Options)) (*opsworks.DetachElasticLoadBalancerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachElasticLoadBalancer")
	}

	var r0 *opsworks.DetachElasticLoadBalancerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DetachElasticLoadBalancerInput, ...func(*opsworks.Options)) (*opsworks.DetachElasticLoadBalancerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DetachElasticLoadBalancerInput, ...func(*opsworks.Options)) *opsworks.DetachElasticLoadBalancerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DetachElasticLoadBalancerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DetachElasticLoadBalancerInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateElasticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateElasticIp(ctx context.Context, params *opsworks.DisassociateElasticIpInput, optFns ...func(*opsworks.Options)) (*opsworks.DisassociateElasticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateElasticIp")
	}

	var r0 *opsworks.DisassociateElasticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DisassociateElasticIpInput, ...func(*opsworks.Options)) (*opsworks.DisassociateElasticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.DisassociateElasticIpInput, ...func(*opsworks.Options)) *opsworks.DisassociateElasticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.DisassociateElasticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.DisassociateElasticIpInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHostnameSuggestion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetHostnameSuggestion(ctx context.Context, params *opsworks.GetHostnameSuggestionInput, optFns ...func(*opsworks.Options)) (*opsworks.GetHostnameSuggestionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetHostnameSuggestion")
	}

	var r0 *opsworks.GetHostnameSuggestionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.GetHostnameSuggestionInput, ...func(*opsworks.Options)) (*opsworks.GetHostnameSuggestionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.GetHostnameSuggestionInput, ...func(*opsworks.Options)) *opsworks.GetHostnameSuggestionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.GetHostnameSuggestionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.GetHostnameSuggestionInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GrantAccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GrantAccess(ctx context.Context, params *opsworks.GrantAccessInput, optFns ...func(*opsworks.Options)) (*opsworks.GrantAccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GrantAccess")
	}

	var r0 *opsworks.GrantAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.GrantAccessInput, ...func(*opsworks.Options)) (*opsworks.GrantAccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.GrantAccessInput, ...func(*opsworks.Options)) *opsworks.GrantAccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.GrantAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.GrantAccessInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTags(ctx context.Context, params *opsworks.ListTagsInput, optFns ...func(*opsworks.Options)) (*opsworks.ListTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 *opsworks.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.ListTagsInput, ...func(*opsworks.Options)) (*opsworks.ListTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.ListTagsInput, ...func(*opsworks.Options)) *opsworks.ListTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.ListTagsInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() opsworks.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 opsworks.Options
	if rf, ok := ret.Get(0).(func() opsworks.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(opsworks.Options)
	}

	return r0
}

// RebootInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootInstance(ctx context.Context, params *opsworks.RebootInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.RebootInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootInstance")
	}

	var r0 *opsworks.RebootInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RebootInstanceInput, ...func(*opsworks.Options)) (*opsworks.RebootInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RebootInstanceInput, ...func(*opsworks.Options)) *opsworks.RebootInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.RebootInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.RebootInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterEcsCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterEcsCluster(ctx context.Context, params *opsworks.RegisterEcsClusterInput, optFns ...func(*opsworks.Options)) (*opsworks.RegisterEcsClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterEcsCluster")
	}

	var r0 *opsworks.RegisterEcsClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterEcsClusterInput, ...func(*opsworks.Options)) (*opsworks.RegisterEcsClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterEcsClusterInput, ...func(*opsworks.Options)) *opsworks.RegisterEcsClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.RegisterEcsClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.RegisterEcsClusterInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterElasticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterElasticIp(ctx context.Context, params *opsworks.RegisterElasticIpInput, optFns ...func(*opsworks.Options)) (*opsworks.RegisterElasticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterElasticIp")
	}

	var r0 *opsworks.RegisterElasticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterElasticIpInput, ...func(*opsworks.Options)) (*opsworks.RegisterElasticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterElasticIpInput, ...func(*opsworks.Options)) *opsworks.RegisterElasticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.RegisterElasticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.RegisterElasticIpInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterInstance(ctx context.Context, params *opsworks.RegisterInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.RegisterInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterInstance")
	}

	var r0 *opsworks.RegisterInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterInstanceInput, ...func(*opsworks.Options)) (*opsworks.RegisterInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterInstanceInput, ...func(*opsworks.Options)) *opsworks.RegisterInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.RegisterInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.RegisterInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterRdsDbInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterRdsDbInstance(ctx context.Context, params *opsworks.RegisterRdsDbInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.RegisterRdsDbInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterRdsDbInstance")
	}

	var r0 *opsworks.RegisterRdsDbInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterRdsDbInstanceInput, ...func(*opsworks.Options)) (*opsworks.RegisterRdsDbInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterRdsDbInstanceInput, ...func(*opsworks.Options)) *opsworks.RegisterRdsDbInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.RegisterRdsDbInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.RegisterRdsDbInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterVolume(ctx context.Context, params *opsworks.RegisterVolumeInput, optFns ...func(*opsworks.Options)) (*opsworks.RegisterVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterVolume")
	}

	var r0 *opsworks.RegisterVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterVolumeInput, ...func(*opsworks.Options)) (*opsworks.RegisterVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.RegisterVolumeInput, ...func(*opsworks.Options)) *opsworks.RegisterVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.RegisterVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.RegisterVolumeInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetLoadBasedAutoScaling provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetLoadBasedAutoScaling(ctx context.Context, params *opsworks.SetLoadBasedAutoScalingInput, optFns ...func(*opsworks.Options)) (*opsworks.SetLoadBasedAutoScalingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetLoadBasedAutoScaling")
	}

	var r0 *opsworks.SetLoadBasedAutoScalingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.SetLoadBasedAutoScalingInput, ...func(*opsworks.Options)) (*opsworks.SetLoadBasedAutoScalingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.SetLoadBasedAutoScalingInput, ...func(*opsworks.Options)) *opsworks.SetLoadBasedAutoScalingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.SetLoadBasedAutoScalingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.SetLoadBasedAutoScalingInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetPermission provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetPermission(ctx context.Context, params *opsworks.SetPermissionInput, optFns ...func(*opsworks.Options)) (*opsworks.SetPermissionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetPermission")
	}

	var r0 *opsworks.SetPermissionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.SetPermissionInput, ...func(*opsworks.Options)) (*opsworks.SetPermissionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.SetPermissionInput, ...func(*opsworks.Options)) *opsworks.SetPermissionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.SetPermissionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.SetPermissionInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetTimeBasedAutoScaling provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SetTimeBasedAutoScaling(ctx context.Context, params *opsworks.SetTimeBasedAutoScalingInput, optFns ...func(*opsworks.Options)) (*opsworks.SetTimeBasedAutoScalingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SetTimeBasedAutoScaling")
	}

	var r0 *opsworks.SetTimeBasedAutoScalingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.SetTimeBasedAutoScalingInput, ...func(*opsworks.Options)) (*opsworks.SetTimeBasedAutoScalingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.SetTimeBasedAutoScalingInput, ...func(*opsworks.Options)) *opsworks.SetTimeBasedAutoScalingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.SetTimeBasedAutoScalingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.SetTimeBasedAutoScalingInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartInstance(ctx context.Context, params *opsworks.StartInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.StartInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInstance")
	}

	var r0 *opsworks.StartInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.StartInstanceInput, ...func(*opsworks.Options)) (*opsworks.StartInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.StartInstanceInput, ...func(*opsworks.Options)) *opsworks.StartInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.StartInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.StartInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartStack(ctx context.Context, params *opsworks.StartStackInput, optFns ...func(*opsworks.Options)) (*opsworks.StartStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartStack")
	}

	var r0 *opsworks.StartStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.StartStackInput, ...func(*opsworks.Options)) (*opsworks.StartStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.StartStackInput, ...func(*opsworks.Options)) *opsworks.StartStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.StartStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.StartStackInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopInstance(ctx context.Context, params *opsworks.StopInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.StopInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopInstance")
	}

	var r0 *opsworks.StopInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.StopInstanceInput, ...func(*opsworks.Options)) (*opsworks.StopInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.StopInstanceInput, ...func(*opsworks.Options)) *opsworks.StopInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.StopInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.StopInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopStack(ctx context.Context, params *opsworks.StopStackInput, optFns ...func(*opsworks.Options)) (*opsworks.StopStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopStack")
	}

	var r0 *opsworks.StopStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.StopStackInput, ...func(*opsworks.Options)) (*opsworks.StopStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.StopStackInput, ...func(*opsworks.Options)) *opsworks.StopStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.StopStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.StopStackInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *opsworks.TagResourceInput, optFns ...func(*opsworks.Options)) (*opsworks.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *opsworks.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.TagResourceInput, ...func(*opsworks.Options)) (*opsworks.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.TagResourceInput, ...func(*opsworks.Options)) *opsworks.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.TagResourceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnassignInstance(ctx context.Context, params *opsworks.UnassignInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.UnassignInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignInstance")
	}

	var r0 *opsworks.UnassignInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UnassignInstanceInput, ...func(*opsworks.Options)) (*opsworks.UnassignInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UnassignInstanceInput, ...func(*opsworks.Options)) *opsworks.UnassignInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UnassignInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UnassignInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnassignVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UnassignVolume(ctx context.Context, params *opsworks.UnassignVolumeInput, optFns ...func(*opsworks.Options)) (*opsworks.UnassignVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UnassignVolume")
	}

	var r0 *opsworks.UnassignVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UnassignVolumeInput, ...func(*opsworks.Options)) (*opsworks.UnassignVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UnassignVolumeInput, ...func(*opsworks.Options)) *opsworks.UnassignVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UnassignVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UnassignVolumeInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *opsworks.UntagResourceInput, optFns ...func(*opsworks.Options)) (*opsworks.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *opsworks.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UntagResourceInput, ...func(*opsworks.Options)) (*opsworks.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UntagResourceInput, ...func(*opsworks.Options)) *opsworks.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UntagResourceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateApp(ctx context.Context, params *opsworks.UpdateAppInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateApp")
	}

	var r0 *opsworks.UpdateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateAppInput, ...func(*opsworks.Options)) (*opsworks.UpdateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateAppInput, ...func(*opsworks.Options)) *opsworks.UpdateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateAppInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateElasticIp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateElasticIp(ctx context.Context, params *opsworks.UpdateElasticIpInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateElasticIpOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateElasticIp")
	}

	var r0 *opsworks.UpdateElasticIpOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateElasticIpInput, ...func(*opsworks.Options)) (*opsworks.UpdateElasticIpOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateElasticIpInput, ...func(*opsworks.Options)) *opsworks.UpdateElasticIpOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateElasticIpOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateElasticIpInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInstance(ctx context.Context, params *opsworks.UpdateInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInstance")
	}

	var r0 *opsworks.UpdateInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateInstanceInput, ...func(*opsworks.Options)) (*opsworks.UpdateInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateInstanceInput, ...func(*opsworks.Options)) *opsworks.UpdateInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLayer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLayer(ctx context.Context, params *opsworks.UpdateLayerInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateLayerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLayer")
	}

	var r0 *opsworks.UpdateLayerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateLayerInput, ...func(*opsworks.Options)) (*opsworks.UpdateLayerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateLayerInput, ...func(*opsworks.Options)) *opsworks.UpdateLayerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateLayerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateLayerInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMyUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMyUserProfile(ctx context.Context, params *opsworks.UpdateMyUserProfileInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateMyUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMyUserProfile")
	}

	var r0 *opsworks.UpdateMyUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateMyUserProfileInput, ...func(*opsworks.Options)) (*opsworks.UpdateMyUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateMyUserProfileInput, ...func(*opsworks.Options)) *opsworks.UpdateMyUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateMyUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateMyUserProfileInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRdsDbInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRdsDbInstance(ctx context.Context, params *opsworks.UpdateRdsDbInstanceInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateRdsDbInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRdsDbInstance")
	}

	var r0 *opsworks.UpdateRdsDbInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateRdsDbInstanceInput, ...func(*opsworks.Options)) (*opsworks.UpdateRdsDbInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateRdsDbInstanceInput, ...func(*opsworks.Options)) *opsworks.UpdateRdsDbInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateRdsDbInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateRdsDbInstanceInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateStack provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateStack(ctx context.Context, params *opsworks.UpdateStackInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateStackOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateStack")
	}

	var r0 *opsworks.UpdateStackOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateStackInput, ...func(*opsworks.Options)) (*opsworks.UpdateStackOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateStackInput, ...func(*opsworks.Options)) *opsworks.UpdateStackOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateStackOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateStackInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserProfile(ctx context.Context, params *opsworks.UpdateUserProfileInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProfile")
	}

	var r0 *opsworks.UpdateUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateUserProfileInput, ...func(*opsworks.Options)) (*opsworks.UpdateUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateUserProfileInput, ...func(*opsworks.Options)) *opsworks.UpdateUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateUserProfileInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVolume(ctx context.Context, params *opsworks.UpdateVolumeInput, optFns ...func(*opsworks.Options)) (*opsworks.UpdateVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVolume")
	}

	var r0 *opsworks.UpdateVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateVolumeInput, ...func(*opsworks.Options)) (*opsworks.UpdateVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *opsworks.UpdateVolumeInput, ...func(*opsworks.Options)) *opsworks.UpdateVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*opsworks.UpdateVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *opsworks.UpdateVolumeInput, ...func(*opsworks.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
