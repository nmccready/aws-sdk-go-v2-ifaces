// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	evidently "github.com/aws/aws-sdk-go-v2/service/evidently"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// BatchEvaluateFeature provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchEvaluateFeature(ctx context.Context, params *evidently.BatchEvaluateFeatureInput, optFns ...func(*evidently.Options)) (*evidently.BatchEvaluateFeatureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchEvaluateFeature")
	}

	var r0 *evidently.BatchEvaluateFeatureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.BatchEvaluateFeatureInput, ...func(*evidently.Options)) (*evidently.BatchEvaluateFeatureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.BatchEvaluateFeatureInput, ...func(*evidently.Options)) *evidently.BatchEvaluateFeatureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.BatchEvaluateFeatureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.BatchEvaluateFeatureInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateExperiment(ctx context.Context, params *evidently.CreateExperimentInput, optFns ...func(*evidently.Options)) (*evidently.CreateExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExperiment")
	}

	var r0 *evidently.CreateExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateExperimentInput, ...func(*evidently.Options)) (*evidently.CreateExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateExperimentInput, ...func(*evidently.Options)) *evidently.CreateExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.CreateExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.CreateExperimentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFeature provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFeature(ctx context.Context, params *evidently.CreateFeatureInput, optFns ...func(*evidently.Options)) (*evidently.CreateFeatureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeature")
	}

	var r0 *evidently.CreateFeatureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateFeatureInput, ...func(*evidently.Options)) (*evidently.CreateFeatureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateFeatureInput, ...func(*evidently.Options)) *evidently.CreateFeatureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.CreateFeatureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.CreateFeatureInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLaunch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLaunch(ctx context.Context, params *evidently.CreateLaunchInput, optFns ...func(*evidently.Options)) (*evidently.CreateLaunchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLaunch")
	}

	var r0 *evidently.CreateLaunchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateLaunchInput, ...func(*evidently.Options)) (*evidently.CreateLaunchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateLaunchInput, ...func(*evidently.Options)) *evidently.CreateLaunchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.CreateLaunchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.CreateLaunchInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProject(ctx context.Context, params *evidently.CreateProjectInput, optFns ...func(*evidently.Options)) (*evidently.CreateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *evidently.CreateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateProjectInput, ...func(*evidently.Options)) (*evidently.CreateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateProjectInput, ...func(*evidently.Options)) *evidently.CreateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.CreateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.CreateProjectInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSegment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSegment(ctx context.Context, params *evidently.CreateSegmentInput, optFns ...func(*evidently.Options)) (*evidently.CreateSegmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSegment")
	}

	var r0 *evidently.CreateSegmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateSegmentInput, ...func(*evidently.Options)) (*evidently.CreateSegmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.CreateSegmentInput, ...func(*evidently.Options)) *evidently.CreateSegmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.CreateSegmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.CreateSegmentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteExperiment(ctx context.Context, params *evidently.DeleteExperimentInput, optFns ...func(*evidently.Options)) (*evidently.DeleteExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExperiment")
	}

	var r0 *evidently.DeleteExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteExperimentInput, ...func(*evidently.Options)) (*evidently.DeleteExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteExperimentInput, ...func(*evidently.Options)) *evidently.DeleteExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.DeleteExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.DeleteExperimentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFeature provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFeature(ctx context.Context, params *evidently.DeleteFeatureInput, optFns ...func(*evidently.Options)) (*evidently.DeleteFeatureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeature")
	}

	var r0 *evidently.DeleteFeatureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteFeatureInput, ...func(*evidently.Options)) (*evidently.DeleteFeatureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteFeatureInput, ...func(*evidently.Options)) *evidently.DeleteFeatureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.DeleteFeatureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.DeleteFeatureInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLaunch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLaunch(ctx context.Context, params *evidently.DeleteLaunchInput, optFns ...func(*evidently.Options)) (*evidently.DeleteLaunchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLaunch")
	}

	var r0 *evidently.DeleteLaunchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteLaunchInput, ...func(*evidently.Options)) (*evidently.DeleteLaunchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteLaunchInput, ...func(*evidently.Options)) *evidently.DeleteLaunchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.DeleteLaunchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.DeleteLaunchInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProject(ctx context.Context, params *evidently.DeleteProjectInput, optFns ...func(*evidently.Options)) (*evidently.DeleteProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 *evidently.DeleteProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteProjectInput, ...func(*evidently.Options)) (*evidently.DeleteProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteProjectInput, ...func(*evidently.Options)) *evidently.DeleteProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.DeleteProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.DeleteProjectInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSegment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSegment(ctx context.Context, params *evidently.DeleteSegmentInput, optFns ...func(*evidently.Options)) (*evidently.DeleteSegmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSegment")
	}

	var r0 *evidently.DeleteSegmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteSegmentInput, ...func(*evidently.Options)) (*evidently.DeleteSegmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.DeleteSegmentInput, ...func(*evidently.Options)) *evidently.DeleteSegmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.DeleteSegmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.DeleteSegmentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EvaluateFeature provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EvaluateFeature(ctx context.Context, params *evidently.EvaluateFeatureInput, optFns ...func(*evidently.Options)) (*evidently.EvaluateFeatureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EvaluateFeature")
	}

	var r0 *evidently.EvaluateFeatureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.EvaluateFeatureInput, ...func(*evidently.Options)) (*evidently.EvaluateFeatureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.EvaluateFeatureInput, ...func(*evidently.Options)) *evidently.EvaluateFeatureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.EvaluateFeatureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.EvaluateFeatureInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExperiment(ctx context.Context, params *evidently.GetExperimentInput, optFns ...func(*evidently.Options)) (*evidently.GetExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExperiment")
	}

	var r0 *evidently.GetExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetExperimentInput, ...func(*evidently.Options)) (*evidently.GetExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetExperimentInput, ...func(*evidently.Options)) *evidently.GetExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.GetExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.GetExperimentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetExperimentResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetExperimentResults(ctx context.Context, params *evidently.GetExperimentResultsInput, optFns ...func(*evidently.Options)) (*evidently.GetExperimentResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetExperimentResults")
	}

	var r0 *evidently.GetExperimentResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetExperimentResultsInput, ...func(*evidently.Options)) (*evidently.GetExperimentResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetExperimentResultsInput, ...func(*evidently.Options)) *evidently.GetExperimentResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.GetExperimentResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.GetExperimentResultsInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFeature provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFeature(ctx context.Context, params *evidently.GetFeatureInput, optFns ...func(*evidently.Options)) (*evidently.GetFeatureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFeature")
	}

	var r0 *evidently.GetFeatureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetFeatureInput, ...func(*evidently.Options)) (*evidently.GetFeatureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetFeatureInput, ...func(*evidently.Options)) *evidently.GetFeatureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.GetFeatureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.GetFeatureInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLaunch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLaunch(ctx context.Context, params *evidently.GetLaunchInput, optFns ...func(*evidently.Options)) (*evidently.GetLaunchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLaunch")
	}

	var r0 *evidently.GetLaunchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetLaunchInput, ...func(*evidently.Options)) (*evidently.GetLaunchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetLaunchInput, ...func(*evidently.Options)) *evidently.GetLaunchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.GetLaunchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.GetLaunchInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetProject(ctx context.Context, params *evidently.GetProjectInput, optFns ...func(*evidently.Options)) (*evidently.GetProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetProject")
	}

	var r0 *evidently.GetProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetProjectInput, ...func(*evidently.Options)) (*evidently.GetProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetProjectInput, ...func(*evidently.Options)) *evidently.GetProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.GetProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.GetProjectInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSegment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSegment(ctx context.Context, params *evidently.GetSegmentInput, optFns ...func(*evidently.Options)) (*evidently.GetSegmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSegment")
	}

	var r0 *evidently.GetSegmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetSegmentInput, ...func(*evidently.Options)) (*evidently.GetSegmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.GetSegmentInput, ...func(*evidently.Options)) *evidently.GetSegmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.GetSegmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.GetSegmentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExperiments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExperiments(ctx context.Context, params *evidently.ListExperimentsInput, optFns ...func(*evidently.Options)) (*evidently.ListExperimentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExperiments")
	}

	var r0 *evidently.ListExperimentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListExperimentsInput, ...func(*evidently.Options)) (*evidently.ListExperimentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListExperimentsInput, ...func(*evidently.Options)) *evidently.ListExperimentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.ListExperimentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.ListExperimentsInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeatures provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFeatures(ctx context.Context, params *evidently.ListFeaturesInput, optFns ...func(*evidently.Options)) (*evidently.ListFeaturesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatures")
	}

	var r0 *evidently.ListFeaturesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListFeaturesInput, ...func(*evidently.Options)) (*evidently.ListFeaturesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListFeaturesInput, ...func(*evidently.Options)) *evidently.ListFeaturesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.ListFeaturesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.ListFeaturesInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLaunches provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLaunches(ctx context.Context, params *evidently.ListLaunchesInput, optFns ...func(*evidently.Options)) (*evidently.ListLaunchesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLaunches")
	}

	var r0 *evidently.ListLaunchesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListLaunchesInput, ...func(*evidently.Options)) (*evidently.ListLaunchesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListLaunchesInput, ...func(*evidently.Options)) *evidently.ListLaunchesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.ListLaunchesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.ListLaunchesInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProjects(ctx context.Context, params *evidently.ListProjectsInput, optFns ...func(*evidently.Options)) (*evidently.ListProjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *evidently.ListProjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListProjectsInput, ...func(*evidently.Options)) (*evidently.ListProjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListProjectsInput, ...func(*evidently.Options)) *evidently.ListProjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.ListProjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.ListProjectsInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSegmentReferences provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSegmentReferences(ctx context.Context, params *evidently.ListSegmentReferencesInput, optFns ...func(*evidently.Options)) (*evidently.ListSegmentReferencesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSegmentReferences")
	}

	var r0 *evidently.ListSegmentReferencesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListSegmentReferencesInput, ...func(*evidently.Options)) (*evidently.ListSegmentReferencesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListSegmentReferencesInput, ...func(*evidently.Options)) *evidently.ListSegmentReferencesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.ListSegmentReferencesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.ListSegmentReferencesInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSegments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSegments(ctx context.Context, params *evidently.ListSegmentsInput, optFns ...func(*evidently.Options)) (*evidently.ListSegmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSegments")
	}

	var r0 *evidently.ListSegmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListSegmentsInput, ...func(*evidently.Options)) (*evidently.ListSegmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListSegmentsInput, ...func(*evidently.Options)) *evidently.ListSegmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.ListSegmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.ListSegmentsInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *evidently.ListTagsForResourceInput, optFns ...func(*evidently.Options)) (*evidently.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *evidently.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListTagsForResourceInput, ...func(*evidently.Options)) (*evidently.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.ListTagsForResourceInput, ...func(*evidently.Options)) *evidently.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.ListTagsForResourceInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() evidently.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 evidently.Options
	if rf, ok := ret.Get(0).(func() evidently.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(evidently.Options)
	}

	return r0
}

// PutProjectEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutProjectEvents(ctx context.Context, params *evidently.PutProjectEventsInput, optFns ...func(*evidently.Options)) (*evidently.PutProjectEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutProjectEvents")
	}

	var r0 *evidently.PutProjectEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.PutProjectEventsInput, ...func(*evidently.Options)) (*evidently.PutProjectEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.PutProjectEventsInput, ...func(*evidently.Options)) *evidently.PutProjectEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.PutProjectEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.PutProjectEventsInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartExperiment(ctx context.Context, params *evidently.StartExperimentInput, optFns ...func(*evidently.Options)) (*evidently.StartExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartExperiment")
	}

	var r0 *evidently.StartExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.StartExperimentInput, ...func(*evidently.Options)) (*evidently.StartExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.StartExperimentInput, ...func(*evidently.Options)) *evidently.StartExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.StartExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.StartExperimentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartLaunch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartLaunch(ctx context.Context, params *evidently.StartLaunchInput, optFns ...func(*evidently.Options)) (*evidently.StartLaunchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartLaunch")
	}

	var r0 *evidently.StartLaunchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.StartLaunchInput, ...func(*evidently.Options)) (*evidently.StartLaunchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.StartLaunchInput, ...func(*evidently.Options)) *evidently.StartLaunchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.StartLaunchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.StartLaunchInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopExperiment(ctx context.Context, params *evidently.StopExperimentInput, optFns ...func(*evidently.Options)) (*evidently.StopExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopExperiment")
	}

	var r0 *evidently.StopExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.StopExperimentInput, ...func(*evidently.Options)) (*evidently.StopExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.StopExperimentInput, ...func(*evidently.Options)) *evidently.StopExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.StopExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.StopExperimentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopLaunch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopLaunch(ctx context.Context, params *evidently.StopLaunchInput, optFns ...func(*evidently.Options)) (*evidently.StopLaunchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopLaunch")
	}

	var r0 *evidently.StopLaunchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.StopLaunchInput, ...func(*evidently.Options)) (*evidently.StopLaunchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.StopLaunchInput, ...func(*evidently.Options)) *evidently.StopLaunchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.StopLaunchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.StopLaunchInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *evidently.TagResourceInput, optFns ...func(*evidently.Options)) (*evidently.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *evidently.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.TagResourceInput, ...func(*evidently.Options)) (*evidently.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.TagResourceInput, ...func(*evidently.Options)) *evidently.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.TagResourceInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestSegmentPattern provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestSegmentPattern(ctx context.Context, params *evidently.TestSegmentPatternInput, optFns ...func(*evidently.Options)) (*evidently.TestSegmentPatternOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestSegmentPattern")
	}

	var r0 *evidently.TestSegmentPatternOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.TestSegmentPatternInput, ...func(*evidently.Options)) (*evidently.TestSegmentPatternOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.TestSegmentPatternInput, ...func(*evidently.Options)) *evidently.TestSegmentPatternOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.TestSegmentPatternOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.TestSegmentPatternInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *evidently.UntagResourceInput, optFns ...func(*evidently.Options)) (*evidently.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *evidently.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UntagResourceInput, ...func(*evidently.Options)) (*evidently.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UntagResourceInput, ...func(*evidently.Options)) *evidently.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.UntagResourceInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateExperiment(ctx context.Context, params *evidently.UpdateExperimentInput, optFns ...func(*evidently.Options)) (*evidently.UpdateExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExperiment")
	}

	var r0 *evidently.UpdateExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateExperimentInput, ...func(*evidently.Options)) (*evidently.UpdateExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateExperimentInput, ...func(*evidently.Options)) *evidently.UpdateExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.UpdateExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.UpdateExperimentInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFeature provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFeature(ctx context.Context, params *evidently.UpdateFeatureInput, optFns ...func(*evidently.Options)) (*evidently.UpdateFeatureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeature")
	}

	var r0 *evidently.UpdateFeatureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateFeatureInput, ...func(*evidently.Options)) (*evidently.UpdateFeatureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateFeatureInput, ...func(*evidently.Options)) *evidently.UpdateFeatureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.UpdateFeatureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.UpdateFeatureInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLaunch provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLaunch(ctx context.Context, params *evidently.UpdateLaunchInput, optFns ...func(*evidently.Options)) (*evidently.UpdateLaunchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLaunch")
	}

	var r0 *evidently.UpdateLaunchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateLaunchInput, ...func(*evidently.Options)) (*evidently.UpdateLaunchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateLaunchInput, ...func(*evidently.Options)) *evidently.UpdateLaunchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.UpdateLaunchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.UpdateLaunchInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProject(ctx context.Context, params *evidently.UpdateProjectInput, optFns ...func(*evidently.Options)) (*evidently.UpdateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *evidently.UpdateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateProjectInput, ...func(*evidently.Options)) (*evidently.UpdateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateProjectInput, ...func(*evidently.Options)) *evidently.UpdateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.UpdateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.UpdateProjectInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProjectDataDelivery provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProjectDataDelivery(ctx context.Context, params *evidently.UpdateProjectDataDeliveryInput, optFns ...func(*evidently.Options)) (*evidently.UpdateProjectDataDeliveryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProjectDataDelivery")
	}

	var r0 *evidently.UpdateProjectDataDeliveryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateProjectDataDeliveryInput, ...func(*evidently.Options)) (*evidently.UpdateProjectDataDeliveryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *evidently.UpdateProjectDataDeliveryInput, ...func(*evidently.Options)) *evidently.UpdateProjectDataDeliveryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*evidently.UpdateProjectDataDeliveryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *evidently.UpdateProjectDataDeliveryInput, ...func(*evidently.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
