// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	personalizeevents "github.com/aws/aws-sdk-go-v2/service/personalizeevents"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() personalizeevents.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 personalizeevents.Options
	if rf, ok := ret.Get(0).(func() personalizeevents.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(personalizeevents.Options)
	}

	return r0
}

// PutActionInteractions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutActionInteractions(ctx context.Context, params *personalizeevents.PutActionInteractionsInput, optFns ...func(*personalizeevents.Options)) (*personalizeevents.PutActionInteractionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutActionInteractions")
	}

	var r0 *personalizeevents.PutActionInteractionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutActionInteractionsInput, ...func(*personalizeevents.Options)) (*personalizeevents.PutActionInteractionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutActionInteractionsInput, ...func(*personalizeevents.Options)) *personalizeevents.PutActionInteractionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalizeevents.PutActionInteractionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalizeevents.PutActionInteractionsInput, ...func(*personalizeevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutActions(ctx context.Context, params *personalizeevents.PutActionsInput, optFns ...func(*personalizeevents.Options)) (*personalizeevents.PutActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutActions")
	}

	var r0 *personalizeevents.PutActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutActionsInput, ...func(*personalizeevents.Options)) (*personalizeevents.PutActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutActionsInput, ...func(*personalizeevents.Options)) *personalizeevents.PutActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalizeevents.PutActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalizeevents.PutActionsInput, ...func(*personalizeevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEvents(ctx context.Context, params *personalizeevents.PutEventsInput, optFns ...func(*personalizeevents.Options)) (*personalizeevents.PutEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEvents")
	}

	var r0 *personalizeevents.PutEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutEventsInput, ...func(*personalizeevents.Options)) (*personalizeevents.PutEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutEventsInput, ...func(*personalizeevents.Options)) *personalizeevents.PutEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalizeevents.PutEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalizeevents.PutEventsInput, ...func(*personalizeevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutItems provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutItems(ctx context.Context, params *personalizeevents.PutItemsInput, optFns ...func(*personalizeevents.Options)) (*personalizeevents.PutItemsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutItems")
	}

	var r0 *personalizeevents.PutItemsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutItemsInput, ...func(*personalizeevents.Options)) (*personalizeevents.PutItemsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutItemsInput, ...func(*personalizeevents.Options)) *personalizeevents.PutItemsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalizeevents.PutItemsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalizeevents.PutItemsInput, ...func(*personalizeevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutUsers(ctx context.Context, params *personalizeevents.PutUsersInput, optFns ...func(*personalizeevents.Options)) (*personalizeevents.PutUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutUsers")
	}

	var r0 *personalizeevents.PutUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutUsersInput, ...func(*personalizeevents.Options)) (*personalizeevents.PutUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *personalizeevents.PutUsersInput, ...func(*personalizeevents.Options)) *personalizeevents.PutUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*personalizeevents.PutUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *personalizeevents.PutUsersInput, ...func(*personalizeevents.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
