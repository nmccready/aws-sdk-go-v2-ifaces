// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	databasemigrationservice "github.com/aws/aws-sdk-go-v2/service/databasemigrationservice"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddTagsToResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTagsToResource(ctx context.Context, params *databasemigrationservice.AddTagsToResourceInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.AddTagsToResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTagsToResource")
	}

	var r0 *databasemigrationservice.AddTagsToResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.AddTagsToResourceInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.AddTagsToResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.AddTagsToResourceInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.AddTagsToResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.AddTagsToResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.AddTagsToResourceInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ApplyPendingMaintenanceAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ApplyPendingMaintenanceAction(ctx context.Context, params *databasemigrationservice.ApplyPendingMaintenanceActionInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ApplyPendingMaintenanceAction")
	}

	var r0 *databasemigrationservice.ApplyPendingMaintenanceActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ApplyPendingMaintenanceActionInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ApplyPendingMaintenanceActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ApplyPendingMaintenanceActionInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ApplyPendingMaintenanceActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ApplyPendingMaintenanceActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ApplyPendingMaintenanceActionInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchStartRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchStartRecommendations(ctx context.Context, params *databasemigrationservice.BatchStartRecommendationsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.BatchStartRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchStartRecommendations")
	}

	var r0 *databasemigrationservice.BatchStartRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.BatchStartRecommendationsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.BatchStartRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.BatchStartRecommendationsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.BatchStartRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.BatchStartRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.BatchStartRecommendationsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelReplicationTaskAssessmentRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelReplicationTaskAssessmentRun(ctx context.Context, params *databasemigrationservice.CancelReplicationTaskAssessmentRunInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelReplicationTaskAssessmentRun")
	}

	var r0 *databasemigrationservice.CancelReplicationTaskAssessmentRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CancelReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CancelReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CancelReplicationTaskAssessmentRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CancelReplicationTaskAssessmentRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CancelReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataProvider(ctx context.Context, params *databasemigrationservice.CreateDataProviderInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateDataProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataProvider")
	}

	var r0 *databasemigrationservice.CreateDataProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateDataProviderInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateDataProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateDataProviderInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateDataProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateDataProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateDataProviderInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEndpoint(ctx context.Context, params *databasemigrationservice.CreateEndpointInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEndpoint")
	}

	var r0 *databasemigrationservice.CreateEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateEndpointInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateEndpointInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateEndpointInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEventSubscription(ctx context.Context, params *databasemigrationservice.CreateEventSubscriptionInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEventSubscription")
	}

	var r0 *databasemigrationservice.CreateEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateEventSubscriptionInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateEventSubscriptionInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateEventSubscriptionInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFleetAdvisorCollector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFleetAdvisorCollector(ctx context.Context, params *databasemigrationservice.CreateFleetAdvisorCollectorInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateFleetAdvisorCollectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFleetAdvisorCollector")
	}

	var r0 *databasemigrationservice.CreateFleetAdvisorCollectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateFleetAdvisorCollectorInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateFleetAdvisorCollectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateFleetAdvisorCollectorInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateFleetAdvisorCollectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateFleetAdvisorCollectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateFleetAdvisorCollectorInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInstanceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInstanceProfile(ctx context.Context, params *databasemigrationservice.CreateInstanceProfileInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateInstanceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInstanceProfile")
	}

	var r0 *databasemigrationservice.CreateInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateInstanceProfileInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateInstanceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateInstanceProfileInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateInstanceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateInstanceProfileInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMigrationProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMigrationProject(ctx context.Context, params *databasemigrationservice.CreateMigrationProjectInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateMigrationProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMigrationProject")
	}

	var r0 *databasemigrationservice.CreateMigrationProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateMigrationProjectInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateMigrationProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateMigrationProjectInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateMigrationProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateMigrationProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateMigrationProjectInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationConfig(ctx context.Context, params *databasemigrationservice.CreateReplicationConfigInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateReplicationConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationConfig")
	}

	var r0 *databasemigrationservice.CreateReplicationConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateReplicationConfigInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateReplicationConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateReplicationConfigInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateReplicationConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateReplicationConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateReplicationConfigInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationInstance(ctx context.Context, params *databasemigrationservice.CreateReplicationInstanceInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateReplicationInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationInstance")
	}

	var r0 *databasemigrationservice.CreateReplicationInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateReplicationInstanceInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateReplicationInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateReplicationInstanceInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateReplicationInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateReplicationInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateReplicationInstanceInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationSubnetGroup(ctx context.Context, params *databasemigrationservice.CreateReplicationSubnetGroupInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationSubnetGroup")
	}

	var r0 *databasemigrationservice.CreateReplicationSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateReplicationSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateReplicationSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateReplicationSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateReplicationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateReplicationTask(ctx context.Context, params *databasemigrationservice.CreateReplicationTaskInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateReplicationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateReplicationTask")
	}

	var r0 *databasemigrationservice.CreateReplicationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateReplicationTaskInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.CreateReplicationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.CreateReplicationTaskInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.CreateReplicationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.CreateReplicationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.CreateReplicationTaskInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCertificate(ctx context.Context, params *databasemigrationservice.DeleteCertificateInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCertificate")
	}

	var r0 *databasemigrationservice.DeleteCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteCertificateInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteCertificateInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteCertificateInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnection(ctx context.Context, params *databasemigrationservice.DeleteConnectionInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnection")
	}

	var r0 *databasemigrationservice.DeleteConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteConnectionInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteConnectionInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteConnectionInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataProvider(ctx context.Context, params *databasemigrationservice.DeleteDataProviderInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteDataProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataProvider")
	}

	var r0 *databasemigrationservice.DeleteDataProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteDataProviderInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteDataProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteDataProviderInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteDataProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteDataProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteDataProviderInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEndpoint(ctx context.Context, params *databasemigrationservice.DeleteEndpointInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpoint")
	}

	var r0 *databasemigrationservice.DeleteEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteEndpointInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteEndpointInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteEndpointInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEventSubscription(ctx context.Context, params *databasemigrationservice.DeleteEventSubscriptionInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEventSubscription")
	}

	var r0 *databasemigrationservice.DeleteEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteEventSubscriptionInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteEventSubscriptionInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteEventSubscriptionInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFleetAdvisorCollector provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFleetAdvisorCollector(ctx context.Context, params *databasemigrationservice.DeleteFleetAdvisorCollectorInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteFleetAdvisorCollectorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFleetAdvisorCollector")
	}

	var r0 *databasemigrationservice.DeleteFleetAdvisorCollectorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteFleetAdvisorCollectorInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteFleetAdvisorCollectorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteFleetAdvisorCollectorInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteFleetAdvisorCollectorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteFleetAdvisorCollectorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteFleetAdvisorCollectorInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFleetAdvisorDatabases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFleetAdvisorDatabases(ctx context.Context, params *databasemigrationservice.DeleteFleetAdvisorDatabasesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteFleetAdvisorDatabasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFleetAdvisorDatabases")
	}

	var r0 *databasemigrationservice.DeleteFleetAdvisorDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteFleetAdvisorDatabasesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteFleetAdvisorDatabasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteFleetAdvisorDatabasesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteFleetAdvisorDatabasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteFleetAdvisorDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteFleetAdvisorDatabasesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInstanceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInstanceProfile(ctx context.Context, params *databasemigrationservice.DeleteInstanceProfileInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteInstanceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInstanceProfile")
	}

	var r0 *databasemigrationservice.DeleteInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteInstanceProfileInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteInstanceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteInstanceProfileInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteInstanceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteInstanceProfileInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMigrationProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMigrationProject(ctx context.Context, params *databasemigrationservice.DeleteMigrationProjectInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteMigrationProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMigrationProject")
	}

	var r0 *databasemigrationservice.DeleteMigrationProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteMigrationProjectInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteMigrationProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteMigrationProjectInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteMigrationProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteMigrationProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteMigrationProjectInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationConfig(ctx context.Context, params *databasemigrationservice.DeleteReplicationConfigInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationConfig")
	}

	var r0 *databasemigrationservice.DeleteReplicationConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationConfigInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationConfigInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteReplicationConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteReplicationConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteReplicationConfigInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationInstance(ctx context.Context, params *databasemigrationservice.DeleteReplicationInstanceInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationInstance")
	}

	var r0 *databasemigrationservice.DeleteReplicationInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationInstanceInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationInstanceInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteReplicationInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteReplicationInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteReplicationInstanceInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationSubnetGroup(ctx context.Context, params *databasemigrationservice.DeleteReplicationSubnetGroupInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationSubnetGroup")
	}

	var r0 *databasemigrationservice.DeleteReplicationSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteReplicationSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteReplicationSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationTask(ctx context.Context, params *databasemigrationservice.DeleteReplicationTaskInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationTask")
	}

	var r0 *databasemigrationservice.DeleteReplicationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationTaskInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationTaskInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteReplicationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteReplicationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteReplicationTaskInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplicationTaskAssessmentRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteReplicationTaskAssessmentRun(ctx context.Context, params *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationTaskAssessmentRun")
	}

	var r0 *databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DeleteReplicationTaskAssessmentRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DeleteReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAccountAttributes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAccountAttributes(ctx context.Context, params *databasemigrationservice.DescribeAccountAttributesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeAccountAttributesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAccountAttributes")
	}

	var r0 *databasemigrationservice.DescribeAccountAttributesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeAccountAttributesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeAccountAttributesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeAccountAttributesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeAccountAttributesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeAccountAttributesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeAccountAttributesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApplicableIndividualAssessments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApplicableIndividualAssessments(ctx context.Context, params *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApplicableIndividualAssessments")
	}

	var r0 *databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeApplicableIndividualAssessmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeApplicableIndividualAssessmentsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCertificates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCertificates(ctx context.Context, params *databasemigrationservice.DescribeCertificatesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeCertificatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCertificates")
	}

	var r0 *databasemigrationservice.DescribeCertificatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeCertificatesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeCertificatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeCertificatesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeCertificatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeCertificatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeCertificatesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConnections(ctx context.Context, params *databasemigrationservice.DescribeConnectionsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConnections")
	}

	var r0 *databasemigrationservice.DescribeConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeConnectionsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeConnectionsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeConnectionsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeConversionConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeConversionConfiguration(ctx context.Context, params *databasemigrationservice.DescribeConversionConfigurationInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeConversionConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeConversionConfiguration")
	}

	var r0 *databasemigrationservice.DescribeConversionConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeConversionConfigurationInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeConversionConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeConversionConfigurationInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeConversionConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeConversionConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeConversionConfigurationInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataProviders provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataProviders(ctx context.Context, params *databasemigrationservice.DescribeDataProvidersInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeDataProvidersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataProviders")
	}

	var r0 *databasemigrationservice.DescribeDataProvidersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeDataProvidersInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeDataProvidersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeDataProvidersInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeDataProvidersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeDataProvidersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeDataProvidersInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpointSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEndpointSettings(ctx context.Context, params *databasemigrationservice.DescribeEndpointSettingsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEndpointSettings")
	}

	var r0 *databasemigrationservice.DescribeEndpointSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEndpointSettingsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEndpointSettingsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeEndpointSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeEndpointSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeEndpointSettingsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpointTypes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEndpointTypes(ctx context.Context, params *databasemigrationservice.DescribeEndpointTypesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointTypesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEndpointTypes")
	}

	var r0 *databasemigrationservice.DescribeEndpointTypesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEndpointTypesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointTypesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEndpointTypesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeEndpointTypesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeEndpointTypesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeEndpointTypesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEndpoints(ctx context.Context, params *databasemigrationservice.DescribeEndpointsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEndpoints")
	}

	var r0 *databasemigrationservice.DescribeEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEndpointsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEndpointsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeEndpointsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEngineVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEngineVersions(ctx context.Context, params *databasemigrationservice.DescribeEngineVersionsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEngineVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEngineVersions")
	}

	var r0 *databasemigrationservice.DescribeEngineVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEngineVersionsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEngineVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEngineVersionsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeEngineVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeEngineVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeEngineVersionsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventCategories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventCategories(ctx context.Context, params *databasemigrationservice.DescribeEventCategoriesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventCategoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventCategories")
	}

	var r0 *databasemigrationservice.DescribeEventCategoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEventCategoriesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventCategoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEventCategoriesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeEventCategoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeEventCategoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeEventCategoriesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEventSubscriptions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEventSubscriptions(ctx context.Context, params *databasemigrationservice.DescribeEventSubscriptionsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEventSubscriptions")
	}

	var r0 *databasemigrationservice.DescribeEventSubscriptionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEventSubscriptionsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventSubscriptionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEventSubscriptionsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeEventSubscriptionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeEventSubscriptionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeEventSubscriptionsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEvents(ctx context.Context, params *databasemigrationservice.DescribeEventsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEvents")
	}

	var r0 *databasemigrationservice.DescribeEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEventsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeEventsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeEventsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExtensionPackAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeExtensionPackAssociations(ctx context.Context, params *databasemigrationservice.DescribeExtensionPackAssociationsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeExtensionPackAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeExtensionPackAssociations")
	}

	var r0 *databasemigrationservice.DescribeExtensionPackAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeExtensionPackAssociationsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeExtensionPackAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeExtensionPackAssociationsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeExtensionPackAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeExtensionPackAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeExtensionPackAssociationsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetAdvisorCollectors provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFleetAdvisorCollectors(ctx context.Context, params *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFleetAdvisorCollectors")
	}

	var r0 *databasemigrationservice.DescribeFleetAdvisorCollectorsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeFleetAdvisorCollectorsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeFleetAdvisorCollectorsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorCollectorsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetAdvisorDatabases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFleetAdvisorDatabases(ctx context.Context, params *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFleetAdvisorDatabases")
	}

	var r0 *databasemigrationservice.DescribeFleetAdvisorDatabasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeFleetAdvisorDatabasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeFleetAdvisorDatabasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorDatabasesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetAdvisorLsaAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFleetAdvisorLsaAnalysis(ctx context.Context, params *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFleetAdvisorLsaAnalysis")
	}

	var r0 *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeFleetAdvisorLsaAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorLsaAnalysisInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetAdvisorSchemaObjectSummary provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFleetAdvisorSchemaObjectSummary(ctx context.Context, params *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFleetAdvisorSchemaObjectSummary")
	}

	var r0 *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorSchemaObjectSummaryInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFleetAdvisorSchemas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFleetAdvisorSchemas(ctx context.Context, params *databasemigrationservice.DescribeFleetAdvisorSchemasInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorSchemasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFleetAdvisorSchemas")
	}

	var r0 *databasemigrationservice.DescribeFleetAdvisorSchemasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorSchemasInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeFleetAdvisorSchemasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorSchemasInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeFleetAdvisorSchemasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeFleetAdvisorSchemasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeFleetAdvisorSchemasInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInstanceProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInstanceProfiles(ctx context.Context, params *databasemigrationservice.DescribeInstanceProfilesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeInstanceProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInstanceProfiles")
	}

	var r0 *databasemigrationservice.DescribeInstanceProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeInstanceProfilesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeInstanceProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeInstanceProfilesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeInstanceProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeInstanceProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeInstanceProfilesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetadataModelAssessments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMetadataModelAssessments(ctx context.Context, params *databasemigrationservice.DescribeMetadataModelAssessmentsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelAssessmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMetadataModelAssessments")
	}

	var r0 *databasemigrationservice.DescribeMetadataModelAssessmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelAssessmentsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelAssessmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelAssessmentsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeMetadataModelAssessmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeMetadataModelAssessmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeMetadataModelAssessmentsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetadataModelConversions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMetadataModelConversions(ctx context.Context, params *databasemigrationservice.DescribeMetadataModelConversionsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelConversionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMetadataModelConversions")
	}

	var r0 *databasemigrationservice.DescribeMetadataModelConversionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelConversionsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelConversionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelConversionsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeMetadataModelConversionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeMetadataModelConversionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeMetadataModelConversionsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetadataModelExportsAsScript provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMetadataModelExportsAsScript(ctx context.Context, params *databasemigrationservice.DescribeMetadataModelExportsAsScriptInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelExportsAsScriptOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMetadataModelExportsAsScript")
	}

	var r0 *databasemigrationservice.DescribeMetadataModelExportsAsScriptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelExportsAsScriptInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelExportsAsScriptOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelExportsAsScriptInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeMetadataModelExportsAsScriptOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeMetadataModelExportsAsScriptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeMetadataModelExportsAsScriptInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetadataModelExportsToTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMetadataModelExportsToTarget(ctx context.Context, params *databasemigrationservice.DescribeMetadataModelExportsToTargetInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelExportsToTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMetadataModelExportsToTarget")
	}

	var r0 *databasemigrationservice.DescribeMetadataModelExportsToTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelExportsToTargetInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelExportsToTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelExportsToTargetInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeMetadataModelExportsToTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeMetadataModelExportsToTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeMetadataModelExportsToTargetInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMetadataModelImports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMetadataModelImports(ctx context.Context, params *databasemigrationservice.DescribeMetadataModelImportsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelImportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMetadataModelImports")
	}

	var r0 *databasemigrationservice.DescribeMetadataModelImportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelImportsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMetadataModelImportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMetadataModelImportsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeMetadataModelImportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeMetadataModelImportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeMetadataModelImportsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMigrationProjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMigrationProjects(ctx context.Context, params *databasemigrationservice.DescribeMigrationProjectsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMigrationProjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMigrationProjects")
	}

	var r0 *databasemigrationservice.DescribeMigrationProjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMigrationProjectsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeMigrationProjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeMigrationProjectsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeMigrationProjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeMigrationProjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeMigrationProjectsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrderableReplicationInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrderableReplicationInstances(ctx context.Context, params *databasemigrationservice.DescribeOrderableReplicationInstancesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrderableReplicationInstances")
	}

	var r0 *databasemigrationservice.DescribeOrderableReplicationInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeOrderableReplicationInstancesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeOrderableReplicationInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeOrderableReplicationInstancesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeOrderableReplicationInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeOrderableReplicationInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeOrderableReplicationInstancesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePendingMaintenanceActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePendingMaintenanceActions(ctx context.Context, params *databasemigrationservice.DescribePendingMaintenanceActionsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePendingMaintenanceActions")
	}

	var r0 *databasemigrationservice.DescribePendingMaintenanceActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribePendingMaintenanceActionsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribePendingMaintenanceActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribePendingMaintenanceActionsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribePendingMaintenanceActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribePendingMaintenanceActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribePendingMaintenanceActionsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRecommendationLimitations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRecommendationLimitations(ctx context.Context, params *databasemigrationservice.DescribeRecommendationLimitationsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeRecommendationLimitationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRecommendationLimitations")
	}

	var r0 *databasemigrationservice.DescribeRecommendationLimitationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeRecommendationLimitationsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeRecommendationLimitationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeRecommendationLimitationsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeRecommendationLimitationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeRecommendationLimitationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeRecommendationLimitationsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRecommendations(ctx context.Context, params *databasemigrationservice.DescribeRecommendationsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRecommendations")
	}

	var r0 *databasemigrationservice.DescribeRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeRecommendationsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeRecommendationsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeRecommendationsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRefreshSchemasStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRefreshSchemasStatus(ctx context.Context, params *databasemigrationservice.DescribeRefreshSchemasStatusInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRefreshSchemasStatus")
	}

	var r0 *databasemigrationservice.DescribeRefreshSchemasStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeRefreshSchemasStatusInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeRefreshSchemasStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeRefreshSchemasStatusInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeRefreshSchemasStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeRefreshSchemasStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeRefreshSchemasStatusInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationConfigs(ctx context.Context, params *databasemigrationservice.DescribeReplicationConfigsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationConfigs")
	}

	var r0 *databasemigrationservice.DescribeReplicationConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationConfigsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationConfigsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationConfigsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationInstanceTaskLogs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationInstanceTaskLogs(ctx context.Context, params *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationInstanceTaskLogs")
	}

	var r0 *databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationInstanceTaskLogsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationInstanceTaskLogsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationInstances(ctx context.Context, params *databasemigrationservice.DescribeReplicationInstancesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationInstances")
	}

	var r0 *databasemigrationservice.DescribeReplicationInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationInstancesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationInstancesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationInstancesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationSubnetGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationSubnetGroups(ctx context.Context, params *databasemigrationservice.DescribeReplicationSubnetGroupsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationSubnetGroups")
	}

	var r0 *databasemigrationservice.DescribeReplicationSubnetGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationSubnetGroupsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationSubnetGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationSubnetGroupsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationSubnetGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationSubnetGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationSubnetGroupsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationTableStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationTableStatistics(ctx context.Context, params *databasemigrationservice.DescribeReplicationTableStatisticsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTableStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationTableStatistics")
	}

	var r0 *databasemigrationservice.DescribeReplicationTableStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTableStatisticsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTableStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTableStatisticsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationTableStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationTableStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationTableStatisticsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationTaskAssessmentResults provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationTaskAssessmentResults(ctx context.Context, params *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationTaskAssessmentResults")
	}

	var r0 *databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationTaskAssessmentResultsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskAssessmentResultsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationTaskAssessmentRuns provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationTaskAssessmentRuns(ctx context.Context, params *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationTaskAssessmentRuns")
	}

	var r0 *databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationTaskAssessmentRunsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskAssessmentRunsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationTaskIndividualAssessments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationTaskIndividualAssessments(ctx context.Context, params *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationTaskIndividualAssessments")
	}

	var r0 *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationTaskIndividualAssessmentsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplicationTasks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplicationTasks(ctx context.Context, params *databasemigrationservice.DescribeReplicationTasksInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTasksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplicationTasks")
	}

	var r0 *databasemigrationservice.DescribeReplicationTasksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTasksInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationTasksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationTasksInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationTasksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationTasksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationTasksInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReplications provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReplications(ctx context.Context, params *databasemigrationservice.DescribeReplicationsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReplications")
	}

	var r0 *databasemigrationservice.DescribeReplicationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeReplicationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeReplicationsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeReplicationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeReplicationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeReplicationsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSchemas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSchemas(ctx context.Context, params *databasemigrationservice.DescribeSchemasInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeSchemasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSchemas")
	}

	var r0 *databasemigrationservice.DescribeSchemasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeSchemasInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeSchemasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeSchemasInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeSchemasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeSchemasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeSchemasInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTableStatistics provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTableStatistics(ctx context.Context, params *databasemigrationservice.DescribeTableStatisticsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeTableStatisticsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTableStatistics")
	}

	var r0 *databasemigrationservice.DescribeTableStatisticsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeTableStatisticsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.DescribeTableStatisticsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.DescribeTableStatisticsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.DescribeTableStatisticsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.DescribeTableStatisticsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.DescribeTableStatisticsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportMetadataModelAssessment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportMetadataModelAssessment(ctx context.Context, params *databasemigrationservice.ExportMetadataModelAssessmentInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ExportMetadataModelAssessmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportMetadataModelAssessment")
	}

	var r0 *databasemigrationservice.ExportMetadataModelAssessmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ExportMetadataModelAssessmentInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ExportMetadataModelAssessmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ExportMetadataModelAssessmentInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ExportMetadataModelAssessmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ExportMetadataModelAssessmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ExportMetadataModelAssessmentInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportCertificate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportCertificate(ctx context.Context, params *databasemigrationservice.ImportCertificateInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ImportCertificateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportCertificate")
	}

	var r0 *databasemigrationservice.ImportCertificateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ImportCertificateInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ImportCertificateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ImportCertificateInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ImportCertificateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ImportCertificateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ImportCertificateInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *databasemigrationservice.ListTagsForResourceInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *databasemigrationservice.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ListTagsForResourceInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ListTagsForResourceInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ListTagsForResourceInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyConversionConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyConversionConfiguration(ctx context.Context, params *databasemigrationservice.ModifyConversionConfigurationInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyConversionConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyConversionConfiguration")
	}

	var r0 *databasemigrationservice.ModifyConversionConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyConversionConfigurationInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyConversionConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyConversionConfigurationInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyConversionConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyConversionConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyConversionConfigurationInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyDataProvider provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyDataProvider(ctx context.Context, params *databasemigrationservice.ModifyDataProviderInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyDataProviderOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyDataProvider")
	}

	var r0 *databasemigrationservice.ModifyDataProviderOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyDataProviderInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyDataProviderOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyDataProviderInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyDataProviderOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyDataProviderOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyDataProviderInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyEndpoint(ctx context.Context, params *databasemigrationservice.ModifyEndpointInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyEndpoint")
	}

	var r0 *databasemigrationservice.ModifyEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyEndpointInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyEndpointInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyEndpointInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyEventSubscription provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyEventSubscription(ctx context.Context, params *databasemigrationservice.ModifyEventSubscriptionInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyEventSubscriptionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyEventSubscription")
	}

	var r0 *databasemigrationservice.ModifyEventSubscriptionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyEventSubscriptionInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyEventSubscriptionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyEventSubscriptionInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyEventSubscriptionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyEventSubscriptionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyEventSubscriptionInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyInstanceProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyInstanceProfile(ctx context.Context, params *databasemigrationservice.ModifyInstanceProfileInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyInstanceProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyInstanceProfile")
	}

	var r0 *databasemigrationservice.ModifyInstanceProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyInstanceProfileInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyInstanceProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyInstanceProfileInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyInstanceProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyInstanceProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyInstanceProfileInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyMigrationProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyMigrationProject(ctx context.Context, params *databasemigrationservice.ModifyMigrationProjectInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyMigrationProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyMigrationProject")
	}

	var r0 *databasemigrationservice.ModifyMigrationProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyMigrationProjectInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyMigrationProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyMigrationProjectInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyMigrationProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyMigrationProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyMigrationProjectInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyReplicationConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyReplicationConfig(ctx context.Context, params *databasemigrationservice.ModifyReplicationConfigInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyReplicationConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyReplicationConfig")
	}

	var r0 *databasemigrationservice.ModifyReplicationConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyReplicationConfigInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyReplicationConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyReplicationConfigInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyReplicationConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyReplicationConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyReplicationConfigInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyReplicationInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyReplicationInstance(ctx context.Context, params *databasemigrationservice.ModifyReplicationInstanceInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyReplicationInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyReplicationInstance")
	}

	var r0 *databasemigrationservice.ModifyReplicationInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyReplicationInstanceInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyReplicationInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyReplicationInstanceInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyReplicationInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyReplicationInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyReplicationInstanceInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyReplicationSubnetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyReplicationSubnetGroup(ctx context.Context, params *databasemigrationservice.ModifyReplicationSubnetGroupInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyReplicationSubnetGroup")
	}

	var r0 *databasemigrationservice.ModifyReplicationSubnetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyReplicationSubnetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyReplicationSubnetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyReplicationSubnetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyReplicationSubnetGroupInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ModifyReplicationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ModifyReplicationTask(ctx context.Context, params *databasemigrationservice.ModifyReplicationTaskInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyReplicationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ModifyReplicationTask")
	}

	var r0 *databasemigrationservice.ModifyReplicationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyReplicationTaskInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ModifyReplicationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ModifyReplicationTaskInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ModifyReplicationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ModifyReplicationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ModifyReplicationTaskInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MoveReplicationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) MoveReplicationTask(ctx context.Context, params *databasemigrationservice.MoveReplicationTaskInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.MoveReplicationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for MoveReplicationTask")
	}

	var r0 *databasemigrationservice.MoveReplicationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.MoveReplicationTaskInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.MoveReplicationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.MoveReplicationTaskInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.MoveReplicationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.MoveReplicationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.MoveReplicationTaskInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() databasemigrationservice.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 databasemigrationservice.Options
	if rf, ok := ret.Get(0).(func() databasemigrationservice.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(databasemigrationservice.Options)
	}

	return r0
}

// RebootReplicationInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootReplicationInstance(ctx context.Context, params *databasemigrationservice.RebootReplicationInstanceInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.RebootReplicationInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootReplicationInstance")
	}

	var r0 *databasemigrationservice.RebootReplicationInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.RebootReplicationInstanceInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.RebootReplicationInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.RebootReplicationInstanceInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.RebootReplicationInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.RebootReplicationInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.RebootReplicationInstanceInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshSchemas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RefreshSchemas(ctx context.Context, params *databasemigrationservice.RefreshSchemasInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.RefreshSchemasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RefreshSchemas")
	}

	var r0 *databasemigrationservice.RefreshSchemasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.RefreshSchemasInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.RefreshSchemasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.RefreshSchemasInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.RefreshSchemasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.RefreshSchemasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.RefreshSchemasInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReloadReplicationTables provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReloadReplicationTables(ctx context.Context, params *databasemigrationservice.ReloadReplicationTablesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ReloadReplicationTablesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReloadReplicationTables")
	}

	var r0 *databasemigrationservice.ReloadReplicationTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ReloadReplicationTablesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ReloadReplicationTablesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ReloadReplicationTablesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ReloadReplicationTablesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ReloadReplicationTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ReloadReplicationTablesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReloadTables provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ReloadTables(ctx context.Context, params *databasemigrationservice.ReloadTablesInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ReloadTablesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ReloadTables")
	}

	var r0 *databasemigrationservice.ReloadTablesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ReloadTablesInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.ReloadTablesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.ReloadTablesInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.ReloadTablesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.ReloadTablesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.ReloadTablesInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveTagsFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveTagsFromResource(ctx context.Context, params *databasemigrationservice.RemoveTagsFromResourceInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.RemoveTagsFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveTagsFromResource")
	}

	var r0 *databasemigrationservice.RemoveTagsFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.RemoveTagsFromResourceInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.RemoveTagsFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.RemoveTagsFromResourceInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.RemoveTagsFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.RemoveTagsFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.RemoveTagsFromResourceInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RunFleetAdvisorLsaAnalysis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RunFleetAdvisorLsaAnalysis(ctx context.Context, params *databasemigrationservice.RunFleetAdvisorLsaAnalysisInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RunFleetAdvisorLsaAnalysis")
	}

	var r0 *databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.RunFleetAdvisorLsaAnalysisInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.RunFleetAdvisorLsaAnalysisInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.RunFleetAdvisorLsaAnalysisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.RunFleetAdvisorLsaAnalysisInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartExtensionPackAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartExtensionPackAssociation(ctx context.Context, params *databasemigrationservice.StartExtensionPackAssociationInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartExtensionPackAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartExtensionPackAssociation")
	}

	var r0 *databasemigrationservice.StartExtensionPackAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartExtensionPackAssociationInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartExtensionPackAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartExtensionPackAssociationInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartExtensionPackAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartExtensionPackAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartExtensionPackAssociationInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMetadataModelAssessment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMetadataModelAssessment(ctx context.Context, params *databasemigrationservice.StartMetadataModelAssessmentInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelAssessmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMetadataModelAssessment")
	}

	var r0 *databasemigrationservice.StartMetadataModelAssessmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelAssessmentInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelAssessmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelAssessmentInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartMetadataModelAssessmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartMetadataModelAssessmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartMetadataModelAssessmentInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMetadataModelConversion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMetadataModelConversion(ctx context.Context, params *databasemigrationservice.StartMetadataModelConversionInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelConversionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMetadataModelConversion")
	}

	var r0 *databasemigrationservice.StartMetadataModelConversionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelConversionInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelConversionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelConversionInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartMetadataModelConversionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartMetadataModelConversionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartMetadataModelConversionInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMetadataModelExportAsScript provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMetadataModelExportAsScript(ctx context.Context, params *databasemigrationservice.StartMetadataModelExportAsScriptInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelExportAsScriptOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMetadataModelExportAsScript")
	}

	var r0 *databasemigrationservice.StartMetadataModelExportAsScriptOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelExportAsScriptInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelExportAsScriptOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelExportAsScriptInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartMetadataModelExportAsScriptOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartMetadataModelExportAsScriptOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartMetadataModelExportAsScriptInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMetadataModelExportToTarget provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMetadataModelExportToTarget(ctx context.Context, params *databasemigrationservice.StartMetadataModelExportToTargetInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelExportToTargetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMetadataModelExportToTarget")
	}

	var r0 *databasemigrationservice.StartMetadataModelExportToTargetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelExportToTargetInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelExportToTargetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelExportToTargetInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartMetadataModelExportToTargetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartMetadataModelExportToTargetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartMetadataModelExportToTargetInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMetadataModelImport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMetadataModelImport(ctx context.Context, params *databasemigrationservice.StartMetadataModelImportInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelImportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMetadataModelImport")
	}

	var r0 *databasemigrationservice.StartMetadataModelImportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelImportInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartMetadataModelImportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartMetadataModelImportInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartMetadataModelImportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartMetadataModelImportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartMetadataModelImportInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartRecommendations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartRecommendations(ctx context.Context, params *databasemigrationservice.StartRecommendationsInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartRecommendationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartRecommendations")
	}

	var r0 *databasemigrationservice.StartRecommendationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartRecommendationsInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartRecommendationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartRecommendationsInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartRecommendationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartRecommendationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartRecommendationsInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartReplication(ctx context.Context, params *databasemigrationservice.StartReplicationInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartReplication")
	}

	var r0 *databasemigrationservice.StartReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartReplicationInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartReplicationInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartReplicationInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplicationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartReplicationTask(ctx context.Context, params *databasemigrationservice.StartReplicationTaskInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartReplicationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartReplicationTask")
	}

	var r0 *databasemigrationservice.StartReplicationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartReplicationTaskInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartReplicationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartReplicationTaskInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartReplicationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartReplicationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartReplicationTaskInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplicationTaskAssessment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartReplicationTaskAssessment(ctx context.Context, params *databasemigrationservice.StartReplicationTaskAssessmentInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartReplicationTaskAssessment")
	}

	var r0 *databasemigrationservice.StartReplicationTaskAssessmentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartReplicationTaskAssessmentInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartReplicationTaskAssessmentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartReplicationTaskAssessmentInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartReplicationTaskAssessmentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartReplicationTaskAssessmentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartReplicationTaskAssessmentInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartReplicationTaskAssessmentRun provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartReplicationTaskAssessmentRun(ctx context.Context, params *databasemigrationservice.StartReplicationTaskAssessmentRunInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartReplicationTaskAssessmentRun")
	}

	var r0 *databasemigrationservice.StartReplicationTaskAssessmentRunOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StartReplicationTaskAssessmentRunOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StartReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StartReplicationTaskAssessmentRunOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StartReplicationTaskAssessmentRunOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StartReplicationTaskAssessmentRunInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopReplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopReplication(ctx context.Context, params *databasemigrationservice.StopReplicationInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StopReplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopReplication")
	}

	var r0 *databasemigrationservice.StopReplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StopReplicationInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StopReplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StopReplicationInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StopReplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StopReplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StopReplicationInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopReplicationTask provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopReplicationTask(ctx context.Context, params *databasemigrationservice.StopReplicationTaskInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StopReplicationTaskOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopReplicationTask")
	}

	var r0 *databasemigrationservice.StopReplicationTaskOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StopReplicationTaskInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.StopReplicationTaskOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.StopReplicationTaskInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.StopReplicationTaskOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.StopReplicationTaskOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.StopReplicationTaskInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestConnection(ctx context.Context, params *databasemigrationservice.TestConnectionInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.TestConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestConnection")
	}

	var r0 *databasemigrationservice.TestConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.TestConnectionInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.TestConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.TestConnectionInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.TestConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.TestConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.TestConnectionInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscriptionsToEventBridge provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSubscriptionsToEventBridge(ctx context.Context, params *databasemigrationservice.UpdateSubscriptionsToEventBridgeInput, optFns ...func(*databasemigrationservice.Options)) (*databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriptionsToEventBridge")
	}

	var r0 *databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.UpdateSubscriptionsToEventBridgeInput, ...func(*databasemigrationservice.Options)) (*databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *databasemigrationservice.UpdateSubscriptionsToEventBridgeInput, ...func(*databasemigrationservice.Options)) *databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*databasemigrationservice.UpdateSubscriptionsToEventBridgeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *databasemigrationservice.UpdateSubscriptionsToEventBridgeInput, ...func(*databasemigrationservice.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
