// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	sagemaker "github.com/aws/aws-sdk-go-v2/service/sagemaker"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AddAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddAssociation(ctx context.Context, params *sagemaker.AddAssociationInput, optFns ...func(*sagemaker.Options)) (*sagemaker.AddAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddAssociation")
	}

	var r0 *sagemaker.AddAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.AddAssociationInput, ...func(*sagemaker.Options)) (*sagemaker.AddAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.AddAssociationInput, ...func(*sagemaker.Options)) *sagemaker.AddAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.AddAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.AddAssociationInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AddTags(ctx context.Context, params *sagemaker.AddTagsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.AddTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AddTags")
	}

	var r0 *sagemaker.AddTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.AddTagsInput, ...func(*sagemaker.Options)) (*sagemaker.AddTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.AddTagsInput, ...func(*sagemaker.Options)) *sagemaker.AddTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.AddTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.AddTagsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateTrialComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateTrialComponent(ctx context.Context, params *sagemaker.AssociateTrialComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.AssociateTrialComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateTrialComponent")
	}

	var r0 *sagemaker.AssociateTrialComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.AssociateTrialComponentInput, ...func(*sagemaker.Options)) (*sagemaker.AssociateTrialComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.AssociateTrialComponentInput, ...func(*sagemaker.Options)) *sagemaker.AssociateTrialComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.AssociateTrialComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.AssociateTrialComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AttachClusterNodeVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AttachClusterNodeVolume(ctx context.Context, params *sagemaker.AttachClusterNodeVolumeInput, optFns ...func(*sagemaker.Options)) (*sagemaker.AttachClusterNodeVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AttachClusterNodeVolume")
	}

	var r0 *sagemaker.AttachClusterNodeVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.AttachClusterNodeVolumeInput, ...func(*sagemaker.Options)) (*sagemaker.AttachClusterNodeVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.AttachClusterNodeVolumeInput, ...func(*sagemaker.Options)) *sagemaker.AttachClusterNodeVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.AttachClusterNodeVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.AttachClusterNodeVolumeInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchAddClusterNodes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchAddClusterNodes(ctx context.Context, params *sagemaker.BatchAddClusterNodesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.BatchAddClusterNodesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchAddClusterNodes")
	}

	var r0 *sagemaker.BatchAddClusterNodesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.BatchAddClusterNodesInput, ...func(*sagemaker.Options)) (*sagemaker.BatchAddClusterNodesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.BatchAddClusterNodesInput, ...func(*sagemaker.Options)) *sagemaker.BatchAddClusterNodesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.BatchAddClusterNodesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.BatchAddClusterNodesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDeleteClusterNodes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDeleteClusterNodes(ctx context.Context, params *sagemaker.BatchDeleteClusterNodesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.BatchDeleteClusterNodesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDeleteClusterNodes")
	}

	var r0 *sagemaker.BatchDeleteClusterNodesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.BatchDeleteClusterNodesInput, ...func(*sagemaker.Options)) (*sagemaker.BatchDeleteClusterNodesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.BatchDeleteClusterNodesInput, ...func(*sagemaker.Options)) *sagemaker.BatchDeleteClusterNodesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.BatchDeleteClusterNodesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.BatchDeleteClusterNodesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BatchDescribeModelPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) BatchDescribeModelPackage(ctx context.Context, params *sagemaker.BatchDescribeModelPackageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.BatchDescribeModelPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BatchDescribeModelPackage")
	}

	var r0 *sagemaker.BatchDescribeModelPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.BatchDescribeModelPackageInput, ...func(*sagemaker.Options)) (*sagemaker.BatchDescribeModelPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.BatchDescribeModelPackageInput, ...func(*sagemaker.Options)) *sagemaker.BatchDescribeModelPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.BatchDescribeModelPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.BatchDescribeModelPackageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAction(ctx context.Context, params *sagemaker.CreateActionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAction")
	}

	var r0 *sagemaker.CreateActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateActionInput, ...func(*sagemaker.Options)) (*sagemaker.CreateActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateActionInput, ...func(*sagemaker.Options)) *sagemaker.CreateActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateActionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAlgorithm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAlgorithm(ctx context.Context, params *sagemaker.CreateAlgorithmInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateAlgorithmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlgorithm")
	}

	var r0 *sagemaker.CreateAlgorithmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAlgorithmInput, ...func(*sagemaker.Options)) (*sagemaker.CreateAlgorithmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAlgorithmInput, ...func(*sagemaker.Options)) *sagemaker.CreateAlgorithmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateAlgorithmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateAlgorithmInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateApp(ctx context.Context, params *sagemaker.CreateAppInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateApp")
	}

	var r0 *sagemaker.CreateAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAppInput, ...func(*sagemaker.Options)) (*sagemaker.CreateAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAppInput, ...func(*sagemaker.Options)) *sagemaker.CreateAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateAppInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAppImageConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAppImageConfig(ctx context.Context, params *sagemaker.CreateAppImageConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateAppImageConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAppImageConfig")
	}

	var r0 *sagemaker.CreateAppImageConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAppImageConfigInput, ...func(*sagemaker.Options)) (*sagemaker.CreateAppImageConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAppImageConfigInput, ...func(*sagemaker.Options)) *sagemaker.CreateAppImageConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateAppImageConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateAppImageConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateArtifact(ctx context.Context, params *sagemaker.CreateArtifactInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateArtifact")
	}

	var r0 *sagemaker.CreateArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateArtifactInput, ...func(*sagemaker.Options)) (*sagemaker.CreateArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateArtifactInput, ...func(*sagemaker.Options)) *sagemaker.CreateArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateArtifactInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAutoMLJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAutoMLJob(ctx context.Context, params *sagemaker.CreateAutoMLJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateAutoMLJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAutoMLJob")
	}

	var r0 *sagemaker.CreateAutoMLJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAutoMLJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateAutoMLJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAutoMLJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateAutoMLJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateAutoMLJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateAutoMLJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAutoMLJobV2 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAutoMLJobV2(ctx context.Context, params *sagemaker.CreateAutoMLJobV2Input, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateAutoMLJobV2Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAutoMLJobV2")
	}

	var r0 *sagemaker.CreateAutoMLJobV2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAutoMLJobV2Input, ...func(*sagemaker.Options)) (*sagemaker.CreateAutoMLJobV2Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateAutoMLJobV2Input, ...func(*sagemaker.Options)) *sagemaker.CreateAutoMLJobV2Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateAutoMLJobV2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateAutoMLJobV2Input, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCluster(ctx context.Context, params *sagemaker.CreateClusterInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCluster")
	}

	var r0 *sagemaker.CreateClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateClusterInput, ...func(*sagemaker.Options)) (*sagemaker.CreateClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateClusterInput, ...func(*sagemaker.Options)) *sagemaker.CreateClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateClusterInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClusterSchedulerConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateClusterSchedulerConfig(ctx context.Context, params *sagemaker.CreateClusterSchedulerConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateClusterSchedulerConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateClusterSchedulerConfig")
	}

	var r0 *sagemaker.CreateClusterSchedulerConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateClusterSchedulerConfigInput, ...func(*sagemaker.Options)) (*sagemaker.CreateClusterSchedulerConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateClusterSchedulerConfigInput, ...func(*sagemaker.Options)) *sagemaker.CreateClusterSchedulerConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateClusterSchedulerConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateClusterSchedulerConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCodeRepository provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCodeRepository(ctx context.Context, params *sagemaker.CreateCodeRepositoryInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateCodeRepositoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCodeRepository")
	}

	var r0 *sagemaker.CreateCodeRepositoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateCodeRepositoryInput, ...func(*sagemaker.Options)) (*sagemaker.CreateCodeRepositoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateCodeRepositoryInput, ...func(*sagemaker.Options)) *sagemaker.CreateCodeRepositoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateCodeRepositoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateCodeRepositoryInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCompilationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCompilationJob(ctx context.Context, params *sagemaker.CreateCompilationJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateCompilationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCompilationJob")
	}

	var r0 *sagemaker.CreateCompilationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateCompilationJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateCompilationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateCompilationJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateCompilationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateCompilationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateCompilationJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateComputeQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateComputeQuota(ctx context.Context, params *sagemaker.CreateComputeQuotaInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateComputeQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateComputeQuota")
	}

	var r0 *sagemaker.CreateComputeQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateComputeQuotaInput, ...func(*sagemaker.Options)) (*sagemaker.CreateComputeQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateComputeQuotaInput, ...func(*sagemaker.Options)) *sagemaker.CreateComputeQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateComputeQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateComputeQuotaInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateContext provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateContext(ctx context.Context, params *sagemaker.CreateContextInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateContextOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateContext")
	}

	var r0 *sagemaker.CreateContextOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateContextInput, ...func(*sagemaker.Options)) (*sagemaker.CreateContextOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateContextInput, ...func(*sagemaker.Options)) *sagemaker.CreateContextOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateContextOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateContextInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDataQualityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDataQualityJobDefinition(ctx context.Context, params *sagemaker.CreateDataQualityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateDataQualityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDataQualityJobDefinition")
	}

	var r0 *sagemaker.CreateDataQualityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.CreateDataQualityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.CreateDataQualityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateDataQualityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeviceFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeviceFleet(ctx context.Context, params *sagemaker.CreateDeviceFleetInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateDeviceFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceFleet")
	}

	var r0 *sagemaker.CreateDeviceFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateDeviceFleetInput, ...func(*sagemaker.Options)) (*sagemaker.CreateDeviceFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateDeviceFleetInput, ...func(*sagemaker.Options)) *sagemaker.CreateDeviceFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateDeviceFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateDeviceFleetInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDomain(ctx context.Context, params *sagemaker.CreateDomainInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDomain")
	}

	var r0 *sagemaker.CreateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateDomainInput, ...func(*sagemaker.Options)) (*sagemaker.CreateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateDomainInput, ...func(*sagemaker.Options)) *sagemaker.CreateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateDomainInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEdgeDeploymentPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEdgeDeploymentPlan(ctx context.Context, params *sagemaker.CreateEdgeDeploymentPlanInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateEdgeDeploymentPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEdgeDeploymentPlan")
	}

	var r0 *sagemaker.CreateEdgeDeploymentPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) (*sagemaker.CreateEdgeDeploymentPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) *sagemaker.CreateEdgeDeploymentPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateEdgeDeploymentPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEdgeDeploymentStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEdgeDeploymentStage(ctx context.Context, params *sagemaker.CreateEdgeDeploymentStageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateEdgeDeploymentStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEdgeDeploymentStage")
	}

	var r0 *sagemaker.CreateEdgeDeploymentStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEdgeDeploymentStageInput, ...func(*sagemaker.Options)) (*sagemaker.CreateEdgeDeploymentStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEdgeDeploymentStageInput, ...func(*sagemaker.Options)) *sagemaker.CreateEdgeDeploymentStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateEdgeDeploymentStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateEdgeDeploymentStageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEdgePackagingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEdgePackagingJob(ctx context.Context, params *sagemaker.CreateEdgePackagingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateEdgePackagingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEdgePackagingJob")
	}

	var r0 *sagemaker.CreateEdgePackagingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEdgePackagingJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateEdgePackagingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEdgePackagingJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateEdgePackagingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateEdgePackagingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateEdgePackagingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEndpoint(ctx context.Context, params *sagemaker.CreateEndpointInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEndpoint")
	}

	var r0 *sagemaker.CreateEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEndpointInput, ...func(*sagemaker.Options)) (*sagemaker.CreateEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEndpointInput, ...func(*sagemaker.Options)) *sagemaker.CreateEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateEndpointInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateEndpointConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateEndpointConfig(ctx context.Context, params *sagemaker.CreateEndpointConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateEndpointConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateEndpointConfig")
	}

	var r0 *sagemaker.CreateEndpointConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEndpointConfigInput, ...func(*sagemaker.Options)) (*sagemaker.CreateEndpointConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateEndpointConfigInput, ...func(*sagemaker.Options)) *sagemaker.CreateEndpointConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateEndpointConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateEndpointConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateExperiment(ctx context.Context, params *sagemaker.CreateExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateExperiment")
	}

	var r0 *sagemaker.CreateExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.CreateExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateExperimentInput, ...func(*sagemaker.Options)) *sagemaker.CreateExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFeatureGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFeatureGroup(ctx context.Context, params *sagemaker.CreateFeatureGroupInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateFeatureGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFeatureGroup")
	}

	var r0 *sagemaker.CreateFeatureGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateFeatureGroupInput, ...func(*sagemaker.Options)) (*sagemaker.CreateFeatureGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateFeatureGroupInput, ...func(*sagemaker.Options)) *sagemaker.CreateFeatureGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateFeatureGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateFeatureGroupInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFlowDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFlowDefinition(ctx context.Context, params *sagemaker.CreateFlowDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateFlowDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFlowDefinition")
	}

	var r0 *sagemaker.CreateFlowDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateFlowDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.CreateFlowDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateFlowDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.CreateFlowDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateFlowDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateFlowDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHub provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHub(ctx context.Context, params *sagemaker.CreateHubInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateHubOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHub")
	}

	var r0 *sagemaker.CreateHubOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHubInput, ...func(*sagemaker.Options)) (*sagemaker.CreateHubOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHubInput, ...func(*sagemaker.Options)) *sagemaker.CreateHubOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateHubOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateHubInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHubContentPresignedUrls provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHubContentPresignedUrls(ctx context.Context, params *sagemaker.CreateHubContentPresignedUrlsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateHubContentPresignedUrlsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHubContentPresignedUrls")
	}

	var r0 *sagemaker.CreateHubContentPresignedUrlsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHubContentPresignedUrlsInput, ...func(*sagemaker.Options)) (*sagemaker.CreateHubContentPresignedUrlsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHubContentPresignedUrlsInput, ...func(*sagemaker.Options)) *sagemaker.CreateHubContentPresignedUrlsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateHubContentPresignedUrlsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateHubContentPresignedUrlsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHubContentReference provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHubContentReference(ctx context.Context, params *sagemaker.CreateHubContentReferenceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateHubContentReferenceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHubContentReference")
	}

	var r0 *sagemaker.CreateHubContentReferenceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHubContentReferenceInput, ...func(*sagemaker.Options)) (*sagemaker.CreateHubContentReferenceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHubContentReferenceInput, ...func(*sagemaker.Options)) *sagemaker.CreateHubContentReferenceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateHubContentReferenceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateHubContentReferenceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHumanTaskUi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHumanTaskUi(ctx context.Context, params *sagemaker.CreateHumanTaskUiInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateHumanTaskUiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHumanTaskUi")
	}

	var r0 *sagemaker.CreateHumanTaskUiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHumanTaskUiInput, ...func(*sagemaker.Options)) (*sagemaker.CreateHumanTaskUiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHumanTaskUiInput, ...func(*sagemaker.Options)) *sagemaker.CreateHumanTaskUiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateHumanTaskUiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateHumanTaskUiInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateHyperParameterTuningJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateHyperParameterTuningJob(ctx context.Context, params *sagemaker.CreateHyperParameterTuningJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateHyperParameterTuningJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateHyperParameterTuningJob")
	}

	var r0 *sagemaker.CreateHyperParameterTuningJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHyperParameterTuningJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateHyperParameterTuningJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateHyperParameterTuningJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateHyperParameterTuningJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateHyperParameterTuningJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateHyperParameterTuningJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImage(ctx context.Context, params *sagemaker.CreateImageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImage")
	}

	var r0 *sagemaker.CreateImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateImageInput, ...func(*sagemaker.Options)) (*sagemaker.CreateImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateImageInput, ...func(*sagemaker.Options)) *sagemaker.CreateImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateImageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImageVersion(ctx context.Context, params *sagemaker.CreateImageVersionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateImageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImageVersion")
	}

	var r0 *sagemaker.CreateImageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateImageVersionInput, ...func(*sagemaker.Options)) (*sagemaker.CreateImageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateImageVersionInput, ...func(*sagemaker.Options)) *sagemaker.CreateImageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateImageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateImageVersionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInferenceComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInferenceComponent(ctx context.Context, params *sagemaker.CreateInferenceComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateInferenceComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInferenceComponent")
	}

	var r0 *sagemaker.CreateInferenceComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateInferenceComponentInput, ...func(*sagemaker.Options)) (*sagemaker.CreateInferenceComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateInferenceComponentInput, ...func(*sagemaker.Options)) *sagemaker.CreateInferenceComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateInferenceComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateInferenceComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInferenceExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInferenceExperiment(ctx context.Context, params *sagemaker.CreateInferenceExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateInferenceExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInferenceExperiment")
	}

	var r0 *sagemaker.CreateInferenceExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateInferenceExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.CreateInferenceExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateInferenceExperimentInput, ...func(*sagemaker.Options)) *sagemaker.CreateInferenceExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateInferenceExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateInferenceExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateInferenceRecommendationsJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInferenceRecommendationsJob(ctx context.Context, params *sagemaker.CreateInferenceRecommendationsJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateInferenceRecommendationsJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInferenceRecommendationsJob")
	}

	var r0 *sagemaker.CreateInferenceRecommendationsJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateInferenceRecommendationsJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateInferenceRecommendationsJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateInferenceRecommendationsJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLabelingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLabelingJob(ctx context.Context, params *sagemaker.CreateLabelingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateLabelingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLabelingJob")
	}

	var r0 *sagemaker.CreateLabelingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateLabelingJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateLabelingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateLabelingJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateLabelingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateLabelingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateLabelingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMlflowTrackingServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMlflowTrackingServer(ctx context.Context, params *sagemaker.CreateMlflowTrackingServerInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateMlflowTrackingServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMlflowTrackingServer")
	}

	var r0 *sagemaker.CreateMlflowTrackingServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateMlflowTrackingServerInput, ...func(*sagemaker.Options)) (*sagemaker.CreateMlflowTrackingServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateMlflowTrackingServerInput, ...func(*sagemaker.Options)) *sagemaker.CreateMlflowTrackingServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateMlflowTrackingServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateMlflowTrackingServerInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModel(ctx context.Context, params *sagemaker.CreateModelInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModel")
	}

	var r0 *sagemaker.CreateModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelInput, ...func(*sagemaker.Options)) (*sagemaker.CreateModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelInput, ...func(*sagemaker.Options)) *sagemaker.CreateModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateModelInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModelBiasJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModelBiasJobDefinition(ctx context.Context, params *sagemaker.CreateModelBiasJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateModelBiasJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModelBiasJobDefinition")
	}

	var r0 *sagemaker.CreateModelBiasJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.CreateModelBiasJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.CreateModelBiasJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateModelBiasJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModelCard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModelCard(ctx context.Context, params *sagemaker.CreateModelCardInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateModelCardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModelCard")
	}

	var r0 *sagemaker.CreateModelCardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelCardInput, ...func(*sagemaker.Options)) (*sagemaker.CreateModelCardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelCardInput, ...func(*sagemaker.Options)) *sagemaker.CreateModelCardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateModelCardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateModelCardInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModelCardExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModelCardExportJob(ctx context.Context, params *sagemaker.CreateModelCardExportJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateModelCardExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModelCardExportJob")
	}

	var r0 *sagemaker.CreateModelCardExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelCardExportJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateModelCardExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelCardExportJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateModelCardExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateModelCardExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateModelCardExportJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModelExplainabilityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModelExplainabilityJobDefinition(ctx context.Context, params *sagemaker.CreateModelExplainabilityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateModelExplainabilityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModelExplainabilityJobDefinition")
	}

	var r0 *sagemaker.CreateModelExplainabilityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.CreateModelExplainabilityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.CreateModelExplainabilityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateModelExplainabilityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModelPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModelPackage(ctx context.Context, params *sagemaker.CreateModelPackageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateModelPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModelPackage")
	}

	var r0 *sagemaker.CreateModelPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelPackageInput, ...func(*sagemaker.Options)) (*sagemaker.CreateModelPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelPackageInput, ...func(*sagemaker.Options)) *sagemaker.CreateModelPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateModelPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateModelPackageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModelPackageGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModelPackageGroup(ctx context.Context, params *sagemaker.CreateModelPackageGroupInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateModelPackageGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModelPackageGroup")
	}

	var r0 *sagemaker.CreateModelPackageGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelPackageGroupInput, ...func(*sagemaker.Options)) (*sagemaker.CreateModelPackageGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelPackageGroupInput, ...func(*sagemaker.Options)) *sagemaker.CreateModelPackageGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateModelPackageGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateModelPackageGroupInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateModelQualityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateModelQualityJobDefinition(ctx context.Context, params *sagemaker.CreateModelQualityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateModelQualityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateModelQualityJobDefinition")
	}

	var r0 *sagemaker.CreateModelQualityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.CreateModelQualityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.CreateModelQualityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateModelQualityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMonitoringSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMonitoringSchedule(ctx context.Context, params *sagemaker.CreateMonitoringScheduleInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateMonitoringScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMonitoringSchedule")
	}

	var r0 *sagemaker.CreateMonitoringScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateMonitoringScheduleInput, ...func(*sagemaker.Options)) (*sagemaker.CreateMonitoringScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateMonitoringScheduleInput, ...func(*sagemaker.Options)) *sagemaker.CreateMonitoringScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateMonitoringScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateMonitoringScheduleInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotebookInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNotebookInstance(ctx context.Context, params *sagemaker.CreateNotebookInstanceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateNotebookInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotebookInstance")
	}

	var r0 *sagemaker.CreateNotebookInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateNotebookInstanceInput, ...func(*sagemaker.Options)) (*sagemaker.CreateNotebookInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateNotebookInstanceInput, ...func(*sagemaker.Options)) *sagemaker.CreateNotebookInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateNotebookInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateNotebookInstanceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateNotebookInstanceLifecycleConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateNotebookInstanceLifecycleConfig(ctx context.Context, params *sagemaker.CreateNotebookInstanceLifecycleConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateNotebookInstanceLifecycleConfig")
	}

	var r0 *sagemaker.CreateNotebookInstanceLifecycleConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) (*sagemaker.CreateNotebookInstanceLifecycleConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) *sagemaker.CreateNotebookInstanceLifecycleConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateNotebookInstanceLifecycleConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOptimizationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOptimizationJob(ctx context.Context, params *sagemaker.CreateOptimizationJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateOptimizationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOptimizationJob")
	}

	var r0 *sagemaker.CreateOptimizationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateOptimizationJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateOptimizationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateOptimizationJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateOptimizationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateOptimizationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateOptimizationJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePartnerApp(ctx context.Context, params *sagemaker.CreatePartnerAppInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreatePartnerAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePartnerApp")
	}

	var r0 *sagemaker.CreatePartnerAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePartnerAppInput, ...func(*sagemaker.Options)) (*sagemaker.CreatePartnerAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePartnerAppInput, ...func(*sagemaker.Options)) *sagemaker.CreatePartnerAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreatePartnerAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreatePartnerAppInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePartnerAppPresignedUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePartnerAppPresignedUrl(ctx context.Context, params *sagemaker.CreatePartnerAppPresignedUrlInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreatePartnerAppPresignedUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePartnerAppPresignedUrl")
	}

	var r0 *sagemaker.CreatePartnerAppPresignedUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePartnerAppPresignedUrlInput, ...func(*sagemaker.Options)) (*sagemaker.CreatePartnerAppPresignedUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePartnerAppPresignedUrlInput, ...func(*sagemaker.Options)) *sagemaker.CreatePartnerAppPresignedUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreatePartnerAppPresignedUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreatePartnerAppPresignedUrlInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePipeline(ctx context.Context, params *sagemaker.CreatePipelineInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreatePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePipeline")
	}

	var r0 *sagemaker.CreatePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePipelineInput, ...func(*sagemaker.Options)) (*sagemaker.CreatePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePipelineInput, ...func(*sagemaker.Options)) *sagemaker.CreatePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreatePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreatePipelineInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePresignedDomainUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePresignedDomainUrl(ctx context.Context, params *sagemaker.CreatePresignedDomainUrlInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreatePresignedDomainUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePresignedDomainUrl")
	}

	var r0 *sagemaker.CreatePresignedDomainUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePresignedDomainUrlInput, ...func(*sagemaker.Options)) (*sagemaker.CreatePresignedDomainUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePresignedDomainUrlInput, ...func(*sagemaker.Options)) *sagemaker.CreatePresignedDomainUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreatePresignedDomainUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreatePresignedDomainUrlInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePresignedMlflowTrackingServerUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePresignedMlflowTrackingServerUrl(ctx context.Context, params *sagemaker.CreatePresignedMlflowTrackingServerUrlInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreatePresignedMlflowTrackingServerUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePresignedMlflowTrackingServerUrl")
	}

	var r0 *sagemaker.CreatePresignedMlflowTrackingServerUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePresignedMlflowTrackingServerUrlInput, ...func(*sagemaker.Options)) (*sagemaker.CreatePresignedMlflowTrackingServerUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePresignedMlflowTrackingServerUrlInput, ...func(*sagemaker.Options)) *sagemaker.CreatePresignedMlflowTrackingServerUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreatePresignedMlflowTrackingServerUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreatePresignedMlflowTrackingServerUrlInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreatePresignedNotebookInstanceUrl provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreatePresignedNotebookInstanceUrl(ctx context.Context, params *sagemaker.CreatePresignedNotebookInstanceUrlInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreatePresignedNotebookInstanceUrl")
	}

	var r0 *sagemaker.CreatePresignedNotebookInstanceUrlOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePresignedNotebookInstanceUrlInput, ...func(*sagemaker.Options)) (*sagemaker.CreatePresignedNotebookInstanceUrlOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreatePresignedNotebookInstanceUrlInput, ...func(*sagemaker.Options)) *sagemaker.CreatePresignedNotebookInstanceUrlOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreatePresignedNotebookInstanceUrlOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreatePresignedNotebookInstanceUrlInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProcessingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProcessingJob(ctx context.Context, params *sagemaker.CreateProcessingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateProcessingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProcessingJob")
	}

	var r0 *sagemaker.CreateProcessingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateProcessingJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateProcessingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateProcessingJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateProcessingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateProcessingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateProcessingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateProject(ctx context.Context, params *sagemaker.CreateProjectInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateProject")
	}

	var r0 *sagemaker.CreateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateProjectInput, ...func(*sagemaker.Options)) (*sagemaker.CreateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateProjectInput, ...func(*sagemaker.Options)) *sagemaker.CreateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateProjectInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSpace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSpace(ctx context.Context, params *sagemaker.CreateSpaceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateSpaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSpace")
	}

	var r0 *sagemaker.CreateSpaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateSpaceInput, ...func(*sagemaker.Options)) (*sagemaker.CreateSpaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateSpaceInput, ...func(*sagemaker.Options)) *sagemaker.CreateSpaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateSpaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateSpaceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStudioLifecycleConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateStudioLifecycleConfig(ctx context.Context, params *sagemaker.CreateStudioLifecycleConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateStudioLifecycleConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateStudioLifecycleConfig")
	}

	var r0 *sagemaker.CreateStudioLifecycleConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateStudioLifecycleConfigInput, ...func(*sagemaker.Options)) (*sagemaker.CreateStudioLifecycleConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateStudioLifecycleConfigInput, ...func(*sagemaker.Options)) *sagemaker.CreateStudioLifecycleConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateStudioLifecycleConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateStudioLifecycleConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrainingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrainingJob(ctx context.Context, params *sagemaker.CreateTrainingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateTrainingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrainingJob")
	}

	var r0 *sagemaker.CreateTrainingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTrainingJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateTrainingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTrainingJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateTrainingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateTrainingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateTrainingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrainingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrainingPlan(ctx context.Context, params *sagemaker.CreateTrainingPlanInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateTrainingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrainingPlan")
	}

	var r0 *sagemaker.CreateTrainingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTrainingPlanInput, ...func(*sagemaker.Options)) (*sagemaker.CreateTrainingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTrainingPlanInput, ...func(*sagemaker.Options)) *sagemaker.CreateTrainingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateTrainingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateTrainingPlanInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransformJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTransformJob(ctx context.Context, params *sagemaker.CreateTransformJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateTransformJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTransformJob")
	}

	var r0 *sagemaker.CreateTransformJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTransformJobInput, ...func(*sagemaker.Options)) (*sagemaker.CreateTransformJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTransformJobInput, ...func(*sagemaker.Options)) *sagemaker.CreateTransformJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateTransformJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateTransformJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrial provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrial(ctx context.Context, params *sagemaker.CreateTrialInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateTrialOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrial")
	}

	var r0 *sagemaker.CreateTrialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTrialInput, ...func(*sagemaker.Options)) (*sagemaker.CreateTrialOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTrialInput, ...func(*sagemaker.Options)) *sagemaker.CreateTrialOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateTrialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateTrialInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTrialComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateTrialComponent(ctx context.Context, params *sagemaker.CreateTrialComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateTrialComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateTrialComponent")
	}

	var r0 *sagemaker.CreateTrialComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTrialComponentInput, ...func(*sagemaker.Options)) (*sagemaker.CreateTrialComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateTrialComponentInput, ...func(*sagemaker.Options)) *sagemaker.CreateTrialComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateTrialComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateTrialComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUserProfile(ctx context.Context, params *sagemaker.CreateUserProfileInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserProfile")
	}

	var r0 *sagemaker.CreateUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateUserProfileInput, ...func(*sagemaker.Options)) (*sagemaker.CreateUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateUserProfileInput, ...func(*sagemaker.Options)) *sagemaker.CreateUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateUserProfileInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkforce provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkforce(ctx context.Context, params *sagemaker.CreateWorkforceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateWorkforceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkforce")
	}

	var r0 *sagemaker.CreateWorkforceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateWorkforceInput, ...func(*sagemaker.Options)) (*sagemaker.CreateWorkforceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateWorkforceInput, ...func(*sagemaker.Options)) *sagemaker.CreateWorkforceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateWorkforceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateWorkforceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateWorkteam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateWorkteam(ctx context.Context, params *sagemaker.CreateWorkteamInput, optFns ...func(*sagemaker.Options)) (*sagemaker.CreateWorkteamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateWorkteam")
	}

	var r0 *sagemaker.CreateWorkteamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateWorkteamInput, ...func(*sagemaker.Options)) (*sagemaker.CreateWorkteamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.CreateWorkteamInput, ...func(*sagemaker.Options)) *sagemaker.CreateWorkteamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.CreateWorkteamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.CreateWorkteamInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAction(ctx context.Context, params *sagemaker.DeleteActionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAction")
	}

	var r0 *sagemaker.DeleteActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteActionInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteActionInput, ...func(*sagemaker.Options)) *sagemaker.DeleteActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteActionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlgorithm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAlgorithm(ctx context.Context, params *sagemaker.DeleteAlgorithmInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteAlgorithmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlgorithm")
	}

	var r0 *sagemaker.DeleteAlgorithmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteAlgorithmInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteAlgorithmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteAlgorithmInput, ...func(*sagemaker.Options)) *sagemaker.DeleteAlgorithmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteAlgorithmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteAlgorithmInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteApp(ctx context.Context, params *sagemaker.DeleteAppInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteApp")
	}

	var r0 *sagemaker.DeleteAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteAppInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteAppInput, ...func(*sagemaker.Options)) *sagemaker.DeleteAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteAppInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAppImageConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAppImageConfig(ctx context.Context, params *sagemaker.DeleteAppImageConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteAppImageConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAppImageConfig")
	}

	var r0 *sagemaker.DeleteAppImageConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteAppImageConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteAppImageConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteAppImageConfigInput, ...func(*sagemaker.Options)) *sagemaker.DeleteAppImageConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteAppImageConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteAppImageConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteArtifact(ctx context.Context, params *sagemaker.DeleteArtifactInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteArtifact")
	}

	var r0 *sagemaker.DeleteArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteArtifactInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteArtifactInput, ...func(*sagemaker.Options)) *sagemaker.DeleteArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteArtifactInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAssociation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAssociation(ctx context.Context, params *sagemaker.DeleteAssociationInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteAssociationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAssociation")
	}

	var r0 *sagemaker.DeleteAssociationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteAssociationInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteAssociationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteAssociationInput, ...func(*sagemaker.Options)) *sagemaker.DeleteAssociationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteAssociationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteAssociationInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCluster(ctx context.Context, params *sagemaker.DeleteClusterInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCluster")
	}

	var r0 *sagemaker.DeleteClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteClusterInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteClusterInput, ...func(*sagemaker.Options)) *sagemaker.DeleteClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteClusterInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteClusterSchedulerConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteClusterSchedulerConfig(ctx context.Context, params *sagemaker.DeleteClusterSchedulerConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteClusterSchedulerConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClusterSchedulerConfig")
	}

	var r0 *sagemaker.DeleteClusterSchedulerConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteClusterSchedulerConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteClusterSchedulerConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteClusterSchedulerConfigInput, ...func(*sagemaker.Options)) *sagemaker.DeleteClusterSchedulerConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteClusterSchedulerConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteClusterSchedulerConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCodeRepository provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCodeRepository(ctx context.Context, params *sagemaker.DeleteCodeRepositoryInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteCodeRepositoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCodeRepository")
	}

	var r0 *sagemaker.DeleteCodeRepositoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteCodeRepositoryInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteCodeRepositoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteCodeRepositoryInput, ...func(*sagemaker.Options)) *sagemaker.DeleteCodeRepositoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteCodeRepositoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteCodeRepositoryInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCompilationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCompilationJob(ctx context.Context, params *sagemaker.DeleteCompilationJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteCompilationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCompilationJob")
	}

	var r0 *sagemaker.DeleteCompilationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteCompilationJobInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteCompilationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteCompilationJobInput, ...func(*sagemaker.Options)) *sagemaker.DeleteCompilationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteCompilationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteCompilationJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteComputeQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteComputeQuota(ctx context.Context, params *sagemaker.DeleteComputeQuotaInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteComputeQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComputeQuota")
	}

	var r0 *sagemaker.DeleteComputeQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteComputeQuotaInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteComputeQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteComputeQuotaInput, ...func(*sagemaker.Options)) *sagemaker.DeleteComputeQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteComputeQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteComputeQuotaInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteContext provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteContext(ctx context.Context, params *sagemaker.DeleteContextInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteContextOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteContext")
	}

	var r0 *sagemaker.DeleteContextOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteContextInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteContextOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteContextInput, ...func(*sagemaker.Options)) *sagemaker.DeleteContextOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteContextOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteContextInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDataQualityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDataQualityJobDefinition(ctx context.Context, params *sagemaker.DeleteDataQualityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteDataQualityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDataQualityJobDefinition")
	}

	var r0 *sagemaker.DeleteDataQualityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteDataQualityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DeleteDataQualityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteDataQualityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeviceFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeviceFleet(ctx context.Context, params *sagemaker.DeleteDeviceFleetInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteDeviceFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceFleet")
	}

	var r0 *sagemaker.DeleteDeviceFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteDeviceFleetInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteDeviceFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteDeviceFleetInput, ...func(*sagemaker.Options)) *sagemaker.DeleteDeviceFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteDeviceFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteDeviceFleetInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomain(ctx context.Context, params *sagemaker.DeleteDomainInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomain")
	}

	var r0 *sagemaker.DeleteDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteDomainInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteDomainInput, ...func(*sagemaker.Options)) *sagemaker.DeleteDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteDomainInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEdgeDeploymentPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEdgeDeploymentPlan(ctx context.Context, params *sagemaker.DeleteEdgeDeploymentPlanInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteEdgeDeploymentPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEdgeDeploymentPlan")
	}

	var r0 *sagemaker.DeleteEdgeDeploymentPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteEdgeDeploymentPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) *sagemaker.DeleteEdgeDeploymentPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteEdgeDeploymentPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEdgeDeploymentStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEdgeDeploymentStage(ctx context.Context, params *sagemaker.DeleteEdgeDeploymentStageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteEdgeDeploymentStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEdgeDeploymentStage")
	}

	var r0 *sagemaker.DeleteEdgeDeploymentStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteEdgeDeploymentStageInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteEdgeDeploymentStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteEdgeDeploymentStageInput, ...func(*sagemaker.Options)) *sagemaker.DeleteEdgeDeploymentStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteEdgeDeploymentStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteEdgeDeploymentStageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEndpoint(ctx context.Context, params *sagemaker.DeleteEndpointInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpoint")
	}

	var r0 *sagemaker.DeleteEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteEndpointInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteEndpointInput, ...func(*sagemaker.Options)) *sagemaker.DeleteEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteEndpointInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEndpointConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEndpointConfig(ctx context.Context, params *sagemaker.DeleteEndpointConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteEndpointConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEndpointConfig")
	}

	var r0 *sagemaker.DeleteEndpointConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteEndpointConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteEndpointConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteEndpointConfigInput, ...func(*sagemaker.Options)) *sagemaker.DeleteEndpointConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteEndpointConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteEndpointConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteExperiment(ctx context.Context, params *sagemaker.DeleteExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExperiment")
	}

	var r0 *sagemaker.DeleteExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteExperimentInput, ...func(*sagemaker.Options)) *sagemaker.DeleteExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFeatureGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFeatureGroup(ctx context.Context, params *sagemaker.DeleteFeatureGroupInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteFeatureGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFeatureGroup")
	}

	var r0 *sagemaker.DeleteFeatureGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteFeatureGroupInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteFeatureGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteFeatureGroupInput, ...func(*sagemaker.Options)) *sagemaker.DeleteFeatureGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteFeatureGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteFeatureGroupInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFlowDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFlowDefinition(ctx context.Context, params *sagemaker.DeleteFlowDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteFlowDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFlowDefinition")
	}

	var r0 *sagemaker.DeleteFlowDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteFlowDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteFlowDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteFlowDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DeleteFlowDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteFlowDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteFlowDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHub provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHub(ctx context.Context, params *sagemaker.DeleteHubInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteHubOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHub")
	}

	var r0 *sagemaker.DeleteHubOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHubInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteHubOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHubInput, ...func(*sagemaker.Options)) *sagemaker.DeleteHubOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteHubOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteHubInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHubContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHubContent(ctx context.Context, params *sagemaker.DeleteHubContentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteHubContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHubContent")
	}

	var r0 *sagemaker.DeleteHubContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHubContentInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteHubContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHubContentInput, ...func(*sagemaker.Options)) *sagemaker.DeleteHubContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteHubContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteHubContentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHubContentReference provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHubContentReference(ctx context.Context, params *sagemaker.DeleteHubContentReferenceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteHubContentReferenceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHubContentReference")
	}

	var r0 *sagemaker.DeleteHubContentReferenceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHubContentReferenceInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteHubContentReferenceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHubContentReferenceInput, ...func(*sagemaker.Options)) *sagemaker.DeleteHubContentReferenceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteHubContentReferenceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteHubContentReferenceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHumanTaskUi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHumanTaskUi(ctx context.Context, params *sagemaker.DeleteHumanTaskUiInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteHumanTaskUiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHumanTaskUi")
	}

	var r0 *sagemaker.DeleteHumanTaskUiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHumanTaskUiInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteHumanTaskUiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHumanTaskUiInput, ...func(*sagemaker.Options)) *sagemaker.DeleteHumanTaskUiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteHumanTaskUiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteHumanTaskUiInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteHyperParameterTuningJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteHyperParameterTuningJob(ctx context.Context, params *sagemaker.DeleteHyperParameterTuningJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteHyperParameterTuningJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHyperParameterTuningJob")
	}

	var r0 *sagemaker.DeleteHyperParameterTuningJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHyperParameterTuningJobInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteHyperParameterTuningJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteHyperParameterTuningJobInput, ...func(*sagemaker.Options)) *sagemaker.DeleteHyperParameterTuningJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteHyperParameterTuningJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteHyperParameterTuningJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImage(ctx context.Context, params *sagemaker.DeleteImageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImage")
	}

	var r0 *sagemaker.DeleteImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteImageInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteImageInput, ...func(*sagemaker.Options)) *sagemaker.DeleteImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteImageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImageVersion(ctx context.Context, params *sagemaker.DeleteImageVersionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteImageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImageVersion")
	}

	var r0 *sagemaker.DeleteImageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteImageVersionInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteImageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteImageVersionInput, ...func(*sagemaker.Options)) *sagemaker.DeleteImageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteImageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteImageVersionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInferenceComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInferenceComponent(ctx context.Context, params *sagemaker.DeleteInferenceComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteInferenceComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInferenceComponent")
	}

	var r0 *sagemaker.DeleteInferenceComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteInferenceComponentInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteInferenceComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteInferenceComponentInput, ...func(*sagemaker.Options)) *sagemaker.DeleteInferenceComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteInferenceComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteInferenceComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInferenceExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInferenceExperiment(ctx context.Context, params *sagemaker.DeleteInferenceExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteInferenceExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInferenceExperiment")
	}

	var r0 *sagemaker.DeleteInferenceExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteInferenceExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteInferenceExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteInferenceExperimentInput, ...func(*sagemaker.Options)) *sagemaker.DeleteInferenceExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteInferenceExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteInferenceExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMlflowTrackingServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMlflowTrackingServer(ctx context.Context, params *sagemaker.DeleteMlflowTrackingServerInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteMlflowTrackingServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMlflowTrackingServer")
	}

	var r0 *sagemaker.DeleteMlflowTrackingServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteMlflowTrackingServerInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteMlflowTrackingServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteMlflowTrackingServerInput, ...func(*sagemaker.Options)) *sagemaker.DeleteMlflowTrackingServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteMlflowTrackingServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteMlflowTrackingServerInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModel(ctx context.Context, params *sagemaker.DeleteModelInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModel")
	}

	var r0 *sagemaker.DeleteModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelInput, ...func(*sagemaker.Options)) *sagemaker.DeleteModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteModelInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModelBiasJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModelBiasJobDefinition(ctx context.Context, params *sagemaker.DeleteModelBiasJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteModelBiasJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelBiasJobDefinition")
	}

	var r0 *sagemaker.DeleteModelBiasJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteModelBiasJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DeleteModelBiasJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteModelBiasJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModelCard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModelCard(ctx context.Context, params *sagemaker.DeleteModelCardInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteModelCardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelCard")
	}

	var r0 *sagemaker.DeleteModelCardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelCardInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteModelCardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelCardInput, ...func(*sagemaker.Options)) *sagemaker.DeleteModelCardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteModelCardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteModelCardInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModelExplainabilityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModelExplainabilityJobDefinition(ctx context.Context, params *sagemaker.DeleteModelExplainabilityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteModelExplainabilityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelExplainabilityJobDefinition")
	}

	var r0 *sagemaker.DeleteModelExplainabilityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteModelExplainabilityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DeleteModelExplainabilityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteModelExplainabilityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModelPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModelPackage(ctx context.Context, params *sagemaker.DeleteModelPackageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteModelPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelPackage")
	}

	var r0 *sagemaker.DeleteModelPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelPackageInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteModelPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelPackageInput, ...func(*sagemaker.Options)) *sagemaker.DeleteModelPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteModelPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteModelPackageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModelPackageGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModelPackageGroup(ctx context.Context, params *sagemaker.DeleteModelPackageGroupInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteModelPackageGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelPackageGroup")
	}

	var r0 *sagemaker.DeleteModelPackageGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelPackageGroupInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteModelPackageGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelPackageGroupInput, ...func(*sagemaker.Options)) *sagemaker.DeleteModelPackageGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteModelPackageGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteModelPackageGroupInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModelPackageGroupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModelPackageGroupPolicy(ctx context.Context, params *sagemaker.DeleteModelPackageGroupPolicyInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteModelPackageGroupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelPackageGroupPolicy")
	}

	var r0 *sagemaker.DeleteModelPackageGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteModelPackageGroupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) *sagemaker.DeleteModelPackageGroupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteModelPackageGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteModelQualityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteModelQualityJobDefinition(ctx context.Context, params *sagemaker.DeleteModelQualityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteModelQualityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteModelQualityJobDefinition")
	}

	var r0 *sagemaker.DeleteModelQualityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteModelQualityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DeleteModelQualityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteModelQualityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMonitoringSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMonitoringSchedule(ctx context.Context, params *sagemaker.DeleteMonitoringScheduleInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteMonitoringScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMonitoringSchedule")
	}

	var r0 *sagemaker.DeleteMonitoringScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteMonitoringScheduleInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteMonitoringScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteMonitoringScheduleInput, ...func(*sagemaker.Options)) *sagemaker.DeleteMonitoringScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteMonitoringScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteMonitoringScheduleInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotebookInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNotebookInstance(ctx context.Context, params *sagemaker.DeleteNotebookInstanceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteNotebookInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotebookInstance")
	}

	var r0 *sagemaker.DeleteNotebookInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteNotebookInstanceInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteNotebookInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteNotebookInstanceInput, ...func(*sagemaker.Options)) *sagemaker.DeleteNotebookInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteNotebookInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteNotebookInstanceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteNotebookInstanceLifecycleConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteNotebookInstanceLifecycleConfig(ctx context.Context, params *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteNotebookInstanceLifecycleConfig")
	}

	var r0 *sagemaker.DeleteNotebookInstanceLifecycleConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) *sagemaker.DeleteNotebookInstanceLifecycleConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteNotebookInstanceLifecycleConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOptimizationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOptimizationJob(ctx context.Context, params *sagemaker.DeleteOptimizationJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteOptimizationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOptimizationJob")
	}

	var r0 *sagemaker.DeleteOptimizationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteOptimizationJobInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteOptimizationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteOptimizationJobInput, ...func(*sagemaker.Options)) *sagemaker.DeleteOptimizationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteOptimizationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteOptimizationJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePartnerApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePartnerApp(ctx context.Context, params *sagemaker.DeletePartnerAppInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeletePartnerAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePartnerApp")
	}

	var r0 *sagemaker.DeletePartnerAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeletePartnerAppInput, ...func(*sagemaker.Options)) (*sagemaker.DeletePartnerAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeletePartnerAppInput, ...func(*sagemaker.Options)) *sagemaker.DeletePartnerAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeletePartnerAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeletePartnerAppInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePipeline(ctx context.Context, params *sagemaker.DeletePipelineInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeletePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePipeline")
	}

	var r0 *sagemaker.DeletePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeletePipelineInput, ...func(*sagemaker.Options)) (*sagemaker.DeletePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeletePipelineInput, ...func(*sagemaker.Options)) *sagemaker.DeletePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeletePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeletePipelineInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteProject(ctx context.Context, params *sagemaker.DeleteProjectInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProject")
	}

	var r0 *sagemaker.DeleteProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteProjectInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteProjectInput, ...func(*sagemaker.Options)) *sagemaker.DeleteProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteProjectInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSpace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSpace(ctx context.Context, params *sagemaker.DeleteSpaceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteSpaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSpace")
	}

	var r0 *sagemaker.DeleteSpaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteSpaceInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteSpaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteSpaceInput, ...func(*sagemaker.Options)) *sagemaker.DeleteSpaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteSpaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteSpaceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStudioLifecycleConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteStudioLifecycleConfig(ctx context.Context, params *sagemaker.DeleteStudioLifecycleConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteStudioLifecycleConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteStudioLifecycleConfig")
	}

	var r0 *sagemaker.DeleteStudioLifecycleConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteStudioLifecycleConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteStudioLifecycleConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteStudioLifecycleConfigInput, ...func(*sagemaker.Options)) *sagemaker.DeleteStudioLifecycleConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteStudioLifecycleConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteStudioLifecycleConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTags(ctx context.Context, params *sagemaker.DeleteTagsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTags")
	}

	var r0 *sagemaker.DeleteTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteTagsInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteTagsInput, ...func(*sagemaker.Options)) *sagemaker.DeleteTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteTagsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrial provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrial(ctx context.Context, params *sagemaker.DeleteTrialInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteTrialOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrial")
	}

	var r0 *sagemaker.DeleteTrialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteTrialInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteTrialOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteTrialInput, ...func(*sagemaker.Options)) *sagemaker.DeleteTrialOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteTrialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteTrialInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTrialComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTrialComponent(ctx context.Context, params *sagemaker.DeleteTrialComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteTrialComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTrialComponent")
	}

	var r0 *sagemaker.DeleteTrialComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteTrialComponentInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteTrialComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteTrialComponentInput, ...func(*sagemaker.Options)) *sagemaker.DeleteTrialComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteTrialComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteTrialComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUserProfile(ctx context.Context, params *sagemaker.DeleteUserProfileInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserProfile")
	}

	var r0 *sagemaker.DeleteUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteUserProfileInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteUserProfileInput, ...func(*sagemaker.Options)) *sagemaker.DeleteUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteUserProfileInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkforce provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkforce(ctx context.Context, params *sagemaker.DeleteWorkforceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteWorkforceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkforce")
	}

	var r0 *sagemaker.DeleteWorkforceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteWorkforceInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteWorkforceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteWorkforceInput, ...func(*sagemaker.Options)) *sagemaker.DeleteWorkforceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteWorkforceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteWorkforceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWorkteam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteWorkteam(ctx context.Context, params *sagemaker.DeleteWorkteamInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeleteWorkteamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWorkteam")
	}

	var r0 *sagemaker.DeleteWorkteamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteWorkteamInput, ...func(*sagemaker.Options)) (*sagemaker.DeleteWorkteamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeleteWorkteamInput, ...func(*sagemaker.Options)) *sagemaker.DeleteWorkteamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeleteWorkteamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeleteWorkteamInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterDevices(ctx context.Context, params *sagemaker.DeregisterDevicesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DeregisterDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterDevices")
	}

	var r0 *sagemaker.DeregisterDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeregisterDevicesInput, ...func(*sagemaker.Options)) (*sagemaker.DeregisterDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DeregisterDevicesInput, ...func(*sagemaker.Options)) *sagemaker.DeregisterDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DeregisterDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DeregisterDevicesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAction(ctx context.Context, params *sagemaker.DescribeActionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAction")
	}

	var r0 *sagemaker.DescribeActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeActionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeActionInput, ...func(*sagemaker.Options)) *sagemaker.DescribeActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeActionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAlgorithm provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAlgorithm(ctx context.Context, params *sagemaker.DescribeAlgorithmInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeAlgorithmOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAlgorithm")
	}

	var r0 *sagemaker.DescribeAlgorithmOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAlgorithmInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeAlgorithmOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAlgorithmInput, ...func(*sagemaker.Options)) *sagemaker.DescribeAlgorithmOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeAlgorithmOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeAlgorithmInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeApp(ctx context.Context, params *sagemaker.DescribeAppInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeApp")
	}

	var r0 *sagemaker.DescribeAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAppInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAppInput, ...func(*sagemaker.Options)) *sagemaker.DescribeAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeAppInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAppImageConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAppImageConfig(ctx context.Context, params *sagemaker.DescribeAppImageConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeAppImageConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAppImageConfig")
	}

	var r0 *sagemaker.DescribeAppImageConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAppImageConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeAppImageConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAppImageConfigInput, ...func(*sagemaker.Options)) *sagemaker.DescribeAppImageConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeAppImageConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeAppImageConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeArtifact(ctx context.Context, params *sagemaker.DescribeArtifactInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeArtifact")
	}

	var r0 *sagemaker.DescribeArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeArtifactInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeArtifactInput, ...func(*sagemaker.Options)) *sagemaker.DescribeArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeArtifactInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAutoMLJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAutoMLJob(ctx context.Context, params *sagemaker.DescribeAutoMLJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeAutoMLJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAutoMLJob")
	}

	var r0 *sagemaker.DescribeAutoMLJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAutoMLJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeAutoMLJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAutoMLJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeAutoMLJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeAutoMLJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeAutoMLJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeAutoMLJobV2 provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeAutoMLJobV2(ctx context.Context, params *sagemaker.DescribeAutoMLJobV2Input, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeAutoMLJobV2Output, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeAutoMLJobV2")
	}

	var r0 *sagemaker.DescribeAutoMLJobV2Output
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAutoMLJobV2Input, ...func(*sagemaker.Options)) (*sagemaker.DescribeAutoMLJobV2Output, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeAutoMLJobV2Input, ...func(*sagemaker.Options)) *sagemaker.DescribeAutoMLJobV2Output); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeAutoMLJobV2Output)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeAutoMLJobV2Input, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCluster(ctx context.Context, params *sagemaker.DescribeClusterInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCluster")
	}

	var r0 *sagemaker.DescribeClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeClusterInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeClusterInput, ...func(*sagemaker.Options)) *sagemaker.DescribeClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeClusterInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClusterEvent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeClusterEvent(ctx context.Context, params *sagemaker.DescribeClusterEventInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeClusterEventOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClusterEvent")
	}

	var r0 *sagemaker.DescribeClusterEventOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeClusterEventInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeClusterEventOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeClusterEventInput, ...func(*sagemaker.Options)) *sagemaker.DescribeClusterEventOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeClusterEventOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeClusterEventInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClusterNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeClusterNode(ctx context.Context, params *sagemaker.DescribeClusterNodeInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeClusterNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClusterNode")
	}

	var r0 *sagemaker.DescribeClusterNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeClusterNodeInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeClusterNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeClusterNodeInput, ...func(*sagemaker.Options)) *sagemaker.DescribeClusterNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeClusterNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeClusterNodeInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeClusterSchedulerConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeClusterSchedulerConfig(ctx context.Context, params *sagemaker.DescribeClusterSchedulerConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeClusterSchedulerConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeClusterSchedulerConfig")
	}

	var r0 *sagemaker.DescribeClusterSchedulerConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeClusterSchedulerConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeClusterSchedulerConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeClusterSchedulerConfigInput, ...func(*sagemaker.Options)) *sagemaker.DescribeClusterSchedulerConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeClusterSchedulerConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeClusterSchedulerConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCodeRepository provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCodeRepository(ctx context.Context, params *sagemaker.DescribeCodeRepositoryInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeCodeRepositoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCodeRepository")
	}

	var r0 *sagemaker.DescribeCodeRepositoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeCodeRepositoryInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeCodeRepositoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeCodeRepositoryInput, ...func(*sagemaker.Options)) *sagemaker.DescribeCodeRepositoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeCodeRepositoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeCodeRepositoryInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeCompilationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeCompilationJob(ctx context.Context, params *sagemaker.DescribeCompilationJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeCompilationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeCompilationJob")
	}

	var r0 *sagemaker.DescribeCompilationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeCompilationJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeCompilationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeCompilationJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeCompilationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeCompilationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeCompilationJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeComputeQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeComputeQuota(ctx context.Context, params *sagemaker.DescribeComputeQuotaInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeComputeQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeComputeQuota")
	}

	var r0 *sagemaker.DescribeComputeQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeComputeQuotaInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeComputeQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeComputeQuotaInput, ...func(*sagemaker.Options)) *sagemaker.DescribeComputeQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeComputeQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeComputeQuotaInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeContext provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeContext(ctx context.Context, params *sagemaker.DescribeContextInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeContextOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeContext")
	}

	var r0 *sagemaker.DescribeContextOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeContextInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeContextOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeContextInput, ...func(*sagemaker.Options)) *sagemaker.DescribeContextOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeContextOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeContextInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDataQualityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDataQualityJobDefinition(ctx context.Context, params *sagemaker.DescribeDataQualityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeDataQualityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDataQualityJobDefinition")
	}

	var r0 *sagemaker.DescribeDataQualityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeDataQualityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DescribeDataQualityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeDataQualityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeDataQualityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDevice provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDevice(ctx context.Context, params *sagemaker.DescribeDeviceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeDeviceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDevice")
	}

	var r0 *sagemaker.DescribeDeviceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeDeviceInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeDeviceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeDeviceInput, ...func(*sagemaker.Options)) *sagemaker.DescribeDeviceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeDeviceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeDeviceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDeviceFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDeviceFleet(ctx context.Context, params *sagemaker.DescribeDeviceFleetInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeDeviceFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDeviceFleet")
	}

	var r0 *sagemaker.DescribeDeviceFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeDeviceFleetInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeDeviceFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeDeviceFleetInput, ...func(*sagemaker.Options)) *sagemaker.DescribeDeviceFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeDeviceFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeDeviceFleetInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeDomain(ctx context.Context, params *sagemaker.DescribeDomainInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeDomain")
	}

	var r0 *sagemaker.DescribeDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeDomainInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeDomainInput, ...func(*sagemaker.Options)) *sagemaker.DescribeDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeDomainInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEdgeDeploymentPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEdgeDeploymentPlan(ctx context.Context, params *sagemaker.DescribeEdgeDeploymentPlanInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeEdgeDeploymentPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEdgeDeploymentPlan")
	}

	var r0 *sagemaker.DescribeEdgeDeploymentPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeEdgeDeploymentPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) *sagemaker.DescribeEdgeDeploymentPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeEdgeDeploymentPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeEdgeDeploymentPlanInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEdgePackagingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEdgePackagingJob(ctx context.Context, params *sagemaker.DescribeEdgePackagingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeEdgePackagingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEdgePackagingJob")
	}

	var r0 *sagemaker.DescribeEdgePackagingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeEdgePackagingJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeEdgePackagingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeEdgePackagingJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeEdgePackagingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeEdgePackagingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeEdgePackagingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEndpoint(ctx context.Context, params *sagemaker.DescribeEndpointInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEndpoint")
	}

	var r0 *sagemaker.DescribeEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeEndpointInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeEndpointInput, ...func(*sagemaker.Options)) *sagemaker.DescribeEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeEndpointInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEndpointConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEndpointConfig(ctx context.Context, params *sagemaker.DescribeEndpointConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeEndpointConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEndpointConfig")
	}

	var r0 *sagemaker.DescribeEndpointConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeEndpointConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeEndpointConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeEndpointConfigInput, ...func(*sagemaker.Options)) *sagemaker.DescribeEndpointConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeEndpointConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeEndpointConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeExperiment(ctx context.Context, params *sagemaker.DescribeExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeExperiment")
	}

	var r0 *sagemaker.DescribeExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeExperimentInput, ...func(*sagemaker.Options)) *sagemaker.DescribeExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFeatureGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFeatureGroup(ctx context.Context, params *sagemaker.DescribeFeatureGroupInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeFeatureGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFeatureGroup")
	}

	var r0 *sagemaker.DescribeFeatureGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeFeatureGroupInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeFeatureGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeFeatureGroupInput, ...func(*sagemaker.Options)) *sagemaker.DescribeFeatureGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeFeatureGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeFeatureGroupInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFeatureMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFeatureMetadata(ctx context.Context, params *sagemaker.DescribeFeatureMetadataInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeFeatureMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFeatureMetadata")
	}

	var r0 *sagemaker.DescribeFeatureMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeFeatureMetadataInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeFeatureMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeFeatureMetadataInput, ...func(*sagemaker.Options)) *sagemaker.DescribeFeatureMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeFeatureMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeFeatureMetadataInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeFlowDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeFlowDefinition(ctx context.Context, params *sagemaker.DescribeFlowDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeFlowDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeFlowDefinition")
	}

	var r0 *sagemaker.DescribeFlowDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeFlowDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeFlowDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeFlowDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DescribeFlowDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeFlowDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeFlowDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHub provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHub(ctx context.Context, params *sagemaker.DescribeHubInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeHubOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHub")
	}

	var r0 *sagemaker.DescribeHubOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeHubInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeHubOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeHubInput, ...func(*sagemaker.Options)) *sagemaker.DescribeHubOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeHubOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeHubInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHubContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHubContent(ctx context.Context, params *sagemaker.DescribeHubContentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeHubContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHubContent")
	}

	var r0 *sagemaker.DescribeHubContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeHubContentInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeHubContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeHubContentInput, ...func(*sagemaker.Options)) *sagemaker.DescribeHubContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeHubContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeHubContentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHumanTaskUi provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHumanTaskUi(ctx context.Context, params *sagemaker.DescribeHumanTaskUiInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeHumanTaskUiOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHumanTaskUi")
	}

	var r0 *sagemaker.DescribeHumanTaskUiOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeHumanTaskUiInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeHumanTaskUiOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeHumanTaskUiInput, ...func(*sagemaker.Options)) *sagemaker.DescribeHumanTaskUiOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeHumanTaskUiOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeHumanTaskUiInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeHyperParameterTuningJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeHyperParameterTuningJob(ctx context.Context, params *sagemaker.DescribeHyperParameterTuningJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeHyperParameterTuningJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeHyperParameterTuningJob")
	}

	var r0 *sagemaker.DescribeHyperParameterTuningJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeHyperParameterTuningJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeHyperParameterTuningJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeHyperParameterTuningJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeHyperParameterTuningJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeHyperParameterTuningJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeHyperParameterTuningJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeImage(ctx context.Context, params *sagemaker.DescribeImageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeImage")
	}

	var r0 *sagemaker.DescribeImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeImageInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeImageInput, ...func(*sagemaker.Options)) *sagemaker.DescribeImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeImageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeImageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeImageVersion(ctx context.Context, params *sagemaker.DescribeImageVersionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeImageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeImageVersion")
	}

	var r0 *sagemaker.DescribeImageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeImageVersionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeImageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeImageVersionInput, ...func(*sagemaker.Options)) *sagemaker.DescribeImageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeImageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeImageVersionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInferenceComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInferenceComponent(ctx context.Context, params *sagemaker.DescribeInferenceComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeInferenceComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInferenceComponent")
	}

	var r0 *sagemaker.DescribeInferenceComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeInferenceComponentInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeInferenceComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeInferenceComponentInput, ...func(*sagemaker.Options)) *sagemaker.DescribeInferenceComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeInferenceComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeInferenceComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInferenceExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInferenceExperiment(ctx context.Context, params *sagemaker.DescribeInferenceExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeInferenceExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInferenceExperiment")
	}

	var r0 *sagemaker.DescribeInferenceExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeInferenceExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeInferenceExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeInferenceExperimentInput, ...func(*sagemaker.Options)) *sagemaker.DescribeInferenceExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeInferenceExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeInferenceExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInferenceRecommendationsJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInferenceRecommendationsJob(ctx context.Context, params *sagemaker.DescribeInferenceRecommendationsJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeInferenceRecommendationsJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInferenceRecommendationsJob")
	}

	var r0 *sagemaker.DescribeInferenceRecommendationsJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeInferenceRecommendationsJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeInferenceRecommendationsJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeInferenceRecommendationsJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLabelingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLabelingJob(ctx context.Context, params *sagemaker.DescribeLabelingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeLabelingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLabelingJob")
	}

	var r0 *sagemaker.DescribeLabelingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeLabelingJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeLabelingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeLabelingJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeLabelingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeLabelingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeLabelingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeLineageGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeLineageGroup(ctx context.Context, params *sagemaker.DescribeLineageGroupInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeLineageGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeLineageGroup")
	}

	var r0 *sagemaker.DescribeLineageGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeLineageGroupInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeLineageGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeLineageGroupInput, ...func(*sagemaker.Options)) *sagemaker.DescribeLineageGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeLineageGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeLineageGroupInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMlflowTrackingServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMlflowTrackingServer(ctx context.Context, params *sagemaker.DescribeMlflowTrackingServerInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeMlflowTrackingServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMlflowTrackingServer")
	}

	var r0 *sagemaker.DescribeMlflowTrackingServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeMlflowTrackingServerInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeMlflowTrackingServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeMlflowTrackingServerInput, ...func(*sagemaker.Options)) *sagemaker.DescribeMlflowTrackingServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeMlflowTrackingServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeMlflowTrackingServerInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModel provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModel(ctx context.Context, params *sagemaker.DescribeModelInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeModelOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModel")
	}

	var r0 *sagemaker.DescribeModelOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeModelOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelInput, ...func(*sagemaker.Options)) *sagemaker.DescribeModelOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeModelOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeModelInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModelBiasJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModelBiasJobDefinition(ctx context.Context, params *sagemaker.DescribeModelBiasJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeModelBiasJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModelBiasJobDefinition")
	}

	var r0 *sagemaker.DescribeModelBiasJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeModelBiasJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DescribeModelBiasJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeModelBiasJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeModelBiasJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModelCard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModelCard(ctx context.Context, params *sagemaker.DescribeModelCardInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeModelCardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModelCard")
	}

	var r0 *sagemaker.DescribeModelCardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelCardInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeModelCardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelCardInput, ...func(*sagemaker.Options)) *sagemaker.DescribeModelCardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeModelCardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeModelCardInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModelCardExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModelCardExportJob(ctx context.Context, params *sagemaker.DescribeModelCardExportJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeModelCardExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModelCardExportJob")
	}

	var r0 *sagemaker.DescribeModelCardExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelCardExportJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeModelCardExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelCardExportJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeModelCardExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeModelCardExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeModelCardExportJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModelExplainabilityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModelExplainabilityJobDefinition(ctx context.Context, params *sagemaker.DescribeModelExplainabilityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeModelExplainabilityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModelExplainabilityJobDefinition")
	}

	var r0 *sagemaker.DescribeModelExplainabilityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeModelExplainabilityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DescribeModelExplainabilityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeModelExplainabilityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeModelExplainabilityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModelPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModelPackage(ctx context.Context, params *sagemaker.DescribeModelPackageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeModelPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModelPackage")
	}

	var r0 *sagemaker.DescribeModelPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelPackageInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeModelPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelPackageInput, ...func(*sagemaker.Options)) *sagemaker.DescribeModelPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeModelPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeModelPackageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModelPackageGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModelPackageGroup(ctx context.Context, params *sagemaker.DescribeModelPackageGroupInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeModelPackageGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModelPackageGroup")
	}

	var r0 *sagemaker.DescribeModelPackageGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelPackageGroupInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeModelPackageGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelPackageGroupInput, ...func(*sagemaker.Options)) *sagemaker.DescribeModelPackageGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeModelPackageGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeModelPackageGroupInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeModelQualityJobDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeModelQualityJobDefinition(ctx context.Context, params *sagemaker.DescribeModelQualityJobDefinitionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeModelQualityJobDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeModelQualityJobDefinition")
	}

	var r0 *sagemaker.DescribeModelQualityJobDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeModelQualityJobDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) *sagemaker.DescribeModelQualityJobDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeModelQualityJobDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeModelQualityJobDefinitionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMonitoringSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMonitoringSchedule(ctx context.Context, params *sagemaker.DescribeMonitoringScheduleInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeMonitoringScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMonitoringSchedule")
	}

	var r0 *sagemaker.DescribeMonitoringScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeMonitoringScheduleInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeMonitoringScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeMonitoringScheduleInput, ...func(*sagemaker.Options)) *sagemaker.DescribeMonitoringScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeMonitoringScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeMonitoringScheduleInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNotebookInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNotebookInstance(ctx context.Context, params *sagemaker.DescribeNotebookInstanceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeNotebookInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNotebookInstance")
	}

	var r0 *sagemaker.DescribeNotebookInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeNotebookInstanceInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeNotebookInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeNotebookInstanceInput, ...func(*sagemaker.Options)) *sagemaker.DescribeNotebookInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeNotebookInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeNotebookInstanceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeNotebookInstanceLifecycleConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeNotebookInstanceLifecycleConfig(ctx context.Context, params *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeNotebookInstanceLifecycleConfig")
	}

	var r0 *sagemaker.DescribeNotebookInstanceLifecycleConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) *sagemaker.DescribeNotebookInstanceLifecycleConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeNotebookInstanceLifecycleConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOptimizationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOptimizationJob(ctx context.Context, params *sagemaker.DescribeOptimizationJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeOptimizationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOptimizationJob")
	}

	var r0 *sagemaker.DescribeOptimizationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeOptimizationJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeOptimizationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeOptimizationJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeOptimizationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeOptimizationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeOptimizationJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePartnerApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePartnerApp(ctx context.Context, params *sagemaker.DescribePartnerAppInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribePartnerAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePartnerApp")
	}

	var r0 *sagemaker.DescribePartnerAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribePartnerAppInput, ...func(*sagemaker.Options)) (*sagemaker.DescribePartnerAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribePartnerAppInput, ...func(*sagemaker.Options)) *sagemaker.DescribePartnerAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribePartnerAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribePartnerAppInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePipeline(ctx context.Context, params *sagemaker.DescribePipelineInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePipeline")
	}

	var r0 *sagemaker.DescribePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribePipelineInput, ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribePipelineInput, ...func(*sagemaker.Options)) *sagemaker.DescribePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribePipelineInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePipelineDefinitionForExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePipelineDefinitionForExecution(ctx context.Context, params *sagemaker.DescribePipelineDefinitionForExecutionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineDefinitionForExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePipelineDefinitionForExecution")
	}

	var r0 *sagemaker.DescribePipelineDefinitionForExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribePipelineDefinitionForExecutionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineDefinitionForExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribePipelineDefinitionForExecutionInput, ...func(*sagemaker.Options)) *sagemaker.DescribePipelineDefinitionForExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribePipelineDefinitionForExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribePipelineDefinitionForExecutionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribePipelineExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribePipelineExecution(ctx context.Context, params *sagemaker.DescribePipelineExecutionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribePipelineExecution")
	}

	var r0 *sagemaker.DescribePipelineExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribePipelineExecutionInput, ...func(*sagemaker.Options)) (*sagemaker.DescribePipelineExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribePipelineExecutionInput, ...func(*sagemaker.Options)) *sagemaker.DescribePipelineExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribePipelineExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribePipelineExecutionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProcessingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProcessingJob(ctx context.Context, params *sagemaker.DescribeProcessingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeProcessingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProcessingJob")
	}

	var r0 *sagemaker.DescribeProcessingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeProcessingJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeProcessingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeProcessingJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeProcessingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeProcessingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeProcessingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeProject(ctx context.Context, params *sagemaker.DescribeProjectInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeProject")
	}

	var r0 *sagemaker.DescribeProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeProjectInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeProjectInput, ...func(*sagemaker.Options)) *sagemaker.DescribeProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeProjectInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeReservedCapacity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeReservedCapacity(ctx context.Context, params *sagemaker.DescribeReservedCapacityInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeReservedCapacityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeReservedCapacity")
	}

	var r0 *sagemaker.DescribeReservedCapacityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeReservedCapacityInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeReservedCapacityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeReservedCapacityInput, ...func(*sagemaker.Options)) *sagemaker.DescribeReservedCapacityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeReservedCapacityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeReservedCapacityInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSpace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSpace(ctx context.Context, params *sagemaker.DescribeSpaceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeSpaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSpace")
	}

	var r0 *sagemaker.DescribeSpaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeSpaceInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeSpaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeSpaceInput, ...func(*sagemaker.Options)) *sagemaker.DescribeSpaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeSpaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeSpaceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeStudioLifecycleConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeStudioLifecycleConfig(ctx context.Context, params *sagemaker.DescribeStudioLifecycleConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeStudioLifecycleConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeStudioLifecycleConfig")
	}

	var r0 *sagemaker.DescribeStudioLifecycleConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeStudioLifecycleConfigInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeStudioLifecycleConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeStudioLifecycleConfigInput, ...func(*sagemaker.Options)) *sagemaker.DescribeStudioLifecycleConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeStudioLifecycleConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeStudioLifecycleConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeSubscribedWorkteam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeSubscribedWorkteam(ctx context.Context, params *sagemaker.DescribeSubscribedWorkteamInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeSubscribedWorkteamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeSubscribedWorkteam")
	}

	var r0 *sagemaker.DescribeSubscribedWorkteamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeSubscribedWorkteamInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeSubscribedWorkteamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeSubscribedWorkteamInput, ...func(*sagemaker.Options)) *sagemaker.DescribeSubscribedWorkteamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeSubscribedWorkteamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeSubscribedWorkteamInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrainingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTrainingJob(ctx context.Context, params *sagemaker.DescribeTrainingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeTrainingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTrainingJob")
	}

	var r0 *sagemaker.DescribeTrainingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTrainingJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeTrainingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTrainingJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeTrainingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeTrainingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeTrainingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrainingPlan provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTrainingPlan(ctx context.Context, params *sagemaker.DescribeTrainingPlanInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeTrainingPlanOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTrainingPlan")
	}

	var r0 *sagemaker.DescribeTrainingPlanOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTrainingPlanInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeTrainingPlanOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTrainingPlanInput, ...func(*sagemaker.Options)) *sagemaker.DescribeTrainingPlanOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeTrainingPlanOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeTrainingPlanInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTransformJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTransformJob(ctx context.Context, params *sagemaker.DescribeTransformJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeTransformJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTransformJob")
	}

	var r0 *sagemaker.DescribeTransformJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTransformJobInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeTransformJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTransformJobInput, ...func(*sagemaker.Options)) *sagemaker.DescribeTransformJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeTransformJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeTransformJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrial provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTrial(ctx context.Context, params *sagemaker.DescribeTrialInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeTrialOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTrial")
	}

	var r0 *sagemaker.DescribeTrialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTrialInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeTrialOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTrialInput, ...func(*sagemaker.Options)) *sagemaker.DescribeTrialOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeTrialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeTrialInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeTrialComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeTrialComponent(ctx context.Context, params *sagemaker.DescribeTrialComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeTrialComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeTrialComponent")
	}

	var r0 *sagemaker.DescribeTrialComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTrialComponentInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeTrialComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeTrialComponentInput, ...func(*sagemaker.Options)) *sagemaker.DescribeTrialComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeTrialComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeTrialComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUserProfile(ctx context.Context, params *sagemaker.DescribeUserProfileInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUserProfile")
	}

	var r0 *sagemaker.DescribeUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeUserProfileInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeUserProfileInput, ...func(*sagemaker.Options)) *sagemaker.DescribeUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeUserProfileInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkforce provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWorkforce(ctx context.Context, params *sagemaker.DescribeWorkforceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeWorkforceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkforce")
	}

	var r0 *sagemaker.DescribeWorkforceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeWorkforceInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeWorkforceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeWorkforceInput, ...func(*sagemaker.Options)) *sagemaker.DescribeWorkforceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeWorkforceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeWorkforceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeWorkteam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeWorkteam(ctx context.Context, params *sagemaker.DescribeWorkteamInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DescribeWorkteamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeWorkteam")
	}

	var r0 *sagemaker.DescribeWorkteamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeWorkteamInput, ...func(*sagemaker.Options)) (*sagemaker.DescribeWorkteamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DescribeWorkteamInput, ...func(*sagemaker.Options)) *sagemaker.DescribeWorkteamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DescribeWorkteamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DescribeWorkteamInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetachClusterNodeVolume provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DetachClusterNodeVolume(ctx context.Context, params *sagemaker.DetachClusterNodeVolumeInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DetachClusterNodeVolumeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DetachClusterNodeVolume")
	}

	var r0 *sagemaker.DetachClusterNodeVolumeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DetachClusterNodeVolumeInput, ...func(*sagemaker.Options)) (*sagemaker.DetachClusterNodeVolumeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DetachClusterNodeVolumeInput, ...func(*sagemaker.Options)) *sagemaker.DetachClusterNodeVolumeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DetachClusterNodeVolumeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DetachClusterNodeVolumeInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableSagemakerServicecatalogPortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableSagemakerServicecatalogPortfolio(ctx context.Context, params *sagemaker.DisableSagemakerServicecatalogPortfolioInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DisableSagemakerServicecatalogPortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableSagemakerServicecatalogPortfolio")
	}

	var r0 *sagemaker.DisableSagemakerServicecatalogPortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DisableSagemakerServicecatalogPortfolioInput, ...func(*sagemaker.Options)) (*sagemaker.DisableSagemakerServicecatalogPortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DisableSagemakerServicecatalogPortfolioInput, ...func(*sagemaker.Options)) *sagemaker.DisableSagemakerServicecatalogPortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DisableSagemakerServicecatalogPortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DisableSagemakerServicecatalogPortfolioInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateTrialComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateTrialComponent(ctx context.Context, params *sagemaker.DisassociateTrialComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.DisassociateTrialComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateTrialComponent")
	}

	var r0 *sagemaker.DisassociateTrialComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DisassociateTrialComponentInput, ...func(*sagemaker.Options)) (*sagemaker.DisassociateTrialComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.DisassociateTrialComponentInput, ...func(*sagemaker.Options)) *sagemaker.DisassociateTrialComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.DisassociateTrialComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.DisassociateTrialComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableSagemakerServicecatalogPortfolio provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableSagemakerServicecatalogPortfolio(ctx context.Context, params *sagemaker.EnableSagemakerServicecatalogPortfolioInput, optFns ...func(*sagemaker.Options)) (*sagemaker.EnableSagemakerServicecatalogPortfolioOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableSagemakerServicecatalogPortfolio")
	}

	var r0 *sagemaker.EnableSagemakerServicecatalogPortfolioOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.EnableSagemakerServicecatalogPortfolioInput, ...func(*sagemaker.Options)) (*sagemaker.EnableSagemakerServicecatalogPortfolioOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.EnableSagemakerServicecatalogPortfolioInput, ...func(*sagemaker.Options)) *sagemaker.EnableSagemakerServicecatalogPortfolioOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.EnableSagemakerServicecatalogPortfolioOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.EnableSagemakerServicecatalogPortfolioInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceFleetReport provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeviceFleetReport(ctx context.Context, params *sagemaker.GetDeviceFleetReportInput, optFns ...func(*sagemaker.Options)) (*sagemaker.GetDeviceFleetReportOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceFleetReport")
	}

	var r0 *sagemaker.GetDeviceFleetReportOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetDeviceFleetReportInput, ...func(*sagemaker.Options)) (*sagemaker.GetDeviceFleetReportOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetDeviceFleetReportInput, ...func(*sagemaker.Options)) *sagemaker.GetDeviceFleetReportOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.GetDeviceFleetReportOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.GetDeviceFleetReportInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLineageGroupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLineageGroupPolicy(ctx context.Context, params *sagemaker.GetLineageGroupPolicyInput, optFns ...func(*sagemaker.Options)) (*sagemaker.GetLineageGroupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLineageGroupPolicy")
	}

	var r0 *sagemaker.GetLineageGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetLineageGroupPolicyInput, ...func(*sagemaker.Options)) (*sagemaker.GetLineageGroupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetLineageGroupPolicyInput, ...func(*sagemaker.Options)) *sagemaker.GetLineageGroupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.GetLineageGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.GetLineageGroupPolicyInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetModelPackageGroupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetModelPackageGroupPolicy(ctx context.Context, params *sagemaker.GetModelPackageGroupPolicyInput, optFns ...func(*sagemaker.Options)) (*sagemaker.GetModelPackageGroupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetModelPackageGroupPolicy")
	}

	var r0 *sagemaker.GetModelPackageGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) (*sagemaker.GetModelPackageGroupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) *sagemaker.GetModelPackageGroupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.GetModelPackageGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.GetModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSagemakerServicecatalogPortfolioStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSagemakerServicecatalogPortfolioStatus(ctx context.Context, params *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput, optFns ...func(*sagemaker.Options)) (*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSagemakerServicecatalogPortfolioStatus")
	}

	var r0 *sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput, ...func(*sagemaker.Options)) (*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput, ...func(*sagemaker.Options)) *sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.GetSagemakerServicecatalogPortfolioStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.GetSagemakerServicecatalogPortfolioStatusInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetScalingConfigurationRecommendation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetScalingConfigurationRecommendation(ctx context.Context, params *sagemaker.GetScalingConfigurationRecommendationInput, optFns ...func(*sagemaker.Options)) (*sagemaker.GetScalingConfigurationRecommendationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetScalingConfigurationRecommendation")
	}

	var r0 *sagemaker.GetScalingConfigurationRecommendationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetScalingConfigurationRecommendationInput, ...func(*sagemaker.Options)) (*sagemaker.GetScalingConfigurationRecommendationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetScalingConfigurationRecommendationInput, ...func(*sagemaker.Options)) *sagemaker.GetScalingConfigurationRecommendationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.GetScalingConfigurationRecommendationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.GetScalingConfigurationRecommendationInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSearchSuggestions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSearchSuggestions(ctx context.Context, params *sagemaker.GetSearchSuggestionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.GetSearchSuggestionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSearchSuggestions")
	}

	var r0 *sagemaker.GetSearchSuggestionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetSearchSuggestionsInput, ...func(*sagemaker.Options)) (*sagemaker.GetSearchSuggestionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.GetSearchSuggestionsInput, ...func(*sagemaker.Options)) *sagemaker.GetSearchSuggestionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.GetSearchSuggestionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.GetSearchSuggestionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportHubContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportHubContent(ctx context.Context, params *sagemaker.ImportHubContentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ImportHubContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportHubContent")
	}

	var r0 *sagemaker.ImportHubContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ImportHubContentInput, ...func(*sagemaker.Options)) (*sagemaker.ImportHubContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ImportHubContentInput, ...func(*sagemaker.Options)) *sagemaker.ImportHubContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ImportHubContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ImportHubContentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListActions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListActions(ctx context.Context, params *sagemaker.ListActionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListActionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListActions")
	}

	var r0 *sagemaker.ListActionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListActionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListActionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListActionsInput, ...func(*sagemaker.Options)) *sagemaker.ListActionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListActionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListActionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAlgorithms provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAlgorithms(ctx context.Context, params *sagemaker.ListAlgorithmsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListAlgorithmsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAlgorithms")
	}

	var r0 *sagemaker.ListAlgorithmsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAlgorithmsInput, ...func(*sagemaker.Options)) (*sagemaker.ListAlgorithmsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAlgorithmsInput, ...func(*sagemaker.Options)) *sagemaker.ListAlgorithmsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListAlgorithmsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListAlgorithmsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAliases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAliases(ctx context.Context, params *sagemaker.ListAliasesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListAliasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAliases")
	}

	var r0 *sagemaker.ListAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAliasesInput, ...func(*sagemaker.Options)) (*sagemaker.ListAliasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAliasesInput, ...func(*sagemaker.Options)) *sagemaker.ListAliasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListAliasesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAppImageConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAppImageConfigs(ctx context.Context, params *sagemaker.ListAppImageConfigsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListAppImageConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAppImageConfigs")
	}

	var r0 *sagemaker.ListAppImageConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAppImageConfigsInput, ...func(*sagemaker.Options)) (*sagemaker.ListAppImageConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAppImageConfigsInput, ...func(*sagemaker.Options)) *sagemaker.ListAppImageConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListAppImageConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListAppImageConfigsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListApps(ctx context.Context, params *sagemaker.ListAppsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListApps")
	}

	var r0 *sagemaker.ListAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAppsInput, ...func(*sagemaker.Options)) (*sagemaker.ListAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAppsInput, ...func(*sagemaker.Options)) *sagemaker.ListAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListAppsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListArtifacts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListArtifacts(ctx context.Context, params *sagemaker.ListArtifactsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListArtifactsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListArtifacts")
	}

	var r0 *sagemaker.ListArtifactsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListArtifactsInput, ...func(*sagemaker.Options)) (*sagemaker.ListArtifactsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListArtifactsInput, ...func(*sagemaker.Options)) *sagemaker.ListArtifactsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListArtifactsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListArtifactsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAssociations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAssociations(ctx context.Context, params *sagemaker.ListAssociationsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListAssociationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAssociations")
	}

	var r0 *sagemaker.ListAssociationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAssociationsInput, ...func(*sagemaker.Options)) (*sagemaker.ListAssociationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAssociationsInput, ...func(*sagemaker.Options)) *sagemaker.ListAssociationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListAssociationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListAssociationsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAutoMLJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAutoMLJobs(ctx context.Context, params *sagemaker.ListAutoMLJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListAutoMLJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAutoMLJobs")
	}

	var r0 *sagemaker.ListAutoMLJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAutoMLJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListAutoMLJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListAutoMLJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListAutoMLJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListAutoMLJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListAutoMLJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCandidatesForAutoMLJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCandidatesForAutoMLJob(ctx context.Context, params *sagemaker.ListCandidatesForAutoMLJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListCandidatesForAutoMLJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCandidatesForAutoMLJob")
	}

	var r0 *sagemaker.ListCandidatesForAutoMLJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListCandidatesForAutoMLJobInput, ...func(*sagemaker.Options)) (*sagemaker.ListCandidatesForAutoMLJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListCandidatesForAutoMLJobInput, ...func(*sagemaker.Options)) *sagemaker.ListCandidatesForAutoMLJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListCandidatesForAutoMLJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListCandidatesForAutoMLJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterEvents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClusterEvents(ctx context.Context, params *sagemaker.ListClusterEventsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListClusterEventsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterEvents")
	}

	var r0 *sagemaker.ListClusterEventsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListClusterEventsInput, ...func(*sagemaker.Options)) (*sagemaker.ListClusterEventsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListClusterEventsInput, ...func(*sagemaker.Options)) *sagemaker.ListClusterEventsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListClusterEventsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListClusterEventsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterNodes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClusterNodes(ctx context.Context, params *sagemaker.ListClusterNodesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListClusterNodesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterNodes")
	}

	var r0 *sagemaker.ListClusterNodesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListClusterNodesInput, ...func(*sagemaker.Options)) (*sagemaker.ListClusterNodesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListClusterNodesInput, ...func(*sagemaker.Options)) *sagemaker.ListClusterNodesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListClusterNodesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListClusterNodesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusterSchedulerConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClusterSchedulerConfigs(ctx context.Context, params *sagemaker.ListClusterSchedulerConfigsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListClusterSchedulerConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusterSchedulerConfigs")
	}

	var r0 *sagemaker.ListClusterSchedulerConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListClusterSchedulerConfigsInput, ...func(*sagemaker.Options)) (*sagemaker.ListClusterSchedulerConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListClusterSchedulerConfigsInput, ...func(*sagemaker.Options)) *sagemaker.ListClusterSchedulerConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListClusterSchedulerConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListClusterSchedulerConfigsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListClusters(ctx context.Context, params *sagemaker.ListClustersInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListClusters")
	}

	var r0 *sagemaker.ListClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListClustersInput, ...func(*sagemaker.Options)) (*sagemaker.ListClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListClustersInput, ...func(*sagemaker.Options)) *sagemaker.ListClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListClustersInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCodeRepositories provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCodeRepositories(ctx context.Context, params *sagemaker.ListCodeRepositoriesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListCodeRepositoriesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCodeRepositories")
	}

	var r0 *sagemaker.ListCodeRepositoriesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListCodeRepositoriesInput, ...func(*sagemaker.Options)) (*sagemaker.ListCodeRepositoriesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListCodeRepositoriesInput, ...func(*sagemaker.Options)) *sagemaker.ListCodeRepositoriesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListCodeRepositoriesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListCodeRepositoriesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCompilationJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCompilationJobs(ctx context.Context, params *sagemaker.ListCompilationJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListCompilationJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCompilationJobs")
	}

	var r0 *sagemaker.ListCompilationJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListCompilationJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListCompilationJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListCompilationJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListCompilationJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListCompilationJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListCompilationJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListComputeQuotas provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListComputeQuotas(ctx context.Context, params *sagemaker.ListComputeQuotasInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListComputeQuotasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListComputeQuotas")
	}

	var r0 *sagemaker.ListComputeQuotasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListComputeQuotasInput, ...func(*sagemaker.Options)) (*sagemaker.ListComputeQuotasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListComputeQuotasInput, ...func(*sagemaker.Options)) *sagemaker.ListComputeQuotasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListComputeQuotasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListComputeQuotasInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContexts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListContexts(ctx context.Context, params *sagemaker.ListContextsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListContextsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListContexts")
	}

	var r0 *sagemaker.ListContextsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListContextsInput, ...func(*sagemaker.Options)) (*sagemaker.ListContextsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListContextsInput, ...func(*sagemaker.Options)) *sagemaker.ListContextsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListContextsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListContextsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDataQualityJobDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDataQualityJobDefinitions(ctx context.Context, params *sagemaker.ListDataQualityJobDefinitionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListDataQualityJobDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDataQualityJobDefinitions")
	}

	var r0 *sagemaker.ListDataQualityJobDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListDataQualityJobDefinitionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListDataQualityJobDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListDataQualityJobDefinitionsInput, ...func(*sagemaker.Options)) *sagemaker.ListDataQualityJobDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListDataQualityJobDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListDataQualityJobDefinitionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeviceFleets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeviceFleets(ctx context.Context, params *sagemaker.ListDeviceFleetsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListDeviceFleetsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceFleets")
	}

	var r0 *sagemaker.ListDeviceFleetsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListDeviceFleetsInput, ...func(*sagemaker.Options)) (*sagemaker.ListDeviceFleetsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListDeviceFleetsInput, ...func(*sagemaker.Options)) *sagemaker.ListDeviceFleetsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListDeviceFleetsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListDeviceFleetsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDevices(ctx context.Context, params *sagemaker.ListDevicesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDevices")
	}

	var r0 *sagemaker.ListDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListDevicesInput, ...func(*sagemaker.Options)) (*sagemaker.ListDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListDevicesInput, ...func(*sagemaker.Options)) *sagemaker.ListDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListDevicesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomains(ctx context.Context, params *sagemaker.ListDomainsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 *sagemaker.ListDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListDomainsInput, ...func(*sagemaker.Options)) (*sagemaker.ListDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListDomainsInput, ...func(*sagemaker.Options)) *sagemaker.ListDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListDomainsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEdgeDeploymentPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEdgeDeploymentPlans(ctx context.Context, params *sagemaker.ListEdgeDeploymentPlansInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListEdgeDeploymentPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEdgeDeploymentPlans")
	}

	var r0 *sagemaker.ListEdgeDeploymentPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListEdgeDeploymentPlansInput, ...func(*sagemaker.Options)) (*sagemaker.ListEdgeDeploymentPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListEdgeDeploymentPlansInput, ...func(*sagemaker.Options)) *sagemaker.ListEdgeDeploymentPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListEdgeDeploymentPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListEdgeDeploymentPlansInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEdgePackagingJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEdgePackagingJobs(ctx context.Context, params *sagemaker.ListEdgePackagingJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListEdgePackagingJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEdgePackagingJobs")
	}

	var r0 *sagemaker.ListEdgePackagingJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListEdgePackagingJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListEdgePackagingJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListEdgePackagingJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListEdgePackagingJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListEdgePackagingJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListEdgePackagingJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpointConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEndpointConfigs(ctx context.Context, params *sagemaker.ListEndpointConfigsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListEndpointConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEndpointConfigs")
	}

	var r0 *sagemaker.ListEndpointConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListEndpointConfigsInput, ...func(*sagemaker.Options)) (*sagemaker.ListEndpointConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListEndpointConfigsInput, ...func(*sagemaker.Options)) *sagemaker.ListEndpointConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListEndpointConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListEndpointConfigsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEndpoints provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEndpoints(ctx context.Context, params *sagemaker.ListEndpointsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListEndpointsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEndpoints")
	}

	var r0 *sagemaker.ListEndpointsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListEndpointsInput, ...func(*sagemaker.Options)) (*sagemaker.ListEndpointsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListEndpointsInput, ...func(*sagemaker.Options)) *sagemaker.ListEndpointsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListEndpointsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListEndpointsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListExperiments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListExperiments(ctx context.Context, params *sagemaker.ListExperimentsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListExperimentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListExperiments")
	}

	var r0 *sagemaker.ListExperimentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListExperimentsInput, ...func(*sagemaker.Options)) (*sagemaker.ListExperimentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListExperimentsInput, ...func(*sagemaker.Options)) *sagemaker.ListExperimentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListExperimentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListExperimentsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFeatureGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFeatureGroups(ctx context.Context, params *sagemaker.ListFeatureGroupsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListFeatureGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFeatureGroups")
	}

	var r0 *sagemaker.ListFeatureGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListFeatureGroupsInput, ...func(*sagemaker.Options)) (*sagemaker.ListFeatureGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListFeatureGroupsInput, ...func(*sagemaker.Options)) *sagemaker.ListFeatureGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListFeatureGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListFeatureGroupsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFlowDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFlowDefinitions(ctx context.Context, params *sagemaker.ListFlowDefinitionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListFlowDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFlowDefinitions")
	}

	var r0 *sagemaker.ListFlowDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListFlowDefinitionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListFlowDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListFlowDefinitionsInput, ...func(*sagemaker.Options)) *sagemaker.ListFlowDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListFlowDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListFlowDefinitionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHubContentVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHubContentVersions(ctx context.Context, params *sagemaker.ListHubContentVersionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListHubContentVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHubContentVersions")
	}

	var r0 *sagemaker.ListHubContentVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHubContentVersionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListHubContentVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHubContentVersionsInput, ...func(*sagemaker.Options)) *sagemaker.ListHubContentVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListHubContentVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListHubContentVersionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHubContents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHubContents(ctx context.Context, params *sagemaker.ListHubContentsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListHubContentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHubContents")
	}

	var r0 *sagemaker.ListHubContentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHubContentsInput, ...func(*sagemaker.Options)) (*sagemaker.ListHubContentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHubContentsInput, ...func(*sagemaker.Options)) *sagemaker.ListHubContentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListHubContentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListHubContentsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHubs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHubs(ctx context.Context, params *sagemaker.ListHubsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListHubsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHubs")
	}

	var r0 *sagemaker.ListHubsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHubsInput, ...func(*sagemaker.Options)) (*sagemaker.ListHubsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHubsInput, ...func(*sagemaker.Options)) *sagemaker.ListHubsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListHubsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListHubsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHumanTaskUis provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHumanTaskUis(ctx context.Context, params *sagemaker.ListHumanTaskUisInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListHumanTaskUisOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHumanTaskUis")
	}

	var r0 *sagemaker.ListHumanTaskUisOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHumanTaskUisInput, ...func(*sagemaker.Options)) (*sagemaker.ListHumanTaskUisOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHumanTaskUisInput, ...func(*sagemaker.Options)) *sagemaker.ListHumanTaskUisOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListHumanTaskUisOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListHumanTaskUisInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListHyperParameterTuningJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListHyperParameterTuningJobs(ctx context.Context, params *sagemaker.ListHyperParameterTuningJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListHyperParameterTuningJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListHyperParameterTuningJobs")
	}

	var r0 *sagemaker.ListHyperParameterTuningJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHyperParameterTuningJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListHyperParameterTuningJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListHyperParameterTuningJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListHyperParameterTuningJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListHyperParameterTuningJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListHyperParameterTuningJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImageVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImageVersions(ctx context.Context, params *sagemaker.ListImageVersionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListImageVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImageVersions")
	}

	var r0 *sagemaker.ListImageVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListImageVersionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListImageVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListImageVersionsInput, ...func(*sagemaker.Options)) *sagemaker.ListImageVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListImageVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListImageVersionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImages(ctx context.Context, params *sagemaker.ListImagesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListImagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImages")
	}

	var r0 *sagemaker.ListImagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListImagesInput, ...func(*sagemaker.Options)) (*sagemaker.ListImagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListImagesInput, ...func(*sagemaker.Options)) *sagemaker.ListImagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListImagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListImagesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInferenceComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInferenceComponents(ctx context.Context, params *sagemaker.ListInferenceComponentsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListInferenceComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInferenceComponents")
	}

	var r0 *sagemaker.ListInferenceComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListInferenceComponentsInput, ...func(*sagemaker.Options)) (*sagemaker.ListInferenceComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListInferenceComponentsInput, ...func(*sagemaker.Options)) *sagemaker.ListInferenceComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListInferenceComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListInferenceComponentsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInferenceExperiments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInferenceExperiments(ctx context.Context, params *sagemaker.ListInferenceExperimentsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListInferenceExperimentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInferenceExperiments")
	}

	var r0 *sagemaker.ListInferenceExperimentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListInferenceExperimentsInput, ...func(*sagemaker.Options)) (*sagemaker.ListInferenceExperimentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListInferenceExperimentsInput, ...func(*sagemaker.Options)) *sagemaker.ListInferenceExperimentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListInferenceExperimentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListInferenceExperimentsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInferenceRecommendationsJobSteps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInferenceRecommendationsJobSteps(ctx context.Context, params *sagemaker.ListInferenceRecommendationsJobStepsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListInferenceRecommendationsJobStepsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInferenceRecommendationsJobSteps")
	}

	var r0 *sagemaker.ListInferenceRecommendationsJobStepsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListInferenceRecommendationsJobStepsInput, ...func(*sagemaker.Options)) (*sagemaker.ListInferenceRecommendationsJobStepsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListInferenceRecommendationsJobStepsInput, ...func(*sagemaker.Options)) *sagemaker.ListInferenceRecommendationsJobStepsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListInferenceRecommendationsJobStepsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListInferenceRecommendationsJobStepsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInferenceRecommendationsJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInferenceRecommendationsJobs(ctx context.Context, params *sagemaker.ListInferenceRecommendationsJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListInferenceRecommendationsJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInferenceRecommendationsJobs")
	}

	var r0 *sagemaker.ListInferenceRecommendationsJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListInferenceRecommendationsJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListInferenceRecommendationsJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListInferenceRecommendationsJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListInferenceRecommendationsJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListInferenceRecommendationsJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListInferenceRecommendationsJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLabelingJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLabelingJobs(ctx context.Context, params *sagemaker.ListLabelingJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListLabelingJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLabelingJobs")
	}

	var r0 *sagemaker.ListLabelingJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListLabelingJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListLabelingJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListLabelingJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListLabelingJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListLabelingJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListLabelingJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLabelingJobsForWorkteam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLabelingJobsForWorkteam(ctx context.Context, params *sagemaker.ListLabelingJobsForWorkteamInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListLabelingJobsForWorkteamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLabelingJobsForWorkteam")
	}

	var r0 *sagemaker.ListLabelingJobsForWorkteamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListLabelingJobsForWorkteamInput, ...func(*sagemaker.Options)) (*sagemaker.ListLabelingJobsForWorkteamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListLabelingJobsForWorkteamInput, ...func(*sagemaker.Options)) *sagemaker.ListLabelingJobsForWorkteamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListLabelingJobsForWorkteamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListLabelingJobsForWorkteamInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLineageGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLineageGroups(ctx context.Context, params *sagemaker.ListLineageGroupsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListLineageGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLineageGroups")
	}

	var r0 *sagemaker.ListLineageGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListLineageGroupsInput, ...func(*sagemaker.Options)) (*sagemaker.ListLineageGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListLineageGroupsInput, ...func(*sagemaker.Options)) *sagemaker.ListLineageGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListLineageGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListLineageGroupsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMlflowTrackingServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMlflowTrackingServers(ctx context.Context, params *sagemaker.ListMlflowTrackingServersInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListMlflowTrackingServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMlflowTrackingServers")
	}

	var r0 *sagemaker.ListMlflowTrackingServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMlflowTrackingServersInput, ...func(*sagemaker.Options)) (*sagemaker.ListMlflowTrackingServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMlflowTrackingServersInput, ...func(*sagemaker.Options)) *sagemaker.ListMlflowTrackingServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListMlflowTrackingServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListMlflowTrackingServersInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelBiasJobDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelBiasJobDefinitions(ctx context.Context, params *sagemaker.ListModelBiasJobDefinitionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelBiasJobDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelBiasJobDefinitions")
	}

	var r0 *sagemaker.ListModelBiasJobDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelBiasJobDefinitionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelBiasJobDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelBiasJobDefinitionsInput, ...func(*sagemaker.Options)) *sagemaker.ListModelBiasJobDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelBiasJobDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelBiasJobDefinitionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelCardExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelCardExportJobs(ctx context.Context, params *sagemaker.ListModelCardExportJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelCardExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelCardExportJobs")
	}

	var r0 *sagemaker.ListModelCardExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelCardExportJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelCardExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelCardExportJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListModelCardExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelCardExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelCardExportJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelCardVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelCardVersions(ctx context.Context, params *sagemaker.ListModelCardVersionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelCardVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelCardVersions")
	}

	var r0 *sagemaker.ListModelCardVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelCardVersionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelCardVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelCardVersionsInput, ...func(*sagemaker.Options)) *sagemaker.ListModelCardVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelCardVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelCardVersionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelCards provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelCards(ctx context.Context, params *sagemaker.ListModelCardsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelCardsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelCards")
	}

	var r0 *sagemaker.ListModelCardsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelCardsInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelCardsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelCardsInput, ...func(*sagemaker.Options)) *sagemaker.ListModelCardsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelCardsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelCardsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelExplainabilityJobDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelExplainabilityJobDefinitions(ctx context.Context, params *sagemaker.ListModelExplainabilityJobDefinitionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelExplainabilityJobDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelExplainabilityJobDefinitions")
	}

	var r0 *sagemaker.ListModelExplainabilityJobDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelExplainabilityJobDefinitionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelExplainabilityJobDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelExplainabilityJobDefinitionsInput, ...func(*sagemaker.Options)) *sagemaker.ListModelExplainabilityJobDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelExplainabilityJobDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelExplainabilityJobDefinitionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelMetadata(ctx context.Context, params *sagemaker.ListModelMetadataInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelMetadata")
	}

	var r0 *sagemaker.ListModelMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelMetadataInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelMetadataInput, ...func(*sagemaker.Options)) *sagemaker.ListModelMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelMetadataInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelPackageGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelPackageGroups(ctx context.Context, params *sagemaker.ListModelPackageGroupsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelPackageGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelPackageGroups")
	}

	var r0 *sagemaker.ListModelPackageGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelPackageGroupsInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelPackageGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelPackageGroupsInput, ...func(*sagemaker.Options)) *sagemaker.ListModelPackageGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelPackageGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelPackageGroupsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelPackages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelPackages(ctx context.Context, params *sagemaker.ListModelPackagesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelPackagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelPackages")
	}

	var r0 *sagemaker.ListModelPackagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelPackagesInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelPackagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelPackagesInput, ...func(*sagemaker.Options)) *sagemaker.ListModelPackagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelPackagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelPackagesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModelQualityJobDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModelQualityJobDefinitions(ctx context.Context, params *sagemaker.ListModelQualityJobDefinitionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelQualityJobDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModelQualityJobDefinitions")
	}

	var r0 *sagemaker.ListModelQualityJobDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelQualityJobDefinitionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelQualityJobDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelQualityJobDefinitionsInput, ...func(*sagemaker.Options)) *sagemaker.ListModelQualityJobDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelQualityJobDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelQualityJobDefinitionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListModels(ctx context.Context, params *sagemaker.ListModelsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListModels")
	}

	var r0 *sagemaker.ListModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelsInput, ...func(*sagemaker.Options)) (*sagemaker.ListModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListModelsInput, ...func(*sagemaker.Options)) *sagemaker.ListModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListModelsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitoringAlertHistory provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMonitoringAlertHistory(ctx context.Context, params *sagemaker.ListMonitoringAlertHistoryInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringAlertHistoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitoringAlertHistory")
	}

	var r0 *sagemaker.ListMonitoringAlertHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMonitoringAlertHistoryInput, ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringAlertHistoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMonitoringAlertHistoryInput, ...func(*sagemaker.Options)) *sagemaker.ListMonitoringAlertHistoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListMonitoringAlertHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListMonitoringAlertHistoryInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitoringAlerts provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMonitoringAlerts(ctx context.Context, params *sagemaker.ListMonitoringAlertsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringAlertsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitoringAlerts")
	}

	var r0 *sagemaker.ListMonitoringAlertsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMonitoringAlertsInput, ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringAlertsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMonitoringAlertsInput, ...func(*sagemaker.Options)) *sagemaker.ListMonitoringAlertsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListMonitoringAlertsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListMonitoringAlertsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitoringExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMonitoringExecutions(ctx context.Context, params *sagemaker.ListMonitoringExecutionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitoringExecutions")
	}

	var r0 *sagemaker.ListMonitoringExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMonitoringExecutionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMonitoringExecutionsInput, ...func(*sagemaker.Options)) *sagemaker.ListMonitoringExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListMonitoringExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListMonitoringExecutionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMonitoringSchedules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMonitoringSchedules(ctx context.Context, params *sagemaker.ListMonitoringSchedulesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringSchedulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMonitoringSchedules")
	}

	var r0 *sagemaker.ListMonitoringSchedulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMonitoringSchedulesInput, ...func(*sagemaker.Options)) (*sagemaker.ListMonitoringSchedulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListMonitoringSchedulesInput, ...func(*sagemaker.Options)) *sagemaker.ListMonitoringSchedulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListMonitoringSchedulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListMonitoringSchedulesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotebookInstanceLifecycleConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNotebookInstanceLifecycleConfigs(ctx context.Context, params *sagemaker.ListNotebookInstanceLifecycleConfigsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNotebookInstanceLifecycleConfigs")
	}

	var r0 *sagemaker.ListNotebookInstanceLifecycleConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListNotebookInstanceLifecycleConfigsInput, ...func(*sagemaker.Options)) (*sagemaker.ListNotebookInstanceLifecycleConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListNotebookInstanceLifecycleConfigsInput, ...func(*sagemaker.Options)) *sagemaker.ListNotebookInstanceLifecycleConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListNotebookInstanceLifecycleConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListNotebookInstanceLifecycleConfigsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListNotebookInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListNotebookInstances(ctx context.Context, params *sagemaker.ListNotebookInstancesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListNotebookInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListNotebookInstances")
	}

	var r0 *sagemaker.ListNotebookInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListNotebookInstancesInput, ...func(*sagemaker.Options)) (*sagemaker.ListNotebookInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListNotebookInstancesInput, ...func(*sagemaker.Options)) *sagemaker.ListNotebookInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListNotebookInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListNotebookInstancesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOptimizationJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOptimizationJobs(ctx context.Context, params *sagemaker.ListOptimizationJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListOptimizationJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOptimizationJobs")
	}

	var r0 *sagemaker.ListOptimizationJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListOptimizationJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListOptimizationJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListOptimizationJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListOptimizationJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListOptimizationJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListOptimizationJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPartnerApps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPartnerApps(ctx context.Context, params *sagemaker.ListPartnerAppsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListPartnerAppsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPartnerApps")
	}

	var r0 *sagemaker.ListPartnerAppsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPartnerAppsInput, ...func(*sagemaker.Options)) (*sagemaker.ListPartnerAppsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPartnerAppsInput, ...func(*sagemaker.Options)) *sagemaker.ListPartnerAppsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListPartnerAppsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListPartnerAppsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelineExecutionSteps provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPipelineExecutionSteps(ctx context.Context, params *sagemaker.ListPipelineExecutionStepsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListPipelineExecutionStepsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineExecutionSteps")
	}

	var r0 *sagemaker.ListPipelineExecutionStepsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelineExecutionStepsInput, ...func(*sagemaker.Options)) (*sagemaker.ListPipelineExecutionStepsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelineExecutionStepsInput, ...func(*sagemaker.Options)) *sagemaker.ListPipelineExecutionStepsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListPipelineExecutionStepsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListPipelineExecutionStepsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelineExecutions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPipelineExecutions(ctx context.Context, params *sagemaker.ListPipelineExecutionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListPipelineExecutionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineExecutions")
	}

	var r0 *sagemaker.ListPipelineExecutionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelineExecutionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListPipelineExecutionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelineExecutionsInput, ...func(*sagemaker.Options)) *sagemaker.ListPipelineExecutionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListPipelineExecutionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListPipelineExecutionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelineParametersForExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPipelineParametersForExecution(ctx context.Context, params *sagemaker.ListPipelineParametersForExecutionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListPipelineParametersForExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineParametersForExecution")
	}

	var r0 *sagemaker.ListPipelineParametersForExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelineParametersForExecutionInput, ...func(*sagemaker.Options)) (*sagemaker.ListPipelineParametersForExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelineParametersForExecutionInput, ...func(*sagemaker.Options)) *sagemaker.ListPipelineParametersForExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListPipelineParametersForExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListPipelineParametersForExecutionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelineVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPipelineVersions(ctx context.Context, params *sagemaker.ListPipelineVersionsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListPipelineVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelineVersions")
	}

	var r0 *sagemaker.ListPipelineVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelineVersionsInput, ...func(*sagemaker.Options)) (*sagemaker.ListPipelineVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelineVersionsInput, ...func(*sagemaker.Options)) *sagemaker.ListPipelineVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListPipelineVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListPipelineVersionsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPipelines(ctx context.Context, params *sagemaker.ListPipelinesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListPipelinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPipelines")
	}

	var r0 *sagemaker.ListPipelinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelinesInput, ...func(*sagemaker.Options)) (*sagemaker.ListPipelinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListPipelinesInput, ...func(*sagemaker.Options)) *sagemaker.ListPipelinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListPipelinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListPipelinesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProcessingJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProcessingJobs(ctx context.Context, params *sagemaker.ListProcessingJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListProcessingJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProcessingJobs")
	}

	var r0 *sagemaker.ListProcessingJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListProcessingJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListProcessingJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListProcessingJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListProcessingJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListProcessingJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListProcessingJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListProjects provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListProjects(ctx context.Context, params *sagemaker.ListProjectsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListProjectsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListProjects")
	}

	var r0 *sagemaker.ListProjectsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListProjectsInput, ...func(*sagemaker.Options)) (*sagemaker.ListProjectsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListProjectsInput, ...func(*sagemaker.Options)) *sagemaker.ListProjectsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListProjectsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListProjectsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceCatalogs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceCatalogs(ctx context.Context, params *sagemaker.ListResourceCatalogsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListResourceCatalogsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceCatalogs")
	}

	var r0 *sagemaker.ListResourceCatalogsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListResourceCatalogsInput, ...func(*sagemaker.Options)) (*sagemaker.ListResourceCatalogsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListResourceCatalogsInput, ...func(*sagemaker.Options)) *sagemaker.ListResourceCatalogsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListResourceCatalogsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListResourceCatalogsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSpaces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSpaces(ctx context.Context, params *sagemaker.ListSpacesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListSpacesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSpaces")
	}

	var r0 *sagemaker.ListSpacesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListSpacesInput, ...func(*sagemaker.Options)) (*sagemaker.ListSpacesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListSpacesInput, ...func(*sagemaker.Options)) *sagemaker.ListSpacesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListSpacesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListSpacesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStageDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStageDevices(ctx context.Context, params *sagemaker.ListStageDevicesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListStageDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStageDevices")
	}

	var r0 *sagemaker.ListStageDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListStageDevicesInput, ...func(*sagemaker.Options)) (*sagemaker.ListStageDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListStageDevicesInput, ...func(*sagemaker.Options)) *sagemaker.ListStageDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListStageDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListStageDevicesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListStudioLifecycleConfigs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListStudioLifecycleConfigs(ctx context.Context, params *sagemaker.ListStudioLifecycleConfigsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListStudioLifecycleConfigsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListStudioLifecycleConfigs")
	}

	var r0 *sagemaker.ListStudioLifecycleConfigsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListStudioLifecycleConfigsInput, ...func(*sagemaker.Options)) (*sagemaker.ListStudioLifecycleConfigsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListStudioLifecycleConfigsInput, ...func(*sagemaker.Options)) *sagemaker.ListStudioLifecycleConfigsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListStudioLifecycleConfigsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListStudioLifecycleConfigsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscribedWorkteams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscribedWorkteams(ctx context.Context, params *sagemaker.ListSubscribedWorkteamsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListSubscribedWorkteamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscribedWorkteams")
	}

	var r0 *sagemaker.ListSubscribedWorkteamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListSubscribedWorkteamsInput, ...func(*sagemaker.Options)) (*sagemaker.ListSubscribedWorkteamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListSubscribedWorkteamsInput, ...func(*sagemaker.Options)) *sagemaker.ListSubscribedWorkteamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListSubscribedWorkteamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListSubscribedWorkteamsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTags provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTags(ctx context.Context, params *sagemaker.ListTagsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListTagsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTags")
	}

	var r0 *sagemaker.ListTagsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTagsInput, ...func(*sagemaker.Options)) (*sagemaker.ListTagsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTagsInput, ...func(*sagemaker.Options)) *sagemaker.ListTagsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListTagsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListTagsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrainingJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrainingJobs(ctx context.Context, params *sagemaker.ListTrainingJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListTrainingJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrainingJobs")
	}

	var r0 *sagemaker.ListTrainingJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrainingJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListTrainingJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrainingJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListTrainingJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListTrainingJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListTrainingJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrainingJobsForHyperParameterTuningJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrainingJobsForHyperParameterTuningJob(ctx context.Context, params *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrainingJobsForHyperParameterTuningJob")
	}

	var r0 *sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, ...func(*sagemaker.Options)) (*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, ...func(*sagemaker.Options)) *sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListTrainingJobsForHyperParameterTuningJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListTrainingJobsForHyperParameterTuningJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrainingPlans provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrainingPlans(ctx context.Context, params *sagemaker.ListTrainingPlansInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListTrainingPlansOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrainingPlans")
	}

	var r0 *sagemaker.ListTrainingPlansOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrainingPlansInput, ...func(*sagemaker.Options)) (*sagemaker.ListTrainingPlansOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrainingPlansInput, ...func(*sagemaker.Options)) *sagemaker.ListTrainingPlansOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListTrainingPlansOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListTrainingPlansInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTransformJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTransformJobs(ctx context.Context, params *sagemaker.ListTransformJobsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListTransformJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTransformJobs")
	}

	var r0 *sagemaker.ListTransformJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTransformJobsInput, ...func(*sagemaker.Options)) (*sagemaker.ListTransformJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTransformJobsInput, ...func(*sagemaker.Options)) *sagemaker.ListTransformJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListTransformJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListTransformJobsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrialComponents provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrialComponents(ctx context.Context, params *sagemaker.ListTrialComponentsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListTrialComponentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrialComponents")
	}

	var r0 *sagemaker.ListTrialComponentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrialComponentsInput, ...func(*sagemaker.Options)) (*sagemaker.ListTrialComponentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrialComponentsInput, ...func(*sagemaker.Options)) *sagemaker.ListTrialComponentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListTrialComponentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListTrialComponentsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTrials provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTrials(ctx context.Context, params *sagemaker.ListTrialsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListTrialsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTrials")
	}

	var r0 *sagemaker.ListTrialsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrialsInput, ...func(*sagemaker.Options)) (*sagemaker.ListTrialsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListTrialsInput, ...func(*sagemaker.Options)) *sagemaker.ListTrialsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListTrialsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListTrialsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUltraServersByReservedCapacity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUltraServersByReservedCapacity(ctx context.Context, params *sagemaker.ListUltraServersByReservedCapacityInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListUltraServersByReservedCapacityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUltraServersByReservedCapacity")
	}

	var r0 *sagemaker.ListUltraServersByReservedCapacityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListUltraServersByReservedCapacityInput, ...func(*sagemaker.Options)) (*sagemaker.ListUltraServersByReservedCapacityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListUltraServersByReservedCapacityInput, ...func(*sagemaker.Options)) *sagemaker.ListUltraServersByReservedCapacityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListUltraServersByReservedCapacityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListUltraServersByReservedCapacityInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUserProfiles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUserProfiles(ctx context.Context, params *sagemaker.ListUserProfilesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListUserProfilesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUserProfiles")
	}

	var r0 *sagemaker.ListUserProfilesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListUserProfilesInput, ...func(*sagemaker.Options)) (*sagemaker.ListUserProfilesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListUserProfilesInput, ...func(*sagemaker.Options)) *sagemaker.ListUserProfilesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListUserProfilesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListUserProfilesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkforces provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkforces(ctx context.Context, params *sagemaker.ListWorkforcesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListWorkforcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkforces")
	}

	var r0 *sagemaker.ListWorkforcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListWorkforcesInput, ...func(*sagemaker.Options)) (*sagemaker.ListWorkforcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListWorkforcesInput, ...func(*sagemaker.Options)) *sagemaker.ListWorkforcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListWorkforcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListWorkforcesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkteams provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListWorkteams(ctx context.Context, params *sagemaker.ListWorkteamsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.ListWorkteamsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListWorkteams")
	}

	var r0 *sagemaker.ListWorkteamsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListWorkteamsInput, ...func(*sagemaker.Options)) (*sagemaker.ListWorkteamsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.ListWorkteamsInput, ...func(*sagemaker.Options)) *sagemaker.ListWorkteamsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.ListWorkteamsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.ListWorkteamsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() sagemaker.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 sagemaker.Options
	if rf, ok := ret.Get(0).(func() sagemaker.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sagemaker.Options)
	}

	return r0
}

// PutModelPackageGroupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutModelPackageGroupPolicy(ctx context.Context, params *sagemaker.PutModelPackageGroupPolicyInput, optFns ...func(*sagemaker.Options)) (*sagemaker.PutModelPackageGroupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutModelPackageGroupPolicy")
	}

	var r0 *sagemaker.PutModelPackageGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.PutModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) (*sagemaker.PutModelPackageGroupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.PutModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) *sagemaker.PutModelPackageGroupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.PutModelPackageGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.PutModelPackageGroupPolicyInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryLineage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) QueryLineage(ctx context.Context, params *sagemaker.QueryLineageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.QueryLineageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for QueryLineage")
	}

	var r0 *sagemaker.QueryLineageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.QueryLineageInput, ...func(*sagemaker.Options)) (*sagemaker.QueryLineageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.QueryLineageInput, ...func(*sagemaker.Options)) *sagemaker.QueryLineageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.QueryLineageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.QueryLineageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterDevices(ctx context.Context, params *sagemaker.RegisterDevicesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.RegisterDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDevices")
	}

	var r0 *sagemaker.RegisterDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.RegisterDevicesInput, ...func(*sagemaker.Options)) (*sagemaker.RegisterDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.RegisterDevicesInput, ...func(*sagemaker.Options)) *sagemaker.RegisterDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.RegisterDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.RegisterDevicesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenderUiTemplate provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RenderUiTemplate(ctx context.Context, params *sagemaker.RenderUiTemplateInput, optFns ...func(*sagemaker.Options)) (*sagemaker.RenderUiTemplateOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RenderUiTemplate")
	}

	var r0 *sagemaker.RenderUiTemplateOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.RenderUiTemplateInput, ...func(*sagemaker.Options)) (*sagemaker.RenderUiTemplateOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.RenderUiTemplateInput, ...func(*sagemaker.Options)) *sagemaker.RenderUiTemplateOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.RenderUiTemplateOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.RenderUiTemplateInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetryPipelineExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RetryPipelineExecution(ctx context.Context, params *sagemaker.RetryPipelineExecutionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.RetryPipelineExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetryPipelineExecution")
	}

	var r0 *sagemaker.RetryPipelineExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.RetryPipelineExecutionInput, ...func(*sagemaker.Options)) (*sagemaker.RetryPipelineExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.RetryPipelineExecutionInput, ...func(*sagemaker.Options)) *sagemaker.RetryPipelineExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.RetryPipelineExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.RetryPipelineExecutionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Search provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) Search(ctx context.Context, params *sagemaker.SearchInput, optFns ...func(*sagemaker.Options)) (*sagemaker.SearchOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 *sagemaker.SearchOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.SearchInput, ...func(*sagemaker.Options)) (*sagemaker.SearchOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.SearchInput, ...func(*sagemaker.Options)) *sagemaker.SearchOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.SearchOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.SearchInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchTrainingPlanOfferings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchTrainingPlanOfferings(ctx context.Context, params *sagemaker.SearchTrainingPlanOfferingsInput, optFns ...func(*sagemaker.Options)) (*sagemaker.SearchTrainingPlanOfferingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchTrainingPlanOfferings")
	}

	var r0 *sagemaker.SearchTrainingPlanOfferingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.SearchTrainingPlanOfferingsInput, ...func(*sagemaker.Options)) (*sagemaker.SearchTrainingPlanOfferingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.SearchTrainingPlanOfferingsInput, ...func(*sagemaker.Options)) *sagemaker.SearchTrainingPlanOfferingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.SearchTrainingPlanOfferingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.SearchTrainingPlanOfferingsInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPipelineExecutionStepFailure provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendPipelineExecutionStepFailure(ctx context.Context, params *sagemaker.SendPipelineExecutionStepFailureInput, optFns ...func(*sagemaker.Options)) (*sagemaker.SendPipelineExecutionStepFailureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendPipelineExecutionStepFailure")
	}

	var r0 *sagemaker.SendPipelineExecutionStepFailureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.SendPipelineExecutionStepFailureInput, ...func(*sagemaker.Options)) (*sagemaker.SendPipelineExecutionStepFailureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.SendPipelineExecutionStepFailureInput, ...func(*sagemaker.Options)) *sagemaker.SendPipelineExecutionStepFailureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.SendPipelineExecutionStepFailureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.SendPipelineExecutionStepFailureInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendPipelineExecutionStepSuccess provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SendPipelineExecutionStepSuccess(ctx context.Context, params *sagemaker.SendPipelineExecutionStepSuccessInput, optFns ...func(*sagemaker.Options)) (*sagemaker.SendPipelineExecutionStepSuccessOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendPipelineExecutionStepSuccess")
	}

	var r0 *sagemaker.SendPipelineExecutionStepSuccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.SendPipelineExecutionStepSuccessInput, ...func(*sagemaker.Options)) (*sagemaker.SendPipelineExecutionStepSuccessOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.SendPipelineExecutionStepSuccessInput, ...func(*sagemaker.Options)) *sagemaker.SendPipelineExecutionStepSuccessOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.SendPipelineExecutionStepSuccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.SendPipelineExecutionStepSuccessInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartEdgeDeploymentStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartEdgeDeploymentStage(ctx context.Context, params *sagemaker.StartEdgeDeploymentStageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StartEdgeDeploymentStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartEdgeDeploymentStage")
	}

	var r0 *sagemaker.StartEdgeDeploymentStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartEdgeDeploymentStageInput, ...func(*sagemaker.Options)) (*sagemaker.StartEdgeDeploymentStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartEdgeDeploymentStageInput, ...func(*sagemaker.Options)) *sagemaker.StartEdgeDeploymentStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StartEdgeDeploymentStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StartEdgeDeploymentStageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartInferenceExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartInferenceExperiment(ctx context.Context, params *sagemaker.StartInferenceExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StartInferenceExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartInferenceExperiment")
	}

	var r0 *sagemaker.StartInferenceExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartInferenceExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.StartInferenceExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartInferenceExperimentInput, ...func(*sagemaker.Options)) *sagemaker.StartInferenceExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StartInferenceExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StartInferenceExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMlflowTrackingServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMlflowTrackingServer(ctx context.Context, params *sagemaker.StartMlflowTrackingServerInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StartMlflowTrackingServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMlflowTrackingServer")
	}

	var r0 *sagemaker.StartMlflowTrackingServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartMlflowTrackingServerInput, ...func(*sagemaker.Options)) (*sagemaker.StartMlflowTrackingServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartMlflowTrackingServerInput, ...func(*sagemaker.Options)) *sagemaker.StartMlflowTrackingServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StartMlflowTrackingServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StartMlflowTrackingServerInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMonitoringSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMonitoringSchedule(ctx context.Context, params *sagemaker.StartMonitoringScheduleInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StartMonitoringScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMonitoringSchedule")
	}

	var r0 *sagemaker.StartMonitoringScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartMonitoringScheduleInput, ...func(*sagemaker.Options)) (*sagemaker.StartMonitoringScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartMonitoringScheduleInput, ...func(*sagemaker.Options)) *sagemaker.StartMonitoringScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StartMonitoringScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StartMonitoringScheduleInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartNotebookInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartNotebookInstance(ctx context.Context, params *sagemaker.StartNotebookInstanceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StartNotebookInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartNotebookInstance")
	}

	var r0 *sagemaker.StartNotebookInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartNotebookInstanceInput, ...func(*sagemaker.Options)) (*sagemaker.StartNotebookInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartNotebookInstanceInput, ...func(*sagemaker.Options)) *sagemaker.StartNotebookInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StartNotebookInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StartNotebookInstanceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartPipelineExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartPipelineExecution(ctx context.Context, params *sagemaker.StartPipelineExecutionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StartPipelineExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartPipelineExecution")
	}

	var r0 *sagemaker.StartPipelineExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartPipelineExecutionInput, ...func(*sagemaker.Options)) (*sagemaker.StartPipelineExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartPipelineExecutionInput, ...func(*sagemaker.Options)) *sagemaker.StartPipelineExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StartPipelineExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StartPipelineExecutionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSession provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSession(ctx context.Context, params *sagemaker.StartSessionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StartSessionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSession")
	}

	var r0 *sagemaker.StartSessionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartSessionInput, ...func(*sagemaker.Options)) (*sagemaker.StartSessionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StartSessionInput, ...func(*sagemaker.Options)) *sagemaker.StartSessionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StartSessionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StartSessionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopAutoMLJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopAutoMLJob(ctx context.Context, params *sagemaker.StopAutoMLJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopAutoMLJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopAutoMLJob")
	}

	var r0 *sagemaker.StopAutoMLJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopAutoMLJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopAutoMLJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopAutoMLJobInput, ...func(*sagemaker.Options)) *sagemaker.StopAutoMLJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopAutoMLJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopAutoMLJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopCompilationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopCompilationJob(ctx context.Context, params *sagemaker.StopCompilationJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopCompilationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopCompilationJob")
	}

	var r0 *sagemaker.StopCompilationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopCompilationJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopCompilationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopCompilationJobInput, ...func(*sagemaker.Options)) *sagemaker.StopCompilationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopCompilationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopCompilationJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopEdgeDeploymentStage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopEdgeDeploymentStage(ctx context.Context, params *sagemaker.StopEdgeDeploymentStageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopEdgeDeploymentStageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopEdgeDeploymentStage")
	}

	var r0 *sagemaker.StopEdgeDeploymentStageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopEdgeDeploymentStageInput, ...func(*sagemaker.Options)) (*sagemaker.StopEdgeDeploymentStageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopEdgeDeploymentStageInput, ...func(*sagemaker.Options)) *sagemaker.StopEdgeDeploymentStageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopEdgeDeploymentStageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopEdgeDeploymentStageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopEdgePackagingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopEdgePackagingJob(ctx context.Context, params *sagemaker.StopEdgePackagingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopEdgePackagingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopEdgePackagingJob")
	}

	var r0 *sagemaker.StopEdgePackagingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopEdgePackagingJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopEdgePackagingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopEdgePackagingJobInput, ...func(*sagemaker.Options)) *sagemaker.StopEdgePackagingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopEdgePackagingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopEdgePackagingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopHyperParameterTuningJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopHyperParameterTuningJob(ctx context.Context, params *sagemaker.StopHyperParameterTuningJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopHyperParameterTuningJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopHyperParameterTuningJob")
	}

	var r0 *sagemaker.StopHyperParameterTuningJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopHyperParameterTuningJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopHyperParameterTuningJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopHyperParameterTuningJobInput, ...func(*sagemaker.Options)) *sagemaker.StopHyperParameterTuningJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopHyperParameterTuningJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopHyperParameterTuningJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInferenceExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopInferenceExperiment(ctx context.Context, params *sagemaker.StopInferenceExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopInferenceExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopInferenceExperiment")
	}

	var r0 *sagemaker.StopInferenceExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopInferenceExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.StopInferenceExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopInferenceExperimentInput, ...func(*sagemaker.Options)) *sagemaker.StopInferenceExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopInferenceExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopInferenceExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopInferenceRecommendationsJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopInferenceRecommendationsJob(ctx context.Context, params *sagemaker.StopInferenceRecommendationsJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopInferenceRecommendationsJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopInferenceRecommendationsJob")
	}

	var r0 *sagemaker.StopInferenceRecommendationsJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopInferenceRecommendationsJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) *sagemaker.StopInferenceRecommendationsJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopInferenceRecommendationsJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopInferenceRecommendationsJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopLabelingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopLabelingJob(ctx context.Context, params *sagemaker.StopLabelingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopLabelingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopLabelingJob")
	}

	var r0 *sagemaker.StopLabelingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopLabelingJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopLabelingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopLabelingJobInput, ...func(*sagemaker.Options)) *sagemaker.StopLabelingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopLabelingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopLabelingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMlflowTrackingServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopMlflowTrackingServer(ctx context.Context, params *sagemaker.StopMlflowTrackingServerInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopMlflowTrackingServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopMlflowTrackingServer")
	}

	var r0 *sagemaker.StopMlflowTrackingServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopMlflowTrackingServerInput, ...func(*sagemaker.Options)) (*sagemaker.StopMlflowTrackingServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopMlflowTrackingServerInput, ...func(*sagemaker.Options)) *sagemaker.StopMlflowTrackingServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopMlflowTrackingServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopMlflowTrackingServerInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopMonitoringSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopMonitoringSchedule(ctx context.Context, params *sagemaker.StopMonitoringScheduleInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopMonitoringScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopMonitoringSchedule")
	}

	var r0 *sagemaker.StopMonitoringScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopMonitoringScheduleInput, ...func(*sagemaker.Options)) (*sagemaker.StopMonitoringScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopMonitoringScheduleInput, ...func(*sagemaker.Options)) *sagemaker.StopMonitoringScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopMonitoringScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopMonitoringScheduleInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopNotebookInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopNotebookInstance(ctx context.Context, params *sagemaker.StopNotebookInstanceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopNotebookInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopNotebookInstance")
	}

	var r0 *sagemaker.StopNotebookInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopNotebookInstanceInput, ...func(*sagemaker.Options)) (*sagemaker.StopNotebookInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopNotebookInstanceInput, ...func(*sagemaker.Options)) *sagemaker.StopNotebookInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopNotebookInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopNotebookInstanceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopOptimizationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopOptimizationJob(ctx context.Context, params *sagemaker.StopOptimizationJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopOptimizationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopOptimizationJob")
	}

	var r0 *sagemaker.StopOptimizationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopOptimizationJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopOptimizationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopOptimizationJobInput, ...func(*sagemaker.Options)) *sagemaker.StopOptimizationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopOptimizationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopOptimizationJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopPipelineExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopPipelineExecution(ctx context.Context, params *sagemaker.StopPipelineExecutionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopPipelineExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopPipelineExecution")
	}

	var r0 *sagemaker.StopPipelineExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopPipelineExecutionInput, ...func(*sagemaker.Options)) (*sagemaker.StopPipelineExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopPipelineExecutionInput, ...func(*sagemaker.Options)) *sagemaker.StopPipelineExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopPipelineExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopPipelineExecutionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopProcessingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopProcessingJob(ctx context.Context, params *sagemaker.StopProcessingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopProcessingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopProcessingJob")
	}

	var r0 *sagemaker.StopProcessingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopProcessingJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopProcessingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopProcessingJobInput, ...func(*sagemaker.Options)) *sagemaker.StopProcessingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopProcessingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopProcessingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTrainingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopTrainingJob(ctx context.Context, params *sagemaker.StopTrainingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopTrainingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopTrainingJob")
	}

	var r0 *sagemaker.StopTrainingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopTrainingJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopTrainingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopTrainingJobInput, ...func(*sagemaker.Options)) *sagemaker.StopTrainingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopTrainingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopTrainingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopTransformJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopTransformJob(ctx context.Context, params *sagemaker.StopTransformJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.StopTransformJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopTransformJob")
	}

	var r0 *sagemaker.StopTransformJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopTransformJobInput, ...func(*sagemaker.Options)) (*sagemaker.StopTransformJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.StopTransformJobInput, ...func(*sagemaker.Options)) *sagemaker.StopTransformJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.StopTransformJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.StopTransformJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAction provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAction(ctx context.Context, params *sagemaker.UpdateActionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateActionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAction")
	}

	var r0 *sagemaker.UpdateActionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateActionInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateActionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateActionInput, ...func(*sagemaker.Options)) *sagemaker.UpdateActionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateActionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateActionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAppImageConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAppImageConfig(ctx context.Context, params *sagemaker.UpdateAppImageConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateAppImageConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAppImageConfig")
	}

	var r0 *sagemaker.UpdateAppImageConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateAppImageConfigInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateAppImageConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateAppImageConfigInput, ...func(*sagemaker.Options)) *sagemaker.UpdateAppImageConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateAppImageConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateAppImageConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateArtifact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateArtifact(ctx context.Context, params *sagemaker.UpdateArtifactInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateArtifactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateArtifact")
	}

	var r0 *sagemaker.UpdateArtifactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateArtifactInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateArtifactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateArtifactInput, ...func(*sagemaker.Options)) *sagemaker.UpdateArtifactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateArtifactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateArtifactInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCluster(ctx context.Context, params *sagemaker.UpdateClusterInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCluster")
	}

	var r0 *sagemaker.UpdateClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateClusterInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateClusterInput, ...func(*sagemaker.Options)) *sagemaker.UpdateClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateClusterInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterSchedulerConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateClusterSchedulerConfig(ctx context.Context, params *sagemaker.UpdateClusterSchedulerConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateClusterSchedulerConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSchedulerConfig")
	}

	var r0 *sagemaker.UpdateClusterSchedulerConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateClusterSchedulerConfigInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateClusterSchedulerConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateClusterSchedulerConfigInput, ...func(*sagemaker.Options)) *sagemaker.UpdateClusterSchedulerConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateClusterSchedulerConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateClusterSchedulerConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateClusterSoftware provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateClusterSoftware(ctx context.Context, params *sagemaker.UpdateClusterSoftwareInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateClusterSoftwareOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClusterSoftware")
	}

	var r0 *sagemaker.UpdateClusterSoftwareOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateClusterSoftwareInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateClusterSoftwareOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateClusterSoftwareInput, ...func(*sagemaker.Options)) *sagemaker.UpdateClusterSoftwareOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateClusterSoftwareOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateClusterSoftwareInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCodeRepository provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCodeRepository(ctx context.Context, params *sagemaker.UpdateCodeRepositoryInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateCodeRepositoryOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCodeRepository")
	}

	var r0 *sagemaker.UpdateCodeRepositoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateCodeRepositoryInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateCodeRepositoryOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateCodeRepositoryInput, ...func(*sagemaker.Options)) *sagemaker.UpdateCodeRepositoryOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateCodeRepositoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateCodeRepositoryInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateComputeQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateComputeQuota(ctx context.Context, params *sagemaker.UpdateComputeQuotaInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateComputeQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateComputeQuota")
	}

	var r0 *sagemaker.UpdateComputeQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateComputeQuotaInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateComputeQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateComputeQuotaInput, ...func(*sagemaker.Options)) *sagemaker.UpdateComputeQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateComputeQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateComputeQuotaInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContext provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateContext(ctx context.Context, params *sagemaker.UpdateContextInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateContextOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateContext")
	}

	var r0 *sagemaker.UpdateContextOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateContextInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateContextOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateContextInput, ...func(*sagemaker.Options)) *sagemaker.UpdateContextOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateContextOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateContextInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceFleet provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeviceFleet(ctx context.Context, params *sagemaker.UpdateDeviceFleetInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateDeviceFleetOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceFleet")
	}

	var r0 *sagemaker.UpdateDeviceFleetOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateDeviceFleetInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateDeviceFleetOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateDeviceFleetInput, ...func(*sagemaker.Options)) *sagemaker.UpdateDeviceFleetOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateDeviceFleetOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateDeviceFleetInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDevices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDevices(ctx context.Context, params *sagemaker.UpdateDevicesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateDevicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDevices")
	}

	var r0 *sagemaker.UpdateDevicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateDevicesInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateDevicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateDevicesInput, ...func(*sagemaker.Options)) *sagemaker.UpdateDevicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateDevicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateDevicesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomain(ctx context.Context, params *sagemaker.UpdateDomainInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomain")
	}

	var r0 *sagemaker.UpdateDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateDomainInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateDomainInput, ...func(*sagemaker.Options)) *sagemaker.UpdateDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateDomainInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEndpoint provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEndpoint(ctx context.Context, params *sagemaker.UpdateEndpointInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateEndpointOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEndpoint")
	}

	var r0 *sagemaker.UpdateEndpointOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateEndpointInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateEndpointOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateEndpointInput, ...func(*sagemaker.Options)) *sagemaker.UpdateEndpointOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateEndpointOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateEndpointInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEndpointWeightsAndCapacities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateEndpointWeightsAndCapacities(ctx context.Context, params *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEndpointWeightsAndCapacities")
	}

	var r0 *sagemaker.UpdateEndpointWeightsAndCapacitiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, ...func(*sagemaker.Options)) *sagemaker.UpdateEndpointWeightsAndCapacitiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateEndpointWeightsAndCapacitiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateEndpointWeightsAndCapacitiesInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateExperiment(ctx context.Context, params *sagemaker.UpdateExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateExperiment")
	}

	var r0 *sagemaker.UpdateExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateExperimentInput, ...func(*sagemaker.Options)) *sagemaker.UpdateExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFeatureGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFeatureGroup(ctx context.Context, params *sagemaker.UpdateFeatureGroupInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateFeatureGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeatureGroup")
	}

	var r0 *sagemaker.UpdateFeatureGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateFeatureGroupInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateFeatureGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateFeatureGroupInput, ...func(*sagemaker.Options)) *sagemaker.UpdateFeatureGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateFeatureGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateFeatureGroupInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFeatureMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFeatureMetadata(ctx context.Context, params *sagemaker.UpdateFeatureMetadataInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateFeatureMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFeatureMetadata")
	}

	var r0 *sagemaker.UpdateFeatureMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateFeatureMetadataInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateFeatureMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateFeatureMetadataInput, ...func(*sagemaker.Options)) *sagemaker.UpdateFeatureMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateFeatureMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateFeatureMetadataInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHub provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHub(ctx context.Context, params *sagemaker.UpdateHubInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateHubOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHub")
	}

	var r0 *sagemaker.UpdateHubOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateHubInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateHubOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateHubInput, ...func(*sagemaker.Options)) *sagemaker.UpdateHubOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateHubOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateHubInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHubContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHubContent(ctx context.Context, params *sagemaker.UpdateHubContentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateHubContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHubContent")
	}

	var r0 *sagemaker.UpdateHubContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateHubContentInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateHubContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateHubContentInput, ...func(*sagemaker.Options)) *sagemaker.UpdateHubContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateHubContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateHubContentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateHubContentReference provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateHubContentReference(ctx context.Context, params *sagemaker.UpdateHubContentReferenceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateHubContentReferenceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHubContentReference")
	}

	var r0 *sagemaker.UpdateHubContentReferenceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateHubContentReferenceInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateHubContentReferenceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateHubContentReferenceInput, ...func(*sagemaker.Options)) *sagemaker.UpdateHubContentReferenceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateHubContentReferenceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateHubContentReferenceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateImage(ctx context.Context, params *sagemaker.UpdateImageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateImageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImage")
	}

	var r0 *sagemaker.UpdateImageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateImageInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateImageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateImageInput, ...func(*sagemaker.Options)) *sagemaker.UpdateImageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateImageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateImageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImageVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateImageVersion(ctx context.Context, params *sagemaker.UpdateImageVersionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateImageVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImageVersion")
	}

	var r0 *sagemaker.UpdateImageVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateImageVersionInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateImageVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateImageVersionInput, ...func(*sagemaker.Options)) *sagemaker.UpdateImageVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateImageVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateImageVersionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInferenceComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInferenceComponent(ctx context.Context, params *sagemaker.UpdateInferenceComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateInferenceComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInferenceComponent")
	}

	var r0 *sagemaker.UpdateInferenceComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateInferenceComponentInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateInferenceComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateInferenceComponentInput, ...func(*sagemaker.Options)) *sagemaker.UpdateInferenceComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateInferenceComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateInferenceComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInferenceComponentRuntimeConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInferenceComponentRuntimeConfig(ctx context.Context, params *sagemaker.UpdateInferenceComponentRuntimeConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateInferenceComponentRuntimeConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInferenceComponentRuntimeConfig")
	}

	var r0 *sagemaker.UpdateInferenceComponentRuntimeConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateInferenceComponentRuntimeConfigInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateInferenceComponentRuntimeConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateInferenceComponentRuntimeConfigInput, ...func(*sagemaker.Options)) *sagemaker.UpdateInferenceComponentRuntimeConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateInferenceComponentRuntimeConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateInferenceComponentRuntimeConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInferenceExperiment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInferenceExperiment(ctx context.Context, params *sagemaker.UpdateInferenceExperimentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateInferenceExperimentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInferenceExperiment")
	}

	var r0 *sagemaker.UpdateInferenceExperimentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateInferenceExperimentInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateInferenceExperimentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateInferenceExperimentInput, ...func(*sagemaker.Options)) *sagemaker.UpdateInferenceExperimentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateInferenceExperimentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateInferenceExperimentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMlflowTrackingServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMlflowTrackingServer(ctx context.Context, params *sagemaker.UpdateMlflowTrackingServerInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateMlflowTrackingServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMlflowTrackingServer")
	}

	var r0 *sagemaker.UpdateMlflowTrackingServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateMlflowTrackingServerInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateMlflowTrackingServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateMlflowTrackingServerInput, ...func(*sagemaker.Options)) *sagemaker.UpdateMlflowTrackingServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateMlflowTrackingServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateMlflowTrackingServerInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModelCard provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateModelCard(ctx context.Context, params *sagemaker.UpdateModelCardInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateModelCardOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModelCard")
	}

	var r0 *sagemaker.UpdateModelCardOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateModelCardInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateModelCardOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateModelCardInput, ...func(*sagemaker.Options)) *sagemaker.UpdateModelCardOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateModelCardOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateModelCardInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateModelPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateModelPackage(ctx context.Context, params *sagemaker.UpdateModelPackageInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateModelPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateModelPackage")
	}

	var r0 *sagemaker.UpdateModelPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateModelPackageInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateModelPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateModelPackageInput, ...func(*sagemaker.Options)) *sagemaker.UpdateModelPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateModelPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateModelPackageInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMonitoringAlert provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMonitoringAlert(ctx context.Context, params *sagemaker.UpdateMonitoringAlertInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateMonitoringAlertOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitoringAlert")
	}

	var r0 *sagemaker.UpdateMonitoringAlertOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateMonitoringAlertInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateMonitoringAlertOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateMonitoringAlertInput, ...func(*sagemaker.Options)) *sagemaker.UpdateMonitoringAlertOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateMonitoringAlertOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateMonitoringAlertInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMonitoringSchedule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMonitoringSchedule(ctx context.Context, params *sagemaker.UpdateMonitoringScheduleInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateMonitoringScheduleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMonitoringSchedule")
	}

	var r0 *sagemaker.UpdateMonitoringScheduleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateMonitoringScheduleInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateMonitoringScheduleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateMonitoringScheduleInput, ...func(*sagemaker.Options)) *sagemaker.UpdateMonitoringScheduleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateMonitoringScheduleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateMonitoringScheduleInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotebookInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNotebookInstance(ctx context.Context, params *sagemaker.UpdateNotebookInstanceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateNotebookInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotebookInstance")
	}

	var r0 *sagemaker.UpdateNotebookInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateNotebookInstanceInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateNotebookInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateNotebookInstanceInput, ...func(*sagemaker.Options)) *sagemaker.UpdateNotebookInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateNotebookInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateNotebookInstanceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateNotebookInstanceLifecycleConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateNotebookInstanceLifecycleConfig(ctx context.Context, params *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateNotebookInstanceLifecycleConfig")
	}

	var r0 *sagemaker.UpdateNotebookInstanceLifecycleConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) *sagemaker.UpdateNotebookInstanceLifecycleConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateNotebookInstanceLifecycleConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateNotebookInstanceLifecycleConfigInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePartnerApp provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePartnerApp(ctx context.Context, params *sagemaker.UpdatePartnerAppInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdatePartnerAppOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePartnerApp")
	}

	var r0 *sagemaker.UpdatePartnerAppOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdatePartnerAppInput, ...func(*sagemaker.Options)) (*sagemaker.UpdatePartnerAppOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdatePartnerAppInput, ...func(*sagemaker.Options)) *sagemaker.UpdatePartnerAppOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdatePartnerAppOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdatePartnerAppInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipeline provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePipeline(ctx context.Context, params *sagemaker.UpdatePipelineInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdatePipelineOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipeline")
	}

	var r0 *sagemaker.UpdatePipelineOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdatePipelineInput, ...func(*sagemaker.Options)) (*sagemaker.UpdatePipelineOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdatePipelineInput, ...func(*sagemaker.Options)) *sagemaker.UpdatePipelineOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdatePipelineOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdatePipelineInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipelineExecution provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePipelineExecution(ctx context.Context, params *sagemaker.UpdatePipelineExecutionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdatePipelineExecutionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipelineExecution")
	}

	var r0 *sagemaker.UpdatePipelineExecutionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdatePipelineExecutionInput, ...func(*sagemaker.Options)) (*sagemaker.UpdatePipelineExecutionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdatePipelineExecutionInput, ...func(*sagemaker.Options)) *sagemaker.UpdatePipelineExecutionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdatePipelineExecutionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdatePipelineExecutionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePipelineVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePipelineVersion(ctx context.Context, params *sagemaker.UpdatePipelineVersionInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdatePipelineVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePipelineVersion")
	}

	var r0 *sagemaker.UpdatePipelineVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdatePipelineVersionInput, ...func(*sagemaker.Options)) (*sagemaker.UpdatePipelineVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdatePipelineVersionInput, ...func(*sagemaker.Options)) *sagemaker.UpdatePipelineVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdatePipelineVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdatePipelineVersionInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProject provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateProject(ctx context.Context, params *sagemaker.UpdateProjectInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateProjectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProject")
	}

	var r0 *sagemaker.UpdateProjectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateProjectInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateProjectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateProjectInput, ...func(*sagemaker.Options)) *sagemaker.UpdateProjectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateProjectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateProjectInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSpace provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSpace(ctx context.Context, params *sagemaker.UpdateSpaceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateSpaceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSpace")
	}

	var r0 *sagemaker.UpdateSpaceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateSpaceInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateSpaceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateSpaceInput, ...func(*sagemaker.Options)) *sagemaker.UpdateSpaceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateSpaceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateSpaceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrainingJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrainingJob(ctx context.Context, params *sagemaker.UpdateTrainingJobInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateTrainingJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrainingJob")
	}

	var r0 *sagemaker.UpdateTrainingJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateTrainingJobInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateTrainingJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateTrainingJobInput, ...func(*sagemaker.Options)) *sagemaker.UpdateTrainingJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateTrainingJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateTrainingJobInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrial provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrial(ctx context.Context, params *sagemaker.UpdateTrialInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateTrialOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrial")
	}

	var r0 *sagemaker.UpdateTrialOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateTrialInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateTrialOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateTrialInput, ...func(*sagemaker.Options)) *sagemaker.UpdateTrialOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateTrialOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateTrialInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTrialComponent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTrialComponent(ctx context.Context, params *sagemaker.UpdateTrialComponentInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateTrialComponentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTrialComponent")
	}

	var r0 *sagemaker.UpdateTrialComponentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateTrialComponentInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateTrialComponentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateTrialComponentInput, ...func(*sagemaker.Options)) *sagemaker.UpdateTrialComponentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateTrialComponentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateTrialComponentInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUserProfile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUserProfile(ctx context.Context, params *sagemaker.UpdateUserProfileInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateUserProfileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserProfile")
	}

	var r0 *sagemaker.UpdateUserProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateUserProfileInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateUserProfileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateUserProfileInput, ...func(*sagemaker.Options)) *sagemaker.UpdateUserProfileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateUserProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateUserProfileInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkforce provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkforce(ctx context.Context, params *sagemaker.UpdateWorkforceInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateWorkforceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkforce")
	}

	var r0 *sagemaker.UpdateWorkforceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateWorkforceInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateWorkforceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateWorkforceInput, ...func(*sagemaker.Options)) *sagemaker.UpdateWorkforceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateWorkforceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateWorkforceInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWorkteam provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateWorkteam(ctx context.Context, params *sagemaker.UpdateWorkteamInput, optFns ...func(*sagemaker.Options)) (*sagemaker.UpdateWorkteamOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateWorkteam")
	}

	var r0 *sagemaker.UpdateWorkteamOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateWorkteamInput, ...func(*sagemaker.Options)) (*sagemaker.UpdateWorkteamOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemaker.UpdateWorkteamInput, ...func(*sagemaker.Options)) *sagemaker.UpdateWorkteamOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemaker.UpdateWorkteamOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemaker.UpdateWorkteamInput, ...func(*sagemaker.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
