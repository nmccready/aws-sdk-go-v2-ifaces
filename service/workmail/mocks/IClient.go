// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	workmail "github.com/aws/aws-sdk-go-v2/service/workmail"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateDelegateToResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateDelegateToResource(ctx context.Context, params *workmail.AssociateDelegateToResourceInput, optFns ...func(*workmail.Options)) (*workmail.AssociateDelegateToResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDelegateToResource")
	}

	var r0 *workmail.AssociateDelegateToResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.AssociateDelegateToResourceInput, ...func(*workmail.Options)) (*workmail.AssociateDelegateToResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.AssociateDelegateToResourceInput, ...func(*workmail.Options)) *workmail.AssociateDelegateToResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.AssociateDelegateToResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.AssociateDelegateToResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateMemberToGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateMemberToGroup(ctx context.Context, params *workmail.AssociateMemberToGroupInput, optFns ...func(*workmail.Options)) (*workmail.AssociateMemberToGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateMemberToGroup")
	}

	var r0 *workmail.AssociateMemberToGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.AssociateMemberToGroupInput, ...func(*workmail.Options)) (*workmail.AssociateMemberToGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.AssociateMemberToGroupInput, ...func(*workmail.Options)) *workmail.AssociateMemberToGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.AssociateMemberToGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.AssociateMemberToGroupInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssumeImpersonationRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssumeImpersonationRole(ctx context.Context, params *workmail.AssumeImpersonationRoleInput, optFns ...func(*workmail.Options)) (*workmail.AssumeImpersonationRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssumeImpersonationRole")
	}

	var r0 *workmail.AssumeImpersonationRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.AssumeImpersonationRoleInput, ...func(*workmail.Options)) (*workmail.AssumeImpersonationRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.AssumeImpersonationRoleInput, ...func(*workmail.Options)) *workmail.AssumeImpersonationRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.AssumeImpersonationRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.AssumeImpersonationRoleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelMailboxExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelMailboxExportJob(ctx context.Context, params *workmail.CancelMailboxExportJobInput, optFns ...func(*workmail.Options)) (*workmail.CancelMailboxExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelMailboxExportJob")
	}

	var r0 *workmail.CancelMailboxExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CancelMailboxExportJobInput, ...func(*workmail.Options)) (*workmail.CancelMailboxExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CancelMailboxExportJobInput, ...func(*workmail.Options)) *workmail.CancelMailboxExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CancelMailboxExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CancelMailboxExportJobInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAlias(ctx context.Context, params *workmail.CreateAliasInput, optFns ...func(*workmail.Options)) (*workmail.CreateAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAlias")
	}

	var r0 *workmail.CreateAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateAliasInput, ...func(*workmail.Options)) (*workmail.CreateAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateAliasInput, ...func(*workmail.Options)) *workmail.CreateAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateAliasInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateAvailabilityConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateAvailabilityConfiguration(ctx context.Context, params *workmail.CreateAvailabilityConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.CreateAvailabilityConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateAvailabilityConfiguration")
	}

	var r0 *workmail.CreateAvailabilityConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateAvailabilityConfigurationInput, ...func(*workmail.Options)) (*workmail.CreateAvailabilityConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateAvailabilityConfigurationInput, ...func(*workmail.Options)) *workmail.CreateAvailabilityConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateAvailabilityConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateAvailabilityConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroup(ctx context.Context, params *workmail.CreateGroupInput, optFns ...func(*workmail.Options)) (*workmail.CreateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *workmail.CreateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateGroupInput, ...func(*workmail.Options)) (*workmail.CreateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateGroupInput, ...func(*workmail.Options)) *workmail.CreateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateGroupInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateIdentityCenterApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateIdentityCenterApplication(ctx context.Context, params *workmail.CreateIdentityCenterApplicationInput, optFns ...func(*workmail.Options)) (*workmail.CreateIdentityCenterApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateIdentityCenterApplication")
	}

	var r0 *workmail.CreateIdentityCenterApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateIdentityCenterApplicationInput, ...func(*workmail.Options)) (*workmail.CreateIdentityCenterApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateIdentityCenterApplicationInput, ...func(*workmail.Options)) *workmail.CreateIdentityCenterApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateIdentityCenterApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateIdentityCenterApplicationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateImpersonationRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateImpersonationRole(ctx context.Context, params *workmail.CreateImpersonationRoleInput, optFns ...func(*workmail.Options)) (*workmail.CreateImpersonationRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateImpersonationRole")
	}

	var r0 *workmail.CreateImpersonationRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateImpersonationRoleInput, ...func(*workmail.Options)) (*workmail.CreateImpersonationRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateImpersonationRoleInput, ...func(*workmail.Options)) *workmail.CreateImpersonationRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateImpersonationRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateImpersonationRoleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMobileDeviceAccessRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMobileDeviceAccessRule(ctx context.Context, params *workmail.CreateMobileDeviceAccessRuleInput, optFns ...func(*workmail.Options)) (*workmail.CreateMobileDeviceAccessRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMobileDeviceAccessRule")
	}

	var r0 *workmail.CreateMobileDeviceAccessRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateMobileDeviceAccessRuleInput, ...func(*workmail.Options)) (*workmail.CreateMobileDeviceAccessRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateMobileDeviceAccessRuleInput, ...func(*workmail.Options)) *workmail.CreateMobileDeviceAccessRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateMobileDeviceAccessRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateMobileDeviceAccessRuleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOrganization(ctx context.Context, params *workmail.CreateOrganizationInput, optFns ...func(*workmail.Options)) (*workmail.CreateOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOrganization")
	}

	var r0 *workmail.CreateOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateOrganizationInput, ...func(*workmail.Options)) (*workmail.CreateOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateOrganizationInput, ...func(*workmail.Options)) *workmail.CreateOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateOrganizationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResource(ctx context.Context, params *workmail.CreateResourceInput, optFns ...func(*workmail.Options)) (*workmail.CreateResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 *workmail.CreateResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateResourceInput, ...func(*workmail.Options)) (*workmail.CreateResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateResourceInput, ...func(*workmail.Options)) *workmail.CreateResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateUser(ctx context.Context, params *workmail.CreateUserInput, optFns ...func(*workmail.Options)) (*workmail.CreateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *workmail.CreateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateUserInput, ...func(*workmail.Options)) (*workmail.CreateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.CreateUserInput, ...func(*workmail.Options)) *workmail.CreateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.CreateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.CreateUserInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAccessControlRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAccessControlRule(ctx context.Context, params *workmail.DeleteAccessControlRuleInput, optFns ...func(*workmail.Options)) (*workmail.DeleteAccessControlRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAccessControlRule")
	}

	var r0 *workmail.DeleteAccessControlRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteAccessControlRuleInput, ...func(*workmail.Options)) (*workmail.DeleteAccessControlRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteAccessControlRuleInput, ...func(*workmail.Options)) *workmail.DeleteAccessControlRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteAccessControlRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteAccessControlRuleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAlias provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAlias(ctx context.Context, params *workmail.DeleteAliasInput, optFns ...func(*workmail.Options)) (*workmail.DeleteAliasOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAlias")
	}

	var r0 *workmail.DeleteAliasOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteAliasInput, ...func(*workmail.Options)) (*workmail.DeleteAliasOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteAliasInput, ...func(*workmail.Options)) *workmail.DeleteAliasOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteAliasOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteAliasInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteAvailabilityConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteAvailabilityConfiguration(ctx context.Context, params *workmail.DeleteAvailabilityConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.DeleteAvailabilityConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAvailabilityConfiguration")
	}

	var r0 *workmail.DeleteAvailabilityConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteAvailabilityConfigurationInput, ...func(*workmail.Options)) (*workmail.DeleteAvailabilityConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteAvailabilityConfigurationInput, ...func(*workmail.Options)) *workmail.DeleteAvailabilityConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteAvailabilityConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteAvailabilityConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteEmailMonitoringConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEmailMonitoringConfiguration(ctx context.Context, params *workmail.DeleteEmailMonitoringConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.DeleteEmailMonitoringConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEmailMonitoringConfiguration")
	}

	var r0 *workmail.DeleteEmailMonitoringConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteEmailMonitoringConfigurationInput, ...func(*workmail.Options)) (*workmail.DeleteEmailMonitoringConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteEmailMonitoringConfigurationInput, ...func(*workmail.Options)) *workmail.DeleteEmailMonitoringConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteEmailMonitoringConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteEmailMonitoringConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGroup(ctx context.Context, params *workmail.DeleteGroupInput, optFns ...func(*workmail.Options)) (*workmail.DeleteGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *workmail.DeleteGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteGroupInput, ...func(*workmail.Options)) (*workmail.DeleteGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteGroupInput, ...func(*workmail.Options)) *workmail.DeleteGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteGroupInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentityCenterApplication provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIdentityCenterApplication(ctx context.Context, params *workmail.DeleteIdentityCenterApplicationInput, optFns ...func(*workmail.Options)) (*workmail.DeleteIdentityCenterApplicationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityCenterApplication")
	}

	var r0 *workmail.DeleteIdentityCenterApplicationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteIdentityCenterApplicationInput, ...func(*workmail.Options)) (*workmail.DeleteIdentityCenterApplicationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteIdentityCenterApplicationInput, ...func(*workmail.Options)) *workmail.DeleteIdentityCenterApplicationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteIdentityCenterApplicationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteIdentityCenterApplicationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteIdentityProviderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteIdentityProviderConfiguration(ctx context.Context, params *workmail.DeleteIdentityProviderConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.DeleteIdentityProviderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdentityProviderConfiguration")
	}

	var r0 *workmail.DeleteIdentityProviderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteIdentityProviderConfigurationInput, ...func(*workmail.Options)) (*workmail.DeleteIdentityProviderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteIdentityProviderConfigurationInput, ...func(*workmail.Options)) *workmail.DeleteIdentityProviderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteIdentityProviderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteIdentityProviderConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteImpersonationRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteImpersonationRole(ctx context.Context, params *workmail.DeleteImpersonationRoleInput, optFns ...func(*workmail.Options)) (*workmail.DeleteImpersonationRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteImpersonationRole")
	}

	var r0 *workmail.DeleteImpersonationRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteImpersonationRoleInput, ...func(*workmail.Options)) (*workmail.DeleteImpersonationRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteImpersonationRoleInput, ...func(*workmail.Options)) *workmail.DeleteImpersonationRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteImpersonationRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteImpersonationRoleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMailboxPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMailboxPermissions(ctx context.Context, params *workmail.DeleteMailboxPermissionsInput, optFns ...func(*workmail.Options)) (*workmail.DeleteMailboxPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMailboxPermissions")
	}

	var r0 *workmail.DeleteMailboxPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteMailboxPermissionsInput, ...func(*workmail.Options)) (*workmail.DeleteMailboxPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteMailboxPermissionsInput, ...func(*workmail.Options)) *workmail.DeleteMailboxPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteMailboxPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteMailboxPermissionsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMobileDeviceAccessOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMobileDeviceAccessOverride(ctx context.Context, params *workmail.DeleteMobileDeviceAccessOverrideInput, optFns ...func(*workmail.Options)) (*workmail.DeleteMobileDeviceAccessOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMobileDeviceAccessOverride")
	}

	var r0 *workmail.DeleteMobileDeviceAccessOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) (*workmail.DeleteMobileDeviceAccessOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) *workmail.DeleteMobileDeviceAccessOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteMobileDeviceAccessOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMobileDeviceAccessRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMobileDeviceAccessRule(ctx context.Context, params *workmail.DeleteMobileDeviceAccessRuleInput, optFns ...func(*workmail.Options)) (*workmail.DeleteMobileDeviceAccessRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMobileDeviceAccessRule")
	}

	var r0 *workmail.DeleteMobileDeviceAccessRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteMobileDeviceAccessRuleInput, ...func(*workmail.Options)) (*workmail.DeleteMobileDeviceAccessRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteMobileDeviceAccessRuleInput, ...func(*workmail.Options)) *workmail.DeleteMobileDeviceAccessRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteMobileDeviceAccessRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteMobileDeviceAccessRuleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOrganization(ctx context.Context, params *workmail.DeleteOrganizationInput, optFns ...func(*workmail.Options)) (*workmail.DeleteOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOrganization")
	}

	var r0 *workmail.DeleteOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteOrganizationInput, ...func(*workmail.Options)) (*workmail.DeleteOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteOrganizationInput, ...func(*workmail.Options)) *workmail.DeleteOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteOrganizationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePersonalAccessToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeletePersonalAccessToken(ctx context.Context, params *workmail.DeletePersonalAccessTokenInput, optFns ...func(*workmail.Options)) (*workmail.DeletePersonalAccessTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeletePersonalAccessToken")
	}

	var r0 *workmail.DeletePersonalAccessTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeletePersonalAccessTokenInput, ...func(*workmail.Options)) (*workmail.DeletePersonalAccessTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeletePersonalAccessTokenInput, ...func(*workmail.Options)) *workmail.DeletePersonalAccessTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeletePersonalAccessTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeletePersonalAccessTokenInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResource(ctx context.Context, params *workmail.DeleteResourceInput, optFns ...func(*workmail.Options)) (*workmail.DeleteResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 *workmail.DeleteResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteResourceInput, ...func(*workmail.Options)) (*workmail.DeleteResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteResourceInput, ...func(*workmail.Options)) *workmail.DeleteResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRetentionPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRetentionPolicy(ctx context.Context, params *workmail.DeleteRetentionPolicyInput, optFns ...func(*workmail.Options)) (*workmail.DeleteRetentionPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRetentionPolicy")
	}

	var r0 *workmail.DeleteRetentionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteRetentionPolicyInput, ...func(*workmail.Options)) (*workmail.DeleteRetentionPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteRetentionPolicyInput, ...func(*workmail.Options)) *workmail.DeleteRetentionPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteRetentionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteRetentionPolicyInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteUser(ctx context.Context, params *workmail.DeleteUserInput, optFns ...func(*workmail.Options)) (*workmail.DeleteUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *workmail.DeleteUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteUserInput, ...func(*workmail.Options)) (*workmail.DeleteUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeleteUserInput, ...func(*workmail.Options)) *workmail.DeleteUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeleteUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeleteUserInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterFromWorkMail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterFromWorkMail(ctx context.Context, params *workmail.DeregisterFromWorkMailInput, optFns ...func(*workmail.Options)) (*workmail.DeregisterFromWorkMailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterFromWorkMail")
	}

	var r0 *workmail.DeregisterFromWorkMailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeregisterFromWorkMailInput, ...func(*workmail.Options)) (*workmail.DeregisterFromWorkMailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeregisterFromWorkMailInput, ...func(*workmail.Options)) *workmail.DeregisterFromWorkMailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeregisterFromWorkMailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeregisterFromWorkMailInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeregisterMailDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeregisterMailDomain(ctx context.Context, params *workmail.DeregisterMailDomainInput, optFns ...func(*workmail.Options)) (*workmail.DeregisterMailDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeregisterMailDomain")
	}

	var r0 *workmail.DeregisterMailDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeregisterMailDomainInput, ...func(*workmail.Options)) (*workmail.DeregisterMailDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DeregisterMailDomainInput, ...func(*workmail.Options)) *workmail.DeregisterMailDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DeregisterMailDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DeregisterMailDomainInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEmailMonitoringConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEmailMonitoringConfiguration(ctx context.Context, params *workmail.DescribeEmailMonitoringConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.DescribeEmailMonitoringConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEmailMonitoringConfiguration")
	}

	var r0 *workmail.DescribeEmailMonitoringConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeEmailMonitoringConfigurationInput, ...func(*workmail.Options)) (*workmail.DescribeEmailMonitoringConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeEmailMonitoringConfigurationInput, ...func(*workmail.Options)) *workmail.DescribeEmailMonitoringConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeEmailMonitoringConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeEmailMonitoringConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeEntity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeEntity(ctx context.Context, params *workmail.DescribeEntityInput, optFns ...func(*workmail.Options)) (*workmail.DescribeEntityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeEntity")
	}

	var r0 *workmail.DescribeEntityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeEntityInput, ...func(*workmail.Options)) (*workmail.DescribeEntityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeEntityInput, ...func(*workmail.Options)) *workmail.DescribeEntityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeEntityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeEntityInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGroup(ctx context.Context, params *workmail.DescribeGroupInput, optFns ...func(*workmail.Options)) (*workmail.DescribeGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGroup")
	}

	var r0 *workmail.DescribeGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeGroupInput, ...func(*workmail.Options)) (*workmail.DescribeGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeGroupInput, ...func(*workmail.Options)) *workmail.DescribeGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeGroupInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeIdentityProviderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeIdentityProviderConfiguration(ctx context.Context, params *workmail.DescribeIdentityProviderConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.DescribeIdentityProviderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeIdentityProviderConfiguration")
	}

	var r0 *workmail.DescribeIdentityProviderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeIdentityProviderConfigurationInput, ...func(*workmail.Options)) (*workmail.DescribeIdentityProviderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeIdentityProviderConfigurationInput, ...func(*workmail.Options)) *workmail.DescribeIdentityProviderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeIdentityProviderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeIdentityProviderConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeInboundDmarcSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeInboundDmarcSettings(ctx context.Context, params *workmail.DescribeInboundDmarcSettingsInput, optFns ...func(*workmail.Options)) (*workmail.DescribeInboundDmarcSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeInboundDmarcSettings")
	}

	var r0 *workmail.DescribeInboundDmarcSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeInboundDmarcSettingsInput, ...func(*workmail.Options)) (*workmail.DescribeInboundDmarcSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeInboundDmarcSettingsInput, ...func(*workmail.Options)) *workmail.DescribeInboundDmarcSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeInboundDmarcSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeInboundDmarcSettingsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMailboxExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMailboxExportJob(ctx context.Context, params *workmail.DescribeMailboxExportJobInput, optFns ...func(*workmail.Options)) (*workmail.DescribeMailboxExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMailboxExportJob")
	}

	var r0 *workmail.DescribeMailboxExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeMailboxExportJobInput, ...func(*workmail.Options)) (*workmail.DescribeMailboxExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeMailboxExportJobInput, ...func(*workmail.Options)) *workmail.DescribeMailboxExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeMailboxExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeMailboxExportJobInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeOrganization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeOrganization(ctx context.Context, params *workmail.DescribeOrganizationInput, optFns ...func(*workmail.Options)) (*workmail.DescribeOrganizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeOrganization")
	}

	var r0 *workmail.DescribeOrganizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeOrganizationInput, ...func(*workmail.Options)) (*workmail.DescribeOrganizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeOrganizationInput, ...func(*workmail.Options)) *workmail.DescribeOrganizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeOrganizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeOrganizationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeResource(ctx context.Context, params *workmail.DescribeResourceInput, optFns ...func(*workmail.Options)) (*workmail.DescribeResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeResource")
	}

	var r0 *workmail.DescribeResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeResourceInput, ...func(*workmail.Options)) (*workmail.DescribeResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeResourceInput, ...func(*workmail.Options)) *workmail.DescribeResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeUser(ctx context.Context, params *workmail.DescribeUserInput, optFns ...func(*workmail.Options)) (*workmail.DescribeUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeUser")
	}

	var r0 *workmail.DescribeUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeUserInput, ...func(*workmail.Options)) (*workmail.DescribeUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DescribeUserInput, ...func(*workmail.Options)) *workmail.DescribeUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DescribeUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DescribeUserInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDelegateFromResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateDelegateFromResource(ctx context.Context, params *workmail.DisassociateDelegateFromResourceInput, optFns ...func(*workmail.Options)) (*workmail.DisassociateDelegateFromResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateDelegateFromResource")
	}

	var r0 *workmail.DisassociateDelegateFromResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DisassociateDelegateFromResourceInput, ...func(*workmail.Options)) (*workmail.DisassociateDelegateFromResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DisassociateDelegateFromResourceInput, ...func(*workmail.Options)) *workmail.DisassociateDelegateFromResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DisassociateDelegateFromResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DisassociateDelegateFromResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateMemberFromGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateMemberFromGroup(ctx context.Context, params *workmail.DisassociateMemberFromGroupInput, optFns ...func(*workmail.Options)) (*workmail.DisassociateMemberFromGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateMemberFromGroup")
	}

	var r0 *workmail.DisassociateMemberFromGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DisassociateMemberFromGroupInput, ...func(*workmail.Options)) (*workmail.DisassociateMemberFromGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.DisassociateMemberFromGroupInput, ...func(*workmail.Options)) *workmail.DisassociateMemberFromGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.DisassociateMemberFromGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.DisassociateMemberFromGroupInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccessControlEffect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAccessControlEffect(ctx context.Context, params *workmail.GetAccessControlEffectInput, optFns ...func(*workmail.Options)) (*workmail.GetAccessControlEffectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAccessControlEffect")
	}

	var r0 *workmail.GetAccessControlEffectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetAccessControlEffectInput, ...func(*workmail.Options)) (*workmail.GetAccessControlEffectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetAccessControlEffectInput, ...func(*workmail.Options)) *workmail.GetAccessControlEffectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetAccessControlEffectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetAccessControlEffectInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDefaultRetentionPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDefaultRetentionPolicy(ctx context.Context, params *workmail.GetDefaultRetentionPolicyInput, optFns ...func(*workmail.Options)) (*workmail.GetDefaultRetentionPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDefaultRetentionPolicy")
	}

	var r0 *workmail.GetDefaultRetentionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetDefaultRetentionPolicyInput, ...func(*workmail.Options)) (*workmail.GetDefaultRetentionPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetDefaultRetentionPolicyInput, ...func(*workmail.Options)) *workmail.GetDefaultRetentionPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetDefaultRetentionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetDefaultRetentionPolicyInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImpersonationRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImpersonationRole(ctx context.Context, params *workmail.GetImpersonationRoleInput, optFns ...func(*workmail.Options)) (*workmail.GetImpersonationRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImpersonationRole")
	}

	var r0 *workmail.GetImpersonationRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetImpersonationRoleInput, ...func(*workmail.Options)) (*workmail.GetImpersonationRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetImpersonationRoleInput, ...func(*workmail.Options)) *workmail.GetImpersonationRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetImpersonationRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetImpersonationRoleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetImpersonationRoleEffect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetImpersonationRoleEffect(ctx context.Context, params *workmail.GetImpersonationRoleEffectInput, optFns ...func(*workmail.Options)) (*workmail.GetImpersonationRoleEffectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetImpersonationRoleEffect")
	}

	var r0 *workmail.GetImpersonationRoleEffectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetImpersonationRoleEffectInput, ...func(*workmail.Options)) (*workmail.GetImpersonationRoleEffectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetImpersonationRoleEffectInput, ...func(*workmail.Options)) *workmail.GetImpersonationRoleEffectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetImpersonationRoleEffectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetImpersonationRoleEffectInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMailDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMailDomain(ctx context.Context, params *workmail.GetMailDomainInput, optFns ...func(*workmail.Options)) (*workmail.GetMailDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMailDomain")
	}

	var r0 *workmail.GetMailDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetMailDomainInput, ...func(*workmail.Options)) (*workmail.GetMailDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetMailDomainInput, ...func(*workmail.Options)) *workmail.GetMailDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetMailDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetMailDomainInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMailboxDetails provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMailboxDetails(ctx context.Context, params *workmail.GetMailboxDetailsInput, optFns ...func(*workmail.Options)) (*workmail.GetMailboxDetailsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMailboxDetails")
	}

	var r0 *workmail.GetMailboxDetailsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetMailboxDetailsInput, ...func(*workmail.Options)) (*workmail.GetMailboxDetailsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetMailboxDetailsInput, ...func(*workmail.Options)) *workmail.GetMailboxDetailsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetMailboxDetailsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetMailboxDetailsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMobileDeviceAccessEffect provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMobileDeviceAccessEffect(ctx context.Context, params *workmail.GetMobileDeviceAccessEffectInput, optFns ...func(*workmail.Options)) (*workmail.GetMobileDeviceAccessEffectOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMobileDeviceAccessEffect")
	}

	var r0 *workmail.GetMobileDeviceAccessEffectOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetMobileDeviceAccessEffectInput, ...func(*workmail.Options)) (*workmail.GetMobileDeviceAccessEffectOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetMobileDeviceAccessEffectInput, ...func(*workmail.Options)) *workmail.GetMobileDeviceAccessEffectOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetMobileDeviceAccessEffectOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetMobileDeviceAccessEffectInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMobileDeviceAccessOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetMobileDeviceAccessOverride(ctx context.Context, params *workmail.GetMobileDeviceAccessOverrideInput, optFns ...func(*workmail.Options)) (*workmail.GetMobileDeviceAccessOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMobileDeviceAccessOverride")
	}

	var r0 *workmail.GetMobileDeviceAccessOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) (*workmail.GetMobileDeviceAccessOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) *workmail.GetMobileDeviceAccessOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetMobileDeviceAccessOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPersonalAccessTokenMetadata provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetPersonalAccessTokenMetadata(ctx context.Context, params *workmail.GetPersonalAccessTokenMetadataInput, optFns ...func(*workmail.Options)) (*workmail.GetPersonalAccessTokenMetadataOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetPersonalAccessTokenMetadata")
	}

	var r0 *workmail.GetPersonalAccessTokenMetadataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetPersonalAccessTokenMetadataInput, ...func(*workmail.Options)) (*workmail.GetPersonalAccessTokenMetadataOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.GetPersonalAccessTokenMetadataInput, ...func(*workmail.Options)) *workmail.GetPersonalAccessTokenMetadataOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.GetPersonalAccessTokenMetadataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.GetPersonalAccessTokenMetadataInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAccessControlRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAccessControlRules(ctx context.Context, params *workmail.ListAccessControlRulesInput, optFns ...func(*workmail.Options)) (*workmail.ListAccessControlRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAccessControlRules")
	}

	var r0 *workmail.ListAccessControlRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListAccessControlRulesInput, ...func(*workmail.Options)) (*workmail.ListAccessControlRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListAccessControlRulesInput, ...func(*workmail.Options)) *workmail.ListAccessControlRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListAccessControlRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListAccessControlRulesInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAliases provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAliases(ctx context.Context, params *workmail.ListAliasesInput, optFns ...func(*workmail.Options)) (*workmail.ListAliasesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAliases")
	}

	var r0 *workmail.ListAliasesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListAliasesInput, ...func(*workmail.Options)) (*workmail.ListAliasesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListAliasesInput, ...func(*workmail.Options)) *workmail.ListAliasesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListAliasesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListAliasesInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAvailabilityConfigurations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAvailabilityConfigurations(ctx context.Context, params *workmail.ListAvailabilityConfigurationsInput, optFns ...func(*workmail.Options)) (*workmail.ListAvailabilityConfigurationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAvailabilityConfigurations")
	}

	var r0 *workmail.ListAvailabilityConfigurationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListAvailabilityConfigurationsInput, ...func(*workmail.Options)) (*workmail.ListAvailabilityConfigurationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListAvailabilityConfigurationsInput, ...func(*workmail.Options)) *workmail.ListAvailabilityConfigurationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListAvailabilityConfigurationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListAvailabilityConfigurationsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupMembers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroupMembers(ctx context.Context, params *workmail.ListGroupMembersInput, optFns ...func(*workmail.Options)) (*workmail.ListGroupMembersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupMembers")
	}

	var r0 *workmail.ListGroupMembersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListGroupMembersInput, ...func(*workmail.Options)) (*workmail.ListGroupMembersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListGroupMembersInput, ...func(*workmail.Options)) *workmail.ListGroupMembersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListGroupMembersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListGroupMembersInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroups(ctx context.Context, params *workmail.ListGroupsInput, optFns ...func(*workmail.Options)) (*workmail.ListGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *workmail.ListGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListGroupsInput, ...func(*workmail.Options)) (*workmail.ListGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListGroupsInput, ...func(*workmail.Options)) *workmail.ListGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListGroupsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupsForEntity provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroupsForEntity(ctx context.Context, params *workmail.ListGroupsForEntityInput, optFns ...func(*workmail.Options)) (*workmail.ListGroupsForEntityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupsForEntity")
	}

	var r0 *workmail.ListGroupsForEntityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListGroupsForEntityInput, ...func(*workmail.Options)) (*workmail.ListGroupsForEntityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListGroupsForEntityInput, ...func(*workmail.Options)) *workmail.ListGroupsForEntityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListGroupsForEntityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListGroupsForEntityInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListImpersonationRoles provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListImpersonationRoles(ctx context.Context, params *workmail.ListImpersonationRolesInput, optFns ...func(*workmail.Options)) (*workmail.ListImpersonationRolesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListImpersonationRoles")
	}

	var r0 *workmail.ListImpersonationRolesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListImpersonationRolesInput, ...func(*workmail.Options)) (*workmail.ListImpersonationRolesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListImpersonationRolesInput, ...func(*workmail.Options)) *workmail.ListImpersonationRolesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListImpersonationRolesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListImpersonationRolesInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMailDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMailDomains(ctx context.Context, params *workmail.ListMailDomainsInput, optFns ...func(*workmail.Options)) (*workmail.ListMailDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMailDomains")
	}

	var r0 *workmail.ListMailDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMailDomainsInput, ...func(*workmail.Options)) (*workmail.ListMailDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMailDomainsInput, ...func(*workmail.Options)) *workmail.ListMailDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListMailDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListMailDomainsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMailboxExportJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMailboxExportJobs(ctx context.Context, params *workmail.ListMailboxExportJobsInput, optFns ...func(*workmail.Options)) (*workmail.ListMailboxExportJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMailboxExportJobs")
	}

	var r0 *workmail.ListMailboxExportJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMailboxExportJobsInput, ...func(*workmail.Options)) (*workmail.ListMailboxExportJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMailboxExportJobsInput, ...func(*workmail.Options)) *workmail.ListMailboxExportJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListMailboxExportJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListMailboxExportJobsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMailboxPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMailboxPermissions(ctx context.Context, params *workmail.ListMailboxPermissionsInput, optFns ...func(*workmail.Options)) (*workmail.ListMailboxPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMailboxPermissions")
	}

	var r0 *workmail.ListMailboxPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMailboxPermissionsInput, ...func(*workmail.Options)) (*workmail.ListMailboxPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMailboxPermissionsInput, ...func(*workmail.Options)) *workmail.ListMailboxPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListMailboxPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListMailboxPermissionsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMobileDeviceAccessOverrides provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMobileDeviceAccessOverrides(ctx context.Context, params *workmail.ListMobileDeviceAccessOverridesInput, optFns ...func(*workmail.Options)) (*workmail.ListMobileDeviceAccessOverridesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMobileDeviceAccessOverrides")
	}

	var r0 *workmail.ListMobileDeviceAccessOverridesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMobileDeviceAccessOverridesInput, ...func(*workmail.Options)) (*workmail.ListMobileDeviceAccessOverridesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMobileDeviceAccessOverridesInput, ...func(*workmail.Options)) *workmail.ListMobileDeviceAccessOverridesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListMobileDeviceAccessOverridesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListMobileDeviceAccessOverridesInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMobileDeviceAccessRules provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMobileDeviceAccessRules(ctx context.Context, params *workmail.ListMobileDeviceAccessRulesInput, optFns ...func(*workmail.Options)) (*workmail.ListMobileDeviceAccessRulesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMobileDeviceAccessRules")
	}

	var r0 *workmail.ListMobileDeviceAccessRulesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMobileDeviceAccessRulesInput, ...func(*workmail.Options)) (*workmail.ListMobileDeviceAccessRulesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListMobileDeviceAccessRulesInput, ...func(*workmail.Options)) *workmail.ListMobileDeviceAccessRulesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListMobileDeviceAccessRulesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListMobileDeviceAccessRulesInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOrganizations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOrganizations(ctx context.Context, params *workmail.ListOrganizationsInput, optFns ...func(*workmail.Options)) (*workmail.ListOrganizationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOrganizations")
	}

	var r0 *workmail.ListOrganizationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListOrganizationsInput, ...func(*workmail.Options)) (*workmail.ListOrganizationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListOrganizationsInput, ...func(*workmail.Options)) *workmail.ListOrganizationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListOrganizationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListOrganizationsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPersonalAccessTokens provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPersonalAccessTokens(ctx context.Context, params *workmail.ListPersonalAccessTokensInput, optFns ...func(*workmail.Options)) (*workmail.ListPersonalAccessTokensOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPersonalAccessTokens")
	}

	var r0 *workmail.ListPersonalAccessTokensOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListPersonalAccessTokensInput, ...func(*workmail.Options)) (*workmail.ListPersonalAccessTokensOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListPersonalAccessTokensInput, ...func(*workmail.Options)) *workmail.ListPersonalAccessTokensOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListPersonalAccessTokensOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListPersonalAccessTokensInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceDelegates provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceDelegates(ctx context.Context, params *workmail.ListResourceDelegatesInput, optFns ...func(*workmail.Options)) (*workmail.ListResourceDelegatesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceDelegates")
	}

	var r0 *workmail.ListResourceDelegatesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListResourceDelegatesInput, ...func(*workmail.Options)) (*workmail.ListResourceDelegatesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListResourceDelegatesInput, ...func(*workmail.Options)) *workmail.ListResourceDelegatesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListResourceDelegatesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListResourceDelegatesInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResources(ctx context.Context, params *workmail.ListResourcesInput, optFns ...func(*workmail.Options)) (*workmail.ListResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResources")
	}

	var r0 *workmail.ListResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListResourcesInput, ...func(*workmail.Options)) (*workmail.ListResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListResourcesInput, ...func(*workmail.Options)) *workmail.ListResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListResourcesInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *workmail.ListTagsForResourceInput, optFns ...func(*workmail.Options)) (*workmail.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *workmail.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListTagsForResourceInput, ...func(*workmail.Options)) (*workmail.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListTagsForResourceInput, ...func(*workmail.Options)) *workmail.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListTagsForResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUsers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListUsers(ctx context.Context, params *workmail.ListUsersInput, optFns ...func(*workmail.Options)) (*workmail.ListUsersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListUsers")
	}

	var r0 *workmail.ListUsersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListUsersInput, ...func(*workmail.Options)) (*workmail.ListUsersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ListUsersInput, ...func(*workmail.Options)) *workmail.ListUsersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ListUsersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ListUsersInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() workmail.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 workmail.Options
	if rf, ok := ret.Get(0).(func() workmail.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(workmail.Options)
	}

	return r0
}

// PutAccessControlRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutAccessControlRule(ctx context.Context, params *workmail.PutAccessControlRuleInput, optFns ...func(*workmail.Options)) (*workmail.PutAccessControlRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutAccessControlRule")
	}

	var r0 *workmail.PutAccessControlRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutAccessControlRuleInput, ...func(*workmail.Options)) (*workmail.PutAccessControlRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutAccessControlRuleInput, ...func(*workmail.Options)) *workmail.PutAccessControlRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.PutAccessControlRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.PutAccessControlRuleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutEmailMonitoringConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutEmailMonitoringConfiguration(ctx context.Context, params *workmail.PutEmailMonitoringConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.PutEmailMonitoringConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutEmailMonitoringConfiguration")
	}

	var r0 *workmail.PutEmailMonitoringConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutEmailMonitoringConfigurationInput, ...func(*workmail.Options)) (*workmail.PutEmailMonitoringConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutEmailMonitoringConfigurationInput, ...func(*workmail.Options)) *workmail.PutEmailMonitoringConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.PutEmailMonitoringConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.PutEmailMonitoringConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutIdentityProviderConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutIdentityProviderConfiguration(ctx context.Context, params *workmail.PutIdentityProviderConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.PutIdentityProviderConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutIdentityProviderConfiguration")
	}

	var r0 *workmail.PutIdentityProviderConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutIdentityProviderConfigurationInput, ...func(*workmail.Options)) (*workmail.PutIdentityProviderConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutIdentityProviderConfigurationInput, ...func(*workmail.Options)) *workmail.PutIdentityProviderConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.PutIdentityProviderConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.PutIdentityProviderConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutInboundDmarcSettings provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutInboundDmarcSettings(ctx context.Context, params *workmail.PutInboundDmarcSettingsInput, optFns ...func(*workmail.Options)) (*workmail.PutInboundDmarcSettingsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutInboundDmarcSettings")
	}

	var r0 *workmail.PutInboundDmarcSettingsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutInboundDmarcSettingsInput, ...func(*workmail.Options)) (*workmail.PutInboundDmarcSettingsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutInboundDmarcSettingsInput, ...func(*workmail.Options)) *workmail.PutInboundDmarcSettingsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.PutInboundDmarcSettingsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.PutInboundDmarcSettingsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMailboxPermissions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMailboxPermissions(ctx context.Context, params *workmail.PutMailboxPermissionsInput, optFns ...func(*workmail.Options)) (*workmail.PutMailboxPermissionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMailboxPermissions")
	}

	var r0 *workmail.PutMailboxPermissionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutMailboxPermissionsInput, ...func(*workmail.Options)) (*workmail.PutMailboxPermissionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutMailboxPermissionsInput, ...func(*workmail.Options)) *workmail.PutMailboxPermissionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.PutMailboxPermissionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.PutMailboxPermissionsInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutMobileDeviceAccessOverride provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutMobileDeviceAccessOverride(ctx context.Context, params *workmail.PutMobileDeviceAccessOverrideInput, optFns ...func(*workmail.Options)) (*workmail.PutMobileDeviceAccessOverrideOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutMobileDeviceAccessOverride")
	}

	var r0 *workmail.PutMobileDeviceAccessOverrideOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) (*workmail.PutMobileDeviceAccessOverrideOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) *workmail.PutMobileDeviceAccessOverrideOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.PutMobileDeviceAccessOverrideOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.PutMobileDeviceAccessOverrideInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutRetentionPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutRetentionPolicy(ctx context.Context, params *workmail.PutRetentionPolicyInput, optFns ...func(*workmail.Options)) (*workmail.PutRetentionPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutRetentionPolicy")
	}

	var r0 *workmail.PutRetentionPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutRetentionPolicyInput, ...func(*workmail.Options)) (*workmail.PutRetentionPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.PutRetentionPolicyInput, ...func(*workmail.Options)) *workmail.PutRetentionPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.PutRetentionPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.PutRetentionPolicyInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterMailDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterMailDomain(ctx context.Context, params *workmail.RegisterMailDomainInput, optFns ...func(*workmail.Options)) (*workmail.RegisterMailDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterMailDomain")
	}

	var r0 *workmail.RegisterMailDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.RegisterMailDomainInput, ...func(*workmail.Options)) (*workmail.RegisterMailDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.RegisterMailDomainInput, ...func(*workmail.Options)) *workmail.RegisterMailDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.RegisterMailDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.RegisterMailDomainInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterToWorkMail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterToWorkMail(ctx context.Context, params *workmail.RegisterToWorkMailInput, optFns ...func(*workmail.Options)) (*workmail.RegisterToWorkMailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterToWorkMail")
	}

	var r0 *workmail.RegisterToWorkMailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.RegisterToWorkMailInput, ...func(*workmail.Options)) (*workmail.RegisterToWorkMailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.RegisterToWorkMailInput, ...func(*workmail.Options)) *workmail.RegisterToWorkMailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.RegisterToWorkMailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.RegisterToWorkMailInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResetPassword provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetPassword(ctx context.Context, params *workmail.ResetPasswordInput, optFns ...func(*workmail.Options)) (*workmail.ResetPasswordOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetPassword")
	}

	var r0 *workmail.ResetPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ResetPasswordInput, ...func(*workmail.Options)) (*workmail.ResetPasswordOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.ResetPasswordInput, ...func(*workmail.Options)) *workmail.ResetPasswordOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.ResetPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.ResetPasswordInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartMailboxExportJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartMailboxExportJob(ctx context.Context, params *workmail.StartMailboxExportJobInput, optFns ...func(*workmail.Options)) (*workmail.StartMailboxExportJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartMailboxExportJob")
	}

	var r0 *workmail.StartMailboxExportJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.StartMailboxExportJobInput, ...func(*workmail.Options)) (*workmail.StartMailboxExportJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.StartMailboxExportJobInput, ...func(*workmail.Options)) *workmail.StartMailboxExportJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.StartMailboxExportJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.StartMailboxExportJobInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *workmail.TagResourceInput, optFns ...func(*workmail.Options)) (*workmail.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *workmail.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.TagResourceInput, ...func(*workmail.Options)) (*workmail.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.TagResourceInput, ...func(*workmail.Options)) *workmail.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.TagResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TestAvailabilityConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TestAvailabilityConfiguration(ctx context.Context, params *workmail.TestAvailabilityConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.TestAvailabilityConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TestAvailabilityConfiguration")
	}

	var r0 *workmail.TestAvailabilityConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.TestAvailabilityConfigurationInput, ...func(*workmail.Options)) (*workmail.TestAvailabilityConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.TestAvailabilityConfigurationInput, ...func(*workmail.Options)) *workmail.TestAvailabilityConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.TestAvailabilityConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.TestAvailabilityConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *workmail.UntagResourceInput, optFns ...func(*workmail.Options)) (*workmail.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *workmail.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UntagResourceInput, ...func(*workmail.Options)) (*workmail.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UntagResourceInput, ...func(*workmail.Options)) *workmail.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UntagResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateAvailabilityConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateAvailabilityConfiguration(ctx context.Context, params *workmail.UpdateAvailabilityConfigurationInput, optFns ...func(*workmail.Options)) (*workmail.UpdateAvailabilityConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAvailabilityConfiguration")
	}

	var r0 *workmail.UpdateAvailabilityConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateAvailabilityConfigurationInput, ...func(*workmail.Options)) (*workmail.UpdateAvailabilityConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateAvailabilityConfigurationInput, ...func(*workmail.Options)) *workmail.UpdateAvailabilityConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdateAvailabilityConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdateAvailabilityConfigurationInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDefaultMailDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDefaultMailDomain(ctx context.Context, params *workmail.UpdateDefaultMailDomainInput, optFns ...func(*workmail.Options)) (*workmail.UpdateDefaultMailDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDefaultMailDomain")
	}

	var r0 *workmail.UpdateDefaultMailDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateDefaultMailDomainInput, ...func(*workmail.Options)) (*workmail.UpdateDefaultMailDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateDefaultMailDomainInput, ...func(*workmail.Options)) *workmail.UpdateDefaultMailDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdateDefaultMailDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdateDefaultMailDomainInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGroup(ctx context.Context, params *workmail.UpdateGroupInput, optFns ...func(*workmail.Options)) (*workmail.UpdateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *workmail.UpdateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateGroupInput, ...func(*workmail.Options)) (*workmail.UpdateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateGroupInput, ...func(*workmail.Options)) *workmail.UpdateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdateGroupInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateImpersonationRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateImpersonationRole(ctx context.Context, params *workmail.UpdateImpersonationRoleInput, optFns ...func(*workmail.Options)) (*workmail.UpdateImpersonationRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateImpersonationRole")
	}

	var r0 *workmail.UpdateImpersonationRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateImpersonationRoleInput, ...func(*workmail.Options)) (*workmail.UpdateImpersonationRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateImpersonationRoleInput, ...func(*workmail.Options)) *workmail.UpdateImpersonationRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdateImpersonationRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdateImpersonationRoleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMailboxQuota provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMailboxQuota(ctx context.Context, params *workmail.UpdateMailboxQuotaInput, optFns ...func(*workmail.Options)) (*workmail.UpdateMailboxQuotaOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMailboxQuota")
	}

	var r0 *workmail.UpdateMailboxQuotaOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateMailboxQuotaInput, ...func(*workmail.Options)) (*workmail.UpdateMailboxQuotaOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateMailboxQuotaInput, ...func(*workmail.Options)) *workmail.UpdateMailboxQuotaOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdateMailboxQuotaOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdateMailboxQuotaInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMobileDeviceAccessRule provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMobileDeviceAccessRule(ctx context.Context, params *workmail.UpdateMobileDeviceAccessRuleInput, optFns ...func(*workmail.Options)) (*workmail.UpdateMobileDeviceAccessRuleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMobileDeviceAccessRule")
	}

	var r0 *workmail.UpdateMobileDeviceAccessRuleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateMobileDeviceAccessRuleInput, ...func(*workmail.Options)) (*workmail.UpdateMobileDeviceAccessRuleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateMobileDeviceAccessRuleInput, ...func(*workmail.Options)) *workmail.UpdateMobileDeviceAccessRuleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdateMobileDeviceAccessRuleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdateMobileDeviceAccessRuleInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdatePrimaryEmailAddress provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdatePrimaryEmailAddress(ctx context.Context, params *workmail.UpdatePrimaryEmailAddressInput, optFns ...func(*workmail.Options)) (*workmail.UpdatePrimaryEmailAddressOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePrimaryEmailAddress")
	}

	var r0 *workmail.UpdatePrimaryEmailAddressOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdatePrimaryEmailAddressInput, ...func(*workmail.Options)) (*workmail.UpdatePrimaryEmailAddressOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdatePrimaryEmailAddressInput, ...func(*workmail.Options)) *workmail.UpdatePrimaryEmailAddressOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdatePrimaryEmailAddressOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdatePrimaryEmailAddressInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResource(ctx context.Context, params *workmail.UpdateResourceInput, optFns ...func(*workmail.Options)) (*workmail.UpdateResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 *workmail.UpdateResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateResourceInput, ...func(*workmail.Options)) (*workmail.UpdateResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateResourceInput, ...func(*workmail.Options)) *workmail.UpdateResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdateResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdateResourceInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateUser(ctx context.Context, params *workmail.UpdateUserInput, optFns ...func(*workmail.Options)) (*workmail.UpdateUserOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *workmail.UpdateUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateUserInput, ...func(*workmail.Options)) (*workmail.UpdateUserOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *workmail.UpdateUserInput, ...func(*workmail.Options)) *workmail.UpdateUserOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*workmail.UpdateUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *workmail.UpdateUserInput, ...func(*workmail.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
