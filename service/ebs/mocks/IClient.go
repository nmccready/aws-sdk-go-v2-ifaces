// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	ebs "github.com/aws/aws-sdk-go-v2/service/ebs"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CompleteSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CompleteSnapshot(ctx context.Context, params *ebs.CompleteSnapshotInput, optFns ...func(*ebs.Options)) (*ebs.CompleteSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CompleteSnapshot")
	}

	var r0 *ebs.CompleteSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.CompleteSnapshotInput, ...func(*ebs.Options)) (*ebs.CompleteSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.CompleteSnapshotInput, ...func(*ebs.Options)) *ebs.CompleteSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ebs.CompleteSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ebs.CompleteSnapshotInput, ...func(*ebs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSnapshotBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSnapshotBlock(ctx context.Context, params *ebs.GetSnapshotBlockInput, optFns ...func(*ebs.Options)) (*ebs.GetSnapshotBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSnapshotBlock")
	}

	var r0 *ebs.GetSnapshotBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.GetSnapshotBlockInput, ...func(*ebs.Options)) (*ebs.GetSnapshotBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.GetSnapshotBlockInput, ...func(*ebs.Options)) *ebs.GetSnapshotBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ebs.GetSnapshotBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ebs.GetSnapshotBlockInput, ...func(*ebs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListChangedBlocks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListChangedBlocks(ctx context.Context, params *ebs.ListChangedBlocksInput, optFns ...func(*ebs.Options)) (*ebs.ListChangedBlocksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListChangedBlocks")
	}

	var r0 *ebs.ListChangedBlocksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.ListChangedBlocksInput, ...func(*ebs.Options)) (*ebs.ListChangedBlocksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.ListChangedBlocksInput, ...func(*ebs.Options)) *ebs.ListChangedBlocksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ebs.ListChangedBlocksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ebs.ListChangedBlocksInput, ...func(*ebs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSnapshotBlocks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSnapshotBlocks(ctx context.Context, params *ebs.ListSnapshotBlocksInput, optFns ...func(*ebs.Options)) (*ebs.ListSnapshotBlocksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSnapshotBlocks")
	}

	var r0 *ebs.ListSnapshotBlocksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.ListSnapshotBlocksInput, ...func(*ebs.Options)) (*ebs.ListSnapshotBlocksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.ListSnapshotBlocksInput, ...func(*ebs.Options)) *ebs.ListSnapshotBlocksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ebs.ListSnapshotBlocksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ebs.ListSnapshotBlocksInput, ...func(*ebs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() ebs.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 ebs.Options
	if rf, ok := ret.Get(0).(func() ebs.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(ebs.Options)
	}

	return r0
}

// PutSnapshotBlock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSnapshotBlock(ctx context.Context, params *ebs.PutSnapshotBlockInput, optFns ...func(*ebs.Options)) (*ebs.PutSnapshotBlockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSnapshotBlock")
	}

	var r0 *ebs.PutSnapshotBlockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.PutSnapshotBlockInput, ...func(*ebs.Options)) (*ebs.PutSnapshotBlockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.PutSnapshotBlockInput, ...func(*ebs.Options)) *ebs.PutSnapshotBlockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ebs.PutSnapshotBlockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ebs.PutSnapshotBlockInput, ...func(*ebs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartSnapshot provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartSnapshot(ctx context.Context, params *ebs.StartSnapshotInput, optFns ...func(*ebs.Options)) (*ebs.StartSnapshotOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartSnapshot")
	}

	var r0 *ebs.StartSnapshotOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.StartSnapshotInput, ...func(*ebs.Options)) (*ebs.StartSnapshotOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *ebs.StartSnapshotInput, ...func(*ebs.Options)) *ebs.StartSnapshotOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ebs.StartSnapshotOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *ebs.StartSnapshotInput, ...func(*ebs.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
