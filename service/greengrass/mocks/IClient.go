// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	greengrass "github.com/aws/aws-sdk-go-v2/service/greengrass"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AssociateRoleToGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateRoleToGroup(ctx context.Context, params *greengrass.AssociateRoleToGroupInput, optFns ...func(*greengrass.Options)) (*greengrass.AssociateRoleToGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateRoleToGroup")
	}

	var r0 *greengrass.AssociateRoleToGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.AssociateRoleToGroupInput, ...func(*greengrass.Options)) (*greengrass.AssociateRoleToGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.AssociateRoleToGroupInput, ...func(*greengrass.Options)) *greengrass.AssociateRoleToGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.AssociateRoleToGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.AssociateRoleToGroupInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateServiceRoleToAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateServiceRoleToAccount(ctx context.Context, params *greengrass.AssociateServiceRoleToAccountInput, optFns ...func(*greengrass.Options)) (*greengrass.AssociateServiceRoleToAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateServiceRoleToAccount")
	}

	var r0 *greengrass.AssociateServiceRoleToAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.AssociateServiceRoleToAccountInput, ...func(*greengrass.Options)) (*greengrass.AssociateServiceRoleToAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.AssociateServiceRoleToAccountInput, ...func(*greengrass.Options)) *greengrass.AssociateServiceRoleToAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.AssociateServiceRoleToAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.AssociateServiceRoleToAccountInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectorDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnectorDefinition(ctx context.Context, params *greengrass.CreateConnectorDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateConnectorDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectorDefinition")
	}

	var r0 *greengrass.CreateConnectorDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateConnectorDefinitionInput, ...func(*greengrass.Options)) (*greengrass.CreateConnectorDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateConnectorDefinitionInput, ...func(*greengrass.Options)) *greengrass.CreateConnectorDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateConnectorDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateConnectorDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateConnectorDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateConnectorDefinitionVersion(ctx context.Context, params *greengrass.CreateConnectorDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateConnectorDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateConnectorDefinitionVersion")
	}

	var r0 *greengrass.CreateConnectorDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateConnectorDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.CreateConnectorDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateConnectorDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.CreateConnectorDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateConnectorDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateConnectorDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCoreDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCoreDefinition(ctx context.Context, params *greengrass.CreateCoreDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateCoreDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCoreDefinition")
	}

	var r0 *greengrass.CreateCoreDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateCoreDefinitionInput, ...func(*greengrass.Options)) (*greengrass.CreateCoreDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateCoreDefinitionInput, ...func(*greengrass.Options)) *greengrass.CreateCoreDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateCoreDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateCoreDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCoreDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCoreDefinitionVersion(ctx context.Context, params *greengrass.CreateCoreDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateCoreDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCoreDefinitionVersion")
	}

	var r0 *greengrass.CreateCoreDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateCoreDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.CreateCoreDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateCoreDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.CreateCoreDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateCoreDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateCoreDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeployment(ctx context.Context, params *greengrass.CreateDeploymentInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeployment")
	}

	var r0 *greengrass.CreateDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateDeploymentInput, ...func(*greengrass.Options)) (*greengrass.CreateDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateDeploymentInput, ...func(*greengrass.Options)) *greengrass.CreateDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateDeploymentInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeviceDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeviceDefinition(ctx context.Context, params *greengrass.CreateDeviceDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateDeviceDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceDefinition")
	}

	var r0 *greengrass.CreateDeviceDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateDeviceDefinitionInput, ...func(*greengrass.Options)) (*greengrass.CreateDeviceDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateDeviceDefinitionInput, ...func(*greengrass.Options)) *greengrass.CreateDeviceDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateDeviceDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateDeviceDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateDeviceDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateDeviceDefinitionVersion(ctx context.Context, params *greengrass.CreateDeviceDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateDeviceDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeviceDefinitionVersion")
	}

	var r0 *greengrass.CreateDeviceDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateDeviceDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.CreateDeviceDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateDeviceDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.CreateDeviceDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateDeviceDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateDeviceDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFunctionDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFunctionDefinition(ctx context.Context, params *greengrass.CreateFunctionDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateFunctionDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunctionDefinition")
	}

	var r0 *greengrass.CreateFunctionDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateFunctionDefinitionInput, ...func(*greengrass.Options)) (*greengrass.CreateFunctionDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateFunctionDefinitionInput, ...func(*greengrass.Options)) *greengrass.CreateFunctionDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateFunctionDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateFunctionDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateFunctionDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateFunctionDefinitionVersion(ctx context.Context, params *greengrass.CreateFunctionDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateFunctionDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateFunctionDefinitionVersion")
	}

	var r0 *greengrass.CreateFunctionDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateFunctionDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.CreateFunctionDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateFunctionDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.CreateFunctionDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateFunctionDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateFunctionDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroup(ctx context.Context, params *greengrass.CreateGroupInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 *greengrass.CreateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateGroupInput, ...func(*greengrass.Options)) (*greengrass.CreateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateGroupInput, ...func(*greengrass.Options)) *greengrass.CreateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateGroupInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroupCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroupCertificateAuthority(ctx context.Context, params *greengrass.CreateGroupCertificateAuthorityInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateGroupCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupCertificateAuthority")
	}

	var r0 *greengrass.CreateGroupCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateGroupCertificateAuthorityInput, ...func(*greengrass.Options)) (*greengrass.CreateGroupCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateGroupCertificateAuthorityInput, ...func(*greengrass.Options)) *greengrass.CreateGroupCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateGroupCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateGroupCertificateAuthorityInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroupVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGroupVersion(ctx context.Context, params *greengrass.CreateGroupVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateGroupVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupVersion")
	}

	var r0 *greengrass.CreateGroupVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateGroupVersionInput, ...func(*greengrass.Options)) (*greengrass.CreateGroupVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateGroupVersionInput, ...func(*greengrass.Options)) *greengrass.CreateGroupVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateGroupVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateGroupVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoggerDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLoggerDefinition(ctx context.Context, params *greengrass.CreateLoggerDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateLoggerDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoggerDefinition")
	}

	var r0 *greengrass.CreateLoggerDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateLoggerDefinitionInput, ...func(*greengrass.Options)) (*greengrass.CreateLoggerDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateLoggerDefinitionInput, ...func(*greengrass.Options)) *greengrass.CreateLoggerDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateLoggerDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateLoggerDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateLoggerDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateLoggerDefinitionVersion(ctx context.Context, params *greengrass.CreateLoggerDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateLoggerDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoggerDefinitionVersion")
	}

	var r0 *greengrass.CreateLoggerDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateLoggerDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.CreateLoggerDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateLoggerDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.CreateLoggerDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateLoggerDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateLoggerDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceDefinition(ctx context.Context, params *greengrass.CreateResourceDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateResourceDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceDefinition")
	}

	var r0 *greengrass.CreateResourceDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateResourceDefinitionInput, ...func(*greengrass.Options)) (*greengrass.CreateResourceDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateResourceDefinitionInput, ...func(*greengrass.Options)) *greengrass.CreateResourceDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateResourceDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateResourceDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateResourceDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateResourceDefinitionVersion(ctx context.Context, params *greengrass.CreateResourceDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateResourceDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceDefinitionVersion")
	}

	var r0 *greengrass.CreateResourceDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateResourceDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.CreateResourceDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateResourceDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.CreateResourceDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateResourceDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateResourceDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSoftwareUpdateJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSoftwareUpdateJob(ctx context.Context, params *greengrass.CreateSoftwareUpdateJobInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateSoftwareUpdateJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSoftwareUpdateJob")
	}

	var r0 *greengrass.CreateSoftwareUpdateJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateSoftwareUpdateJobInput, ...func(*greengrass.Options)) (*greengrass.CreateSoftwareUpdateJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateSoftwareUpdateJobInput, ...func(*greengrass.Options)) *greengrass.CreateSoftwareUpdateJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateSoftwareUpdateJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateSoftwareUpdateJobInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriptionDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSubscriptionDefinition(ctx context.Context, params *greengrass.CreateSubscriptionDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateSubscriptionDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriptionDefinition")
	}

	var r0 *greengrass.CreateSubscriptionDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateSubscriptionDefinitionInput, ...func(*greengrass.Options)) (*greengrass.CreateSubscriptionDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateSubscriptionDefinitionInput, ...func(*greengrass.Options)) *greengrass.CreateSubscriptionDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateSubscriptionDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateSubscriptionDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSubscriptionDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSubscriptionDefinitionVersion(ctx context.Context, params *greengrass.CreateSubscriptionDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSubscriptionDefinitionVersion")
	}

	var r0 *greengrass.CreateSubscriptionDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateSubscriptionDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.CreateSubscriptionDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.CreateSubscriptionDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.CreateSubscriptionDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.CreateSubscriptionDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.CreateSubscriptionDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteConnectorDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteConnectorDefinition(ctx context.Context, params *greengrass.DeleteConnectorDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.DeleteConnectorDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteConnectorDefinition")
	}

	var r0 *greengrass.DeleteConnectorDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteConnectorDefinitionInput, ...func(*greengrass.Options)) (*greengrass.DeleteConnectorDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteConnectorDefinitionInput, ...func(*greengrass.Options)) *greengrass.DeleteConnectorDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DeleteConnectorDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DeleteConnectorDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCoreDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCoreDefinition(ctx context.Context, params *greengrass.DeleteCoreDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.DeleteCoreDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCoreDefinition")
	}

	var r0 *greengrass.DeleteCoreDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteCoreDefinitionInput, ...func(*greengrass.Options)) (*greengrass.DeleteCoreDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteCoreDefinitionInput, ...func(*greengrass.Options)) *greengrass.DeleteCoreDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DeleteCoreDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DeleteCoreDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDeviceDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDeviceDefinition(ctx context.Context, params *greengrass.DeleteDeviceDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.DeleteDeviceDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDeviceDefinition")
	}

	var r0 *greengrass.DeleteDeviceDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteDeviceDefinitionInput, ...func(*greengrass.Options)) (*greengrass.DeleteDeviceDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteDeviceDefinitionInput, ...func(*greengrass.Options)) *greengrass.DeleteDeviceDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DeleteDeviceDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DeleteDeviceDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFunctionDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteFunctionDefinition(ctx context.Context, params *greengrass.DeleteFunctionDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.DeleteFunctionDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteFunctionDefinition")
	}

	var r0 *greengrass.DeleteFunctionDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteFunctionDefinitionInput, ...func(*greengrass.Options)) (*greengrass.DeleteFunctionDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteFunctionDefinitionInput, ...func(*greengrass.Options)) *greengrass.DeleteFunctionDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DeleteFunctionDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DeleteFunctionDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGroup(ctx context.Context, params *greengrass.DeleteGroupInput, optFns ...func(*greengrass.Options)) (*greengrass.DeleteGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 *greengrass.DeleteGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteGroupInput, ...func(*greengrass.Options)) (*greengrass.DeleteGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteGroupInput, ...func(*greengrass.Options)) *greengrass.DeleteGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DeleteGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DeleteGroupInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteLoggerDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteLoggerDefinition(ctx context.Context, params *greengrass.DeleteLoggerDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.DeleteLoggerDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteLoggerDefinition")
	}

	var r0 *greengrass.DeleteLoggerDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteLoggerDefinitionInput, ...func(*greengrass.Options)) (*greengrass.DeleteLoggerDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteLoggerDefinitionInput, ...func(*greengrass.Options)) *greengrass.DeleteLoggerDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DeleteLoggerDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DeleteLoggerDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteResourceDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteResourceDefinition(ctx context.Context, params *greengrass.DeleteResourceDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.DeleteResourceDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceDefinition")
	}

	var r0 *greengrass.DeleteResourceDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteResourceDefinitionInput, ...func(*greengrass.Options)) (*greengrass.DeleteResourceDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteResourceDefinitionInput, ...func(*greengrass.Options)) *greengrass.DeleteResourceDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DeleteResourceDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DeleteResourceDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSubscriptionDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSubscriptionDefinition(ctx context.Context, params *greengrass.DeleteSubscriptionDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.DeleteSubscriptionDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSubscriptionDefinition")
	}

	var r0 *greengrass.DeleteSubscriptionDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteSubscriptionDefinitionInput, ...func(*greengrass.Options)) (*greengrass.DeleteSubscriptionDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DeleteSubscriptionDefinitionInput, ...func(*greengrass.Options)) *greengrass.DeleteSubscriptionDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DeleteSubscriptionDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DeleteSubscriptionDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateRoleFromGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateRoleFromGroup(ctx context.Context, params *greengrass.DisassociateRoleFromGroupInput, optFns ...func(*greengrass.Options)) (*greengrass.DisassociateRoleFromGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateRoleFromGroup")
	}

	var r0 *greengrass.DisassociateRoleFromGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DisassociateRoleFromGroupInput, ...func(*greengrass.Options)) (*greengrass.DisassociateRoleFromGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DisassociateRoleFromGroupInput, ...func(*greengrass.Options)) *greengrass.DisassociateRoleFromGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DisassociateRoleFromGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DisassociateRoleFromGroupInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateServiceRoleFromAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateServiceRoleFromAccount(ctx context.Context, params *greengrass.DisassociateServiceRoleFromAccountInput, optFns ...func(*greengrass.Options)) (*greengrass.DisassociateServiceRoleFromAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateServiceRoleFromAccount")
	}

	var r0 *greengrass.DisassociateServiceRoleFromAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DisassociateServiceRoleFromAccountInput, ...func(*greengrass.Options)) (*greengrass.DisassociateServiceRoleFromAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.DisassociateServiceRoleFromAccountInput, ...func(*greengrass.Options)) *greengrass.DisassociateServiceRoleFromAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.DisassociateServiceRoleFromAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.DisassociateServiceRoleFromAccountInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAssociatedRole provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetAssociatedRole(ctx context.Context, params *greengrass.GetAssociatedRoleInput, optFns ...func(*greengrass.Options)) (*greengrass.GetAssociatedRoleOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAssociatedRole")
	}

	var r0 *greengrass.GetAssociatedRoleOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetAssociatedRoleInput, ...func(*greengrass.Options)) (*greengrass.GetAssociatedRoleOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetAssociatedRoleInput, ...func(*greengrass.Options)) *greengrass.GetAssociatedRoleOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetAssociatedRoleOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetAssociatedRoleInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBulkDeploymentStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBulkDeploymentStatus(ctx context.Context, params *greengrass.GetBulkDeploymentStatusInput, optFns ...func(*greengrass.Options)) (*greengrass.GetBulkDeploymentStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBulkDeploymentStatus")
	}

	var r0 *greengrass.GetBulkDeploymentStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetBulkDeploymentStatusInput, ...func(*greengrass.Options)) (*greengrass.GetBulkDeploymentStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetBulkDeploymentStatusInput, ...func(*greengrass.Options)) *greengrass.GetBulkDeploymentStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetBulkDeploymentStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetBulkDeploymentStatusInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectivityInfo provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectivityInfo(ctx context.Context, params *greengrass.GetConnectivityInfoInput, optFns ...func(*greengrass.Options)) (*greengrass.GetConnectivityInfoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectivityInfo")
	}

	var r0 *greengrass.GetConnectivityInfoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetConnectivityInfoInput, ...func(*greengrass.Options)) (*greengrass.GetConnectivityInfoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetConnectivityInfoInput, ...func(*greengrass.Options)) *greengrass.GetConnectivityInfoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetConnectivityInfoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetConnectivityInfoInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectorDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectorDefinition(ctx context.Context, params *greengrass.GetConnectorDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetConnectorDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorDefinition")
	}

	var r0 *greengrass.GetConnectorDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetConnectorDefinitionInput, ...func(*greengrass.Options)) (*greengrass.GetConnectorDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetConnectorDefinitionInput, ...func(*greengrass.Options)) *greengrass.GetConnectorDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetConnectorDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetConnectorDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConnectorDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetConnectorDefinitionVersion(ctx context.Context, params *greengrass.GetConnectorDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetConnectorDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetConnectorDefinitionVersion")
	}

	var r0 *greengrass.GetConnectorDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetConnectorDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.GetConnectorDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetConnectorDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.GetConnectorDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetConnectorDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetConnectorDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCoreDefinition(ctx context.Context, params *greengrass.GetCoreDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetCoreDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCoreDefinition")
	}

	var r0 *greengrass.GetCoreDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetCoreDefinitionInput, ...func(*greengrass.Options)) (*greengrass.GetCoreDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetCoreDefinitionInput, ...func(*greengrass.Options)) *greengrass.GetCoreDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetCoreDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetCoreDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoreDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCoreDefinitionVersion(ctx context.Context, params *greengrass.GetCoreDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetCoreDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCoreDefinitionVersion")
	}

	var r0 *greengrass.GetCoreDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetCoreDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.GetCoreDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetCoreDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.GetCoreDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetCoreDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetCoreDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeploymentStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeploymentStatus(ctx context.Context, params *greengrass.GetDeploymentStatusInput, optFns ...func(*greengrass.Options)) (*greengrass.GetDeploymentStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeploymentStatus")
	}

	var r0 *greengrass.GetDeploymentStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetDeploymentStatusInput, ...func(*greengrass.Options)) (*greengrass.GetDeploymentStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetDeploymentStatusInput, ...func(*greengrass.Options)) *greengrass.GetDeploymentStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetDeploymentStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetDeploymentStatusInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeviceDefinition(ctx context.Context, params *greengrass.GetDeviceDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetDeviceDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceDefinition")
	}

	var r0 *greengrass.GetDeviceDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetDeviceDefinitionInput, ...func(*greengrass.Options)) (*greengrass.GetDeviceDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetDeviceDefinitionInput, ...func(*greengrass.Options)) *greengrass.GetDeviceDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetDeviceDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetDeviceDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDeviceDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDeviceDefinitionVersion(ctx context.Context, params *greengrass.GetDeviceDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetDeviceDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDeviceDefinitionVersion")
	}

	var r0 *greengrass.GetDeviceDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetDeviceDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.GetDeviceDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetDeviceDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.GetDeviceDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetDeviceDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetDeviceDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunctionDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFunctionDefinition(ctx context.Context, params *greengrass.GetFunctionDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetFunctionDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionDefinition")
	}

	var r0 *greengrass.GetFunctionDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetFunctionDefinitionInput, ...func(*greengrass.Options)) (*greengrass.GetFunctionDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetFunctionDefinitionInput, ...func(*greengrass.Options)) *greengrass.GetFunctionDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetFunctionDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetFunctionDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFunctionDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetFunctionDefinitionVersion(ctx context.Context, params *greengrass.GetFunctionDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetFunctionDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetFunctionDefinitionVersion")
	}

	var r0 *greengrass.GetFunctionDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetFunctionDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.GetFunctionDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetFunctionDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.GetFunctionDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetFunctionDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetFunctionDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGroup(ctx context.Context, params *greengrass.GetGroupInput, optFns ...func(*greengrass.Options)) (*greengrass.GetGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroup")
	}

	var r0 *greengrass.GetGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetGroupInput, ...func(*greengrass.Options)) (*greengrass.GetGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetGroupInput, ...func(*greengrass.Options)) *greengrass.GetGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetGroupInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupCertificateAuthority provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGroupCertificateAuthority(ctx context.Context, params *greengrass.GetGroupCertificateAuthorityInput, optFns ...func(*greengrass.Options)) (*greengrass.GetGroupCertificateAuthorityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupCertificateAuthority")
	}

	var r0 *greengrass.GetGroupCertificateAuthorityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetGroupCertificateAuthorityInput, ...func(*greengrass.Options)) (*greengrass.GetGroupCertificateAuthorityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetGroupCertificateAuthorityInput, ...func(*greengrass.Options)) *greengrass.GetGroupCertificateAuthorityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetGroupCertificateAuthorityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetGroupCertificateAuthorityInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupCertificateConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGroupCertificateConfiguration(ctx context.Context, params *greengrass.GetGroupCertificateConfigurationInput, optFns ...func(*greengrass.Options)) (*greengrass.GetGroupCertificateConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupCertificateConfiguration")
	}

	var r0 *greengrass.GetGroupCertificateConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetGroupCertificateConfigurationInput, ...func(*greengrass.Options)) (*greengrass.GetGroupCertificateConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetGroupCertificateConfigurationInput, ...func(*greengrass.Options)) *greengrass.GetGroupCertificateConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetGroupCertificateConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetGroupCertificateConfigurationInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetGroupVersion(ctx context.Context, params *greengrass.GetGroupVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetGroupVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupVersion")
	}

	var r0 *greengrass.GetGroupVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetGroupVersionInput, ...func(*greengrass.Options)) (*greengrass.GetGroupVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetGroupVersionInput, ...func(*greengrass.Options)) *greengrass.GetGroupVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetGroupVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetGroupVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggerDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoggerDefinition(ctx context.Context, params *greengrass.GetLoggerDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetLoggerDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoggerDefinition")
	}

	var r0 *greengrass.GetLoggerDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetLoggerDefinitionInput, ...func(*greengrass.Options)) (*greengrass.GetLoggerDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetLoggerDefinitionInput, ...func(*greengrass.Options)) *greengrass.GetLoggerDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetLoggerDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetLoggerDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoggerDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetLoggerDefinitionVersion(ctx context.Context, params *greengrass.GetLoggerDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetLoggerDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetLoggerDefinitionVersion")
	}

	var r0 *greengrass.GetLoggerDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetLoggerDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.GetLoggerDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetLoggerDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.GetLoggerDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetLoggerDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetLoggerDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceDefinition(ctx context.Context, params *greengrass.GetResourceDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetResourceDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceDefinition")
	}

	var r0 *greengrass.GetResourceDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetResourceDefinitionInput, ...func(*greengrass.Options)) (*greengrass.GetResourceDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetResourceDefinitionInput, ...func(*greengrass.Options)) *greengrass.GetResourceDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetResourceDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetResourceDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetResourceDefinitionVersion(ctx context.Context, params *greengrass.GetResourceDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetResourceDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceDefinitionVersion")
	}

	var r0 *greengrass.GetResourceDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetResourceDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.GetResourceDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetResourceDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.GetResourceDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetResourceDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetResourceDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceRoleForAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetServiceRoleForAccount(ctx context.Context, params *greengrass.GetServiceRoleForAccountInput, optFns ...func(*greengrass.Options)) (*greengrass.GetServiceRoleForAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetServiceRoleForAccount")
	}

	var r0 *greengrass.GetServiceRoleForAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetServiceRoleForAccountInput, ...func(*greengrass.Options)) (*greengrass.GetServiceRoleForAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetServiceRoleForAccountInput, ...func(*greengrass.Options)) *greengrass.GetServiceRoleForAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetServiceRoleForAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetServiceRoleForAccountInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubscriptionDefinition(ctx context.Context, params *greengrass.GetSubscriptionDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetSubscriptionDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionDefinition")
	}

	var r0 *greengrass.GetSubscriptionDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetSubscriptionDefinitionInput, ...func(*greengrass.Options)) (*greengrass.GetSubscriptionDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetSubscriptionDefinitionInput, ...func(*greengrass.Options)) *greengrass.GetSubscriptionDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetSubscriptionDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetSubscriptionDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptionDefinitionVersion provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSubscriptionDefinitionVersion(ctx context.Context, params *greengrass.GetSubscriptionDefinitionVersionInput, optFns ...func(*greengrass.Options)) (*greengrass.GetSubscriptionDefinitionVersionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptionDefinitionVersion")
	}

	var r0 *greengrass.GetSubscriptionDefinitionVersionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetSubscriptionDefinitionVersionInput, ...func(*greengrass.Options)) (*greengrass.GetSubscriptionDefinitionVersionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetSubscriptionDefinitionVersionInput, ...func(*greengrass.Options)) *greengrass.GetSubscriptionDefinitionVersionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetSubscriptionDefinitionVersionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetSubscriptionDefinitionVersionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetThingRuntimeConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetThingRuntimeConfiguration(ctx context.Context, params *greengrass.GetThingRuntimeConfigurationInput, optFns ...func(*greengrass.Options)) (*greengrass.GetThingRuntimeConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetThingRuntimeConfiguration")
	}

	var r0 *greengrass.GetThingRuntimeConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetThingRuntimeConfigurationInput, ...func(*greengrass.Options)) (*greengrass.GetThingRuntimeConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.GetThingRuntimeConfigurationInput, ...func(*greengrass.Options)) *greengrass.GetThingRuntimeConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.GetThingRuntimeConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.GetThingRuntimeConfigurationInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBulkDeploymentDetailedReports provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBulkDeploymentDetailedReports(ctx context.Context, params *greengrass.ListBulkDeploymentDetailedReportsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBulkDeploymentDetailedReports")
	}

	var r0 *greengrass.ListBulkDeploymentDetailedReportsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListBulkDeploymentDetailedReportsInput, ...func(*greengrass.Options)) (*greengrass.ListBulkDeploymentDetailedReportsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListBulkDeploymentDetailedReportsInput, ...func(*greengrass.Options)) *greengrass.ListBulkDeploymentDetailedReportsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListBulkDeploymentDetailedReportsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListBulkDeploymentDetailedReportsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBulkDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBulkDeployments(ctx context.Context, params *greengrass.ListBulkDeploymentsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListBulkDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBulkDeployments")
	}

	var r0 *greengrass.ListBulkDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListBulkDeploymentsInput, ...func(*greengrass.Options)) (*greengrass.ListBulkDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListBulkDeploymentsInput, ...func(*greengrass.Options)) *greengrass.ListBulkDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListBulkDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListBulkDeploymentsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectorDefinitionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectorDefinitionVersions(ctx context.Context, params *greengrass.ListConnectorDefinitionVersionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListConnectorDefinitionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectorDefinitionVersions")
	}

	var r0 *greengrass.ListConnectorDefinitionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListConnectorDefinitionVersionsInput, ...func(*greengrass.Options)) (*greengrass.ListConnectorDefinitionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListConnectorDefinitionVersionsInput, ...func(*greengrass.Options)) *greengrass.ListConnectorDefinitionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListConnectorDefinitionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListConnectorDefinitionVersionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListConnectorDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListConnectorDefinitions(ctx context.Context, params *greengrass.ListConnectorDefinitionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListConnectorDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListConnectorDefinitions")
	}

	var r0 *greengrass.ListConnectorDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListConnectorDefinitionsInput, ...func(*greengrass.Options)) (*greengrass.ListConnectorDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListConnectorDefinitionsInput, ...func(*greengrass.Options)) *greengrass.ListConnectorDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListConnectorDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListConnectorDefinitionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoreDefinitionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCoreDefinitionVersions(ctx context.Context, params *greengrass.ListCoreDefinitionVersionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListCoreDefinitionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCoreDefinitionVersions")
	}

	var r0 *greengrass.ListCoreDefinitionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListCoreDefinitionVersionsInput, ...func(*greengrass.Options)) (*greengrass.ListCoreDefinitionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListCoreDefinitionVersionsInput, ...func(*greengrass.Options)) *greengrass.ListCoreDefinitionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListCoreDefinitionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListCoreDefinitionVersionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCoreDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCoreDefinitions(ctx context.Context, params *greengrass.ListCoreDefinitionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListCoreDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCoreDefinitions")
	}

	var r0 *greengrass.ListCoreDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListCoreDefinitionsInput, ...func(*greengrass.Options)) (*greengrass.ListCoreDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListCoreDefinitionsInput, ...func(*greengrass.Options)) *greengrass.ListCoreDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListCoreDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListCoreDefinitionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeployments(ctx context.Context, params *greengrass.ListDeploymentsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeployments")
	}

	var r0 *greengrass.ListDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListDeploymentsInput, ...func(*greengrass.Options)) (*greengrass.ListDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListDeploymentsInput, ...func(*greengrass.Options)) *greengrass.ListDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListDeploymentsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeviceDefinitionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeviceDefinitionVersions(ctx context.Context, params *greengrass.ListDeviceDefinitionVersionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListDeviceDefinitionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceDefinitionVersions")
	}

	var r0 *greengrass.ListDeviceDefinitionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListDeviceDefinitionVersionsInput, ...func(*greengrass.Options)) (*greengrass.ListDeviceDefinitionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListDeviceDefinitionVersionsInput, ...func(*greengrass.Options)) *greengrass.ListDeviceDefinitionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListDeviceDefinitionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListDeviceDefinitionVersionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDeviceDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDeviceDefinitions(ctx context.Context, params *greengrass.ListDeviceDefinitionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListDeviceDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDeviceDefinitions")
	}

	var r0 *greengrass.ListDeviceDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListDeviceDefinitionsInput, ...func(*greengrass.Options)) (*greengrass.ListDeviceDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListDeviceDefinitionsInput, ...func(*greengrass.Options)) *greengrass.ListDeviceDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListDeviceDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListDeviceDefinitionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunctionDefinitionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFunctionDefinitionVersions(ctx context.Context, params *greengrass.ListFunctionDefinitionVersionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListFunctionDefinitionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionDefinitionVersions")
	}

	var r0 *greengrass.ListFunctionDefinitionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListFunctionDefinitionVersionsInput, ...func(*greengrass.Options)) (*greengrass.ListFunctionDefinitionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListFunctionDefinitionVersionsInput, ...func(*greengrass.Options)) *greengrass.ListFunctionDefinitionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListFunctionDefinitionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListFunctionDefinitionVersionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListFunctionDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListFunctionDefinitions(ctx context.Context, params *greengrass.ListFunctionDefinitionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListFunctionDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListFunctionDefinitions")
	}

	var r0 *greengrass.ListFunctionDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListFunctionDefinitionsInput, ...func(*greengrass.Options)) (*greengrass.ListFunctionDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListFunctionDefinitionsInput, ...func(*greengrass.Options)) *greengrass.ListFunctionDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListFunctionDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListFunctionDefinitionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupCertificateAuthorities provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroupCertificateAuthorities(ctx context.Context, params *greengrass.ListGroupCertificateAuthoritiesInput, optFns ...func(*greengrass.Options)) (*greengrass.ListGroupCertificateAuthoritiesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupCertificateAuthorities")
	}

	var r0 *greengrass.ListGroupCertificateAuthoritiesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListGroupCertificateAuthoritiesInput, ...func(*greengrass.Options)) (*greengrass.ListGroupCertificateAuthoritiesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListGroupCertificateAuthoritiesInput, ...func(*greengrass.Options)) *greengrass.ListGroupCertificateAuthoritiesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListGroupCertificateAuthoritiesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListGroupCertificateAuthoritiesInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroupVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroupVersions(ctx context.Context, params *greengrass.ListGroupVersionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListGroupVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroupVersions")
	}

	var r0 *greengrass.ListGroupVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListGroupVersionsInput, ...func(*greengrass.Options)) (*greengrass.ListGroupVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListGroupVersionsInput, ...func(*greengrass.Options)) *greengrass.ListGroupVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListGroupVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListGroupVersionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGroups(ctx context.Context, params *greengrass.ListGroupsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGroups")
	}

	var r0 *greengrass.ListGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListGroupsInput, ...func(*greengrass.Options)) (*greengrass.ListGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListGroupsInput, ...func(*greengrass.Options)) *greengrass.ListGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListGroupsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoggerDefinitionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLoggerDefinitionVersions(ctx context.Context, params *greengrass.ListLoggerDefinitionVersionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListLoggerDefinitionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLoggerDefinitionVersions")
	}

	var r0 *greengrass.ListLoggerDefinitionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListLoggerDefinitionVersionsInput, ...func(*greengrass.Options)) (*greengrass.ListLoggerDefinitionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListLoggerDefinitionVersionsInput, ...func(*greengrass.Options)) *greengrass.ListLoggerDefinitionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListLoggerDefinitionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListLoggerDefinitionVersionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListLoggerDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListLoggerDefinitions(ctx context.Context, params *greengrass.ListLoggerDefinitionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListLoggerDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListLoggerDefinitions")
	}

	var r0 *greengrass.ListLoggerDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListLoggerDefinitionsInput, ...func(*greengrass.Options)) (*greengrass.ListLoggerDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListLoggerDefinitionsInput, ...func(*greengrass.Options)) *greengrass.ListLoggerDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListLoggerDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListLoggerDefinitionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceDefinitionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceDefinitionVersions(ctx context.Context, params *greengrass.ListResourceDefinitionVersionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListResourceDefinitionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceDefinitionVersions")
	}

	var r0 *greengrass.ListResourceDefinitionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListResourceDefinitionVersionsInput, ...func(*greengrass.Options)) (*greengrass.ListResourceDefinitionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListResourceDefinitionVersionsInput, ...func(*greengrass.Options)) *greengrass.ListResourceDefinitionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListResourceDefinitionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListResourceDefinitionVersionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListResourceDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListResourceDefinitions(ctx context.Context, params *greengrass.ListResourceDefinitionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListResourceDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListResourceDefinitions")
	}

	var r0 *greengrass.ListResourceDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListResourceDefinitionsInput, ...func(*greengrass.Options)) (*greengrass.ListResourceDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListResourceDefinitionsInput, ...func(*greengrass.Options)) *greengrass.ListResourceDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListResourceDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListResourceDefinitionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptionDefinitionVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscriptionDefinitionVersions(ctx context.Context, params *greengrass.ListSubscriptionDefinitionVersionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionDefinitionVersions")
	}

	var r0 *greengrass.ListSubscriptionDefinitionVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListSubscriptionDefinitionVersionsInput, ...func(*greengrass.Options)) (*greengrass.ListSubscriptionDefinitionVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListSubscriptionDefinitionVersionsInput, ...func(*greengrass.Options)) *greengrass.ListSubscriptionDefinitionVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListSubscriptionDefinitionVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListSubscriptionDefinitionVersionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSubscriptionDefinitions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSubscriptionDefinitions(ctx context.Context, params *greengrass.ListSubscriptionDefinitionsInput, optFns ...func(*greengrass.Options)) (*greengrass.ListSubscriptionDefinitionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSubscriptionDefinitions")
	}

	var r0 *greengrass.ListSubscriptionDefinitionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListSubscriptionDefinitionsInput, ...func(*greengrass.Options)) (*greengrass.ListSubscriptionDefinitionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListSubscriptionDefinitionsInput, ...func(*greengrass.Options)) *greengrass.ListSubscriptionDefinitionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListSubscriptionDefinitionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListSubscriptionDefinitionsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *greengrass.ListTagsForResourceInput, optFns ...func(*greengrass.Options)) (*greengrass.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *greengrass.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListTagsForResourceInput, ...func(*greengrass.Options)) (*greengrass.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ListTagsForResourceInput, ...func(*greengrass.Options)) *greengrass.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ListTagsForResourceInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() greengrass.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 greengrass.Options
	if rf, ok := ret.Get(0).(func() greengrass.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(greengrass.Options)
	}

	return r0
}

// ResetDeployments provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResetDeployments(ctx context.Context, params *greengrass.ResetDeploymentsInput, optFns ...func(*greengrass.Options)) (*greengrass.ResetDeploymentsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResetDeployments")
	}

	var r0 *greengrass.ResetDeploymentsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ResetDeploymentsInput, ...func(*greengrass.Options)) (*greengrass.ResetDeploymentsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.ResetDeploymentsInput, ...func(*greengrass.Options)) *greengrass.ResetDeploymentsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.ResetDeploymentsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.ResetDeploymentsInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartBulkDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartBulkDeployment(ctx context.Context, params *greengrass.StartBulkDeploymentInput, optFns ...func(*greengrass.Options)) (*greengrass.StartBulkDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartBulkDeployment")
	}

	var r0 *greengrass.StartBulkDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.StartBulkDeploymentInput, ...func(*greengrass.Options)) (*greengrass.StartBulkDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.StartBulkDeploymentInput, ...func(*greengrass.Options)) *greengrass.StartBulkDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.StartBulkDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.StartBulkDeploymentInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopBulkDeployment provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopBulkDeployment(ctx context.Context, params *greengrass.StopBulkDeploymentInput, optFns ...func(*greengrass.Options)) (*greengrass.StopBulkDeploymentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopBulkDeployment")
	}

	var r0 *greengrass.StopBulkDeploymentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.StopBulkDeploymentInput, ...func(*greengrass.Options)) (*greengrass.StopBulkDeploymentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.StopBulkDeploymentInput, ...func(*greengrass.Options)) *greengrass.StopBulkDeploymentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.StopBulkDeploymentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.StopBulkDeploymentInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *greengrass.TagResourceInput, optFns ...func(*greengrass.Options)) (*greengrass.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *greengrass.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.TagResourceInput, ...func(*greengrass.Options)) (*greengrass.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.TagResourceInput, ...func(*greengrass.Options)) *greengrass.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.TagResourceInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *greengrass.UntagResourceInput, optFns ...func(*greengrass.Options)) (*greengrass.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *greengrass.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UntagResourceInput, ...func(*greengrass.Options)) (*greengrass.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UntagResourceInput, ...func(*greengrass.Options)) *greengrass.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UntagResourceInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectivityInfo provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnectivityInfo(ctx context.Context, params *greengrass.UpdateConnectivityInfoInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateConnectivityInfoOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectivityInfo")
	}

	var r0 *greengrass.UpdateConnectivityInfoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateConnectivityInfoInput, ...func(*greengrass.Options)) (*greengrass.UpdateConnectivityInfoOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateConnectivityInfoInput, ...func(*greengrass.Options)) *greengrass.UpdateConnectivityInfoOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateConnectivityInfoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateConnectivityInfoInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateConnectorDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateConnectorDefinition(ctx context.Context, params *greengrass.UpdateConnectorDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateConnectorDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateConnectorDefinition")
	}

	var r0 *greengrass.UpdateConnectorDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateConnectorDefinitionInput, ...func(*greengrass.Options)) (*greengrass.UpdateConnectorDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateConnectorDefinitionInput, ...func(*greengrass.Options)) *greengrass.UpdateConnectorDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateConnectorDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateConnectorDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCoreDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCoreDefinition(ctx context.Context, params *greengrass.UpdateCoreDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateCoreDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCoreDefinition")
	}

	var r0 *greengrass.UpdateCoreDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateCoreDefinitionInput, ...func(*greengrass.Options)) (*greengrass.UpdateCoreDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateCoreDefinitionInput, ...func(*greengrass.Options)) *greengrass.UpdateCoreDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateCoreDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateCoreDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDeviceDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDeviceDefinition(ctx context.Context, params *greengrass.UpdateDeviceDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateDeviceDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDeviceDefinition")
	}

	var r0 *greengrass.UpdateDeviceDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateDeviceDefinitionInput, ...func(*greengrass.Options)) (*greengrass.UpdateDeviceDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateDeviceDefinitionInput, ...func(*greengrass.Options)) *greengrass.UpdateDeviceDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateDeviceDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateDeviceDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateFunctionDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateFunctionDefinition(ctx context.Context, params *greengrass.UpdateFunctionDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateFunctionDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateFunctionDefinition")
	}

	var r0 *greengrass.UpdateFunctionDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateFunctionDefinitionInput, ...func(*greengrass.Options)) (*greengrass.UpdateFunctionDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateFunctionDefinitionInput, ...func(*greengrass.Options)) *greengrass.UpdateFunctionDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateFunctionDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateFunctionDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGroup(ctx context.Context, params *greengrass.UpdateGroupInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 *greengrass.UpdateGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateGroupInput, ...func(*greengrass.Options)) (*greengrass.UpdateGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateGroupInput, ...func(*greengrass.Options)) *greengrass.UpdateGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateGroupInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGroupCertificateConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGroupCertificateConfiguration(ctx context.Context, params *greengrass.UpdateGroupCertificateConfigurationInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateGroupCertificateConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupCertificateConfiguration")
	}

	var r0 *greengrass.UpdateGroupCertificateConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateGroupCertificateConfigurationInput, ...func(*greengrass.Options)) (*greengrass.UpdateGroupCertificateConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateGroupCertificateConfigurationInput, ...func(*greengrass.Options)) *greengrass.UpdateGroupCertificateConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateGroupCertificateConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateGroupCertificateConfigurationInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateLoggerDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateLoggerDefinition(ctx context.Context, params *greengrass.UpdateLoggerDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateLoggerDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateLoggerDefinition")
	}

	var r0 *greengrass.UpdateLoggerDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateLoggerDefinitionInput, ...func(*greengrass.Options)) (*greengrass.UpdateLoggerDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateLoggerDefinitionInput, ...func(*greengrass.Options)) *greengrass.UpdateLoggerDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateLoggerDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateLoggerDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateResourceDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateResourceDefinition(ctx context.Context, params *greengrass.UpdateResourceDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateResourceDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResourceDefinition")
	}

	var r0 *greengrass.UpdateResourceDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateResourceDefinitionInput, ...func(*greengrass.Options)) (*greengrass.UpdateResourceDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateResourceDefinitionInput, ...func(*greengrass.Options)) *greengrass.UpdateResourceDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateResourceDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateResourceDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSubscriptionDefinition provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSubscriptionDefinition(ctx context.Context, params *greengrass.UpdateSubscriptionDefinitionInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateSubscriptionDefinitionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSubscriptionDefinition")
	}

	var r0 *greengrass.UpdateSubscriptionDefinitionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateSubscriptionDefinitionInput, ...func(*greengrass.Options)) (*greengrass.UpdateSubscriptionDefinitionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateSubscriptionDefinitionInput, ...func(*greengrass.Options)) *greengrass.UpdateSubscriptionDefinitionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateSubscriptionDefinitionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateSubscriptionDefinitionInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateThingRuntimeConfiguration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateThingRuntimeConfiguration(ctx context.Context, params *greengrass.UpdateThingRuntimeConfigurationInput, optFns ...func(*greengrass.Options)) (*greengrass.UpdateThingRuntimeConfigurationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateThingRuntimeConfiguration")
	}

	var r0 *greengrass.UpdateThingRuntimeConfigurationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateThingRuntimeConfigurationInput, ...func(*greengrass.Options)) (*greengrass.UpdateThingRuntimeConfigurationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *greengrass.UpdateThingRuntimeConfigurationInput, ...func(*greengrass.Options)) *greengrass.UpdateThingRuntimeConfigurationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*greengrass.UpdateThingRuntimeConfigurationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *greengrass.UpdateThingRuntimeConfigurationInput, ...func(*greengrass.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
