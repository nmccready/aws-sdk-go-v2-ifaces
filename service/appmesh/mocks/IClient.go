// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	appmesh "github.com/aws/aws-sdk-go-v2/service/appmesh"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateGatewayRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateGatewayRoute(ctx context.Context, params *appmesh.CreateGatewayRouteInput, optFns ...func(*appmesh.Options)) (*appmesh.CreateGatewayRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateGatewayRoute")
	}

	var r0 *appmesh.CreateGatewayRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateGatewayRouteInput, ...func(*appmesh.Options)) (*appmesh.CreateGatewayRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateGatewayRouteInput, ...func(*appmesh.Options)) *appmesh.CreateGatewayRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.CreateGatewayRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.CreateGatewayRouteInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateMesh provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateMesh(ctx context.Context, params *appmesh.CreateMeshInput, optFns ...func(*appmesh.Options)) (*appmesh.CreateMeshOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateMesh")
	}

	var r0 *appmesh.CreateMeshOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateMeshInput, ...func(*appmesh.Options)) (*appmesh.CreateMeshOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateMeshInput, ...func(*appmesh.Options)) *appmesh.CreateMeshOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.CreateMeshOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.CreateMeshInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateRoute(ctx context.Context, params *appmesh.CreateRouteInput, optFns ...func(*appmesh.Options)) (*appmesh.CreateRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateRoute")
	}

	var r0 *appmesh.CreateRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateRouteInput, ...func(*appmesh.Options)) (*appmesh.CreateRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateRouteInput, ...func(*appmesh.Options)) *appmesh.CreateRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.CreateRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.CreateRouteInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVirtualGateway(ctx context.Context, params *appmesh.CreateVirtualGatewayInput, optFns ...func(*appmesh.Options)) (*appmesh.CreateVirtualGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVirtualGateway")
	}

	var r0 *appmesh.CreateVirtualGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateVirtualGatewayInput, ...func(*appmesh.Options)) (*appmesh.CreateVirtualGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateVirtualGatewayInput, ...func(*appmesh.Options)) *appmesh.CreateVirtualGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.CreateVirtualGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.CreateVirtualGatewayInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVirtualNode(ctx context.Context, params *appmesh.CreateVirtualNodeInput, optFns ...func(*appmesh.Options)) (*appmesh.CreateVirtualNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVirtualNode")
	}

	var r0 *appmesh.CreateVirtualNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateVirtualNodeInput, ...func(*appmesh.Options)) (*appmesh.CreateVirtualNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateVirtualNodeInput, ...func(*appmesh.Options)) *appmesh.CreateVirtualNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.CreateVirtualNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.CreateVirtualNodeInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualRouter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVirtualRouter(ctx context.Context, params *appmesh.CreateVirtualRouterInput, optFns ...func(*appmesh.Options)) (*appmesh.CreateVirtualRouterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVirtualRouter")
	}

	var r0 *appmesh.CreateVirtualRouterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateVirtualRouterInput, ...func(*appmesh.Options)) (*appmesh.CreateVirtualRouterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateVirtualRouterInput, ...func(*appmesh.Options)) *appmesh.CreateVirtualRouterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.CreateVirtualRouterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.CreateVirtualRouterInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateVirtualService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateVirtualService(ctx context.Context, params *appmesh.CreateVirtualServiceInput, optFns ...func(*appmesh.Options)) (*appmesh.CreateVirtualServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateVirtualService")
	}

	var r0 *appmesh.CreateVirtualServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateVirtualServiceInput, ...func(*appmesh.Options)) (*appmesh.CreateVirtualServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.CreateVirtualServiceInput, ...func(*appmesh.Options)) *appmesh.CreateVirtualServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.CreateVirtualServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.CreateVirtualServiceInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteGatewayRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteGatewayRoute(ctx context.Context, params *appmesh.DeleteGatewayRouteInput, optFns ...func(*appmesh.Options)) (*appmesh.DeleteGatewayRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGatewayRoute")
	}

	var r0 *appmesh.DeleteGatewayRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteGatewayRouteInput, ...func(*appmesh.Options)) (*appmesh.DeleteGatewayRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteGatewayRouteInput, ...func(*appmesh.Options)) *appmesh.DeleteGatewayRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DeleteGatewayRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DeleteGatewayRouteInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteMesh provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteMesh(ctx context.Context, params *appmesh.DeleteMeshInput, optFns ...func(*appmesh.Options)) (*appmesh.DeleteMeshOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteMesh")
	}

	var r0 *appmesh.DeleteMeshOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteMeshInput, ...func(*appmesh.Options)) (*appmesh.DeleteMeshOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteMeshInput, ...func(*appmesh.Options)) *appmesh.DeleteMeshOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DeleteMeshOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DeleteMeshInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteRoute(ctx context.Context, params *appmesh.DeleteRouteInput, optFns ...func(*appmesh.Options)) (*appmesh.DeleteRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoute")
	}

	var r0 *appmesh.DeleteRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteRouteInput, ...func(*appmesh.Options)) (*appmesh.DeleteRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteRouteInput, ...func(*appmesh.Options)) *appmesh.DeleteRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DeleteRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DeleteRouteInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVirtualGateway(ctx context.Context, params *appmesh.DeleteVirtualGatewayInput, optFns ...func(*appmesh.Options)) (*appmesh.DeleteVirtualGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVirtualGateway")
	}

	var r0 *appmesh.DeleteVirtualGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteVirtualGatewayInput, ...func(*appmesh.Options)) (*appmesh.DeleteVirtualGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteVirtualGatewayInput, ...func(*appmesh.Options)) *appmesh.DeleteVirtualGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DeleteVirtualGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DeleteVirtualGatewayInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVirtualNode(ctx context.Context, params *appmesh.DeleteVirtualNodeInput, optFns ...func(*appmesh.Options)) (*appmesh.DeleteVirtualNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVirtualNode")
	}

	var r0 *appmesh.DeleteVirtualNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteVirtualNodeInput, ...func(*appmesh.Options)) (*appmesh.DeleteVirtualNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteVirtualNodeInput, ...func(*appmesh.Options)) *appmesh.DeleteVirtualNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DeleteVirtualNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DeleteVirtualNodeInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualRouter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVirtualRouter(ctx context.Context, params *appmesh.DeleteVirtualRouterInput, optFns ...func(*appmesh.Options)) (*appmesh.DeleteVirtualRouterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVirtualRouter")
	}

	var r0 *appmesh.DeleteVirtualRouterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteVirtualRouterInput, ...func(*appmesh.Options)) (*appmesh.DeleteVirtualRouterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteVirtualRouterInput, ...func(*appmesh.Options)) *appmesh.DeleteVirtualRouterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DeleteVirtualRouterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DeleteVirtualRouterInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVirtualService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVirtualService(ctx context.Context, params *appmesh.DeleteVirtualServiceInput, optFns ...func(*appmesh.Options)) (*appmesh.DeleteVirtualServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVirtualService")
	}

	var r0 *appmesh.DeleteVirtualServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteVirtualServiceInput, ...func(*appmesh.Options)) (*appmesh.DeleteVirtualServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DeleteVirtualServiceInput, ...func(*appmesh.Options)) *appmesh.DeleteVirtualServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DeleteVirtualServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DeleteVirtualServiceInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeGatewayRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeGatewayRoute(ctx context.Context, params *appmesh.DescribeGatewayRouteInput, optFns ...func(*appmesh.Options)) (*appmesh.DescribeGatewayRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeGatewayRoute")
	}

	var r0 *appmesh.DescribeGatewayRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeGatewayRouteInput, ...func(*appmesh.Options)) (*appmesh.DescribeGatewayRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeGatewayRouteInput, ...func(*appmesh.Options)) *appmesh.DescribeGatewayRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DescribeGatewayRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DescribeGatewayRouteInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeMesh provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeMesh(ctx context.Context, params *appmesh.DescribeMeshInput, optFns ...func(*appmesh.Options)) (*appmesh.DescribeMeshOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeMesh")
	}

	var r0 *appmesh.DescribeMeshOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeMeshInput, ...func(*appmesh.Options)) (*appmesh.DescribeMeshOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeMeshInput, ...func(*appmesh.Options)) *appmesh.DescribeMeshOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DescribeMeshOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DescribeMeshInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeRoute(ctx context.Context, params *appmesh.DescribeRouteInput, optFns ...func(*appmesh.Options)) (*appmesh.DescribeRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeRoute")
	}

	var r0 *appmesh.DescribeRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeRouteInput, ...func(*appmesh.Options)) (*appmesh.DescribeRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeRouteInput, ...func(*appmesh.Options)) *appmesh.DescribeRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DescribeRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DescribeRouteInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVirtualGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVirtualGateway(ctx context.Context, params *appmesh.DescribeVirtualGatewayInput, optFns ...func(*appmesh.Options)) (*appmesh.DescribeVirtualGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVirtualGateway")
	}

	var r0 *appmesh.DescribeVirtualGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeVirtualGatewayInput, ...func(*appmesh.Options)) (*appmesh.DescribeVirtualGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeVirtualGatewayInput, ...func(*appmesh.Options)) *appmesh.DescribeVirtualGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DescribeVirtualGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DescribeVirtualGatewayInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVirtualNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVirtualNode(ctx context.Context, params *appmesh.DescribeVirtualNodeInput, optFns ...func(*appmesh.Options)) (*appmesh.DescribeVirtualNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVirtualNode")
	}

	var r0 *appmesh.DescribeVirtualNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeVirtualNodeInput, ...func(*appmesh.Options)) (*appmesh.DescribeVirtualNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeVirtualNodeInput, ...func(*appmesh.Options)) *appmesh.DescribeVirtualNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DescribeVirtualNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DescribeVirtualNodeInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVirtualRouter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVirtualRouter(ctx context.Context, params *appmesh.DescribeVirtualRouterInput, optFns ...func(*appmesh.Options)) (*appmesh.DescribeVirtualRouterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVirtualRouter")
	}

	var r0 *appmesh.DescribeVirtualRouterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeVirtualRouterInput, ...func(*appmesh.Options)) (*appmesh.DescribeVirtualRouterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeVirtualRouterInput, ...func(*appmesh.Options)) *appmesh.DescribeVirtualRouterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DescribeVirtualRouterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DescribeVirtualRouterInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DescribeVirtualService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DescribeVirtualService(ctx context.Context, params *appmesh.DescribeVirtualServiceInput, optFns ...func(*appmesh.Options)) (*appmesh.DescribeVirtualServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DescribeVirtualService")
	}

	var r0 *appmesh.DescribeVirtualServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeVirtualServiceInput, ...func(*appmesh.Options)) (*appmesh.DescribeVirtualServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.DescribeVirtualServiceInput, ...func(*appmesh.Options)) *appmesh.DescribeVirtualServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.DescribeVirtualServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.DescribeVirtualServiceInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGatewayRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGatewayRoutes(ctx context.Context, params *appmesh.ListGatewayRoutesInput, optFns ...func(*appmesh.Options)) (*appmesh.ListGatewayRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGatewayRoutes")
	}

	var r0 *appmesh.ListGatewayRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListGatewayRoutesInput, ...func(*appmesh.Options)) (*appmesh.ListGatewayRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListGatewayRoutesInput, ...func(*appmesh.Options)) *appmesh.ListGatewayRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.ListGatewayRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.ListGatewayRoutesInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListMeshes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListMeshes(ctx context.Context, params *appmesh.ListMeshesInput, optFns ...func(*appmesh.Options)) (*appmesh.ListMeshesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListMeshes")
	}

	var r0 *appmesh.ListMeshesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListMeshesInput, ...func(*appmesh.Options)) (*appmesh.ListMeshesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListMeshesInput, ...func(*appmesh.Options)) *appmesh.ListMeshesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.ListMeshesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.ListMeshesInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRoutes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRoutes(ctx context.Context, params *appmesh.ListRoutesInput, optFns ...func(*appmesh.Options)) (*appmesh.ListRoutesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRoutes")
	}

	var r0 *appmesh.ListRoutesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListRoutesInput, ...func(*appmesh.Options)) (*appmesh.ListRoutesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListRoutesInput, ...func(*appmesh.Options)) *appmesh.ListRoutesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.ListRoutesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.ListRoutesInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *appmesh.ListTagsForResourceInput, optFns ...func(*appmesh.Options)) (*appmesh.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *appmesh.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListTagsForResourceInput, ...func(*appmesh.Options)) (*appmesh.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListTagsForResourceInput, ...func(*appmesh.Options)) *appmesh.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.ListTagsForResourceInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualGateways provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVirtualGateways(ctx context.Context, params *appmesh.ListVirtualGatewaysInput, optFns ...func(*appmesh.Options)) (*appmesh.ListVirtualGatewaysOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVirtualGateways")
	}

	var r0 *appmesh.ListVirtualGatewaysOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListVirtualGatewaysInput, ...func(*appmesh.Options)) (*appmesh.ListVirtualGatewaysOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListVirtualGatewaysInput, ...func(*appmesh.Options)) *appmesh.ListVirtualGatewaysOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.ListVirtualGatewaysOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.ListVirtualGatewaysInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualNodes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVirtualNodes(ctx context.Context, params *appmesh.ListVirtualNodesInput, optFns ...func(*appmesh.Options)) (*appmesh.ListVirtualNodesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVirtualNodes")
	}

	var r0 *appmesh.ListVirtualNodesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListVirtualNodesInput, ...func(*appmesh.Options)) (*appmesh.ListVirtualNodesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListVirtualNodesInput, ...func(*appmesh.Options)) *appmesh.ListVirtualNodesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.ListVirtualNodesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.ListVirtualNodesInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualRouters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVirtualRouters(ctx context.Context, params *appmesh.ListVirtualRoutersInput, optFns ...func(*appmesh.Options)) (*appmesh.ListVirtualRoutersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVirtualRouters")
	}

	var r0 *appmesh.ListVirtualRoutersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListVirtualRoutersInput, ...func(*appmesh.Options)) (*appmesh.ListVirtualRoutersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListVirtualRoutersInput, ...func(*appmesh.Options)) *appmesh.ListVirtualRoutersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.ListVirtualRoutersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.ListVirtualRoutersInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVirtualServices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVirtualServices(ctx context.Context, params *appmesh.ListVirtualServicesInput, optFns ...func(*appmesh.Options)) (*appmesh.ListVirtualServicesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVirtualServices")
	}

	var r0 *appmesh.ListVirtualServicesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListVirtualServicesInput, ...func(*appmesh.Options)) (*appmesh.ListVirtualServicesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.ListVirtualServicesInput, ...func(*appmesh.Options)) *appmesh.ListVirtualServicesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.ListVirtualServicesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.ListVirtualServicesInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() appmesh.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 appmesh.Options
	if rf, ok := ret.Get(0).(func() appmesh.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(appmesh.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *appmesh.TagResourceInput, optFns ...func(*appmesh.Options)) (*appmesh.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *appmesh.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.TagResourceInput, ...func(*appmesh.Options)) (*appmesh.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.TagResourceInput, ...func(*appmesh.Options)) *appmesh.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.TagResourceInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *appmesh.UntagResourceInput, optFns ...func(*appmesh.Options)) (*appmesh.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *appmesh.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UntagResourceInput, ...func(*appmesh.Options)) (*appmesh.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UntagResourceInput, ...func(*appmesh.Options)) *appmesh.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.UntagResourceInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateGatewayRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateGatewayRoute(ctx context.Context, params *appmesh.UpdateGatewayRouteInput, optFns ...func(*appmesh.Options)) (*appmesh.UpdateGatewayRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGatewayRoute")
	}

	var r0 *appmesh.UpdateGatewayRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateGatewayRouteInput, ...func(*appmesh.Options)) (*appmesh.UpdateGatewayRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateGatewayRouteInput, ...func(*appmesh.Options)) *appmesh.UpdateGatewayRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.UpdateGatewayRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.UpdateGatewayRouteInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateMesh provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateMesh(ctx context.Context, params *appmesh.UpdateMeshInput, optFns ...func(*appmesh.Options)) (*appmesh.UpdateMeshOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateMesh")
	}

	var r0 *appmesh.UpdateMeshOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateMeshInput, ...func(*appmesh.Options)) (*appmesh.UpdateMeshOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateMeshInput, ...func(*appmesh.Options)) *appmesh.UpdateMeshOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.UpdateMeshOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.UpdateMeshInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRoute provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateRoute(ctx context.Context, params *appmesh.UpdateRouteInput, optFns ...func(*appmesh.Options)) (*appmesh.UpdateRouteOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRoute")
	}

	var r0 *appmesh.UpdateRouteOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateRouteInput, ...func(*appmesh.Options)) (*appmesh.UpdateRouteOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateRouteInput, ...func(*appmesh.Options)) *appmesh.UpdateRouteOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.UpdateRouteOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.UpdateRouteInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualGateway provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVirtualGateway(ctx context.Context, params *appmesh.UpdateVirtualGatewayInput, optFns ...func(*appmesh.Options)) (*appmesh.UpdateVirtualGatewayOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVirtualGateway")
	}

	var r0 *appmesh.UpdateVirtualGatewayOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateVirtualGatewayInput, ...func(*appmesh.Options)) (*appmesh.UpdateVirtualGatewayOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateVirtualGatewayInput, ...func(*appmesh.Options)) *appmesh.UpdateVirtualGatewayOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.UpdateVirtualGatewayOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.UpdateVirtualGatewayInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVirtualNode(ctx context.Context, params *appmesh.UpdateVirtualNodeInput, optFns ...func(*appmesh.Options)) (*appmesh.UpdateVirtualNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVirtualNode")
	}

	var r0 *appmesh.UpdateVirtualNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateVirtualNodeInput, ...func(*appmesh.Options)) (*appmesh.UpdateVirtualNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateVirtualNodeInput, ...func(*appmesh.Options)) *appmesh.UpdateVirtualNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.UpdateVirtualNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.UpdateVirtualNodeInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualRouter provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVirtualRouter(ctx context.Context, params *appmesh.UpdateVirtualRouterInput, optFns ...func(*appmesh.Options)) (*appmesh.UpdateVirtualRouterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVirtualRouter")
	}

	var r0 *appmesh.UpdateVirtualRouterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateVirtualRouterInput, ...func(*appmesh.Options)) (*appmesh.UpdateVirtualRouterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateVirtualRouterInput, ...func(*appmesh.Options)) *appmesh.UpdateVirtualRouterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.UpdateVirtualRouterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.UpdateVirtualRouterInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVirtualService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateVirtualService(ctx context.Context, params *appmesh.UpdateVirtualServiceInput, optFns ...func(*appmesh.Options)) (*appmesh.UpdateVirtualServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateVirtualService")
	}

	var r0 *appmesh.UpdateVirtualServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateVirtualServiceInput, ...func(*appmesh.Options)) (*appmesh.UpdateVirtualServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *appmesh.UpdateVirtualServiceInput, ...func(*appmesh.Options)) *appmesh.UpdateVirtualServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*appmesh.UpdateVirtualServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *appmesh.UpdateVirtualServiceInput, ...func(*appmesh.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
