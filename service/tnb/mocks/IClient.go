// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	tnb "github.com/aws/aws-sdk-go-v2/service/tnb"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CancelSolNetworkOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelSolNetworkOperation(ctx context.Context, params *tnb.CancelSolNetworkOperationInput, optFns ...func(*tnb.Options)) (*tnb.CancelSolNetworkOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelSolNetworkOperation")
	}

	var r0 *tnb.CancelSolNetworkOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.CancelSolNetworkOperationInput, ...func(*tnb.Options)) (*tnb.CancelSolNetworkOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.CancelSolNetworkOperationInput, ...func(*tnb.Options)) *tnb.CancelSolNetworkOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.CancelSolNetworkOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.CancelSolNetworkOperationInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSolFunctionPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSolFunctionPackage(ctx context.Context, params *tnb.CreateSolFunctionPackageInput, optFns ...func(*tnb.Options)) (*tnb.CreateSolFunctionPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSolFunctionPackage")
	}

	var r0 *tnb.CreateSolFunctionPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.CreateSolFunctionPackageInput, ...func(*tnb.Options)) (*tnb.CreateSolFunctionPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.CreateSolFunctionPackageInput, ...func(*tnb.Options)) *tnb.CreateSolFunctionPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.CreateSolFunctionPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.CreateSolFunctionPackageInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSolNetworkInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSolNetworkInstance(ctx context.Context, params *tnb.CreateSolNetworkInstanceInput, optFns ...func(*tnb.Options)) (*tnb.CreateSolNetworkInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSolNetworkInstance")
	}

	var r0 *tnb.CreateSolNetworkInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.CreateSolNetworkInstanceInput, ...func(*tnb.Options)) (*tnb.CreateSolNetworkInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.CreateSolNetworkInstanceInput, ...func(*tnb.Options)) *tnb.CreateSolNetworkInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.CreateSolNetworkInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.CreateSolNetworkInstanceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateSolNetworkPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateSolNetworkPackage(ctx context.Context, params *tnb.CreateSolNetworkPackageInput, optFns ...func(*tnb.Options)) (*tnb.CreateSolNetworkPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateSolNetworkPackage")
	}

	var r0 *tnb.CreateSolNetworkPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.CreateSolNetworkPackageInput, ...func(*tnb.Options)) (*tnb.CreateSolNetworkPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.CreateSolNetworkPackageInput, ...func(*tnb.Options)) *tnb.CreateSolNetworkPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.CreateSolNetworkPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.CreateSolNetworkPackageInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSolFunctionPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSolFunctionPackage(ctx context.Context, params *tnb.DeleteSolFunctionPackageInput, optFns ...func(*tnb.Options)) (*tnb.DeleteSolFunctionPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSolFunctionPackage")
	}

	var r0 *tnb.DeleteSolFunctionPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.DeleteSolFunctionPackageInput, ...func(*tnb.Options)) (*tnb.DeleteSolFunctionPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.DeleteSolFunctionPackageInput, ...func(*tnb.Options)) *tnb.DeleteSolFunctionPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.DeleteSolFunctionPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.DeleteSolFunctionPackageInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSolNetworkInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSolNetworkInstance(ctx context.Context, params *tnb.DeleteSolNetworkInstanceInput, optFns ...func(*tnb.Options)) (*tnb.DeleteSolNetworkInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSolNetworkInstance")
	}

	var r0 *tnb.DeleteSolNetworkInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.DeleteSolNetworkInstanceInput, ...func(*tnb.Options)) (*tnb.DeleteSolNetworkInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.DeleteSolNetworkInstanceInput, ...func(*tnb.Options)) *tnb.DeleteSolNetworkInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.DeleteSolNetworkInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.DeleteSolNetworkInstanceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteSolNetworkPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteSolNetworkPackage(ctx context.Context, params *tnb.DeleteSolNetworkPackageInput, optFns ...func(*tnb.Options)) (*tnb.DeleteSolNetworkPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteSolNetworkPackage")
	}

	var r0 *tnb.DeleteSolNetworkPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.DeleteSolNetworkPackageInput, ...func(*tnb.Options)) (*tnb.DeleteSolNetworkPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.DeleteSolNetworkPackageInput, ...func(*tnb.Options)) *tnb.DeleteSolNetworkPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.DeleteSolNetworkPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.DeleteSolNetworkPackageInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolFunctionInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolFunctionInstance(ctx context.Context, params *tnb.GetSolFunctionInstanceInput, optFns ...func(*tnb.Options)) (*tnb.GetSolFunctionInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolFunctionInstance")
	}

	var r0 *tnb.GetSolFunctionInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolFunctionInstanceInput, ...func(*tnb.Options)) (*tnb.GetSolFunctionInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolFunctionInstanceInput, ...func(*tnb.Options)) *tnb.GetSolFunctionInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolFunctionInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolFunctionInstanceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolFunctionPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolFunctionPackage(ctx context.Context, params *tnb.GetSolFunctionPackageInput, optFns ...func(*tnb.Options)) (*tnb.GetSolFunctionPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolFunctionPackage")
	}

	var r0 *tnb.GetSolFunctionPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolFunctionPackageInput, ...func(*tnb.Options)) (*tnb.GetSolFunctionPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolFunctionPackageInput, ...func(*tnb.Options)) *tnb.GetSolFunctionPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolFunctionPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolFunctionPackageInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolFunctionPackageContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolFunctionPackageContent(ctx context.Context, params *tnb.GetSolFunctionPackageContentInput, optFns ...func(*tnb.Options)) (*tnb.GetSolFunctionPackageContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolFunctionPackageContent")
	}

	var r0 *tnb.GetSolFunctionPackageContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolFunctionPackageContentInput, ...func(*tnb.Options)) (*tnb.GetSolFunctionPackageContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolFunctionPackageContentInput, ...func(*tnb.Options)) *tnb.GetSolFunctionPackageContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolFunctionPackageContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolFunctionPackageContentInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolFunctionPackageDescriptor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolFunctionPackageDescriptor(ctx context.Context, params *tnb.GetSolFunctionPackageDescriptorInput, optFns ...func(*tnb.Options)) (*tnb.GetSolFunctionPackageDescriptorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolFunctionPackageDescriptor")
	}

	var r0 *tnb.GetSolFunctionPackageDescriptorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolFunctionPackageDescriptorInput, ...func(*tnb.Options)) (*tnb.GetSolFunctionPackageDescriptorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolFunctionPackageDescriptorInput, ...func(*tnb.Options)) *tnb.GetSolFunctionPackageDescriptorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolFunctionPackageDescriptorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolFunctionPackageDescriptorInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolNetworkInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolNetworkInstance(ctx context.Context, params *tnb.GetSolNetworkInstanceInput, optFns ...func(*tnb.Options)) (*tnb.GetSolNetworkInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolNetworkInstance")
	}

	var r0 *tnb.GetSolNetworkInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkInstanceInput, ...func(*tnb.Options)) (*tnb.GetSolNetworkInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkInstanceInput, ...func(*tnb.Options)) *tnb.GetSolNetworkInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolNetworkInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolNetworkInstanceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolNetworkOperation provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolNetworkOperation(ctx context.Context, params *tnb.GetSolNetworkOperationInput, optFns ...func(*tnb.Options)) (*tnb.GetSolNetworkOperationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolNetworkOperation")
	}

	var r0 *tnb.GetSolNetworkOperationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkOperationInput, ...func(*tnb.Options)) (*tnb.GetSolNetworkOperationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkOperationInput, ...func(*tnb.Options)) *tnb.GetSolNetworkOperationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolNetworkOperationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolNetworkOperationInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolNetworkPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolNetworkPackage(ctx context.Context, params *tnb.GetSolNetworkPackageInput, optFns ...func(*tnb.Options)) (*tnb.GetSolNetworkPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolNetworkPackage")
	}

	var r0 *tnb.GetSolNetworkPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkPackageInput, ...func(*tnb.Options)) (*tnb.GetSolNetworkPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkPackageInput, ...func(*tnb.Options)) *tnb.GetSolNetworkPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolNetworkPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolNetworkPackageInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolNetworkPackageContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolNetworkPackageContent(ctx context.Context, params *tnb.GetSolNetworkPackageContentInput, optFns ...func(*tnb.Options)) (*tnb.GetSolNetworkPackageContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolNetworkPackageContent")
	}

	var r0 *tnb.GetSolNetworkPackageContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkPackageContentInput, ...func(*tnb.Options)) (*tnb.GetSolNetworkPackageContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkPackageContentInput, ...func(*tnb.Options)) *tnb.GetSolNetworkPackageContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolNetworkPackageContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolNetworkPackageContentInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSolNetworkPackageDescriptor provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetSolNetworkPackageDescriptor(ctx context.Context, params *tnb.GetSolNetworkPackageDescriptorInput, optFns ...func(*tnb.Options)) (*tnb.GetSolNetworkPackageDescriptorOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetSolNetworkPackageDescriptor")
	}

	var r0 *tnb.GetSolNetworkPackageDescriptorOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkPackageDescriptorInput, ...func(*tnb.Options)) (*tnb.GetSolNetworkPackageDescriptorOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.GetSolNetworkPackageDescriptorInput, ...func(*tnb.Options)) *tnb.GetSolNetworkPackageDescriptorOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.GetSolNetworkPackageDescriptorOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.GetSolNetworkPackageDescriptorInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InstantiateSolNetworkInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InstantiateSolNetworkInstance(ctx context.Context, params *tnb.InstantiateSolNetworkInstanceInput, optFns ...func(*tnb.Options)) (*tnb.InstantiateSolNetworkInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InstantiateSolNetworkInstance")
	}

	var r0 *tnb.InstantiateSolNetworkInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.InstantiateSolNetworkInstanceInput, ...func(*tnb.Options)) (*tnb.InstantiateSolNetworkInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.InstantiateSolNetworkInstanceInput, ...func(*tnb.Options)) *tnb.InstantiateSolNetworkInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.InstantiateSolNetworkInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.InstantiateSolNetworkInstanceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSolFunctionInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSolFunctionInstances(ctx context.Context, params *tnb.ListSolFunctionInstancesInput, optFns ...func(*tnb.Options)) (*tnb.ListSolFunctionInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSolFunctionInstances")
	}

	var r0 *tnb.ListSolFunctionInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolFunctionInstancesInput, ...func(*tnb.Options)) (*tnb.ListSolFunctionInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolFunctionInstancesInput, ...func(*tnb.Options)) *tnb.ListSolFunctionInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.ListSolFunctionInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.ListSolFunctionInstancesInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSolFunctionPackages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSolFunctionPackages(ctx context.Context, params *tnb.ListSolFunctionPackagesInput, optFns ...func(*tnb.Options)) (*tnb.ListSolFunctionPackagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSolFunctionPackages")
	}

	var r0 *tnb.ListSolFunctionPackagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolFunctionPackagesInput, ...func(*tnb.Options)) (*tnb.ListSolFunctionPackagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolFunctionPackagesInput, ...func(*tnb.Options)) *tnb.ListSolFunctionPackagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.ListSolFunctionPackagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.ListSolFunctionPackagesInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSolNetworkInstances provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSolNetworkInstances(ctx context.Context, params *tnb.ListSolNetworkInstancesInput, optFns ...func(*tnb.Options)) (*tnb.ListSolNetworkInstancesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSolNetworkInstances")
	}

	var r0 *tnb.ListSolNetworkInstancesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolNetworkInstancesInput, ...func(*tnb.Options)) (*tnb.ListSolNetworkInstancesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolNetworkInstancesInput, ...func(*tnb.Options)) *tnb.ListSolNetworkInstancesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.ListSolNetworkInstancesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.ListSolNetworkInstancesInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSolNetworkOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSolNetworkOperations(ctx context.Context, params *tnb.ListSolNetworkOperationsInput, optFns ...func(*tnb.Options)) (*tnb.ListSolNetworkOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSolNetworkOperations")
	}

	var r0 *tnb.ListSolNetworkOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolNetworkOperationsInput, ...func(*tnb.Options)) (*tnb.ListSolNetworkOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolNetworkOperationsInput, ...func(*tnb.Options)) *tnb.ListSolNetworkOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.ListSolNetworkOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.ListSolNetworkOperationsInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSolNetworkPackages provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSolNetworkPackages(ctx context.Context, params *tnb.ListSolNetworkPackagesInput, optFns ...func(*tnb.Options)) (*tnb.ListSolNetworkPackagesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSolNetworkPackages")
	}

	var r0 *tnb.ListSolNetworkPackagesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolNetworkPackagesInput, ...func(*tnb.Options)) (*tnb.ListSolNetworkPackagesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListSolNetworkPackagesInput, ...func(*tnb.Options)) *tnb.ListSolNetworkPackagesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.ListSolNetworkPackagesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.ListSolNetworkPackagesInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *tnb.ListTagsForResourceInput, optFns ...func(*tnb.Options)) (*tnb.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *tnb.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListTagsForResourceInput, ...func(*tnb.Options)) (*tnb.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ListTagsForResourceInput, ...func(*tnb.Options)) *tnb.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.ListTagsForResourceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() tnb.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 tnb.Options
	if rf, ok := ret.Get(0).(func() tnb.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(tnb.Options)
	}

	return r0
}

// PutSolFunctionPackageContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSolFunctionPackageContent(ctx context.Context, params *tnb.PutSolFunctionPackageContentInput, optFns ...func(*tnb.Options)) (*tnb.PutSolFunctionPackageContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSolFunctionPackageContent")
	}

	var r0 *tnb.PutSolFunctionPackageContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.PutSolFunctionPackageContentInput, ...func(*tnb.Options)) (*tnb.PutSolFunctionPackageContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.PutSolFunctionPackageContentInput, ...func(*tnb.Options)) *tnb.PutSolFunctionPackageContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.PutSolFunctionPackageContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.PutSolFunctionPackageContentInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PutSolNetworkPackageContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutSolNetworkPackageContent(ctx context.Context, params *tnb.PutSolNetworkPackageContentInput, optFns ...func(*tnb.Options)) (*tnb.PutSolNetworkPackageContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutSolNetworkPackageContent")
	}

	var r0 *tnb.PutSolNetworkPackageContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.PutSolNetworkPackageContentInput, ...func(*tnb.Options)) (*tnb.PutSolNetworkPackageContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.PutSolNetworkPackageContentInput, ...func(*tnb.Options)) *tnb.PutSolNetworkPackageContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.PutSolNetworkPackageContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.PutSolNetworkPackageContentInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *tnb.TagResourceInput, optFns ...func(*tnb.Options)) (*tnb.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *tnb.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.TagResourceInput, ...func(*tnb.Options)) (*tnb.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.TagResourceInput, ...func(*tnb.Options)) *tnb.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.TagResourceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TerminateSolNetworkInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TerminateSolNetworkInstance(ctx context.Context, params *tnb.TerminateSolNetworkInstanceInput, optFns ...func(*tnb.Options)) (*tnb.TerminateSolNetworkInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TerminateSolNetworkInstance")
	}

	var r0 *tnb.TerminateSolNetworkInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.TerminateSolNetworkInstanceInput, ...func(*tnb.Options)) (*tnb.TerminateSolNetworkInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.TerminateSolNetworkInstanceInput, ...func(*tnb.Options)) *tnb.TerminateSolNetworkInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.TerminateSolNetworkInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.TerminateSolNetworkInstanceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *tnb.UntagResourceInput, optFns ...func(*tnb.Options)) (*tnb.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *tnb.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.UntagResourceInput, ...func(*tnb.Options)) (*tnb.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.UntagResourceInput, ...func(*tnb.Options)) *tnb.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.UntagResourceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSolFunctionPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSolFunctionPackage(ctx context.Context, params *tnb.UpdateSolFunctionPackageInput, optFns ...func(*tnb.Options)) (*tnb.UpdateSolFunctionPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSolFunctionPackage")
	}

	var r0 *tnb.UpdateSolFunctionPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.UpdateSolFunctionPackageInput, ...func(*tnb.Options)) (*tnb.UpdateSolFunctionPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.UpdateSolFunctionPackageInput, ...func(*tnb.Options)) *tnb.UpdateSolFunctionPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.UpdateSolFunctionPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.UpdateSolFunctionPackageInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSolNetworkInstance provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSolNetworkInstance(ctx context.Context, params *tnb.UpdateSolNetworkInstanceInput, optFns ...func(*tnb.Options)) (*tnb.UpdateSolNetworkInstanceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSolNetworkInstance")
	}

	var r0 *tnb.UpdateSolNetworkInstanceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.UpdateSolNetworkInstanceInput, ...func(*tnb.Options)) (*tnb.UpdateSolNetworkInstanceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.UpdateSolNetworkInstanceInput, ...func(*tnb.Options)) *tnb.UpdateSolNetworkInstanceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.UpdateSolNetworkInstanceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.UpdateSolNetworkInstanceInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateSolNetworkPackage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateSolNetworkPackage(ctx context.Context, params *tnb.UpdateSolNetworkPackageInput, optFns ...func(*tnb.Options)) (*tnb.UpdateSolNetworkPackageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSolNetworkPackage")
	}

	var r0 *tnb.UpdateSolNetworkPackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.UpdateSolNetworkPackageInput, ...func(*tnb.Options)) (*tnb.UpdateSolNetworkPackageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.UpdateSolNetworkPackageInput, ...func(*tnb.Options)) *tnb.UpdateSolNetworkPackageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.UpdateSolNetworkPackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.UpdateSolNetworkPackageInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateSolFunctionPackageContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ValidateSolFunctionPackageContent(ctx context.Context, params *tnb.ValidateSolFunctionPackageContentInput, optFns ...func(*tnb.Options)) (*tnb.ValidateSolFunctionPackageContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSolFunctionPackageContent")
	}

	var r0 *tnb.ValidateSolFunctionPackageContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ValidateSolFunctionPackageContentInput, ...func(*tnb.Options)) (*tnb.ValidateSolFunctionPackageContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ValidateSolFunctionPackageContentInput, ...func(*tnb.Options)) *tnb.ValidateSolFunctionPackageContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.ValidateSolFunctionPackageContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.ValidateSolFunctionPackageContentInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ValidateSolNetworkPackageContent provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ValidateSolNetworkPackageContent(ctx context.Context, params *tnb.ValidateSolNetworkPackageContentInput, optFns ...func(*tnb.Options)) (*tnb.ValidateSolNetworkPackageContentOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ValidateSolNetworkPackageContent")
	}

	var r0 *tnb.ValidateSolNetworkPackageContentOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ValidateSolNetworkPackageContentInput, ...func(*tnb.Options)) (*tnb.ValidateSolNetworkPackageContentOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *tnb.ValidateSolNetworkPackageContentInput, ...func(*tnb.Options)) *tnb.ValidateSolNetworkPackageContentOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tnb.ValidateSolNetworkPackageContentOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *tnb.ValidateSolNetworkPackageContentInput, ...func(*tnb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
