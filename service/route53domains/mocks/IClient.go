// Code generated by mockery v2.39.2. DO NOT EDIT.

package mocks

import (
	context "context"

	route53domains "github.com/aws/aws-sdk-go-v2/service/route53domains"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptDomainTransferFromAnotherAwsAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptDomainTransferFromAnotherAwsAccount(ctx context.Context, params *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput, optFns ...func(*route53domains.Options)) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptDomainTransferFromAnotherAwsAccount")
	}

	var r0 *route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput, ...func(*route53domains.Options)) (*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput, ...func(*route53domains.Options)) *route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.AcceptDomainTransferFromAnotherAwsAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.AcceptDomainTransferFromAnotherAwsAccountInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AssociateDelegationSignerToDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AssociateDelegationSignerToDomain(ctx context.Context, params *route53domains.AssociateDelegationSignerToDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.AssociateDelegationSignerToDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AssociateDelegationSignerToDomain")
	}

	var r0 *route53domains.AssociateDelegationSignerToDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.AssociateDelegationSignerToDomainInput, ...func(*route53domains.Options)) (*route53domains.AssociateDelegationSignerToDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.AssociateDelegationSignerToDomainInput, ...func(*route53domains.Options)) *route53domains.AssociateDelegationSignerToDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.AssociateDelegationSignerToDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.AssociateDelegationSignerToDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CancelDomainTransferToAnotherAwsAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CancelDomainTransferToAnotherAwsAccount(ctx context.Context, params *route53domains.CancelDomainTransferToAnotherAwsAccountInput, optFns ...func(*route53domains.Options)) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CancelDomainTransferToAnotherAwsAccount")
	}

	var r0 *route53domains.CancelDomainTransferToAnotherAwsAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.CancelDomainTransferToAnotherAwsAccountInput, ...func(*route53domains.Options)) (*route53domains.CancelDomainTransferToAnotherAwsAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.CancelDomainTransferToAnotherAwsAccountInput, ...func(*route53domains.Options)) *route53domains.CancelDomainTransferToAnotherAwsAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.CancelDomainTransferToAnotherAwsAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.CancelDomainTransferToAnotherAwsAccountInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckDomainAvailability provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CheckDomainAvailability(ctx context.Context, params *route53domains.CheckDomainAvailabilityInput, optFns ...func(*route53domains.Options)) (*route53domains.CheckDomainAvailabilityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckDomainAvailability")
	}

	var r0 *route53domains.CheckDomainAvailabilityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.CheckDomainAvailabilityInput, ...func(*route53domains.Options)) (*route53domains.CheckDomainAvailabilityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.CheckDomainAvailabilityInput, ...func(*route53domains.Options)) *route53domains.CheckDomainAvailabilityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.CheckDomainAvailabilityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.CheckDomainAvailabilityInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckDomainTransferability provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CheckDomainTransferability(ctx context.Context, params *route53domains.CheckDomainTransferabilityInput, optFns ...func(*route53domains.Options)) (*route53domains.CheckDomainTransferabilityOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CheckDomainTransferability")
	}

	var r0 *route53domains.CheckDomainTransferabilityOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.CheckDomainTransferabilityInput, ...func(*route53domains.Options)) (*route53domains.CheckDomainTransferabilityOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.CheckDomainTransferabilityInput, ...func(*route53domains.Options)) *route53domains.CheckDomainTransferabilityOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.CheckDomainTransferabilityOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.CheckDomainTransferabilityInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteDomain(ctx context.Context, params *route53domains.DeleteDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.DeleteDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteDomain")
	}

	var r0 *route53domains.DeleteDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DeleteDomainInput, ...func(*route53domains.Options)) (*route53domains.DeleteDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DeleteDomainInput, ...func(*route53domains.Options)) *route53domains.DeleteDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.DeleteDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.DeleteDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTagsForDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteTagsForDomain(ctx context.Context, params *route53domains.DeleteTagsForDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.DeleteTagsForDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTagsForDomain")
	}

	var r0 *route53domains.DeleteTagsForDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DeleteTagsForDomainInput, ...func(*route53domains.Options)) (*route53domains.DeleteTagsForDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DeleteTagsForDomainInput, ...func(*route53domains.Options)) *route53domains.DeleteTagsForDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.DeleteTagsForDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.DeleteTagsForDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableDomainAutoRenew provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableDomainAutoRenew(ctx context.Context, params *route53domains.DisableDomainAutoRenewInput, optFns ...func(*route53domains.Options)) (*route53domains.DisableDomainAutoRenewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableDomainAutoRenew")
	}

	var r0 *route53domains.DisableDomainAutoRenewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DisableDomainAutoRenewInput, ...func(*route53domains.Options)) (*route53domains.DisableDomainAutoRenewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DisableDomainAutoRenewInput, ...func(*route53domains.Options)) *route53domains.DisableDomainAutoRenewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.DisableDomainAutoRenewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.DisableDomainAutoRenewInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisableDomainTransferLock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisableDomainTransferLock(ctx context.Context, params *route53domains.DisableDomainTransferLockInput, optFns ...func(*route53domains.Options)) (*route53domains.DisableDomainTransferLockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisableDomainTransferLock")
	}

	var r0 *route53domains.DisableDomainTransferLockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DisableDomainTransferLockInput, ...func(*route53domains.Options)) (*route53domains.DisableDomainTransferLockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DisableDomainTransferLockInput, ...func(*route53domains.Options)) *route53domains.DisableDomainTransferLockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.DisableDomainTransferLockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.DisableDomainTransferLockInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DisassociateDelegationSignerFromDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DisassociateDelegationSignerFromDomain(ctx context.Context, params *route53domains.DisassociateDelegationSignerFromDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.DisassociateDelegationSignerFromDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DisassociateDelegationSignerFromDomain")
	}

	var r0 *route53domains.DisassociateDelegationSignerFromDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DisassociateDelegationSignerFromDomainInput, ...func(*route53domains.Options)) (*route53domains.DisassociateDelegationSignerFromDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.DisassociateDelegationSignerFromDomainInput, ...func(*route53domains.Options)) *route53domains.DisassociateDelegationSignerFromDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.DisassociateDelegationSignerFromDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.DisassociateDelegationSignerFromDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableDomainAutoRenew provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableDomainAutoRenew(ctx context.Context, params *route53domains.EnableDomainAutoRenewInput, optFns ...func(*route53domains.Options)) (*route53domains.EnableDomainAutoRenewOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableDomainAutoRenew")
	}

	var r0 *route53domains.EnableDomainAutoRenewOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.EnableDomainAutoRenewInput, ...func(*route53domains.Options)) (*route53domains.EnableDomainAutoRenewOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.EnableDomainAutoRenewInput, ...func(*route53domains.Options)) *route53domains.EnableDomainAutoRenewOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.EnableDomainAutoRenewOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.EnableDomainAutoRenewInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableDomainTransferLock provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) EnableDomainTransferLock(ctx context.Context, params *route53domains.EnableDomainTransferLockInput, optFns ...func(*route53domains.Options)) (*route53domains.EnableDomainTransferLockOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for EnableDomainTransferLock")
	}

	var r0 *route53domains.EnableDomainTransferLockOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.EnableDomainTransferLockInput, ...func(*route53domains.Options)) (*route53domains.EnableDomainTransferLockOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.EnableDomainTransferLockInput, ...func(*route53domains.Options)) *route53domains.EnableDomainTransferLockOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.EnableDomainTransferLockOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.EnableDomainTransferLockInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactReachabilityStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetContactReachabilityStatus(ctx context.Context, params *route53domains.GetContactReachabilityStatusInput, optFns ...func(*route53domains.Options)) (*route53domains.GetContactReachabilityStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetContactReachabilityStatus")
	}

	var r0 *route53domains.GetContactReachabilityStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.GetContactReachabilityStatusInput, ...func(*route53domains.Options)) (*route53domains.GetContactReachabilityStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.GetContactReachabilityStatusInput, ...func(*route53domains.Options)) *route53domains.GetContactReachabilityStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.GetContactReachabilityStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.GetContactReachabilityStatusInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainDetail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainDetail(ctx context.Context, params *route53domains.GetDomainDetailInput, optFns ...func(*route53domains.Options)) (*route53domains.GetDomainDetailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainDetail")
	}

	var r0 *route53domains.GetDomainDetailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.GetDomainDetailInput, ...func(*route53domains.Options)) (*route53domains.GetDomainDetailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.GetDomainDetailInput, ...func(*route53domains.Options)) *route53domains.GetDomainDetailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.GetDomainDetailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.GetDomainDetailInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDomainSuggestions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDomainSuggestions(ctx context.Context, params *route53domains.GetDomainSuggestionsInput, optFns ...func(*route53domains.Options)) (*route53domains.GetDomainSuggestionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDomainSuggestions")
	}

	var r0 *route53domains.GetDomainSuggestionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.GetDomainSuggestionsInput, ...func(*route53domains.Options)) (*route53domains.GetDomainSuggestionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.GetDomainSuggestionsInput, ...func(*route53domains.Options)) *route53domains.GetDomainSuggestionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.GetDomainSuggestionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.GetDomainSuggestionsInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationDetail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOperationDetail(ctx context.Context, params *route53domains.GetOperationDetailInput, optFns ...func(*route53domains.Options)) (*route53domains.GetOperationDetailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOperationDetail")
	}

	var r0 *route53domains.GetOperationDetailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.GetOperationDetailInput, ...func(*route53domains.Options)) (*route53domains.GetOperationDetailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.GetOperationDetailInput, ...func(*route53domains.Options)) *route53domains.GetOperationDetailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.GetOperationDetailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.GetOperationDetailInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDomains provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDomains(ctx context.Context, params *route53domains.ListDomainsInput, optFns ...func(*route53domains.Options)) (*route53domains.ListDomainsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDomains")
	}

	var r0 *route53domains.ListDomainsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ListDomainsInput, ...func(*route53domains.Options)) (*route53domains.ListDomainsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ListDomainsInput, ...func(*route53domains.Options)) *route53domains.ListDomainsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.ListDomainsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.ListDomainsInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOperations provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOperations(ctx context.Context, params *route53domains.ListOperationsInput, optFns ...func(*route53domains.Options)) (*route53domains.ListOperationsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOperations")
	}

	var r0 *route53domains.ListOperationsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ListOperationsInput, ...func(*route53domains.Options)) (*route53domains.ListOperationsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ListOperationsInput, ...func(*route53domains.Options)) *route53domains.ListOperationsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.ListOperationsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.ListOperationsInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPrices provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListPrices(ctx context.Context, params *route53domains.ListPricesInput, optFns ...func(*route53domains.Options)) (*route53domains.ListPricesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListPrices")
	}

	var r0 *route53domains.ListPricesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ListPricesInput, ...func(*route53domains.Options)) (*route53domains.ListPricesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ListPricesInput, ...func(*route53domains.Options)) *route53domains.ListPricesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.ListPricesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.ListPricesInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForDomain(ctx context.Context, params *route53domains.ListTagsForDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.ListTagsForDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForDomain")
	}

	var r0 *route53domains.ListTagsForDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ListTagsForDomainInput, ...func(*route53domains.Options)) (*route53domains.ListTagsForDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ListTagsForDomainInput, ...func(*route53domains.Options)) *route53domains.ListTagsForDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.ListTagsForDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.ListTagsForDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() route53domains.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 route53domains.Options
	if rf, ok := ret.Get(0).(func() route53domains.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(route53domains.Options)
	}

	return r0
}

// PushDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PushDomain(ctx context.Context, params *route53domains.PushDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.PushDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PushDomain")
	}

	var r0 *route53domains.PushDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.PushDomainInput, ...func(*route53domains.Options)) (*route53domains.PushDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.PushDomainInput, ...func(*route53domains.Options)) *route53domains.PushDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.PushDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.PushDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RegisterDomain(ctx context.Context, params *route53domains.RegisterDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.RegisterDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RegisterDomain")
	}

	var r0 *route53domains.RegisterDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.RegisterDomainInput, ...func(*route53domains.Options)) (*route53domains.RegisterDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.RegisterDomainInput, ...func(*route53domains.Options)) *route53domains.RegisterDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.RegisterDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.RegisterDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RejectDomainTransferFromAnotherAwsAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RejectDomainTransferFromAnotherAwsAccount(ctx context.Context, params *route53domains.RejectDomainTransferFromAnotherAwsAccountInput, optFns ...func(*route53domains.Options)) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RejectDomainTransferFromAnotherAwsAccount")
	}

	var r0 *route53domains.RejectDomainTransferFromAnotherAwsAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.RejectDomainTransferFromAnotherAwsAccountInput, ...func(*route53domains.Options)) (*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.RejectDomainTransferFromAnotherAwsAccountInput, ...func(*route53domains.Options)) *route53domains.RejectDomainTransferFromAnotherAwsAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.RejectDomainTransferFromAnotherAwsAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.RejectDomainTransferFromAnotherAwsAccountInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenewDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RenewDomain(ctx context.Context, params *route53domains.RenewDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.RenewDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RenewDomain")
	}

	var r0 *route53domains.RenewDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.RenewDomainInput, ...func(*route53domains.Options)) (*route53domains.RenewDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.RenewDomainInput, ...func(*route53domains.Options)) *route53domains.RenewDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.RenewDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.RenewDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendContactReachabilityEmail provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResendContactReachabilityEmail(ctx context.Context, params *route53domains.ResendContactReachabilityEmailInput, optFns ...func(*route53domains.Options)) (*route53domains.ResendContactReachabilityEmailOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResendContactReachabilityEmail")
	}

	var r0 *route53domains.ResendContactReachabilityEmailOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ResendContactReachabilityEmailInput, ...func(*route53domains.Options)) (*route53domains.ResendContactReachabilityEmailOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ResendContactReachabilityEmailInput, ...func(*route53domains.Options)) *route53domains.ResendContactReachabilityEmailOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.ResendContactReachabilityEmailOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.ResendContactReachabilityEmailInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResendOperationAuthorization provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ResendOperationAuthorization(ctx context.Context, params *route53domains.ResendOperationAuthorizationInput, optFns ...func(*route53domains.Options)) (*route53domains.ResendOperationAuthorizationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ResendOperationAuthorization")
	}

	var r0 *route53domains.ResendOperationAuthorizationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ResendOperationAuthorizationInput, ...func(*route53domains.Options)) (*route53domains.ResendOperationAuthorizationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ResendOperationAuthorizationInput, ...func(*route53domains.Options)) *route53domains.ResendOperationAuthorizationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.ResendOperationAuthorizationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.ResendOperationAuthorizationInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveDomainAuthCode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RetrieveDomainAuthCode(ctx context.Context, params *route53domains.RetrieveDomainAuthCodeInput, optFns ...func(*route53domains.Options)) (*route53domains.RetrieveDomainAuthCodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RetrieveDomainAuthCode")
	}

	var r0 *route53domains.RetrieveDomainAuthCodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.RetrieveDomainAuthCodeInput, ...func(*route53domains.Options)) (*route53domains.RetrieveDomainAuthCodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.RetrieveDomainAuthCodeInput, ...func(*route53domains.Options)) *route53domains.RetrieveDomainAuthCodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.RetrieveDomainAuthCodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.RetrieveDomainAuthCodeInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TransferDomain(ctx context.Context, params *route53domains.TransferDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.TransferDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TransferDomain")
	}

	var r0 *route53domains.TransferDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.TransferDomainInput, ...func(*route53domains.Options)) (*route53domains.TransferDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.TransferDomainInput, ...func(*route53domains.Options)) *route53domains.TransferDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.TransferDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.TransferDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferDomainToAnotherAwsAccount provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TransferDomainToAnotherAwsAccount(ctx context.Context, params *route53domains.TransferDomainToAnotherAwsAccountInput, optFns ...func(*route53domains.Options)) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TransferDomainToAnotherAwsAccount")
	}

	var r0 *route53domains.TransferDomainToAnotherAwsAccountOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.TransferDomainToAnotherAwsAccountInput, ...func(*route53domains.Options)) (*route53domains.TransferDomainToAnotherAwsAccountOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.TransferDomainToAnotherAwsAccountInput, ...func(*route53domains.Options)) *route53domains.TransferDomainToAnotherAwsAccountOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.TransferDomainToAnotherAwsAccountOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.TransferDomainToAnotherAwsAccountInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainContact provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainContact(ctx context.Context, params *route53domains.UpdateDomainContactInput, optFns ...func(*route53domains.Options)) (*route53domains.UpdateDomainContactOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainContact")
	}

	var r0 *route53domains.UpdateDomainContactOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.UpdateDomainContactInput, ...func(*route53domains.Options)) (*route53domains.UpdateDomainContactOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.UpdateDomainContactInput, ...func(*route53domains.Options)) *route53domains.UpdateDomainContactOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.UpdateDomainContactOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.UpdateDomainContactInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainContactPrivacy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainContactPrivacy(ctx context.Context, params *route53domains.UpdateDomainContactPrivacyInput, optFns ...func(*route53domains.Options)) (*route53domains.UpdateDomainContactPrivacyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainContactPrivacy")
	}

	var r0 *route53domains.UpdateDomainContactPrivacyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.UpdateDomainContactPrivacyInput, ...func(*route53domains.Options)) (*route53domains.UpdateDomainContactPrivacyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.UpdateDomainContactPrivacyInput, ...func(*route53domains.Options)) *route53domains.UpdateDomainContactPrivacyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.UpdateDomainContactPrivacyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.UpdateDomainContactPrivacyInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateDomainNameservers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateDomainNameservers(ctx context.Context, params *route53domains.UpdateDomainNameserversInput, optFns ...func(*route53domains.Options)) (*route53domains.UpdateDomainNameserversOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateDomainNameservers")
	}

	var r0 *route53domains.UpdateDomainNameserversOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.UpdateDomainNameserversInput, ...func(*route53domains.Options)) (*route53domains.UpdateDomainNameserversOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.UpdateDomainNameserversInput, ...func(*route53domains.Options)) *route53domains.UpdateDomainNameserversOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.UpdateDomainNameserversOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.UpdateDomainNameserversInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTagsForDomain provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateTagsForDomain(ctx context.Context, params *route53domains.UpdateTagsForDomainInput, optFns ...func(*route53domains.Options)) (*route53domains.UpdateTagsForDomainOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTagsForDomain")
	}

	var r0 *route53domains.UpdateTagsForDomainOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.UpdateTagsForDomainInput, ...func(*route53domains.Options)) (*route53domains.UpdateTagsForDomainOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.UpdateTagsForDomainInput, ...func(*route53domains.Options)) *route53domains.UpdateTagsForDomainOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.UpdateTagsForDomainOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.UpdateTagsForDomainInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ViewBilling provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ViewBilling(ctx context.Context, params *route53domains.ViewBillingInput, optFns ...func(*route53domains.Options)) (*route53domains.ViewBillingOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ViewBilling")
	}

	var r0 *route53domains.ViewBillingOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ViewBillingInput, ...func(*route53domains.Options)) (*route53domains.ViewBillingOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *route53domains.ViewBillingInput, ...func(*route53domains.Options)) *route53domains.ViewBillingOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*route53domains.ViewBillingOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *route53domains.ViewBillingInput, ...func(*route53domains.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
