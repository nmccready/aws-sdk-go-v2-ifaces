// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"

	odb "github.com/aws/aws-sdk-go-v2/service/odb"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// AcceptMarketplaceRegistration provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) AcceptMarketplaceRegistration(ctx context.Context, params *odb.AcceptMarketplaceRegistrationInput, optFns ...func(*odb.Options)) (*odb.AcceptMarketplaceRegistrationOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for AcceptMarketplaceRegistration")
	}

	var r0 *odb.AcceptMarketplaceRegistrationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.AcceptMarketplaceRegistrationInput, ...func(*odb.Options)) (*odb.AcceptMarketplaceRegistrationOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.AcceptMarketplaceRegistrationInput, ...func(*odb.Options)) *odb.AcceptMarketplaceRegistrationOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.AcceptMarketplaceRegistrationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.AcceptMarketplaceRegistrationInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudAutonomousVmCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCloudAutonomousVmCluster(ctx context.Context, params *odb.CreateCloudAutonomousVmClusterInput, optFns ...func(*odb.Options)) (*odb.CreateCloudAutonomousVmClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudAutonomousVmCluster")
	}

	var r0 *odb.CreateCloudAutonomousVmClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateCloudAutonomousVmClusterInput, ...func(*odb.Options)) (*odb.CreateCloudAutonomousVmClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateCloudAutonomousVmClusterInput, ...func(*odb.Options)) *odb.CreateCloudAutonomousVmClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.CreateCloudAutonomousVmClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.CreateCloudAutonomousVmClusterInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudExadataInfrastructure provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCloudExadataInfrastructure(ctx context.Context, params *odb.CreateCloudExadataInfrastructureInput, optFns ...func(*odb.Options)) (*odb.CreateCloudExadataInfrastructureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudExadataInfrastructure")
	}

	var r0 *odb.CreateCloudExadataInfrastructureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateCloudExadataInfrastructureInput, ...func(*odb.Options)) (*odb.CreateCloudExadataInfrastructureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateCloudExadataInfrastructureInput, ...func(*odb.Options)) *odb.CreateCloudExadataInfrastructureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.CreateCloudExadataInfrastructureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.CreateCloudExadataInfrastructureInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateCloudVmCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateCloudVmCluster(ctx context.Context, params *odb.CreateCloudVmClusterInput, optFns ...func(*odb.Options)) (*odb.CreateCloudVmClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateCloudVmCluster")
	}

	var r0 *odb.CreateCloudVmClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateCloudVmClusterInput, ...func(*odb.Options)) (*odb.CreateCloudVmClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateCloudVmClusterInput, ...func(*odb.Options)) *odb.CreateCloudVmClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.CreateCloudVmClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.CreateCloudVmClusterInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOdbNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOdbNetwork(ctx context.Context, params *odb.CreateOdbNetworkInput, optFns ...func(*odb.Options)) (*odb.CreateOdbNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOdbNetwork")
	}

	var r0 *odb.CreateOdbNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateOdbNetworkInput, ...func(*odb.Options)) (*odb.CreateOdbNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateOdbNetworkInput, ...func(*odb.Options)) *odb.CreateOdbNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.CreateOdbNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.CreateOdbNetworkInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOdbPeeringConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateOdbPeeringConnection(ctx context.Context, params *odb.CreateOdbPeeringConnectionInput, optFns ...func(*odb.Options)) (*odb.CreateOdbPeeringConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateOdbPeeringConnection")
	}

	var r0 *odb.CreateOdbPeeringConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateOdbPeeringConnectionInput, ...func(*odb.Options)) (*odb.CreateOdbPeeringConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.CreateOdbPeeringConnectionInput, ...func(*odb.Options)) *odb.CreateOdbPeeringConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.CreateOdbPeeringConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.CreateOdbPeeringConnectionInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCloudAutonomousVmCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCloudAutonomousVmCluster(ctx context.Context, params *odb.DeleteCloudAutonomousVmClusterInput, optFns ...func(*odb.Options)) (*odb.DeleteCloudAutonomousVmClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCloudAutonomousVmCluster")
	}

	var r0 *odb.DeleteCloudAutonomousVmClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteCloudAutonomousVmClusterInput, ...func(*odb.Options)) (*odb.DeleteCloudAutonomousVmClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteCloudAutonomousVmClusterInput, ...func(*odb.Options)) *odb.DeleteCloudAutonomousVmClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.DeleteCloudAutonomousVmClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.DeleteCloudAutonomousVmClusterInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCloudExadataInfrastructure provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCloudExadataInfrastructure(ctx context.Context, params *odb.DeleteCloudExadataInfrastructureInput, optFns ...func(*odb.Options)) (*odb.DeleteCloudExadataInfrastructureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCloudExadataInfrastructure")
	}

	var r0 *odb.DeleteCloudExadataInfrastructureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteCloudExadataInfrastructureInput, ...func(*odb.Options)) (*odb.DeleteCloudExadataInfrastructureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteCloudExadataInfrastructureInput, ...func(*odb.Options)) *odb.DeleteCloudExadataInfrastructureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.DeleteCloudExadataInfrastructureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.DeleteCloudExadataInfrastructureInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteCloudVmCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteCloudVmCluster(ctx context.Context, params *odb.DeleteCloudVmClusterInput, optFns ...func(*odb.Options)) (*odb.DeleteCloudVmClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCloudVmCluster")
	}

	var r0 *odb.DeleteCloudVmClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteCloudVmClusterInput, ...func(*odb.Options)) (*odb.DeleteCloudVmClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteCloudVmClusterInput, ...func(*odb.Options)) *odb.DeleteCloudVmClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.DeleteCloudVmClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.DeleteCloudVmClusterInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOdbNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOdbNetwork(ctx context.Context, params *odb.DeleteOdbNetworkInput, optFns ...func(*odb.Options)) (*odb.DeleteOdbNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOdbNetwork")
	}

	var r0 *odb.DeleteOdbNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteOdbNetworkInput, ...func(*odb.Options)) (*odb.DeleteOdbNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteOdbNetworkInput, ...func(*odb.Options)) *odb.DeleteOdbNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.DeleteOdbNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.DeleteOdbNetworkInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteOdbPeeringConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteOdbPeeringConnection(ctx context.Context, params *odb.DeleteOdbPeeringConnectionInput, optFns ...func(*odb.Options)) (*odb.DeleteOdbPeeringConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOdbPeeringConnection")
	}

	var r0 *odb.DeleteOdbPeeringConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteOdbPeeringConnectionInput, ...func(*odb.Options)) (*odb.DeleteOdbPeeringConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.DeleteOdbPeeringConnectionInput, ...func(*odb.Options)) *odb.DeleteOdbPeeringConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.DeleteOdbPeeringConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.DeleteOdbPeeringConnectionInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudAutonomousVmCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCloudAutonomousVmCluster(ctx context.Context, params *odb.GetCloudAutonomousVmClusterInput, optFns ...func(*odb.Options)) (*odb.GetCloudAutonomousVmClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudAutonomousVmCluster")
	}

	var r0 *odb.GetCloudAutonomousVmClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetCloudAutonomousVmClusterInput, ...func(*odb.Options)) (*odb.GetCloudAutonomousVmClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetCloudAutonomousVmClusterInput, ...func(*odb.Options)) *odb.GetCloudAutonomousVmClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetCloudAutonomousVmClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetCloudAutonomousVmClusterInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudExadataInfrastructure provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCloudExadataInfrastructure(ctx context.Context, params *odb.GetCloudExadataInfrastructureInput, optFns ...func(*odb.Options)) (*odb.GetCloudExadataInfrastructureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudExadataInfrastructure")
	}

	var r0 *odb.GetCloudExadataInfrastructureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetCloudExadataInfrastructureInput, ...func(*odb.Options)) (*odb.GetCloudExadataInfrastructureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetCloudExadataInfrastructureInput, ...func(*odb.Options)) *odb.GetCloudExadataInfrastructureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetCloudExadataInfrastructureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetCloudExadataInfrastructureInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudExadataInfrastructureUnallocatedResources provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCloudExadataInfrastructureUnallocatedResources(ctx context.Context, params *odb.GetCloudExadataInfrastructureUnallocatedResourcesInput, optFns ...func(*odb.Options)) (*odb.GetCloudExadataInfrastructureUnallocatedResourcesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudExadataInfrastructureUnallocatedResources")
	}

	var r0 *odb.GetCloudExadataInfrastructureUnallocatedResourcesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetCloudExadataInfrastructureUnallocatedResourcesInput, ...func(*odb.Options)) (*odb.GetCloudExadataInfrastructureUnallocatedResourcesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetCloudExadataInfrastructureUnallocatedResourcesInput, ...func(*odb.Options)) *odb.GetCloudExadataInfrastructureUnallocatedResourcesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetCloudExadataInfrastructureUnallocatedResourcesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetCloudExadataInfrastructureUnallocatedResourcesInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCloudVmCluster provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetCloudVmCluster(ctx context.Context, params *odb.GetCloudVmClusterInput, optFns ...func(*odb.Options)) (*odb.GetCloudVmClusterOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetCloudVmCluster")
	}

	var r0 *odb.GetCloudVmClusterOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetCloudVmClusterInput, ...func(*odb.Options)) (*odb.GetCloudVmClusterOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetCloudVmClusterInput, ...func(*odb.Options)) *odb.GetCloudVmClusterOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetCloudVmClusterOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetCloudVmClusterInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDbNode(ctx context.Context, params *odb.GetDbNodeInput, optFns ...func(*odb.Options)) (*odb.GetDbNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDbNode")
	}

	var r0 *odb.GetDbNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetDbNodeInput, ...func(*odb.Options)) (*odb.GetDbNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetDbNodeInput, ...func(*odb.Options)) *odb.GetDbNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetDbNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetDbNodeInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDbServer provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDbServer(ctx context.Context, params *odb.GetDbServerInput, optFns ...func(*odb.Options)) (*odb.GetDbServerOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDbServer")
	}

	var r0 *odb.GetDbServerOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetDbServerInput, ...func(*odb.Options)) (*odb.GetDbServerOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetDbServerInput, ...func(*odb.Options)) *odb.GetDbServerOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetDbServerOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetDbServerInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOciOnboardingStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOciOnboardingStatus(ctx context.Context, params *odb.GetOciOnboardingStatusInput, optFns ...func(*odb.Options)) (*odb.GetOciOnboardingStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOciOnboardingStatus")
	}

	var r0 *odb.GetOciOnboardingStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetOciOnboardingStatusInput, ...func(*odb.Options)) (*odb.GetOciOnboardingStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetOciOnboardingStatusInput, ...func(*odb.Options)) *odb.GetOciOnboardingStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetOciOnboardingStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetOciOnboardingStatusInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOdbNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOdbNetwork(ctx context.Context, params *odb.GetOdbNetworkInput, optFns ...func(*odb.Options)) (*odb.GetOdbNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOdbNetwork")
	}

	var r0 *odb.GetOdbNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetOdbNetworkInput, ...func(*odb.Options)) (*odb.GetOdbNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetOdbNetworkInput, ...func(*odb.Options)) *odb.GetOdbNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetOdbNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetOdbNetworkInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOdbPeeringConnection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetOdbPeeringConnection(ctx context.Context, params *odb.GetOdbPeeringConnectionInput, optFns ...func(*odb.Options)) (*odb.GetOdbPeeringConnectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOdbPeeringConnection")
	}

	var r0 *odb.GetOdbPeeringConnectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetOdbPeeringConnectionInput, ...func(*odb.Options)) (*odb.GetOdbPeeringConnectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.GetOdbPeeringConnectionInput, ...func(*odb.Options)) *odb.GetOdbPeeringConnectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.GetOdbPeeringConnectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.GetOdbPeeringConnectionInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeService provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InitializeService(ctx context.Context, params *odb.InitializeServiceInput, optFns ...func(*odb.Options)) (*odb.InitializeServiceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InitializeService")
	}

	var r0 *odb.InitializeServiceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.InitializeServiceInput, ...func(*odb.Options)) (*odb.InitializeServiceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.InitializeServiceInput, ...func(*odb.Options)) *odb.InitializeServiceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.InitializeServiceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.InitializeServiceInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListAutonomousVirtualMachines provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListAutonomousVirtualMachines(ctx context.Context, params *odb.ListAutonomousVirtualMachinesInput, optFns ...func(*odb.Options)) (*odb.ListAutonomousVirtualMachinesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListAutonomousVirtualMachines")
	}

	var r0 *odb.ListAutonomousVirtualMachinesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListAutonomousVirtualMachinesInput, ...func(*odb.Options)) (*odb.ListAutonomousVirtualMachinesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListAutonomousVirtualMachinesInput, ...func(*odb.Options)) *odb.ListAutonomousVirtualMachinesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListAutonomousVirtualMachinesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListAutonomousVirtualMachinesInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCloudAutonomousVmClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCloudAutonomousVmClusters(ctx context.Context, params *odb.ListCloudAutonomousVmClustersInput, optFns ...func(*odb.Options)) (*odb.ListCloudAutonomousVmClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCloudAutonomousVmClusters")
	}

	var r0 *odb.ListCloudAutonomousVmClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListCloudAutonomousVmClustersInput, ...func(*odb.Options)) (*odb.ListCloudAutonomousVmClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListCloudAutonomousVmClustersInput, ...func(*odb.Options)) *odb.ListCloudAutonomousVmClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListCloudAutonomousVmClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListCloudAutonomousVmClustersInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCloudExadataInfrastructures provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCloudExadataInfrastructures(ctx context.Context, params *odb.ListCloudExadataInfrastructuresInput, optFns ...func(*odb.Options)) (*odb.ListCloudExadataInfrastructuresOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCloudExadataInfrastructures")
	}

	var r0 *odb.ListCloudExadataInfrastructuresOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListCloudExadataInfrastructuresInput, ...func(*odb.Options)) (*odb.ListCloudExadataInfrastructuresOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListCloudExadataInfrastructuresInput, ...func(*odb.Options)) *odb.ListCloudExadataInfrastructuresOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListCloudExadataInfrastructuresOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListCloudExadataInfrastructuresInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListCloudVmClusters provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListCloudVmClusters(ctx context.Context, params *odb.ListCloudVmClustersInput, optFns ...func(*odb.Options)) (*odb.ListCloudVmClustersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListCloudVmClusters")
	}

	var r0 *odb.ListCloudVmClustersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListCloudVmClustersInput, ...func(*odb.Options)) (*odb.ListCloudVmClustersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListCloudVmClustersInput, ...func(*odb.Options)) *odb.ListCloudVmClustersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListCloudVmClustersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListCloudVmClustersInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbNodes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDbNodes(ctx context.Context, params *odb.ListDbNodesInput, optFns ...func(*odb.Options)) (*odb.ListDbNodesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDbNodes")
	}

	var r0 *odb.ListDbNodesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListDbNodesInput, ...func(*odb.Options)) (*odb.ListDbNodesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListDbNodesInput, ...func(*odb.Options)) *odb.ListDbNodesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListDbNodesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListDbNodesInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbServers provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDbServers(ctx context.Context, params *odb.ListDbServersInput, optFns ...func(*odb.Options)) (*odb.ListDbServersOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDbServers")
	}

	var r0 *odb.ListDbServersOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListDbServersInput, ...func(*odb.Options)) (*odb.ListDbServersOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListDbServersInput, ...func(*odb.Options)) *odb.ListDbServersOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListDbServersOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListDbServersInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListDbSystemShapes provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListDbSystemShapes(ctx context.Context, params *odb.ListDbSystemShapesInput, optFns ...func(*odb.Options)) (*odb.ListDbSystemShapesOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListDbSystemShapes")
	}

	var r0 *odb.ListDbSystemShapesOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListDbSystemShapesInput, ...func(*odb.Options)) (*odb.ListDbSystemShapesOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListDbSystemShapesInput, ...func(*odb.Options)) *odb.ListDbSystemShapesOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListDbSystemShapesOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListDbSystemShapesInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListGiVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListGiVersions(ctx context.Context, params *odb.ListGiVersionsInput, optFns ...func(*odb.Options)) (*odb.ListGiVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListGiVersions")
	}

	var r0 *odb.ListGiVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListGiVersionsInput, ...func(*odb.Options)) (*odb.ListGiVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListGiVersionsInput, ...func(*odb.Options)) *odb.ListGiVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListGiVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListGiVersionsInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOdbNetworks provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOdbNetworks(ctx context.Context, params *odb.ListOdbNetworksInput, optFns ...func(*odb.Options)) (*odb.ListOdbNetworksOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOdbNetworks")
	}

	var r0 *odb.ListOdbNetworksOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListOdbNetworksInput, ...func(*odb.Options)) (*odb.ListOdbNetworksOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListOdbNetworksInput, ...func(*odb.Options)) *odb.ListOdbNetworksOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListOdbNetworksOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListOdbNetworksInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListOdbPeeringConnections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListOdbPeeringConnections(ctx context.Context, params *odb.ListOdbPeeringConnectionsInput, optFns ...func(*odb.Options)) (*odb.ListOdbPeeringConnectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListOdbPeeringConnections")
	}

	var r0 *odb.ListOdbPeeringConnectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListOdbPeeringConnectionsInput, ...func(*odb.Options)) (*odb.ListOdbPeeringConnectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListOdbPeeringConnectionsInput, ...func(*odb.Options)) *odb.ListOdbPeeringConnectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListOdbPeeringConnectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListOdbPeeringConnectionsInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListSystemVersions provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListSystemVersions(ctx context.Context, params *odb.ListSystemVersionsInput, optFns ...func(*odb.Options)) (*odb.ListSystemVersionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListSystemVersions")
	}

	var r0 *odb.ListSystemVersionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListSystemVersionsInput, ...func(*odb.Options)) (*odb.ListSystemVersionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListSystemVersionsInput, ...func(*odb.Options)) *odb.ListSystemVersionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListSystemVersionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListSystemVersionsInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *odb.ListTagsForResourceInput, optFns ...func(*odb.Options)) (*odb.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *odb.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListTagsForResourceInput, ...func(*odb.Options)) (*odb.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.ListTagsForResourceInput, ...func(*odb.Options)) *odb.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.ListTagsForResourceInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() odb.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 odb.Options
	if rf, ok := ret.Get(0).(func() odb.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(odb.Options)
	}

	return r0
}

// RebootDbNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RebootDbNode(ctx context.Context, params *odb.RebootDbNodeInput, optFns ...func(*odb.Options)) (*odb.RebootDbNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RebootDbNode")
	}

	var r0 *odb.RebootDbNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.RebootDbNodeInput, ...func(*odb.Options)) (*odb.RebootDbNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.RebootDbNodeInput, ...func(*odb.Options)) *odb.RebootDbNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.RebootDbNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.RebootDbNodeInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartDbNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartDbNode(ctx context.Context, params *odb.StartDbNodeInput, optFns ...func(*odb.Options)) (*odb.StartDbNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartDbNode")
	}

	var r0 *odb.StartDbNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.StartDbNodeInput, ...func(*odb.Options)) (*odb.StartDbNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.StartDbNodeInput, ...func(*odb.Options)) *odb.StartDbNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.StartDbNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.StartDbNodeInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopDbNode provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopDbNode(ctx context.Context, params *odb.StopDbNodeInput, optFns ...func(*odb.Options)) (*odb.StopDbNodeOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopDbNode")
	}

	var r0 *odb.StopDbNodeOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.StopDbNodeInput, ...func(*odb.Options)) (*odb.StopDbNodeOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.StopDbNodeInput, ...func(*odb.Options)) *odb.StopDbNodeOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.StopDbNodeOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.StopDbNodeInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *odb.TagResourceInput, optFns ...func(*odb.Options)) (*odb.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *odb.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.TagResourceInput, ...func(*odb.Options)) (*odb.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.TagResourceInput, ...func(*odb.Options)) *odb.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.TagResourceInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *odb.UntagResourceInput, optFns ...func(*odb.Options)) (*odb.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *odb.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.UntagResourceInput, ...func(*odb.Options)) (*odb.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.UntagResourceInput, ...func(*odb.Options)) *odb.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.UntagResourceInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateCloudExadataInfrastructure provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateCloudExadataInfrastructure(ctx context.Context, params *odb.UpdateCloudExadataInfrastructureInput, optFns ...func(*odb.Options)) (*odb.UpdateCloudExadataInfrastructureOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCloudExadataInfrastructure")
	}

	var r0 *odb.UpdateCloudExadataInfrastructureOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.UpdateCloudExadataInfrastructureInput, ...func(*odb.Options)) (*odb.UpdateCloudExadataInfrastructureOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.UpdateCloudExadataInfrastructureInput, ...func(*odb.Options)) *odb.UpdateCloudExadataInfrastructureOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.UpdateCloudExadataInfrastructureOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.UpdateCloudExadataInfrastructureInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateOdbNetwork provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateOdbNetwork(ctx context.Context, params *odb.UpdateOdbNetworkInput, optFns ...func(*odb.Options)) (*odb.UpdateOdbNetworkOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateOdbNetwork")
	}

	var r0 *odb.UpdateOdbNetworkOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *odb.UpdateOdbNetworkInput, ...func(*odb.Options)) (*odb.UpdateOdbNetworkOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *odb.UpdateOdbNetworkInput, ...func(*odb.Options)) *odb.UpdateOdbNetworkOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*odb.UpdateOdbNetworkOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *odb.UpdateOdbNetworkInput, ...func(*odb.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
