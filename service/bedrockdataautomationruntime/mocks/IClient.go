// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	bedrockdataautomationruntime "github.com/aws/aws-sdk-go-v2/service/bedrockdataautomationruntime"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// GetDataAutomationStatus provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetDataAutomationStatus(ctx context.Context, params *bedrockdataautomationruntime.GetDataAutomationStatusInput, optFns ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.GetDataAutomationStatusOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetDataAutomationStatus")
	}

	var r0 *bedrockdataautomationruntime.GetDataAutomationStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.GetDataAutomationStatusInput, ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.GetDataAutomationStatusOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.GetDataAutomationStatusInput, ...func(*bedrockdataautomationruntime.Options)) *bedrockdataautomationruntime.GetDataAutomationStatusOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockdataautomationruntime.GetDataAutomationStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockdataautomationruntime.GetDataAutomationStatusInput, ...func(*bedrockdataautomationruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InvokeDataAutomationAsync provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) InvokeDataAutomationAsync(ctx context.Context, params *bedrockdataautomationruntime.InvokeDataAutomationAsyncInput, optFns ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.InvokeDataAutomationAsyncOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for InvokeDataAutomationAsync")
	}

	var r0 *bedrockdataautomationruntime.InvokeDataAutomationAsyncOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.InvokeDataAutomationAsyncInput, ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.InvokeDataAutomationAsyncOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.InvokeDataAutomationAsyncInput, ...func(*bedrockdataautomationruntime.Options)) *bedrockdataautomationruntime.InvokeDataAutomationAsyncOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockdataautomationruntime.InvokeDataAutomationAsyncOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockdataautomationruntime.InvokeDataAutomationAsyncInput, ...func(*bedrockdataautomationruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *bedrockdataautomationruntime.ListTagsForResourceInput, optFns ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *bedrockdataautomationruntime.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.ListTagsForResourceInput, ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.ListTagsForResourceInput, ...func(*bedrockdataautomationruntime.Options)) *bedrockdataautomationruntime.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockdataautomationruntime.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockdataautomationruntime.ListTagsForResourceInput, ...func(*bedrockdataautomationruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() bedrockdataautomationruntime.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 bedrockdataautomationruntime.Options
	if rf, ok := ret.Get(0).(func() bedrockdataautomationruntime.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bedrockdataautomationruntime.Options)
	}

	return r0
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *bedrockdataautomationruntime.TagResourceInput, optFns ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *bedrockdataautomationruntime.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.TagResourceInput, ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.TagResourceInput, ...func(*bedrockdataautomationruntime.Options)) *bedrockdataautomationruntime.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockdataautomationruntime.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockdataautomationruntime.TagResourceInput, ...func(*bedrockdataautomationruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *bedrockdataautomationruntime.UntagResourceInput, optFns ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *bedrockdataautomationruntime.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.UntagResourceInput, ...func(*bedrockdataautomationruntime.Options)) (*bedrockdataautomationruntime.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *bedrockdataautomationruntime.UntagResourceInput, ...func(*bedrockdataautomationruntime.Options)) *bedrockdataautomationruntime.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bedrockdataautomationruntime.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *bedrockdataautomationruntime.UntagResourceInput, ...func(*bedrockdataautomationruntime.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
