// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	amplifybackend "github.com/aws/aws-sdk-go-v2/service/amplifybackend"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CloneBackend provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CloneBackend(ctx context.Context, params *amplifybackend.CloneBackendInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.CloneBackendOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CloneBackend")
	}

	var r0 *amplifybackend.CloneBackendOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CloneBackendInput, ...func(*amplifybackend.Options)) (*amplifybackend.CloneBackendOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CloneBackendInput, ...func(*amplifybackend.Options)) *amplifybackend.CloneBackendOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.CloneBackendOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.CloneBackendInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackend provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackend(ctx context.Context, params *amplifybackend.CreateBackendInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackend")
	}

	var r0 *amplifybackend.CreateBackendOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendInput, ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendInput, ...func(*amplifybackend.Options)) *amplifybackend.CreateBackendOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.CreateBackendOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.CreateBackendInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackendAPI provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackendAPI(ctx context.Context, params *amplifybackend.CreateBackendAPIInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendAPIOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackendAPI")
	}

	var r0 *amplifybackend.CreateBackendAPIOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendAPIInput, ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendAPIOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendAPIInput, ...func(*amplifybackend.Options)) *amplifybackend.CreateBackendAPIOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.CreateBackendAPIOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.CreateBackendAPIInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackendAuth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackendAuth(ctx context.Context, params *amplifybackend.CreateBackendAuthInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendAuthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackendAuth")
	}

	var r0 *amplifybackend.CreateBackendAuthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendAuthInput, ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendAuthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendAuthInput, ...func(*amplifybackend.Options)) *amplifybackend.CreateBackendAuthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.CreateBackendAuthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.CreateBackendAuthInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackendConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackendConfig(ctx context.Context, params *amplifybackend.CreateBackendConfigInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackendConfig")
	}

	var r0 *amplifybackend.CreateBackendConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendConfigInput, ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendConfigInput, ...func(*amplifybackend.Options)) *amplifybackend.CreateBackendConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.CreateBackendConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.CreateBackendConfigInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBackendStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateBackendStorage(ctx context.Context, params *amplifybackend.CreateBackendStorageInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateBackendStorage")
	}

	var r0 *amplifybackend.CreateBackendStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendStorageInput, ...func(*amplifybackend.Options)) (*amplifybackend.CreateBackendStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateBackendStorageInput, ...func(*amplifybackend.Options)) *amplifybackend.CreateBackendStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.CreateBackendStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.CreateBackendStorageInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateToken(ctx context.Context, params *amplifybackend.CreateTokenInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.CreateTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *amplifybackend.CreateTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateTokenInput, ...func(*amplifybackend.Options)) (*amplifybackend.CreateTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.CreateTokenInput, ...func(*amplifybackend.Options)) *amplifybackend.CreateTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.CreateTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.CreateTokenInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackend provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackend(ctx context.Context, params *amplifybackend.DeleteBackendInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.DeleteBackendOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackend")
	}

	var r0 *amplifybackend.DeleteBackendOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteBackendInput, ...func(*amplifybackend.Options)) (*amplifybackend.DeleteBackendOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteBackendInput, ...func(*amplifybackend.Options)) *amplifybackend.DeleteBackendOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.DeleteBackendOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.DeleteBackendInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackendAPI provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackendAPI(ctx context.Context, params *amplifybackend.DeleteBackendAPIInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.DeleteBackendAPIOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackendAPI")
	}

	var r0 *amplifybackend.DeleteBackendAPIOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteBackendAPIInput, ...func(*amplifybackend.Options)) (*amplifybackend.DeleteBackendAPIOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteBackendAPIInput, ...func(*amplifybackend.Options)) *amplifybackend.DeleteBackendAPIOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.DeleteBackendAPIOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.DeleteBackendAPIInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackendAuth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackendAuth(ctx context.Context, params *amplifybackend.DeleteBackendAuthInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.DeleteBackendAuthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackendAuth")
	}

	var r0 *amplifybackend.DeleteBackendAuthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteBackendAuthInput, ...func(*amplifybackend.Options)) (*amplifybackend.DeleteBackendAuthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteBackendAuthInput, ...func(*amplifybackend.Options)) *amplifybackend.DeleteBackendAuthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.DeleteBackendAuthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.DeleteBackendAuthInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBackendStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteBackendStorage(ctx context.Context, params *amplifybackend.DeleteBackendStorageInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.DeleteBackendStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBackendStorage")
	}

	var r0 *amplifybackend.DeleteBackendStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteBackendStorageInput, ...func(*amplifybackend.Options)) (*amplifybackend.DeleteBackendStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteBackendStorageInput, ...func(*amplifybackend.Options)) *amplifybackend.DeleteBackendStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.DeleteBackendStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.DeleteBackendStorageInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteToken(ctx context.Context, params *amplifybackend.DeleteTokenInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.DeleteTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteToken")
	}

	var r0 *amplifybackend.DeleteTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteTokenInput, ...func(*amplifybackend.Options)) (*amplifybackend.DeleteTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.DeleteTokenInput, ...func(*amplifybackend.Options)) *amplifybackend.DeleteTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.DeleteTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.DeleteTokenInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GenerateBackendAPIModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GenerateBackendAPIModels(ctx context.Context, params *amplifybackend.GenerateBackendAPIModelsInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.GenerateBackendAPIModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GenerateBackendAPIModels")
	}

	var r0 *amplifybackend.GenerateBackendAPIModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GenerateBackendAPIModelsInput, ...func(*amplifybackend.Options)) (*amplifybackend.GenerateBackendAPIModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GenerateBackendAPIModelsInput, ...func(*amplifybackend.Options)) *amplifybackend.GenerateBackendAPIModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.GenerateBackendAPIModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.GenerateBackendAPIModelsInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackend provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackend(ctx context.Context, params *amplifybackend.GetBackendInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackend")
	}

	var r0 *amplifybackend.GetBackendOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendInput, ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendInput, ...func(*amplifybackend.Options)) *amplifybackend.GetBackendOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.GetBackendOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.GetBackendInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackendAPI provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackendAPI(ctx context.Context, params *amplifybackend.GetBackendAPIInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendAPIOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackendAPI")
	}

	var r0 *amplifybackend.GetBackendAPIOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendAPIInput, ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendAPIOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendAPIInput, ...func(*amplifybackend.Options)) *amplifybackend.GetBackendAPIOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.GetBackendAPIOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.GetBackendAPIInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackendAPIModels provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackendAPIModels(ctx context.Context, params *amplifybackend.GetBackendAPIModelsInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendAPIModelsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackendAPIModels")
	}

	var r0 *amplifybackend.GetBackendAPIModelsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendAPIModelsInput, ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendAPIModelsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendAPIModelsInput, ...func(*amplifybackend.Options)) *amplifybackend.GetBackendAPIModelsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.GetBackendAPIModelsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.GetBackendAPIModelsInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackendAuth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackendAuth(ctx context.Context, params *amplifybackend.GetBackendAuthInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendAuthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackendAuth")
	}

	var r0 *amplifybackend.GetBackendAuthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendAuthInput, ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendAuthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendAuthInput, ...func(*amplifybackend.Options)) *amplifybackend.GetBackendAuthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.GetBackendAuthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.GetBackendAuthInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackendJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackendJob(ctx context.Context, params *amplifybackend.GetBackendJobInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackendJob")
	}

	var r0 *amplifybackend.GetBackendJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendJobInput, ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendJobInput, ...func(*amplifybackend.Options)) *amplifybackend.GetBackendJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.GetBackendJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.GetBackendJobInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBackendStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetBackendStorage(ctx context.Context, params *amplifybackend.GetBackendStorageInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetBackendStorage")
	}

	var r0 *amplifybackend.GetBackendStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendStorageInput, ...func(*amplifybackend.Options)) (*amplifybackend.GetBackendStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetBackendStorageInput, ...func(*amplifybackend.Options)) *amplifybackend.GetBackendStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.GetBackendStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.GetBackendStorageInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetToken provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetToken(ctx context.Context, params *amplifybackend.GetTokenInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.GetTokenOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 *amplifybackend.GetTokenOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetTokenInput, ...func(*amplifybackend.Options)) (*amplifybackend.GetTokenOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.GetTokenInput, ...func(*amplifybackend.Options)) *amplifybackend.GetTokenOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.GetTokenOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.GetTokenInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportBackendAuth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportBackendAuth(ctx context.Context, params *amplifybackend.ImportBackendAuthInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.ImportBackendAuthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportBackendAuth")
	}

	var r0 *amplifybackend.ImportBackendAuthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.ImportBackendAuthInput, ...func(*amplifybackend.Options)) (*amplifybackend.ImportBackendAuthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.ImportBackendAuthInput, ...func(*amplifybackend.Options)) *amplifybackend.ImportBackendAuthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.ImportBackendAuthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.ImportBackendAuthInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ImportBackendStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ImportBackendStorage(ctx context.Context, params *amplifybackend.ImportBackendStorageInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.ImportBackendStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ImportBackendStorage")
	}

	var r0 *amplifybackend.ImportBackendStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.ImportBackendStorageInput, ...func(*amplifybackend.Options)) (*amplifybackend.ImportBackendStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.ImportBackendStorageInput, ...func(*amplifybackend.Options)) *amplifybackend.ImportBackendStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.ImportBackendStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.ImportBackendStorageInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListBackendJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListBackendJobs(ctx context.Context, params *amplifybackend.ListBackendJobsInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.ListBackendJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListBackendJobs")
	}

	var r0 *amplifybackend.ListBackendJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.ListBackendJobsInput, ...func(*amplifybackend.Options)) (*amplifybackend.ListBackendJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.ListBackendJobsInput, ...func(*amplifybackend.Options)) *amplifybackend.ListBackendJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.ListBackendJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.ListBackendJobsInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListS3Buckets provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListS3Buckets(ctx context.Context, params *amplifybackend.ListS3BucketsInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.ListS3BucketsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListS3Buckets")
	}

	var r0 *amplifybackend.ListS3BucketsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.ListS3BucketsInput, ...func(*amplifybackend.Options)) (*amplifybackend.ListS3BucketsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.ListS3BucketsInput, ...func(*amplifybackend.Options)) *amplifybackend.ListS3BucketsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.ListS3BucketsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.ListS3BucketsInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() amplifybackend.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 amplifybackend.Options
	if rf, ok := ret.Get(0).(func() amplifybackend.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(amplifybackend.Options)
	}

	return r0
}

// RemoveAllBackends provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveAllBackends(ctx context.Context, params *amplifybackend.RemoveAllBackendsInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.RemoveAllBackendsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveAllBackends")
	}

	var r0 *amplifybackend.RemoveAllBackendsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.RemoveAllBackendsInput, ...func(*amplifybackend.Options)) (*amplifybackend.RemoveAllBackendsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.RemoveAllBackendsInput, ...func(*amplifybackend.Options)) *amplifybackend.RemoveAllBackendsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.RemoveAllBackendsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.RemoveAllBackendsInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveBackendConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) RemoveBackendConfig(ctx context.Context, params *amplifybackend.RemoveBackendConfigInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.RemoveBackendConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for RemoveBackendConfig")
	}

	var r0 *amplifybackend.RemoveBackendConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.RemoveBackendConfigInput, ...func(*amplifybackend.Options)) (*amplifybackend.RemoveBackendConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.RemoveBackendConfigInput, ...func(*amplifybackend.Options)) *amplifybackend.RemoveBackendConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.RemoveBackendConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.RemoveBackendConfigInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackendAPI provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBackendAPI(ctx context.Context, params *amplifybackend.UpdateBackendAPIInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendAPIOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackendAPI")
	}

	var r0 *amplifybackend.UpdateBackendAPIOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendAPIInput, ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendAPIOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendAPIInput, ...func(*amplifybackend.Options)) *amplifybackend.UpdateBackendAPIOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.UpdateBackendAPIOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.UpdateBackendAPIInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackendAuth provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBackendAuth(ctx context.Context, params *amplifybackend.UpdateBackendAuthInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendAuthOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackendAuth")
	}

	var r0 *amplifybackend.UpdateBackendAuthOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendAuthInput, ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendAuthOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendAuthInput, ...func(*amplifybackend.Options)) *amplifybackend.UpdateBackendAuthOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.UpdateBackendAuthOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.UpdateBackendAuthInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackendConfig provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBackendConfig(ctx context.Context, params *amplifybackend.UpdateBackendConfigInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendConfigOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackendConfig")
	}

	var r0 *amplifybackend.UpdateBackendConfigOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendConfigInput, ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendConfigOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendConfigInput, ...func(*amplifybackend.Options)) *amplifybackend.UpdateBackendConfigOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.UpdateBackendConfigOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.UpdateBackendConfigInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackendJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBackendJob(ctx context.Context, params *amplifybackend.UpdateBackendJobInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackendJob")
	}

	var r0 *amplifybackend.UpdateBackendJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendJobInput, ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendJobInput, ...func(*amplifybackend.Options)) *amplifybackend.UpdateBackendJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.UpdateBackendJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.UpdateBackendJobInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBackendStorage provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateBackendStorage(ctx context.Context, params *amplifybackend.UpdateBackendStorageInput, optFns ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendStorageOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBackendStorage")
	}

	var r0 *amplifybackend.UpdateBackendStorageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendStorageInput, ...func(*amplifybackend.Options)) (*amplifybackend.UpdateBackendStorageOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *amplifybackend.UpdateBackendStorageInput, ...func(*amplifybackend.Options)) *amplifybackend.UpdateBackendStorageOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*amplifybackend.UpdateBackendStorageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *amplifybackend.UpdateBackendStorageInput, ...func(*amplifybackend.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
