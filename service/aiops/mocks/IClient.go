// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	aiops "github.com/aws/aws-sdk-go-v2/service/aiops"

	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// CreateInvestigationGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) CreateInvestigationGroup(ctx context.Context, params *aiops.CreateInvestigationGroupInput, optFns ...func(*aiops.Options)) (*aiops.CreateInvestigationGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for CreateInvestigationGroup")
	}

	var r0 *aiops.CreateInvestigationGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.CreateInvestigationGroupInput, ...func(*aiops.Options)) (*aiops.CreateInvestigationGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.CreateInvestigationGroupInput, ...func(*aiops.Options)) *aiops.CreateInvestigationGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.CreateInvestigationGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.CreateInvestigationGroupInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvestigationGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInvestigationGroup(ctx context.Context, params *aiops.DeleteInvestigationGroupInput, optFns ...func(*aiops.Options)) (*aiops.DeleteInvestigationGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvestigationGroup")
	}

	var r0 *aiops.DeleteInvestigationGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.DeleteInvestigationGroupInput, ...func(*aiops.Options)) (*aiops.DeleteInvestigationGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.DeleteInvestigationGroupInput, ...func(*aiops.Options)) *aiops.DeleteInvestigationGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.DeleteInvestigationGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.DeleteInvestigationGroupInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteInvestigationGroupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteInvestigationGroupPolicy(ctx context.Context, params *aiops.DeleteInvestigationGroupPolicyInput, optFns ...func(*aiops.Options)) (*aiops.DeleteInvestigationGroupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteInvestigationGroupPolicy")
	}

	var r0 *aiops.DeleteInvestigationGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.DeleteInvestigationGroupPolicyInput, ...func(*aiops.Options)) (*aiops.DeleteInvestigationGroupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.DeleteInvestigationGroupPolicyInput, ...func(*aiops.Options)) *aiops.DeleteInvestigationGroupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.DeleteInvestigationGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.DeleteInvestigationGroupPolicyInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvestigationGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInvestigationGroup(ctx context.Context, params *aiops.GetInvestigationGroupInput, optFns ...func(*aiops.Options)) (*aiops.GetInvestigationGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvestigationGroup")
	}

	var r0 *aiops.GetInvestigationGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.GetInvestigationGroupInput, ...func(*aiops.Options)) (*aiops.GetInvestigationGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.GetInvestigationGroupInput, ...func(*aiops.Options)) *aiops.GetInvestigationGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.GetInvestigationGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.GetInvestigationGroupInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInvestigationGroupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetInvestigationGroupPolicy(ctx context.Context, params *aiops.GetInvestigationGroupPolicyInput, optFns ...func(*aiops.Options)) (*aiops.GetInvestigationGroupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetInvestigationGroupPolicy")
	}

	var r0 *aiops.GetInvestigationGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.GetInvestigationGroupPolicyInput, ...func(*aiops.Options)) (*aiops.GetInvestigationGroupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.GetInvestigationGroupPolicyInput, ...func(*aiops.Options)) *aiops.GetInvestigationGroupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.GetInvestigationGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.GetInvestigationGroupPolicyInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListInvestigationGroups provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListInvestigationGroups(ctx context.Context, params *aiops.ListInvestigationGroupsInput, optFns ...func(*aiops.Options)) (*aiops.ListInvestigationGroupsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListInvestigationGroups")
	}

	var r0 *aiops.ListInvestigationGroupsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.ListInvestigationGroupsInput, ...func(*aiops.Options)) (*aiops.ListInvestigationGroupsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.ListInvestigationGroupsInput, ...func(*aiops.Options)) *aiops.ListInvestigationGroupsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.ListInvestigationGroupsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.ListInvestigationGroupsInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *aiops.ListTagsForResourceInput, optFns ...func(*aiops.Options)) (*aiops.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *aiops.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.ListTagsForResourceInput, ...func(*aiops.Options)) (*aiops.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.ListTagsForResourceInput, ...func(*aiops.Options)) *aiops.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.ListTagsForResourceInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with no fields
func (_m *IClient) Options() aiops.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 aiops.Options
	if rf, ok := ret.Get(0).(func() aiops.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(aiops.Options)
	}

	return r0
}

// PutInvestigationGroupPolicy provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) PutInvestigationGroupPolicy(ctx context.Context, params *aiops.PutInvestigationGroupPolicyInput, optFns ...func(*aiops.Options)) (*aiops.PutInvestigationGroupPolicyOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for PutInvestigationGroupPolicy")
	}

	var r0 *aiops.PutInvestigationGroupPolicyOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.PutInvestigationGroupPolicyInput, ...func(*aiops.Options)) (*aiops.PutInvestigationGroupPolicyOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.PutInvestigationGroupPolicyInput, ...func(*aiops.Options)) *aiops.PutInvestigationGroupPolicyOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.PutInvestigationGroupPolicyOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.PutInvestigationGroupPolicyInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *aiops.TagResourceInput, optFns ...func(*aiops.Options)) (*aiops.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *aiops.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.TagResourceInput, ...func(*aiops.Options)) (*aiops.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.TagResourceInput, ...func(*aiops.Options)) *aiops.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.TagResourceInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *aiops.UntagResourceInput, optFns ...func(*aiops.Options)) (*aiops.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *aiops.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.UntagResourceInput, ...func(*aiops.Options)) (*aiops.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.UntagResourceInput, ...func(*aiops.Options)) *aiops.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.UntagResourceInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateInvestigationGroup provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UpdateInvestigationGroup(ctx context.Context, params *aiops.UpdateInvestigationGroupInput, optFns ...func(*aiops.Options)) (*aiops.UpdateInvestigationGroupOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInvestigationGroup")
	}

	var r0 *aiops.UpdateInvestigationGroupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.UpdateInvestigationGroupInput, ...func(*aiops.Options)) (*aiops.UpdateInvestigationGroupOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *aiops.UpdateInvestigationGroupInput, ...func(*aiops.Options)) *aiops.UpdateInvestigationGroupOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*aiops.UpdateInvestigationGroupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *aiops.UpdateInvestigationGroupInput, ...func(*aiops.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
