// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	sagemakergeospatial "github.com/aws/aws-sdk-go-v2/service/sagemakergeospatial"
	mock "github.com/stretchr/testify/mock"
)

// IClient is an autogenerated mock type for the IClient type
type IClient struct {
	mock.Mock
}

// DeleteEarthObservationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteEarthObservationJob(ctx context.Context, params *sagemakergeospatial.DeleteEarthObservationJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.DeleteEarthObservationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteEarthObservationJob")
	}

	var r0 *sagemakergeospatial.DeleteEarthObservationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.DeleteEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.DeleteEarthObservationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.DeleteEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.DeleteEarthObservationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.DeleteEarthObservationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.DeleteEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVectorEnrichmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) DeleteVectorEnrichmentJob(ctx context.Context, params *sagemakergeospatial.DeleteVectorEnrichmentJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.DeleteVectorEnrichmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for DeleteVectorEnrichmentJob")
	}

	var r0 *sagemakergeospatial.DeleteVectorEnrichmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.DeleteVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.DeleteVectorEnrichmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.DeleteVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.DeleteVectorEnrichmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.DeleteVectorEnrichmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.DeleteVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportEarthObservationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportEarthObservationJob(ctx context.Context, params *sagemakergeospatial.ExportEarthObservationJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ExportEarthObservationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportEarthObservationJob")
	}

	var r0 *sagemakergeospatial.ExportEarthObservationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ExportEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ExportEarthObservationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ExportEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.ExportEarthObservationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.ExportEarthObservationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.ExportEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExportVectorEnrichmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ExportVectorEnrichmentJob(ctx context.Context, params *sagemakergeospatial.ExportVectorEnrichmentJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ExportVectorEnrichmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ExportVectorEnrichmentJob")
	}

	var r0 *sagemakergeospatial.ExportVectorEnrichmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ExportVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ExportVectorEnrichmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ExportVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.ExportVectorEnrichmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.ExportVectorEnrichmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.ExportVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEarthObservationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetEarthObservationJob(ctx context.Context, params *sagemakergeospatial.GetEarthObservationJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.GetEarthObservationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetEarthObservationJob")
	}

	var r0 *sagemakergeospatial.GetEarthObservationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.GetEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.GetEarthObservationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.GetEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.GetEarthObservationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.GetEarthObservationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.GetEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRasterDataCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetRasterDataCollection(ctx context.Context, params *sagemakergeospatial.GetRasterDataCollectionInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.GetRasterDataCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetRasterDataCollection")
	}

	var r0 *sagemakergeospatial.GetRasterDataCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.GetRasterDataCollectionInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.GetRasterDataCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.GetRasterDataCollectionInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.GetRasterDataCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.GetRasterDataCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.GetRasterDataCollectionInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTile provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetTile(ctx context.Context, params *sagemakergeospatial.GetTileInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.GetTileOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetTile")
	}

	var r0 *sagemakergeospatial.GetTileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.GetTileInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.GetTileOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.GetTileInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.GetTileOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.GetTileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.GetTileInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVectorEnrichmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) GetVectorEnrichmentJob(ctx context.Context, params *sagemakergeospatial.GetVectorEnrichmentJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.GetVectorEnrichmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetVectorEnrichmentJob")
	}

	var r0 *sagemakergeospatial.GetVectorEnrichmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.GetVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.GetVectorEnrichmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.GetVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.GetVectorEnrichmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.GetVectorEnrichmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.GetVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListEarthObservationJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListEarthObservationJobs(ctx context.Context, params *sagemakergeospatial.ListEarthObservationJobsInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ListEarthObservationJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListEarthObservationJobs")
	}

	var r0 *sagemakergeospatial.ListEarthObservationJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ListEarthObservationJobsInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ListEarthObservationJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ListEarthObservationJobsInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.ListEarthObservationJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.ListEarthObservationJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.ListEarthObservationJobsInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListRasterDataCollections provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListRasterDataCollections(ctx context.Context, params *sagemakergeospatial.ListRasterDataCollectionsInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ListRasterDataCollectionsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListRasterDataCollections")
	}

	var r0 *sagemakergeospatial.ListRasterDataCollectionsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ListRasterDataCollectionsInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ListRasterDataCollectionsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ListRasterDataCollectionsInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.ListRasterDataCollectionsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.ListRasterDataCollectionsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.ListRasterDataCollectionsInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTagsForResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListTagsForResource(ctx context.Context, params *sagemakergeospatial.ListTagsForResourceInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ListTagsForResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListTagsForResource")
	}

	var r0 *sagemakergeospatial.ListTagsForResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ListTagsForResourceInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ListTagsForResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ListTagsForResourceInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.ListTagsForResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.ListTagsForResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.ListTagsForResourceInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVectorEnrichmentJobs provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) ListVectorEnrichmentJobs(ctx context.Context, params *sagemakergeospatial.ListVectorEnrichmentJobsInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ListVectorEnrichmentJobsOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ListVectorEnrichmentJobs")
	}

	var r0 *sagemakergeospatial.ListVectorEnrichmentJobsOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ListVectorEnrichmentJobsInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.ListVectorEnrichmentJobsOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.ListVectorEnrichmentJobsInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.ListVectorEnrichmentJobsOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.ListVectorEnrichmentJobsOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.ListVectorEnrichmentJobsInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Options provides a mock function with given fields:
func (_m *IClient) Options() sagemakergeospatial.Options {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Options")
	}

	var r0 sagemakergeospatial.Options
	if rf, ok := ret.Get(0).(func() sagemakergeospatial.Options); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(sagemakergeospatial.Options)
	}

	return r0
}

// SearchRasterDataCollection provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) SearchRasterDataCollection(ctx context.Context, params *sagemakergeospatial.SearchRasterDataCollectionInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.SearchRasterDataCollectionOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SearchRasterDataCollection")
	}

	var r0 *sagemakergeospatial.SearchRasterDataCollectionOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.SearchRasterDataCollectionInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.SearchRasterDataCollectionOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.SearchRasterDataCollectionInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.SearchRasterDataCollectionOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.SearchRasterDataCollectionOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.SearchRasterDataCollectionInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartEarthObservationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartEarthObservationJob(ctx context.Context, params *sagemakergeospatial.StartEarthObservationJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.StartEarthObservationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartEarthObservationJob")
	}

	var r0 *sagemakergeospatial.StartEarthObservationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.StartEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.StartEarthObservationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.StartEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.StartEarthObservationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.StartEarthObservationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.StartEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartVectorEnrichmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StartVectorEnrichmentJob(ctx context.Context, params *sagemakergeospatial.StartVectorEnrichmentJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.StartVectorEnrichmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StartVectorEnrichmentJob")
	}

	var r0 *sagemakergeospatial.StartVectorEnrichmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.StartVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.StartVectorEnrichmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.StartVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.StartVectorEnrichmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.StartVectorEnrichmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.StartVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopEarthObservationJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopEarthObservationJob(ctx context.Context, params *sagemakergeospatial.StopEarthObservationJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.StopEarthObservationJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopEarthObservationJob")
	}

	var r0 *sagemakergeospatial.StopEarthObservationJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.StopEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.StopEarthObservationJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.StopEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.StopEarthObservationJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.StopEarthObservationJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.StopEarthObservationJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopVectorEnrichmentJob provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) StopVectorEnrichmentJob(ctx context.Context, params *sagemakergeospatial.StopVectorEnrichmentJobInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.StopVectorEnrichmentJobOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for StopVectorEnrichmentJob")
	}

	var r0 *sagemakergeospatial.StopVectorEnrichmentJobOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.StopVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.StopVectorEnrichmentJobOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.StopVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.StopVectorEnrichmentJobOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.StopVectorEnrichmentJobOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.StopVectorEnrichmentJobInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) TagResource(ctx context.Context, params *sagemakergeospatial.TagResourceInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.TagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for TagResource")
	}

	var r0 *sagemakergeospatial.TagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.TagResourceInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.TagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.TagResourceInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.TagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.TagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.TagResourceInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UntagResource provides a mock function with given fields: ctx, params, optFns
func (_m *IClient) UntagResource(ctx context.Context, params *sagemakergeospatial.UntagResourceInput, optFns ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.UntagResourceOutput, error) {
	_va := make([]interface{}, len(optFns))
	for _i := range optFns {
		_va[_i] = optFns[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, params)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for UntagResource")
	}

	var r0 *sagemakergeospatial.UntagResourceOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.UntagResourceInput, ...func(*sagemakergeospatial.Options)) (*sagemakergeospatial.UntagResourceOutput, error)); ok {
		return rf(ctx, params, optFns...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *sagemakergeospatial.UntagResourceInput, ...func(*sagemakergeospatial.Options)) *sagemakergeospatial.UntagResourceOutput); ok {
		r0 = rf(ctx, params, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sagemakergeospatial.UntagResourceOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *sagemakergeospatial.UntagResourceInput, ...func(*sagemakergeospatial.Options)) error); ok {
		r1 = rf(ctx, params, optFns...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClient creates a new instance of IClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClient {
	mock := &IClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
